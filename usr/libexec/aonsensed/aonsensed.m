uint64_t *sub_100002BF0()
{
  return &qword_100382E60;
}

uint64_t sub_100002BFC()
{
  _BYTE v1[24];

  swift_beginAccess(&qword_100382E60, v1, 0, 0);
  return swift_retain(qword_100382E60);
}

uint64_t sub_100002C40(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  swift_beginAccess(&qword_100382E60, v4, 1, 0);
  v2 = qword_100382E60;
  qword_100382E60 = a1;
  return swift_release(v2);
}

void *sub_100002C8C(uint64_t a1)
{
  swift_beginAccess(&qword_100382E60, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100002CCC()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];

  swift_beginAccess(&qword_100382E60, v4, 1, 0);
  result = qword_100382E60;
  if (qword_100382E60)
    return swift_retain(result);
  v1 = type metadata accessor for Daemon();
  v2 = swift_allocObject(v1, 24, 7);
  sub_100002E28();
  v3 = qword_100382E60;
  qword_100382E60 = v2;
  swift_release(v3);
  result = qword_100382E60;
  if (qword_100382E60)
    return swift_retain(result);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Daemon()
{
  return objc_opt_self(_TtC9aonsensed6Daemon);
}

uint64_t sub_100002D68()
{
  return 0;
}

uint64_t sub_100002D70()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100002DA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release(v3);
}

void *sub_100002DE8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_100002E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v16[24];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(_QWORD *)(v0 + 16) = 0;
  v6 = (uint64_t *)(v0 + 16);
  type metadata accessor for PersistentConfig();
  v7 = static PersistentConfig.instance.getter();
  dispatch thunk of PersistentConfig.subscript.getter();
  swift_release(v7);
  if (v16[0] == 2 || (v16[0] & 1) != 0)
  {
    v8 = corelog.getter((uint64_t)v5);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Enable DataVendorManager on AP", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    type metadata accessor for DataVendorService();
    v12 = DataVendorService.__allocating_init()();
    swift_beginAccess(v6, v16, 1, 0);
    v13 = *v6;
    *v6 = v12;
    swift_release(v13);
  }
  return v1;
}

uint64_t sub_100002FB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t sub_100002FD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

void sub_100002FF8()
{
  sub_100003190();
}

uint64_t sub_10000300C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = corelog.getter((uint64_t)v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Starting in RELEASE", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  result = swift_beginAccess(&qword_100382E60, v13, 1, 0);
  if (!qword_100382E60)
  {
    v9 = type metadata accessor for Daemon();
    v10 = swift_allocObject(v9, 24, 7);
    sub_100002E28();
    v11 = qword_100382E60;
    qword_100382E60 = v10;
    result = swift_release(v11);
    if (!qword_100382E60)
      __break(1u);
  }
  return result;
}

int main(int argc, const char **argv, const char **envp)
{
  sub_100003190();
  return 0;
}

void sub_100003190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;
  char v14;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PersistentConfig();
  v5 = static PersistentConfig.instance.getter();
  dispatch thunk of PersistentConfig.subscript.getter();
  swift_release(v5);
  if (v14 == 2)
  {
    type metadata accessor for PlatformInfo();
    v6 = static PlatformInfo.instance.getter();
    v7 = dispatch thunk of PlatformInfo.isAvailable.getter();
    swift_release(v6);
    if ((v7 & 1) == 0)
    {
LABEL_3:
      v8 = corelog.getter((uint64_t)v4);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Exiting", v11, 2u);
        swift_slowDealloc(v11, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return;
    }
  }
  else if ((v14 & 1) == 0)
  {
    goto LABEL_3;
  }
  v12 = objc_autoreleasePoolPush();
  sub_10000300C();
  if (!v0)
  {
    objc_autoreleasePoolPop(v12);
    dispatch_main();
  }
  objc_autoreleasePoolPop(v12);
  __break(1u);
}

ValueMetadata *type metadata accessor for aonsensed()
{
  return &type metadata for aonsensed;
}

void sub_100003340()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t sub_100003354()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Request(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100387390, (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_Request);
}

uint64_t sub_100003398(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v4 = v1 + *(int *)(result + 20);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000033CC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100003424()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20) + 8) & 1) == 0;
}

uint64_t sub_100003450()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v2 = v0 + *(int *)(result + 20);
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_10000347C()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t sub_1000034AC(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v4 = v1 + *(int *)(result + 24);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000034E0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100003534()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24) + 4) & 1) == 0;
}

uint64_t sub_100003560()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v2 = v0 + *(int *)(result + 24);
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_10000358C()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t sub_1000035BC(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v4 = v1 + *(int *)(result + 28);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000035F0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100003640()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28) + 4) & 1) == 0;
}

uint64_t sub_10000366C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v2 = v0 + *(int *)(result + 28);
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_100003698()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t sub_1000036C0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000036EC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100003738;
}

uint64_t sub_100003738(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + *(int *)(result + 8)) = *(_BYTE *)(result + 12);
  return result;
}

BOOL sub_10000374C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32)) != 5;
}

uint64_t sub_100003774()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 5;
  return result;
}

uint64_t sub_100003798@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v15;

  v3 = sub_1000039AC(&qword_100369E38);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  sub_10000E660(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_100369E38);
  v7 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  *((_BYTE *)a1 + v7[8]) = 2;
  v8 = (char *)a1 + v7[9];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  v9 = (char *)a1 + v7[10];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  v10 = (char *)a1 + v7[11];
  *(_DWORD *)v10 = 0;
  v10[4] = 1;
  v11 = (char *)a1 + v7[12];
  *(_DWORD *)v11 = 0;
  v11[4] = 1;
  v12 = (char *)a1 + v7[13];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = (char *)a1 + v7[14];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  return sub_100015704((uint64_t)v5, &qword_100369E38);
}

uint64_t sub_1000038F8@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;

  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  v2 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  result = UnknownStorage.init()();
  *((_BYTE *)a1 + v2[8]) = 2;
  v4 = (char *)a1 + v2[9];
  *(_DWORD *)v4 = 0;
  v4[4] = 1;
  v5 = (char *)a1 + v2[10];
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  v6 = (char *)a1 + v2[11];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = (char *)a1 + v2[12];
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  v8 = (char *)a1 + v2[13];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = (char *)a1 + v2[14];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  return result;
}

uint64_t sub_1000039AC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003873A0, (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_100003A00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
  sub_100015704(v3, &qword_100369E38);
  sub_100003E08(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*sub_100003A70(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100369E38);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100369E38);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    v9[1] = &_swiftEmptyArrayStorage;
    v9[2] = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    *((_BYTE *)v9 + v6[8]) = 2;
    v11 = (char *)v9 + v6[9];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = (char *)v9 + v6[10];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = (char *)v9 + v6[11];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = (char *)v9 + v6[12];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = (char *)v9 + v6[13];
    *(_QWORD *)v15 = 0;
    v15[8] = 1;
    v16 = (char *)v9 + v6[14];
    *(_QWORD *)v16 = 0;
    v16[8] = 1;
    sub_100015704((uint64_t)v5, &qword_100369E38);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  }
  return sub_100003C10;
}

void sub_100003C10(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100369E38, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

BOOL sub_100003C24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = sub_1000039AC(&qword_100369E38);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  sub_10000E660(v0 + *(int *)(v4 + 36), (uint64_t)v3, &qword_100369E38);
  v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100015704((uint64_t)v3, &qword_100369E38);
  return v6;
}

uint64_t sub_100003CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
  sub_100015704(v1, &qword_100369E38);
  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_100003D30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = sub_1000039AC(&qword_100369E40);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  sub_10000E660(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_100369E40);
  v7 = type metadata accessor for Proto_Gpsd_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for Proto_Gpsd_Request);
  sub_10023A4D0(a1);
  return sub_100015704((uint64_t)v5, &qword_100369E40);
}

uint64_t sub_100003E08(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100003E4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
  sub_100015704(v3, &qword_100369E40);
  sub_100003E08(a1, v3, type metadata accessor for Proto_Gpsd_Request);
  v4 = type metadata accessor for Proto_Gpsd_Request(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*sub_100003EBC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100369E40);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gpsd_Request(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100369E40);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10023A4D0((uint64_t)v9);
    sub_100015704((uint64_t)v5, &qword_100369E40);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Request);
  }
  return sub_100003FD8;
}

void sub_100003FD8(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100369E40, type metadata accessor for Proto_Gpsd_Request);
}

uint64_t sub_100003FEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100004030(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_10000406C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = sub_1000039AC(&qword_100369E40);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  sub_10000E660(v0 + *(int *)(v4 + 40), (uint64_t)v3, &qword_100369E40);
  v5 = type metadata accessor for Proto_Gpsd_Request(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100015704((uint64_t)v3, &qword_100369E40);
  return v6;
}

uint64_t sub_100004120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
  sub_100015704(v1, &qword_100369E40);
  v2 = type metadata accessor for Proto_Gpsd_Request(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t (*sub_100004184())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100004194()
{
  return 0;
}

uint64_t sub_1000041A0(char a1)
{
  return qword_1002C4060[a1];
}

BOOL sub_1000041B4(char *a1, char *a2)
{
  return qword_1002C4060[*a1] == qword_1002C4060[*a2];
}

uint64_t sub_1000041DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100015570();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_100004218(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100004220@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10000E47C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100004244()
{
  char *v0;

  return qword_1002C4060[*v0];
}

uint64_t sub_100004258@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10000E47C(*a1);
  *a2 = result;
  return result;
}

void sub_100004280(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1002C4060[*v1];
}

uint64_t sub_100004298()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32)) & 1;
}

uint64_t sub_1000042BC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000042E8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100004334()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32)) != 2;
}

uint64_t sub_10000435C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_100004380()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t sub_1000043B0(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v4 = v1 + *(int *)(result + 36);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000043E4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100004434()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36) + 4) & 1) == 0;
}

uint64_t sub_100004460()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v2 = v0 + *(int *)(result + 36);
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

float sub_10000448C()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t sub_1000044C0(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v4 = v1 + *(int *)(result + 40);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000044F4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10000454C()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40) + 4) & 1) == 0;
}

uint64_t sub_100004578()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v2 = v0 + *(int *)(result + 40);
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

float sub_1000045A4()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t sub_1000045D8(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v4 = v1 + *(int *)(result + 44);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_10000460C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

uint64_t sub_100004664(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)result + *(int *)(result + 12);
  *(_DWORD *)v1 = *(_DWORD *)(result + 8);
  *(_BYTE *)(v1 + 4) = 0;
  return result;
}

BOOL sub_100004680()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44) + 4) & 1) == 0;
}

uint64_t sub_1000046AC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v2 = v0 + *(int *)(result + 44);
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_1000046D8()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t sub_100004708(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v4 = v1 + *(int *)(result + 48);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_10000473C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10000478C()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48) + 4) & 1) == 0;
}

uint64_t sub_1000047B8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v2 = v0 + *(int *)(result + 48);
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

void *sub_1000047E4()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000047F0()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_1000047F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*v1);
  *v1 = a1;
  return result;
}

uint64_t sub_100004820()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8));
}

uint64_t sub_100004828(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_100004850())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100004860()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100004868(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_100004890())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

double sub_1000048A0()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t sub_1000048D4(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v4 = v1 + *(int *)(result + 52);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100004908(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100004960()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52) + 8) & 1) == 0;
}

uint64_t sub_10000498C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v2 = v0 + *(int *)(result + 52);
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

double sub_1000049B8()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t sub_1000049EC(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v4 = v1 + *(int *)(result + 56);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100004A20(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

uint64_t sub_100004A78(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8) + *(int *)(result + 16);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

BOOL sub_100004A90()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56) + 8) & 1) == 0;
}

uint64_t sub_100004ABC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v2 = v0 + *(int *)(result + 56);
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_100004AE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 28);
  v4 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100004B30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 28);
  v4 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_100004B78())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100004BA0()
{
  return 2;
}

uint64_t sub_100004BA8()
{
  return 0;
}

uint64_t sub_100004BB4@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v3 = a1 + v2[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + v2[8]) = 5;
  v6 = a1 + v2[9];
  v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1 + v2[10];
  v9 = type metadata accessor for Proto_Gpsd_Request(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t sub_100004C7C()
{
  return 0x100000000;
}

uint64_t sub_100004C98()
{
  return 5;
}

uint64_t sub_100004CA0@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, a1);
}

uint64_t sub_100004CAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for Proto_Gpsd_Request, a1);
}

uint64_t sub_100004CB8@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

_UNKNOWN **sub_100004CF8()
{
  return &off_100351D30;
}

void sub_100004D04(_QWORD *a1@<X8>)
{
  *a1 = &off_100351D58;
}

uint64_t sub_100004D14()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t sub_100004D3C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100004D68(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100004DB4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20)) != 5;
}

uint64_t sub_100004DDC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 5;
  return result;
}

uint64_t sub_100004E00()
{
  return sub_100004FD8(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100004E0C(uint64_t a1)
{
  return sub_100005018(a1, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t (*sub_100004E18(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100004E6C()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100004E78()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100004E84()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28));
  if (v1 == 10)
    return 0;
  else
    return v1;
}

uint64_t sub_100004EAC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100004ED8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 10)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100004F24()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28)) != 10;
}

uint64_t sub_100004F4C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 10;
  return result;
}

int *sub_100004F70@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(_BYTE *)(a1 + result[5]) = 5;
  v3 = a1 + result[6];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  *(_BYTE *)(a1 + result[7]) = 10;
  return result;
}

uint64_t sub_100004FC4()
{
  return 10;
}

uint64_t sub_100004FCC()
{
  return sub_100004FD8(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100004FD8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 24));
  if (v2[8])
    return 0;
  else
    return *(_QWORD *)v2;
}

uint64_t sub_10000500C(uint64_t a1)
{
  return sub_100005018(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100005018(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 24);
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_10000504C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000050A0()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

BOOL sub_1000050AC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 24) + 8) & 1) == 0;
}

uint64_t sub_1000050DC()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_1000050E8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 24);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_100005118()
{
  return sub_1000052AC(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100005124(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*sub_100005130(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 28);
  *(_BYTE *)(a1 + 12) = (*(_BYTE *)(v1 + v3) == 2) | *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100005184()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 28)) != 2;
}

uint64_t sub_1000051AC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000051D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t sub_1000051DC(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*sub_1000051E8())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100005210@<X0>(_QWORD *a1@<X8>)
{
  return sub_100005498(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t sub_10000521C()
{
  return sub_100004FD8(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100005228(uint64_t a1)
{
  return sub_100005018(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t (*sub_100005234(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100005288()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100005294()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_1000052A0()
{
  return sub_1000052AC(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_1000052AC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 28));
  return (v2 == 2) | v2 & 1u;
}

uint64_t sub_1000052E0(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_1000052EC(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100005318(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 28);
  *(_BYTE *)(a1 + 12) = (*(_BYTE *)(v1 + v3) == 2) | *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10000536C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 28)) != 2;
}

uint64_t sub_100005394()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000053B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t sub_1000053C4@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_100005410(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_10000541C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_100005464())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10000548C@<X0>(_QWORD *a1@<X8>)
{
  return sub_100005498(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t sub_100005498@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char *v5;

  *a2 = &_swiftEmptyArrayStorage;
  v3 = a1(0);
  result = UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(v3 + 24);
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  *((_BYTE *)a2 + *(int *)(v3 + 28)) = 2;
  return result;
}

uint64_t sub_1000054FC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  if (*(_BYTE *)(v1 + 24))
    return 0;
  else
    return *(_QWORD *)(v1 + 16);
}

uint64_t sub_100005550(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10000AD90(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 16, v12, 1, 0);
  *(_QWORD *)(v10 + 16) = a1;
  *(_BYTE *)(v10 + 24) = 0;
  return result;
}

void (*sub_1000055F8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(_QWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0;
  v3[9] = v6;
  return sub_100005678;
}

void sub_100005678(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10000AD90(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 16, v6, 1, 0);
  *(_QWORD *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 24) = 0;
  free((void *)v3);
}

BOOL sub_10000574C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  return (*(_BYTE *)(v1 + 24) & 1) == 0;
}

uint64_t sub_10000579C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10000AD90(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 16, v10, 1, 0);
  *(_QWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 24) = 1;
  return result;
}

uint64_t sub_10000583C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess(v1 + 28, v3, 0, 0);
  if (*(_BYTE *)(v1 + 32))
    return 0;
  else
    return *(unsigned int *)(v1 + 28);
}

uint64_t sub_100005890(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10000AD90(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 28, v12, 1, 0);
  *(_DWORD *)(v10 + 28) = a1;
  *(_BYTE *)(v10 + 32) = 0;
  return result;
}

void (*sub_100005938(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 28, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 28);
  if (*(_BYTE *)(v5 + 32))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000059B8;
}

void sub_1000059B8(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10000AD90(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 28, v6, 1, 0);
  *(_DWORD *)(v14 + 28) = v4;
  *(_BYTE *)(v14 + 32) = 0;
  free((void *)v3);
}

BOOL sub_100005A8C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess(v1 + 28, v3, 0, 0);
  return (*(_BYTE *)(v1 + 32) & 1) == 0;
}

uint64_t sub_100005ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10000AD90(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 28, v10, 1, 0);
  *(_DWORD *)(v8 + 28) = 0;
  *(_BYTE *)(v8 + 32) = 1;
  return result;
}

uint64_t sub_100005B7C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess(v1 + 33, v3, 0, 0);
  if (*(_BYTE *)(v1 + 33) == 7)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 33);
}

uint64_t sub_100005BCC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10000AD90(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 33, v12, 1, 0);
  *(_BYTE *)(v10 + 33) = a1;
  return result;
}

void (*sub_100005C70(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 33, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 33);
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_100005CEC;
}

void sub_100005CEC(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10000AD90(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 33);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_100005DC0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess(v1 + 33, v3, 0, 0);
  return *(_BYTE *)(v1 + 33) != 7;
}

uint64_t sub_100005E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10000AD90(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 33, v10, 1, 0);
  *(_BYTE *)(v8 + 33) = 7;
  return result;
}

uint64_t sub_100005EAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100006098(&qword_100369E48, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, type metadata accessor for Proto_Gpsd_Response, (void (*)(void))sub_10023A788, a1);
}

uint64_t sub_100005ED0(uint64_t a1)
{
  return sub_100006E4C(a1, &qword_100369E48, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
}

void (*sub_100005EEC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100369E48);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gpsd_Response(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100369E48);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10023A788((uint64_t)v9);
    sub_100015704((uint64_t)v5, &qword_100369E48);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Response);
  }
  return sub_100006020;
}

void sub_100006020(uint64_t a1, char a2)
{
  sub_10000630C(a1, a2, &qword_100369E48, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
}

BOOL sub_10000603C()
{
  return sub_1000063D4(&qword_100369E48, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, type metadata accessor for Proto_Gpsd_Response);
}

uint64_t sub_100006058()
{
  return sub_1000064D0(&qword_100369E48, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
}

uint64_t sub_100006074@<X0>(uint64_t a1@<X8>)
{
  return sub_100006098(&qword_100369E50, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, type metadata accessor for Proto_Gpsd_Indication, (void (*)(void))sub_10024283C, a1);
}

uint64_t sub_100006098@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[24];

  v11 = sub_1000039AC(a1);
  __chkstk_darwin(v11);
  v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a2;
  swift_beginAccess(v14, v18, 0, 0);
  sub_10000E660(v14, (uint64_t)v13, a1);
  v15 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15) != 1)
    return sub_100003E08((uint64_t)v13, a5, a3);
  a4();
  return sub_100015704((uint64_t)v13, a1);
}

uint64_t sub_1000061A0(uint64_t a1)
{
  return sub_100006E4C(a1, &qword_100369E50, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
}

void (*sub_1000061BC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100369E50);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gpsd_Indication(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100369E50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10024283C((uint64_t)v9);
    sub_100015704((uint64_t)v5, &qword_100369E50);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Indication);
  }
  return sub_1000062F0;
}

void sub_1000062F0(uint64_t a1, char a2)
{
  sub_10000630C(a1, a2, &qword_100369E50, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
}

void sub_10000630C(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD), _QWORD *a5)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v8 = *(void **)a1;
  v9 = *(void **)(*(_QWORD *)a1 + 40);
  v10 = *(void **)(*(_QWORD *)a1 + 48);
  v11 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    sub_100003FEC((uint64_t)v10, (uint64_t)v9, a4);
    sub_100006E4C((uint64_t)v9, a3, a4, a5);
    sub_100004030((uint64_t)v10, a4);
  }
  else
  {
    sub_100006E4C((uint64_t)v10, a3, a4, a5);
  }
  free(v10);
  free(v9);
  free(v11);
  free(v8);
}

BOOL sub_1000063B8()
{
  return sub_1000063D4(&qword_100369E50, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, type metadata accessor for Proto_Gpsd_Indication);
}

BOOL sub_1000063D4(uint64_t *a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  _BYTE v15[24];

  v7 = sub_1000039AC(a1);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a2;
  swift_beginAccess(v10, v15, 0, 0);
  sub_10000E660(v10, (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_100015704((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000064B4()
{
  return sub_1000064D0(&qword_100369E50, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
}

uint64_t sub_1000064D0(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v22[24];

  v7 = v3;
  v8 = sub_1000039AC(a1);
  __chkstk_darwin(v8);
  v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v3 + v11);
    v13 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    sub_10000AD90(v15);
    v16 = *(_QWORD *)(v7 + v11);
    *(_QWORD *)(v7 + v11) = v14;
    swift_release(v16);
  }
  v17 = *(_QWORD *)(v7 + v11);
  v18 = a2(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
  v19 = v17 + *a3;
  swift_beginAccess(v19, v22, 33, 0);
  swift_retain(v17);
  sub_10000E574((uint64_t)v10, v19, a1);
  swift_endAccess(v22);
  return swift_release(v17);
}

uint64_t sub_100006604@<X0>(uint64_t a1@<X8>)
{
  return sub_1000069DC(&OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, a1);
}

uint64_t sub_100006610(uint64_t a1)
{
  return sub_100006E4C(a1, &qword_100369E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
}

void (*sub_10000662C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100369E58);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100369E58);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v11 = &v9[v6[6]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v9[v6[7]] = 10;
    sub_100015704((uint64_t)v5, &qword_100369E58);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  return sub_10000678C;
}

void sub_10000678C(uint64_t a1, char a2)
{
  sub_10000630C(a1, a2, &qword_100369E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
}

BOOL sub_1000067A8()
{
  return sub_1000063D4(&qword_100369E58, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_1000067C4()
{
  return sub_1000064D0(&qword_100369E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
}

uint64_t sub_1000067E0@<X0>(_QWORD *a1@<X8>)
{
  return sub_100006D00(&qword_100369E60, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t sub_1000067FC(uint64_t a1)
{
  return sub_100006E4C(a1, &qword_100369E60, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
}

void (*sub_100006818(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100369E60);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100369E60);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    *((_BYTE *)v9 + *(int *)(v6 + 28)) = 2;
    sub_100015704((uint64_t)v5, &qword_100369E60);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  }
  return sub_10000697C;
}

void sub_10000697C(uint64_t a1, char a2)
{
  sub_10000630C(a1, a2, &qword_100369E60, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
}

BOOL sub_100006998()
{
  return sub_1000063D4(&qword_100369E60, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_1000069B4()
{
  return sub_1000064D0(&qword_100369E60, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
}

uint64_t sub_1000069D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000069DC(&OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, a1);
}

uint64_t sub_1000069DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _BYTE v13[24];

  v5 = sub_1000039AC(&qword_100369E58);
  __chkstk_darwin(v5);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a1;
  swift_beginAccess(v8, v13, 0, 0);
  sub_10000E660(v8, (uint64_t)v7, &qword_100369E58);
  v9 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return sub_100003E08((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  UnknownStorage.init()();
  *(_BYTE *)(a2 + v9[5]) = 5;
  v10 = a2 + v9[6];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(a2 + v9[7]) = 10;
  return sub_100015704((uint64_t)v7, &qword_100369E58);
}

uint64_t sub_100006B14(uint64_t a1)
{
  return sub_100006E4C(a1, &qword_100369E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
}

void (*sub_100006B30(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100369E58);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100369E58);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v11 = &v9[v6[6]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v9[v6[7]] = 10;
    sub_100015704((uint64_t)v5, &qword_100369E58);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  return sub_100006C90;
}

void sub_100006C90(uint64_t a1, char a2)
{
  sub_10000630C(a1, a2, &qword_100369E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
}

BOOL sub_100006CAC()
{
  return sub_1000063D4(&qword_100369E58, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100006CC8()
{
  return sub_1000064D0(&qword_100369E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
}

uint64_t sub_100006CE4@<X0>(_QWORD *a1@<X8>)
{
  return sub_100006D00(&qword_100369E68, OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t sub_100006D00@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _BYTE v17[24];

  v9 = sub_1000039AC(a1);
  __chkstk_darwin(v9);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a2;
  swift_beginAccess(v12, v17, 0, 0);
  sub_10000E660(v12, (uint64_t)v11, a1);
  v13 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13) != 1)
    return sub_100003E08((uint64_t)v11, (uint64_t)a4, a3);
  *a4 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v14 = (char *)a4 + *(int *)(v13 + 24);
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  *((_BYTE *)a4 + *(int *)(v13 + 28)) = 2;
  return sub_100015704((uint64_t)v11, a1);
}

uint64_t sub_100006E30(uint64_t a1)
{
  return sub_100006E4C(a1, &qword_100369E68, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
}

uint64_t sub_100006E4C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v27[24];

  v8 = v4;
  v10 = sub_1000039AC(a2);
  v11 = __chkstk_darwin(v10);
  v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v11);
  v15 = &v27[-v14 - 8];
  v16 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v16)) & 1) == 0)
  {
    v17 = *(_QWORD *)(v4 + v16);
    v18 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v20 = swift_retain(v17);
    sub_10000AD90(v20);
    v21 = *(_QWORD *)(v8 + v16);
    *(_QWORD *)(v8 + v16) = v19;
    swift_release(v21);
  }
  v22 = *(_QWORD *)(v8 + v16);
  sub_100003E08(a1, (uint64_t)v15, a3);
  v23 = a3(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v15, 0, 1, v23);
  sub_10000E530((uint64_t)v15, (uint64_t)v13, a2);
  v24 = v22 + *a4;
  swift_beginAccess(v24, v27, 33, 0);
  swift_retain(v22);
  sub_10000E574((uint64_t)v13, v24, a2);
  swift_endAccess(v27);
  return swift_release(v22);
}

void (*sub_100006FCC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_100369E68);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_100369E68);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    *((_BYTE *)v9 + *(int *)(v6 + 28)) = 2;
    sub_100015704((uint64_t)v5, &qword_100369E68);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  }
  return sub_100007130;
}

void sub_100007130(uint64_t a1, char a2)
{
  sub_10000630C(a1, a2, &qword_100369E68, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
}

BOOL sub_10000714C()
{
  return sub_1000063D4(&qword_100369E68, OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100007168()
{
  return sub_1000064D0(&qword_100369E68, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
}

uint64_t sub_100007188(char a1)
{
  return qword_1002C4028[a1];
}

BOOL sub_10000719C(char *a1, char *a2)
{
  return qword_1002C4028[*a1] == qword_1002C4028[*a2];
}

Swift::Int sub_1000071C0(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v6[9];
  char v7;

  v7 = *v2;
  Hasher.init(_seed:)(v6, 0);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_100007220(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10001552C();
  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100007258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  _QWORD v7[9];
  char v8;

  v8 = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_1000072B4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10000E5B8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000072D8()
{
  char *v0;

  return qword_1002C4028[*v0];
}

uint64_t sub_1000072EC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10000E5B8(*a1);
  *a2 = result;
  return result;
}

void sub_100007314(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1002C4028[*v1];
}

uint64_t sub_10000732C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  UnknownStorage.init()();
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if (qword_100385840 != -1)
    swift_once(&qword_100385840, sub_10000AC28);
  v3 = qword_100385848;
  *(_QWORD *)(a1 + v2) = qword_100385848;
  return swift_retain(v3);
}

uint64_t sub_10000738C()
{
  if (qword_100385840 != -1)
    swift_once(&qword_100385840, sub_10000AC28);
  return swift_retain(qword_100385848);
}

_UNKNOWN **sub_1000073CC()
{
  return &off_100351D80;
}

void sub_1000073D8(_QWORD *a1@<X8>)
{
  *a1 = &off_100351D80;
}

uint64_t sub_1000073E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = sub_1000039AC(&qword_100369E70);
  __chkstk_darwin(v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_10000E660(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_100369E70);
  v7 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + v7[8]) = 5;
  v11 = a1 + v7[9];
  v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = a1 + v7[10];
  v14 = type metadata accessor for Proto_Gpsd_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return sub_100015704((uint64_t)v5, &qword_100369E70);
}

uint64_t sub_10000755C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
  sub_100015704(v3, &qword_100369E70);
  sub_100003E08(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*sub_1000075CC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100369E70);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100369E70);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v9[v6[8]] = 5;
    v14 = &v9[v6[9]];
    v15 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    v16 = &v9[v6[10]];
    v17 = type metadata accessor for Proto_Gpsd_Request(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
    sub_100015704((uint64_t)v5, &qword_100369E70);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  }
  return sub_100007780;
}

void sub_100007780(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100369E70, type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

BOOL sub_100007794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = sub_1000039AC(&qword_100369E70);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_10000E660(v0 + *(int *)(v4 + 20), (uint64_t)v3, &qword_100369E70);
  v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100015704((uint64_t)v3, &qword_100369E70);
  return v6;
}

uint64_t sub_100007848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
  sub_100015704(v1, &qword_100369E70);
  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_1000078A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_100369E78);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100369E78);
  v7 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_100385840 != -1)
    swift_once(&qword_100385840, sub_10000AC28);
  v9 = qword_100385848;
  *(_QWORD *)(a1 + v8) = qword_100385848;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_100369E78);
}

uint64_t sub_1000079B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
  sub_100015704(v3, &qword_100369E78);
  sub_100003E08(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*sub_100007A28(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_100369E78);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_100369E78);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_100385840 != -1)
      swift_once(&qword_100385840, sub_10000AC28);
    v12 = qword_100385848;
    *(_QWORD *)&v9[v11] = qword_100385848;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_100369E78);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  }
  return sub_100007B80;
}

void sub_100007B80(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_100369E78, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

void sub_100007B94(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v6 = *(void **)a1;
  v7 = *(int *)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 32);
  v9 = *(void **)(*(_QWORD *)a1 + 40);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v12 = *(void **)(*(_QWORD *)a1 + 8);
  v13 = **(_QWORD **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    sub_100003FEC(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v8, a4);
    sub_100015704(v13, a3);
    sub_100003E08((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    sub_100004030((uint64_t)v9, a4);
  }
  else
  {
    sub_100015704(**(_QWORD **)a1 + v7, a3);
    sub_100003E08((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

BOOL sub_100007C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = sub_1000039AC(&qword_100369E78);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_10000E660(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_100369E78);
  v5 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100015704((uint64_t)v3, &qword_100369E78);
  return v6;
}

uint64_t sub_100007D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
  sub_100015704(v1, &qword_100369E78);
  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_100007DA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100007DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t sub_100007E10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  v3 = a1 + *(int *)(v2 + 20);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 24);
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t sub_100007E98@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_AONLoc_Request, a1);
}

uint64_t sub_100007EA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_AONLoc_Indication, a1);
}

void *sub_100007EB0()
{
  return &unk_100351CD0;
}

unint64_t sub_100007EBC()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100007ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382E68);
  sub_10000E6A4(v0, (uint64_t)qword_100382E68);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C30F0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "mach_continuous_time_ns";
  *(_QWORD *)(v9 + 8) = 23;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "process_id";
  *(_QWORD *)(v13 + 8) = 10;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "transaction_id";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "type";
  *((_QWORD *)v17 + 1) = 4;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "result_options";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 11;
  *(_QWORD *)v21 = "gpsd_request";
  *((_QWORD *)v21 + 1) = 12;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100008114()
{
  return sub_100008BD0(&qword_100385800, (uint64_t)qword_100382E68, (uint64_t)sub_100007ED8);
}

uint64_t sub_100008130@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100385800, (uint64_t)qword_100382E68, (uint64_t)sub_100007ED8, a1);
}

uint64_t sub_10000814C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v16 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          v15 = v9;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v16 + 20), a2, a3);
          goto LABEL_6;
        case 2:
          v17 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24);
          goto LABEL_13;
        case 3:
          v17 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28);
LABEL_13:
          v15 = v9;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + v17, a2, a3);
          goto LABEL_6;
        case 4:
          v18 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32);
          v19 = sub_100015570();
          v15 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v18, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum, v19, a2, a3);
          goto LABEL_6;
        case 6:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
          v11 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          v12 = sub_10000FD38(&qword_100369F48, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&unk_1002C35BC);
          v13 = v10;
          v14 = v11;
          goto LABEL_5;
        case 11:
          v20 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
          v21 = type metadata accessor for Proto_Gpsd_Request(0);
          v12 = sub_10000FD38(&qword_10036A6B8, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&unk_1002EA790);
          v13 = v20;
          v14 = v21;
LABEL_5:
          v15 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v13, v14, v12, a2, a3);
LABEL_6:
          v9 = v15;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100008328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unint64_t v14;
  char v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = (unsigned int *)(v5 + v10[6]);
    if ((v12[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v12, 2, a2, a3);
    v13 = (unsigned int *)(v5 + v10[7]);
    if ((v13[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v13, 3, a2, a3);
    if (*(_BYTE *)(v5 + v10[8]) != 5)
    {
      v15 = *(_BYTE *)(v5 + v10[8]);
      v14 = sub_100015570();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 4, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum, v14, a2, a3);
    }
    sub_1000084B0(v5, a1, a2, a3);
    sub_100008624(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000084B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_100369E38);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  sub_10000E660(a1 + *(int *)(v13 + 36), (uint64_t)v8, &qword_100369E38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E38);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  v15 = sub_10000FD38(&qword_100369F48, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&unk_1002C35BC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_100008624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_100369E40);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_Gpsd_Request(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  sub_10000E660(a1 + *(int *)(v13 + 40), (uint64_t)v8, &qword_100369E40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E40);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_Request);
  v15 = sub_10000FD38(&qword_10036A6B8, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&unk_1002EA790);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 11, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for Proto_Gpsd_Request);
}

Swift::Int sub_10000879C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_AONLoc_Request, &qword_100369E80, (uint64_t)&unk_1002C352C);
}

uint64_t sub_1000087B8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + v4;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1[8];
  v8 = a2 + a1[7];
  *(_BYTE *)(v8 + 4) = 1;
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(a2 + v7) = 5;
  v9 = a2 + a1[9];
  v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a2 + a1[10];
  v12 = type metadata accessor for Proto_Gpsd_Request(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
}

uint64_t sub_100008874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000814C(a1, a2, a3);
}

uint64_t sub_100008888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100008328(a1, a2, a3);
}

uint64_t sub_1000088A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036A5E8, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&unk_1002C34A4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000088F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100385800, (uint64_t)qword_100382E68, (uint64_t)sub_100007ED8, a1);
}

uint64_t sub_100008910(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38((unint64_t *)&qword_100369F30, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&unk_1002C342C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100008954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38((unint64_t *)&qword_100369F30, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&unk_1002C342C);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000089AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382E80);
  sub_10000E6A4(v0, (uint64_t)qword_100382E80);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 16;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "UPDATE_RESULT_OPTIONS";
  *(_QWORD *)(v13 + 8) = 21;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 11;
  *(_QWORD *)v15 = "GNSS_REQUEST";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 21;
  *(_QWORD *)v17 = "WIFI_RESULT";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 31;
  *(_QWORD *)v18 = "BT_RESULT";
  *(_QWORD *)(v18 + 8) = 9;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100008BB4()
{
  return sub_100008BD0(&qword_100385808, (uint64_t)qword_100382E80, (uint64_t)sub_1000089AC);
}

uint64_t sub_100008BD0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for _NameMap(0);
  return sub_10000E6A4(v4, a2);
}

uint64_t sub_100008C10@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100385808, (uint64_t)qword_100382E80, (uint64_t)sub_1000089AC, a1);
}

uint64_t sub_100008C2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for _NameMap(0);
  v7 = sub_10000E6A4(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_100008C94@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100385808, (uint64_t)qword_100382E80, (uint64_t)sub_1000089AC, a1);
}

uint64_t sub_100008CB0@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for _NameMap(0);
  v7 = sub_10000E6A4(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

void sub_100008D1C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x4F746C757365522ELL;
  v0._object = (void *)0xEE00736E6F697470;
  String.append(_:)(v0);
  qword_100382E98 = 0xD00000000000001BLL;
  unk_100382EA0 = 0x80000001002F0710;
}

uint64_t *sub_100008D90()
{
  if (qword_100385810 != -1)
    swift_once(&qword_100385810, sub_100008D1C);
  return &qword_100382E98;
}

uint64_t sub_100008DD0()
{
  uint64_t v0;

  if (qword_100385810 != -1)
    swift_once(&qword_100385810, sub_100008D1C);
  v0 = qword_100382E98;
  swift_bridgeObjectRetain(unk_100382EA0);
  return v0;
}

uint64_t sub_100008E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v29;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382EA8);
  sub_10000E6A4(v0, (uint64_t)qword_100382EA8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v29 = swift_allocObject(v1, v6 + 10 * v4, v5 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_1002C3110;
  v7 = v29 + v6;
  v8 = v29 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v29 + v6) = 1;
  *(_QWORD *)v8 = "repeat";
  *(_QWORD *)(v8 + 8) = 6;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v29 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "batch_size";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v29 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "repeat_interval_sec";
  *((_QWORD *)v14 + 1) = 19;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v29 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "max_age_sec";
  *((_QWORD *)v16 + 1) = 11;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v29 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "minimal_rssi_db";
  *((_QWORD *)v18 + 1) = 15;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v29 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "bt_types";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v29 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "wifi_bands";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v29 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "channels";
  *((_QWORD *)v24 + 1) = 8;
  v24[16] = 2;
  v11();
  v25 = v29 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 11;
  *(_QWORD *)v25 = "start_cfa_time_sec";
  *(_QWORD *)(v25 + 8) = 18;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v29 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 12;
  *(_QWORD *)v27 = "end_cfa_time_sec";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v29);
}

uint64_t sub_100009144()
{
  return sub_100008BD0(&qword_100385818, (uint64_t)qword_100382EA8, (uint64_t)sub_100008E2C);
}

uint64_t sub_100009160@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100385818, (uint64_t)qword_100382EA8, (uint64_t)sub_100008E2C, a1);
}

uint64_t sub_10000917C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  ValueMetadata *v17;
  uint64_t v18;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v10 + 32), a2, a3);
          goto LABEL_18;
        case 2:
          v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v12 + 36), a2, a3);
          goto LABEL_18;
        case 3:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40);
          goto LABEL_9;
        case 4:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44);
LABEL_9:
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v13, a2, a3);
          goto LABEL_18;
        case 5:
          v14 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularSInt32Field(value:)(v3 + *(int *)(v14 + 48), a2, a3);
          goto LABEL_18;
        case 6:
          v15 = sub_10000FCB0();
          v16 = v3;
          v17 = &type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType;
          goto LABEL_13;
        case 7:
          v15 = sub_10000FCF4();
          v16 = v3 + 8;
          v17 = &type metadata for CLP_LogEntry_PrivateData_WifiRfBand;
LABEL_13:
          v11 = v9;
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)(v16, v17, v15, a2, a3);
          goto LABEL_18;
        case 8:
          v11 = v9;
          dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)(v3 + 16, a2, a3);
          goto LABEL_18;
        case 11:
          v18 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52);
          goto LABEL_17;
        case 12:
          v18 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56);
LABEL_17:
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v18, a2, a3);
LABEL_18:
          v9 = v11;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10000935C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  int *v9;
  int v10;
  unsigned int *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v9 = (int *)result;
  v10 = *((unsigned __int8 *)v3 + *(int *)(result + 32));
  if (v10 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v10 & 1, 1, a2, a3);
  if (!v4)
  {
    v11 = (unsigned int *)((char *)v3 + v9[9]);
    if ((v11[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 2, a2, a3);
    v12 = (float *)((char *)v3 + v9[10]);
    if (((_BYTE)v12[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *v12);
    v13 = (float *)((char *)v3 + v9[11]);
    if (((_BYTE)v13[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4, a2, a3, *v13);
    sub_1000095B0((uint64_t)v3, a1, a2, a3);
    v14 = *v3;
    if (*(_QWORD *)(*v3 + 16))
    {
      v15 = sub_10000FCB0();
      dispatch thunk of Visitor.visitRepeatedEnumField<A>(value:fieldNumber:)(v14, 6, &type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType, v15, a2, a3);
    }
    v16 = v3[1];
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = sub_10000FCF4();
      dispatch thunk of Visitor.visitRepeatedEnumField<A>(value:fieldNumber:)(v16, 7, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand, v17, a2, a3);
    }
    if (*(_QWORD *)(v3[2] + 16))
      dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)();
    sub_100009624((uint64_t)v3, a1, a2, a3);
    sub_100009698((uint64_t)v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000095B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 48));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularSInt32Field(value:fieldNumber:)(*v8, 5, a3, a4);
  return result;
}

uint64_t sub_100009624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v8 = a1 + *(int *)(result + 52);
  if ((*(_BYTE *)(v8 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(11, a3, a4, *(double *)v8);
  return result;
}

uint64_t sub_100009698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v8 = a1 + *(int *)(result + 56);
  if ((*(_BYTE *)(v8 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(12, a3, a4, *(double *)v8);
  return result;
}

Swift::Int sub_100009710()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, &qword_100369E98, (uint64_t)&unk_1002C36BC);
}

uint64_t sub_10000972C@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  a2[2] = &_swiftEmptyArrayStorage;
  result = UnknownStorage.init()();
  v5 = a1[9];
  *((_BYTE *)a2 + a1[8]) = 2;
  v6 = (char *)a2 + v5;
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = a1[11];
  v8 = (char *)a2 + a1[10];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  v9 = (char *)a2 + v7;
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  v10 = a1[13];
  v11 = (char *)a2 + a1[12];
  *(_DWORD *)v11 = 0;
  v11[4] = 1;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = (char *)a2 + a1[14];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  return result;
}

uint64_t sub_1000097CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10000980C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_10000984C())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100009860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000917C(a1, a2, a3);
}

uint64_t sub_100009874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000935C(a1, a2, a3);
}

uint64_t sub_100009888(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036A5E0, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&unk_1002C3634);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000098D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100385818, (uint64_t)qword_100382EA8, (uint64_t)sub_100008E2C, a1);
}

uint64_t sub_1000098F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_100369F48, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&unk_1002C35BC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100009934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100369F48, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&unk_1002C35BC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100009988()
{
  return &unk_100351CE0;
}

unint64_t sub_100009994()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1000099B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382EC0);
  sub_10000E6A4(v0, (uint64_t)qword_100382EC0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "request_type";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "mach_continuous_time_ns";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "result_code";
  *(_QWORD *)(v14 + 8) = 11;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100009B44()
{
  return sub_100008BD0(&qword_100385820, (uint64_t)qword_100382EC0, (uint64_t)sub_1000099B0);
}

uint64_t sub_100009B60@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100385820, (uint64_t)qword_100382EC0, (uint64_t)sub_1000099B0, a1);
}

uint64_t sub_100009B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  ValueMetadata *v12;
  uint64_t v13;
  uint64_t v14;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v14 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v14 + 24), a2, a3);
      }
      else if (result == 1)
      {
        v13 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20);
        v10 = sub_100015570();
        v11 = v13;
        v12 = &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum;
        goto LABEL_5;
      }
LABEL_12:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28);
    v10 = sub_100015638();
    v11 = v9;
    v12 = &type metadata for Proto_Gnss_Result;
LABEL_5:
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_100009CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v10 = result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 5)
  {
    v14 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v11 = sub_100015570();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v14, 1, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum, v11, a2, a3);
  }
  if (!v4)
  {
    v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v12, 2, a2, a3);
    if (*(_BYTE *)(v5 + *(int *)(v10 + 28)) != 10)
    {
      v15 = *(_BYTE *)(v5 + *(int *)(v10 + 28));
      v13 = sub_100015638();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 3, &type metadata for Proto_Gnss_Result, v13, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_100009DD4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_AONLoc_Response, &qword_100369EA0, (uint64_t)&unk_1002C3824);
}

uint64_t sub_100009DF0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 5;
  v6 = a2 + v5;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a2 + a1[7]) = 10;
  return result;
}

uint64_t sub_100009E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100009B7C(a1, a2, a3);
}

uint64_t sub_100009E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100009CA8(a1, a2, a3);
}

uint64_t sub_100009E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036A5D8, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&unk_1002C379C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100009EB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100385820, (uint64_t)qword_100382EC0, (uint64_t)sub_1000099B0, a1);
}

uint64_t sub_100009ED0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_100369F60, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&unk_1002C3724);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100009F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100369F60, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&unk_1002C3724);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100009F60()
{
  return &unk_100351CF0;
}

unint64_t sub_100009F6C()
{
  return 0xD000000000000022;
}

uint64_t sub_100009F88(uint64_t a1)
{
  return sub_100009FA0(a1, qword_100382ED8, (uint64_t)"wifi_notifications", 18);
}

uint64_t sub_100009FA0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  char *v18;
  uint64_t v19;

  v5 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v5, a2);
  sub_10000E6A4(v5, (uint64_t)a2);
  v6 = sub_1000039AC(&qword_10036A618);
  v7 = sub_1000039AC(&qword_10036A620);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + 3 * v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1002C3120;
  v13 = (_QWORD *)(v12 + v11);
  v14 = v12 + v11 + *(int *)(v7 + 48);
  *v13 = 1;
  *(_QWORD *)v14 = "mach_continuous_time_ns";
  *(_QWORD *)(v14 + 8) = 23;
  *(_BYTE *)(v14 + 16) = 2;
  v15 = enum case for _NameMap.NameDescription.standard(_:);
  v16 = type metadata accessor for _NameMap.NameDescription(0);
  v17 = *(void (**)(void))(*(_QWORD *)(v16 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v17)(v14, v15, v16);
  v18 = (char *)v13 + v9 + *(int *)(v7 + 48);
  *(_QWORD *)((char *)v13 + v9) = 2;
  *(_QWORD *)v18 = "is_last_batch";
  *((_QWORD *)v18 + 1) = 13;
  v18[16] = 2;
  v17();
  v19 = (uint64_t)v13 + 2 * v9 + *(int *)(v7 + 48);
  *(_QWORD *)((char *)v13 + 2 * v9) = 11;
  *(_QWORD *)v19 = a3;
  *(_QWORD *)(v19 + 8) = a4;
  *(_BYTE *)(v19 + 16) = 2;
  v17();
  return _NameMap.init(dictionaryLiteral:)(v12);
}

uint64_t sub_10000A130()
{
  return sub_100008BD0(&qword_100385828, (uint64_t)qword_100382ED8, (uint64_t)sub_100009F88);
}

uint64_t sub_10000A14C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100385828, (uint64_t)qword_100382ED8, (uint64_t)sub_100009F88, a1);
}

uint64_t sub_10000A168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000A3EC(a1, a2, a3, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &qword_100369EA8, (uint64_t)&unk_1002D5AC0);
}

uint64_t sub_10000A19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000A578(a1, a2, a3, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &qword_100369EA8, (uint64_t)&unk_1002D5AC0);
}

uint64_t sub_10000A1D0(uint64_t *a1, uint64_t *a2)
{
  return sub_10000E6BC(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &qword_10036A678, (uint64_t)&unk_1002D5C00) & 1;
}

Swift::Int sub_10000A208()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &qword_100369EB0, (uint64_t)&unk_1002C398C);
}

uint64_t (*sub_10000A230())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10000A244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036A5D0, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&unk_1002C3904);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000A294@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100385828, (uint64_t)qword_100382ED8, (uint64_t)sub_100009F88, a1);
}

uint64_t sub_10000A2B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_100369F78, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&unk_1002C388C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10000A2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100369F78, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&unk_1002C388C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10000A340()
{
  return &unk_100351D00;
}

unint64_t sub_10000A34C()
{
  return 0xD000000000000020;
}

uint64_t sub_10000A368(uint64_t a1)
{
  return sub_100009FA0(a1, qword_100382EF0, (uint64_t)"bt_notifications", 16);
}

uint64_t sub_10000A380()
{
  return sub_100008BD0(&qword_100385830, (uint64_t)qword_100382EF0, (uint64_t)sub_10000A368);
}

uint64_t sub_10000A39C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100385830, (uint64_t)qword_100382EF0, (uint64_t)sub_10000A368, a1);
}

uint64_t sub_10000A3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000A3EC(a1, a2, a3, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, &qword_100369EB8, (uint64_t)&unk_1002E9978);
}

uint64_t sub_10000A3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v8)
  {
    while ((v16 & 1) == 0)
    {
      switch(result)
      {
        case 11:
          v20 = a5(0);
          v17 = sub_10000FD38(a6, a5, a7);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v7, v20, v17, a2, a3);
          break;
        case 2:
          v19 = a4(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v7 + *(int *)(v19 + 28), a2, a3);
          break;
        case 1:
          v18 = a4(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v7 + *(int *)(v18 + 24), a2, a3);
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10000A544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000A578(a1, a2, a3, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, &qword_100369EB8, (uint64_t)&unk_1002E9978);
}

uint64_t sub_10000A578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v11;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v11 = v7;
  result = a4(0);
  v16 = result;
  v17 = (uint64_t)v7 + *(int *)(result + 24);
  if ((*(_BYTE *)(v17 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v17, 1, a2, a3);
  if (!v8)
  {
    v18 = *((unsigned __int8 *)v7 + *(int *)(v16 + 28));
    if (v18 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v18 & 1, 2, a2, a3);
    v19 = a7;
    v20 = *v11;
    if (*(_QWORD *)(*v11 + 16))
    {
      v22 = a5(0);
      v21 = sub_10000FD38(a6, a5, v19);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v20, 11, v22, v21, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10000A6C4(uint64_t *a1, uint64_t *a2)
{
  return sub_10000E6BC(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, &qword_10036A670, (uint64_t)&unk_1002E9AB8) & 1;
}

Swift::Int sub_10000A6FC()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, &qword_100369EC0, (uint64_t)&unk_1002C3AF4);
}

uint64_t sub_10000A718@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;

  *a2 = &_swiftEmptyArrayStorage;
  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 28);
  v6 = (char *)a2 + *(int *)(a1 + 24);
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  *((_BYTE *)a2 + v5) = 2;
  return result;
}

uint64_t sub_10000A76C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10000A7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_10000A7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036A5C8, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&unk_1002C3A6C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000A83C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100385830, (uint64_t)qword_100382EF0, (uint64_t)sub_10000A368, a1);
}

uint64_t sub_10000A858(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_100369F90, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&unk_1002C39F4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10000A898(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100369F90, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&unk_1002C39F4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10000A8E8()
{
  return &unk_100351D10;
}

unint64_t sub_10000A8F4()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10000A910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382F08);
  sub_10000E6A4(v0, (uint64_t)qword_100382F08);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v27 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1002C3130;
  v7 = v27 + v6;
  v8 = v27 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v27 + v6) = 1;
  *(_QWORD *)v8 = "mach_continuous_time_ns";
  *(_QWORD *)(v8 + 8) = 23;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "transaction_id";
  *(_QWORD *)(v12 + 8) = 14;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "type";
  *((_QWORD *)v14 + 1) = 4;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 11;
  *(_QWORD *)v16 = "gpsd_response";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 12;
  *(_QWORD *)v18 = "gpsd_indication";
  *((_QWORD *)v18 + 1) = 15;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 21;
  *(_QWORD *)v20 = "wifi_response";
  *((_QWORD *)v20 + 1) = 13;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 22;
  *(_QWORD *)v22 = "wifi_indication";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 31;
  *(_QWORD *)v24 = "bt_response";
  *((_QWORD *)v24 + 1) = 11;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 32;
  *(_QWORD *)v25 = "bt_indication";
  *(_QWORD *)(v25 + 8) = 13;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v27);
}

uint64_t sub_10000ABF0()
{
  return sub_100008BD0(&qword_100385838, (uint64_t)qword_100382F08, (uint64_t)sub_10000A910);
}

uint64_t sub_10000AC0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100385838, (uint64_t)qword_100382F08, (uint64_t)sub_10000A910, a1);
}

uint64_t sub_10000AC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_DWORD *)(v1 + 28) = 0;
  *(_WORD *)(v1 + 32) = 1793;
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  v3 = type metadata accessor for Proto_Gpsd_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  v5 = type metadata accessor for Proto_Gpsd_Indication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  v7 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  v10 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v8(v1+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, 1, 1, v7);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  v12 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  qword_100385848 = v1;
  return result;
}

uint64_t sub_10000AD90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  _BYTE v56[24];
  _BYTE v57[24];
  _BYTE v58[24];
  _BYTE v59[24];
  _BYTE v60[24];
  uint64_t v61;
  _BYTE v62[24];
  _BYTE v63[24];
  _BYTE v64[24];
  _BYTE v65[24];
  _BYTE v66[24];
  _BYTE v67[32];

  v2 = v1;
  v4 = sub_1000039AC(&qword_100369E68);
  __chkstk_darwin(v4);
  v54 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_100369E60);
  __chkstk_darwin(v6);
  v53 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_100369E58);
  __chkstk_darwin(v8);
  v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000039AC(&qword_100369E50);
  __chkstk_darwin(v10);
  v49 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_100369E48);
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  v15 = (_QWORD *)(v1 + 16);
  *(_BYTE *)(v2 + 24) = 1;
  *(_DWORD *)(v2 + 28) = 0;
  *(_WORD *)(v2 + 32) = 1793;
  v45 = v2 + 33;
  v16 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  v17 = type metadata accessor for Proto_Gpsd_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  v46 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  v19 = type metadata accessor for Proto_Gpsd_Indication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  v47 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  v21 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v22 = *(void (**)(void))(*(_QWORD *)(v21 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22)(v20, 1, 1, v21);
  v23 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  v48 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  v24 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v50 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  v22();
  v25 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  v51 = v2
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  v26 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  swift_beginAccess(a1 + 16, v67, 0, 0);
  v27 = *(_QWORD *)(a1 + 16);
  v28 = *(_BYTE *)(a1 + 24);
  swift_beginAccess(v15, v66, 1, 0);
  *v15 = v27;
  *(_BYTE *)(v2 + 24) = v28;
  swift_beginAccess(a1 + 28, v65, 0, 0);
  LODWORD(v15) = *(_DWORD *)(a1 + 28);
  LOBYTE(v27) = *(_BYTE *)(a1 + 32);
  swift_beginAccess(v2 + 28, v64, 1, 0);
  *(_DWORD *)(v2 + 28) = (_DWORD)v15;
  *(_BYTE *)(v2 + 32) = v27;
  swift_beginAccess(a1 + 33, v63, 0, 0);
  LOBYTE(v15) = *(_BYTE *)(a1 + 33);
  swift_beginAccess(v45, v62, 1, 0);
  *(_BYTE *)(v2 + 33) = (_BYTE)v15;
  v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, &v61, 0, 0);
  sub_10000E660(v29, (uint64_t)v14, &qword_100369E48);
  swift_beginAccess(v16, v60, 33, 0);
  sub_10000E574((uint64_t)v14, v16, &qword_100369E48);
  swift_endAccess(v60);
  v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, v60, 0, 0);
  v31 = v49;
  sub_10000E660(v30, v49, &qword_100369E50);
  v32 = v46;
  swift_beginAccess(v46, v59, 33, 0);
  sub_10000E574(v31, v32, &qword_100369E50);
  swift_endAccess(v59);
  v33 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, v59, 0, 0);
  v34 = v52;
  sub_10000E660(v33, v52, &qword_100369E58);
  v35 = v47;
  swift_beginAccess(v47, v58, 33, 0);
  sub_10000E574(v34, v35, &qword_100369E58);
  swift_endAccess(v58);
  v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, v58, 0, 0);
  v37 = v53;
  sub_10000E660(v36, v53, &qword_100369E60);
  v38 = v48;
  swift_beginAccess(v48, v57, 33, 0);
  sub_10000E574(v37, v38, &qword_100369E60);
  swift_endAccess(v57);
  v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, v57, 0, 0);
  sub_10000E660(v39, v34, &qword_100369E58);
  v40 = v50;
  swift_beginAccess(v50, v56, 33, 0);
  sub_10000E574(v34, v40, &qword_100369E58);
  swift_endAccess(v56);
  v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication, v56, 0, 0);
  v42 = v54;
  sub_10000E660(v41, v54, &qword_100369E68);
  swift_release(a1);
  v43 = v51;
  swift_beginAccess(v51, v55, 33, 0);
  sub_10000E574(v42, v43, &qword_100369E68);
  swift_endAccess(v55);
  return v2;
}

uint64_t sub_10000B368()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, &qword_100369E48);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, &qword_100369E50);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, &qword_100369E58);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, &qword_100369E60);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, &qword_100369E58);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0], &qword_100369E68);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10000B420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t (*v25)(uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  uint64_t v31;

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10000AD90(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    v31 = v15 + 33;
    v29 = v15 + 28;
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          swift_beginAccess(v15 + 16, v30, 33, 0);
          v19 = v5;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v15 + 16, a2, a3);
          goto LABEL_19;
        case 2:
          swift_beginAccess(v29, v30, 33, 0);
          v19 = v5;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v29, a2, a3);
          goto LABEL_19;
        case 3:
          v20 = v31;
          swift_beginAccess(v31, v30, 33, 0);
          v21 = sub_10001552C();
          v19 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v20, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum, v21, a2, a3);
          goto LABEL_19;
        case 11:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, v30, 33, 0);
          v23 = type metadata accessor for Proto_Gpsd_Response(0);
          v24 = (unint64_t *)&unk_10036A668;
          v25 = type metadata accessor for Proto_Gpsd_Response;
          v26 = &unk_1002EA920;
          goto LABEL_18;
        case 12:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, v30, 33, 0);
          v23 = type metadata accessor for Proto_Gpsd_Indication(0);
          v24 = (unint64_t *)&unk_10036A660;
          v25 = type metadata accessor for Proto_Gpsd_Indication;
          v26 = &unk_1002EAA88;
          goto LABEL_18;
        case 21:
          v27 = OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
          goto LABEL_16;
        case 22:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, v30, 33, 0);
          v23 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
          v24 = &qword_100369F78;
          v25 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication;
          v26 = &unk_1002C388C;
          goto LABEL_18;
        case 31:
          v27 = OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
LABEL_16:
          v22 = v15 + v27;
          swift_beginAccess(v15 + v27, v30, 33, 0);
          v23 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
          v24 = &qword_100369F60;
          v25 = type metadata accessor for CLP_LogEntry_AONLoc_Response;
          v26 = &unk_1002C3724;
          goto LABEL_18;
        case 32:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0], v30, 33, 0);
          v23 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
          v24 = &qword_100369F90;
          v25 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication;
          v26 = &unk_1002C39F4;
LABEL_18:
          v28 = sub_10000FD38(v24, v25, (uint64_t)v26);
          v19 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v22, v23, v28, a2, a3);
LABEL_19:
          v5 = v19;
          swift_endAccess(v30);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_10000B7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  char v15;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v12, 0, 0);
  if ((*(_BYTE *)(v9 + 24) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)(v9 + 16), 1, a2, a3);
  if (v4)
    return swift_release(v9);
  swift_beginAccess(v9 + 28, v13, 0, 0);
  if ((*(_BYTE *)(v9 + 32) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*(unsigned int *)(v9 + 28), 2, a2, a3);
  swift_beginAccess(v9 + 33, v14, 0, 0);
  if (*(_BYTE *)(v9 + 33) != 7)
  {
    v15 = *(_BYTE *)(v9 + 33);
    v11 = sub_10001552C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 3, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum, v11, a2, a3);
  }
  sub_10000B9CC(v9, a1, a2, a3);
  sub_10000BB58(v9, a1, a2, a3);
  sub_10000BCE4(v9, a1, a2, a3);
  sub_10000BE70(v9, a1, a2, a3);
  sub_10000BFFC(v9, a1, a2, a3);
  sub_10000C188(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10000B9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_100369E48);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for Proto_Gpsd_Response(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_100369E48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E48);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_Response);
  v15 = sub_10000FD38(&qword_10036A668, type metadata accessor for Proto_Gpsd_Response, (uint64_t)&unk_1002EA920);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 11, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for Proto_Gpsd_Response);
}

uint64_t sub_10000BB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_100369E50);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for Proto_Gpsd_Indication(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_100369E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E50);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_Indication);
  v15 = sub_10000FD38(&qword_10036A660, type metadata accessor for Proto_Gpsd_Indication, (uint64_t)&unk_1002EAA88);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 12, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for Proto_Gpsd_Indication);
}

uint64_t sub_10000BCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_100369E58);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_100369E58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E58);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  v15 = sub_10000FD38(&qword_100369F60, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&unk_1002C3724);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 21, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_10000BE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_100369E60);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_100369E60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E60);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  v15 = sub_10000FD38(&qword_100369F78, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&unk_1002C388C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 22, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_10000BFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_100369E58);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_100369E58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E58);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  v15 = sub_10000FD38(&qword_100369F60, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&unk_1002C3724);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 31, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_10000C188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_100369E68);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_100369E68);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E68);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  v15 = sub_10000FD38(&qword_100369F90, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&unk_1002C39F4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 32, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

BOOL sub_10000C318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int (*v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t *v106;
  unsigned int v107;
  uint64_t *v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t *v125;
  uint64_t *v126;
  char v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174[24];
  char v175[24];
  char v176[24];
  char v177[24];
  char v178[24];
  char v179[24];
  char v180[32];

  v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  v131 = *(_QWORD *)(v4 - 8);
  v132 = v4;
  __chkstk_darwin(v4);
  v128 = (uint64_t *)((char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v130 = sub_1000039AC(&qword_10036A628);
  __chkstk_darwin(v130);
  v133 = (uint64_t)&v128 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_100369E68);
  v8 = __chkstk_darwin(v7);
  v129 = (uint64_t *)((char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v138 = (char *)&v128 - v10;
  v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  v141 = *(_QWORD *)(v11 - 8);
  v142 = v11;
  __chkstk_darwin(v11);
  v135 = (uint64_t *)((char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v140 = sub_1000039AC(&qword_10036A630);
  __chkstk_darwin(v140);
  v143 = (uint64_t)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_100369E60);
  v15 = __chkstk_darwin(v14);
  v137 = (uint64_t *)((char *)&v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v145 = (uint64_t)&v128 - v17;
  v150 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v147 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v139 = (uint64_t)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_1000039AC(&qword_10036A638);
  v19 = __chkstk_darwin(v149);
  v136 = (uint64_t)&v128 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v148 = (uint64_t)&v128 - v21;
  v22 = sub_1000039AC(&qword_100369E58);
  v23 = __chkstk_darwin(v22);
  v134 = (uint64_t)&v128 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v153 = (char *)&v128 - v26;
  v27 = __chkstk_darwin(v25);
  v144 = (uint64_t)&v128 - v28;
  __chkstk_darwin(v27);
  v159 = (uint64_t)&v128 - v29;
  v157 = type metadata accessor for Proto_Gpsd_Indication(0);
  v155 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v146 = (uint64_t)&v128 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_1000039AC(&qword_10036A640);
  __chkstk_darwin(v154);
  v158 = (uint64_t)&v128 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1000039AC(&qword_100369E50);
  v33 = __chkstk_darwin(v32);
  v151 = (uint64_t)&v128 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v156 = (uint64_t)&v128 - v35;
  v160 = type metadata accessor for Proto_Gpsd_Response(0);
  v36 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v152 = (uint64_t)&v128 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1000039AC(&qword_10036A648);
  __chkstk_darwin(v38);
  v161 = (uint64_t)&v128 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1000039AC(&qword_100369E48);
  v41 = __chkstk_darwin(v40);
  v43 = (char *)&v128 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v45 = (char *)&v128 - v44;
  swift_beginAccess(a1 + 16, v180, 0, 0);
  v46 = *(_QWORD *)(a1 + 16);
  v162 = a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 24);
  swift_beginAccess(a2 + 16, v179, 0, 0);
  v47 = a2;
  v48 = *(_BYTE *)(a2 + 24);
  if ((a1 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (v46 != *(_QWORD *)(a2 + 16))
      v48 = 1;
    if ((v48 & 1) != 0)
      return 0;
  }
  v49 = v162;
  swift_beginAccess(v162 + 28, v178, 0, 0);
  v50 = *(_DWORD *)(v49 + 28);
  v51 = *(_BYTE *)(v49 + 32);
  swift_beginAccess(v47 + 28, v177, 0, 0);
  v52 = *(_BYTE *)(v47 + 32);
  if ((v51 & 1) != 0)
  {
    if (!*(_BYTE *)(v47 + 32))
      return 0;
  }
  else
  {
    if (v50 != *(_DWORD *)(v47 + 28))
      v52 = 1;
    if ((v52 & 1) != 0)
      return 0;
  }
  v53 = v162;
  swift_beginAccess(v162 + 33, v176, 0, 0);
  v54 = *(char *)(v53 + 33);
  v55 = v47;
  swift_beginAccess(v47 + 33, v175, 0, 0);
  v56 = *(char *)(v47 + 33);
  if (v54 == 7)
  {
    if ((_DWORD)v56 != 7)
      return 0;
  }
  else if ((_DWORD)v56 == 7 || qword_1002C4028[v54] != qword_1002C4028[v56])
  {
    return 0;
  }
  v57 = v53
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess(v53+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, v174, 0, 0);
  sub_10000E660(v57, (uint64_t)v45, &qword_100369E48);
  v58 = v47
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess(v47+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, &v173, 0, 0);
  v59 = v161;
  v60 = v161 + *(int *)(v38 + 48);
  sub_10000E660((uint64_t)v45, v161, &qword_100369E48);
  sub_10000E660(v58, v60, &qword_100369E48);
  v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  v62 = v160;
  if (v61(v59, 1, v160) == 1)
  {
    swift_retain(v53);
    swift_retain(v55);
    sub_100015704((uint64_t)v45, &qword_100369E48);
    if (v61(v60, 1, v62) == 1)
    {
      sub_100015704(v59, &qword_100369E48);
      v63 = v53;
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  sub_10000E660(v59, (uint64_t)v43, &qword_100369E48);
  if (v61(v60, 1, v62) == 1)
  {
    swift_retain(v53);
    swift_retain(v55);
    sub_100015704((uint64_t)v45, &qword_100369E48);
    sub_100004030((uint64_t)v43, type metadata accessor for Proto_Gpsd_Response);
LABEL_23:
    sub_100015704(v59, &qword_10036A648);
    v64 = v53;
LABEL_42:
    swift_release(v64);
    swift_release(v55);
    return 0;
  }
  v65 = v152;
  sub_100003E08(v60, v152, type metadata accessor for Proto_Gpsd_Response);
  v66 = sub_10000FD38(&qword_10036A658, type metadata accessor for Proto_Gpsd_Response, (uint64_t)&unk_1002EAA60);
  swift_retain(v53);
  swift_retain(v55);
  v67 = v59;
  v63 = v53;
  v68 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v65, v62, v66);
  sub_100004030(v65, type metadata accessor for Proto_Gpsd_Response);
  sub_100015704((uint64_t)v45, &qword_100369E48);
  sub_100004030((uint64_t)v43, type metadata accessor for Proto_Gpsd_Response);
  sub_100015704(v67, &qword_100369E48);
  if ((v68 & 1) == 0)
  {
    v64 = v63;
    goto LABEL_42;
  }
LABEL_25:
  v69 = v63
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess(v63+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, &v172, 0, 0);
  v70 = v156;
  sub_10000E660(v69, v156, &qword_100369E50);
  v71 = v55
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess(v55+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, &v171, 0, 0);
  v72 = v158;
  v73 = v158 + *(int *)(v154 + 48);
  sub_10000E660(v70, v158, &qword_100369E50);
  sub_10000E660(v71, v73, &qword_100369E50);
  v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v155 + 48);
  v75 = v157;
  if (v74(v72, 1, v157) == 1)
  {
    sub_100015704(v70, &qword_100369E50);
    v76 = v74(v73, 1, v75);
    v77 = (uint64_t)v153;
    v78 = v159;
    if (v76 == 1)
    {
      sub_100015704(v72, &qword_100369E50);
      goto LABEL_34;
    }
LABEL_30:
    v81 = &qword_10036A640;
LABEL_31:
    v82 = v72;
LABEL_40:
    sub_100015704(v82, v81);
    goto LABEL_41;
  }
  v79 = v151;
  sub_10000E660(v72, v151, &qword_100369E50);
  v80 = v74(v73, 1, v75);
  v78 = v159;
  if (v80 == 1)
  {
    sub_100015704(v70, &qword_100369E50);
    sub_100004030(v79, type metadata accessor for Proto_Gpsd_Indication);
    goto LABEL_30;
  }
  v83 = v70;
  v84 = v79;
  v85 = v146;
  sub_100003E08(v73, v146, type metadata accessor for Proto_Gpsd_Indication);
  v86 = sub_10000FD38(&qword_10036A650, type metadata accessor for Proto_Gpsd_Indication, (uint64_t)&unk_1002EABC8);
  v87 = dispatch thunk of static Equatable.== infix(_:_:)(v84, v85, v75, v86);
  sub_100004030(v85, type metadata accessor for Proto_Gpsd_Indication);
  sub_100015704(v83, &qword_100369E50);
  v77 = (uint64_t)v153;
  sub_100004030(v84, type metadata accessor for Proto_Gpsd_Indication);
  sub_100015704(v72, &qword_100369E50);
  if ((v87 & 1) == 0)
  {
LABEL_41:
    v64 = v162;
    goto LABEL_42;
  }
LABEL_34:
  v88 = v162
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess(v162+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, &v170, 0, 0);
  sub_10000E660(v88, v78, &qword_100369E58);
  v89 = v55
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess(v55+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, &v169, 0, 0);
  v90 = v148;
  v91 = v148 + *(int *)(v149 + 48);
  sub_10000E660(v78, v148, &qword_100369E58);
  sub_10000E660(v89, v91, &qword_100369E58);
  v92 = v78;
  v93 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48);
  v94 = v150;
  if (v93(v90, 1, v150) == 1)
  {
    sub_100015704(v92, &qword_100369E58);
    if (v93(v91, 1, v94) == 1)
    {
      sub_100015704(v90, &qword_100369E58);
      goto LABEL_45;
    }
LABEL_39:
    v81 = &qword_10036A638;
    v82 = v90;
    goto LABEL_40;
  }
  v95 = v144;
  sub_10000E660(v90, v144, &qword_100369E58);
  if (v93(v91, 1, v94) == 1)
  {
    sub_100015704(v159, &qword_100369E58);
    sub_100004030(v95, type metadata accessor for CLP_LogEntry_AONLoc_Response);
    goto LABEL_39;
  }
  v97 = v139;
  sub_100003E08(v91, v139, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  v98 = sub_10000E880(v95, v97);
  sub_100004030(v97, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_100015704(v159, &qword_100369E58);
  sub_100004030(v95, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_100015704(v90, &qword_100369E58);
  if ((v98 & 1) == 0)
    goto LABEL_41;
LABEL_45:
  v99 = v162
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess(v162+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, &v168, 0, 0);
  v100 = v145;
  sub_10000E660(v99, v145, &qword_100369E60);
  v101 = v55
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess(v55+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, &v167, 0, 0);
  v72 = v143;
  v102 = v143 + *(int *)(v140 + 48);
  sub_10000E660(v100, v143, &qword_100369E60);
  sub_10000E660(v101, v102, &qword_100369E60);
  v103 = v142;
  v104 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48);
  if (v104(v72, 1, v142) == 1)
  {
    sub_100015704(v100, &qword_100369E60);
    if (v104(v102, 1, v103) == 1)
    {
      sub_100015704(v72, &qword_100369E60);
      v105 = (uint64_t)v138;
      goto LABEL_52;
    }
    goto LABEL_50;
  }
  v106 = v137;
  sub_10000E660(v72, (uint64_t)v137, &qword_100369E60);
  v107 = v104(v102, 1, v103);
  v105 = (uint64_t)v138;
  if (v107 == 1)
  {
    sub_100015704(v145, &qword_100369E60);
    sub_100004030((uint64_t)v106, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
LABEL_50:
    v81 = &qword_10036A630;
    goto LABEL_31;
  }
  v108 = v135;
  sub_100003E08(v102, (uint64_t)v135, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  v109 = sub_10000E6BC(v106, v108, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &qword_10036A678, (uint64_t)&unk_1002D5C00);
  sub_100004030((uint64_t)v108, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  sub_100015704(v145, &qword_100369E60);
  sub_100004030((uint64_t)v106, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  sub_100015704(v72, &qword_100369E60);
  if ((v109 & 1) == 0)
    goto LABEL_41;
LABEL_52:
  v110 = v162
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess(v162+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, &v166, 0, 0);
  sub_10000E660(v110, v77, &qword_100369E58);
  v111 = v55
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess(v55+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, &v165, 0, 0);
  v72 = v136;
  v112 = v136 + *(int *)(v149 + 48);
  sub_10000E660(v77, v136, &qword_100369E58);
  sub_10000E660(v111, v112, &qword_100369E58);
  v113 = v150;
  if (v93(v72, 1, v150) == 1)
  {
    sub_100015704(v77, &qword_100369E58);
    if (v93(v112, 1, v113) == 1)
    {
      sub_100015704(v72, &qword_100369E58);
      goto LABEL_59;
    }
    goto LABEL_57;
  }
  v114 = v134;
  sub_10000E660(v72, v134, &qword_100369E58);
  if (v93(v112, 1, v113) == 1)
  {
    sub_100015704(v77, &qword_100369E58);
    sub_100004030(v114, type metadata accessor for CLP_LogEntry_AONLoc_Response);
LABEL_57:
    v81 = &qword_10036A638;
    goto LABEL_31;
  }
  v115 = v114;
  v116 = v139;
  sub_100003E08(v112, v139, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  v117 = sub_10000E880(v115, v116);
  sub_100004030(v116, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_100015704(v77, &qword_100369E58);
  sub_100004030(v115, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_100015704(v72, &qword_100369E58);
  if ((v117 & 1) == 0)
    goto LABEL_41;
LABEL_59:
  v118 = v162;
  v119 = v162
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
  swift_beginAccess(v162+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0], &v164, 0, 0);
  sub_10000E660(v119, v105, &qword_100369E68);
  v120 = v55
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
  swift_beginAccess(v55+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0], &v163, 0, 0);
  v121 = v133;
  v122 = v133 + *(int *)(v130 + 48);
  sub_10000E660(v105, v133, &qword_100369E68);
  sub_10000E660(v120, v122, &qword_100369E68);
  v123 = v132;
  v124 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  if (v124(v121, 1, v132) != 1)
  {
    v125 = v129;
    sub_10000E660(v121, (uint64_t)v129, &qword_100369E68);
    if (v124(v122, 1, v123) == 1)
    {
      swift_release(v162);
      swift_release(v55);
      sub_100015704(v105, &qword_100369E68);
      sub_100004030((uint64_t)v125, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
      goto LABEL_64;
    }
    v126 = v128;
    sub_100003E08(v122, (uint64_t)v128, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    v127 = sub_10000E6BC(v125, v126, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, &qword_10036A670, (uint64_t)&unk_1002E9AB8);
    swift_release(v162);
    swift_release(v55);
    sub_100004030((uint64_t)v126, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    sub_100015704(v105, &qword_100369E68);
    sub_100004030((uint64_t)v125, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    sub_100015704(v121, &qword_100369E68);
    return (v127 & 1) != 0;
  }
  swift_release(v118);
  swift_release(v55);
  sub_100015704(v105, &qword_100369E68);
  if (v124(v122, 1, v123) != 1)
  {
LABEL_64:
    sub_100015704(v121, &qword_10036A628);
    return 0;
  }
  sub_100015704(v121, &qword_100369E68);
  return 1;
}

Swift::Int sub_10000D470()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_AONLoc_Indication, &qword_100369EC8, (uint64_t)&unk_1002C3C5C);
}

uint64_t sub_10000D48C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (qword_100385840 != -1)
    swift_once(&qword_100385840, sub_10000AC28);
  v5 = qword_100385848;
  *(_QWORD *)(a2 + v4) = qword_100385848;
  return swift_retain(v5);
}

uint64_t sub_10000D4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000B420(a1, a2, a3);
}

uint64_t sub_10000D4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000B7A0(a1, a2, a3);
}

uint64_t sub_10000D510(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036A5C0, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&unk_1002C3BD4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000D560@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100385838, (uint64_t)qword_100382F08, (uint64_t)sub_10000A910, a1);
}

uint64_t sub_10000D57C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_100369FA8, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&unk_1002C3B5C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10000D5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100369FA8, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&unk_1002C3B5C);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000D610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382F20);
  sub_10000E6A4(v0, (uint64_t)qword_100382F20);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3140;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "ERROR_MESSAGE";
  *(_QWORD *)(v9 + 8) = 13;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 11;
  *(_QWORD *)v13 = "GNSS_RESPONSE";
  *(_QWORD *)(v13 + 8) = 13;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 12;
  *(_QWORD *)v15 = "GNSS_INDICATION";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 21;
  *(_QWORD *)v17 = "WIFI_RESPONSE";
  *((_QWORD *)v17 + 1) = 13;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 22;
  *(_QWORD *)v19 = "WIFI_INDICATION";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 31;
  *(_QWORD *)v21 = "BT_RESPONSE";
  *((_QWORD *)v21 + 1) = 11;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 32;
  *(_QWORD *)v23 = "BT_INDICATION";
  *((_QWORD *)v23 + 1) = 13;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10000D884()
{
  return sub_100008BD0(&qword_100385850, (uint64_t)qword_100382F20, (uint64_t)sub_10000D610);
}

uint64_t sub_10000D8A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100385850, (uint64_t)qword_100382F20, (uint64_t)sub_10000D610, a1);
}

uint64_t sub_10000D8BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100385850, (uint64_t)qword_100382F20, (uint64_t)sub_10000D610, a1);
}

void *sub_10000D8D8()
{
  return &unk_100351D20;
}

unint64_t sub_10000D8E4()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_10000D900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382F38);
  sub_10000E6A4(v0, (uint64_t)qword_100382F38);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "request";
  *(_QWORD *)(v9 + 8) = 7;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 3;
  *(_QWORD *)v13 = "indication";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10000DA54()
{
  return sub_100008BD0(&qword_100385858, (uint64_t)qword_100382F38, (uint64_t)sub_10000D900);
}

uint64_t sub_10000DA70@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100385858, (uint64_t)qword_100382F38, (uint64_t)sub_10000D900, a1);
}

uint64_t sub_10000DA8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 1)
      {
        v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
        v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
        v11 = (unint64_t *)&qword_100369F30;
        v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request;
        v13 = &unk_1002C342C;
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
    v10 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
    v11 = &qword_100369FA8;
    v12 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    v13 = &unk_1002C3B5C;
LABEL_5:
    v14 = sub_10000FD38(v11, v12, (uint64_t)v13);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_10000DBB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_10000DC24(v3, a1, a2, a3);
  if (!v4)
  {
    sub_10000DD98(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10000DC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_100369E70);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_10000E660(a1 + *(int *)(v13 + 20), (uint64_t)v8, &qword_100369E70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E70);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  v15 = sub_10000FD38((unint64_t *)&qword_100369F30, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&unk_1002C342C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t sub_10000DD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_100369E78);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_100369E78);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E78);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  v15 = sub_10000FD38(&qword_100369FA8, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&unk_1002C3B5C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

Swift::Int sub_10000DF10()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, &qword_100369ED0, (uint64_t)&unk_1002C3DEC);
}

Swift::Int sub_10000DF2C(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, 0);
  v6 = a1(0);
  v7 = sub_10000FD38(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_10000DFA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 24);
  v7 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_10000E028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000DA8C(a1, a2, a3);
}

uint64_t sub_10000E03C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000DBB8(a1, a2, a3);
}

uint64_t sub_10000E050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036A5B8, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&unk_1002C3D64);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000E0A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100385858, (uint64_t)qword_100382F38, (uint64_t)sub_10000D900, a1);
}

uint64_t sub_10000E0BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_100369FC0, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&unk_1002C3CEC);
  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_10000E0FC(uint64_t a1, uint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  dispatch thunk of Hashable.hash(into:)(v5, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_10000E150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100369FC0, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&unk_1002C3CEC);
  return Message.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10000E1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  dispatch thunk of Hashable.hash(into:)(v6, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_10000E1F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  BOOL v25;
  uint64_t v27;
  unint64_t *v28;

  v10 = a3(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v16 = (char *)&v27 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 == *(_QWORD *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
    {
      v23 = 1;
    }
    else
    {
      v27 = a1;
      v28 = a4;
      v18 = a2;
      v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v20 = *(_QWORD *)(v14 + 72);
      v21 = v17 - 1;
      do
      {
        sub_100003FEC(v27 + v19, (uint64_t)v16, a3);
        sub_100003FEC(v18 + v19, (uint64_t)v13, a3);
        v22 = sub_10000FD38(v28, a3, a5);
        v23 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v13, v10, v22);
        sub_100004030((uint64_t)v13, a3);
        sub_100004030((uint64_t)v16, a3);
        v25 = v21-- != 0;
        if ((v23 & 1) == 0)
          break;
        v19 += v20;
      }
      while (v25);
    }
  }
  else
  {
    v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_10000E35C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  BOOL v14;
  char v16;
  char v17;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == *(_QWORD *)(a2 + 16))
  {
    if (!v4 || a1 == a2)
    {
      v12 = 1;
    }
    else
    {
      v6 = (char *)(a1 + 32);
      v7 = (char *)(a2 + 32);
      v8 = a3();
      v9 = v4 - 1;
      do
      {
        v10 = *v6++;
        v17 = v10;
        v11 = *v7++;
        v16 = v11;
        v12 = dispatch thunk of static Equatable.== infix(_:_:)(&v17, &v16, a4, v8);
        v14 = v9-- != 0;
      }
      while ((v12 & 1) != 0 && v14);
    }
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

BOOL sub_10000E408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (int *)(a1 + 36);
  v6 = (int *)(a2 + 36);
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_10000E47C(uint64_t a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 11:
      result = 2;
      break;
    case 21:
      result = 3;
      break;
    case 31:
      result = 4;
      break;
    default:
      result = 5;
      break;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Response(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003873B0, (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_Response);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003873C0, (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003873D0, (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Indication(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003873E0, (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100387400, (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_Indication._StorageClass);
}

uint64_t sub_10000E530(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000039AC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000E574(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000039AC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000E5B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 0;
  switch(v1)
  {
    case 0:
      return result;
    case 10:
      result = 1;
      break;
    case 11:
      result = 2;
      break;
    case 20:
      result = 3;
      break;
    case 21:
      result = 4;
      break;
    case 30:
      result = 5;
      break;
    case 31:
      result = 6;
      break;
    default:
      result = 7;
      break;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003873F0, (uint64_t)&nominal type descriptor for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t sub_10000E62C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_10000E660(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000039AC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000E6A4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10000E6BC(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;

  v12 = type metadata accessor for UnknownStorage(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v35 - v17;
  v19 = a3(0);
  v20 = v19;
  v21 = *(int *)(v19 + 24);
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = *((_BYTE *)a1 + v21 + 8);
  v24 = (uint64_t *)((char *)a2 + v21);
  v25 = *((unsigned __int8 *)a2 + v21 + 8);
  if ((v23 & 1) != 0)
  {
    if (!v25)
      goto LABEL_14;
  }
  else
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      goto LABEL_14;
  }
  v26 = *(int *)(v19 + 28);
  v27 = *((unsigned __int8 *)a1 + v26);
  v28 = *((unsigned __int8 *)a2 + v26);
  if (v27 == 2)
  {
    if (v28 != 2)
    {
LABEL_14:
      v32 = 0;
      return v32 & 1;
    }
  }
  else if (v28 == 2 || ((((v28 & 1) == 0) ^ v27) & 1) == 0)
  {
    goto LABEL_14;
  }
  if ((sub_10000E1F0(*a1, *a2, a4, a5, a6) & 1) == 0)
    goto LABEL_14;
  v29 = (char *)a1 + *(int *)(v20 + 20);
  v30 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v30(v18, v29, v12);
  v30(v16, (char *)a2 + *(int *)(v20 + 20), v12);
  v31 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v16, v12, v31);
  v33 = *(void (**)(char *, uint64_t))(v13 + 8);
  v33(v16, v12);
  v33(v18, v12);
  return v32 & 1;
}

uint64_t sub_10000E880(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  void (*v24)(_BYTE *, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(_BYTE *, uint64_t);
  _BYTE v29[14];
  char v30;
  char v31;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v29[-v9];
  v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v12 = v11[5];
  v13 = *(char *)(a1 + v12);
  v14 = *(char *)(a2 + v12);
  if (v13 == 5)
  {
    if ((_DWORD)v14 != 5)
      goto LABEL_18;
  }
  else if ((_DWORD)v14 == 5 || qword_1002C4060[v13] != qword_1002C4060[v14])
  {
    goto LABEL_18;
  }
  v15 = v11[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = *(_BYTE *)(a1 + v15 + 8);
  v18 = (_QWORD *)(a2 + v15);
  v19 = *(unsigned __int8 *)(a2 + v15 + 8);
  if ((v17 & 1) != 0)
  {
    if (!v19)
      goto LABEL_18;
  }
  else
  {
    if (*v16 != *v18)
      LOBYTE(v19) = 1;
    if ((v19 & 1) != 0)
      goto LABEL_18;
  }
  v20 = v11[7];
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 10)
  {
    if (v22 == 10)
      goto LABEL_17;
LABEL_18:
    v26 = 0;
    return v26 & 1;
  }
  v31 = v21;
  if (v22 == 10)
    goto LABEL_18;
  v30 = v22;
  v23 = sub_1000155F4();
  if ((dispatch thunk of static Equatable.== infix(_:_:)(&v31, &v30, &type metadata for Proto_Gnss_Result, v23) & 1) == 0)
    goto LABEL_18;
LABEL_17:
  v24 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v24(v10, a1, v4);
  v24(v8, a2, v4);
  v25 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v25);
  v27 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v27(v8, v4);
  v27(v10, v4);
  return v26 & 1;
}

uint64_t sub_10000EA68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v20 - v9;
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(*(_QWORD *)(a1 + v11)),
        swift_retain(v13),
        v14 = sub_10000C318(v12, v13),
        swift_release(v13),
        swift_release(v12),
        v14))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    v16 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v16);
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_10000EBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v68 = a1;
  v69 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v59 = *(_QWORD *)(v2 - 8);
  v60 = v2;
  v3 = __chkstk_darwin(v2);
  v58 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v57 = (char *)&v56 - v5;
  v66 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v63 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v56 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_1000039AC(&qword_10036A600);
  __chkstk_darwin(v62);
  v67 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_100369E78);
  v9 = __chkstk_darwin(v8);
  v61 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v64 = (uint64_t)&v56 - v12;
  __chkstk_darwin(v11);
  v65 = (uint64_t)&v56 - v13;
  v14 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_10036A608);
  __chkstk_darwin(v18);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC(&qword_100369E70);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v56 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v56 - v28;
  v30 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_10000E660(v68 + *(int *)(v30 + 20), (uint64_t)v29, &qword_100369E70);
  sub_10000E660(v69 + *(int *)(v30 + 20), (uint64_t)v27, &qword_100369E70);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v29, (uint64_t)v20, &qword_100369E70);
  sub_10000E660((uint64_t)v27, v31, &qword_100369E70);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) != 1)
  {
    sub_10000E660((uint64_t)v20, (uint64_t)v24, &qword_100369E70);
    if (v32(v31, 1, v14) != 1)
    {
      sub_100003E08(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      v35 = sub_10000F528((uint64_t)v24, (uint64_t)v17);
      sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      sub_100015704((uint64_t)v27, &qword_100369E70);
      sub_100015704((uint64_t)v29, &qword_100369E70);
      sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      sub_100015704((uint64_t)v20, &qword_100369E70);
      if ((v35 & 1) == 0)
        goto LABEL_15;
      goto LABEL_8;
    }
    sub_100015704((uint64_t)v27, &qword_100369E70);
    sub_100015704((uint64_t)v29, &qword_100369E70);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_AONLoc_Request);
LABEL_6:
    v33 = &qword_10036A608;
    v34 = (uint64_t)v20;
LABEL_14:
    sub_100015704(v34, v33);
    goto LABEL_15;
  }
  sub_100015704((uint64_t)v27, &qword_100369E70);
  sub_100015704((uint64_t)v29, &qword_100369E70);
  if (v32(v31, 1, v14) != 1)
    goto LABEL_6;
  sub_100015704((uint64_t)v20, &qword_100369E70);
LABEL_8:
  v36 = v68;
  v37 = v65;
  sub_10000E660(v68 + *(int *)(v30 + 24), v65, &qword_100369E78);
  v38 = v69;
  v39 = v64;
  sub_10000E660(v69 + *(int *)(v30 + 24), v64, &qword_100369E78);
  v40 = v67;
  v41 = v67 + *(int *)(v62 + 48);
  sub_10000E660(v37, v67, &qword_100369E78);
  sub_10000E660(v39, v41, &qword_100369E78);
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
  v43 = v66;
  if (v42(v40, 1, v66) == 1)
  {
    sub_100015704(v39, &qword_100369E78);
    sub_100015704(v37, &qword_100369E78);
    if (v42(v41, 1, v43) == 1)
    {
      sub_100015704(v40, &qword_100369E78);
LABEL_18:
      v50 = v59;
      v49 = v60;
      v51 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
      v52 = v57;
      v51(v57, v36, v60);
      v53 = v58;
      v51(v58, v38, v49);
      v54 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v45 = dispatch thunk of static Equatable.== infix(_:_:)(v52, v53, v49, v54);
      v55 = *(void (**)(char *, uint64_t))(v50 + 8);
      v55(v53, v49);
      v55(v52, v49);
      return v45 & 1;
    }
    goto LABEL_13;
  }
  v44 = v61;
  sub_10000E660(v40, v61, &qword_100369E78);
  if (v42(v41, 1, v43) == 1)
  {
    sub_100015704(v39, &qword_100369E78);
    sub_100015704(v37, &qword_100369E78);
    sub_100004030(v44, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
LABEL_13:
    v33 = &qword_10036A600;
    v34 = v40;
    goto LABEL_14;
  }
  v47 = v56;
  sub_100003E08(v41, v56, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  v48 = sub_10000EA68(v44, v47);
  sub_100004030(v47, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  sub_100015704(v39, &qword_100369E78);
  sub_100015704(v37, &qword_100369E78);
  sub_100004030(v44, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  sub_100015704(v40, &qword_100369E78);
  if ((v48 & 1) != 0)
    goto LABEL_18;
LABEL_15:
  v45 = 0;
  return v45 & 1;
}

uint64_t sub_10000F248(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  char v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  float *v22;
  char v23;
  float *v24;
  int v25;
  uint64_t v26;
  float *v27;
  char v28;
  float *v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  char v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  double *v37;
  char v38;
  double *v39;
  int v40;
  uint64_t v41;
  double *v42;
  char v43;
  double *v44;
  int v45;
  char v46;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v52 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v12 = v11;
  v13 = v11[8];
  v14 = *((unsigned __int8 *)a1 + v13);
  v15 = *((unsigned __int8 *)a2 + v13);
  if (v14 == 2)
  {
    if (v15 != 2)
      goto LABEL_41;
  }
  else if (v15 == 2 || ((((v15 & 1) == 0) ^ v14) & 1) == 0)
  {
    goto LABEL_41;
  }
  v16 = v11[9];
  v17 = (_DWORD *)((char *)a1 + v16);
  v18 = *((_BYTE *)a1 + v16 + 4);
  v19 = (_DWORD *)((char *)a2 + v16);
  v20 = *((unsigned __int8 *)a2 + v16 + 4);
  if ((v18 & 1) != 0)
  {
    if (!v20)
      goto LABEL_41;
  }
  else
  {
    if (*v17 != *v19)
      LOBYTE(v20) = 1;
    if ((v20 & 1) != 0)
      goto LABEL_41;
  }
  v21 = v11[10];
  v22 = (float *)((char *)a1 + v21);
  v23 = *((_BYTE *)a1 + v21 + 4);
  v24 = (float *)((char *)a2 + v21);
  v25 = *((unsigned __int8 *)a2 + v21 + 4);
  if ((v23 & 1) != 0)
  {
    if (!v25)
      goto LABEL_41;
  }
  else
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      goto LABEL_41;
  }
  v26 = v11[11];
  v27 = (float *)((char *)a1 + v26);
  v28 = *((_BYTE *)a1 + v26 + 4);
  v29 = (float *)((char *)a2 + v26);
  v30 = *((unsigned __int8 *)a2 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      goto LABEL_41;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      goto LABEL_41;
  }
  v31 = v11[12];
  v32 = (_DWORD *)((char *)a1 + v31);
  v33 = *((_BYTE *)a1 + v31 + 4);
  v34 = (_DWORD *)((char *)a2 + v31);
  v35 = *((unsigned __int8 *)a2 + v31 + 4);
  if ((v33 & 1) != 0)
  {
    if (!v35)
      goto LABEL_41;
  }
  else
  {
    if (*v32 != *v34)
      LOBYTE(v35) = 1;
    if ((v35 & 1) != 0)
      goto LABEL_41;
  }
  if ((sub_10000E35C(*a1, *a2, (uint64_t (*)(void))sub_1000156C0, (uint64_t)&type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType) & 1) == 0|| (sub_10000E35C(a1[1], a2[1], (uint64_t (*)(void))sub_10001567C, (uint64_t)&type metadata for CLP_LogEntry_PrivateData_WifiRfBand) & 1) == 0|| !sub_10000E408(a1[2], a2[2]))
  {
    goto LABEL_41;
  }
  v36 = v12[13];
  v37 = (double *)((char *)a1 + v36);
  v38 = *((_BYTE *)a1 + v36 + 8);
  v39 = (double *)((char *)a2 + v36);
  v40 = *((unsigned __int8 *)a2 + v36 + 8);
  if ((v38 & 1) != 0)
  {
    if (!v40)
      goto LABEL_41;
  }
  else
  {
    if (*v37 != *v39)
      LOBYTE(v40) = 1;
    if ((v40 & 1) != 0)
      goto LABEL_41;
  }
  v41 = v12[14];
  v42 = (double *)((char *)a1 + v41);
  v43 = *((_BYTE *)a1 + v41 + 8);
  v44 = (double *)((char *)a2 + v41);
  v45 = *((unsigned __int8 *)a2 + v41 + 8);
  if ((v43 & 1) == 0)
  {
    if (*v42 != *v44)
      LOBYTE(v45) = 1;
    if ((v45 & 1) != 0)
      goto LABEL_41;
LABEL_46:
    v48 = (char *)a1 + v12[7];
    v49 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v49(v10, v48, v4);
    v49(v8, (char *)a2 + v12[7], v4);
    v50 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v46 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v50);
    v51 = *(void (**)(char *, uint64_t))(v5 + 8);
    v51(v8, v4);
    v51(v10, v4);
    return v46 & 1;
  }
  if (v45)
    goto LABEL_46;
LABEL_41:
  v46 = 0;
  return v46 & 1;
}

uint64_t sub_10000F528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  int *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  _DWORD *v46;
  char v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;

  v4 = type metadata accessor for UnknownStorage(0);
  v84 = *(_QWORD *)(v4 - 8);
  v85 = v4;
  v5 = __chkstk_darwin(v4);
  v83 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v82 = (char *)&v79 - v7;
  v91 = type metadata accessor for Proto_Gpsd_Request(0);
  v88 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v81 = (uint64_t)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_1000039AC(&qword_10036A6A0);
  __chkstk_darwin(v87);
  v92 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000039AC(&qword_100369E40);
  v11 = __chkstk_darwin(v10);
  v86 = (uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v89 = (uint64_t)&v79 - v14;
  __chkstk_darwin(v13);
  v90 = (uint64_t)&v79 - v15;
  v16 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_1000039AC(&qword_10036A6A8);
  __chkstk_darwin(v20);
  v22 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000039AC(&qword_100369E38);
  v24 = __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v79 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v79 - v30;
  v32 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v33 = a2;
  v34 = v32;
  v35 = v32[5];
  v36 = (_QWORD *)(a1 + v35);
  v37 = *(_BYTE *)(a1 + v35 + 8);
  v38 = (_QWORD *)(v33 + v35);
  v39 = *(unsigned __int8 *)(v33 + v35 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39)
      goto LABEL_38;
  }
  else
  {
    if (*v36 != *v38)
      LOBYTE(v39) = 1;
    if ((v39 & 1) != 0)
      goto LABEL_38;
  }
  v40 = v32[6];
  v41 = (_DWORD *)(a1 + v40);
  v42 = *(_BYTE *)(a1 + v40 + 4);
  v43 = (_DWORD *)(v33 + v40);
  v44 = *(unsigned __int8 *)(v33 + v40 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_38;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_38;
  }
  v45 = v32[7];
  v46 = (_DWORD *)(a1 + v45);
  v47 = *(_BYTE *)(a1 + v45 + 4);
  v48 = (_DWORD *)(v33 + v45);
  v49 = *(unsigned __int8 *)(v33 + v45 + 4);
  if ((v47 & 1) != 0)
  {
    if (!v49)
      goto LABEL_38;
  }
  else
  {
    if (*v46 != *v48)
      LOBYTE(v49) = 1;
    if ((v49 & 1) != 0)
      goto LABEL_38;
  }
  v50 = v32[8];
  v51 = *(char *)(a1 + v50);
  v52 = *(char *)(v33 + v50);
  if (v51 == 5)
  {
    if ((_DWORD)v52 != 5)
      goto LABEL_38;
  }
  else if ((_DWORD)v52 == 5 || qword_1002C4060[v51] != qword_1002C4060[v52])
  {
    goto LABEL_38;
  }
  v53 = v32[9];
  v79 = a1;
  v54 = a1 + v53;
  v55 = v33;
  sub_10000E660(v54, (uint64_t)v31, &qword_100369E38);
  v56 = v34[9];
  v80 = v55;
  sub_10000E660(v55 + v56, (uint64_t)v29, &qword_100369E38);
  v57 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_10000E660((uint64_t)v31, (uint64_t)v22, &qword_100369E38);
  sub_10000E660((uint64_t)v29, v57, &qword_100369E38);
  v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v58((uint64_t)v22, 1, v16) != 1)
  {
    sub_10000E660((uint64_t)v22, (uint64_t)v26, &qword_100369E38);
    if (v58(v57, 1, v16) != 1)
    {
      sub_100003E08(v57, (uint64_t)v19, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      v60 = sub_10000F248(v26, v19);
      sub_100004030((uint64_t)v19, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      sub_100015704((uint64_t)v29, &qword_100369E38);
      sub_100015704((uint64_t)v31, &qword_100369E38);
      sub_100004030((uint64_t)v26, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      sub_100015704((uint64_t)v22, &qword_100369E38);
      if ((v60 & 1) == 0)
        goto LABEL_38;
      goto LABEL_31;
    }
    sub_100015704((uint64_t)v29, &qword_100369E38);
    sub_100015704((uint64_t)v31, &qword_100369E38);
    sub_100004030((uint64_t)v26, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_29:
    v59 = &qword_10036A6A8;
LABEL_37:
    sub_100015704((uint64_t)v22, v59);
    goto LABEL_38;
  }
  sub_100015704((uint64_t)v29, &qword_100369E38);
  sub_100015704((uint64_t)v31, &qword_100369E38);
  if (v58(v57, 1, v16) != 1)
    goto LABEL_29;
  sub_100015704((uint64_t)v22, &qword_100369E38);
LABEL_31:
  v61 = v90;
  sub_10000E660(v79 + v34[10], v90, &qword_100369E40);
  v62 = v89;
  sub_10000E660(v80 + v34[10], v89, &qword_100369E40);
  v22 = v92;
  v63 = (uint64_t)&v92[*(int *)(v87 + 48)];
  sub_10000E660(v61, (uint64_t)v92, &qword_100369E40);
  sub_10000E660(v62, v63, &qword_100369E40);
  v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  v65 = v91;
  if (v64((uint64_t)v22, 1, v91) == 1)
  {
    sub_100015704(v62, &qword_100369E40);
    sub_100015704(v61, &qword_100369E40);
    if (v64(v63, 1, v65) == 1)
    {
      sub_100015704((uint64_t)v22, &qword_100369E40);
LABEL_41:
      v73 = v84;
      v72 = v85;
      v74 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 16);
      v75 = v82;
      v74(v82, v79, v85);
      v76 = v83;
      v74(v83, v80, v72);
      v77 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v67 = dispatch thunk of static Equatable.== infix(_:_:)(v75, v76, v72, v77);
      v78 = *(void (**)(char *, uint64_t))(v73 + 8);
      v78(v76, v72);
      v78(v75, v72);
      return v67 & 1;
    }
    goto LABEL_36;
  }
  v66 = v86;
  sub_10000E660((uint64_t)v22, v86, &qword_100369E40);
  if (v64(v63, 1, v65) == 1)
  {
    sub_100015704(v62, &qword_100369E40);
    sub_100015704(v61, &qword_100369E40);
    sub_100004030(v66, type metadata accessor for Proto_Gpsd_Request);
LABEL_36:
    v59 = &qword_10036A6A0;
    goto LABEL_37;
  }
  v69 = v81;
  sub_100003E08(v63, v81, type metadata accessor for Proto_Gpsd_Request);
  v70 = sub_10000FD38(&qword_10036A6B0, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&unk_1002EA8D0);
  v71 = dispatch thunk of static Equatable.== infix(_:_:)(v66, v69, v65, v70);
  sub_100004030(v69, type metadata accessor for Proto_Gpsd_Request);
  sub_100015704(v62, &qword_100369E40);
  sub_100015704(v61, &qword_100369E40);
  sub_100004030(v66, type metadata accessor for Proto_Gpsd_Request);
  sub_100015704((uint64_t)v22, &qword_100369E40);
  if ((v71 & 1) != 0)
    goto LABEL_41;
LABEL_38:
  v67 = 0;
  return v67 & 1;
}

unint64_t sub_10000FCB0()
{
  unint64_t result;

  result = qword_100369E88;
  if (!qword_100369E88)
  {
    result = swift_getWitnessTable(&unk_1002E94A8, &type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
    atomic_store(result, (unint64_t *)&qword_100369E88);
  }
  return result;
}

unint64_t sub_10000FCF4()
{
  unint64_t result;

  result = qword_100369E90;
  if (!qword_100369E90)
  {
    result = swift_getWitnessTable(&unk_1002CC218, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand);
    atomic_store(result, (unint64_t *)&qword_100369E90);
  }
  return result;
}

uint64_t sub_10000FD38(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000FD7C()
{
  unint64_t result;

  result = qword_100369ED8;
  if (!qword_100369ED8)
  {
    result = swift_getWitnessTable(&unk_1002C31EC, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_100369ED8);
  }
  return result;
}

unint64_t sub_10000FDC4()
{
  unint64_t result;

  result = qword_100369EE0;
  if (!qword_100369EE0)
  {
    result = swift_getWitnessTable(&unk_1002C3214, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_100369EE0);
  }
  return result;
}

unint64_t sub_10000FE0C()
{
  unint64_t result;

  result = qword_100369EE8;
  if (!qword_100369EE8)
  {
    result = swift_getWitnessTable(&unk_1002C329C, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_100369EE8);
  }
  return result;
}

uint64_t sub_10000FE50()
{
  return sub_10000FFB4(&qword_100369EF0, &qword_100369EF8);
}

uint64_t sub_10000FE74(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_10000FEBC()
{
  unint64_t result;

  result = qword_100369F00;
  if (!qword_100369F00)
  {
    result = swift_getWitnessTable(&unk_1002C330C, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_100369F00);
  }
  return result;
}

unint64_t sub_10000FF04()
{
  unint64_t result;

  result = qword_100369F08;
  if (!qword_100369F08)
  {
    result = swift_getWitnessTable(&unk_1002C3334, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_100369F08);
  }
  return result;
}

unint64_t sub_10000FF4C()
{
  unint64_t result;

  result = qword_100369F10;
  if (!qword_100369F10)
  {
    result = swift_getWitnessTable(&unk_1002C33BC, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_100369F10);
  }
  return result;
}

uint64_t sub_10000FF90()
{
  return sub_10000FFB4(&qword_100369F18, &qword_100369F20);
}

uint64_t sub_10000FFB4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000FE74(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000FFF4()
{
  return sub_10000FD38(&qword_100369F28, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&unk_1002C3504);
}

uint64_t sub_100010020()
{
  return sub_10000FD38((unint64_t *)&qword_100369F30, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&unk_1002C342C);
}

uint64_t sub_10001004C()
{
  return sub_10000FD38(&qword_100369E80, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&unk_1002C352C);
}

uint64_t sub_100010078()
{
  return sub_10000FD38(&qword_100369F38, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&unk_1002C356C);
}

uint64_t sub_1000100A4()
{
  return sub_10000FD38(&qword_100369F40, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&unk_1002C3694);
}

uint64_t sub_1000100D0()
{
  return sub_10000FD38(&qword_100369F48, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&unk_1002C35BC);
}

uint64_t sub_1000100FC()
{
  return sub_10000FD38(&qword_100369E98, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&unk_1002C36BC);
}

uint64_t sub_100010128()
{
  return sub_10000FD38(&qword_100369F50, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&unk_1002C36FC);
}

uint64_t sub_100010154()
{
  return sub_10000FD38(&qword_100369F58, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&unk_1002C37FC);
}

uint64_t sub_100010180()
{
  return sub_10000FD38(&qword_100369F60, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&unk_1002C3724);
}

uint64_t sub_1000101AC()
{
  return sub_10000FD38(&qword_100369EA0, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&unk_1002C3824);
}

uint64_t sub_1000101D8()
{
  return sub_10000FD38(&qword_100369F68, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&unk_1002C3864);
}

uint64_t sub_100010204()
{
  return sub_10000FD38(&qword_100369F70, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&unk_1002C3964);
}

uint64_t sub_100010230()
{
  return sub_10000FD38(&qword_100369F78, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&unk_1002C388C);
}

uint64_t sub_10001025C()
{
  return sub_10000FD38(&qword_100369EB0, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&unk_1002C398C);
}

uint64_t sub_100010288()
{
  return sub_10000FD38(&qword_100369F80, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&unk_1002C39CC);
}

uint64_t sub_1000102B4()
{
  return sub_10000FD38(&qword_100369F88, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&unk_1002C3ACC);
}

uint64_t sub_1000102E0()
{
  return sub_10000FD38(&qword_100369F90, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&unk_1002C39F4);
}

uint64_t sub_10001030C()
{
  return sub_10000FD38(&qword_100369EC0, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&unk_1002C3AF4);
}

uint64_t sub_100010338()
{
  return sub_10000FD38(&qword_100369F98, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&unk_1002C3B34);
}

uint64_t sub_100010364()
{
  return sub_10000FD38(&qword_100369FA0, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&unk_1002C3C34);
}

uint64_t sub_100010390()
{
  return sub_10000FD38(&qword_100369FA8, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&unk_1002C3B5C);
}

uint64_t sub_1000103BC()
{
  return sub_10000FD38(&qword_100369EC8, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&unk_1002C3C5C);
}

uint64_t sub_1000103E8()
{
  return sub_10000FD38(&qword_100369FB0, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&unk_1002C3C9C);
}

uint64_t sub_100010414()
{
  return sub_10000FD38(&qword_100369FB8, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&unk_1002C3DC4);
}

uint64_t sub_100010440()
{
  return sub_10000FD38(&qword_100369FC0, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&unk_1002C3CEC);
}

uint64_t sub_10001046C()
{
  return sub_10000FD38(&qword_100369ED0, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&unk_1002C3DEC);
}

uint64_t sub_100010498()
{
  return sub_10000FD38(&qword_100369FC8, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&unk_1002C3E2C);
}

_QWORD *sub_1000104C4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD, uint64_t, uint64_t);
  char *v60;
  char *v61;
  void (*v62)(_QWORD *, _QWORD *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v26);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    v15 = a3[7];
    v16 = a3[8];
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    *(_DWORD *)v17 = *(_DWORD *)v18;
    v19 = *((_BYTE *)a2 + v16);
    v17[4] = v18[4];
    *((_BYTE *)a1 + v16) = v19;
    v20 = a3[9];
    v21 = (_QWORD *)((char *)a1 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    v23 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    v24 = *((_QWORD *)v23 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
    {
      v25 = sub_1000039AC(&qword_100369E38);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v27 = *v22;
      v28 = v22[1];
      *v21 = *v22;
      v21[1] = v28;
      v62 = v8;
      v29 = v22[2];
      v21[2] = v29;
      v30 = v23[7];
      v60 = (char *)v22 + v30;
      v61 = (char *)v21 + v30;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v28);
      v31 = v29;
      v8 = v62;
      swift_bridgeObjectRetain(v31);
      v62(v61, v60, v7);
      *((_BYTE *)v21 + v23[8]) = *((_BYTE *)v22 + v23[8]);
      v32 = v23[9];
      v33 = (char *)v21 + v32;
      v34 = (char *)v22 + v32;
      v33[4] = v34[4];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v35 = v23[10];
      v36 = (char *)v21 + v35;
      v37 = (char *)v22 + v35;
      v36[4] = v37[4];
      *(_DWORD *)v36 = *(_DWORD *)v37;
      v38 = v23[11];
      v39 = (char *)v21 + v38;
      v40 = (char *)v22 + v38;
      v39[4] = v40[4];
      *(_DWORD *)v39 = *(_DWORD *)v40;
      v41 = v23[12];
      v42 = (char *)v21 + v41;
      v43 = (char *)v22 + v41;
      v42[4] = v43[4];
      *(_DWORD *)v42 = *(_DWORD *)v43;
      v44 = v23[13];
      v45 = (char *)v21 + v44;
      v46 = (char *)v22 + v44;
      v45[8] = v46[8];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v47 = v23[14];
      v48 = (char *)v21 + v47;
      v49 = (char *)v22 + v47;
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
    }
    v50 = a3[10];
    v51 = (char *)a1 + v50;
    v52 = (char *)a2 + v50;
    v53 = type metadata accessor for Proto_Gpsd_Request(0);
    v54 = *(_QWORD *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
    {
      v55 = sub_1000039AC(&qword_100369E40);
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      v8(v51, v52, v7);
      v56 = *(int *)(v53 + 20);
      v57 = *(_QWORD *)&v52[v56];
      *(_QWORD *)&v51[v56] = v57;
      v58 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56);
      swift_retain(v57);
      v58(v51, 0, 1, v53);
    }
  }
  return a1;
}

uint64_t sub_1000107B8(char *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(char *, uint64_t);
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = &a1[*(int *)(a2 + 36)];
  v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease(*(_QWORD *)v6);
    swift_bridgeObjectRelease(*((_QWORD *)v6 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v6 + 2));
    v5(&v6[*(int *)(v7 + 28)], v4);
  }
  v8 = &a1[*(int *)(a2 + 40)];
  v9 = type metadata accessor for Proto_Gpsd_Request(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v5(v8, v4);
    return swift_release(*(_QWORD *)&v8[*(int *)(v9 + 20)]);
  }
  return result;
}

uint64_t sub_1000108B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, _QWORD, uint64_t, uint64_t);
  char *v58;
  char *v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a3[7];
  v15 = a3[8];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v18 = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(a1 + v15) = v18;
  v19 = a3[9];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v23 = *((_QWORD *)v22 - 1);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_1000039AC(&qword_100369E38);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = *v21;
    v26 = v21[1];
    *v20 = *v21;
    v20[1] = v26;
    v60 = v7;
    v27 = v21[2];
    v20[2] = v27;
    v28 = v22[7];
    v58 = (char *)v21 + v28;
    v59 = (char *)v20 + v28;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    v29 = v27;
    v7 = v60;
    swift_bridgeObjectRetain(v29);
    v60((uint64_t)v59, (uint64_t)v58, v6);
    *((_BYTE *)v20 + v22[8]) = *((_BYTE *)v21 + v22[8]);
    v30 = v22[9];
    v31 = (char *)v20 + v30;
    v32 = (char *)v21 + v30;
    v31[4] = v32[4];
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v33 = v22[10];
    v34 = (char *)v20 + v33;
    v35 = (char *)v21 + v33;
    v34[4] = v35[4];
    *(_DWORD *)v34 = *(_DWORD *)v35;
    v36 = v22[11];
    v37 = (char *)v20 + v36;
    v38 = (char *)v21 + v36;
    v37[4] = v38[4];
    *(_DWORD *)v37 = *(_DWORD *)v38;
    v39 = v22[12];
    v40 = (char *)v20 + v39;
    v41 = (char *)v21 + v39;
    v40[4] = v41[4];
    *(_DWORD *)v40 = *(_DWORD *)v41;
    v42 = v22[13];
    v43 = (char *)v20 + v42;
    v44 = (char *)v21 + v42;
    v43[8] = v44[8];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v45 = v22[14];
    v46 = (char *)v20 + v45;
    v47 = (char *)v21 + v45;
    *(_QWORD *)v46 = *(_QWORD *)v47;
    v46[8] = v47[8];
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  v48 = a3[10];
  v49 = (char *)(a1 + v48);
  v50 = (char *)(a2 + v48);
  v51 = type metadata accessor for Proto_Gpsd_Request(0);
  v52 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
  {
    v53 = sub_1000039AC(&qword_100369E40);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v49, (uint64_t)v50, v6);
    v54 = *(int *)(v51 + 20);
    v55 = *(_QWORD *)&v50[v54];
    *(_QWORD *)&v49[v54] = v55;
    v56 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56);
    swift_retain(v55);
    v56(v49, 0, 1, v51);
  }
  return a1;
}

uint64_t sub_100010B80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t, int *);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;

  v6 = type metadata accessor for UnknownStorage(0);
  v106 = *(_QWORD *)(v6 - 8);
  v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 24);
  v105(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 4);
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = v10;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v17 = a3[9];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v21 = *((_QWORD *)v20 - 1);
  v22 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      v25 = *v19;
      *v18 = *v19;
      v26 = v19[1];
      v18[1] = v26;
      v27 = v19[2];
      v18[2] = v27;
      v28 = v20[7];
      v104 = v6;
      v29 = (char *)v18 + v28;
      v102 = (char *)v19 + v28;
      v103 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
      v30 = v29;
      v6 = v104;
      v103(v30, v102, v104);
      *((_BYTE *)v18 + v20[8]) = *((_BYTE *)v19 + v20[8]);
      v31 = v20[9];
      v32 = (char *)v18 + v31;
      v33 = (char *)v19 + v31;
      v34 = v33[4];
      *(_DWORD *)v32 = *(_DWORD *)v33;
      v32[4] = v34;
      v35 = v20[10];
      v36 = (char *)v18 + v35;
      v37 = (char *)v19 + v35;
      v38 = v37[4];
      *(_DWORD *)v36 = *(_DWORD *)v37;
      v36[4] = v38;
      v39 = v20[11];
      v40 = (char *)v18 + v39;
      v41 = (char *)v19 + v39;
      v42 = v41[4];
      *(_DWORD *)v40 = *(_DWORD *)v41;
      v40[4] = v42;
      v43 = v20[12];
      v44 = (char *)v18 + v43;
      v45 = (char *)v19 + v43;
      v46 = v45[4];
      *(_DWORD *)v44 = *(_DWORD *)v45;
      v44[4] = v46;
      v47 = v20[13];
      v48 = (char *)v18 + v47;
      v49 = (char *)v19 + v47;
      v50 = v49[8];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v50;
      v51 = v20[14];
      v52 = (char *)v18 + v51;
      v53 = (char *)v19 + v51;
      v54 = *(_QWORD *)v53;
      v52[8] = v53[8];
      *(_QWORD *)v52 = v54;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    sub_100004030((uint64_t)v18, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_6:
    v55 = sub_1000039AC(&qword_100369E38);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_7;
  }
  v69 = *v19;
  v70 = *v18;
  *v18 = *v19;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70);
  v71 = v19[1];
  v72 = v18[1];
  v18[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v73 = v19[2];
  v74 = v18[2];
  v18[2] = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  v105((uint64_t)v18 + v20[7], (uint64_t)v19 + v20[7], v6);
  *((_BYTE *)v18 + v20[8]) = *((_BYTE *)v19 + v20[8]);
  v75 = v20[9];
  v76 = (char *)v18 + v75;
  v77 = (char *)v19 + v75;
  v78 = v77[4];
  *(_DWORD *)v76 = *(_DWORD *)v77;
  v76[4] = v78;
  v79 = v20[10];
  v80 = (char *)v18 + v79;
  v81 = (char *)v19 + v79;
  v82 = v81[4];
  *(_DWORD *)v80 = *(_DWORD *)v81;
  v80[4] = v82;
  v83 = v20[11];
  v84 = (char *)v18 + v83;
  v85 = (char *)v19 + v83;
  v86 = v85[4];
  *(_DWORD *)v84 = *(_DWORD *)v85;
  v84[4] = v86;
  v87 = v20[12];
  v88 = (char *)v18 + v87;
  v89 = (char *)v19 + v87;
  v90 = v89[4];
  *(_DWORD *)v88 = *(_DWORD *)v89;
  v88[4] = v90;
  v91 = v20[13];
  v92 = (char *)v18 + v91;
  v93 = (char *)v19 + v91;
  v94 = v93[8];
  *(_QWORD *)v92 = *(_QWORD *)v93;
  v92[8] = v94;
  v95 = v20[14];
  v96 = (char *)v18 + v95;
  v97 = (char *)v19 + v95;
  v98 = *(_QWORD *)v97;
  v96[8] = v97[8];
  *(_QWORD *)v96 = v98;
LABEL_7:
  v56 = a3[10];
  v57 = (char *)(a1 + v56);
  v58 = (char *)(a2 + v56);
  v59 = type metadata accessor for Proto_Gpsd_Request(0);
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
  v62 = v61(v57, 1, v59);
  v63 = v61(v58, 1, v59);
  if (!v62)
  {
    if (!v63)
    {
      v105((uint64_t)v57, (uint64_t)v58, v6);
      v99 = *(int *)(v59 + 20);
      v100 = *(_QWORD *)&v58[v99];
      v101 = *(_QWORD *)&v57[v99];
      *(_QWORD *)&v57[v99] = v100;
      swift_retain(v100);
      swift_release(v101);
      return a1;
    }
    sub_100004030((uint64_t)v57, type metadata accessor for Proto_Gpsd_Request);
    goto LABEL_12;
  }
  if (v63)
  {
LABEL_12:
    v67 = sub_1000039AC(&qword_100369E40);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v57, v58, v6);
  v64 = *(int *)(v59 + 20);
  v65 = *(_QWORD *)&v58[v64];
  *(_QWORD *)&v57[v64] = v65;
  v66 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56);
  swift_retain(v65);
  v66(v57, 0, 1, v59);
  return a1;
}

uint64_t sub_10001101C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a3[7];
  v15 = a3[8];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v18 = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(a1 + v15) = v18;
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v23 = *((_QWORD *)v22 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_1000039AC(&qword_100369E38);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
    v20[2] = v21[2];
    v7((uint64_t)v20 + v22[7], (uint64_t)v21 + v22[7], v6);
    *((_BYTE *)v20 + v22[8]) = *((_BYTE *)v21 + v22[8]);
    v25 = v22[9];
    v26 = (char *)v20 + v25;
    v27 = (char *)v21 + v25;
    v26[4] = v27[4];
    *(_DWORD *)v26 = *(_DWORD *)v27;
    v28 = v22[10];
    v29 = (char *)v20 + v28;
    v30 = (char *)v21 + v28;
    v29[4] = v30[4];
    *(_DWORD *)v29 = *(_DWORD *)v30;
    v31 = v22[11];
    v32 = (char *)v20 + v31;
    v33 = (char *)v21 + v31;
    v32[4] = v33[4];
    *(_DWORD *)v32 = *(_DWORD *)v33;
    v34 = v22[12];
    v35 = (char *)v20 + v34;
    v36 = (char *)v21 + v34;
    v35[4] = v36[4];
    *(_DWORD *)v35 = *(_DWORD *)v36;
    v37 = v22[13];
    v38 = (char *)v20 + v37;
    v39 = (char *)v21 + v37;
    v38[8] = v39[8];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v40 = v22[14];
    v41 = (char *)v20 + v40;
    v42 = (char *)v21 + v40;
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  v43 = a3[10];
  v44 = (char *)(a1 + v43);
  v45 = (char *)(a2 + v43);
  v46 = type metadata accessor for Proto_Gpsd_Request(0);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    v48 = sub_1000039AC(&qword_100369E40);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v44, (uint64_t)v45, v6);
    *(_QWORD *)&v44[*(int *)(v46 + 20)] = *(_QWORD *)&v45[*(int *)(v46 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  return a1;
}

uint64_t sub_1000112B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, int *);
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;

  v6 = type metadata accessor for UnknownStorage(0);
  v79 = *(_QWORD *)(v6 - 8);
  v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 40);
  v78(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v17 = *(_BYTE *)(a2 + v14);
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  *(_BYTE *)(a1 + v14) = v17;
  v18 = a3[9];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v22 = *((_QWORD *)v21 - 1);
  v23 = *(uint64_t (**)(char *, uint64_t, int *))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
      (*(void (**)(char *, char *, uint64_t))(v79 + 32))(&v19[v21[7]], &v20[v21[7]], v6);
      v19[v21[8]] = v20[v21[8]];
      v26 = v21[9];
      v27 = &v19[v26];
      v28 = &v20[v26];
      v27[4] = v28[4];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v29 = v21[10];
      v30 = &v19[v29];
      v31 = &v20[v29];
      v30[4] = v31[4];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      v32 = v21[11];
      v33 = &v19[v32];
      v34 = &v20[v32];
      v33[4] = v34[4];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v35 = v21[12];
      v36 = &v19[v35];
      v37 = &v20[v35];
      v36[4] = v37[4];
      *(_DWORD *)v36 = *(_DWORD *)v37;
      v38 = v21[13];
      v39 = &v19[v38];
      v40 = &v20[v38];
      v39[8] = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v41 = v21[14];
      v42 = &v19[v41];
      v43 = &v20[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    sub_100004030((uint64_t)v19, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_6:
    v44 = sub_1000039AC(&qword_100369E38);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_7;
  }
  v55 = *(_QWORD *)v19;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_bridgeObjectRelease(v55);
  v56 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_bridgeObjectRelease(v56);
  v57 = *((_QWORD *)v19 + 2);
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  swift_bridgeObjectRelease(v57);
  v78((uint64_t)&v19[v21[7]], (uint64_t)&v20[v21[7]], v6);
  v19[v21[8]] = v20[v21[8]];
  v58 = v21[9];
  v59 = &v19[v58];
  v60 = &v20[v58];
  v59[4] = v60[4];
  *(_DWORD *)v59 = *(_DWORD *)v60;
  v61 = v21[10];
  v62 = &v19[v61];
  v63 = &v20[v61];
  v62[4] = v63[4];
  *(_DWORD *)v62 = *(_DWORD *)v63;
  v64 = v21[11];
  v65 = &v19[v64];
  v66 = &v20[v64];
  v65[4] = v66[4];
  *(_DWORD *)v65 = *(_DWORD *)v66;
  v67 = v21[12];
  v68 = &v19[v67];
  v69 = &v20[v67];
  v68[4] = v69[4];
  *(_DWORD *)v68 = *(_DWORD *)v69;
  v70 = v21[13];
  v71 = &v19[v70];
  v72 = &v20[v70];
  v71[8] = v72[8];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v73 = v21[14];
  v74 = &v19[v73];
  v75 = &v20[v73];
  *(_QWORD *)v74 = *(_QWORD *)v75;
  v74[8] = v75[8];
LABEL_7:
  v45 = a3[10];
  v46 = (char *)(a1 + v45);
  v47 = (char *)(a2 + v45);
  v48 = type metadata accessor for Proto_Gpsd_Request(0);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (!v51)
  {
    if (!v52)
    {
      v78((uint64_t)v46, (uint64_t)v47, v6);
      v76 = *(int *)(v48 + 20);
      v77 = *(_QWORD *)&v46[v76];
      *(_QWORD *)&v46[v76] = *(_QWORD *)&v47[v76];
      swift_release(v77);
      return a1;
    }
    sub_100004030((uint64_t)v46, type metadata accessor for Proto_Gpsd_Request);
    goto LABEL_12;
  }
  if (v52)
  {
LABEL_12:
    v53 = sub_1000039AC(&qword_100369E40);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v46, v47, v6);
  *(_QWORD *)&v46[*(int *)(v48 + 20)] = *(_QWORD *)&v47[*(int *)(v48 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  return a1;
}

uint64_t sub_1000116F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000116FC);
}

uint64_t sub_1000116FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + a3[8]) <= 5u)
      v9 = 5;
    else
      v9 = *(unsigned __int8 *)(a1 + a3[8]);
    v10 = v9 - 5;
    if (*(unsigned __int8 *)(a1 + a3[8]) >= 5u)
      return v10;
    else
      return 0;
  }
  else
  {
    v11 = sub_1000039AC(&qword_100369E38);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v13 = v11;
      v14 = a3[9];
    }
    else
    {
      v13 = sub_1000039AC(&qword_100369E40);
      v12 = *(_QWORD *)(v13 - 8);
      v14 = a3[10];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1 + v14, a2, v13);
  }
}

uint64_t sub_1000117D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000117E0);
}

uint64_t sub_1000117E0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 250)
    {
      *(_BYTE *)(a1 + a4[8]) = a2 + 5;
      return result;
    }
    v13 = sub_1000039AC(&qword_100369E38);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[9];
    }
    else
    {
      v10 = sub_1000039AC(&qword_100369E40);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[10];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000118AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = "\t";
    v8[2] = &unk_1002C3E98;
    v8[3] = &unk_1002C3E98;
    v8[4] = &unk_1002C3EB0;
    sub_10001198C(319, &qword_10036A028, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
    if (v5 <= 0x3F)
    {
      v8[5] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, (unint64_t *)&unk_10036A030, type metadata accessor for Proto_Gpsd_Request);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 7, v8, a1 + 16);
      }
    }
  }
}

void sub_10001198C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

_BYTE *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_Request.TypeEnum(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.TypeEnum(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.TypeEnum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100011AC4 + 4 * byte_1002C31DC[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100011AF8 + 4 * byte_1002C31D7[v4]))();
}

uint64_t sub_100011AF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011B00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100011B08);
  return result;
}

uint64_t sub_100011B14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100011B1CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100011B20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011B28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011B34(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100011B3C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  return &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum;
}

_QWORD *sub_100011B54(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    v9 = a2[2];
    a1[1] = v8;
    a1[2] = v9;
    v10 = a3[7];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    v15 = a3[9];
    *((_BYTE *)v7 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    v16[4] = v17[4];
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v18 = a3[10];
    v19 = a3[11];
    v20 = (char *)v7 + v18;
    v21 = (char *)a2 + v18;
    v20[4] = v21[4];
    *(_DWORD *)v20 = *(_DWORD *)v21;
    v22 = (char *)v7 + v19;
    v23 = (char *)a2 + v19;
    *(_DWORD *)v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    v24 = a3[12];
    v25 = a3[13];
    v26 = (char *)v7 + v24;
    v27 = (char *)a2 + v24;
    *(_DWORD *)v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
    v28 = (char *)v7 + v25;
    v29 = (char *)a2 + v25;
    v30 = *(_QWORD *)v29;
    v28[8] = v29[8];
    *(_QWORD *)v28 = v30;
    v31 = a3[14];
    v32 = (char *)v7 + v31;
    v33 = (char *)a2 + v31;
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
  }
  return v7;
}

uint64_t sub_100011CC4(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100011D1C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a2[2];
  a1[2] = v8;
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  v14 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v15[4] = v16[4];
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v17 = a3[10];
  v18 = a3[11];
  v19 = (char *)a1 + v17;
  v20 = (char *)a2 + v17;
  v19[4] = v20[4];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  v21 = (char *)a1 + v18;
  v22 = (char *)a2 + v18;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  v23 = a3[12];
  v24 = a3[13];
  v25 = (char *)a1 + v23;
  v26 = (char *)a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  v25[4] = v26[4];
  v27 = (char *)a1 + v24;
  v28 = (char *)a2 + v24;
  v29 = *(_QWORD *)v28;
  v27[8] = v28[8];
  *(_QWORD *)v27 = v29;
  v30 = a3[14];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v31[8] = v32[8];
  return a1;
}

_QWORD *sub_100011E64(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[2];
  v11 = a1[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v16 = a3[9];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v17[4] = v19;
  v20 = a3[10];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = v22[4];
  *(_DWORD *)v21 = *(_DWORD *)v22;
  v21[4] = v23;
  v24 = a3[11];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = v26[4];
  *(_DWORD *)v25 = *(_DWORD *)v26;
  v25[4] = v27;
  v28 = a3[12];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = v30[4];
  *(_DWORD *)v29 = *(_DWORD *)v30;
  v29[4] = v31;
  v32 = a3[13];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = v34[8];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v33[8] = v35;
  v36 = a3[14];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(_QWORD *)v38;
  v37[8] = v38[8];
  *(_QWORD *)v37 = v39;
  return a1;
}

uint64_t sub_100011FC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v13 = a3[10];
  v14 = a3[11];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  v19 = a3[12];
  v20 = a3[13];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a1 + v20;
  v24 = (uint64_t *)(a2 + v20);
  v25 = *v24;
  *(_BYTE *)(v23 + 8) = *((_BYTE *)v24 + 8);
  *(_QWORD *)v23 = v25;
  v26 = a3[14];
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  return a1;
}

_QWORD *sub_1000120E0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v14[4] = v15[4];
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v16 = a3[10];
  v17 = a3[11];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  v18[4] = v19[4];
  *(_DWORD *)v18 = *(_DWORD *)v19;
  v20 = (char *)a1 + v17;
  v21 = (char *)a2 + v17;
  *(_DWORD *)v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  v22 = a3[12];
  v23 = a3[13];
  v24 = (char *)a1 + v22;
  v25 = (char *)a2 + v22;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  v24[4] = v25[4];
  v26 = (char *)a1 + v23;
  v27 = (char *)a2 + v23;
  v28 = *(_QWORD *)v27;
  v26[8] = v27[8];
  *(_QWORD *)v26 = v28;
  v29 = a3[14];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v31[8];
  return a1;
}

uint64_t sub_10001221C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100012228);
}

uint64_t sub_100012228(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_1000122A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000122B0);
}

char *sub_1000122B0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100012324(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_1002C3EE0;
    v4[5] = &unk_1002C3E98;
    v4[6] = &unk_1002C3E98;
    v4[7] = &unk_1002C3E98;
    v4[8] = &unk_1002C3E98;
    v4[9] = "\t";
    v4[10] = "\t";
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_1000123C4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_100012470(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1000124A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100012524(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000125A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100012628(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000126A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000126B4);
}

uint64_t sub_1000126B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 5u)
    v9 = 5;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 5;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 5u)
    return v10;
  else
    return 0;
}

uint64_t sub_100012738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100012744);
}

uint64_t sub_100012744(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 5;
  return result;
}

uint64_t sub_1000127BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1002C3EB0;
    v4[2] = "\t";
    v4[3] = &unk_1002C3F20;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100012858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100012864);
}

uint64_t sub_100012868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100012874);
}

_QWORD *sub_10001287C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)v7 + v13;
    v16 = (char *)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    *((_BYTE *)v7 + v14) = *((_BYTE *)a2 + v14);
  }
  return v7;
}

uint64_t sub_100012948(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100012990(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  return a1;
}

_QWORD *sub_100012A34(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_QWORD *sub_100012AD8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  return a1;
}

_QWORD *sub_100012B68(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  return a1;
}

uint64_t sub_100012C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100012C0C);
}

uint64_t sub_100012C10(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100012C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100012C98);
}

char *sub_100012C9C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100012D10(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "\t";
    v4[3] = &unk_1002C3EE0;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100012D9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }
  swift_retain(v9);
  return a1;
}

uint64_t sub_100012E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_100012E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t sub_100012EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t sub_100012F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100012F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_100012FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100013000);
}

uint64_t sub_100013000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10001307C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100013088);
}

uint64_t sub_100013088(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_100013100(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Proto_Gpsd_CntinStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Indication.TypeEnum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100013250 + 4 * byte_1002C31E6[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100013284 + 4 * byte_1002C31E1[v4]))();
}

uint64_t sub_100013284(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001328C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100013294);
  return result;
}

uint64_t sub_1000132A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000132A8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000132AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000132B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_AONLoc_Indication.TypeEnum()
{
  return &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum;
}

uint64_t *sub_1000132D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_100369E70);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v74 = v13;
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_DWORD *)v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      v10[v12[8]] = v11[v12[8]];
      v25 = v12[9];
      v75 = v8;
      v26 = &v10[v25];
      v27 = &v11[v25];
      v28 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
      v73 = *((_QWORD *)v28 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v73 + 48))(v27, 1, v28))
      {
        v29 = sub_1000039AC(&qword_100369E38);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v30 = *(_QWORD *)v27;
        v69 = *((_QWORD *)v27 + 1);
        *(_QWORD *)v26 = *(_QWORD *)v27;
        *((_QWORD *)v26 + 1) = v69;
        v70 = *((_QWORD *)v27 + 2);
        *((_QWORD *)v26 + 2) = v70;
        v31 = v28[7];
        v71 = &v27[v31];
        v72 = &v26[v31];
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v69);
        swift_bridgeObjectRetain(v70);
        v75(v72, v71, v7);
        v26[v28[8]] = v27[v28[8]];
        v32 = v28[9];
        v33 = &v26[v32];
        v34 = &v27[v32];
        v33[4] = v34[4];
        *(_DWORD *)v33 = *(_DWORD *)v34;
        v35 = v28[10];
        v36 = &v26[v35];
        v37 = &v27[v35];
        v36[4] = v37[4];
        *(_DWORD *)v36 = *(_DWORD *)v37;
        v38 = v28[11];
        v39 = &v26[v38];
        v40 = &v27[v38];
        v39[4] = v40[4];
        *(_DWORD *)v39 = *(_DWORD *)v40;
        v41 = v28[12];
        v42 = &v26[v41];
        v43 = &v27[v41];
        v42[4] = v43[4];
        *(_DWORD *)v42 = *(_DWORD *)v43;
        v44 = v28[13];
        v45 = &v26[v44];
        v46 = &v27[v44];
        v45[8] = v46[8];
        *(_QWORD *)v45 = *(_QWORD *)v46;
        v47 = v28[14];
        v48 = &v26[v47];
        v49 = &v27[v47];
        *(_QWORD *)v48 = *(_QWORD *)v49;
        v48[8] = v49[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v73 + 56))(v26, 0, 1, v28);
      }
      v50 = v12[10];
      v51 = &v10[v50];
      v52 = &v11[v50];
      v53 = type metadata accessor for Proto_Gpsd_Request(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        v55 = sub_1000039AC(&qword_100369E40);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        v75(v51, v52, v7);
        v56 = *(int *)(v53 + 20);
        v57 = *(_QWORD *)&v52[v56];
        *(_QWORD *)&v51[v56] = v57;
        v58 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56);
        swift_retain(v57);
        v58(v51, 0, 1, v53);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v74 + 56))(v10, 0, 1, v12);
      v8 = v75;
    }
    v59 = *(int *)(a3 + 24);
    v60 = (char *)a1 + v59;
    v61 = (char *)a2 + v59;
    v62 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
    v63 = *(_QWORD *)(v62 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
    {
      v64 = sub_1000039AC(&qword_100369E78);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      v8(v60, v61, v7);
      v65 = *(int *)(v62 + 20);
      v66 = *(_QWORD *)&v61[v65];
      *(_QWORD *)&v60[v65] = v66;
      v67 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56);
      swift_retain(v66);
      v67(v60, 0, 1, v62);
    }
  }
  return a1;
}

uint64_t sub_1000136FC(char *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(char *, uint64_t);
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = &a1[*(int *)(a2 + 20)];
  v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v5(v6, v4);
    v8 = &v6[*(int *)(v7 + 36)];
    v9 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    {
      swift_bridgeObjectRelease(*(_QWORD *)v8);
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v8 + 2));
      v5(&v8[*(int *)(v9 + 28)], v4);
    }
    v10 = &v6[*(int *)(v7 + 40)];
    v11 = type metadata accessor for Proto_Gpsd_Request(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
    {
      v5(v10, v4);
      swift_release(*(_QWORD *)&v10[*(int *)(v11 + 20)]);
    }
  }
  v12 = &a1[*(int *)(a2 + 24)];
  v13 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13);
  if (!(_DWORD)result)
  {
    v5(v12, v4);
    return swift_release(*(_QWORD *)&v12[*(int *)(v13 + 20)]);
  }
  return result;
}

uint64_t sub_10001388C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_100369E70);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v73 = v12;
    v74 = a3;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v9[v11[8]] = v10[v11[8]];
    v23 = v11[9];
    v24 = &v9[v23];
    v25 = &v10[v23];
    v26 = v7;
    v27 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    v72 = *((_QWORD *)v27 - 1);
    v75 = v26;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v72 + 48))(v25, 1, v27))
    {
      v28 = sub_1000039AC(&qword_100369E38);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = *(_QWORD *)v25;
      v68 = *((_QWORD *)v25 + 1);
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *((_QWORD *)v24 + 1) = v68;
      v69 = *((_QWORD *)v25 + 2);
      *((_QWORD *)v24 + 2) = v69;
      v30 = v27[7];
      v70 = &v25[v30];
      v71 = &v24[v30];
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v69);
      v26((uint64_t)v71, (uint64_t)v70, v6);
      v24[v27[8]] = v25[v27[8]];
      v31 = v27[9];
      v32 = &v24[v31];
      v33 = &v25[v31];
      v32[4] = v33[4];
      *(_DWORD *)v32 = *(_DWORD *)v33;
      v34 = v27[10];
      v35 = &v24[v34];
      v36 = &v25[v34];
      v35[4] = v36[4];
      *(_DWORD *)v35 = *(_DWORD *)v36;
      v37 = v27[11];
      v38 = &v24[v37];
      v39 = &v25[v37];
      v38[4] = v39[4];
      *(_DWORD *)v38 = *(_DWORD *)v39;
      v40 = v27[12];
      v41 = &v24[v40];
      v42 = &v25[v40];
      v41[4] = v42[4];
      *(_DWORD *)v41 = *(_DWORD *)v42;
      v43 = v27[13];
      v44 = &v24[v43];
      v45 = &v25[v43];
      v44[8] = v45[8];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v46 = v27[14];
      v47 = &v24[v46];
      v48 = &v25[v46];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      v47[8] = v48[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v72 + 56))(v24, 0, 1, v27);
    }
    v49 = v11[10];
    v50 = &v9[v49];
    v51 = &v10[v49];
    v52 = type metadata accessor for Proto_Gpsd_Request(0);
    v53 = *(_QWORD *)(v52 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
    {
      v54 = sub_1000039AC(&qword_100369E40);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      v7 = v75;
    }
    else
    {
      v7 = v75;
      v75((uint64_t)v50, (uint64_t)v51, v6);
      v55 = *(int *)(v52 + 20);
      v56 = *(_QWORD *)&v51[v55];
      *(_QWORD *)&v50[v55] = v56;
      v57 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56);
      swift_retain(v56);
      v57(v50, 0, 1, v52);
    }
    a3 = v74;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v73 + 56))(v9, 0, 1, v11);
  }
  v58 = *(int *)(a3 + 24);
  v59 = (char *)(a1 + v58);
  v60 = (char *)(a2 + v58);
  v61 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v62 = *(_QWORD *)(v61 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
  {
    v63 = sub_1000039AC(&qword_100369E78);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v59, (uint64_t)v60, v6);
    v64 = *(int *)(v61 + 20);
    v65 = *(_QWORD *)&v60[v64];
    *(_QWORD *)&v59[v64] = v65;
    v66 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56);
    swift_retain(v65);
    v66(v59, 0, 1, v61);
  }
  return a1;
}

uint64_t sub_100013C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  int *v52;
  uint64_t (*v53)(char *, uint64_t, int *);
  int v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(char *, uint64_t, uint64_t);
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t, uint64_t, uint64_t);
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  void (*v185)(char *, char *, uint64_t);
  char *v186;
  char *v187;
  uint64_t v188;
  void (*v189)(char *, char *, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void (*v193)(uint64_t, uint64_t, uint64_t);
  void (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v196 = a3;
  v197 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  v195 = v7;
  if (!v15)
  {
    if (v16)
    {
      sub_100004030(v10, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      goto LABEL_7;
    }
    v192 = v6;
    v194 = v8;
    v8(v10, (uint64_t)v11, v6);
    v39 = v12[5];
    v40 = v10 + v39;
    v41 = &v11[v39];
    v42 = *(_QWORD *)v41;
    *(_BYTE *)(v40 + 8) = v41[8];
    *(_QWORD *)v40 = v42;
    v43 = v12[6];
    v44 = v10 + v43;
    v45 = &v11[v43];
    LOBYTE(v42) = v45[4];
    *(_DWORD *)v44 = *(_DWORD *)v45;
    *(_BYTE *)(v44 + 4) = v42;
    v46 = v12[7];
    v47 = v10 + v46;
    v48 = &v11[v46];
    LOBYTE(v42) = v48[4];
    *(_DWORD *)v47 = *(_DWORD *)v48;
    *(_BYTE *)(v47 + 4) = v42;
    *(_BYTE *)(v10 + v12[8]) = v11[v12[8]];
    v49 = v12[9];
    v50 = (_QWORD *)(v10 + v49);
    v51 = &v11[v49];
    v52 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    v190 = *((_QWORD *)v52 - 1);
    v53 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v190 + 48);
    v54 = v53(v50, 1, v52);
    v55 = v51;
    v56 = v53(v51, 1, v52);
    if (v54)
    {
      if (!v56)
      {
        v57 = *(_QWORD *)v51;
        *v50 = *(_QWORD *)v51;
        v58 = *((_QWORD *)v51 + 1);
        v50[1] = v58;
        v59 = *((_QWORD *)v51 + 2);
        v50[2] = v59;
        v60 = v52[7];
        v61 = (char *)v50 + v60;
        v187 = (char *)v55 + v60;
        v185 = *(void (**)(char *, char *, uint64_t))(v195 + 16);
        swift_bridgeObjectRetain(v57);
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(v59);
        v185(v61, v187, v192);
        *((_BYTE *)v50 + v52[8]) = *((_BYTE *)v55 + v52[8]);
        v62 = v52[9];
        v63 = (char *)v50 + v62;
        v64 = (char *)v55 + v62;
        v65 = v64[4];
        *(_DWORD *)v63 = *(_DWORD *)v64;
        v63[4] = v65;
        v66 = v52[10];
        v67 = (char *)v50 + v66;
        v68 = (char *)v55 + v66;
        v69 = v68[4];
        *(_DWORD *)v67 = *(_DWORD *)v68;
        v67[4] = v69;
        v70 = v52[11];
        v71 = (char *)v50 + v70;
        v72 = (char *)v55 + v70;
        v73 = v72[4];
        *(_DWORD *)v71 = *(_DWORD *)v72;
        v71[4] = v73;
        v74 = v52[12];
        v75 = (char *)v50 + v74;
        v76 = (char *)v55 + v74;
        v77 = v76[4];
        *(_DWORD *)v75 = *(_DWORD *)v76;
        v75[4] = v77;
        v78 = v52[13];
        v79 = (char *)v50 + v78;
        v80 = (char *)v55 + v78;
        v81 = v80[8];
        *(_QWORD *)v79 = *(_QWORD *)v80;
        v79[8] = v81;
        v82 = v52[14];
        v83 = (char *)v50 + v82;
        v84 = (char *)v55 + v82;
        v85 = *(_QWORD *)v84;
        v83[8] = v84[8];
        *(_QWORD *)v83 = v85;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v190 + 56))(v50, 0, 1, v52);
LABEL_28:
        v8 = v194;
LABEL_29:
        v140 = v12[10];
        v141 = v10 + v140;
        v142 = &v11[v140];
        v143 = type metadata accessor for Proto_Gpsd_Request(0);
        v144 = *(_QWORD *)(v143 - 8);
        v145 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
        v146 = v145(v141, 1, v143);
        v147 = v145((uint64_t)v142, 1, v143);
        if (v146)
        {
          v6 = v192;
          if (!v147)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v195 + 16))(v141, v142, v192);
            v148 = *(int *)(v143 + 20);
            v149 = *(_QWORD *)&v142[v148];
            *(_QWORD *)(v141 + v148) = v149;
            v150 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v144 + 56);
            swift_retain(v149);
            v150(v141, 0, 1, v143);
            goto LABEL_17;
          }
        }
        else
        {
          v6 = v192;
          if (!v147)
          {
            v8(v141, (uint64_t)v142, v192);
            v181 = *(int *)(v143 + 20);
            v182 = *(_QWORD *)&v142[v181];
            v183 = *(_QWORD *)(v141 + v181);
            *(_QWORD *)(v141 + v181) = v182;
            swift_retain(v182);
            swift_release(v183);
            goto LABEL_17;
          }
          sub_100004030(v141, type metadata accessor for Proto_Gpsd_Request);
        }
        v36 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_100369E40) - 8) + 64);
        v37 = (void *)v141;
        v38 = v142;
LABEL_8:
        memcpy(v37, v38, v36);
        goto LABEL_17;
      }
    }
    else
    {
      if (!v56)
      {
        v151 = *(_QWORD *)v51;
        v152 = *v50;
        *v50 = *(_QWORD *)v51;
        swift_bridgeObjectRetain(v151);
        swift_bridgeObjectRelease(v152);
        v153 = *((_QWORD *)v51 + 1);
        v154 = v50[1];
        v50[1] = v153;
        swift_bridgeObjectRetain(v153);
        swift_bridgeObjectRelease(v154);
        v155 = *((_QWORD *)v51 + 2);
        v156 = v50[2];
        v50[2] = v155;
        swift_bridgeObjectRetain(v155);
        swift_bridgeObjectRelease(v156);
        v8 = v194;
        v194((uint64_t)v50 + v52[7], (uint64_t)&v51[v52[7]], v192);
        *((_BYTE *)v50 + v52[8]) = v51[v52[8]];
        v157 = v52[9];
        v158 = (char *)v50 + v157;
        v159 = &v51[v157];
        v160 = v159[4];
        *(_DWORD *)v158 = *(_DWORD *)v159;
        v158[4] = v160;
        v161 = v52[10];
        v162 = (char *)v50 + v161;
        v163 = &v51[v161];
        v164 = v163[4];
        *(_DWORD *)v162 = *(_DWORD *)v163;
        v162[4] = v164;
        v165 = v52[11];
        v166 = (char *)v50 + v165;
        v167 = &v51[v165];
        v168 = v167[4];
        *(_DWORD *)v166 = *(_DWORD *)v167;
        v166[4] = v168;
        v169 = v52[12];
        v170 = (char *)v50 + v169;
        v171 = &v51[v169];
        v172 = v171[4];
        *(_DWORD *)v170 = *(_DWORD *)v171;
        v170[4] = v172;
        v173 = v52[13];
        v174 = (char *)v50 + v173;
        v175 = &v51[v173];
        v176 = v175[8];
        *(_QWORD *)v174 = *(_QWORD *)v175;
        v174[8] = v176;
        v177 = v52[14];
        v178 = (char *)v50 + v177;
        v179 = &v51[v177];
        v180 = *(_QWORD *)v179;
        v178[8] = v179[8];
        *(_QWORD *)v178 = v180;
        goto LABEL_29;
      }
      sub_100004030((uint64_t)v50, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
    }
    v139 = sub_1000039AC(&qword_100369E38);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
    goto LABEL_28;
  }
  if (v16)
  {
LABEL_7:
    v36 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_100369E70) - 8) + 64);
    v37 = (void *)v10;
    v38 = v11;
    goto LABEL_8;
  }
  v191 = a1;
  v193 = v8;
  v17 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  v17(v10, v11, v6);
  v18 = v12[5];
  v19 = v10 + v18;
  v20 = &v11[v18];
  v21 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = v20[8];
  *(_QWORD *)v19 = v21;
  v22 = v12[6];
  v23 = v10 + v22;
  v24 = &v11[v22];
  LOBYTE(v21) = v24[4];
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = v21;
  v25 = v12[7];
  v26 = v10 + v25;
  v27 = &v11[v25];
  LOBYTE(v21) = v27[4];
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = v21;
  *(_BYTE *)(v10 + v12[8]) = v11[v12[8]];
  v28 = v12[9];
  v29 = (uint64_t *)(v10 + v28);
  v30 = (uint64_t *)&v11[v28];
  v31 = v6;
  v32 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v33 = *((_QWORD *)v32 - 1);
  v189 = (void (*)(char *, char *, uint64_t))v17;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v33 + 48))(v30, 1, v32))
  {
    v34 = v31;
    v35 = sub_1000039AC(&qword_100369E38);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v86 = *v30;
    *v29 = *v30;
    v188 = v33;
    v87 = v30[1];
    v29[1] = v87;
    v88 = v30[2];
    v29[2] = v88;
    v89 = v32[7];
    v184 = (char *)v30 + v89;
    v186 = (char *)v29 + v89;
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v88);
    v34 = v31;
    v189(v186, v184, v31);
    *((_BYTE *)v29 + v32[8]) = *((_BYTE *)v30 + v32[8]);
    v90 = v32[9];
    v91 = (char *)v29 + v90;
    v92 = (char *)v30 + v90;
    v93 = v92[4];
    *(_DWORD *)v91 = *(_DWORD *)v92;
    v91[4] = v93;
    v94 = v32[10];
    v95 = (char *)v29 + v94;
    v96 = (char *)v30 + v94;
    v97 = v96[4];
    *(_DWORD *)v95 = *(_DWORD *)v96;
    v95[4] = v97;
    v98 = v32[11];
    v99 = (char *)v29 + v98;
    v100 = (char *)v30 + v98;
    v101 = v100[4];
    *(_DWORD *)v99 = *(_DWORD *)v100;
    v99[4] = v101;
    v102 = v32[12];
    v103 = (char *)v29 + v102;
    v104 = (char *)v30 + v102;
    v105 = v104[4];
    *(_DWORD *)v103 = *(_DWORD *)v104;
    v103[4] = v105;
    v106 = v32[13];
    v107 = (char *)v29 + v106;
    v108 = (char *)v30 + v106;
    v109 = v108[8];
    *(_QWORD *)v107 = *(_QWORD *)v108;
    v107[8] = v109;
    v110 = v32[14];
    v111 = (char *)v29 + v110;
    v112 = (char *)v30 + v110;
    v113 = *(_QWORD *)v112;
    v111[8] = v112[8];
    *(_QWORD *)v111 = v113;
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v188 + 56))(v29, 0, 1, v32);
  }
  v114 = v12[10];
  v115 = (char *)(v10 + v114);
  v116 = &v11[v114];
  v117 = type metadata accessor for Proto_Gpsd_Request(0);
  v118 = *(_QWORD *)(v117 - 8);
  a1 = v191;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
  {
    v119 = sub_1000039AC(&qword_100369E40);
    memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    v6 = v34;
  }
  else
  {
    v6 = v34;
    v189(v115, v116, v34);
    v120 = *(int *)(v117 + 20);
    v121 = *(_QWORD *)&v116[v120];
    *(_QWORD *)&v115[v120] = v121;
    v122 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56);
    swift_retain(v121);
    v122(v115, 0, 1, v117);
  }
  v8 = v193;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
LABEL_17:
  v123 = *(int *)(v196 + 24);
  v124 = (char *)(a1 + v123);
  v125 = (char *)(v197 + v123);
  v126 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v127 = *(_QWORD *)(v126 - 8);
  v128 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 48);
  v129 = v128(v124, 1, v126);
  v130 = v128(v125, 1, v126);
  if (!v129)
  {
    if (!v130)
    {
      v8((uint64_t)v124, (uint64_t)v125, v6);
      v136 = *(int *)(v126 + 20);
      v137 = *(_QWORD *)&v125[v136];
      v138 = *(_QWORD *)&v124[v136];
      *(_QWORD *)&v124[v136] = v137;
      swift_retain(v137);
      swift_release(v138);
      return a1;
    }
    sub_100004030((uint64_t)v124, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    goto LABEL_22;
  }
  if (v130)
  {
LABEL_22:
    v134 = sub_1000039AC(&qword_100369E78);
    memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v195 + 16))(v124, v125, v6);
  v131 = *(int *)(v126 + 20);
  v132 = *(_QWORD *)&v125[v131];
  *(_QWORD *)&v124[v131] = v132;
  v133 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56);
  swift_retain(v132);
  v133(v124, 0, 1, v126);
  return a1;
}

uint64_t sub_10001457C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_100369E70);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v61 = v12;
    v62 = a3;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v9[v11[8]] = v10[v11[8]];
    v23 = v11[9];
    v24 = v7;
    v25 = &v9[v23];
    v26 = &v10[v23];
    v27 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    v60 = *((_QWORD *)v27 - 1);
    v63 = (void (*)(char *, char *, uint64_t))v24;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v60 + 48))(v26, 1, v27))
    {
      v28 = sub_1000039AC(&qword_100369E38);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
      v24((uint64_t)&v25[v27[7]], (uint64_t)&v26[v27[7]], v6);
      v25[v27[8]] = v26[v27[8]];
      v29 = v27[9];
      v30 = &v25[v29];
      v31 = &v26[v29];
      v30[4] = v31[4];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      v32 = v27[10];
      v33 = &v25[v32];
      v34 = &v26[v32];
      v33[4] = v34[4];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v35 = v27[11];
      v36 = &v25[v35];
      v37 = &v26[v35];
      v36[4] = v37[4];
      *(_DWORD *)v36 = *(_DWORD *)v37;
      v38 = v27[12];
      v39 = &v25[v38];
      v40 = &v26[v38];
      v39[4] = v40[4];
      *(_DWORD *)v39 = *(_DWORD *)v40;
      v41 = v27[13];
      v42 = &v25[v41];
      v43 = &v26[v41];
      v42[8] = v43[8];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v44 = v27[14];
      v45 = &v25[v44];
      v46 = &v26[v44];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v60 + 56))(v25, 0, 1, v27);
    }
    v47 = v11[10];
    v48 = &v9[v47];
    v49 = &v10[v47];
    v50 = type metadata accessor for Proto_Gpsd_Request(0);
    v51 = *(_QWORD *)(v50 - 8);
    a3 = v62;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      v52 = sub_1000039AC(&qword_100369E40);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      v63(v48, v49, v6);
      *(_QWORD *)&v48[*(int *)(v50 + 20)] = *(_QWORD *)&v49[*(int *)(v50 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v61 + 56))(v9, 0, 1, v11);
    v7 = (void (*)(uint64_t, uint64_t, uint64_t))v63;
  }
  v53 = *(int *)(a3 + 24);
  v54 = (char *)(a1 + v53);
  v55 = (char *)(a2 + v53);
  v56 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    v58 = sub_1000039AC(&qword_100369E78);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v54, (uint64_t)v55, v6);
    *(_QWORD *)&v54[*(int *)(v56 + 20)] = *(_QWORD *)&v55[*(int *)(v56 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  return a1;
}

uint64_t sub_100014954(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  int v15;
  void (*v16)(uint64_t, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int *v47;
  uint64_t (*v48)(char *, uint64_t, int *);
  int v49;
  int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t, uint64_t);
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  char *__src;
  void (*v141)(uint64_t, char *, uint64_t);
  void (*v142)(uint64_t, char *, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v6 = type metadata accessor for UnknownStorage(0);
  v145 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, char *, uint64_t))(v145 + 40);
  v7(a1, a2, v6);
  v146 = a3;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = &a2[v8];
  v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13((uint64_t)v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_100004030(v9, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      goto LABEL_7;
    }
    v142 = v7;
    v144 = v6;
    v7(v9, v10, v6);
    v35 = v11[5];
    v36 = v9 + v35;
    v37 = &v10[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *(_BYTE *)(v36 + 8) = v37[8];
    v38 = v11[6];
    v39 = v9 + v38;
    v40 = &v10[v38];
    *(_DWORD *)v39 = *(_DWORD *)v40;
    *(_BYTE *)(v39 + 4) = v40[4];
    v41 = v11[7];
    v42 = v9 + v41;
    v43 = &v10[v41];
    *(_DWORD *)v42 = *(_DWORD *)v43;
    *(_BYTE *)(v42 + 4) = v43[4];
    *(_BYTE *)(v9 + v11[8]) = v10[v11[8]];
    v44 = v11[9];
    v45 = (char *)(v9 + v44);
    v46 = &v10[v44];
    v47 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    v139 = *((_QWORD *)v47 - 1);
    v48 = *(uint64_t (**)(char *, uint64_t, int *))(v139 + 48);
    v49 = v48(v45, 1, v47);
    v50 = v48(v46, 1, v47);
    if (v49)
    {
      if (!v50)
      {
        *(_OWORD *)v45 = *(_OWORD *)v46;
        *((_QWORD *)v45 + 2) = *((_QWORD *)v46 + 2);
        (*(void (**)(char *, char *, uint64_t))(v145 + 32))(&v45[v47[7]], &v46[v47[7]], v144);
        v45[v47[8]] = v46[v47[8]];
        v51 = v47[9];
        v52 = &v45[v51];
        v53 = &v46[v51];
        v52[4] = v53[4];
        *(_DWORD *)v52 = *(_DWORD *)v53;
        v54 = v47[10];
        v55 = &v45[v54];
        v56 = &v46[v54];
        v55[4] = v56[4];
        *(_DWORD *)v55 = *(_DWORD *)v56;
        v57 = v47[11];
        v58 = &v45[v57];
        v59 = &v46[v57];
        v58[4] = v59[4];
        *(_DWORD *)v58 = *(_DWORD *)v59;
        v60 = v47[12];
        v61 = &v45[v60];
        v62 = &v46[v60];
        v61[4] = v62[4];
        *(_DWORD *)v61 = *(_DWORD *)v62;
        v63 = v47[13];
        v64 = &v45[v63];
        v65 = &v46[v63];
        v64[8] = v65[8];
        *(_QWORD *)v64 = *(_QWORD *)v65;
        v66 = v47[14];
        v67 = &v45[v66];
        v68 = &v46[v66];
        *(_QWORD *)v67 = *(_QWORD *)v68;
        v67[8] = v68[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v139 + 56))(v45, 0, 1, v47);
LABEL_28:
        v7 = v142;
LABEL_29:
        v106 = v11[10];
        v107 = v9 + v106;
        v108 = &v10[v106];
        v109 = type metadata accessor for Proto_Gpsd_Request(0);
        v110 = *(_QWORD *)(v109 - 8);
        v111 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
        v112 = v111(v107, 1, v109);
        v113 = v111((uint64_t)v108, 1, v109);
        if (v112)
        {
          v6 = v144;
          if (!v113)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v145 + 32))(v107, v108, v144);
            *(_QWORD *)(v107 + *(int *)(v109 + 20)) = *(_QWORD *)&v108[*(int *)(v109 + 20)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
            goto LABEL_17;
          }
        }
        else
        {
          v6 = v144;
          if (!v113)
          {
            v7(v107, v108, v144);
            v135 = *(int *)(v109 + 20);
            v136 = *(_QWORD *)(v107 + v135);
            *(_QWORD *)(v107 + v135) = *(_QWORD *)&v108[v135];
            swift_release(v136);
            goto LABEL_17;
          }
          sub_100004030(v107, type metadata accessor for Proto_Gpsd_Request);
        }
        v32 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_100369E40) - 8) + 64);
        v33 = (void *)v107;
        v34 = v108;
LABEL_8:
        memcpy(v33, v34, v32);
        goto LABEL_17;
      }
    }
    else
    {
      if (!v50)
      {
        v114 = *(_QWORD *)v45;
        *(_QWORD *)v45 = *(_QWORD *)v46;
        swift_bridgeObjectRelease(v114);
        v115 = *((_QWORD *)v45 + 1);
        *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
        swift_bridgeObjectRelease(v115);
        v116 = *((_QWORD *)v45 + 2);
        *((_QWORD *)v45 + 2) = *((_QWORD *)v46 + 2);
        swift_bridgeObjectRelease(v116);
        v7 = v142;
        v142((uint64_t)&v45[v47[7]], &v46[v47[7]], v144);
        v45[v47[8]] = v46[v47[8]];
        v117 = v47[9];
        v118 = &v45[v117];
        v119 = &v46[v117];
        v118[4] = v119[4];
        *(_DWORD *)v118 = *(_DWORD *)v119;
        v120 = v47[10];
        v121 = &v45[v120];
        v122 = &v46[v120];
        v121[4] = v122[4];
        *(_DWORD *)v121 = *(_DWORD *)v122;
        v123 = v47[11];
        v124 = &v45[v123];
        v125 = &v46[v123];
        v124[4] = v125[4];
        *(_DWORD *)v124 = *(_DWORD *)v125;
        v126 = v47[12];
        v127 = &v45[v126];
        v128 = &v46[v126];
        v127[4] = v128[4];
        *(_DWORD *)v127 = *(_DWORD *)v128;
        v129 = v47[13];
        v130 = &v45[v129];
        v131 = &v46[v129];
        v130[8] = v131[8];
        *(_QWORD *)v130 = *(_QWORD *)v131;
        v132 = v47[14];
        v133 = &v45[v132];
        v134 = &v46[v132];
        *(_QWORD *)v133 = *(_QWORD *)v134;
        v133[8] = v134[8];
        goto LABEL_29;
      }
      sub_100004030((uint64_t)v45, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
    }
    v105 = sub_1000039AC(&qword_100369E38);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    goto LABEL_28;
  }
  if (v15)
  {
LABEL_7:
    v32 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_100369E70) - 8) + 64);
    v33 = (void *)v9;
    v34 = v10;
    goto LABEL_8;
  }
  __src = a2;
  v141 = v7;
  v16 = *(void (**)(uint64_t, char *, uint64_t))(v145 + 32);
  v16(v9, v10, v6);
  v17 = v11[5];
  v18 = v9 + v17;
  v19 = &v10[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v19[8];
  v20 = v11[6];
  v21 = v9 + v20;
  v22 = &v10[v20];
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = v22[4];
  v23 = v11[7];
  v24 = v9 + v23;
  v25 = &v10[v23];
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v25[4];
  *(_BYTE *)(v9 + v11[8]) = v10[v11[8]];
  v26 = v11[9];
  v27 = (_QWORD *)(v9 + v26);
  v28 = &v10[v26];
  v29 = v6;
  v30 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v137 = *((_QWORD *)v30 - 1);
  v143 = v29;
  v138 = (void (*)(char *, char *, uint64_t))v16;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v137 + 48))(v28, 1, v30))
  {
    v31 = sub_1000039AC(&qword_100369E38);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)v28;
    v27[2] = *((_QWORD *)v28 + 2);
    v16((uint64_t)v27 + v30[7], &v28[v30[7]], v29);
    *((_BYTE *)v27 + v30[8]) = v28[v30[8]];
    v69 = v30[9];
    v70 = (char *)v27 + v69;
    v71 = &v28[v69];
    v70[4] = v71[4];
    *(_DWORD *)v70 = *(_DWORD *)v71;
    v72 = v30[10];
    v73 = (char *)v27 + v72;
    v74 = &v28[v72];
    v73[4] = v74[4];
    *(_DWORD *)v73 = *(_DWORD *)v74;
    v75 = v30[11];
    v76 = (char *)v27 + v75;
    v77 = &v28[v75];
    v76[4] = v77[4];
    *(_DWORD *)v76 = *(_DWORD *)v77;
    v78 = v30[12];
    v79 = (char *)v27 + v78;
    v80 = &v28[v78];
    v79[4] = v80[4];
    *(_DWORD *)v79 = *(_DWORD *)v80;
    v81 = v30[13];
    v82 = (char *)v27 + v81;
    v83 = &v28[v81];
    v82[8] = v83[8];
    *(_QWORD *)v82 = *(_QWORD *)v83;
    v84 = v30[14];
    v85 = (char *)v27 + v84;
    v86 = &v28[v84];
    *(_QWORD *)v85 = *(_QWORD *)v86;
    v85[8] = v86[8];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v137 + 56))(v27, 0, 1, v30);
  }
  v87 = v11[10];
  v88 = (char *)(v9 + v87);
  v89 = &v10[v87];
  v90 = type metadata accessor for Proto_Gpsd_Request(0);
  v91 = *(_QWORD *)(v90 - 8);
  a2 = __src;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
  {
    v92 = sub_1000039AC(&qword_100369E40);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    v6 = v143;
  }
  else
  {
    v6 = v143;
    v138(v88, v89, v143);
    *(_QWORD *)&v88[*(int *)(v90 + 20)] = *(_QWORD *)&v89[*(int *)(v90 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
  }
  v7 = v141;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
LABEL_17:
  v93 = *(int *)(v146 + 24);
  v94 = (char *)(a1 + v93);
  v95 = &a2[v93];
  v96 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  if (!v99)
  {
    if (!v100)
    {
      v7((uint64_t)v94, v95, v6);
      v103 = *(int *)(v96 + 20);
      v104 = *(_QWORD *)&v94[v103];
      *(_QWORD *)&v94[v103] = *(_QWORD *)&v95[v103];
      swift_release(v104);
      return a1;
    }
    sub_100004030((uint64_t)v94, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    goto LABEL_22;
  }
  if (v100)
  {
LABEL_22:
    v101 = sub_1000039AC(&qword_100369E78);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v145 + 32))(v94, v95, v6);
  *(_QWORD *)&v94[*(int *)(v96 + 20)] = *(_QWORD *)&v95[*(int *)(v96 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
  return a1;
}

uint64_t sub_1000151BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000151C8);
}

uint64_t sub_1000151C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_1000039AC(&qword_100369E70);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_1000039AC(&qword_100369E78);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100015268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100015274);
}

uint64_t sub_100015274(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_1000039AC(&qword_100369E70);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_1000039AC(&qword_100369E78);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10001531C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_10036A390, type metadata accessor for CLP_LogEntry_AONLoc_Request);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, (unint64_t *)&unk_10036A398, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1000153DC()
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
}

void sub_1000153E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[9];

  v13[0] = "\t";
  v13[1] = &unk_1002C3E98;
  v13[2] = &unk_1002C4008;
  sub_10001198C(319, &qword_10036A3F8, type metadata accessor for Proto_Gpsd_Response);
  if (v3 <= 0x3F)
  {
    v13[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_10036A400, type metadata accessor for Proto_Gpsd_Indication);
    if (v5 <= 0x3F)
    {
      v13[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, &qword_10036A408, type metadata accessor for CLP_LogEntry_AONLoc_Response);
      if (v7 <= 0x3F)
      {
        v8 = *(_QWORD *)(v6 - 8) + 64;
        v13[5] = v8;
        sub_10001198C(319, &qword_10036A410, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
        if (v10 <= 0x3F)
        {
          v13[6] = *(_QWORD *)(v9 - 8) + 64;
          v13[7] = v8;
          sub_10001198C(319, (unint64_t *)&unk_10036A418, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
          if (v12 <= 0x3F)
          {
            v13[8] = *(_QWORD *)(v11 - 8) + 64;
            swift_updateClassMetadata2(a1, 256, 9, v13, a1 + 80);
          }
        }
      }
    }
  }
}

unint64_t sub_10001552C()
{
  unint64_t result;

  result = qword_10036A5F0;
  if (!qword_10036A5F0)
  {
    result = swift_getWitnessTable(&unk_1002C3374, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_10036A5F0);
  }
  return result;
}

unint64_t sub_100015570()
{
  unint64_t result;

  result = qword_10036A5F8;
  if (!qword_10036A5F8)
  {
    result = swift_getWitnessTable(&unk_1002C3254, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_10036A5F8);
  }
  return result;
}

uint64_t *sub_1000155B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

unint64_t sub_1000155F4()
{
  unint64_t result;

  result = qword_10036A680;
  if (!qword_10036A680)
  {
    result = swift_getWitnessTable(&unk_1002E6EE0, &type metadata for Proto_Gnss_Result);
    atomic_store(result, (unint64_t *)&qword_10036A680);
  }
  return result;
}

unint64_t sub_100015638()
{
  unint64_t result;

  result = qword_10036A688;
  if (!qword_10036A688)
  {
    result = swift_getWitnessTable(&unk_1002E6F48, &type metadata for Proto_Gnss_Result);
    atomic_store(result, (unint64_t *)&qword_10036A688);
  }
  return result;
}

unint64_t sub_10001567C()
{
  unint64_t result;

  result = qword_10036A690;
  if (!qword_10036A690)
  {
    result = swift_getWitnessTable(&unk_1002CC1B0, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand);
    atomic_store(result, (unint64_t *)&qword_10036A690);
  }
  return result;
}

unint64_t sub_1000156C0()
{
  unint64_t result;

  result = qword_10036A698;
  if (!qword_10036A698)
  {
    result = swift_getWitnessTable(&unk_1002E9440, &type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
    atomic_store(result, (unint64_t *)&qword_10036A698);
  }
  return result;
}

uint64_t sub_100015704(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1000039AC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100015754@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    if (a1 == 1)
      v3 = (unsigned int *)&enum case for ALBtAdvertisement.BtType.type7(_:);
    else
      v3 = (unsigned int *)&enum case for ALBtAdvertisement.BtType.type18(_:);
  }
  else
  {
    v3 = (unsigned int *)&enum case for ALBtAdvertisement.BtType.unknown(_:);
  }
  v4 = *v3;
  v5 = type metadata accessor for ALBtAdvertisement.BtType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
}

uint64_t sub_1000157C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = type metadata accessor for ALBtAdvertisement.BtType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 != enum case for ALBtAdvertisement.BtType.unknown(_:))
  {
    if (v4 == enum case for ALBtAdvertisement.BtType.type7(_:))
      return 1;
    if (v4 == enum case for ALBtAdvertisement.BtType.type18(_:))
      return 2;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  return 0;
}

uint64_t sub_100015864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v0 = type metadata accessor for CLP_LogEntry_AONLoc_Type7Info(0);
  __chkstk_darwin(v0);
  v45 = (uint64_t)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1000039AC((uint64_t *)&unk_1003821C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ALBtAdvInfoType7(0);
  v46 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v44 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036A6C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ALBtAdvertisement.BtType(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v43 - v16;
  v18 = ALBtAdvertisement._machContTimeNs.getter(v15);
  if ((v19 & 1) == 0)
    v18 = sub_100222158(v18);
  v20 = ALBtAdvertisement._mac.getter(v18);
  if ((v21 & 1) == 0)
    v20 = sub_1002224AC(v20);
  v22 = ALBtAdvertisement._rssidB.getter(v20);
  if ((v22 & 0x100000000) == 0)
    v22 = sub_1002227EC(v22);
  v23 = ALBtAdvertisement._antennaIndex.getter(v22);
  if ((v23 & 0x100000000) == 0)
    v23 = sub_100222E6C(v23);
  v24 = ALBtAdvertisement._payload.getter(v23);
  if (v25 >> 60 != 15)
    v24 = sub_1002231C0(v24, v25);
  v26 = ALBtAdvertisement._channel.getter(v24);
  if ((v26 & 0x100000000) == 0)
    v26 = sub_100222B2C(v26);
  v27 = ALBtAdvertisement._productID.getter(v26);
  if ((v27 & 0x100000000) == 0)
    v27 = sub_100223F58(v27);
  v28 = ALBtAdvertisement._identifier.getter(v27);
  if (v29)
    v28 = sub_1002242B4(v28, v29);
  v30 = ALBtAdvertisement._idsDeviceID.getter(v28);
  if (v31)
    v30 = sub_1002246B4(v30, v31);
  v32 = ALBtAdvertisement._deviceFlags.getter(v30);
  if ((v33 & 1) == 0)
    v32 = sub_1002238D8(v32);
  v34 = ALBtAdvertisement._discoveryFlags.getter(v32);
  if ((v35 & 1) == 0)
    v34 = sub_100223C18(v34);
  ALBtAdvertisement._type.getter(v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    v36 = sub_100015704((uint64_t)v9, &qword_10036A6C0);
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v37 == enum case for ALBtAdvertisement.BtType.unknown(_:))
    goto LABEL_31;
  if (v37 != enum case for ALBtAdvertisement.BtType.type7(_:))
  {
    if (v37 == enum case for ALBtAdvertisement.BtType.type18(_:))
    {
      v38 = 2;
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
LABEL_31:
    v38 = 0;
    goto LABEL_32;
  }
  v38 = 1;
LABEL_32:
  sub_1002235A4(v38);
  v36 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
LABEL_33:
  ALBtAdvertisement._type7Info.getter(v36);
  v39 = v46;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v4, 1, v5) == 1)
    return sub_100015704((uint64_t)v4, (uint64_t *)&unk_1003821C0);
  v41 = v44;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v44, v4, v5);
  v42 = v45;
  sub_100015C38(v45);
  sub_100224BE0(v42);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v41, v5);
}

uint64_t sub_100015C38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t isSame;
  uint64_t v14;
  uint64_t isShared;
  uint64_t isLeft;
  uint64_t v17;
  int v19;
  char v20;
  uint64_t v21;

  v2 = sub_1000039AC(&qword_10036A6C8);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ALBtAdvInfoType7.Placement(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v21 - v10;
  v12 = sub_100224B80(a1);
  isSame = ALBtAdvInfoType7._isSameAccount.getter(v12);
  if (isSame != 2)
    isSame = sub_100225CDC(isSame & 1);
  v14 = ALBtAdvInfoType7._isFamily.getter(isSame);
  if (v14 != 2)
    v14 = sub_100225DC0(v14 & 1);
  isShared = ALBtAdvInfoType7._isSharedHome.getter(v14);
  if (isShared != 2)
    isShared = sub_100225E8C(isShared & 1);
  isLeft = ALBtAdvInfoType7._isLeftBud.getter(isShared);
  if (isLeft != 2)
    isLeft = sub_100225F38(isLeft & 1);
  v17 = ALBtAdvInfoType7._isCase.getter(isLeft);
  if (v17 != 2)
    v17 = sub_100225FE4(v17 & 1);
  ALBtAdvInfoType7._placement.getter(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return sub_100015704((uint64_t)v4, &qword_10036A6C8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
  if (v19 != enum case for ALBtAdvInfoType7.Placement.unknown(_:))
  {
    if (v19 == enum case for ALBtAdvInfoType7.Placement.inEar(_:))
    {
      v20 = 1;
      goto LABEL_29;
    }
    if (v19 == enum case for ALBtAdvInfoType7.Placement.outOfEar(_:))
    {
      v20 = 2;
      goto LABEL_29;
    }
    if (v19 == enum case for ALBtAdvInfoType7.Placement.inCase(_:))
    {
      v20 = 3;
      goto LABEL_29;
    }
    if (v19 == enum case for ALBtAdvInfoType7.Placement.onEar(_:))
    {
      v20 = 4;
      goto LABEL_29;
    }
    if (v19 == enum case for ALBtAdvInfoType7.Placement.offEar(_:))
    {
      v20 = 5;
      goto LABEL_29;
    }
    if (v19 == enum case for ALBtAdvInfoType7.Placement.onNeck(_:))
    {
      v20 = 6;
      goto LABEL_29;
    }
    if (v19 == enum case for ALBtAdvInfoType7.Placement.disabled(_:))
    {
      v20 = 7;
      goto LABEL_29;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  v20 = 0;
LABEL_29:
  sub_1002260AC(v20);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t sub_100015F20@<X0>(uint64_t a1@<X8>)
{
  sub_10022526C(a1);
  return sub_100015864();
}

uint64_t sub_100015F44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _BYTE v30[16];

  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Type7Info(0);
  __chkstk_darwin(v2);
  v4 = &v30[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_1000039AC((uint64_t *)&unk_1003821C0);
  __chkstk_darwin(v5);
  v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for ALBtAdvertisement.BtType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v30[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_1000039AC(&qword_10036A6C0);
  v13 = __chkstk_darwin(v12);
  v15 = &v30[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ALBtAdvertisement.init()(v13);
  if (sub_100222368())
  {
    v16 = sub_1002220F0();
    ALBtAdvertisement._machContTimeNs.setter(v16, 0);
  }
  if (sub_1002226A8())
  {
    v17 = sub_100222458();
    ALBtAdvertisement._mac.setter(v17);
  }
  if (sub_1002229E8())
  {
    v18 = sub_100222798();
    v30[0] = 0;
    ALBtAdvertisement._rssidB.setter(v18);
  }
  if (sub_100223068())
  {
    v19 = sub_100222E18();
    v30[4] = 0;
    ALBtAdvertisement._antennaIndex.setter(v19);
  }
  if (sub_100223458())
  {
    v20 = sub_100223158();
    ALBtAdvertisement._payload.setter(v20);
  }
  if (sub_100222D28())
  {
    v21 = sub_100222AD8();
    v30[8] = 0;
    ALBtAdvertisement._channel.setter(v21);
  }
  if (sub_100224154())
  {
    v22 = sub_100223F04();
    v30[12] = 0;
    ALBtAdvertisement._productID.setter(v22);
  }
  if (sub_100224554())
  {
    v23 = sub_100224244();
    ALBtAdvertisement._identifier.setter(v23);
  }
  if (sub_100224954())
  {
    v24 = sub_100224644();
    ALBtAdvertisement._idsDeviceID.setter(v24);
  }
  if (sub_100223AD4())
  {
    v25 = sub_100223884();
    ALBtAdvertisement._deviceFlags.setter(v25, 0);
  }
  if (sub_100223E14())
  {
    v26 = sub_100223BC4();
    ALBtAdvertisement._discoveryFlags.setter(v26, 0);
  }
  if (sub_100223798())
  {
    v27 = sub_100223554();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v11, *(unsigned int *)*(&off_100352088 + v27), v8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v15, v11, v8);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v8);
    ALBtAdvertisement._type.setter(v15);
  }
  if (sub_100224F48())
  {
    sub_100224A44((uint64_t)v4);
    sub_1000162C8((uint64_t)v4);
    v28 = type metadata accessor for ALBtAdvInfoType7(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v7, 0, 1, v28);
    ALBtAdvertisement._type7Info.setter(v7);
  }
  return sub_100004030(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
}

uint64_t sub_1000162C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v17;

  v2 = type metadata accessor for ALBtAdvInfoType7.Placement(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036A6C8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtAdvInfoType7.init()(v7);
  if (sub_100225D50())
  {
    v10 = sub_100225CB8();
    ALBtAdvInfoType7._isSameAccount.setter(v10 & 1);
  }
  if (sub_100225E34())
  {
    v11 = sub_100225D9C();
    ALBtAdvInfoType7._isFamily.setter(v11 & 1);
  }
  if (sub_100225EE0())
  {
    v12 = sub_100225E80();
    ALBtAdvInfoType7._isSharedHome.setter(v12 & 1);
  }
  if (sub_100225F8C())
  {
    v13 = sub_100225F2C();
    ALBtAdvInfoType7._isLeftBud.setter(v13 & 1);
  }
  if (sub_100226038())
  {
    v14 = sub_100225FD8();
    ALBtAdvInfoType7._isCase.setter(v14 & 1);
  }
  if (sub_100226124())
  {
    v15 = sub_100226084();
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *(unsigned int *)*(&off_1003520A0 + v15), v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v9, v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v9, 0, 1, v2);
    ALBtAdvInfoType7._placement.setter(v9);
  }
  return sub_100004030(a1, type metadata accessor for CLP_LogEntry_AONLoc_Type7Info);
}

uint64_t sub_10001649C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100017714(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement, &qword_10036A6D0, (uint64_t)&unk_1002E9680, (void (*)(char *))sub_100015F44, a3);
}

uint64_t sub_1000164D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD);
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _BYTE v48[32];

  v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  v44 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v45 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ALBtAdvertisement(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v46 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - v10;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v15);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ALBtNotification(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotification.init()(v20);
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  v47 = a2;
  v23(a2, v22, v18);
  if (sub_100225824())
  {
    sub_1002254BC((uint64_t)v14);
    sub_100086964((uint64_t)v14);
    v24 = type metadata accessor for ALTimeStamp(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v17, 0, 1, v24);
    ALBtNotification._timestamp.setter(v17);
  }
  v43 = a1;
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v26)
  {
    v27 = v25 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
    v44 = *(_QWORD *)(v44 + 72);
    v42 = v25;
    swift_bridgeObjectRetain(v25);
    v28 = v46;
    do
    {
      v29 = v45;
      sub_100003FEC(v27, v45, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      sub_100015F44(v29);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v28, v11, v6);
      v30 = (void (*)(_BYTE *, _QWORD))ALBtNotification._advertisements.modify(v48);
      v32 = v31;
      v33 = *v31;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
      *v32 = v33;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v33 = sub_100017F80(0, *(_QWORD *)(v33 + 16) + 1, 1, v33, (uint64_t *)&unk_100382330, (uint64_t (*)(_QWORD))&type metadata accessor for ALBtAdvertisement);
        *v32 = v33;
      }
      v36 = *(_QWORD *)(v33 + 16);
      v35 = *(_QWORD *)(v33 + 24);
      if (v36 >= v35 >> 1)
      {
        v33 = sub_100017F80(v35 > 1, v36 + 1, 1, v33, (uint64_t *)&unk_100382330, (uint64_t (*)(_QWORD))&type metadata accessor for ALBtAdvertisement);
        *v32 = v33;
      }
      *(_QWORD *)(v33 + 16) = v36 + 1;
      v28 = v46;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v33+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v36, v46, v6);
      v30(v48, 0);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      v27 += v44;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease(v42);
  }
  v37 = v43;
  if (sub_100225990())
  {
    v38 = sub_100225930();
    ALBtNotification._simulated.setter(v38 & 1);
  }
  if (sub_100225A3C())
  {
    v39 = sub_1002259DC();
    ALBtNotification._isApOn.setter(v39 & 1);
  }
  if (sub_100225AE8())
  {
    v40 = sub_100225A88();
    ALBtNotification._isScreenOn.setter(v40 & 1);
  }
  return sub_100004030(v37, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
}

uint64_t sub_1000168B0@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t isAp;
  char isScreen;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  v41 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ALBtAdvertisement(0);
  v42 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v9);
  v40 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ALTimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100225BEC(a1);
  ALBtNotification._timestamp.getter(v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    v19 = sub_100015704((uint64_t)v13, &qword_10036A6D8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v20 = v40;
    sub_100086A3C(v40);
    sub_100225594(v20);
    v19 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  v21 = ALBtNotification._advertisements.getter(v19);
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v38 = v21;
    v39 = v1;
    v23 = v21 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
    v40 = *(_QWORD *)(v42 + 72);
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v42 + 16);
    v25 = a1;
    do
    {
      v24(v8, v23, v6);
      sub_10022526C((uint64_t)v5);
      sub_100015864();
      v26 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
        v26 = sub_100017F80(0, *(_QWORD *)(v26 + 16) + 1, 1, v26, &qword_10036A6F8, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      v28 = *(_QWORD *)(v26 + 16);
      v27 = *(_QWORD *)(v26 + 24);
      if (v28 >= v27 >> 1)
        v26 = sub_100017F80(v27 > 1, v28 + 1, 1, v26, &qword_10036A6F8, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      *(_QWORD *)(v26 + 16) = v28 + 1;
      sub_100003E08((uint64_t)v5, v26+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(_QWORD *)(v41 + 72) * v28, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      a1 = v25;
      *v25 = v26;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v6);
      v23 += v40;
      --v22;
    }
    while (v22);
    v29 = swift_bridgeObjectRelease(v38);
  }
  else
  {
    v29 = swift_bridgeObjectRelease(v21);
  }
  v30 = ALBtNotification._simulated.getter(v29);
  if (v30 != 2)
    v30 = sub_10022593C(v30 & 1);
  isAp = ALBtNotification._isApOn.getter(v30);
  if (isAp != 2)
    isAp = sub_1002259E8(isAp & 1);
  isScreen = ALBtNotification._isScreenOn.getter(isAp);
  if (isScreen != 2)
    sub_100225A94(isScreen & 1);
  type metadata accessor for ALProtobufUtil();
  v33 = a1;
  v34 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  v35 = sub_10000FD38(&qword_100369EB8, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, (uint64_t)&unk_1002E9978);
  return static ALProtobufUtil.debug<A>(_:)(v33, v34, v35);
}

uint64_t sub_100016C8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _QWORD);
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  char v38;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _BYTE v47[39];
  char v48;

  v43 = a1;
  v3 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ALBtNotification(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for ALBtNotifications(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotifications.init()(v16);
  v19 = v14;
  v20 = v43;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v18, v19);
  if (sub_100005DC0()
    && (v46 = v10,
        v47[0] = sub_100005B7C(),
        v48 = 6,
        v21 = sub_10000FEBC(),
        (dispatch thunk of static Equatable.== infix(_:_:)(v47, &v48, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum, v21) & 1) != 0))
  {
    sub_100006CE4(v13);
    v22 = *v13;
    v23 = *(_QWORD *)(*v13 + 16);
    if (v23)
    {
      v41 = *v13;
      v42 = v13;
      v24 = v4;
      v25 = v22 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      v44 = *(_QWORD *)(v24 + 72);
      v45 = v7;
      swift_bridgeObjectRetain(v22);
      v26 = (uint64_t)v46;
      do
      {
        sub_100003FEC(v25, (uint64_t)v6, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        v27 = v6;
        sub_1000164D0((uint64_t)v6, v26);
        v28 = a2;
        v29 = (void (*)(_BYTE *, _QWORD))ALBtNotifications._results.modify(v47);
        v31 = v30;
        v32 = *v30;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v30);
        *v31 = v32;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v32 = sub_100017F80(0, *(_QWORD *)(v32 + 16) + 1, 1, v32, &qword_10036A6F0, (uint64_t (*)(_QWORD))&type metadata accessor for ALBtNotification);
          *v31 = v32;
        }
        v35 = *(_QWORD *)(v32 + 16);
        v34 = *(_QWORD *)(v32 + 24);
        if (v35 >= v34 >> 1)
        {
          v32 = sub_100017F80(v34 > 1, v35 + 1, 1, v32, &qword_10036A6F0, (uint64_t (*)(_QWORD))&type metadata accessor for ALBtNotification);
          *v31 = v32;
        }
        *(_QWORD *)(v32 + 16) = v35 + 1;
        v26 = (uint64_t)v46;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v32+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v35, v46, v45);
        v29(v47, 0);
        v25 += v44;
        --v23;
        a2 = v28;
        v6 = v27;
      }
      while (v23);
      swift_bridgeObjectRelease(v41);
      v13 = v42;
      v20 = v43;
    }
    v38 = sub_1000052A0();
    ALBtNotifications._isLastBatch.setter(v38 & 1);
    sub_100004030(v20, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    v36 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication;
    v37 = (uint64_t)v13;
  }
  else
  {
    v36 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    v37 = v20;
  }
  return sub_100004030(v37, v36);
}

uint64_t sub_100016FC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void (*v49)(char *, unint64_t, uint64_t);
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t isAp;
  char isScreen;
  uint64_t v58;
  unint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, unint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;

  v2 = v1;
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  v98 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ALBtAdvertisement(0);
  v99 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v10);
  v80 = (uint64_t)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v12);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ALTimeStamp(0);
  v90 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v79 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  v88 = *(_QWORD *)(v17 - 8);
  v89 = v17;
  __chkstk_darwin(v17);
  v100 = (unint64_t *)((char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for ALBtNotification(0);
  v91 = *(_QWORD *)(v19 - 8);
  v92 = v19;
  __chkstk_darwin(v19);
  v96 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (unint64_t *)((char *)&v74 - v25);
  sub_10000732C(a1);
  v78 = a1;
  sub_100005BCC(6);
  v27 = sub_10000548C(v26);
  v77 = v2;
  v28 = ALBtNotifications.results.getter(v27);
  v87 = *(_QWORD *)(v28 + 16);
  v95 = v26;
  if (v87)
  {
    v86 = v15;
    v76 = v24;
    v29 = v91;
    v30 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    v75 = v28;
    v85 = v28 + v30;
    v31 = type metadata accessor for ALProtobufUtil();
    v32 = 0;
    v83 = *(_QWORD *)(v29 + 72);
    v84 = v31;
    v33 = *(void (**)(char *, unint64_t, uint64_t))(v29 + 16);
    v81 = v14;
    v82 = v33;
    v97 = v7;
    v34 = v100;
    v35 = v92;
    v36 = v96;
    do
    {
      v94 = v32;
      v82(v36, v85 + v83 * v32, v35);
      v37 = sub_100225BEC(v34);
      ALBtNotification._timestamp.getter(v37);
      v38 = v90;
      v39 = v86;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v14, 1, v86) == 1)
      {
        v40 = sub_100015704((uint64_t)v14, &qword_10036A6D8);
      }
      else
      {
        v41 = v79;
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v79, v14, v39);
        v42 = v80;
        sub_100086A3C(v80);
        v43 = v42;
        v34 = v100;
        sub_100225594(v43);
        v40 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v41, v39);
      }
      v44 = ALBtNotification._advertisements.getter(v40);
      v45 = *(_QWORD *)(v44 + 16);
      if (v45)
      {
        v46 = (*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
        v93 = v44;
        v47 = v44 + v46;
        v48 = *(_QWORD *)(v99 + 72);
        v49 = *(void (**)(char *, unint64_t, uint64_t))(v99 + 16);
        do
        {
          v49(v9, v47, v7);
          sub_10022526C((uint64_t)v6);
          sub_100015864();
          v50 = *v34;
          if ((swift_isUniquelyReferenced_nonNull_native(*v34) & 1) == 0)
            v50 = sub_100017F80(0, *(_QWORD *)(v50 + 16) + 1, 1, v50, &qword_10036A6F8, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          v52 = *(_QWORD *)(v50 + 16);
          v51 = *(_QWORD *)(v50 + 24);
          if (v52 >= v51 >> 1)
            v50 = sub_100017F80(v51 > 1, v52 + 1, 1, v50, &qword_10036A6F8, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          *(_QWORD *)(v50 + 16) = v52 + 1;
          sub_100003E08((uint64_t)v6, v50+ ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80))+ *(_QWORD *)(v98 + 72) * v52, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          v34 = v100;
          *v100 = v50;
          v7 = v97;
          (*(void (**)(char *, uint64_t))(v99 + 8))(v9, v97);
          v47 += v48;
          --v45;
        }
        while (v45);
        v53 = swift_bridgeObjectRelease(v93);
        v14 = v81;
      }
      else
      {
        v53 = swift_bridgeObjectRelease(v44);
      }
      v54 = ALBtNotification._simulated.getter(v53);
      v55 = v95;
      if (v54 != 2)
        v54 = sub_10022593C(v54 & 1);
      isAp = ALBtNotification._isApOn.getter(v54);
      if (isAp != 2)
        isAp = sub_1002259E8(isAp & 1);
      isScreen = ALBtNotification._isScreenOn.getter(isAp);
      if (isScreen != 2)
        sub_100225A94(isScreen & 1);
      v58 = sub_10000FD38(&qword_100369EB8, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, (uint64_t)&unk_1002E9978);
      static ALProtobufUtil.debug<A>(_:)(v34, v89, v58);
      v59 = *v55;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v55);
      v61 = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v59 = sub_100017F80(0, *(_QWORD *)(v59 + 16) + 1, 1, v59, &qword_10036A6E8, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      v63 = *(_QWORD *)(v59 + 16);
      v62 = *(_QWORD *)(v59 + 24);
      v64 = v94;
      if (v63 >= v62 >> 1)
      {
        v66 = sub_100017F80(v62 > 1, v63 + 1, 1, v59, &qword_10036A6E8, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        v64 = v94;
        v59 = v66;
      }
      *(_QWORD *)(v59 + 16) = v63 + 1;
      v34 = v100;
      sub_100003E08((uint64_t)v100, v59+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(_QWORD *)(v88 + 72) * v63, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      v36 = v96;
      *v95 = v59;
      v35 = v92;
      (*(void (**)(char *, uint64_t))(v91 + 8))(v36, v92);
      v32 = v64 + 1;
      v65 = v64 + 1 == v87;
      v14 = v61;
    }
    while (!v65);
    v67 = swift_bridgeObjectRelease(v75);
    v24 = v76;
  }
  else
  {
    v67 = swift_bridgeObjectRelease(v28);
  }
  v68 = ALBtNotifications.isLastBatch.getter(v67);
  v69 = (uint64_t)v95;
  sub_1000052E0(v68 & 1);
  sub_100003FEC(v69, (uint64_t)v24, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  v70 = v78;
  sub_100006E30((uint64_t)v24);
  type metadata accessor for ALProtobufUtil();
  v71 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v72 = sub_10000FD38(&qword_100369FA8, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&unk_1002C3B5C);
  static ALProtobufUtil.debug<A>(_:)(v70, v71, v72);
  return sub_100004030(v69, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t ALBtNotifications.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100017714(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_Indication, &qword_100369FA8, (uint64_t)&unk_1002C3B5C, (void (*)(char *))sub_100016C8C, a3);
}

uint64_t sub_100017714@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, void (*a6)(char *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(char *);
  _OWORD v27[2];
  uint64_t v28;
  uint64_t v29;

  v25 = a7;
  v26 = a6;
  v12 = type metadata accessor for BinaryDecodingOptions(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a3(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v25 - v19;
  v28 = 0;
  memset(v27, 0, sizeof(v27));
  v21 = sub_100017EF8(a1, a2);
  BinaryDecodingOptions.init()(v21);
  v22 = sub_10000FD38(a4, a3, a5);
  v23 = v29;
  Message.init(serializedData:extensions:partial:options:)(a1, a2, v27, 0, v14, v15, v22);
  if (v23)
    return sub_100017F3C(a1, a2);
  sub_100003FEC((uint64_t)v20, (uint64_t)v18, a3);
  v26(v18);
  sub_100017F3C(a1, a2);
  return sub_100004030((uint64_t)v20, a3);
}

uint64_t ALBtNotifications.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  os_log_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = v0;
  v3 = type metadata accessor for ALBtNotifications(0);
  v44 = *(char **)(v3 - 8);
  __chkstk_darwin(v3);
  v43 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100016FC0((uint64_t)v11);
  if (!v1)
  {
    v12 = sub_10000FD38(&qword_100369FA8, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&unk_1002C3B5C);
    v13 = Message.serializedData(partial:)(0, v9, v12);
    v15 = v14;
    v16 = (uint64_t)v11;
    v17 = v6;
    v18 = v5;
    sub_100004030(v16, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    v41 = v17;
    corelog.getter((uint64_t)v8);
    v21 = v43;
    v20 = v44;
    (*((void (**)(char *, uint64_t, uint64_t))v44 + 2))(v43, v2, v3);
    sub_100017EF8(v13, v15);
    v22 = v3;
    v42 = v13;
    v23 = sub_100017EF8(v13, v15);
    v24 = v21;
    v25 = Logger.logObject.getter(v23);
    v26 = static os_log_type_t.debug.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc(22, -1);
      v36 = v22;
      v29 = v28;
      v39 = swift_slowAlloc(64, -1);
      v47 = v39;
      *(_DWORD *)v29 = 136446466;
      v38 = v27;
      v30 = ALBtNotifications.description()();
      v45 = sub_10001818C(v30._countAndFlagsBits, (unint64_t)v30._object, &v47);
      v40 = v18;
      v37 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v30._object);
      (*((void (**)(char *, uint64_t))v44 + 1))(v24, v36);
      *(_WORD *)(v29 + 12) = 2082;
      v0 = v42;
      sub_100017EF8(v42, v15);
      v31 = Data.description.getter(v0, v15);
      v44 = v8;
      v33 = v32;
      sub_100017F3C(v0, v15);
      v45 = sub_10001818C(v31, v33, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease(v33);
      sub_100017F3C(v0, v15);
      sub_100017F3C(v0, v15);
      v34 = v37;
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v38, "#BT,serializedData,notif,%{public}s,data,%{public}s", (uint8_t *)v29, 0x16u);
      v35 = v39;
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v40);
    }
    else
    {
      (*((void (**)(char *, uint64_t))v20 + 1))(v24, v22);
      v0 = v42;
      sub_100017F3C(v42, v15);
      sub_100017F3C(v0, v15);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v18);
    }
  }
  return v0;
}

uint64_t static ALBtNotifications.serializedIndications(results:isLastBatch:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for ALBtNotifications(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_bridgeObjectRetain(a1);
  ALBtNotifications.init(results:isLastBatch:)(v8, a2);
  v9 = ALBtNotifications.serializedData()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

void sub_100017D10(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100017D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = enum case for ALBtAdvInfoType7.Placement.unknown(_:);
  v2 = ((uint64_t (*)(_QWORD))type metadata accessor for ALBtAdvInfoType7.Placement)(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t sub_100017DC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = type metadata accessor for ALBtAdvInfoType7.Placement(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for ALBtAdvInfoType7.Placement.unknown(_:))
    return 0;
  if (v4 == enum case for ALBtAdvInfoType7.Placement.inEar(_:))
    return 1;
  if (v4 == enum case for ALBtAdvInfoType7.Placement.outOfEar(_:))
    return 2;
  if (v4 == enum case for ALBtAdvInfoType7.Placement.inCase(_:))
    return 3;
  if (v4 == enum case for ALBtAdvInfoType7.Placement.onEar(_:))
    return 4;
  if (v4 == enum case for ALBtAdvInfoType7.Placement.offEar(_:))
    return 5;
  if (v4 == enum case for ALBtAdvInfoType7.Placement.onNeck(_:))
    return 6;
  if (v4 != enum case for ALBtAdvInfoType7.Placement.disabled(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 7;
}

uint64_t sub_100017EF8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100017F3C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100017F80(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_1000039AC(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10001882C(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_10001818C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10001825C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000187EC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000187EC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_1000187CC(v12);
  return v7;
}

uint64_t sub_10001825C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100018414(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100018414(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000184A8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100018680(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100018680(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000184A8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10001861C(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10001861C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_1000039AC(&qword_10036A6E0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100018680(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000039AC(&qword_10036A6E0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000187CC(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000187EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001882C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100018948(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10007FC08();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100018980@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10005F000(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000189A4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10005F000(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_1000189CC()
{
  return &off_100352400;
}

void sub_1000189D8(_QWORD *a1@<X8>)
{
  *a1 = &off_100352428;
}

uint64_t sub_1000189EC(char a1)
{
  return qword_1002CA548[a1];
}

BOOL sub_100018A00(char *a1, char *a2)
{
  return qword_1002CA548[*a1] == qword_1002CA548[*a2];
}

uint64_t sub_100018A24(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10007FBC4();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100018A5C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10005F010(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100018A80()
{
  char *v0;

  return qword_1002CA548[*v0];
}

uint64_t sub_100018A94@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10005F010(*a1);
  *a2 = result;
  return result;
}

void sub_100018ABC(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1002CA548[*v1];
}

_UNKNOWN **sub_100018AD4()
{
  return &off_100352450;
}

void sub_100018AE0(_QWORD *a1@<X8>)
{
  *a1 = &off_100352450;
}

uint64_t sub_100018AF4(uint64_t result)
{
  return result;
}

BOOL sub_100018AFC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100018B10(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10007FB80();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100018B48@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10005F078(a1);
  *a2 = result;
  return result;
}

uint64_t ALWiFiScanRow.Band.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_100018B74@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10005F078(*a1);
  *a2 = result;
  return result;
}

void sub_100018B9C(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

_UNKNOWN **sub_100018BA8()
{
  return &off_100352478;
}

void sub_100018BB4(_QWORD *a1@<X8>)
{
  *a1 = &off_100352478;
}

uint64_t sub_100018BC8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10007FB3C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100018C00@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10005F088(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100018C24@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10005F088(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_100018C4C()
{
  return &off_1003524A8;
}

void sub_100018C58(_QWORD *a1@<X8>)
{
  *a1 = &off_1003524A8;
}

uint64_t sub_100018C6C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10007FAF8();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100018CA4()
{
  return &off_1003524D0;
}

void sub_100018CB0(_QWORD *a1@<X8>)
{
  *a1 = &off_1003524D0;
}

uint64_t sub_100018CC0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10007FAB4();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100018CF8()
{
  return &off_1003524F8;
}

void sub_100018D04(_QWORD *a1@<X8>)
{
  *a1 = &off_100352520;
}

uint64_t sub_100018D14(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10007FA70();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100018D4C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10005F098(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100018D70@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10005F098(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_100018D98()
{
  return &off_100352548;
}

void sub_100018DA4(_QWORD *a1@<X8>)
{
  *a1 = &off_100352548;
}

uint64_t sub_100018DB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10007FA2C();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100018DEC()
{
  return &off_100352570;
}

void sub_100018DF8(_QWORD *a1@<X8>)
{
  *a1 = &off_100352598;
}

unint64_t sub_100018E08(unint64_t result)
{
  if (result >= 3)
    return 3;
  return result;
}

uint64_t sub_100018E18(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10007F9E8();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100018E50@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 3;
  if (result < 3)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t *sub_100018E64@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

_UNKNOWN **sub_100018E7C()
{
  return &off_1003525C0;
}

void sub_100018E88(_QWORD *a1@<X8>)
{
  *a1 = &off_1003525E8;
}

uint64_t sub_100018E98(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10007F9A4();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100018ED0()
{
  return &off_100352610;
}

void sub_100018EDC(_QWORD *a1@<X8>)
{
  *a1 = &off_100352638;
}

uint64_t sub_100018EEC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10007F960();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100018F24()
{
  return &off_100352660;
}

void sub_100018F30(_QWORD *a1@<X8>)
{
  *a1 = &off_100352660;
}

uint64_t sub_100018F44(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10007F91C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100018F7C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10005F0A8(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100018FA0@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10005F0A8(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_100018FC8()
{
  return &off_100352688;
}

void sub_100018FD4(_QWORD *a1@<X8>)
{
  *a1 = &off_1003526B0;
}

uint64_t sub_100018FE4()
{
  return sub_100019188(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_100018FF0(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t (*sub_100018FFC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10001904C()
{
  return sub_100019258(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_100019058()
{
  return sub_100019294(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_100019064()
{
  return sub_10002CFA0(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_100019070(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_10001909C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000190E8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 24)) != 5;
}

uint64_t sub_100019110()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t sub_100019134@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  UnknownStorage.init()();
  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(a1 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t sub_10001917C()
{
  return sub_100019188(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_100019188(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 20));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t sub_1000191BC(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_1000191C8(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 20);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000191FC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10001924C()
{
  return sub_100019258(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

BOOL sub_100019258(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 20) + 4) & 1) == 0;
}

uint64_t sub_100019288()
{
  return sub_100019294(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_100019294(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 20);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000192C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = sub_1000039AC(&qword_10036A700);
  __chkstk_darwin(v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10036A700);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 5;
  return sub_100015704((uint64_t)v5, &qword_10036A700);
}

uint64_t sub_1000193C0(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, &qword_10036A700, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

void (*sub_1000193DC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A700);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A700);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v9[*(int *)(v6 + 24)] = 5;
    sub_100015704((uint64_t)v5, &qword_10036A700);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  }
  return sub_100019518;
}

void sub_100019518(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A700, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

BOOL sub_10001952C()
{
  return sub_1000198C8(&qword_10036A700, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_100019548()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, &qword_10036A700, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_100019564@<X0>(uint64_t a1@<X8>)
{
  return sub_10001A2F0(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a1);
}

uint64_t sub_100019578@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a1);
}

uint64_t sub_100019584()
{
  return sub_100019188(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019590(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t (*sub_10001959C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000195EC()
{
  return sub_100019258(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_1000195F8()
{
  return sub_100019294(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019604@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1000039AC(&qword_10036A708);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10036A708);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return sub_100015704((uint64_t)v5, &qword_10036A708);
}

uint64_t sub_100019720(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, &qword_10036A708, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

void (*sub_10001973C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A708);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A708);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_100015704((uint64_t)v5, &qword_10036A708);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  }
  return sub_100019898;
}

void sub_100019898(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A708, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

BOOL sub_1000198AC()
{
  return sub_1000198C8(&qword_10036A708, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

BOOL sub_1000198C8(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = sub_1000039AC(a1);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  sub_10000E660(v3 + *(int *)(v10 + 24), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_100015704((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_100019984()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, &qword_10036A708, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_1000199A0(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 24);
  sub_100015704(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_100019A08()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 28));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t sub_100019A38(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v4 = v1 + *(int *)(result + 28);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100019A6C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100019ABC()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019AC8()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019AD4()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 32));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t sub_100019B04(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v4 = v1 + *(int *)(result + 32);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100019B38(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100019B88()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019B94()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019BA0()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 36));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t sub_100019BD0(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v4 = v1 + *(int *)(result + 36);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100019C04(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100019C54()
{
  return sub_10002822C(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019C60()
{
  return sub_100028268(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019C6C()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 40));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t sub_100019C9C(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v4 = v1 + *(int *)(result + 40);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100019CD0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100019D20()
{
  return sub_1000336EC(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019D2C()
{
  return sub_100033728(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019D38()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 44));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t sub_100019D68(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v4 = v1 + *(int *)(result + 44);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100019D9C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100019DEC()
{
  return sub_100033824(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019DF8()
{
  return sub_100033860(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100019E04@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1 + v2[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + v2[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v2[9];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v2[10];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v2[11];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_100019EC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, a1);
}

uint64_t sub_100019ED4()
{
  return sub_100019188(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100019EE0(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t (*sub_100019EEC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvId(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100019F3C()
{
  return sub_100019258(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100019F48()
{
  return sub_100019294(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100019F54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = sub_1000039AC(&qword_10036A710);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10036A710);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a1 + v7[7];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[8];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[9];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v7[10];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v7[11];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A710);
}

uint64_t sub_10001A0C8(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &qword_10036A710, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

void (*sub_10001A0E4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A710);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvId(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A710);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = &v9[v6[7]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[8]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[9]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v17 = &v9[v6[10]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    v18 = &v9[v6[11]];
    *(_DWORD *)v18 = 0;
    v18[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A710);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  }
  return sub_10001A290;
}

void sub_10001A290(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A710, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

BOOL sub_10001A2A4()
{
  return sub_1000198C8(&qword_10036A710, type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_10001A2C0()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_SvId, &qword_10036A710, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_10001A2DC@<X0>(uint64_t a1@<X8>)
{
  return sub_10001A2F0(type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a1);
}

uint64_t sub_10001A2F0@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v6 = a1(0);
  v7 = a3 + *(int *)(v6 + 20);
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a3 + *(int *)(v6 + 24);
  v9 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t sub_10001A364@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a1);
}

uint64_t sub_10001A370()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10001A37C(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*sub_10001A388(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001A3D0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 20)) != 2;
}

uint64_t sub_10001A3F8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001A41C()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10001A428(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*sub_10001A434(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001A47C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 24)) != 2;
}

uint64_t sub_10001A4A4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001A4C8()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10001A4D4(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*sub_10001A4E0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001A528()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 28)) != 2;
}

uint64_t sub_10001A550()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001A574()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10001A580(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*sub_10001A58C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001A5D4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 32)) != 2;
}

uint64_t sub_10001A5FC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10001A620@<X0>(uint64_t a1@<X8>)
{
  return sub_10001AD74(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t sub_10001A62C()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A638(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 20)) & 1;
}

uint64_t sub_10001A660(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A66C(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10001A698(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001A6E0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 20)) != 2;
}

uint64_t sub_10001A708()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001A72C()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A738(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 24)) & 1;
}

uint64_t sub_10001A760(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A76C(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_10001A798(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001A7E0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 24)) != 2;
}

uint64_t sub_10001A808()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001A82C()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A838(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 28)) & 1;
}

uint64_t sub_10001A860(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t (*sub_10001A86C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001A8B4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 28)) != 2;
}

uint64_t sub_10001A8DC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001A900()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A90C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 32)) & 1;
}

uint64_t sub_10001A934(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001A940(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10001A96C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001A9B4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 32)) != 2;
}

uint64_t sub_10001A9DC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_10001AA00()
{
  return sub_10001B080(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10001AA0C(char a1)
{
  return sub_10001B0B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t (*sub_10001AA18(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001AA60()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 36)) != 2;
}

uint64_t sub_10001AA88()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_10001AAAC@<X0>(uint64_t a1@<X8>)
{
  return sub_10001B180(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, a1);
}

uint64_t sub_10001AAB8()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10001AAC4(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*sub_10001AAD0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001AB18()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 20)) != 2;
}

uint64_t sub_10001AB40()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001AB64()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10001AB70(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*sub_10001AB7C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001ABC4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 24)) != 2;
}

uint64_t sub_10001ABEC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001AC10()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10001AC1C(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*sub_10001AC28(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001AC70()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 28)) != 2;
}

uint64_t sub_10001AC98()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001ACBC()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10001ACC8(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*sub_10001ACD4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001AD1C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 32)) != 2;
}

uint64_t sub_10001AD44()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10001AD68@<X0>(uint64_t a1@<X8>)
{
  return sub_10001AD74(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, a1);
}

int *sub_10001AD74@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;

  UnknownStorage.init()();
  result = (int *)a1(0);
  *(_BYTE *)(a2 + result[5]) = 2;
  *(_BYTE *)(a2 + result[6]) = 2;
  *(_BYTE *)(a2 + result[7]) = 2;
  *(_BYTE *)(a2 + result[8]) = 2;
  return result;
}

uint64_t sub_10001ADC4()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001ADD0(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*sub_10001ADDC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001AE24()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 20)) != 2;
}

uint64_t sub_10001AE4C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001AE70()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001AE7C(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*sub_10001AE88(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001AED0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 24)) != 2;
}

uint64_t sub_10001AEF8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001AF1C()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001AF28(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*sub_10001AF34(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001AF7C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 28)) != 2;
}

uint64_t sub_10001AFA4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001AFC8()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001AFD4(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*sub_10001AFE0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B028()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 32)) != 2;
}

uint64_t sub_10001B050()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_10001B074()
{
  return sub_10001B080(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001B080(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 36)) & 1;
}

uint64_t sub_10001B0A8(char a1)
{
  return sub_10001B0B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001B0B4(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10001B0E0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B128()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 36)) != 2;
}

uint64_t sub_10001B150()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_10001B174@<X0>(uint64_t a1@<X8>)
{
  return sub_10001B180(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, a1);
}

int *sub_10001B180@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;

  UnknownStorage.init()();
  result = (int *)a1(0);
  *(_BYTE *)(a2 + result[5]) = 2;
  *(_BYTE *)(a2 + result[6]) = 2;
  *(_BYTE *)(a2 + result[7]) = 2;
  *(_BYTE *)(a2 + result[8]) = 2;
  *(_BYTE *)(a2 + result[9]) = 2;
  return result;
}

uint64_t sub_10001B1D8()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10001B1E4(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*sub_10001B1F0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B238()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 20)) != 2;
}

uint64_t sub_10001B260()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001B284()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10001B290(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*sub_10001B29C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B2E4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 24)) != 2;
}

uint64_t sub_10001B30C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001B330()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10001B33C(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*sub_10001B348(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B390()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 28)) != 2;
}

uint64_t sub_10001B3B8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001B3DC()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10001B3E8(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*sub_10001B3F4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B43C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 32)) != 2;
}

uint64_t sub_10001B464()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10001B488@<X0>(uint64_t a1@<X8>)
{
  return sub_10001AD74(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, a1);
}

uint64_t sub_10001B494()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10001B4A0(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*sub_10001B4AC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B4F4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 20)) != 2;
}

uint64_t sub_10001B51C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001B540()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10001B54C(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*sub_10001B558(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B5A0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 24)) != 2;
}

uint64_t sub_10001B5C8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001B5EC()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10001B5F8(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*sub_10001B604(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B64C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 28)) != 2;
}

uint64_t sub_10001B674()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001B698()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10001B6A4(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*sub_10001B6B0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B6F8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 32)) != 2;
}

uint64_t sub_10001B720()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10001B744@<X0>(uint64_t a1@<X8>)
{
  return sub_10001AD74(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, a1);
}

uint64_t sub_10001B750()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10001B75C(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*sub_10001B768(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B7B0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 20)) != 2;
}

uint64_t sub_10001B7D8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001B7FC()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10001B808(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*sub_10001B814(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B85C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 24)) != 2;
}

uint64_t sub_10001B884()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001B8A8()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10001B8B4(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*sub_10001B8C0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B908()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 28)) != 2;
}

uint64_t sub_10001B930()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001B954()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10001B960(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*sub_10001B96C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001B9B4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 32)) != 2;
}

uint64_t sub_10001B9DC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10001BA00@<X0>(uint64_t a1@<X8>)
{
  return sub_10001AD74(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, a1);
}

uint64_t sub_10001BA0C()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10001BA18(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10001BA24(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001BA6C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 20)) != 2;
}

uint64_t sub_10001BA94()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001BAB8()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10001BAC4(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10001BAD0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001BB18()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 24)) != 2;
}

uint64_t sub_10001BB40()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001BB64()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10001BB70(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10001BB7C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001BBC4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 28)) != 2;
}

uint64_t sub_10001BBEC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10001BC10()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10001BC1C(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10001BC28(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001BC70()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 32)) != 2;
}

uint64_t sub_10001BC98()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_10001BCBC()
{
  return sub_10001B080(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10001BCC8(char a1)
{
  return sub_10001B0B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10001BCD4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001BD1C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 36)) != 2;
}

uint64_t sub_10001BD44()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_10001BD68()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40)) & 1;
}

uint64_t sub_10001BD8C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_10001BDB8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001BE00()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40)) != 2;
}

uint64_t sub_10001BE28()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

uint64_t sub_10001BE4C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44)) & 1;
}

uint64_t sub_10001BE70(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_10001BE9C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001BEE4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44)) != 2;
}

uint64_t sub_10001BF0C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_10001BF30()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48)) & 1;
}

uint64_t sub_10001BF54(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_10001BF80(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001BFC8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48)) != 2;
}

uint64_t sub_10001BFF0()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_10001C014()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52)) & 1;
}

uint64_t sub_10001C038(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_10001C064(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001C0AC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52)) != 2;
}

uint64_t sub_10001C0D4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 52)) = 2;
  return result;
}

uint64_t sub_10001C0F8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56)) & 1;
}

uint64_t sub_10001C11C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*sub_10001C148(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001C190()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56)) != 2;
}

uint64_t sub_10001C1B8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 56)) = 2;
  return result;
}

int *sub_10001C1DC@<X0>(uint64_t a1@<X8>)
{
  int *result;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  *(_BYTE *)(a1 + result[9]) = 2;
  *(_BYTE *)(a1 + result[10]) = 2;
  *(_BYTE *)(a1 + result[11]) = 2;
  *(_BYTE *)(a1 + result[12]) = 2;
  *(_BYTE *)(a1 + result[13]) = 2;
  *(_BYTE *)(a1 + result[14]) = 2;
  return result;
}

uint64_t sub_10001C258()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_10001C264(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*sub_10001C270(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001C2B8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 20)) != 2;
}

uint64_t sub_10001C2E0()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10001C304()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_10001C310(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*sub_10001C31C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001C364()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 24)) != 2;
}

uint64_t sub_10001C38C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_10001C3B0()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_10001C3BC(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*sub_10001C3C8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001C410()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 28)) != 2;
}

uint64_t sub_10001C438()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

int *sub_10001C45C@<X0>(uint64_t a1@<X8>)
{
  int *result;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  return result;
}

uint64_t sub_10001C4A0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  if (*(_BYTE *)(v1 + 16) == 13)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_10001C4F0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10003D0E4(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 16, v12, 1, 0);
  *(_BYTE *)(v10 + 16) = a1;
  return result;
}

void (*sub_10001C594(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 13)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10001C610;
}

void sub_10001C610(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10003D0E4(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_10001C6E4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  return *(_BYTE *)(v1 + 16) != 13;
}

uint64_t sub_10001C734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10003D0E4(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 16, v10, 1, 0);
  *(_BYTE *)(v8 + 16) = 13;
  return result;
}

uint64_t sub_10001C7D0@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F444(&qword_10036A718, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t sub_10001C7EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A718);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10003D0E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A718);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A718);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001C96C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A718);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A718);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A718);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  }
  return sub_10001CAC4;
}

void sub_10001CAC4(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10001C7EC, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

BOOL sub_10001CAD8()
{
  return sub_10001CFF4(&qword_10036A718, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10001CAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A718);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10003D0E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A718);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001CC2C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D680(&qword_10036A720, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, a1);
}

uint64_t sub_10001CC48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A720);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10003D0E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A720);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A720);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001CDC8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A720);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A720);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A720);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  }
  return sub_10001CF28;
}

void sub_10001CF28(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10001CC48, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

void sub_10001CF3C(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(_QWORD))
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = *(void **)a1;
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v7 = *(void **)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    sub_100003FEC(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)v6, a4);
    a3(v6);
    sub_100004030((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(_QWORD *)a1 + 48));
  }
  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

BOOL sub_10001CFD0()
{
  return sub_10001CFF4(&qword_10036A720, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

BOOL sub_10001CFF4(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  _BYTE v17[24];

  v9 = sub_1000039AC(a1);
  __chkstk_darwin(v9);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = *(_QWORD *)(v4 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess(v12, v17, 0, 0);
  sub_10000E660(v12, (uint64_t)v11, a1);
  v13 = a4(0);
  v14 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13) != 1;
  sub_100015704((uint64_t)v11, a1);
  return v14;
}

uint64_t sub_10001D0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A720);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10003D0E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A720);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001D208@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F444(&qword_10036A728, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, a1);
}

uint64_t sub_10001D224(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A728);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10003D0E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A728);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A728);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001D3A4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A728);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A728);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A728);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  }
  return sub_10001D4FC;
}

void sub_10001D4FC(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10001D224, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

BOOL sub_10001D510()
{
  return sub_10001CFF4(&qword_10036A728, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10001D534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A728);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10003D0E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A728);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001D664@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D680(&qword_10036A730, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, a1);
}

uint64_t sub_10001D680@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  _BYTE v16[24];

  v9 = sub_1000039AC(a1);
  __chkstk_darwin(v9);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20)) + *a2;
  swift_beginAccess(v12, v16, 0, 0);
  sub_10000E660(v12, (uint64_t)v11, a1);
  v13 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v11, 1, v13) != 1)
    return sub_100003E08((uint64_t)v11, a4, a3);
  UnknownStorage.init()();
  *(_BYTE *)(a4 + v13[5]) = 2;
  *(_BYTE *)(a4 + v13[6]) = 2;
  *(_BYTE *)(a4 + v13[7]) = 2;
  *(_BYTE *)(a4 + v13[8]) = 2;
  *(_BYTE *)(a4 + v13[9]) = 2;
  return sub_100015704((uint64_t)v11, a1);
}

uint64_t sub_10001D7AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A730);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10003D0E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A730);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A730);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001D92C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A730);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A730);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A730);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  }
  return sub_10001DA8C;
}

void sub_10001DA8C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10001D7AC, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

BOOL sub_10001DAA0()
{
  return sub_10001CFF4(&qword_10036A730, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10001DAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A730);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10003D0E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A730);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001DBF4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F444(&qword_10036A738, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, a1);
}

uint64_t sub_10001DC10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A738);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10003D0E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A738);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A738);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001DD90(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A738);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A738);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A738);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  }
  return sub_10001DEE8;
}

void sub_10001DEE8(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10001DC10, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

BOOL sub_10001DEFC()
{
  return sub_10001CFF4(&qword_10036A738, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10001DF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A738);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10003D0E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A738);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001E050@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F444(&qword_10036A740, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, a1);
}

uint64_t sub_10001E06C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A740);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10003D0E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A740);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A740);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001E1EC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A740);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A740);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A740);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  }
  return sub_10001E344;
}

void sub_10001E344(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10001E06C, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

BOOL sub_10001E358()
{
  return sub_10001CFF4(&qword_10036A740, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10001E37C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A740);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10003D0E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A740);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001E4AC@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F444(&qword_10036A748, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, a1);
}

uint64_t sub_10001E4C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A748);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10003D0E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A748);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A748);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001E648(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A748);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A748);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A748);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  }
  return sub_10001E7A0;
}

void sub_10001E7A0(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10001E4C8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

BOOL sub_10001E7B4()
{
  return sub_10001CFF4(&qword_10036A748, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10001E7D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A748);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10003D0E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A748);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001E908@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _BYTE v10[24];

  v3 = sub_1000039AC(&qword_10036A750);
  __chkstk_darwin(v3);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess(v6, v10, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A750);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  *(_BYTE *)(a1 + v7[6]) = 2;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  *(_BYTE *)(a1 + v7[9]) = 2;
  *(_BYTE *)(a1 + v7[10]) = 2;
  *(_BYTE *)(a1 + v7[11]) = 2;
  *(_BYTE *)(a1 + v7[12]) = 2;
  *(_BYTE *)(a1 + v7[13]) = 2;
  *(_BYTE *)(a1 + v7[14]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036A750);
}

uint64_t sub_10001EA60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A750);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10003D0E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A750);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A750);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001EBE0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A750);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A750);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    v9[v6[13]] = 2;
    v9[v6[14]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A750);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  }
  return sub_10001ED68;
}

void sub_10001ED68(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10001EA60, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

BOOL sub_10001ED7C()
{
  return sub_10001CFF4(&qword_10036A750, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10001EDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A750);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10003D0E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A750);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001EED0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _BYTE v10[24];

  v3 = sub_1000039AC(&qword_10036A758);
  __chkstk_darwin(v3);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess(v6, v10, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A758);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  *(_BYTE *)(a1 + v7[6]) = 2;
  *(_BYTE *)(a1 + v7[7]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036A758);
}

uint64_t sub_10001EFF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A758);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10003D0E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A758);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A758);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001F170(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A758);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A758);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A758);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  }
  return sub_10001F2C0;
}

void sub_10001F2C0(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10001EFF0, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

BOOL sub_10001F2D4()
{
  return sub_10001CFF4(&qword_10036A758, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_10001F2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A758);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10003D0E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A758);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001F428@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F444(&qword_10036A718, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t sub_10001F444@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  _BYTE v16[24];

  v9 = sub_1000039AC(a1);
  __chkstk_darwin(v9);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20)) + *a2;
  swift_beginAccess(v12, v16, 0, 0);
  sub_10000E660(v12, (uint64_t)v11, a1);
  v13 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v11, 1, v13) != 1)
    return sub_100003E08((uint64_t)v11, a4, a3);
  UnknownStorage.init()();
  *(_BYTE *)(a4 + v13[5]) = 2;
  *(_BYTE *)(a4 + v13[6]) = 2;
  *(_BYTE *)(a4 + v13[7]) = 2;
  *(_BYTE *)(a4 + v13[8]) = 2;
  return sub_100015704((uint64_t)v11, a1);
}

uint64_t sub_10001F568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A718);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10003D0E4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A718);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A718);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10001F6E8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A718);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A718);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A718);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  }
  return sub_10001F840;
}

void sub_10001F840(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10001F568, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

BOOL sub_10001F854()
{
  return sub_10001CFF4(&qword_10036A718, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10001F878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A718);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10003D0E4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A718);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10001F9A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &qword_1003874E0, &qword_1003874E8, (uint64_t)sub_10003CECC, a1);
}

uint64_t sub_10001F9CC()
{
  return sub_100036594(&qword_1003874E0, &qword_1003874E8, (uint64_t)sub_10003CECC);
}

double sub_10001F9E8()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10001F9F4(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t (*sub_10001FA00(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10001FA58()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10001FA64()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

double sub_10001FA70()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10001FA7C(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t (*sub_10001FA88(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10001FAE0()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10001FAEC()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10001FAF8()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10001FB04(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t (*sub_10001FB10(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001FB58()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 28)) != 2;
}

uint64_t sub_10001FB80()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

int *sub_10001FBA4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001FEC0(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, 2, a1);
}

double sub_10001FBB4()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

double sub_10001FBC0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 20);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t sub_10001FBF8(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t sub_10001FC04(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 20);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_10001FC3C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10001FC94()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL sub_10001FCA0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 20) + 8) & 1) == 0;
}

uint64_t sub_10001FCD0()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10001FCDC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 20);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double sub_10001FD0C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

double sub_10001FD18(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 24);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t sub_10001FD50(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t sub_10001FD5C(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 24);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_10001FD94(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10001FDEC()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10001FDF8()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10001FE04()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10001FE10(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t (*sub_10001FE1C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10001FE64()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 28)) != 2;
}

uint64_t sub_10001FE8C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

int *sub_10001FEB0@<X0>(uint64_t a1@<X8>)
{
  return sub_10001FEC0(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, 2, a1);
}

int *sub_10001FEC0@<X0>(uint64_t (*a1)(_QWORD)@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int *result;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)a1(0);
  v7 = a3 + result[5];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a3 + result[6];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a3 + result[7]) = a2;
  return result;
}

double sub_10001FF24()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_10001FF30(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, a1);
}

uint64_t (*sub_10001FF3C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10001FF94()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_10001FFA0()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

double sub_10001FFAC()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_10001FFB8(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, a1);
}

uint64_t (*sub_10001FFC4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002001C()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100020028()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100020034()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100020040(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t (*sub_10002004C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100020094()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0)
                           + 28)) != 2;
}

uint64_t sub_1000200BC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000200E0()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_1000200EC(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t (*sub_1000200F8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100020140()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0)
                           + 32)) != 2;
}

uint64_t sub_100020168()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10002018C@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  return result;
}

uint64_t sub_1000201EC()
{
  return sub_100027F38(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_1000201F8(uint64_t a1)
{
  return sub_100027F78(a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t (*sub_100020204(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100020258()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100020264()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100020270()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 24));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t sub_1000202A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v4 = v1 + *(int *)(result + 24);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000202D4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100020328()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100020334()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

double sub_100020340()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_10002034C(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, a1);
}

uint64_t (*sub_100020358(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000203B0()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_1000203BC()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

double sub_1000203C8()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_1000203D4(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, a1);
}

uint64_t (*sub_1000203E0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100020438()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100020444()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100020450()
{
  return sub_10001B080(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_10002045C(char a1)
{
  return sub_10001B0B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t (*sub_100020468(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000204B0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 36)) != 2;
}

uint64_t sub_1000204D8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_1000204FC@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a1 + result[9]) = 2;
  return result;
}

uint64_t sub_100020574@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036A760);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  sub_10000E660(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_10036A760);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036A760);
}

uint64_t sub_100020680(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &qword_10036A760, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

void (*sub_10002069C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A760);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A760);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A760);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  }
  return sub_1000207E8;
}

void sub_1000207E8(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A760, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

BOOL sub_1000207FC()
{
  return sub_100031310(&qword_10036A760, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100020818()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &qword_10036A760, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100020834@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036A768);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10036A768);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036A768);
}

uint64_t sub_100020940(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &qword_10036A768, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

void (*sub_10002095C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A768);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A768);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A768);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  return sub_100020AA8;
}

void sub_100020AA8(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A768, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL sub_100020ABC()
{
  return sub_1000198C8(&qword_10036A768, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100020AD8()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &qword_10036A768, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

float sub_100020AF4()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t sub_100020B00(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, a1);
}

uint64_t (*sub_100020B0C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100020B64()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

BOOL sub_100020B70(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 28) + 4) & 1) == 0;
}

uint64_t sub_100020BA0()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t sub_100020BAC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 28);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_100020BDC@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = a1 + v2[7];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_100020C7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t sub_100020C88@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

double sub_100020C94()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100020CA0(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, a1);
}

uint64_t (*sub_100020CAC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100020D04()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100020D10()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

double sub_100020D1C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100020D28(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, a1);
}

uint64_t (*sub_100020D34(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100020D8C()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100020D98()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100020DA4()
{
  return sub_10002E024(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100020DB0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100020DDC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100003738;
}

BOOL sub_100020E28()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 28)) != 6;
}

uint64_t sub_100020E50()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 6;
  return result;
}

int *sub_100020E74@<X0>(uint64_t a1@<X8>)
{
  return sub_10001FEC0(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, 6, a1);
}

uint64_t sub_100020E84()
{
  return 6;
}

float sub_100020E8C()
{
  return sub_100027590(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100020E98(float a1)
{
  return sub_1000275D4(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t (*sub_100020EA4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 20);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100020EFC()
{
  return sub_100019258(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100020F08()
{
  return sub_100019294(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float sub_100020F14()
{
  return sub_100027688(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100020F20(float a1)
{
  return sub_1000276CC(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t (*sub_100020F2C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100020F84()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100020F90()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float sub_100020F9C()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float sub_100020FA8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 28);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t sub_100020FE0(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t sub_100020FEC(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 28);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_100021024(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10002107C()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100021088()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

int *sub_100021094@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

float sub_1000210F0()
{
  uint64_t v0;
  uint64_t v1;
  float result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  result = *(float *)(v1 + 16);
  if (*(_BYTE *)(v1 + 20))
    return 0.0;
  return result;
}

uint64_t sub_100021148(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100043C2C(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 16, v12, 1, 0);
  *(float *)(v10 + 16) = a1;
  *(_BYTE *)(v10 + 20) = 0;
  return result;
}

void (*sub_1000211F0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(float *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_100021274;
}

void sub_100021274(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100043C2C(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 16, v6, 1, 0);
  *(_DWORD *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 20) = 0;
  free((void *)v3);
}

BOOL sub_100021348()
{
  return sub_10002EDC0(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_100021354()
{
  return sub_10002EE30(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C);
}

float sub_100021370()
{
  uint64_t v0;
  uint64_t v1;
  float result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_beginAccess(v1 + 24, v3, 0, 0);
  result = *(float *)(v1 + 24);
  if (*(_BYTE *)(v1 + 28))
    return 0.0;
  return result;
}

uint64_t sub_1000213C8(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100043C2C(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 24, v12, 1, 0);
  *(float *)(v10 + 24) = a1;
  *(_BYTE *)(v10 + 28) = 0;
  return result;
}

void (*sub_100021470(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 24, v3, 0, 0);
  v6 = *(float *)(v5 + 24);
  if (*(_BYTE *)(v5 + 28))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000214F4;
}

void sub_1000214F4(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100043C2C(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 24, v6, 1, 0);
  *(_DWORD *)(v14 + 24) = v4;
  *(_BYTE *)(v14 + 28) = 0;
  free((void *)v3);
}

BOOL sub_1000215C8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_beginAccess(v1 + 24, v3, 0, 0);
  return (*(_BYTE *)(v1 + 28) & 1) == 0;
}

uint64_t sub_100021618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100043C2C(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 24, v10, 1, 0);
  *(_DWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 28) = 1;
  return result;
}

uint64_t sub_1000216B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036A770);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A770);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 6;
  return sub_100015704((uint64_t)v5, &qword_10036A770);
}

uint64_t sub_1000217EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A770);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100043C2C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A770);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A770);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10002196C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A770);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A770);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 6;
    sub_100015704((uint64_t)v5, &qword_10036A770);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  }
  return sub_100021AD0;
}

void sub_100021AD0(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000217EC, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

BOOL sub_100021AE4()
{
  return sub_10001CFF4(&qword_10036A770, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100021B08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A770);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100043C2C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A770);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100021C38@<X0>(uint64_t a1@<X8>)
{
  return sub_1000224FC(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, a1);
}

uint64_t sub_100021C44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A778);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100043C2C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A778);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A778);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100021DC4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A778);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A778);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A778);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  return sub_100021F2C;
}

void sub_100021F2C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100021C44, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

BOOL sub_100021F40()
{
  return sub_10001CFF4(&qword_10036A778, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100021F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A778);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100043C2C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A778);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100022094@<X0>(uint64_t a1@<X8>)
{
  return sub_1000224FC(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, a1);
}

uint64_t sub_1000220A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A778);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100043C2C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A778);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A778);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100022220(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A778);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A778);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A778);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  return sub_100022388;
}

void sub_100022388(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000220A0, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

BOOL sub_10002239C()
{
  return sub_10001CFF4(&qword_10036A778, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_1000223C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A778);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100043C2C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A778);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000224F0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000224FC(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, a1);
}

uint64_t sub_1000224FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[24];

  v5 = sub_1000039AC(&qword_10036A778);
  __chkstk_darwin(v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
     + *a1;
  swift_beginAccess(v8, v15, 0, 0);
  sub_10000E660(v8, (uint64_t)v7, &qword_10036A778);
  v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return sub_100003E08((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  UnknownStorage.init()();
  v10 = a2 + v9[5];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a2 + v9[6];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a2 + v9[7];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return sub_100015704((uint64_t)v7, &qword_10036A778);
}

uint64_t sub_10002263C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A778);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100043C2C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A778);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A778);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000227BC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A778);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A778);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A778);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  return sub_100022924;
}

void sub_100022924(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10002263C, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

BOOL sub_100022938()
{
  return sub_10001CFF4(&qword_10036A778, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_10002295C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A778);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100043C2C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A778);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100022A8C()
{
  return sub_100022B80(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

uint64_t sub_100022A98(int a1)
{
  return sub_100022BEC(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

void (*sub_100022AA4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100022B30;
}

void sub_100022B30(uint64_t *a1, char a2)
{
  sub_100022D38(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

BOOL sub_100022B3C()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

uint64_t sub_100022B50()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

uint64_t sub_100022B74()
{
  return sub_100022B80(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t sub_100022B80(_QWORD *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE v4[24];

  v2 = (_BYTE *)(*(_QWORD *)(v1
                           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
               + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t sub_100022BE0(int a1)
{
  return sub_100022BEC(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t sub_100022BEC(int a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[24];

  v4 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_100043C2C(v10);
    v11 = *(_QWORD *)(v4 + v6);
    *(_QWORD *)(v4 + v6) = v9;
    swift_release(v11);
  }
  v12 = *(_QWORD *)(v4 + v6) + *a2;
  result = swift_beginAccess(v12, v14, 1, 0);
  *(_DWORD *)v12 = a1;
  *(_BYTE *)(v12 + 4) = 0;
  return result;
}

void (*sub_100022CA0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100022D2C;
}

void sub_100022D2C(uint64_t *a1, char a2)
{
  sub_100022D38(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

void sub_100022D38(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v9 = *(int *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 72);
    v11 = *(_QWORD *)(v10 + v9);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100043C2C(v14);
    v15 = *(_QWORD *)(v10 + v9);
    *(_QWORD *)(v10 + v9) = v13;
    swift_release(v15);
  }
LABEL_4:
  v16 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess(v16, v8, 1, 0);
  *(_DWORD *)v16 = v6;
  *(_BYTE *)(v16 + 4) = 0;
  free((void *)v5);
}

BOOL sub_100022E18()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

BOOL sub_100022E2C(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v3 = *(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess(v3, v5, 0, 0);
  return (*(_BYTE *)(v3 + 4) & 1) == 0;
}

uint64_t sub_100022E8C()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t sub_100022EB0(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];

  v8 = v4;
  v9 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v4 + v9);
    v11 = a2(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    a3(v13);
    v14 = *(_QWORD *)(v8 + v9);
    *(_QWORD *)(v8 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v8 + v9) + *a4;
  result = swift_beginAccess(v15, v17, 1, 0);
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_100022F70()
{
  return sub_100023080(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

uint64_t sub_100022F84(char a1)
{
  return sub_100023104(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

void (*sub_100022FA8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_100023030;
}

void sub_100023030(uint64_t *a1, char a2)
{
  sub_100023268(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

BOOL sub_10002304C()
{
  return sub_100023364(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

uint64_t sub_100023060()
{
  return sub_1000233D0(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

uint64_t sub_10002306C()
{
  return sub_100023080(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t sub_100023080(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _BYTE v5[24];

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0, 0);
  if (*v3 == 7)
    return 0;
  else
    return *v3;
}

uint64_t sub_1000230E0(char a1)
{
  return sub_100023104(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t sub_100023104(char a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t result;
  _BYTE v19[24];

  v9 = v5;
  v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v5 + v11);
    v13 = a3(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    a4(v15);
    v16 = *(_QWORD *)(v9 + v11);
    *(_QWORD *)(v9 + v11) = v14;
    swift_release(v16);
  }
  v17 = (_BYTE *)(*(_QWORD *)(v9 + v11) + *a5);
  result = swift_beginAccess(v17, v19, 1, 0);
  *v17 = a1;
  return result;
}

void (*sub_1000231C4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002324C;
}

void sub_10002324C(uint64_t *a1, char a2)
{
  sub_100023268(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

void sub_100023268(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;

  v9 = *a1;
  v10 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v13 = *(int *)(v9 + 80);
    v14 = *(_QWORD *)(v9 + 72);
    v15 = *(_QWORD *)(v14 + v13);
    v16 = a3(0);
    v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v18 = swift_retain(v15);
    a4(v18);
    v19 = *(_QWORD *)(v14 + v13);
    *(_QWORD *)(v14 + v13) = v17;
    swift_release(v19);
  }
LABEL_4:
  v20 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess(v20, v12, 1, 0);
  *v20 = v10;
  free((void *)v9);
}

BOOL sub_100023350()
{
  return sub_100023364(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

BOOL sub_100023364(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _BYTE v5[24];

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0, 0);
  return *v3 != 7;
}

uint64_t sub_1000233C4()
{
  return sub_1000233D0(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t sub_1000233D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  _BYTE v12[24];

  v3 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100043C2C(v8);
    v9 = *(_QWORD *)(v3 + v4);
    *(_QWORD *)(v3 + v4) = v7;
    swift_release(v9);
  }
  v10 = (_BYTE *)(*(_QWORD *)(v3 + v4) + *a1);
  result = swift_beginAccess(v10, v12, 1, 0);
  *v10 = 7;
  return result;
}

uint64_t sub_100023480()
{
  return sub_100022B80(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

uint64_t sub_10002348C(int a1)
{
  return sub_100022BEC(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

void (*sub_100023498(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100023524;
}

void sub_100023524(uint64_t *a1, char a2)
{
  sub_100022D38(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

BOOL sub_100023530()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

uint64_t sub_100023544()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

float sub_100023568()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

uint64_t sub_10002357C(float a1)
{
  return sub_100023724(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds, a1);
}

void (*sub_1000235A0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_100023630;
}

void sub_100023630(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

BOOL sub_10002364C()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

uint64_t sub_100023660()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

float sub_100023684()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

float sub_100023698(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  float result;
  _BYTE v5[24];

  v3 = *(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess(v3, v5, 0, 0);
  result = *(float *)v3;
  if (*(_BYTE *)(v3 + 4))
    return 0.0;
  return result;
}

uint64_t sub_100023700(float a1)
{
  return sub_100023724(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds, a1);
}

uint64_t sub_100023724(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4, float a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _BYTE v19[24];

  v9 = v5;
  v11 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v5 + v11);
    v13 = a2(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    a3(v15);
    v16 = *(_QWORD *)(v9 + v11);
    *(_QWORD *)(v9 + v11) = v14;
    swift_release(v16);
  }
  v17 = *(_QWORD *)(v9 + v11) + *a4;
  result = swift_beginAccess(v17, v19, 1, 0);
  *(float *)v17 = a5;
  *(_BYTE *)(v17 + 4) = 0;
  return result;
}

void (*sub_1000237EC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_10002387C;
}

void sub_10002387C(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

void sub_100023898(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  int v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *a1;
  v10 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v13 = *(int *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 72);
    v15 = *(_QWORD *)(v14 + v13);
    v16 = a3(0);
    v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v18 = swift_retain(v15);
    a4(v18);
    v19 = *(_QWORD *)(v14 + v13);
    *(_QWORD *)(v14 + v13) = v17;
    swift_release(v19);
  }
LABEL_4:
  v20 = *(_QWORD *)(*(_QWORD *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess(v20, v12, 1, 0);
  *(_DWORD *)v20 = v10;
  *(_BYTE *)(v20 + 4) = 0;
  free((void *)v9);
}

BOOL sub_100023984()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

uint64_t sub_100023998()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

uint64_t sub_1000239BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v6[24];

  v1 = (uint64_t *)(*(_QWORD *)(v0
                             + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0)
                                      + 20))
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess(v1, v6, 0, 0);
  v2 = *v1;
  v3 = v1[1];
  if (v3 >> 60 == 15)
    v4 = 0;
  else
    v4 = *v1;
  sub_10005F298(v2, v3);
  return v4;
}

uint64_t sub_100023A30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE v16[24];

  v3 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_100043C2C(v10);
    v11 = *(_QWORD *)(v3 + v6);
    *(_QWORD *)(v3 + v6) = v9;
    swift_release(v11);
  }
  v12 = (uint64_t *)(*(_QWORD *)(v3 + v6)
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess(v12, v16, 1, 0);
  v13 = *v12;
  v14 = v12[1];
  *v12 = a1;
  v12[1] = a2;
  return sub_10005F2AC(v13, v14);
}

void (*sub_100023AEC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  v7 = v5[1];
  if (v7 >> 60 == 15)
    v8 = 0;
  else
    v8 = *v5;
  v9 = 0xC000000000000000;
  if (v7 >> 60 != 15)
    v9 = v5[1];
  v3[9] = v8;
  v3[10] = v9;
  sub_10005F298(v6, v7);
  return sub_100023B84;
}

void sub_100023B84(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(int *)(*a1 + 96);
  v5 = *(_QWORD *)(*a1 + 80);
  v6 = *(_QWORD *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    sub_100017EF8(*(_QWORD *)(*a1 + 72), v5);
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v6 + v4)) & 1) == 0)
    {
      v7 = *(int *)(v2 + 96);
      v8 = *(_QWORD *)(v2 + 88);
      v9 = *(_QWORD *)(v8 + v7);
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
      v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      v12 = swift_retain(v9);
      sub_100043C2C(v12);
      v13 = *(_QWORD *)(v8 + v7);
      *(_QWORD *)(v8 + v7) = v11;
      swift_release(v13);
    }
    v14 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96))
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
    swift_beginAccess(v14, v2 + 24, 1, 0);
    v15 = *v14;
    v16 = v14[1];
    *v14 = v3;
    v14[1] = v5;
    sub_10005F2AC(v15, v16);
    sub_100017F3C(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v6 + v4)) & 1) == 0)
    {
      v17 = *(int *)(v2 + 96);
      v18 = *(_QWORD *)(v2 + 88);
      v19 = *(_QWORD *)(v18 + v17);
      v20 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
      v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      v22 = swift_retain(v19);
      sub_100043C2C(v22);
      v23 = *(_QWORD *)(v18 + v17);
      *(_QWORD *)(v18 + v17) = v21;
      swift_release(v23);
    }
    v24 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96))
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
    swift_beginAccess(v24, v2 + 48, 1, 0);
    v25 = *v24;
    v26 = v24[1];
    *v24 = v3;
    v24[1] = v5;
    sub_10005F2AC(v25, v26);
  }
  free((void *)v2);
}

BOOL sub_100023CF8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata;
  swift_beginAccess(v1, v3, 0, 0);
  return *(_QWORD *)(v1 + 8) >> 60 != 15;
}

uint64_t sub_100023D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_100043C2C(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (uint64_t *)(*(_QWORD *)(v1 + v2)
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess(v8, v12, 1, 0);
  v9 = *v8;
  v10 = v8[1];
  *(_OWORD *)v8 = xmmword_1002C40A0;
  return sub_10005F2AC(v9, v10);
}

uint64_t sub_100023E0C()
{
  return sub_100022B80(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

uint64_t sub_100023E18(int a1)
{
  return sub_100022BEC(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

void (*sub_100023E24(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100023EB0;
}

void sub_100023EB0(uint64_t *a1, char a2)
{
  sub_100022D38(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

BOOL sub_100023EBC()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

uint64_t sub_100023ED0()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

uint64_t sub_100023EF4()
{
  return sub_1000293F8(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
}

uint64_t sub_100023F08(uint64_t a1)
{
  return sub_100029478(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
}

void (*sub_100023F2C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_100023FB4;
}

void sub_100023FB4(uint64_t *a1, char a2)
{
  sub_1000295E4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_100043C2C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
}

uint64_t sub_100023FD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &qword_100387530, &qword_100387538, (uint64_t)sub_100043A78, a1);
}

uint64_t sub_100023FF4@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v10 = *(int *)(a1(0) + 20);
  if (*a2 != -1)
    swift_once(a2, a4);
  v11 = *a3;
  *(_QWORD *)(a5 + v10) = *a3;
  return swift_retain(v11);
}

uint64_t sub_100024064()
{
  return sub_100036594(&qword_100387530, &qword_100387538, (uint64_t)sub_100043A78);
}

uint64_t sub_100024080@<X0>(uint64_t a1@<X8>)
{
  return sub_10002A3E4(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, a1);
}

uint64_t sub_100024094(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A780);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100046ABC(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A780);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A780);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100024214(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A780);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A780);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_100015704((uint64_t)v5, &qword_10036A780);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  return sub_100024388;
}

void sub_100024388(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100024094, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

BOOL sub_10002439C()
{
  return sub_10001CFF4(&qword_10036A780, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_1000243C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A780);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100046ABC(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A780);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000244F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036A788);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A788);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_1003874E0 != -1)
    swift_once(&qword_1003874E0, sub_10003CECC);
  v9 = qword_1003874E8;
  *(_QWORD *)(a1 + v8) = qword_1003874E8;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_10036A788);
}

uint64_t sub_100024630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A788);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100046ABC(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A788);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A788);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000247B0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A788);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A788);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_1003874E0 != -1)
      swift_once(&qword_1003874E0, sub_10003CECC);
    v12 = qword_1003874E8;
    *(_QWORD *)&v9[v11] = qword_1003874E8;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_10036A788);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  }
  return sub_100024920;
}

void sub_100024920(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100024630, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

BOOL sub_100024934()
{
  return sub_10001CFF4(&qword_10036A788, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t sub_100024958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A788);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100046ABC(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A788);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100024A88()
{
  return sub_100024B7C(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

uint64_t sub_100024A94(uint64_t a1)
{
  return sub_100024BE8(a1, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

void (*sub_100024AA0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_QWORD *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0;
  v3[9] = v6;
  return sub_100024B2C;
}

void sub_100024B2C(uint64_t *a1, char a2)
{
  sub_100024D34(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

BOOL sub_100024B38()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

uint64_t sub_100024B4C()
{
  return sub_100024EAC(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100046ABC, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

uint64_t sub_100024B70()
{
  return sub_100024B7C(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t sub_100024B7C(_QWORD *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE v4[24];

  v2 = (_BYTE *)(*(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
               + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  if (v2[8])
    return 0;
  else
    return *(_QWORD *)v2;
}

uint64_t sub_100024BDC(uint64_t a1)
{
  return sub_100024BE8(a1, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t sub_100024BE8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[24];

  v4 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_100046ABC(v10);
    v11 = *(_QWORD *)(v4 + v6);
    *(_QWORD *)(v4 + v6) = v9;
    swift_release(v11);
  }
  v12 = *(_QWORD *)(v4 + v6) + *a2;
  result = swift_beginAccess(v12, v14, 1, 0);
  *(_QWORD *)v12 = a1;
  *(_BYTE *)(v12 + 8) = 0;
  return result;
}

void (*sub_100024C9C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_QWORD *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0;
  v3[9] = v6;
  return sub_100024D28;
}

void sub_100024D28(uint64_t *a1, char a2)
{
  sub_100024D34(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

void sub_100024D34(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v9 = *(int *)(v5 + 88);
    v10 = *(_QWORD *)(v5 + 80);
    v11 = *(_QWORD *)(v10 + v9);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100046ABC(v14);
    v15 = *(_QWORD *)(v10 + v9);
    *(_QWORD *)(v10 + v9) = v13;
    swift_release(v15);
  }
LABEL_4:
  v16 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess(v16, v8, 1, 0);
  *(_QWORD *)v16 = v6;
  *(_BYTE *)(v16 + 8) = 0;
  free((void *)v5);
}

BOOL sub_100024E14()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

BOOL sub_100024E28(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v3 = *(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess(v3, v5, 0, 0);
  return (*(_BYTE *)(v3 + 8) & 1) == 0;
}

uint64_t sub_100024E88()
{
  return sub_100024EAC(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100046ABC, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t sub_100024EAC(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];

  v8 = v4;
  v9 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v4 + v9);
    v11 = a2(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    a3(v13);
    v14 = *(_QWORD *)(v8 + v9);
    *(_QWORD *)(v8 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v8 + v9) + *a4;
  result = swift_beginAccess(v15, v17, 1, 0);
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  return result;
}

uint64_t sub_100024F6C()
{
  return sub_100024B7C(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

uint64_t sub_100024F78(uint64_t a1)
{
  return sub_100024BE8(a1, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

void (*sub_100024F84(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_QWORD *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0;
  v3[9] = v6;
  return sub_100025010;
}

void sub_100025010(uint64_t *a1, char a2)
{
  sub_100024D34(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

BOOL sub_10002501C()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

uint64_t sub_100025030()
{
  return sub_100024EAC(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100046ABC, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

uint64_t sub_100025054@<X0>(uint64_t a1@<X8>)
{
  return sub_1000254D8(&qword_10036A760, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t sub_100025070(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A760);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100046ABC(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A760);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A760);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000251F0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A760);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A760);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A760);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  }
  return sub_100025354;
}

void sub_100025354(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100025070, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

BOOL sub_100025368()
{
  return sub_10001CFF4(&qword_10036A760, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10002538C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A760);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100046ABC(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A760);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000254BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000254D8(&qword_10036A768, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t sub_1000254D8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[24];

  v9 = sub_1000039AC(a1);
  __chkstk_darwin(v9);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20)) + *a2;
  swift_beginAccess(v12, v18, 0, 0);
  sub_10000E660(v12, (uint64_t)v11, a1);
  v13 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v11, 1, v13) != 1)
    return sub_100003E08((uint64_t)v11, a4, a3);
  UnknownStorage.init()();
  v14 = a4 + v13[5];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = a4 + v13[6];
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  *(_BYTE *)(a4 + v13[7]) = 2;
  return sub_100015704((uint64_t)v11, a1);
}

uint64_t sub_100025608(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A768);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100046ABC(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A768);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A768);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100025788(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A768);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A768);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A768);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  return sub_1000258EC;
}

void sub_1000258EC(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100025608, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL sub_100025900()
{
  return sub_10001CFF4(&qword_10036A768, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100025924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A768);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100046ABC(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A768);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100025A54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v14[24];

  v3 = sub_1000039AC(&qword_10036A790);
  __chkstk_darwin(v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess(v6, v14, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A790);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  *(_BYTE *)(a1 + v7[9]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036A790);
}

uint64_t sub_100025BA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A790);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100046ABC(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A790);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A790);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100025D28(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A790);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A790);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v9[v6[9]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A790);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  }
  return sub_100025EAC;
}

void sub_100025EAC(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100025BA8, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

BOOL sub_100025EC0()
{
  return sub_10001CFF4(&qword_10036A790, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100025EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A790);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100046ABC(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A790);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100026014@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036A798);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A798);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_100387530 != -1)
    swift_once(&qword_100387530, sub_100043A78);
  v9 = qword_100387538;
  *(_QWORD *)(a1 + v8) = qword_100387538;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_10036A798);
}

uint64_t sub_100026154(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A798);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100046ABC(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A798);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A798);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000262D4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A798);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A798);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_100387530 != -1)
      swift_once(&qword_100387530, sub_100043A78);
    v12 = qword_100387538;
    *(_QWORD *)&v9[v11] = qword_100387538;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_10036A798);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  }
  return sub_100026444;
}

void sub_100026444(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100026154, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

BOOL sub_100026458()
{
  return sub_10001CFF4(&qword_10036A798, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_10002647C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A798);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100046ABC(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A798);
  swift_endAccess(v16);
  return swift_release(v11);
}

float sub_1000265AC()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

uint64_t sub_1000265C0(float a1)
{
  return sub_100023724(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100046ABC, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz, a1);
}

void (*sub_1000265E4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_100026674;
}

void sub_100026674(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100046ABC, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

BOOL sub_100026690()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

uint64_t sub_1000266A4()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100046ABC, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

uint64_t sub_1000266C8()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

uint64_t sub_1000266DC(char a1)
{
  return sub_100023104(a1, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100046ABC, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

void (*sub_100026700(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_100026788;
}

void sub_100026788(uint64_t *a1, char a2)
{
  sub_100023268(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100046ABC, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

BOOL sub_1000267A4()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

uint64_t sub_1000267B8()
{
  return sub_100026F04(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator, 5);
}

uint64_t sub_1000267C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000254D8(&qword_10036A768, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t sub_1000267E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A768);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100046ABC(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A768);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A768);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100026964(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A768);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A768);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A768);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  return sub_100026AC8;
}

void sub_100026AC8(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000267E4, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL sub_100026ADC()
{
  return sub_10001CFF4(&qword_10036A768, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100026B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A768);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100046ABC(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A768);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100026C30()
{
  uint64_t v0;
  _BYTE *v1;
  _BYTE v3[24];

  v1 = (_BYTE *)(*(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
               + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess(v1, v3, 0, 0);
  return *v1 & 1;
}

uint64_t sub_100026C88(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE *v11;
  uint64_t result;
  _BYTE v13[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_100046ABC(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = a1 & 1;
  v11 = (_BYTE *)(*(_QWORD *)(v2 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  result = swift_beginAccess(v11, v13, 1, 0);
  *v11 = v10;
  return result;
}

void (*sub_100026D3C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_100026DC0;
}

void sub_100026DC0(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100046ABC(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80))
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_100026E98()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess(v1, v3, 0, 0);
  return *v1 != 2;
}

uint64_t sub_100026EF4()
{
  return sub_100026F04(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2);
}

uint64_t sub_100026F04(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  _BYTE v14[24];

  v5 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_100046ABC(v10);
    v11 = *(_QWORD *)(v5 + v6);
    *(_QWORD *)(v5 + v6) = v9;
    swift_release(v11);
  }
  v12 = (_BYTE *)(*(_QWORD *)(v5 + v6) + *a1);
  result = swift_beginAccess(v12, v14, 1, 0);
  *v12 = a2;
  return result;
}

uint64_t sub_100026FB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036A7A0);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A7A0);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036A7A0);
}

uint64_t sub_1000270F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A7A0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100046ABC(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A7A0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A7A0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100027270(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A7A0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A7A0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A7A0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  }
  return sub_1000273DC;
}

void sub_1000273DC(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000270F0, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

BOOL sub_1000273F0()
{
  return sub_10001CFF4(&qword_10036A7A0, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100027414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A7A0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100046ABC(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A7A0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100027544@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &qword_100387548, &qword_100387550, (uint64_t)sub_100046890, a1);
}

uint64_t sub_100027568()
{
  return sub_100036594(&qword_100387548, &qword_100387550, (uint64_t)sub_100046890);
}

float sub_100027584()
{
  return sub_100027590(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float sub_100027590(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 20);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t sub_1000275C8(float a1)
{
  return sub_1000275D4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t sub_1000275D4(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 20);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10002760C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 20);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100027664()
{
  return sub_100019258(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100027670()
{
  return sub_100019294(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float sub_10002767C()
{
  return sub_100027688(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float sub_100027688(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 24);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t sub_1000276C0(float a1)
{
  return sub_1000276CC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t sub_1000276CC(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 24);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_100027704(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10002775C()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

BOOL sub_100027768(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 24) + 4) & 1) == 0;
}

uint64_t sub_100027798()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000277A4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 24);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

float sub_1000277D4()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000277E0(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t (*sub_1000277EC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100027844()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100027850()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float sub_10002785C()
{
  return sub_10002CC70(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100027868(float a1)
{
  return sub_10002CCB4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t (*sub_100027874(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000278CC()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

BOOL sub_1000278D8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 32) + 4) & 1) == 0;
}

uint64_t sub_100027908()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100027914(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 32);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_100027944()
{
  return sub_10001B080(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100027950(char a1)
{
  return sub_10001B0B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t (*sub_10002795C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000279A4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 36)) != 2;
}

uint64_t sub_1000279CC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_1000279F0@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  *(_BYTE *)(a1 + result[9]) = 2;
  return result;
}

double sub_100027A68()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027A74(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*sub_100027A80(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100027AD8()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027AE4()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double sub_100027AF0()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027AFC(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*sub_100027B08(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100027B60()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027B6C()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double sub_100027B78()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double sub_100027B84(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 28);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t sub_100027BBC(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t sub_100027BC8(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 28);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_100027C00(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100027C58()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

BOOL sub_100027C64(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 28) + 8) & 1) == 0;
}

uint64_t sub_100027C94()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027CA0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 28);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double sub_100027CD0()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double sub_100027CDC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 32);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t sub_100027D14(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t sub_100027D20(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 32);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_100027D58(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100027DB0()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

BOOL sub_100027DBC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 32) + 8) & 1) == 0;
}

uint64_t sub_100027DEC()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027DF8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 32);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double sub_100027E28()
{
  return sub_10002A164(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027E34(double a1)
{
  return sub_10002A1A8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*sub_100027E40(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100027E98()
{
  return sub_10002A244(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100027EA4()
{
  return sub_10002A280(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

int *sub_100027EB0@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + result[9];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_100027F2C()
{
  return sub_100027F38(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100027F38(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 20));
  if (v2[8])
    return 0;
  else
    return *(_QWORD *)v2;
}

uint64_t sub_100027F6C(uint64_t a1)
{
  return sub_100027F78(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100027F78(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 20);
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_100027FAC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100028000()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_10002800C()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

float sub_100028018()
{
  return sub_100027688(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100028024(float a1)
{
  return sub_1000276CC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*sub_100028030(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100028088()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100028094()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

float sub_1000280A0()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_1000280AC(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*sub_1000280B8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100028110()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_10002811C()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

double sub_100028128()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100028134(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*sub_100028140(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100028198()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_1000281A4()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

float sub_1000281B0()
{
  return sub_100033534(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_1000281BC(float a1)
{
  return sub_100033578(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*sub_1000281C8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 36);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100028220()
{
  return sub_10002822C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

BOOL sub_10002822C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 36) + 4) & 1) == 0;
}

uint64_t sub_10002825C()
{
  return sub_100028268(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100028268(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 36);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

int *sub_100028298@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + result[9];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_100028314()
{
  return sub_100027F38(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100028320(uint64_t a1)
{
  return sub_100027F78(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t (*sub_10002832C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100028380()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_10002838C()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100028398@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_1000039AC(&qword_10036A7A8);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10036A7A8);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  *(_BYTE *)(a1 + v7[9]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036A7A8);
}

uint64_t sub_1000284C4(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10036A7A8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

void (*sub_1000284E0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7A8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7A8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v9[v6[9]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036A7A8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  }
  return sub_10002864C;
}

void sub_10002864C(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A7A8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

BOOL sub_100028660()
{
  return sub_1000198C8(&qword_10036A7A8, type metadata accessor for CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_10002867C()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10036A7A8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100028698@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_1000039AC(&qword_10036A7B0);
  __chkstk_darwin(v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10036A7B0);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[9];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A7B0);
}

uint64_t sub_1000287C8(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10036A7B0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

void (*sub_1000287E4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7B0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7B0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = &v9[v6[9]];
    *(_QWORD *)v15 = 0;
    v15[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7B0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  }
  return sub_100028954;
}

void sub_100028954(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A7B0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

BOOL sub_100028968()
{
  return sub_10002D31C(&qword_10036A7B0, type metadata accessor for CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100028984()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10036A7B0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_1000289A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_1000039AC(&qword_10036A7B8);
  __chkstk_darwin(v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  sub_10000E660(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_10036A7B8);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[9];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A7B8);
}

uint64_t sub_100028AD0(uint64_t a1)
{
  return sub_100034398(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10036A7B8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

void (*sub_100028AEC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7B8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7B8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = &v9[v6[9]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7B8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  }
  return sub_100028C5C;
}

void sub_100028C5C(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A7B8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

BOOL sub_100028C70()
{
  return sub_10002E3A0(&qword_10036A7B8, type metadata accessor for CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100028C8C()
{
  return sub_10002E478(type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10036A7B8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100028CA8@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  v3 = a1 + v2[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + v2[6];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1 + v2[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1 + v2[8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t sub_100028D70@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t sub_100028D7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t sub_100028D88@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t sub_100028D94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v3 = sub_1000039AC(&qword_10036A7C0);
  __chkstk_darwin(v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess(v6, v17, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A7C0);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a1 + v7[7];
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = a1 + v7[8];
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return sub_100015704((uint64_t)v5, &qword_10036A7C0);
}

uint64_t sub_100028F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A7C0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10004C2A4(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A7C0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A7C0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000290B0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A7C0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A7C0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = &v9[v6[7]];
    v15 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    v16 = &v9[v6[8]];
    v17 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
    sub_100015704((uint64_t)v5, &qword_10036A7C0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  }
  return sub_10002927C;
}

void sub_10002927C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100028F30, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

BOOL sub_100029290()
{
  return sub_10001CFF4(&qword_10036A7C0, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_1000292B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A7C0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10004C2A4(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A7C0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000293E4()
{
  return sub_1000293F8(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
}

uint64_t sub_1000293F8(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE v5[24];

  v3 = (_QWORD *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0, 0);
  return swift_bridgeObjectRetain(*v3);
}

uint64_t sub_100029454(uint64_t a1)
{
  return sub_100029478(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_10004C2A4, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
}

uint64_t sub_100029478(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _BYTE v20[24];

  v9 = v5;
  v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v5 + v11);
    v13 = a3(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    a4(v15);
    v16 = *(_QWORD *)(v9 + v11);
    *(_QWORD *)(v9 + v11) = v14;
    swift_release(v16);
  }
  v17 = (uint64_t *)(*(_QWORD *)(v9 + v11) + *a5);
  swift_beginAccess(v17, v20, 1, 0);
  v18 = *v17;
  *v17 = a1;
  return swift_bridgeObjectRelease(v18);
}

void (*sub_100029540(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_1000295C8;
}

void sub_1000295C8(uint64_t *a1, char a2)
{
  sub_1000295E4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_10004C2A4, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
}

void sub_1000295E4(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 72);
  v10 = *(int *)(*a1 + 88);
  v11 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(*a1 + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v11 + v10)) & 1) == 0)
    {
      v12 = *(int *)(v8 + 88);
      v13 = *(_QWORD *)(v8 + 80);
      v14 = *(_QWORD *)(v13 + v12);
      v15 = a3(0);
      v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
      v17 = swift_retain(v14);
      a4(v17);
      v18 = *(_QWORD *)(v13 + v12);
      *(_QWORD *)(v13 + v12) = v16;
      swift_release(v18);
    }
    v19 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + *(int *)(v8 + 88)) + *a5);
    swift_beginAccess(v19, v8 + 24, 1, 0);
    v20 = *v19;
    *v19 = v9;
    swift_bridgeObjectRelease(v20);
    v21 = *(_QWORD *)(v8 + 72);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v11 + v10)) & 1) == 0)
    {
      v22 = *(int *)(v8 + 88);
      v23 = *(_QWORD *)(v8 + 80);
      v24 = *(_QWORD *)(v23 + v22);
      v25 = a3(0);
      v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
      v27 = swift_retain(v24);
      a4(v27);
      v28 = *(_QWORD *)(v23 + v22);
      *(_QWORD *)(v23 + v22) = v26;
      swift_release(v28);
    }
    v29 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + *(int *)(v8 + 88)) + *a5);
    swift_beginAccess(v29, v8 + 48, 1, 0);
    v21 = *v29;
    *v29 = v9;
  }
  swift_bridgeObjectRelease(v21);
  free((void *)v8);
}

uint64_t sub_100029754@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &qword_100387580, &qword_100387588, (uint64_t)sub_10004C228, a1);
}

uint64_t sub_100029778()
{
  return sub_100036594(&qword_100387580, &qword_100387588, (uint64_t)sub_10004C228);
}

double sub_100029794()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_1000297A0(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*sub_1000297AC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100029804()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100029810()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

double sub_10002981C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100029828(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*sub_100029834(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002988C()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100029898()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

double sub_1000298A4()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_1000298B0(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*sub_1000298BC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100029914()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100029920()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

int *sub_10002992C@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB04(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t sub_100029938()
{
  return sub_10002CA64(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029944(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100029970(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000299BC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 20)) != 13;
}

uint64_t sub_1000299E4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 13;
  return result;
}

double sub_100029A08()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029A14(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*sub_100029A20(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100029A78()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029A84()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

double sub_100029A90()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029A9C(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*sub_100029AA8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100029B00()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029B0C()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

double sub_100029B18()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029B24(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*sub_100029B30(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100029B88()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029B94()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100029BA0()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36));
  if (v1 == 3)
    return 0;
  else
    return v1;
}

uint64_t sub_100029BC8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_100029BF4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100029C40()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36)) != 3;
}

uint64_t sub_100029C68()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 3;
  return result;
}

int *sub_100029C8C@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(_BYTE *)(a1 + result[5]) = 13;
  v3 = a1 + result[6];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[7];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[8];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_BYTE *)(a1 + result[9]) = 3;
  return result;
}

uint64_t sub_100029D00()
{
  return 13;
}

uint64_t sub_100029D08()
{
  return 3;
}

double sub_100029D10()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_100029D1C(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, a1);
}

uint64_t (*sub_100029D28(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100029D80()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_100029D8C()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_100029D98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1000039AC(&qword_10036A7C8);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10036A7C8);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A7C8);
}

uint64_t sub_100029EA8(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, &qword_10036A7C8, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

void (*sub_100029EC4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7C8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7C8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7C8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  }
  return sub_10002A014;
}

void sub_10002A014(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A7C8, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

BOOL sub_10002A028()
{
  return sub_1000198C8(&qword_10036A7C8, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_10002A044()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, &qword_10036A7C8, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_10002A060@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  v3 = a1 + *(int *)(v2 + 20);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + *(int *)(v2 + 24);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t sub_10002A0C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

double sub_10002A0D0()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10002A0DC(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, a1);
}

uint64_t (*sub_10002A0E8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002A140()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10002A14C()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

double sub_10002A158()
{
  return sub_10002A164(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

double sub_10002A164(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 36);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t sub_10002A19C(double a1)
{
  return sub_10002A1A8(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, a1);
}

uint64_t sub_10002A1A8(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 36);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_10002A1E0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002A238()
{
  return sub_10002A244(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

BOOL sub_10002A244(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 36) + 8) & 1) == 0;
}

uint64_t sub_10002A274()
{
  return sub_10002A280(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10002A280(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 36);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_10002A2B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 28);
  v4 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10002A2F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 28);
  v4 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_10002A340())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10002A368@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char *v4;
  char *v5;

  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  result = UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(v2 + 32);
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = (char *)a1 + *(int *)(v2 + 36);
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  return result;
}

uint64_t sub_10002A3D0@<X0>(uint64_t a1@<X8>)
{
  return sub_10002A3E4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, a1);
}

uint64_t sub_10002A3E4@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v7 = sub_1000039AC(&qword_10036A780);
  __chkstk_darwin(v7);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *(_QWORD *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess(v10, v17, 0, 0);
  sub_10000E660(v10, (uint64_t)v9, &qword_10036A780);
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1)
    return sub_100003E08((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  UnknownStorage.init()();
  v12 = a3 + *(int *)(v11 + 20);
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a3 + *(int *)(v11 + 24);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return sub_100015704((uint64_t)v9, &qword_10036A780);
}

uint64_t sub_10002A534(uint64_t a1)
{
  return sub_10002BF18(a1, &qword_10036A780, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
}

void (*sub_10002A550(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A780);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A780);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_100015704((uint64_t)v5, &qword_10036A780);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  return sub_10002A6C4;
}

void sub_10002A6C4(uint64_t a1, char a2)
{
  sub_10002A6E0(a1, a2, &qword_10036A780, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
}

void sub_10002A6E0(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD), _QWORD *a5)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v8 = *(void **)a1;
  v9 = *(void **)(*(_QWORD *)a1 + 40);
  v10 = *(void **)(*(_QWORD *)a1 + 48);
  v11 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    sub_100003FEC((uint64_t)v10, (uint64_t)v9, a4);
    sub_10002BF18((uint64_t)v9, a3, a4, a5);
    sub_100004030((uint64_t)v10, a4);
  }
  else
  {
    sub_10002BF18((uint64_t)v10, a3, a4, a5);
  }
  free(v10);
  free(v9);
  free(v11);
  free(v8);
}

BOOL sub_10002A78C()
{
  return sub_10001CFF4(&qword_10036A780, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_10002A7B0()
{
  return sub_10002C264(&qword_10036A780, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
}

double sub_10002A7CC()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

uint64_t sub_10002A7E0(double a1)
{
  return sub_10002AABC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds, a1);
}

void (*sub_10002A7EC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10002A87C;
}

void sub_10002A87C(uint64_t *a1, char a2)
{
  sub_10002AC18(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

BOOL sub_10002A888()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

uint64_t sub_10002A89C()
{
  return sub_10002AD1C(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

uint64_t sub_10002A8A8()
{
  return sub_100023080(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

uint64_t sub_10002A8BC(char a1)
{
  return sub_10002B420(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

void (*sub_10002A8C8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002A950;
}

void sub_10002A950(uint64_t *a1, char a2)
{
  sub_10002B568(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

BOOL sub_10002A95C()
{
  return sub_100023364(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

uint64_t sub_10002A970()
{
  return sub_10002B6CC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource, 7);
}

uint64_t sub_10002A980()
{
  return sub_1000293F8(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
}

uint64_t sub_10002A994(uint64_t a1)
{
  return sub_10002BB00(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
}

void (*sub_10002A9A0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_10002AA28;
}

void sub_10002AA28(uint64_t *a1, char a2)
{
  sub_10002BC50(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
}

double sub_10002AA34()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

double sub_10002AA48(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  _BYTE v5[24];

  v3 = *(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess(v3, v5, 0, 0);
  result = *(double *)v3;
  if (*(_BYTE *)(v3 + 8))
    return 0.0;
  return result;
}

uint64_t sub_10002AAB0(double a1)
{
  return sub_10002AABC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds, a1);
}

uint64_t sub_10002AABC(_QWORD *a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[24];

  v4 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_10005F3D8(v10);
    swift_release(v7);
    v11 = *(_QWORD *)(v4 + v6);
    *(_QWORD *)(v4 + v6) = v9;
    swift_release(v11);
  }
  v12 = *(_QWORD *)(v4 + v6) + *a1;
  result = swift_beginAccess(v12, v14, 1, 0);
  *(double *)v12 = a2;
  *(_BYTE *)(v12 + 8) = 0;
  return result;
}

void (*sub_10002AB7C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10002AC0C;
}

void sub_10002AC0C(uint64_t *a1, char a2)
{
  sub_10002AC18(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

void sub_10002AC18(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v9 = *(int *)(v5 + 88);
    v10 = *(_QWORD *)(v5 + 80);
    v11 = *(_QWORD *)(v10 + v9);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005F3D8(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v10 + v9);
    *(_QWORD *)(v10 + v9) = v13;
    swift_release(v15);
  }
LABEL_4:
  v16 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess(v16, v8, 1, 0);
  *(_QWORD *)v16 = v6;
  *(_BYTE *)(v16 + 8) = 0;
  free((void *)v5);
}

BOOL sub_10002ACFC()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

uint64_t sub_10002AD10()
{
  return sub_10002AD1C(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

uint64_t sub_10002AD1C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v3 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10005F3D8(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v3 + v4);
    *(_QWORD *)(v3 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v3 + v4) + *a1;
  result = swift_beginAccess(v10, v12, 1, 0);
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return result;
}

double sub_10002ADD4()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

uint64_t sub_10002ADE8(double a1)
{
  return sub_10002AABC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb, a1);
}

void (*sub_10002ADF4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10002AE84;
}

void sub_10002AE84(uint64_t *a1, char a2)
{
  sub_10002AC18(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

BOOL sub_10002AE90()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

uint64_t sub_10002AEA4()
{
  return sub_10002AD1C(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

double sub_10002AEB0()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

uint64_t sub_10002AEC4(double a1)
{
  return sub_10002AABC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec, a1);
}

void (*sub_10002AED0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10002AF60;
}

void sub_10002AF60(uint64_t *a1, char a2)
{
  sub_10002AC18(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

BOOL sub_10002AF6C()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

uint64_t sub_10002AF80()
{
  return sub_10002AD1C(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

float sub_10002AF8C()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

uint64_t sub_10002AFA0(float a1)
{
  return sub_10002B088(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM, a1);
}

void (*sub_10002AFAC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_10002B03C;
}

void sub_10002B03C(uint64_t *a1, char a2)
{
  sub_10002B1E4(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

BOOL sub_10002B048()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

uint64_t sub_10002B05C()
{
  return sub_10002B2E8(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

float sub_10002B068()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

uint64_t sub_10002B07C(float a1)
{
  return sub_10002B088(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds, a1);
}

uint64_t sub_10002B088(_QWORD *a1, float a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[24];

  v4 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_10005F3D8(v10);
    swift_release(v7);
    v11 = *(_QWORD *)(v4 + v6);
    *(_QWORD *)(v4 + v6) = v9;
    swift_release(v11);
  }
  v12 = *(_QWORD *)(v4 + v6) + *a1;
  result = swift_beginAccess(v12, v14, 1, 0);
  *(float *)v12 = a2;
  *(_BYTE *)(v12 + 4) = 0;
  return result;
}

void (*sub_10002B148(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_10002B1D8;
}

void sub_10002B1D8(uint64_t *a1, char a2)
{
  sub_10002B1E4(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

void sub_10002B1E4(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v9 = *(int *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 72);
    v11 = *(_QWORD *)(v10 + v9);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005F3D8(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v10 + v9);
    *(_QWORD *)(v10 + v9) = v13;
    swift_release(v15);
  }
LABEL_4:
  v16 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess(v16, v8, 1, 0);
  *(_DWORD *)v16 = v6;
  *(_BYTE *)(v16 + 4) = 0;
  free((void *)v5);
}

BOOL sub_10002B2C8()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

uint64_t sub_10002B2DC()
{
  return sub_10002B2E8(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

uint64_t sub_10002B2E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v3 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10005F3D8(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v3 + v4);
    *(_QWORD *)(v3 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v3 + v4) + *a1;
  result = swift_beginAccess(v10, v12, 1, 0);
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_10002B3A0()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

uint64_t sub_10002B3B4(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _BYTE v5[24];

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0, 0);
  if (*v3 == 5)
    return 0;
  else
    return *v3;
}

uint64_t sub_10002B414(char a1)
{
  return sub_10002B420(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

uint64_t sub_10002B420(char a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  _BYTE v14[24];

  v4 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_10005F3D8(v10);
    swift_release(v7);
    v11 = *(_QWORD *)(v4 + v6);
    *(_QWORD *)(v4 + v6) = v9;
    swift_release(v11);
  }
  v12 = (_BYTE *)(*(_QWORD *)(v4 + v6) + *a2);
  result = swift_beginAccess(v12, v14, 1, 0);
  *v12 = a1;
  return result;
}

void (*sub_10002B4D4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002B55C;
}

void sub_10002B55C(uint64_t *a1, char a2)
{
  sub_10002B568(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

void sub_10002B568(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;

  v5 = *a1;
  v6 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v9 = *(int *)(v5 + 80);
    v10 = *(_QWORD *)(v5 + 72);
    v11 = *(_QWORD *)(v10 + v9);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005F3D8(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v10 + v9);
    *(_QWORD *)(v10 + v9) = v13;
    swift_release(v15);
  }
LABEL_4:
  v16 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 72) + *(int *)(v5 + 80)) + *a3);
  swift_beginAccess(v16, v8, 1, 0);
  *v16 = v6;
  free((void *)v5);
}

BOOL sub_10002B648()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

BOOL sub_10002B65C(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _BYTE v5[24];

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0, 0);
  return *v3 != 5;
}

uint64_t sub_10002B6BC()
{
  return sub_10002B6CC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1, 5);
}

uint64_t sub_10002B6CC(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  _BYTE v14[24];

  v5 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_10005F3D8(v10);
    swift_release(v7);
    v11 = *(_QWORD *)(v5 + v6);
    *(_QWORD *)(v5 + v6) = v9;
    swift_release(v11);
  }
  v12 = (_BYTE *)(*(_QWORD *)(v5 + v6) + *a1);
  result = swift_beginAccess(v12, v14, 1, 0);
  *v12 = a2;
  return result;
}

uint64_t sub_10002B780()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

uint64_t sub_10002B794(char a1)
{
  return sub_10002B420(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

void (*sub_10002B7A0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002B828;
}

void sub_10002B828(uint64_t *a1, char a2)
{
  sub_10002B568(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

BOOL sub_10002B834()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

uint64_t sub_10002B848()
{
  return sub_10002B6CC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1, 5);
}

uint64_t sub_10002B858()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

uint64_t sub_10002B86C(char a1)
{
  return sub_10002B420(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

void (*sub_10002B878(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002B900;
}

void sub_10002B900(uint64_t *a1, char a2)
{
  sub_10002B568(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

BOOL sub_10002B90C()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

uint64_t sub_10002B920()
{
  return sub_10002B6CC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1, 5);
}

uint64_t sub_10002B930()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

uint64_t sub_10002B944(char a1)
{
  return sub_10002B420(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

void (*sub_10002B950(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002B9D8;
}

void sub_10002B9D8(uint64_t *a1, char a2)
{
  sub_10002B568(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

BOOL sub_10002B9E4()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

uint64_t sub_10002B9F8()
{
  return sub_10002B6CC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1, 5);
}

uint64_t sub_10002BA08()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

uint64_t sub_10002BA1C(char a1)
{
  return sub_10002B420(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

void (*sub_10002BA28(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002BAB0;
}

void sub_10002BAB0(uint64_t *a1, char a2)
{
  sub_10002B568(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

BOOL sub_10002BABC()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

uint64_t sub_10002BAD0()
{
  return sub_10002B6CC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1, 5);
}

uint64_t sub_10002BAE0()
{
  return sub_1000293F8(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
}

uint64_t sub_10002BAF4(uint64_t a1)
{
  return sub_10002BB00(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
}

uint64_t sub_10002BB00(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _BYTE v15[24];

  v4 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_10005F3D8(v10);
    swift_release(v7);
    v11 = *(_QWORD *)(v4 + v6);
    *(_QWORD *)(v4 + v6) = v9;
    swift_release(v11);
  }
  v12 = (uint64_t *)(*(_QWORD *)(v4 + v6) + *a2);
  swift_beginAccess(v12, v15, 1, 0);
  v13 = *v12;
  *v12 = a1;
  return swift_bridgeObjectRelease(v13);
}

void (*sub_10002BBBC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_10002BC44;
}

void sub_10002BC44(uint64_t *a1, char a2)
{
  sub_10002BC50(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
}

void sub_10002BC50(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 72);
  v6 = *(int *)(*a1 + 88);
  v7 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(*a1 + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v7 + v6)) & 1) == 0)
    {
      v8 = *(int *)(v4 + 88);
      v9 = *(_QWORD *)(v4 + 80);
      v10 = *(_QWORD *)(v9 + v8);
      v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
      v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
      v13 = swift_retain(v10);
      sub_10005F3D8(v13);
      swift_release(v10);
      v14 = *(_QWORD *)(v9 + v8);
      *(_QWORD *)(v9 + v8) = v12;
      swift_release(v14);
    }
    v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess(v15, v4 + 24, 1, 0);
    v16 = *v15;
    *v15 = v5;
    swift_bridgeObjectRelease(v16);
    v17 = *(_QWORD *)(v4 + 72);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v7 + v6)) & 1) == 0)
    {
      v18 = *(int *)(v4 + 88);
      v19 = *(_QWORD *)(v4 + 80);
      v20 = *(_QWORD *)(v19 + v18);
      v21 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
      v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
      v23 = swift_retain(v20);
      sub_10005F3D8(v23);
      swift_release(v20);
      v24 = *(_QWORD *)(v19 + v18);
      *(_QWORD *)(v19 + v18) = v22;
      swift_release(v24);
    }
    v25 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess(v25, v4 + 48, 1, 0);
    v17 = *v25;
    *v25 = v5;
  }
  swift_bridgeObjectRelease(v17);
  free((void *)v4);
}

uint64_t sub_10002BDC0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036A7D0);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A7D0);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v8 = (char *)a1 + *(int *)(v7 + 32);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = (char *)a1 + *(int *)(v7 + 36);
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A7D0);
}

uint64_t sub_10002BEFC(uint64_t a1)
{
  return sub_10002BF18(a1, &qword_10036A7D0, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
}

uint64_t sub_10002BF18(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v27[24];

  v8 = v4;
  v10 = sub_1000039AC(a2);
  v11 = __chkstk_darwin(v10);
  v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v11);
  v15 = &v27[-v14 - 8];
  v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v16)) & 1) == 0)
  {
    v17 = *(_QWORD *)(v4 + v16);
    v18 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v20 = swift_retain(v17);
    sub_10005F3D8(v20);
    swift_release(v17);
    v21 = *(_QWORD *)(v8 + v16);
    *(_QWORD *)(v8 + v16) = v19;
    swift_release(v21);
  }
  v22 = *(_QWORD *)(v8 + v16);
  sub_100003E08(a1, (uint64_t)v15, a3);
  v23 = a3(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v15, 0, 1, v23);
  sub_10000E530((uint64_t)v15, (uint64_t)v13, a2);
  v24 = v22 + *a4;
  swift_beginAccess(v24, v27, 33, 0);
  swift_retain(v22);
  sub_10000E574((uint64_t)v13, v24, a2);
  swift_endAccess(v27);
  return swift_release(v22);
}

void (*sub_10002C09C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A7D0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A7D0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    v9[1] = &_swiftEmptyArrayStorage;
    v9[2] = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 32);
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = (char *)v9 + *(int *)(v6 + 36);
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7D0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  }
  return sub_10002C208;
}

void sub_10002C208(uint64_t a1, char a2)
{
  sub_10002A6E0(a1, a2, &qword_10036A7D0, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
}

BOOL sub_10002C224()
{
  return sub_10001CFF4(&qword_10036A7D0, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10002C248()
{
  return sub_10002C264(&qword_10036A7D0, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
}

uint64_t sub_10002C264(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v22[24];

  v7 = v3;
  v8 = sub_1000039AC(a1);
  __chkstk_darwin(v8);
  v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v3 + v11);
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    sub_10005F3D8(v15);
    swift_release(v12);
    v16 = *(_QWORD *)(v7 + v11);
    *(_QWORD *)(v7 + v11) = v14;
    swift_release(v16);
  }
  v17 = *(_QWORD *)(v7 + v11);
  v18 = a2(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
  v19 = v17 + *a3;
  swift_beginAccess(v19, v22, 33, 0);
  swift_retain(v17);
  sub_10000E574((uint64_t)v10, v19, a1);
  swift_endAccess(v22);
  return swift_release(v17);
}

uint64_t sub_10002C39C()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

uint64_t sub_10002C3B0(char a1)
{
  return sub_10002B420(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

void (*sub_10002C3BC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002C444;
}

void sub_10002C444(uint64_t *a1, char a2)
{
  sub_10002B568(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

BOOL sub_10002C450()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

uint64_t sub_10002C464()
{
  return sub_10002B6CC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5, 5);
}

uint64_t sub_10002C474()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

uint64_t sub_10002C488(char a1)
{
  return sub_10002B420(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

void (*sub_10002C494(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002C51C;
}

void sub_10002C51C(uint64_t *a1, char a2)
{
  sub_10002B568(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

BOOL sub_10002C528()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

uint64_t sub_10002C53C()
{
  return sub_10002B6CC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5, 5);
}

uint64_t sub_10002C54C()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

uint64_t sub_10002C560(char a1)
{
  return sub_10002B420(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

void (*sub_10002C56C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002C5F4;
}

void sub_10002C5F4(uint64_t *a1, char a2)
{
  sub_10002B568(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

BOOL sub_10002C600()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

uint64_t sub_10002C614()
{
  return sub_10002B6CC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5, 5);
}

uint64_t sub_10002C624()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

uint64_t sub_10002C638(char a1)
{
  return sub_10002B420(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

void (*sub_10002C644(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002C6CC;
}

void sub_10002C6CC(uint64_t *a1, char a2)
{
  sub_10002B568(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

BOOL sub_10002C6D8()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

uint64_t sub_10002C6EC()
{
  return sub_10002B6CC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5, 5);
}

uint64_t sub_10002C6FC()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

uint64_t sub_10002C710(char a1)
{
  return sub_10002B420(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

void (*sub_10002C71C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002C7A4;
}

void sub_10002C7A4(uint64_t *a1, char a2)
{
  sub_10002B568(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

BOOL sub_10002C7B0()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

uint64_t sub_10002C7C4()
{
  return sub_10002B6CC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, 5);
}

double sub_10002C7D4()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

uint64_t sub_10002C7E8(double a1)
{
  return sub_10002AABC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec, a1);
}

void (*sub_10002C7F4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10002C884;
}

void sub_10002C884(uint64_t *a1, char a2)
{
  sub_10002AC18(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

BOOL sub_10002C890()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

uint64_t sub_10002C8A4()
{
  return sub_10002AD1C(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

uint64_t sub_10002C8B0()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess(v1, v3, 0, 0);
  if (*v1 == 4)
    return 0;
  else
    return *v1;
}

uint64_t sub_10002C90C(char a1)
{
  return sub_10002B420(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
}

void (*sub_10002C918(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10002C9A0;
}

void sub_10002C9A0(uint64_t *a1, char a2)
{
  sub_10002B568(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
}

BOOL sub_10002C9AC()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess(v1, v3, 0, 0);
  return *v1 != 4;
}

uint64_t sub_10002CA08()
{
  return sub_10002B6CC(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4);
}

uint64_t sub_10002CA18@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &qword_1003875B8, &qword_1003875C0, (uint64_t)sub_10004EBD0, a1);
}

uint64_t sub_10002CA3C()
{
  return sub_100036594(&qword_1003875B8, &qword_1003875C0, (uint64_t)sub_10004EBD0);
}

uint64_t sub_10002CA58()
{
  return sub_10002CA64(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10002CA64(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 13)
    return 0;
  else
    return v2;
}

uint64_t sub_10002CA90(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10002CABC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10002CB08()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 20)) != 13;
}

uint64_t sub_10002CB30()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 13;
  return result;
}

double sub_10002CB54()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10002CB60(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t (*sub_10002CB6C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002CBC4()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10002CBD0()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float sub_10002CBDC()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10002CBE8(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t (*sub_10002CBF4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10002CC4C()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10002CC58()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float sub_10002CC64()
{
  return sub_10002CC70(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float sub_10002CC70(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 32);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t sub_10002CCA8(float a1)
{
  return sub_10002CCB4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t sub_10002CCB4(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 32);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10002CCEC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10002CD44()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10002CD50()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

int *sub_10002CD5C@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  *(_BYTE *)(a1 + result[5]) = 13;
  v3 = a1 + result[6];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

uint64_t sub_10002CDC4()
{
  return sub_100027F38(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002CDD0(uint64_t a1)
{
  return sub_100027F78(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t (*sub_10002CDDC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002CE30()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002CE3C()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002CE48()
{
  return sub_10002DF3C(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002CE54(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t (*sub_10002CE60(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10002CEB0()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002CEBC()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002CEC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  UnknownStorage.init()();
  result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v3 = a1 + *(int *)(result + 20);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + *(int *)(result + 24);
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  return result;
}

uint64_t sub_10002CF14()
{
  return sub_100019188(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002CF20(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t (*sub_10002CF2C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10002CF7C()
{
  return sub_100019258(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002CF88()
{
  return sub_100019294(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002CF94()
{
  return sub_10002CFA0(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002CFA0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 24));
  if (v2 == 5)
    return 0;
  else
    return v2;
}

uint64_t sub_10002CFCC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_10002CFF8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10002D044()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 24)) != 5;
}

uint64_t sub_10002D06C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t sub_10002D090@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036A7D8);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10036A7D8);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A7D8);
}

uint64_t sub_10002D190(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, &qword_10036A7D8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

void (*sub_10002D1AC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7D8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7D8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7D8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  }
  return sub_10002D2EC;
}

void sub_10002D2EC(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A7D8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

BOOL sub_10002D300()
{
  return sub_10002D31C(&qword_10036A7D8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

BOOL sub_10002D31C(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = sub_1000039AC(a1);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  sub_10000E660(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_100015704((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_10002D3D8()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, &qword_10036A7D8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10002D3F4(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 28);
  sub_100015704(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_10002D45C@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(a1 + v2[6]) = 5;
  v4 = a1 + v2[7];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t sub_10002D4CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, a1);
}

uint64_t sub_10002D4D8()
{
  return sub_100027F38(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D4E4(uint64_t a1)
{
  return sub_100027F78(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t (*sub_10002D4F0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002D544()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D550()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

double sub_10002D55C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D568(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*sub_10002D574(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002D5CC()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D5D8()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

double sub_10002D5E4()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D5F0(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*sub_10002D5FC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002D654()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D660()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

double sub_10002D66C()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D678(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*sub_10002D684(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002D6DC()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002D6E8()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

int *sub_10002D6F4@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

uint64_t sub_10002D760()
{
  return sub_100019188(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_10002D76C(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t (*sub_10002D778(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10002D7C8()
{
  return sub_100019258(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_10002D7D4()
{
  return sub_100019294(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_10002D7E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100030738(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, a1);
}

uint64_t sub_10002D7EC(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &qword_10036A7E0, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

void (*sub_10002D808(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7E0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7E0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v9[v6[6]] = 5;
    v12 = &v9[v6[7]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_100015704((uint64_t)v5, &qword_10036A7E0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  return sub_10002D970;
}

void sub_10002D970(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A7E0, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

BOOL sub_10002D984()
{
  return sub_1000198C8(&qword_10036A7E0, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002D9A0()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &qword_10036A7E0, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002D9BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_1000039AC(&qword_10036A7E8);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10036A7E8);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A7E8);
}

uint64_t sub_10002DADC(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &qword_10036A7E8, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

void (*sub_10002DAF8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7E8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7E8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7E8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  }
  return sub_10002DC58;
}

void sub_10002DC58(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A7E8, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

BOOL sub_10002DC6C()
{
  return sub_10002D31C(&qword_10036A7E8, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002DC88()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &qword_10036A7E8, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10002DCA4@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1 + v2[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_10002DD40@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, a1);
}

uint64_t sub_10002DD4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t sub_10002DD58()
{
  return sub_100027F38(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10002DD64(uint64_t a1)
{
  return sub_100027F78(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t (*sub_10002DD70(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002DDC4()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10002DDD0()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

double sub_10002DDDC()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10002DDE8(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, a1);
}

uint64_t (*sub_10002DDF4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002DE4C()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10002DE58()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10002DE64@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  UnknownStorage.init()();
  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v3 = a1 + *(int *)(result + 20);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + *(int *)(result + 24);
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  return result;
}

uint64_t sub_10002DEB0()
{
  return sub_100019188(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002DEBC(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t (*sub_10002DEC8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10002DF18()
{
  return sub_100019258(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002DF24()
{
  return sub_100019294(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002DF30()
{
  return sub_10002DF3C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002DF3C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 24));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t sub_10002DF70(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002DF7C(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 24);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10002DFB0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10002E000()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002E00C()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002E018()
{
  return sub_10002E024(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10002E024(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 28));
  if (v2 == 6)
    return 0;
  else
    return v2;
}

uint64_t sub_10002E050(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10002E07C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10002E0C8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 28)) != 6;
}

uint64_t sub_10002E0F0()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 6;
  return result;
}

uint64_t sub_10002E114@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036A7F0);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  sub_10000E660(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_10036A7F0);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A7F0);
}

uint64_t sub_10002E214(uint64_t a1)
{
  return sub_100034398(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, &qword_10036A7F0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

void (*sub_10002E230(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7F0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7F0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7F0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  return sub_10002E370;
}

void sub_10002E370(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A7F0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

BOOL sub_10002E384()
{
  return sub_10002E3A0(&qword_10036A7F0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

BOOL sub_10002E3A0(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = sub_1000039AC(a1);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  sub_10000E660(v3 + *(int *)(v10 + 32), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_100015704((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_10002E45C()
{
  return sub_10002E478(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, &qword_10036A7F0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10002E478(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 32);
  sub_100015704(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_10002E4E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036A7F0);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  sub_10000E660(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_10036A7F0);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A7F0);
}

uint64_t sub_10002E5E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
  sub_100015704(v3, &qword_10036A7F0);
  sub_100003E08(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*sub_10002E650(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7F0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7F0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7F0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  return sub_10002E370;
}

BOOL sub_10002E790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = sub_1000039AC(&qword_10036A7F0);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  sub_10000E660(v0 + *(int *)(v4 + 36), (uint64_t)v3, &qword_10036A7F0);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100015704((uint64_t)v3, &qword_10036A7F0);
  return v6;
}

uint64_t sub_10002E844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
  sub_100015704(v1, &qword_10036A7F0);
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_10002E89C@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  *(_BYTE *)(a1 + v2[7]) = 6;
  v5 = a1 + v2[8];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v8(v5, 1, 1, v6);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1 + v2[9], 1, 1, v6);
}

uint64_t sub_10002E958@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, a1);
}

uint64_t sub_10002E964()
{
  return sub_100027F38(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002E970(uint64_t a1)
{
  return sub_100027F78(a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t (*sub_10002E97C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002E9D0()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002E9DC()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

double sub_10002E9E8()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002E9F4(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t (*sub_10002EA00(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002EA58()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002EA64()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

double sub_10002EA70()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002EA7C(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t (*sub_10002EA88(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10002EAE0()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002EAEC()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

int *sub_10002EAF8@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB04(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

int *sub_10002EB04@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = (int *)a1(0);
  v5 = a2 + result[5];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + result[6];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + result[7];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_10002EB64()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  if (*(_BYTE *)(v1 + 20))
    return 0;
  else
    return *(unsigned int *)(v1 + 16);
}

uint64_t sub_10002EBB8(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10005475C(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 16, v12, 1, 0);
  *(_DWORD *)(v10 + 16) = a1;
  *(_BYTE *)(v10 + 20) = 0;
  return result;
}

void (*sub_10002EC60(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10002ECE0;
}

void sub_10002ECE0(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10005475C(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 16, v6, 1, 0);
  *(_DWORD *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 20) = 0;
  free((void *)v3);
}

BOOL sub_10002EDB4()
{
  return sub_10002EDC0(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

BOOL sub_10002EDC0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 16, v4, 0, 0);
  return (*(_BYTE *)(v2 + 20) & 1) == 0;
}

uint64_t sub_10002EE14()
{
  return sub_10002EE30(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass, (void (*)(uint64_t))sub_10005475C);
}

uint64_t sub_10002EE30(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[24];

  v6 = v3;
  v7 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v7)) & 1) == 0)
  {
    v8 = *(_QWORD *)(v3 + v7);
    v9 = a2(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v11 = swift_retain(v8);
    a3(v11);
    v12 = *(_QWORD *)(v6 + v7);
    *(_QWORD *)(v6 + v7) = v10;
    swift_release(v12);
  }
  v13 = *(_QWORD *)(v6 + v7);
  result = swift_beginAccess(v13 + 16, v15, 1, 0);
  *(_DWORD *)(v13 + 16) = 0;
  *(_BYTE *)(v13 + 20) = 1;
  return result;
}

uint64_t sub_10002EEE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];

  v3 = sub_1000039AC(&qword_10036A7E0);
  __chkstk_darwin(v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess(v6, v13, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A7E0);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(a1 + v7[6]) = 5;
  v9 = a1 + v7[7];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return sub_100015704((uint64_t)v5, &qword_10036A7E0);
}

uint64_t sub_10002F034(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A7E0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005475C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A7E0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A7E0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10002F1B4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A7E0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A7E0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v9[v6[6]] = 5;
    v12 = &v9[v6[7]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_100015704((uint64_t)v5, &qword_10036A7E0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  return sub_10002F334;
}

void sub_10002F334(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10002F034, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

BOOL sub_10002F348()
{
  return sub_10001CFF4(&qword_10036A7E0, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10002F36C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A7E0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10005475C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A7E0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10002F49C@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t sub_10002F4C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A7F8);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005475C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A7F8);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A7F8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10002F640(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A7F8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7F8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_10002F7A8;
}

void sub_10002F7A8(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10002F4C0, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL sub_10002F7BC()
{
  return sub_10001CFF4(&qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002F7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10005475C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A7F8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10002F910@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t sub_10002F934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A7F8);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005475C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A7F8);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A7F8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10002FAB4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A7F8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7F8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_10002FC1C;
}

void sub_10002FC1C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10002F934, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL sub_10002FC30()
{
  return sub_10001CFF4(&qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10002FC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10005475C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A7F8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10002FD84@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t sub_10002FDA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A7F8);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005475C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A7F8);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A7F8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10002FF28(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A7F8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7F8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_100030090;
}

void sub_100030090(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10002FDA8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL sub_1000300A4()
{
  return sub_10001CFF4(&qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_1000300C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10005475C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A7F8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000301F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t sub_10003021C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A7F8);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005475C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A7F8);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A7F8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10003039C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A7F8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7F8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_100030504;
}

void sub_100030504(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10003021C, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL sub_100030518()
{
  return sub_10001CFF4(&qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003053C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10005475C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A7F8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10003066C@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &qword_100387610, &qword_100387618, (uint64_t)sub_100054658, a1);
}

uint64_t sub_100030690()
{
  return sub_100036594(&qword_100387610, &qword_100387618, (uint64_t)sub_100054658);
}

uint64_t sub_1000306AC()
{
  return sub_100019188(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_1000306B8(int a1)
{
  return sub_1000191C8(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t (*sub_1000306C4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100030714()
{
  return sub_100019258(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_100030720()
{
  return sub_100019294(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_10003072C@<X0>(uint64_t a1@<X8>)
{
  return sub_100030738(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, a1);
}

uint64_t sub_100030738@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = sub_1000039AC(&qword_10036A7E0);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  sub_10000E660(v2 + *(int *)(v8 + 24), (uint64_t)v7, &qword_10036A7E0);
  v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return sub_100003E08((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  UnknownStorage.init()();
  v10 = a2 + v9[5];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a2 + v9[6]) = 5;
  v11 = a2 + v9[7];
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return sub_100015704((uint64_t)v7, &qword_10036A7E0);
}

uint64_t sub_10003086C(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10036A7E0, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100030888(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 24);
  sub_100015704(v8, a3);
  sub_100003E08(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*sub_100030900(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7E0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7E0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v9[v6[6]] = 5;
    v12 = &v9[v6[7]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_100015704((uint64_t)v5, &qword_10036A7E0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  return sub_10002D970;
}

BOOL sub_100030A68()
{
  return sub_1000198C8(&qword_10036A7E0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100030A84()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10036A7E0, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100030AA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10036A7F8);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A7F8);
}

uint64_t sub_100030BB0(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100030BCC(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 28);
  sub_100015704(v8, a3);
  sub_100003E08(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*sub_100030C44(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7F8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7F8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_100030D94;
}

void sub_100030D94(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL sub_100030DA8()
{
  return sub_10002D31C(&qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100030DC4()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100030DE0@<X0>(uint64_t a1@<X8>)
{
  return sub_10003426C(&qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t sub_100030DFC(uint64_t a1)
{
  return sub_100034398(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

void (*sub_100030E18(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7F8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7F8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_100030D94;
}

BOOL sub_100030F68()
{
  return sub_10002E3A0(&qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100030F84()
{
  return sub_10002E478(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100030FA0@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1 + v2[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v9(v6, 1, 1, v7);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(a1 + v2[8], 1, 1, v7);
}

uint64_t sub_10003106C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t sub_100031078@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  sub_10000E660(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_10036A7F8);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A7F8);
}

uint64_t sub_100031188(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, &qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

void (*sub_1000311A4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A7F8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A7F8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_100030D94;
}

BOOL sub_1000312F4()
{
  return sub_100031310(&qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL sub_100031310(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = sub_1000039AC(a1);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  sub_10000E660(v3 + *(int *)(v10 + 20), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_100015704((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000313CC()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, &qword_10036A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_1000313E8(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 20);
  sub_100015704(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_100031450()
{
  return sub_10002DF3C(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_10003145C(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t (*sub_100031468(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000314B8()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_1000314C4()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_1000314D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  v3 = a1 + *(int *)(v2 + 20);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + *(int *)(v2 + 24);
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

uint64_t sub_100031544@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[24];

  v3 = sub_1000039AC(&qword_10036A800);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess(v6, v15, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A800);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a1 + v7[7];
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return sub_100015704((uint64_t)v5, &qword_10036A800);
}

uint64_t sub_1000316B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A800);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100057A74(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A800);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A800);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100031834(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A800);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A800);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = &v9[v6[7]];
    v15 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    sub_100015704((uint64_t)v5, &qword_10036A800);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  }
  return sub_1000319D4;
}

void sub_1000319D4(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000316B4, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

BOOL sub_1000319E8()
{
  return sub_10001CFF4(&qword_10036A800, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_100031A0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A800);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100057A74(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A800);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100031B3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v15[24];

  v3 = sub_1000039AC(&qword_10036A808);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess(v6, v15, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A808);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_BYTE *)(a1 + v7[7]) = 6;
  v10 = a1 + v7[8];
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v12(a1 + v7[9], 1, 1, v11);
  return sub_100015704((uint64_t)v5, &qword_10036A808);
}

uint64_t sub_100031CC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A808);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100057A74(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A808);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A808);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100031E40(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A808);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A808);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v9[v6[7]] = 6;
    v13 = &v9[v6[8]];
    v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
    v15(v13, 1, 1, v14);
    v15(&v9[v6[9]], 1, 1, v14);
    sub_100015704((uint64_t)v5, &qword_10036A808);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  }
  return sub_100031FEC;
}

void sub_100031FEC(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100031CC0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

BOOL sub_100032000()
{
  return sub_10001CFF4(&qword_10036A808, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_100032024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A808);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100057A74(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A808);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100032154@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036A810);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A810);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_100387610 != -1)
    swift_once(&qword_100387610, sub_100054658);
  v9 = qword_100387618;
  *(_QWORD *)(a1 + v8) = qword_100387618;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_10036A810);
}

uint64_t sub_100032294(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A810);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100057A74(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A810);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A810);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100032414(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A810);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A810);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_100387610 != -1)
      swift_once(&qword_100387610, sub_100054658);
    v12 = qword_100387618;
    *(_QWORD *)&v9[v11] = qword_100387618;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_10036A810);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  }
  return sub_100032584;
}

void sub_100032584(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100032294, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

BOOL sub_100032598()
{
  return sub_10001CFF4(&qword_10036A810, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t sub_1000325BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A810);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100057A74(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A810);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000326EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v16[24];

  v3 = sub_1000039AC(&qword_10036A818);
  __chkstk_darwin(v3);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess(v6, v16, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A818);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a1 + v7[7];
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v13(a1 + v7[8], 1, 1, v12);
  return sub_100015704((uint64_t)v5, &qword_10036A818);
}

uint64_t sub_100032880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A818);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100057A74(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A818);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A818);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100032A00(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A818);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A818);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = &v9[v6[7]];
    v15 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v16(v14, 1, 1, v15);
    v16(&v9[v6[8]], 1, 1, v15);
    sub_100015704((uint64_t)v5, &qword_10036A818);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  }
  return sub_100032BBC;
}

void sub_100032BBC(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100032880, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

BOOL sub_100032BD0()
{
  return sub_10001CFF4(&qword_10036A818, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_100032BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A818);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100057A74(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A818);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100032D24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];

  v3 = sub_1000039AC(&qword_10036A820);
  __chkstk_darwin(v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess(v6, v13, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A820);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A820);
}

uint64_t sub_100032E70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A820);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_100057A74(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A820);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A820);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100032FF0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A820);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A820);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A820);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  }
  return sub_100033164;
}

void sub_100033164(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100032E70, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

BOOL sub_100033178()
{
  return sub_10001CFF4(&qword_10036A820, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_10003319C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A820);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_100057A74(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A820);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000332CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &qword_100387638, &qword_100387640, (uint64_t)sub_10005794C, a1);
}

uint64_t sub_1000332F0()
{
  return sub_100036594(&qword_100387638, &qword_100387640, (uint64_t)sub_10005794C);
}

uint64_t sub_10003330C()
{
  return sub_100027F38(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100033318(uint64_t a1)
{
  return sub_100027F78(a1, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t (*sub_100033324(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100033378()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100033384()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100033390()
{
  return sub_100027688(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_10003339C(float a1)
{
  return sub_1000276CC(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*sub_1000333A8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100033400()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_10003340C()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100033418()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100033424(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*sub_100033430(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100033488()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100033494()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_1000334A0()
{
  return sub_10002CC70(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_1000334AC(float a1)
{
  return sub_10002CCB4(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*sub_1000334B8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100033510()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_10003351C()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100033528()
{
  return sub_100033534(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100033534(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 36);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t sub_10003356C(float a1)
{
  return sub_100033578(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t sub_100033578(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 36);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000335B0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 36);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100033608()
{
  return sub_10002822C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100033614()
{
  return sub_100028268(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100033620()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 40);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t sub_100033654(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v4 = v1 + *(int *)(result + 40);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100033688(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 40);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000336E0()
{
  return sub_1000336EC(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

BOOL sub_1000336EC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 40) + 4) & 1) == 0;
}

uint64_t sub_10003371C()
{
  return sub_100033728(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100033728(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 40);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

float sub_100033758()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 44);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t sub_10003378C(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v4 = v1 + *(int *)(result + 44);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000337C0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 44);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100033818()
{
  return sub_100033824(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

BOOL sub_100033824(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 44) + 4) & 1) == 0;
}

uint64_t sub_100033854()
{
  return sub_100033860(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100033860(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 44);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

float sub_100033890()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t sub_1000338C4(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v4 = v1 + *(int *)(result + 48);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000338F8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100033950()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48)
                   + 4) & 1) == 0;
}

uint64_t sub_10003397C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v2 = v0 + *(int *)(result + 48);
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

float sub_1000339A8()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t sub_1000339DC(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v4 = v1 + *(int *)(result + 52);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100033A10(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_100033A68()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52)
                   + 4) & 1) == 0;
}

uint64_t sub_100033A94()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v2 = v0 + *(int *)(result + 52);
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

int *sub_100033AC0@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[9];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + result[10];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + result[11];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + result[12];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + result[13];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

double sub_100033B7C()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100033B88(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*sub_100033B94(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100033BEC()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100033BF8()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

double sub_100033C04()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100033C10(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*sub_100033C1C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100033C74()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100033C80()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

double sub_100033C8C()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100033C98(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*sub_100033CA4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100033CFC()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100033D08()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

int *sub_100033D14@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB04(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t sub_100033D20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1000039AC(&qword_10036A780);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  sub_10000E660(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_10036A780);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return sub_100015704((uint64_t)v5, &qword_10036A780);
}

uint64_t sub_100033E3C(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &qword_10036A780, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100033E58(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 20);
  sub_100015704(v8, a3);
  sub_100003E08(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*sub_100033ED0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A780);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A780);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_100015704((uint64_t)v5, &qword_10036A780);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  return sub_10003402C;
}

void sub_10003402C(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A780, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

BOOL sub_100034040()
{
  return sub_100031310(&qword_10036A780, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_10003405C()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &qword_10036A780, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100034078()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0)
                                   + 24));
  if (v1 == 13)
    return 0;
  else
    return v1;
}

uint64_t sub_1000340A0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000340CC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100034118()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 24)) != 13;
}

uint64_t sub_100034140()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 13;
  return result;
}

uint64_t sub_100034164()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0)
                                   + 28));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t sub_10003418C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000341B8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100034204()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 28)) != 4;
}

uint64_t sub_10003422C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 4;
  return result;
}

uint64_t sub_100034250@<X0>(uint64_t a1@<X8>)
{
  return sub_10003426C(&qword_10036A828, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t sub_10003426C@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v9 = sub_1000039AC(a1);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2(0);
  sub_10000E660(v4 + *(int *)(v12 + 32), (uint64_t)v11, a1);
  v13 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v11, 1, v13) != 1)
    return sub_100003E08((uint64_t)v11, a4, a3);
  UnknownStorage.init()();
  v14 = a4 + v13[5];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = a4 + v13[6];
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = a4 + v13[7];
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  return sub_100015704((uint64_t)v11, a1);
}

uint64_t sub_10003437C(uint64_t a1)
{
  return sub_100034398(a1, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &qword_10036A828, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100034398(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 32);
  sub_100015704(v8, a3);
  sub_100003E08(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*sub_100034410(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036A828);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036A828);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A828);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  }
  return sub_100034560;
}

void sub_100034560(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036A828, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

BOOL sub_100034574()
{
  return sub_10002E3A0(&qword_10036A828, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100034590()
{
  return sub_10002E478(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &qword_10036A828, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_1000345AC@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(a1 + v2[6]) = 13;
  *(_BYTE *)(a1 + v2[7]) = 4;
  v5 = a1 + v2[8];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t sub_10003464C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_SvId, a1);
}

uint64_t sub_100034658()
{
  return 4;
}

uint64_t sub_100034660@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

double sub_10003466C()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100034678(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*sub_100034684(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000346DC()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_1000346E8()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

double sub_1000346F4()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100034700(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*sub_10003470C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100034764()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100034770()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

double sub_10003477C()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100034788(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*sub_100034794(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000347EC()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_1000347F8()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

int *sub_100034804@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB04(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t sub_100034810@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036A830, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t sub_100034834@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v11 = sub_1000039AC(a1);
  __chkstk_darwin(v11);
  v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = *(_QWORD *)(v5 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess(v14, v21, 0, 0);
  sub_10000E660(v14, (uint64_t)v13, a1);
  v15 = (int *)a4(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v15 - 1) + 48))(v13, 1, v15) != 1)
    return sub_100003E08((uint64_t)v13, a5, a4);
  UnknownStorage.init()();
  v16 = a5 + v15[5];
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = a5 + v15[6];
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = a5 + v15[7];
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  return sub_100015704((uint64_t)v13, a1);
}

uint64_t sub_100034974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A830);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005BBF0(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A830);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A830);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100034AF4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A830);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A830);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A830);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  }
  return sub_100034C5C;
}

void sub_100034C5C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100034974, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

BOOL sub_100034C70()
{
  return sub_10001CFF4(&qword_10036A830, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100034C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A830);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10005BBF0(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A830);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100034DC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036A838);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A838);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_100387580 != -1)
    swift_once(&qword_100387580, sub_10004C228);
  v9 = qword_100387588;
  *(_QWORD *)(a1 + v8) = qword_100387588;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_10036A838);
}

uint64_t sub_100034F04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A838);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005BBF0(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A838);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A838);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100035084(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A838);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A838);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_100387580 != -1)
      swift_once(&qword_100387580, sub_10004C228);
    v12 = qword_100387588;
    *(_QWORD *)&v9[v11] = qword_100387588;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_10036A838);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  }
  return sub_1000351F4;
}

void sub_1000351F4(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100034F04, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

BOOL sub_100035208()
{
  return sub_10001CFF4(&qword_10036A838, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t sub_10003522C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A838);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10005BBF0(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A838);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10003535C()
{
  return sub_1000293F8(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
}

uint64_t sub_100035370(uint64_t a1)
{
  return sub_100029478(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_10005BBF0, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
}

void (*sub_100035394(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_10003541C;
}

void sub_10003541C(uint64_t *a1, char a2)
{
  sub_1000295E4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_10005BBF0, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
}

uint64_t sub_100035438()
{
  return sub_1000293F8(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
}

uint64_t sub_10003544C(uint64_t a1)
{
  return sub_100029478(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_10005BBF0, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
}

void (*sub_100035470(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_1000354F8;
}

void sub_1000354F8(uint64_t *a1, char a2)
{
  sub_1000295E4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_10005BBF0, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
}

uint64_t sub_100035514@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036A840);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A840);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_100387638 != -1)
    swift_once(&qword_100387638, sub_10005794C);
  v9 = qword_100387640;
  *(_QWORD *)(a1 + v8) = qword_100387640;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_10036A840);
}

uint64_t sub_100035654(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A840);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005BBF0(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A840);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A840);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000357D4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A840);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A840);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_100387638 != -1)
      swift_once(&qword_100387638, sub_10005794C);
    v12 = qword_100387640;
    *(_QWORD *)&v9[v11] = qword_100387640;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_10036A840);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  }
  return sub_100035944;
}

void sub_100035944(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100035654, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

BOOL sub_100035958()
{
  return sub_10001CFF4(&qword_10036A840, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t sub_10003597C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A840);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10005BBF0(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A840);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_100035AAC()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

uint64_t sub_100035AC0(double a1)
{
  return sub_100035BC0(&OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec, a1);
}

void (*sub_100035ACC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100035B5C;
}

void sub_100035B5C(uint64_t *a1, char a2)
{
  sub_100035D18(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

BOOL sub_100035B68()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

uint64_t sub_100035B7C()
{
  return sub_100024EAC(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_10005BBF0, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

double sub_100035BA0()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

uint64_t sub_100035BB4(double a1)
{
  return sub_100035BC0(&OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec, a1);
}

uint64_t sub_100035BC0(_QWORD *a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[24];

  v4 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_10005BBF0(v10);
    v11 = *(_QWORD *)(v4 + v6);
    *(_QWORD *)(v4 + v6) = v9;
    swift_release(v11);
  }
  v12 = *(_QWORD *)(v4 + v6) + *a1;
  result = swift_beginAccess(v12, v14, 1, 0);
  *(double *)v12 = a2;
  *(_BYTE *)(v12 + 8) = 0;
  return result;
}

void (*sub_100035C7C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100035D0C;
}

void sub_100035D0C(uint64_t *a1, char a2)
{
  sub_100035D18(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

void sub_100035D18(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v9 = *(int *)(v5 + 88);
    v10 = *(_QWORD *)(v5 + 80);
    v11 = *(_QWORD *)(v10 + v9);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005BBF0(v14);
    v15 = *(_QWORD *)(v10 + v9);
    *(_QWORD *)(v10 + v9) = v13;
    swift_release(v15);
  }
LABEL_4:
  v16 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess(v16, v8, 1, 0);
  *(_QWORD *)v16 = v6;
  *(_BYTE *)(v16 + 8) = 0;
  free((void *)v5);
}

BOOL sub_100035DF8()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

uint64_t sub_100035E0C()
{
  return sub_100024EAC(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_10005BBF0, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

uint64_t sub_100035E30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[24];

  v3 = sub_1000039AC(&qword_10036A848);
  __chkstk_darwin(v3);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess(v6, v19, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036A848);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[9];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[10];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v7[11];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v7[12];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a1 + v7[13];
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036A848);
}

uint64_t sub_100035FC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A848);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10005BBF0(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036A848);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036A848);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100036148(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036A848);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036A848);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[9]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[10]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v17 = &v9[v6[11]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    v18 = &v9[v6[12]];
    *(_DWORD *)v18 = 0;
    v18[4] = 1;
    v19 = &v9[v6[13]];
    *(_DWORD *)v19 = 0;
    v19[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036A848);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  }
  return sub_100036310;
}

void sub_100036310(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100035FC8, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

BOOL sub_100036324()
{
  return sub_10001CFF4(&qword_10036A848, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100036348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036A848);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10005BBF0(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036A848);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100036478()
{
  return sub_1000293F8(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
}

uint64_t sub_10003648C(uint64_t a1)
{
  return sub_100029478(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_10005BBF0, OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
}

void (*sub_1000364B0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_100036538;
}

void sub_100036538(uint64_t *a1, char a2)
{
  sub_1000295E4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_10005BBF0, OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
}

uint64_t sub_100036554@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &qword_100387670, &qword_100387678, (uint64_t)sub_10005BA98, a1);
}

uint64_t sub_100036578()
{
  return sub_100036594(&qword_100387670, &qword_100387678, (uint64_t)sub_10005BA98);
}

uint64_t sub_100036594(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  if (*a1 != -1)
    swift_once(a1, a3);
  return swift_retain(*a2);
}

uint64_t sub_1000365CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382F50);
  sub_10000E6A4(v0, (uint64_t)qword_100382F50);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "GLONASS_SLOT_SOURCE_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 36;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "GLONASS_SLOT_SOURCE_UNSET";
  *(_QWORD *)(v13 + 8) = 25;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "GLONASS_SLOT_SOURCE_UNCLEAR";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "GLONASS_SLOT_SOURCE_DECODED_OVER_THE_AIR";
  *((_QWORD *)v17 + 1) = 40;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 4;
  *(_QWORD *)v18 = "GLONASS_SLOT_SOURCE_POSITION_KNOWLEDGE";
  *(_QWORD *)(v18 + 8) = 38;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000367CC()
{
  return sub_100008BD0(&qword_100387410, (uint64_t)qword_100382F50, (uint64_t)sub_1000365CC);
}

uint64_t sub_1000367E8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387410, (uint64_t)qword_100382F50, (uint64_t)sub_1000365CC, a1);
}

uint64_t sub_100036804@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387410, (uint64_t)qword_100382F50, (uint64_t)sub_1000365CC, a1);
}

uint64_t sub_100036820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382F68);
  sub_10000E6A4(v0, (uint64_t)qword_100382F68);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40B0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "SATELLITE_SYSTEM_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 24;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "SATELLITE_SYSTEM_GPS";
  *(_QWORD *)(v13 + 8) = 20;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "SATELLITE_SYSTEM_GLONASS";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "SATELLITE_SYSTEM_BEIDOU";
  *((_QWORD *)v17 + 1) = 23;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 8;
  *(_QWORD *)v19 = "SATELLITE_SYSTEM_GALILEO";
  *((_QWORD *)v19 + 1) = 24;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 16;
  *(_QWORD *)v21 = "SATELLITE_SYSTEM_QZSS";
  *((_QWORD *)v21 + 1) = 21;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 32;
  *(_QWORD *)v23 = "SATELLITE_SYSTEM_SBAS";
  *((_QWORD *)v23 + 1) = 21;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 64;
  *(_QWORD *)v25 = "SATELLITE_SYSTEM_NAVIC";
  *((_QWORD *)v25 + 1) = 22;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100036AC4()
{
  return sub_100008BD0(&qword_100387418, (uint64_t)qword_100382F68, (uint64_t)sub_100036820);
}

uint64_t sub_100036AE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387418, (uint64_t)qword_100382F68, (uint64_t)sub_100036820, a1);
}

uint64_t sub_100036AFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387418, (uint64_t)qword_100382F68, (uint64_t)sub_100036820, a1);
}

uint64_t sub_100036B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382F80);
  sub_10000E6A4(v0, (uint64_t)qword_100382F80);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v35 = swift_allocObject(v1, v6 + 13 * v4, v5 | 7);
  *(_OWORD *)(v35 + 16) = xmmword_1002C40C0;
  v7 = v35 + v6;
  v8 = v35 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v35 + v6) = 0;
  *(_QWORD *)v8 = "BAND_PROTOBUF_DEFAULT";
  *(_QWORD *)(v8 + 8) = 21;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v35 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "BAND_UNSET";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v35 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "BAND_GPS_QZSS_L1CA";
  *((_QWORD *)v14 + 1) = 18;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v35 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "BAND_GPS_QZSS_L2C";
  *((_QWORD *)v16 + 1) = 17;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v35 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "BAND_GPS_QZSS_L5";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v35 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "BAND_GLONASS_L1F";
  *((_QWORD *)v20 + 1) = 16;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v35 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "BAND_BEIDOU_B1i";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v35 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 7;
  *(_QWORD *)v24 = "BAND_BEIDOU_B2a";
  *((_QWORD *)v24 + 1) = 15;
  v24[16] = 2;
  v11();
  v25 = v35 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 8;
  *(_QWORD *)v25 = "BAND_GALILEO_E1";
  *(_QWORD *)(v25 + 8) = 15;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v35 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 9;
  *(_QWORD *)v27 = "BAND_GALILEO_E5a";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v35 + v6 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 10;
  *(_QWORD *)v29 = "BAND_SBAS_L1";
  *((_QWORD *)v29 + 1) = 12;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v35 + v6 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 11;
  *(_QWORD *)v31 = "BAND_BEIDOU_B1c";
  *((_QWORD *)v31 + 1) = 15;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v35 + v6 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 12;
  *(_QWORD *)v33 = "BAND_NAVIC_L5";
  *((_QWORD *)v33 + 1) = 13;
  v33[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v35);
}

uint64_t sub_100036EAC()
{
  return sub_100008BD0(&qword_100387420, (uint64_t)qword_100382F80, (uint64_t)sub_100036B18);
}

uint64_t sub_100036EC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387420, (uint64_t)qword_100382F80, (uint64_t)sub_100036B18, a1);
}

uint64_t sub_100036EE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387420, (uint64_t)qword_100382F80, (uint64_t)sub_100036B18, a1);
}

uint64_t sub_100036F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382F98);
  sub_10000E6A4(v0, (uint64_t)qword_100382F98);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C30F0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "FULL_SV_TIME_SOURCE_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 36;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "FULL_SV_TIME_SOURCE_UNSET";
  *(_QWORD *)(v13 + 8) = 25;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "FULL_SV_TIME_SOURCE_NEWLY_DECODED_FROM_SV";
  *((_QWORD *)v15 + 1) = 41;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "FULL_SV_TIME_SOURCE_PREV_DECODED_FROM_SV";
  *((_QWORD *)v17 + 1) = 40;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 4;
  *(_QWORD *)v19 = "FULL_SV_TIME_SOURCE_POSITION_AND_OTHER_SV_TIME";
  *((_QWORD *)v19 + 1) = 46;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 5;
  *(_QWORD *)v21 = "FULL_SV_TIME_SOURCE_POSITION_ONLY";
  *((_QWORD *)v21 + 1) = 33;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100037130()
{
  return sub_100008BD0(&qword_100387428, (uint64_t)qword_100382F98, (uint64_t)sub_100036F00);
}

uint64_t sub_10003714C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387428, (uint64_t)qword_100382F98, (uint64_t)sub_100036F00, a1);
}

uint64_t sub_100037168@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387428, (uint64_t)qword_100382F98, (uint64_t)sub_100036F00, a1);
}

uint64_t sub_100037184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382FB0);
  sub_10000E6A4(v0, (uint64_t)qword_100382FB0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3140;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "MEASUREMENT_DETECTION_METHOD_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 45;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "MEASUREMENT_DETECTION_METHOD_UNSET";
  *(_QWORD *)(v13 + 8) = 34;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "MEASUREMENT_DETECTION_METHOD_NOT_DETECTED";
  *((_QWORD *)v15 + 1) = 41;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "MEASUREMENT_DETECTION_METHOD_ENERGY_BINS";
  *((_QWORD *)v17 + 1) = 40;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 4;
  *(_QWORD *)v19 = "MEASUREMENT_DETECTION_METHOD_CODE_TRACKING";
  *((_QWORD *)v19 + 1) = 42;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 5;
  *(_QWORD *)v21 = "MEASUREMENT_DETECTION_METHOD_FREQUENCY_TRACKING";
  *((_QWORD *)v21 + 1) = 47;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 6;
  *(_QWORD *)v23 = "MEASUREMENT_DETECTION_METHOD_PHASE_TRACKING";
  *((_QWORD *)v23 + 1) = 43;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000373E8()
{
  return sub_100008BD0(&qword_100387430, (uint64_t)qword_100382FB0, (uint64_t)sub_100037184);
}

uint64_t sub_100037404@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387430, (uint64_t)qword_100382FB0, (uint64_t)sub_100037184, a1);
}

uint64_t sub_100037420@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387430, (uint64_t)qword_100382FB0, (uint64_t)sub_100037184, a1);
}

uint64_t sub_10003743C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382FC8);
  sub_10000E6A4(v0, (uint64_t)qword_100382FC8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "MULTIPATH_INDICATOR_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 36;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "MULTIPATH_INDICATOR_UNSET";
  *(_QWORD *)(v13 + 8) = 25;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "MULTIPATH_INDICATOR_UNKNOWN";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "MULTIPATH_INDICATOR_PRESENT";
  *((_QWORD *)v17 + 1) = 27;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 4;
  *(_QWORD *)v18 = "MULTIPATH_INDICATOR_NOT_PRESENT";
  *(_QWORD *)(v18 + 8) = 31;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100037640()
{
  return sub_100008BD0(&qword_100387438, (uint64_t)qword_100382FC8, (uint64_t)sub_10003743C);
}

uint64_t sub_10003765C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387438, (uint64_t)qword_100382FC8, (uint64_t)sub_10003743C, a1);
}

uint64_t sub_100037678@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387438, (uint64_t)qword_100382FC8, (uint64_t)sub_10003743C, a1);
}

uint64_t sub_100037694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382FE0);
  sub_10000E6A4(v0, (uint64_t)qword_100382FE0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3140;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "SV_POSITION_SOURCE_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 35;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "SV_POSITION_SOURCE_UNSET";
  *(_QWORD *)(v13 + 8) = 24;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "SV_POSITION_SOURCE_EPHEMERIS_OVER_THE_AIR";
  *((_QWORD *)v15 + 1) = 41;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "SV_POSITION_SOURCE_BROADCAST_EPHEMERIS_FILE";
  *((_QWORD *)v17 + 1) = 43;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 4;
  *(_QWORD *)v19 = "SV_POSITION_SOURCE_LONG_TERM_ORBIT_MOBILE_CALC_deprecated";
  *((_QWORD *)v19 + 1) = 57;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 5;
  *(_QWORD *)v21 = "SV_POSITION_SOURCE_LONG_TERM_PREDICTIONS_FILE";
  *((_QWORD *)v21 + 1) = 45;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 6;
  *(_QWORD *)v23 = "SV_POSITION_SOURCE_SHORT_TERM_PREDICTIONS_FILE";
  *((_QWORD *)v23 + 1) = 46;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000378F8()
{
  return sub_100008BD0(&qword_100387440, (uint64_t)qword_100382FE0, (uint64_t)sub_100037694);
}

uint64_t sub_100037914@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387440, (uint64_t)qword_100382FE0, (uint64_t)sub_100037694, a1);
}

uint64_t sub_100037930@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387440, (uint64_t)qword_100382FE0, (uint64_t)sub_100037694, a1);
}

uint64_t sub_10003794C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100382FF8);
  sub_10000E6A4(v0, (uint64_t)qword_100382FF8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "SV_HEALTH_INDICATION_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 37;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "SV_HEALTH_INDICATION_UNSET";
  *(_QWORD *)(v13 + 8) = 26;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "SV_HEALTH_INDICATION_UNKNOWN";
  *((_QWORD *)v15 + 1) = 28;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "SV_HEALTH_INDICATION_HEALTHY";
  *((_QWORD *)v17 + 1) = 28;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 4;
  *(_QWORD *)v18 = "SV_HEALTH_INDICATION_UNHEALTHY";
  *(_QWORD *)(v18 + 8) = 30;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100037B50()
{
  return sub_100008BD0(&qword_100387448, (uint64_t)qword_100382FF8, (uint64_t)sub_10003794C);
}

uint64_t sub_100037B6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387448, (uint64_t)qword_100382FF8, (uint64_t)sub_10003794C, a1);
}

uint64_t sub_100037B88@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387448, (uint64_t)qword_100382FF8, (uint64_t)sub_10003794C, a1);
}

uint64_t sub_100037BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383010);
  sub_10000E6A4(v0, (uint64_t)qword_100383010);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "IONO_CORR_SOURCE_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 24;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "IONO_CORR_SOURCE_KLOBUCHAR_MODEL";
  *((_QWORD *)v13 + 1) = 32;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "IONO_CORR_SOURCE_GLOBAL_PREDICTIONS";
  *(_QWORD *)(v14 + 8) = 35;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100037D34()
{
  return sub_100008BD0(&qword_100387450, (uint64_t)qword_100383010, (uint64_t)sub_100037BA4);
}

uint64_t sub_100037D50@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387450, (uint64_t)qword_100383010, (uint64_t)sub_100037BA4, a1);
}

uint64_t sub_100037D6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387450, (uint64_t)qword_100383010, (uint64_t)sub_100037BA4, a1);
}

uint64_t sub_100037D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383028);
  sub_10000E6A4(v0, (uint64_t)qword_100383028);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 45;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_UNSET";
  *(_QWORD *)(v13 + 8) = 43;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_UNKNOWN";
  *((_QWORD *)v15 + 1) = 45;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_NOT_CHANGING";
  *((_QWORD *)v17 + 1) = 50;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 4;
  *(_QWORD *)v18 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_CHANGING";
  *(_QWORD *)(v18 + 8) = 46;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100037F88()
{
  return sub_100008BD0(&qword_100387458, (uint64_t)qword_100383028, (uint64_t)sub_100037D88);
}

uint64_t sub_100037FA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387458, (uint64_t)qword_100383028, (uint64_t)sub_100037D88, a1);
}

uint64_t sub_100037FC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387458, (uint64_t)qword_100383028, (uint64_t)sub_100037D88, a1);
}

uint64_t sub_100037FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383040);
  sub_10000E6A4(v0, (uint64_t)qword_100383040);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C30F0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "GLONASS_LEAP_SECOND_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 36;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "GLONASS_LEAP_SECOND_UNSET";
  *(_QWORD *)(v13 + 8) = 25;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "GLONASS_LEAP_SECOND_NONE";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "GLONASS_LEAP_SECOND_POSITIVE";
  *((_QWORD *)v17 + 1) = 28;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 4;
  *(_QWORD *)v19 = "GLONASS_LEAP_SECOND_NEGATIVE";
  *((_QWORD *)v19 + 1) = 28;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 5;
  *(_QWORD *)v21 = "GLONASS_LEAP_SECOND_NOT_YET_DEFINED";
  *((_QWORD *)v21 + 1) = 35;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100038210()
{
  return sub_100008BD0(&qword_100387460, (uint64_t)qword_100383040, (uint64_t)sub_100037FDC);
}

uint64_t sub_10003822C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387460, (uint64_t)qword_100383040, (uint64_t)sub_100037FDC, a1);
}

uint64_t sub_100038248@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387460, (uint64_t)qword_100383040, (uint64_t)sub_100037FDC, a1);
}

uint64_t sub_100038264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383058);
  sub_10000E6A4(v0, (uint64_t)qword_100383058);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "SV_REFERENCE_POINT_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 26;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "SV_REFERENCE_POINT_CENTER_OF_MASS";
  *(_QWORD *)(v13 + 8) = 33;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "SV_REFERENCE_POINT_L1_ANTENNA";
  *((_QWORD *)v15 + 1) = 29;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "SV_REFERENCE_POINT_L5_ANTENNA";
  *((_QWORD *)v17 + 1) = 29;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100038424()
{
  return sub_100008BD0(&qword_100387468, (uint64_t)qword_100383058, (uint64_t)sub_100038264);
}

uint64_t sub_100038440@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387468, (uint64_t)qword_100383058, (uint64_t)sub_100038264, a1);
}

uint64_t sub_10003845C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387468, (uint64_t)qword_100383058, (uint64_t)sub_100038264, a1);
}

void *sub_100038478()
{
  return &unk_1003520E0;
}

unint64_t sub_100038484()
{
  return 0xD000000000000028;
}

uint64_t sub_1000384A0(uint64_t a1)
{
  return sub_1000388A4(a1, qword_100383070, (uint64_t)"slot_num", (uint64_t)"slot_source", 11);
}

uint64_t sub_1000384C0()
{
  return sub_100008BD0(&qword_100387470, (uint64_t)qword_100383070, (uint64_t)sub_1000384A0);
}

uint64_t sub_1000384DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387470, (uint64_t)qword_100383070, (uint64_t)sub_1000384A0, a1);
}

uint64_t sub_1000384F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 24);
        v10 = sub_10007FC08();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v9, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource, v10, a2, a3);
      }
      else if (result == 1)
      {
        v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v11 + 20), a2, a3);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000385F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  char v13;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v10 = result;
  v11 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v11[1] & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 1, a2, a3);
  if (!v4)
  {
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 5)
    {
      v13 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      v12 = sub_10007FC08();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v13, 2, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource, v12, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000386D8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, &qword_10036A850, (uint64_t)&unk_1002C52BC);
}

uint64_t sub_1000386F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 24);
  v6 = a2 + *(int *)(a1 + 20);
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  *(_BYTE *)(a2 + v5) = 5;
  return result;
}

uint64_t sub_100038734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000384F8(a1, a2, a3);
}

uint64_t sub_100038748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000385F0(a1, a2, a3);
}

uint64_t sub_10003875C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DE40, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&unk_1002C5234);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000387AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387470, (uint64_t)qword_100383070, (uint64_t)sub_1000384A0, a1);
}

uint64_t sub_1000387C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036ABC8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&unk_1002C51BC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100038808(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036ABC8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&unk_1002C51BC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003885C()
{
  return &unk_1003520F0;
}

unint64_t sub_100038868()
{
  return 0xD000000000000022;
}

uint64_t sub_100038884(uint64_t a1)
{
  return sub_1000388A4(a1, qword_100383088, (uint64_t)"freq_num", (uint64_t)"slot_info", 9);
}

uint64_t sub_1000388A4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  char *v20;

  v7 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v7, a2);
  sub_10000E6A4(v7, (uint64_t)a2);
  v8 = sub_1000039AC(&qword_10036A618);
  v9 = sub_1000039AC(&qword_10036A620);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(v8, v13 + 2 * v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1002C3150;
  v15 = (_QWORD *)(v14 + v13);
  v16 = v14 + v13 + *(int *)(v9 + 48);
  *v15 = 1;
  *(_QWORD *)v16 = a3;
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v17 = enum case for _NameMap.NameDescription.standard(_:);
  v18 = type metadata accessor for _NameMap.NameDescription(0);
  v19 = *(void (**)(void))(*(_QWORD *)(v18 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v16, v17, v18);
  v20 = (char *)v15 + v11 + *(int *)(v9 + 48);
  *(_QWORD *)((char *)v15 + v11) = 2;
  *(_QWORD *)v20 = a4;
  *((_QWORD *)v20 + 1) = a5;
  v20[16] = 2;
  v19();
  return _NameMap.init(dictionaryLiteral:)(v14);
}

uint64_t sub_1000389F4()
{
  return sub_100008BD0(&qword_100387478, (uint64_t)qword_100383088, (uint64_t)sub_100038884);
}

uint64_t sub_100038A10@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387478, (uint64_t)qword_100383088, (uint64_t)sub_100038884, a1);
}

uint64_t sub_100038A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0) + 24);
        v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v11 = sub_10000FD38(&qword_10036ABC8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&unk_1002C51BC);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
      }
      else if (result == 1)
      {
        v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v12 + 20), a2, a3);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100038B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100039BC8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))&dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100038B7C);
}

uint64_t sub_100038B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A700);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036A700);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A700);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  v15 = sub_10000FD38(&qword_10036ABC8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&unk_1002C51BC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

Swift::Int sub_100038CF4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, &qword_10036A858, (uint64_t)&unk_1002C5424);
}

uint64_t sub_100038D10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100039E2C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a2);
}

uint64_t sub_100038D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100038A2C(a1, a2, a3);
}

uint64_t sub_100038D30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DE38, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&unk_1002C539C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100038D80@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387478, (uint64_t)qword_100383088, (uint64_t)sub_100038884, a1);
}

uint64_t sub_100038D9C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036ABE0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&unk_1002C5324);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100038DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036ABE0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&unk_1002C5324);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100038E30()
{
  return &unk_100352100;
}

unint64_t sub_100038E3C()
{
  return 0xD000000000000028;
}

uint64_t sub_100038E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003830A0);
  sub_10000E6A4(v0, (uint64_t)qword_1003830A0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3140;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "gps_prn";
  *(_QWORD *)(v9 + 8) = 7;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "glonass_id";
  *(_QWORD *)(v13 + 8) = 10;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "beidou_ranging_code";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "galileo_spreading_code";
  *((_QWORD *)v17 + 1) = 22;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "qzss_prn";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "sbas_prn";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "navic_prn";
  *((_QWORD *)v23 + 1) = 9;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000390C4()
{
  return sub_100008BD0(&qword_100387480, (uint64_t)qword_1003830A0, (uint64_t)sub_100038E58);
}

uint64_t sub_1000390E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387480, (uint64_t)qword_1003830A0, (uint64_t)sub_100038E58, a1);
}

uint64_t sub_1000390FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 20);
          goto LABEL_12;
        case 2:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 24);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
          v12 = sub_10000FD38(&qword_10036ABE0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&unk_1002C5324);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
          break;
        case 3:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 28);
          goto LABEL_12;
        case 4:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 32);
          goto LABEL_12;
        case 5:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 36);
          goto LABEL_12;
        case 6:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 40);
          goto LABEL_12;
        case 7:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 44);
LABEL_12:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10003927C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v10 = result;
  v11 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v11[1] & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 1, a2, a3);
  if (!v4)
  {
    sub_1000393F8(v5, a1, a2, a3);
    v12 = (unsigned int *)(v5 + *(int *)(v10 + 28));
    if ((v12[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v12, 3, a2, a3);
    v13 = (unsigned int *)(v5 + *(int *)(v10 + 32));
    if ((v13[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v13, 4, a2, a3);
    sub_10003956C(v5, a1, a2, a3);
    sub_1000395E0(v5, a1, a2, a3);
    sub_100039654(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000393F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A708);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036A708);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A708);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  v15 = sub_10000FD38(&qword_10036ABE0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&unk_1002C5324);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_10003956C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 36));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v8, 5, a3, a4);
  return result;
}

uint64_t sub_1000395E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 40));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v8, 6, a3, a4);
  return result;
}

uint64_t sub_100039654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 44));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v8, 7, a3, a4);
  return result;
}

Swift::Int sub_1000396CC()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, &qword_10036A860, (uint64_t)&unk_1002C558C);
}

uint64_t sub_1000396E8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + v4;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = a1[8];
  v10 = a2 + a1[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a2 + v9;
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1[10];
  v13 = a2 + a1[9];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a2 + v12;
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a2 + a1[11];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_100039798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000390FC(a1, a2, a3);
}

uint64_t sub_1000397AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003927C(a1, a2, a3);
}

uint64_t sub_1000397C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DE30, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&unk_1002C5504);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100039810@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387480, (uint64_t)qword_1003830A0, (uint64_t)sub_100038E58, a1);
}

uint64_t sub_10003982C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036ABF8, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&unk_1002C548C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003986C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036ABF8, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&unk_1002C548C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000398C0()
{
  return &unk_100352110;
}

unint64_t sub_1000398CC()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1000398E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003830B8);
  sub_10000E6A4(v0, (uint64_t)qword_1003830B8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "system";
  *(_QWORD *)(v9 + 8) = 6;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "constel_id";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100039A40()
{
  return sub_100008BD0(&qword_100387488, (uint64_t)qword_1003830B8, (uint64_t)sub_1000398E8);
}

uint64_t sub_100039A5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387488, (uint64_t)qword_1003830B8, (uint64_t)sub_1000398E8, a1);
}

uint64_t sub_100039A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvId(0) + 24);
        v10 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
        v11 = sub_10000FD38(&qword_10036ABF8, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&unk_1002C548C);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
      }
      else if (result == 1)
      {
        v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v12 + 20), a2, a3);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100039B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100039BC8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))&dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100039C8C);
}

uint64_t sub_100039BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD, uint64_t, uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t result;
  unsigned int *v15;

  v10 = v6;
  result = a4(0);
  v15 = (unsigned int *)(v10 + *(int *)(result + 20));
  if ((v15[1] & 1) == 0)
    result = a5(*v15, 1, a2, a3);
  if (!v7)
  {
    a6(v10, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100039C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A710);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036A710);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A710);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  v15 = sub_10000FD38(&qword_10036ABF8, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&unk_1002C548C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Int sub_100039E04()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SvId, &qword_10036A868, (uint64_t)&unk_1002C56F4);
}

uint64_t sub_100039E20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100039E2C(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a2);
}

uint64_t sub_100039E2C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v6 = *(int *)(a1 + 24);
  v7 = a3 + *(int *)(a1 + 20);
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a3 + v6;
  v9 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t sub_100039E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100039A78(a1, a2, a3);
}

uint64_t sub_100039EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DE28, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&unk_1002C566C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100039EF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387488, (uint64_t)qword_1003830B8, (uint64_t)sub_1000398E8, a1);
}

uint64_t sub_100039F14(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AC10, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&unk_1002C55F4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100039F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AC10, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&unk_1002C55F4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100039FA4()
{
  return &unk_100352120;
}

unint64_t sub_100039FB0()
{
  return 0xD000000000000027;
}

uint64_t sub_100039FCC(uint64_t a1)
{
  return sub_10003B3B8(a1, qword_1003830D0);
}

uint64_t sub_100039FD8()
{
  return sub_100008BD0(&qword_100387490, (uint64_t)qword_1003830D0, (uint64_t)sub_100039FCC);
}

uint64_t sub_100039FF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387490, (uint64_t)qword_1003830D0, (uint64_t)sub_100039FCC, a1);
}

uint64_t sub_10003A010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A79C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10003A02C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A8B0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10003A048(uint64_t a1, uint64_t a2)
{
  return sub_1000654F4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState) & 1;
}

Swift::Int sub_10003A068()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, &qword_10036A870, (uint64_t)&unk_1002C585C);
}

uint64_t sub_10003A088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DE20, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&unk_1002C57D4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003A0D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387490, (uint64_t)qword_1003830D0, (uint64_t)sub_100039FCC, a1);
}

uint64_t sub_10003A0F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AC28, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&unk_1002C575C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003A134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AC28, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&unk_1002C575C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003A188()
{
  return &unk_100352130;
}

unint64_t sub_10003A194()
{
  return 0xD000000000000028;
}

uint64_t sub_10003A1B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003830E8);
  sub_10000E6A4(v0, (uint64_t)qword_1003830E8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "cm_code_lock";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "cl_code_lock";
  *(_QWORD *)(v13 + 8) = 12;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "c_nav_bit";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "c_nav_frame";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "tow_decoded";
  *(_QWORD *)(v18 + 8) = 11;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003A3B4()
{
  return sub_100008BD0(&qword_100387498, (uint64_t)qword_1003830E8, (uint64_t)sub_10003A1B0);
}

uint64_t sub_10003A3D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387498, (uint64_t)qword_1003830E8, (uint64_t)sub_10003A1B0, a1);
}

uint64_t sub_10003A3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003ADA8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10003A408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003AECC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10003A424(uint64_t a1, uint64_t a2)
{
  return sub_100062BCC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState) & 1;
}

Swift::Int sub_10003A444()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, &qword_10036A878, (uint64_t)&unk_1002C59C4);
}

uint64_t sub_10003A464(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DE18, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&unk_1002C593C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003A4B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387498, (uint64_t)qword_1003830E8, (uint64_t)sub_10003A1B0, a1);
}

uint64_t sub_10003A4D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AC40, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&unk_1002C58C4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003A510(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AC40, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&unk_1002C58C4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003A560()
{
  return &unk_100352140;
}

unint64_t sub_10003A56C()
{
  return 0xD000000000000027;
}

uint64_t sub_10003A588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383100);
  sub_10000E6A4(v0, (uint64_t)qword_100383100);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "code_lock";
  *(_QWORD *)(v9 + 8) = 9;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "c_nav_bit";
  *(_QWORD *)(v13 + 8) = 9;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "c_nav_frame";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "tow_decoded";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003A748()
{
  return sub_100008BD0(&qword_1003874A0, (uint64_t)qword_100383100, (uint64_t)sub_10003A588);
}

uint64_t sub_10003A764@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003874A0, (uint64_t)qword_100383100, (uint64_t)sub_10003A588, a1);
}

uint64_t sub_10003A780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A79C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10003A79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v11 = *(int *)(a4(0) + 20);
          goto LABEL_5;
        case 2:
          v11 = *(int *)(a4(0) + 24);
          goto LABEL_5;
        case 3:
          v11 = *(int *)(a4(0) + 28);
          goto LABEL_5;
        case 4:
          v11 = *(int *)(a4(0) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v4 + v11, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10003A894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A8B0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10003A8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v6 = v4;
  result = a4(0);
  v11 = (int *)result;
  v12 = *(unsigned __int8 *)(v6 + *(int *)(result + 20));
  if (v12 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 1, a2, a3);
  if (!v5)
  {
    v13 = *(unsigned __int8 *)(v6 + v11[6]);
    if (v13 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 2, a2, a3);
    v14 = *(unsigned __int8 *)(v6 + v11[7]);
    if (v14 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 3, a2, a3);
    v15 = *(unsigned __int8 *)(v6 + v11[8]);
    if (v15 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 4, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10003A9DC(uint64_t a1, uint64_t a2)
{
  return sub_1000654F4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState) & 1;
}

Swift::Int sub_10003A9FC()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, &qword_10036A880, (uint64_t)&unk_1002C5B2C);
}

uint64_t sub_10003AA18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DE10, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&unk_1002C5AA4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003AA68@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003874A0, (uint64_t)qword_100383100, (uint64_t)sub_10003A588, a1);
}

uint64_t sub_10003AA84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AC58, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&unk_1002C5A2C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003AAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AC58, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&unk_1002C5A2C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003AB14()
{
  return &unk_100352150;
}

unint64_t sub_10003AB20()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_10003AB3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383118);
  sub_10000E6A4(v0, (uint64_t)qword_100383118);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "code_lock";
  *(_QWORD *)(v9 + 8) = 9;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "symbol";
  *(_QWORD *)(v13 + 8) = 6;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "nav_bit";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "string";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "tod_decoded";
  *(_QWORD *)(v18 + 8) = 11;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003AD54()
{
  return sub_100008BD0(&qword_1003874A8, (uint64_t)qword_100383118, (uint64_t)sub_10003AB3C);
}

uint64_t sub_10003AD70@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003874A8, (uint64_t)qword_100383118, (uint64_t)sub_10003AB3C, a1);
}

uint64_t sub_10003AD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003ADA8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10003ADA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v11 = *(int *)(a4(0) + 20);
          goto LABEL_5;
        case 2:
          v11 = *(int *)(a4(0) + 24);
          goto LABEL_5;
        case 3:
          v11 = *(int *)(a4(0) + 28);
          goto LABEL_5;
        case 4:
          v11 = *(int *)(a4(0) + 32);
          goto LABEL_5;
        case 5:
          v11 = *(int *)(a4(0) + 36);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v4 + v11, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10003AEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003AECC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10003AECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v6 = v4;
  result = a4(0);
  v11 = (int *)result;
  v12 = *(unsigned __int8 *)(v6 + *(int *)(result + 20));
  if (v12 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 1, a2, a3);
  if (!v5)
  {
    v13 = *(unsigned __int8 *)(v6 + v11[6]);
    if (v13 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 2, a2, a3);
    v14 = *(unsigned __int8 *)(v6 + v11[7]);
    if (v14 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 3, a2, a3);
    v15 = *(unsigned __int8 *)(v6 + v11[8]);
    if (v15 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 4, a2, a3);
    v16 = *(unsigned __int8 *)(v6 + v11[9]);
    if (v16 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v16 & 1, 5, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10003B028(uint64_t a1, uint64_t a2)
{
  return sub_100062BCC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState) & 1;
}

Swift::Int sub_10003B048()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, &qword_10036A888, (uint64_t)&unk_1002C5C94);
}

uint64_t sub_10003B064@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_10003B0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DE08, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&unk_1002C5C0C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003B0FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003874A8, (uint64_t)qword_100383118, (uint64_t)sub_10003AB3C, a1);
}

uint64_t sub_10003B118(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AC70, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&unk_1002C5B94);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AC70, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&unk_1002C5B94);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003B1A8()
{
  return &unk_100352160;
}

unint64_t sub_10003B1B4()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10003B1D0(uint64_t a1)
{
  return sub_10003B3B8(a1, qword_100383130);
}

uint64_t sub_10003B1DC()
{
  return sub_100008BD0(&qword_1003874B0, (uint64_t)qword_100383130, (uint64_t)sub_10003B1D0);
}

uint64_t sub_10003B1F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003874B0, (uint64_t)qword_100383130, (uint64_t)sub_10003B1D0, a1);
}

uint64_t sub_10003B214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A79C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10003B230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A8B0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10003B24C(uint64_t a1, uint64_t a2)
{
  return sub_1000654F4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState) & 1;
}

Swift::Int sub_10003B26C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, &qword_10036A890, (uint64_t)&unk_1002C5DFC);
}

uint64_t sub_10003B288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DE00, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&unk_1002C5D74);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003B2D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003874B0, (uint64_t)qword_100383130, (uint64_t)sub_10003B1D0, a1);
}

uint64_t sub_10003B2F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AC88, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&unk_1002C5CFC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B334(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AC88, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&unk_1002C5CFC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003B384()
{
  return &unk_100352170;
}

unint64_t sub_10003B390()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10003B3AC(uint64_t a1)
{
  return sub_10003B3B8(a1, qword_100383148);
}

uint64_t sub_10003B3B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;

  v3 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v3, a2);
  sub_10000E6A4(v3, (uint64_t)a2);
  v4 = sub_1000039AC(&qword_10036A618);
  v5 = sub_1000039AC(&qword_10036A620);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(v4, v9 + 4 * v7, v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_1002C40D0;
  v11 = v10 + v9;
  v12 = v10 + v9 + *(int *)(v5 + 48);
  *(_QWORD *)(v10 + v9) = 1;
  *(_QWORD *)v12 = "code_lock";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = enum case for _NameMap.NameDescription.standard(_:);
  v14 = type metadata accessor for _NameMap.NameDescription(0);
  v15 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v15)(v12, v13, v14);
  v16 = v11 + v7 + *(int *)(v5 + 48);
  *(_QWORD *)(v11 + v7) = 2;
  *(_QWORD *)v16 = "nav_bit";
  *(_QWORD *)(v16 + 8) = 7;
  *(_BYTE *)(v16 + 16) = 2;
  v15();
  v17 = (_QWORD *)(v11 + 2 * v7);
  v18 = (char *)v17 + *(int *)(v5 + 48);
  *v17 = 3;
  *(_QWORD *)v18 = "subframe";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v15();
  v19 = (_QWORD *)(v11 + 3 * v7);
  v20 = (char *)v19 + *(int *)(v5 + 48);
  *v19 = 4;
  *(_QWORD *)v20 = "tow_decoded";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v15();
  return _NameMap.init(dictionaryLiteral:)(v10);
}

uint64_t sub_10003B57C()
{
  return sub_100008BD0(&qword_1003874B8, (uint64_t)qword_100383148, (uint64_t)sub_10003B3AC);
}

uint64_t sub_10003B598@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003874B8, (uint64_t)qword_100383148, (uint64_t)sub_10003B3AC, a1);
}

uint64_t sub_10003B5B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A79C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10003B5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A8B0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10003B5EC(uint64_t a1, uint64_t a2)
{
  return sub_1000654F4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState) & 1;
}

Swift::Int sub_10003B60C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, &qword_10036A898, (uint64_t)&unk_1002C5F64);
}

uint64_t sub_10003B628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DDF8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&unk_1002C5EDC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003B678@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003874B8, (uint64_t)qword_100383148, (uint64_t)sub_10003B3AC, a1);
}

uint64_t sub_10003B694(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036ACA0, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&unk_1002C5E64);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036ACA0, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&unk_1002C5E64);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003B724()
{
  return &unk_100352180;
}

unint64_t sub_10003B730()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10003B74C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383160);
  sub_10000E6A4(v0, (uint64_t)qword_100383160);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "e1bc_code_lock";
  *(_QWORD *)(v9 + 8) = 14;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "e1c_code_lock";
  *(_QWORD *)(v13 + 8) = 13;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "e1b_page";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "tow_decoded";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003B90C()
{
  return sub_100008BD0(&qword_1003874C0, (uint64_t)qword_100383160, (uint64_t)sub_10003B74C);
}

uint64_t sub_10003B928@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003874C0, (uint64_t)qword_100383160, (uint64_t)sub_10003B74C, a1);
}

uint64_t sub_10003B944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A79C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10003B960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003A8B0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10003B97C(uint64_t a1, uint64_t a2)
{
  return sub_1000654F4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState) & 1;
}

Swift::Int sub_10003B99C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, &qword_10036A8A0, (uint64_t)&unk_1002C60CC);
}

uint64_t sub_10003B9B8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  return result;
}

uint64_t sub_10003B9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DDF0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&unk_1002C6044);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003BA48@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003874C0, (uint64_t)qword_100383160, (uint64_t)sub_10003B74C, a1);
}

uint64_t sub_10003BA64(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036ACB8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&unk_1002C5FCC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003BAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036ACB8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&unk_1002C5FCC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003BAF4()
{
  return &unk_100352190;
}

unint64_t sub_10003BB00()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10003BB1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383178);
  sub_10000E6A4(v0, (uint64_t)qword_100383178);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 10 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3110;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "e5b_prim_code_lock";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "e5a_prim_code_lock";
  *(_QWORD *)(v13 + 8) = 18;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "e5_alt_boc_prim_code_lock";
  *((_QWORD *)v15 + 1) = 25;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "e5b_data_bit";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "e5a_data_bit";
  *((_QWORD *)v19 + 1) = 12;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "e5b_sec_code_lock";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "e5a_sec_code_lock";
  *((_QWORD *)v23 + 1) = 17;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 8;
  *(_QWORD *)v25 = "e5b_page_sync";
  *((_QWORD *)v25 + 1) = 13;
  v25[16] = 2;
  v12();
  v26 = v8 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 8 * v4) = 9;
  *(_QWORD *)v26 = "e5a_page_sync";
  *(_QWORD *)(v26 + 8) = 13;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  v27 = (_QWORD *)(v8 + 9 * v4);
  v28 = (char *)v27 + *(int *)(v2 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "tow_decoded";
  *((_QWORD *)v28 + 1) = 11;
  v28[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003BE24()
{
  return sub_100008BD0(&qword_1003874C8, (uint64_t)qword_100383178, (uint64_t)sub_10003BB1C);
}

uint64_t sub_10003BE40@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003874C8, (uint64_t)qword_100383178, (uint64_t)sub_10003BB1C, a1);
}

uint64_t sub_10003BE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 20);
          goto LABEL_15;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 24);
          goto LABEL_15;
        case 3:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 28);
          goto LABEL_15;
        case 4:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 32);
          goto LABEL_15;
        case 5:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 36);
          goto LABEL_15;
        case 6:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40);
          goto LABEL_15;
        case 7:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44);
          goto LABEL_15;
        case 8:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48);
          goto LABEL_15;
        case 9:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52);
          goto LABEL_15;
        case 10:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56);
LABEL_15:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10003BFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v10 = (int *)result;
  v11 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v11 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1, a2, a3);
  if (!v4)
  {
    v12 = *(unsigned __int8 *)(v5 + v10[6]);
    if (v12 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2, a2, a3);
    v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3, a2, a3);
    v14 = *(unsigned __int8 *)(v5 + v10[8]);
    if (v14 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 4, a2, a3);
    sub_10003C194(v5, a1, a2, a3);
    sub_10003C208(v5, a1, a2, a3);
    sub_10003C27C(v5, a1, a2, a3);
    sub_10003C2F0(v5, a1, a2, a3);
    sub_10003C364(v5, a1, a2, a3);
    sub_10003C3D8(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10003C194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 36));
  if (v8 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 5, a3, a4);
  return result;
}

uint64_t sub_10003C208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 40));
  if (v8 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 6, a3, a4);
  return result;
}

uint64_t sub_10003C27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 44));
  if (v8 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 7, a3, a4);
  return result;
}

uint64_t sub_10003C2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 48));
  if (v8 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 8, a3, a4);
  return result;
}

uint64_t sub_10003C364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 52));
  if (v8 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 9, a3, a4);
  return result;
}

uint64_t sub_10003C3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 56));
  if (v8 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 10, a3, a4);
  return result;
}

Swift::Int sub_10003C450()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, &qword_10036A8A8, (uint64_t)&unk_1002C6234);
}

uint64_t sub_10003C46C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  v7 = a1[10];
  *(_BYTE *)(a2 + a1[9]) = 2;
  *(_BYTE *)(a2 + v7) = 2;
  v8 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v8) = 2;
  v9 = a1[14];
  *(_BYTE *)(a2 + a1[13]) = 2;
  *(_BYTE *)(a2 + v9) = 2;
  return result;
}

uint64_t sub_10003C4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003BE5C(a1, a2, a3);
}

uint64_t sub_10003C4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003BFA8(a1, a2, a3);
}

uint64_t sub_10003C4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DDE8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&unk_1002C61AC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003C548@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003874C8, (uint64_t)qword_100383178, (uint64_t)sub_10003BB1C, a1);
}

uint64_t sub_10003C564(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036ACD0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&unk_1002C6134);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003C5A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036ACD0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&unk_1002C6134);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003C5F4()
{
  return &unk_1003521A0;
}

unint64_t sub_10003C600()
{
  return 0xD000000000000028;
}

uint64_t sub_10003C61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383190);
  sub_10000E6A4(v0, (uint64_t)qword_100383190);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "code_lock";
  *(_QWORD *)(v9 + 8) = 9;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "symbol";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "message";
  *(_QWORD *)(v14 + 8) = 7;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003C7BC()
{
  return sub_100008BD0(&qword_1003874D0, (uint64_t)qword_100383190, (uint64_t)sub_10003C61C);
}

uint64_t sub_10003C7D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003874D0, (uint64_t)qword_100383190, (uint64_t)sub_10003C61C, a1);
}

uint64_t sub_10003C7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v9, a2, a3);
        break;
      case 2:
        v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 24);
        goto LABEL_3;
      case 1:
        v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 20);
        goto LABEL_3;
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_10003C8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  v10 = result;
  v11 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v11 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1, a2, a3);
  if (!v4)
  {
    v12 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 24));
    if (v12 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2, a2, a3);
    v13 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 28));
    if (v13 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10003C9B4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, &qword_10036A8B0, (uint64_t)&unk_1002C639C);
}

uint64_t sub_10003C9D0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  *(_BYTE *)(a2 + a1[7]) = 2;
  return result;
}

uint64_t sub_10003CA0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003C7F4(a1, a2, a3);
}

uint64_t sub_10003CA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003C8B8(a1, a2, a3);
}

uint64_t sub_10003CA34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DDE0, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&unk_1002C6314);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003CA84@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003874D0, (uint64_t)qword_100383190, (uint64_t)sub_10003C61C, a1);
}

uint64_t sub_10003CAA0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036ACE8, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&unk_1002C629C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10003CAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036ACE8, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&unk_1002C629C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10003CB30()
{
  return &unk_1003521B0;
}

unint64_t sub_10003CB3C()
{
  return 0xD000000000000022;
}

uint64_t sub_10003CB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v31;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003831A8);
  sub_10000E6A4(v0, (uint64_t)qword_1003831A8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v31 = swift_allocObject(v1, v6 + 11 * v4, v5 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_1002C40E0;
  v7 = v31 + v6;
  v8 = v31 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v31 + v6) = 1;
  *(_QWORD *)v8 = "band";
  *(_QWORD *)(v8 + 8) = 4;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "gps_l1";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "gps_l2c";
  *((_QWORD *)v14 + 1) = 7;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "gps_l5";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "glonass_l1f";
  *((_QWORD *)v18 + 1) = 11;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "beidou_b1";
  *((_QWORD *)v20 + 1) = 9;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "beidou_b2";
  *((_QWORD *)v22 + 1) = 9;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "galileo_e1";
  *((_QWORD *)v24 + 1) = 10;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "galileo_e5";
  *(_QWORD *)(v25 + 8) = 10;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "sbas_l1";
  *((_QWORD *)v27 + 1) = 7;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "navic_l5";
  *((_QWORD *)v29 + 1) = 8;
  v29[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v31);
}

uint64_t sub_10003CE94()
{
  return sub_100008BD0(&qword_1003874D8, (uint64_t)qword_1003831A8, (uint64_t)sub_10003CB58);
}

uint64_t sub_10003CEB0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003874D8, (uint64_t)qword_1003831A8, (uint64_t)sub_10003CB58, a1);
}

uint64_t sub_10003CECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_BYTE *)(v1 + 16) = 13;
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  v18 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  v20 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)(v1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, 1, 1, v3);
  qword_1003874E8 = v1;
  return result;
}

uint64_t sub_10003D0E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[24];
  _BYTE v86[24];
  _BYTE v87[24];
  _BYTE v88[24];
  _BYTE v89[24];
  _BYTE v90[24];
  _BYTE v91[24];
  _BYTE v92[24];
  _BYTE v93[24];
  _BYTE v94[24];
  _BYTE v95[24];
  _BYTE v96[24];
  _BYTE v97[32];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A758);
  __chkstk_darwin(v4);
  v84 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036A750);
  __chkstk_darwin(v6);
  v83 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036A748);
  __chkstk_darwin(v8);
  v82 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000039AC(&qword_10036A740);
  __chkstk_darwin(v10);
  v81 = (uint64_t)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_10036A738);
  __chkstk_darwin(v12);
  v80 = (uint64_t)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036A730);
  __chkstk_darwin(v14);
  v78 = (uint64_t)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000039AC(&qword_10036A728);
  __chkstk_darwin(v16);
  v75 = (uint64_t)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_10036A720);
  __chkstk_darwin(v18);
  v71 = (uint64_t)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000039AC(&qword_10036A718);
  __chkstk_darwin(v20);
  v69 = (uint64_t)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v1 + 16) = 13;
  v22 = (_BYTE *)(v1 + 16);
  v23 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v25 = *(void (**)(void))(*(_QWORD *)(v24 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v25)(v23, 1, 1, v24);
  v26 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  v27 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  v29 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  v30 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  v70 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  v31 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v32 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  v72 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  v33 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  v34 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  v73 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  v35 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
  v36 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  v74 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  v37 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  v38 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  v76 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  v39 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
  v40 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  v77 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  v41 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  v79 = v2
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  v25();
  swift_beginAccess(a1 + 16, v97, 0, 0);
  LOBYTE(v24) = *(_BYTE *)(a1 + 16);
  swift_beginAccess(v22, v96, 1, 0);
  *v22 = v24;
  v42 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, v95, 0, 0);
  v43 = v69;
  sub_10000E660(v42, v69, &qword_10036A718);
  swift_beginAccess(v23, v94, 33, 0);
  sub_10000E574(v43, v23, &qword_10036A718);
  swift_endAccess(v94);
  v44 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, v94, 0, 0);
  v45 = v71;
  sub_10000E660(v44, v71, &qword_10036A720);
  swift_beginAccess(v26, v93, 33, 0);
  sub_10000E574(v45, v26, &qword_10036A720);
  swift_endAccess(v93);
  v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, v93, 0, 0);
  v47 = v75;
  sub_10000E660(v46, v75, &qword_10036A728);
  swift_beginAccess(v28, v92, 33, 0);
  sub_10000E574(v47, v28, &qword_10036A728);
  swift_endAccess(v92);
  v48 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, v92, 0, 0);
  v49 = v78;
  sub_10000E660(v48, v78, &qword_10036A730);
  v50 = v70;
  swift_beginAccess(v70, v91, 33, 0);
  sub_10000E574(v49, v50, &qword_10036A730);
  swift_endAccess(v91);
  v51 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, v91, 0, 0);
  v52 = v80;
  sub_10000E660(v51, v80, &qword_10036A738);
  v53 = v72;
  swift_beginAccess(v72, v90, 33, 0);
  sub_10000E574(v52, v53, &qword_10036A738);
  swift_endAccess(v90);
  v54 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, v90, 0, 0);
  v55 = v81;
  sub_10000E660(v54, v81, &qword_10036A740);
  v56 = v73;
  swift_beginAccess(v73, v89, 33, 0);
  sub_10000E574(v55, v56, &qword_10036A740);
  swift_endAccess(v89);
  v57 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, v89, 0, 0);
  v58 = v82;
  sub_10000E660(v57, v82, &qword_10036A748);
  v59 = v74;
  swift_beginAccess(v74, v88, 33, 0);
  sub_10000E574(v58, v59, &qword_10036A748);
  swift_endAccess(v88);
  v60 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, v88, 0, 0);
  v61 = v83;
  sub_10000E660(v60, v83, &qword_10036A750);
  v62 = v76;
  swift_beginAccess(v76, v87, 33, 0);
  sub_10000E574(v61, v62, &qword_10036A750);
  swift_endAccess(v87);
  v63 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, v87, 0, 0);
  v64 = v84;
  sub_10000E660(v63, v84, &qword_10036A758);
  v65 = v77;
  swift_beginAccess(v77, v86, 33, 0);
  sub_10000E574(v64, v65, &qword_10036A758);
  swift_endAccess(v86);
  v66 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, v86, 0, 0);
  sub_10000E660(v66, v43, &qword_10036A718);
  swift_release(a1);
  v67 = v79;
  swift_beginAccess(v79, v85, 33, 0);
  sub_10000E574(v43, v67, &qword_10036A718);
  swift_endAccess(v85);
  return v2;
}

uint64_t sub_10003D998()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, &qword_10036A718);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, &qword_10036A720);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, &qword_10036A728);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, &qword_10036A730);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, &qword_10036A738);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, &qword_10036A740);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, &qword_10036A748);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, &qword_10036A750);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, &qword_10036A758);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, &qword_10036A718);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10003DAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t (*v25)(uint64_t);
  void *v26;
  uint64_t v27;
  _BYTE v28[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10003D0E4(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          swift_beginAccess(v15 + 16, v28, 33, 0);
          v19 = sub_10007FB80();
          v20 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v15 + 16, &type metadata for CLP_LogEntry_PrivateData_Band, v19, a2, a3);
          goto LABEL_20;
        case 2:
          v21 = OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
          goto LABEL_18;
        case 3:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, v28, 33, 0);
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
          v24 = &qword_10036AC40;
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState;
          v26 = &unk_1002C58C4;
          goto LABEL_19;
        case 4:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, v28, 33, 0);
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
          v24 = &qword_10036AC58;
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState;
          v26 = &unk_1002C5A2C;
          goto LABEL_19;
        case 5:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, v28, 33, 0);
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
          v24 = &qword_10036AC70;
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState;
          v26 = &unk_1002C5B94;
          goto LABEL_19;
        case 6:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, v28, 33, 0);
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
          v24 = &qword_10036AC88;
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState;
          v26 = &unk_1002C5CFC;
          goto LABEL_19;
        case 7:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, v28, 33, 0);
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
          v24 = &qword_10036ACA0;
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState;
          v26 = &unk_1002C5E64;
          goto LABEL_19;
        case 8:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, v28, 33, 0);
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
          v24 = &qword_10036ACB8;
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState;
          v26 = &unk_1002C5FCC;
          goto LABEL_19;
        case 9:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, v28, 33, 0);
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
          v24 = &qword_10036ACD0;
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState;
          v26 = &unk_1002C6134;
          goto LABEL_19;
        case 10:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, v28, 33, 0);
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
          v24 = &qword_10036ACE8;
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState;
          v26 = &unk_1002C629C;
          goto LABEL_19;
        case 11:
          v21 = OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
LABEL_18:
          v22 = v15 + v21;
          swift_beginAccess(v15 + v21, v28, 33, 0);
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
          v24 = &qword_10036AC28;
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState;
          v26 = &unk_1002C575C;
LABEL_19:
          v27 = sub_10000FD38(v24, v25, (uint64_t)v26);
          v20 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v22, v23, v27, a2, a3);
LABEL_20:
          v5 = v20;
          swift_endAccess(v28);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_10003DED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  char v12;
  _BYTE v13[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v13, 0, 0);
  if (*(_BYTE *)(v9 + 16) != 13)
  {
    v12 = *(_BYTE *)(v9 + 16);
    v10 = sub_10007FB80();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v12, 1, &type metadata for CLP_LogEntry_PrivateData_Band, v10, a2, a3);
  }
  if (v4)
    return swift_release(v9);
  sub_10003E0FC(v9, a1, a2, a3);
  sub_10003E288(v9, a1, a2, a3);
  sub_10003E414(v9, a1, a2, a3);
  sub_10003E5A0(v9, a1, a2, a3);
  sub_10003E72C(v9, a1, a2, a3);
  sub_10003E8B8(v9, a1, a2, a3);
  sub_10003EA44(v9, a1, a2, a3);
  sub_10003EBD0(v9, a1, a2, a3);
  sub_10003ED5C(v9, a1, a2, a3);
  sub_10003EEE8(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10003E0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A718);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A718);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A718);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  v15 = sub_10000FD38(&qword_10036AC28, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&unk_1002C575C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10003E288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A720);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A720);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A720);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  v15 = sub_10000FD38(&qword_10036AC40, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&unk_1002C58C4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10003E414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A728);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A728);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A728);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  v15 = sub_10000FD38(&qword_10036AC58, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&unk_1002C5A2C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10003E5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A730);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A730);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A730);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  v15 = sub_10000FD38(&qword_10036AC70, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&unk_1002C5B94);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10003E72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A738);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A738);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A738);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  v15 = sub_10000FD38(&qword_10036AC88, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&unk_1002C5CFC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10003E8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A740);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A740);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A740);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  v15 = sub_10000FD38(&qword_10036ACA0, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&unk_1002C5E64);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 7, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10003EA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A748);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A748);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A748);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  v15 = sub_10000FD38(&qword_10036ACB8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&unk_1002C5FCC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 8, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10003EBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A750);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A750);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A750);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  v15 = sub_10000FD38(&qword_10036ACD0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&unk_1002C6134);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 9, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10003ED5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A758);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A758);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A758);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  v15 = sub_10000FD38(&qword_10036ACE8, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&unk_1002C629C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 10, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_10003EEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A718);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A718);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A718);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  v15 = sub_10000FD38(&qword_10036AC28, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&unk_1002C575C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 11, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10003F074(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t (*)(uint64_t, uint64_t))sub_10003F09C) & 1;
}

BOOL sub_10003F09C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  int v77;
  int v78;
  _BOOL8 result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t, uint64_t, uint64_t);
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int (*v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, uint64_t, uint64_t);
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (*v156)(uint64_t, uint64_t, uint64_t);
  int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int (*v182)(uint64_t, uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int (*v193)(uint64_t, uint64_t, uint64_t);
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int (*v206)(uint64_t, uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  unsigned int (*v211)(uint64_t, uint64_t, uint64_t);
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char v290[24];
  char v291[24];
  char v292[24];
  char v293[24];
  char v294[24];
  char v295[24];
  char v296[32];

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  v221 = *(_QWORD *)(v4 - 8);
  v222 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v210 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = sub_1000039AC(&qword_10036DF98);
  __chkstk_darwin(v220);
  v8 = (char *)&v210 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000039AC(&qword_10036A758);
  v10 = __chkstk_darwin(v9);
  v216 = (uint64_t)&v210 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v224 = (uint64_t)&v210 - v12;
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v226 = *(_QWORD *)(v13 - 8);
  v227 = v13;
  __chkstk_darwin(v13);
  v217 = (uint64_t)&v210 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = sub_1000039AC(&qword_10036DFA0);
  __chkstk_darwin(v225);
  v228 = (uint64_t)&v210 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000039AC(&qword_10036A750);
  v17 = __chkstk_darwin(v16);
  v238 = (char *)&v210 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v230 = (uint64_t)&v210 - v19;
  v20 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  v233 = *(_QWORD *)(v20 - 8);
  v234 = v20;
  __chkstk_darwin(v20);
  v223 = (uint64_t)&v210 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = sub_1000039AC(&qword_10036DFA8);
  __chkstk_darwin(v232);
  v235 = (uint64_t)&v210 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000039AC(&qword_10036A748);
  v24 = __chkstk_darwin(v23);
  v229 = (uint64_t)&v210 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v250 = (uint64_t)&v210 - v26;
  v27 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  v240 = *(_QWORD *)(v27 - 8);
  v241 = v27;
  __chkstk_darwin(v27);
  v231 = (uint64_t)&v210 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = sub_1000039AC(&qword_10036DFB0);
  __chkstk_darwin(v239);
  v242 = (uint64_t)&v210 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000039AC(&qword_10036A740);
  v31 = __chkstk_darwin(v30);
  v236 = (uint64_t)&v210 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v244 = (uint64_t)&v210 - v33;
  v34 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  v247 = *(_QWORD *)(v34 - 8);
  v248 = v34;
  __chkstk_darwin(v34);
  v237 = (uint64_t)&v210 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = sub_1000039AC(&qword_10036DFB8);
  __chkstk_darwin(v246);
  v249 = (uint64_t)&v210 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1000039AC(&qword_10036A738);
  v38 = __chkstk_darwin(v37);
  v243 = (uint64_t)&v210 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v252 = (uint64_t)&v210 - v40;
  v41 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  v255 = *(_QWORD *)(v41 - 8);
  v256 = v41;
  __chkstk_darwin(v41);
  v245 = (uint64_t)&v210 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = sub_1000039AC(&qword_10036DFC0);
  __chkstk_darwin(v254);
  v257 = (uint64_t)&v210 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_1000039AC(&qword_10036A730);
  v45 = __chkstk_darwin(v44);
  v251 = (uint64_t)&v210 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v271 = (uint64_t)&v210 - v47;
  v48 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  v261 = *(_QWORD *)(v48 - 8);
  v262 = v48;
  __chkstk_darwin(v48);
  v253 = (uint64_t)&v210 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = sub_1000039AC(&qword_10036DFC8);
  __chkstk_darwin(v260);
  v263 = (uint64_t)&v210 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1000039AC(&qword_10036A728);
  v52 = __chkstk_darwin(v51);
  v258 = (uint64_t)&v210 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v272 = (uint64_t)&v210 - v54;
  v269 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  v267 = *(_QWORD *)(v269 - 8);
  __chkstk_darwin(v269);
  v259 = (uint64_t)&v210 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = sub_1000039AC(&qword_10036DFD0);
  __chkstk_darwin(v266);
  v270 = (uint64_t)&v210 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_1000039AC(&qword_10036A720);
  v58 = __chkstk_darwin(v57);
  v264 = (uint64_t)&v210 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  v268 = (uint64_t)&v210 - v60;
  v274 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v61 = *(_QWORD *)(v274 - 8);
  __chkstk_darwin(v274);
  v265 = (uint64_t)&v210 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v273 = sub_1000039AC(&qword_10036DFD8);
  v63 = __chkstk_darwin(v273);
  v219 = (uint64_t)&v210 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v63);
  v66 = (char *)&v210 - v65;
  v67 = sub_1000039AC(&qword_10036A718);
  v68 = __chkstk_darwin(v67);
  v215 = (uint64_t)&v210 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __chkstk_darwin(v68);
  v218 = (uint64_t)&v210 - v71;
  v72 = __chkstk_darwin(v70);
  v74 = (char *)&v210 - v73;
  __chkstk_darwin(v72);
  v76 = (char *)&v210 - v75;
  swift_beginAccess(a1 + 16, v296, 0, 0);
  v77 = *(unsigned __int8 *)(a1 + 16);
  swift_beginAccess(a2 + 16, v295, 0, 0);
  v78 = *(unsigned __int8 *)(a2 + 16);
  if (v77 == 13)
  {
    if (v78 != 13)
      return 0;
LABEL_6:
    v213 = v6;
    v214 = v8;
    v80 = a2;
    v81 = a1;
    v82 = a1
        + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
    swift_beginAccess(v82, v294, 0, 0);
    sub_10000E660(v82, (uint64_t)v76, &qword_10036A718);
    v83 = a2
        + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
    swift_beginAccess(v83, v293, 0, 0);
    v84 = (uint64_t)&v66[*(int *)(v273 + 48)];
    sub_10000E660((uint64_t)v76, (uint64_t)v66, &qword_10036A718);
    sub_10000E660(v83, v84, &qword_10036A718);
    v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
    v86 = v274;
    if (v85((uint64_t)v66, 1, v274) == 1)
    {
      swift_retain(v81);
      swift_retain(v80);
      sub_100015704((uint64_t)v76, &qword_10036A718);
      if (v85(v84, 1, v86) == 1)
      {
        v211 = v85;
        sub_100015704((uint64_t)v66, &qword_10036A718);
        v87 = v80;
        goto LABEL_13;
      }
    }
    else
    {
      sub_10000E660((uint64_t)v66, (uint64_t)v74, &qword_10036A718);
      if (v85(v84, 1, v86) != 1)
      {
        v211 = v85;
        v89 = v265;
        sub_100003E08(v84, v265, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        swift_retain(v81);
        v87 = v80;
        swift_retain(v80);
        v90 = sub_1000654F4((uint64_t)v74, v89, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        sub_100004030(v89, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        sub_100015704((uint64_t)v76, &qword_10036A718);
        sub_100004030((uint64_t)v74, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        sub_100015704((uint64_t)v66, &qword_10036A718);
        if ((v90 & 1) != 0)
        {
LABEL_13:
          v212 = v81;
          v91 = v81
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
          swift_beginAccess(v81+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, v292, 0, 0);
          v92 = v268;
          sub_10000E660(v91, v268, &qword_10036A720);
          v93 = v87
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
          swift_beginAccess(v87+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, v291, 0, 0);
          v94 = v270;
          v95 = v270 + *(int *)(v266 + 48);
          sub_10000E660(v92, v270, &qword_10036A720);
          v96 = v94;
          sub_10000E660(v93, v95, &qword_10036A720);
          v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v267 + 48);
          v98 = v94;
          v99 = v269;
          v100 = v87;
          if (v97(v98, 1, v269) == 1)
          {
            sub_100015704(v92, &qword_10036A720);
            v101 = v97(v95, 1, v99);
            v102 = v212;
            v103 = v271;
            v104 = v272;
            if (v101 == 1)
            {
              sub_100015704(v96, &qword_10036A720);
LABEL_22:
              v113 = v102;
              v114 = v102
                   + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
              swift_beginAccess(v114, v290, 0, 0);
              sub_10000E660(v114, v104, &qword_10036A728);
              v115 = v100;
              v116 = v100
                   + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
              swift_beginAccess(v116, &v289, 0, 0);
              v117 = v263;
              v118 = v263 + *(int *)(v260 + 48);
              sub_10000E660(v104, v263, &qword_10036A728);
              sub_10000E660(v116, v118, &qword_10036A728);
              v119 = v262;
              v120 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v261 + 48);
              if (v120(v117, 1, v262) == 1)
              {
                sub_100015704(v104, &qword_10036A728);
                v121 = v120(v118, 1, v119);
                v100 = v115;
                if (v121 == 1)
                {
                  sub_100015704(v117, &qword_10036A728);
                  v122 = v113;
LABEL_29:
                  v126 = v122
                       + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
                  swift_beginAccess(v122+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, &v288, 0, 0);
                  sub_10000E660(v126, v103, &qword_10036A730);
                  v127 = v100
                       + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
                  swift_beginAccess(v100+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, &v287, 0, 0);
                  v128 = v257;
                  v129 = v257 + *(int *)(v254 + 48);
                  sub_10000E660(v103, v257, &qword_10036A730);
                  sub_10000E660(v127, v129, &qword_10036A730);
                  v130 = v256;
                  v131 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v255 + 48);
                  if (v131(v128, 1, v256) == 1)
                  {
                    sub_100015704(v103, &qword_10036A730);
                    if (v131(v129, 1, v130) == 1)
                    {
                      sub_100015704(v128, &qword_10036A730);
                      goto LABEL_36;
                    }
LABEL_34:
                    v133 = &qword_10036DFC0;
                    goto LABEL_42;
                  }
                  v132 = v251;
                  sub_10000E660(v128, v251, &qword_10036A730);
                  if (v131(v129, 1, v130) == 1)
                  {
                    sub_100015704(v271, &qword_10036A730);
                    sub_100004030(v132, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                    goto LABEL_34;
                  }
                  v134 = v245;
                  sub_100003E08(v129, v245, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                  v135 = sub_100062BCC(v132, v134, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                  sub_100004030(v134, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                  sub_100015704(v271, &qword_10036A730);
                  sub_100004030(v132, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                  sub_100015704(v128, &qword_10036A730);
                  if ((v135 & 1) != 0)
                  {
LABEL_36:
                    v136 = v122
                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
                    swift_beginAccess(v122+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, &v286, 0, 0);
                    v137 = v252;
                    sub_10000E660(v136, v252, &qword_10036A738);
                    v138 = v100
                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
                    swift_beginAccess(v100+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, &v285, 0, 0);
                    v128 = v249;
                    v139 = v249 + *(int *)(v246 + 48);
                    sub_10000E660(v137, v249, &qword_10036A738);
                    sub_10000E660(v138, v139, &qword_10036A738);
                    v140 = v248;
                    v141 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v247 + 48);
                    if (v141(v128, 1, v248) == 1)
                    {
                      sub_100015704(v137, &qword_10036A738);
                      v142 = v141(v139, 1, v140);
                      v143 = v250;
                      if (v142 == 1)
                      {
                        sub_100015704(v128, &qword_10036A738);
                        goto LABEL_50;
                      }
                    }
                    else
                    {
                      v144 = v243;
                      sub_10000E660(v128, v243, &qword_10036A738);
                      v145 = v141(v139, 1, v140);
                      v143 = v250;
                      if (v145 != 1)
                      {
                        v147 = v237;
                        sub_100003E08(v139, v237, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        v148 = sub_1000654F4(v144, v147, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        sub_100004030(v147, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        sub_100015704(v252, &qword_10036A738);
                        sub_100004030(v144, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        sub_100015704(v128, &qword_10036A738);
                        if ((v148 & 1) == 0)
                          goto LABEL_44;
LABEL_50:
                        v149 = v122
                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
                        swift_beginAccess(v122+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, &v284, 0, 0);
                        v150 = v149;
                        v151 = v244;
                        sub_10000E660(v150, v244, &qword_10036A740);
                        v152 = v100
                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
                        swift_beginAccess(v100+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, &v283, 0, 0);
                        v153 = v242;
                        v154 = v242 + *(int *)(v239 + 48);
                        sub_10000E660(v151, v242, &qword_10036A740);
                        sub_10000E660(v152, v154, &qword_10036A740);
                        v155 = v241;
                        v156 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v240 + 48);
                        if (v156(v153, 1, v241) == 1)
                        {
                          sub_100015704(v151, &qword_10036A740);
                          v157 = v156(v154, 1, v155);
                          v158 = (uint64_t)v238;
                          if (v157 == 1)
                          {
                            sub_100015704(v153, &qword_10036A740);
                            goto LABEL_57;
                          }
                        }
                        else
                        {
                          v159 = v236;
                          sub_10000E660(v153, v236, &qword_10036A740);
                          v160 = v156(v154, 1, v155);
                          v158 = (uint64_t)v238;
                          if (v160 != 1)
                          {
                            v161 = v154;
                            v162 = v159;
                            v163 = v231;
                            sub_100003E08(v161, v231, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            LODWORD(v272) = sub_1000654F4(v162, v163, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            sub_100004030(v163, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            sub_100015704(v244, &qword_10036A740);
                            sub_100004030(v162, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            sub_100015704(v153, &qword_10036A740);
                            if ((v272 & 1) == 0)
                              goto LABEL_44;
LABEL_57:
                            v164 = v122
                                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
                            swift_beginAccess(v122+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, &v282, 0, 0);
                            sub_10000E660(v164, v143, &qword_10036A748);
                            v165 = v100
                                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
                            swift_beginAccess(v100+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, &v281, 0, 0);
                            v166 = v143;
                            v167 = v235;
                            v168 = v235 + *(int *)(v232 + 48);
                            sub_10000E660(v166, v235, &qword_10036A748);
                            v169 = v165;
                            v128 = v167;
                            sub_10000E660(v169, v168, &qword_10036A748);
                            v170 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v233 + 48);
                            v171 = v167;
                            v172 = v234;
                            if (v170(v171, 1, v234) == 1)
                            {
                              sub_100015704(v166, &qword_10036A748);
                              if (v170(v168, 1, v172) == 1)
                              {
                                sub_100015704(v128, &qword_10036A748);
LABEL_64:
                                v176 = v122
                                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
                                swift_beginAccess(v122+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, &v280, 0, 0);
                                v177 = v230;
                                sub_10000E660(v176, v230, &qword_10036A750);
                                v178 = v100
                                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
                                swift_beginAccess(v100+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, &v279, 0, 0);
                                v179 = v228;
                                v180 = v228 + *(int *)(v225 + 48);
                                sub_10000E660(v177, v228, &qword_10036A750);
                                v181 = v178;
                                v128 = v179;
                                sub_10000E660(v181, v180, &qword_10036A750);
                                v182 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v226 + 48);
                                v183 = v179;
                                v184 = v227;
                                if (v182(v183, 1, v227) == 1)
                                {
                                  sub_100015704(v177, &qword_10036A750);
                                  if (v182(v180, 1, v184) == 1)
                                  {
                                    sub_100015704(v128, &qword_10036A750);
LABEL_71:
                                    v187 = v122
                                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
                                    swift_beginAccess(v122+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, &v278, 0, 0);
                                    v188 = v224;
                                    sub_10000E660(v187, v224, &qword_10036A758);
                                    v189 = v100
                                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
                                    swift_beginAccess(v100+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, &v277, 0, 0);
                                    v190 = (uint64_t)v214;
                                    v191 = (uint64_t)&v214[*(int *)(v220 + 48)];
                                    sub_10000E660(v188, (uint64_t)v214, &qword_10036A758);
                                    v192 = v189;
                                    v128 = v190;
                                    sub_10000E660(v192, v191, &qword_10036A758);
                                    v193 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v221 + 48);
                                    v194 = v190;
                                    v195 = v222;
                                    if (v193(v194, 1, v222) == 1)
                                    {
                                      sub_100015704(v224, &qword_10036A758);
                                      if (v193(v191, 1, v195) == 1)
                                      {
                                        sub_100015704(v128, &qword_10036A758);
LABEL_78:
                                        v199 = v122
                                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
                                        swift_beginAccess(v122+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, &v276, 0, 0);
                                        v200 = v218;
                                        sub_10000E660(v199, v218, &qword_10036A718);
                                        v201 = v100;
                                        v202 = v100
                                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
                                        swift_beginAccess(v100+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, &v275, 0, 0);
                                        v203 = v219;
                                        v204 = v219 + *(int *)(v273 + 48);
                                        sub_10000E660(v200, v219, &qword_10036A718);
                                        sub_10000E660(v202, v204, &qword_10036A718);
                                        v205 = v274;
                                        v206 = v211;
                                        if (v211(v203, 1, v274) == 1)
                                        {
                                          swift_release(v212);
                                          swift_release(v201);
                                          sub_100015704(v218, &qword_10036A718);
                                          if (v206(v204, 1, v205) == 1)
                                          {
                                            sub_100015704(v219, &qword_10036A718);
                                            return 1;
                                          }
                                          goto LABEL_83;
                                        }
                                        sub_10000E660(v219, v215, &qword_10036A718);
                                        if (v206(v204, 1, v205) == 1)
                                        {
                                          swift_release(v212);
                                          swift_release(v201);
                                          sub_100015704(v218, &qword_10036A718);
                                          sub_100004030(v215, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
LABEL_83:
                                          sub_100015704(v219, &qword_10036DFD8);
                                          return 0;
                                        }
                                        v207 = v265;
                                        sub_100003E08(v204, v265, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        v208 = v215;
                                        v209 = sub_1000654F4(v215, v207, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        swift_release(v212);
                                        swift_release(v201);
                                        sub_100004030(v207, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        sub_100015704(v218, &qword_10036A718);
                                        sub_100004030(v208, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        sub_100015704(v219, &qword_10036A718);
                                        return (v209 & 1) != 0;
                                      }
                                    }
                                    else
                                    {
                                      v196 = v216;
                                      sub_10000E660(v128, v216, &qword_10036A758);
                                      if (v193(v191, 1, v195) != 1)
                                      {
                                        v197 = (uint64_t)v213;
                                        sub_100003E08(v191, (uint64_t)v213, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                        v198 = sub_100062850(v196, v197);
                                        sub_100004030(v197, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                        sub_100015704(v224, &qword_10036A758);
                                        sub_100004030(v196, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                        sub_100015704((uint64_t)v214, &qword_10036A758);
                                        if ((v198 & 1) != 0)
                                          goto LABEL_78;
                                        goto LABEL_44;
                                      }
                                      sub_100015704(v224, &qword_10036A758);
                                      sub_100004030(v196, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                      v128 = (uint64_t)v214;
                                    }
                                    v133 = &qword_10036DF98;
                                    goto LABEL_42;
                                  }
                                }
                                else
                                {
                                  sub_10000E660(v128, v158, &qword_10036A750);
                                  if (v182(v180, 1, v184) != 1)
                                  {
                                    v185 = v217;
                                    sub_100003E08(v180, v217, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                    v186 = sub_100061ED8(v158, v185);
                                    sub_100004030(v185, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                    sub_100015704(v230, &qword_10036A750);
                                    sub_100004030(v158, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                    sub_100015704(v128, &qword_10036A750);
                                    if ((v186 & 1) == 0)
                                      goto LABEL_44;
                                    goto LABEL_71;
                                  }
                                  sub_100015704(v230, &qword_10036A750);
                                  sub_100004030(v158, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                }
                                v133 = &qword_10036DFA0;
LABEL_42:
                                v146 = v128;
LABEL_43:
                                sub_100015704(v146, v133);
                                goto LABEL_44;
                              }
                            }
                            else
                            {
                              v173 = v229;
                              sub_10000E660(v128, v229, &qword_10036A748);
                              if (v170(v168, 1, v172) != 1)
                              {
                                v174 = v223;
                                sub_100003E08(v168, v223, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                v175 = sub_1000654F4(v173, v174, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                sub_100004030(v174, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                sub_100015704(v250, &qword_10036A748);
                                sub_100004030(v173, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                sub_100015704(v128, &qword_10036A748);
                                if ((v175 & 1) == 0)
                                  goto LABEL_44;
                                goto LABEL_64;
                              }
                              sub_100015704(v250, &qword_10036A748);
                              sub_100004030(v173, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                            }
                            v133 = &qword_10036DFA8;
                            goto LABEL_42;
                          }
                          sub_100015704(v244, &qword_10036A740);
                          sub_100004030(v159, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                        }
                        v133 = &qword_10036DFB0;
                        v146 = v153;
                        goto LABEL_43;
                      }
                      sub_100015704(v252, &qword_10036A738);
                      sub_100004030(v144, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                    }
                    v133 = &qword_10036DFB8;
                    goto LABEL_42;
                  }
LABEL_44:
                  v108 = v122;
                  goto LABEL_45;
                }
              }
              else
              {
                v123 = v258;
                sub_10000E660(v117, v258, &qword_10036A728);
                if (v120(v118, 1, v119) != 1)
                {
                  v124 = v253;
                  sub_100003E08(v118, v253, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                  v125 = sub_1000654F4(v123, v124, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                  sub_100004030(v124, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                  sub_100015704(v272, &qword_10036A728);
                  sub_100004030(v123, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                  sub_100015704(v117, &qword_10036A728);
                  v100 = v115;
                  v122 = v113;
                  if ((v125 & 1) == 0)
                    goto LABEL_44;
                  goto LABEL_29;
                }
                sub_100015704(v272, &qword_10036A728);
                sub_100004030(v123, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                v100 = v115;
              }
              sub_100015704(v117, &qword_10036DFC8);
              v108 = v113;
LABEL_45:
              swift_release(v108);
              v88 = v100;
              goto LABEL_46;
            }
          }
          else
          {
            v105 = v264;
            sub_10000E660(v96, v264, &qword_10036A720);
            v106 = v97(v95, 1, v99);
            v107 = v271;
            v104 = v272;
            if (v106 != 1)
            {
              v109 = v95;
              v110 = v92;
              v111 = v105;
              v112 = v259;
              sub_100003E08(v109, v259, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
              LODWORD(v269) = sub_100062BCC(v111, v112, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
              sub_100004030(v112, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
              sub_100015704(v110, &qword_10036A720);
              sub_100004030(v111, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
              sub_100015704(v96, &qword_10036A720);
              v102 = v212;
              v103 = v107;
              if ((v269 & 1) != 0)
                goto LABEL_22;
LABEL_19:
              v108 = v102;
              goto LABEL_45;
            }
            sub_100015704(v92, &qword_10036A720);
            sub_100004030(v105, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            v102 = v212;
          }
          sub_100015704(v96, &qword_10036DFD0);
          goto LABEL_19;
        }
        swift_release(v81);
        v88 = v80;
LABEL_46:
        swift_release(v88);
        return 0;
      }
      swift_retain(v81);
      swift_retain(v80);
      sub_100015704((uint64_t)v76, &qword_10036A718);
      sub_100004030((uint64_t)v74, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
    }
    sub_100015704((uint64_t)v66, &qword_10036DFD8);
    swift_release(v81);
    v88 = v80;
    goto LABEL_46;
  }
  result = 0;
  if (v78 != 13 && v77 == v78)
    goto LABEL_6;
  return result;
}

Swift::Int sub_100040B44()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &qword_10036A8B8, (uint64_t)&unk_1002C6504);
}

uint64_t sub_100040B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_1003874E0, &qword_1003874E8, (uint64_t)sub_10003CECC, a2);
}

uint64_t sub_100040B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003DAB0(a1, a2, a3);
}

uint64_t sub_100040B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003DED8(a1, a2, a3);
}

uint64_t sub_100040BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DDD8, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&unk_1002C647C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100040BF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003874D8, (uint64_t)qword_1003831A8, (uint64_t)sub_10003CB58, a1);
}

uint64_t sub_100040C10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AD00, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&unk_1002C6404);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100040C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AD00, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&unk_1002C6404);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100040CA0()
{
  return &unk_1003521C0;
}

unint64_t sub_100040CAC()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_100040CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003831C0);
  sub_10000E6A4(v0, (uint64_t)qword_1003831C0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "time_nanoseconds";
  *(_QWORD *)(v9 + 8) = 16;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "time_unc_nanoseconds";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "uncertainty_adjusted_by_external_tool";
  *(_QWORD *)(v14 + 8) = 37;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100040E5C()
{
  return sub_100008BD0(&qword_1003874F0, (uint64_t)qword_1003831C0, (uint64_t)sub_100040CC8);
}

uint64_t sub_100040E78@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003874F0, (uint64_t)qword_1003831C0, (uint64_t)sub_100040CC8, a1);
}

uint64_t sub_100040E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004121C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100040EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100041320(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100040ECC(uint64_t a1, uint64_t a2)
{
  return sub_1000658A4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvTime) & 1;
}

Swift::Int sub_100040EEC()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, &qword_10036A8C0, (uint64_t)&unk_1002C666C);
}

uint64_t sub_100040F08@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100042F04(a1, 2, a2);
}

uint64_t sub_100040F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DDD0, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&unk_1002C65E4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100040F60@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003874F0, (uint64_t)qword_1003831C0, (uint64_t)sub_100040CC8, a1);
}

uint64_t sub_100040F7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AD18, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&unk_1002C656C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100040FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AD18, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&unk_1002C656C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004100C()
{
  return &unk_1003521D0;
}

unint64_t sub_100041018()
{
  return 0xD000000000000028;
}

uint64_t sub_100041034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003831D8);
  sub_10000E6A4(v0, (uint64_t)qword_1003831D8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "frequency_offset_ppb";
  *(_QWORD *)(v9 + 8) = 20;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "frequency_offset_unc_ppb";
  *((_QWORD *)v13 + 1) = 24;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "uncertainty_adjusted_by_external_tool";
  *(_QWORD *)(v14 + 8) = 37;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000411C8()
{
  return sub_100008BD0(&qword_1003874F8, (uint64_t)qword_1003831D8, (uint64_t)sub_100041034);
}

uint64_t sub_1000411E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003874F8, (uint64_t)qword_1003831D8, (uint64_t)sub_100041034, a1);
}

uint64_t sub_100041200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004121C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10004121C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t result;
  char v13;
  uint64_t v14;

  v9 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    if (v5 || (v13 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        v14 = a4(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)(v4 + *(int *)(v14 + 28), a2, a3);
        break;
      case 2:
        v11 = *(int *)(a4(0) + 24);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v4 + v11, a2, a3);
        break;
      case 1:
        v11 = *(int *)(a4(0) + 20);
        goto LABEL_3;
    }
    v5 = 0;
    v9 = a2;
  }
  return result;
}

uint64_t sub_100041304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100041320(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100041320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v6 = v4;
  result = a4(0);
  v11 = result;
  v12 = v6 + *(int *)(result + 20);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v12);
  if (!v5)
  {
    v13 = v6 + *(int *)(v11 + 24);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v13);
    v14 = *(unsigned __int8 *)(v6 + *(int *)(v11 + 28));
    if (v14 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 3, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100041418(uint64_t a1, uint64_t a2)
{
  return sub_1000658A4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset) & 1;
}

Swift::Int sub_100041438()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, &qword_10036A8C8, (uint64_t)&unk_1002C67D4);
}

uint64_t sub_100041454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DDC8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&unk_1002C674C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000414A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003874F8, (uint64_t)qword_1003831D8, (uint64_t)sub_100041034, a1);
}

uint64_t sub_1000414C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AD30, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&unk_1002C66D4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100041500(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AD30, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&unk_1002C66D4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100041554()
{
  return &unk_1003521E0;
}

unint64_t sub_100041560()
{
  return 0xD000000000000039;
}

uint64_t sub_10004157C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003831F0);
  sub_10000E6A4(v0, (uint64_t)qword_1003831F0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "frequency_offset_ppb";
  *(_QWORD *)(v9 + 8) = 20;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "frequency_offset_unc_ppb";
  *(_QWORD *)(v13 + 8) = 24;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "cycle_slip_detected";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "uncertainty_adjusted_by_external_tool";
  *((_QWORD *)v17 + 1) = 37;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004173C()
{
  return sub_100008BD0(&qword_100387500, (uint64_t)qword_1003831F0, (uint64_t)sub_10004157C);
}

uint64_t sub_100041758@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387500, (uint64_t)qword_1003831F0, (uint64_t)sub_10004157C, a1);
}

uint64_t sub_100041774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 20);
          goto LABEL_5;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 24);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 3:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 28);
          goto LABEL_11;
        case 4:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 32);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v10, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100041880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v11);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3, a2, a3);
    v14 = *(unsigned __int8 *)(v5 + v10[8]);
    if (v14 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 4, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000419B0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, &qword_10036A8D0, (uint64_t)&unk_1002C693C);
}

uint64_t sub_1000419CC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v8) = 2;
  return result;
}

uint64_t sub_100041A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100041774(a1, a2, a3);
}

uint64_t sub_100041A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100041880(a1, a2, a3);
}

uint64_t sub_100041A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DDC0, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&unk_1002C68B4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100041A98@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387500, (uint64_t)qword_1003831F0, (uint64_t)sub_10004157C, a1);
}

uint64_t sub_100041AB4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AD48, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&unk_1002C683C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100041AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AD48, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&unk_1002C683C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100041B44()
{
  return &unk_1003521F0;
}

unint64_t sub_100041B50()
{
  return 0xD000000000000026;
}

uint64_t sub_100041B6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383208);
  sub_10000E6A4(v0, (uint64_t)qword_100383208);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "phase_start_time_nanoseconds";
  *(_QWORD *)(v9 + 8) = 28;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "phase_end_time_nanoseconds";
  *(_QWORD *)(v13 + 8) = 26;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "accumulated_phase_nanoseconds";
  *((_QWORD *)v15 + 1) = 29;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "accumulated_phase_unc_nanoseconds";
  *((_QWORD *)v17 + 1) = 33;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "cycle_slips_detected";
  *(_QWORD *)(v18 + 8) = 20;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100041D70()
{
  return sub_100008BD0(&qword_100387508, (uint64_t)qword_100383208, (uint64_t)sub_100041B6C);
}

uint64_t sub_100041D8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387508, (uint64_t)qword_100383208, (uint64_t)sub_100041B6C, a1);
}

uint64_t sub_100041DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 20);
          goto LABEL_12;
        case 2:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 24);
LABEL_12:
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + v12, a2, a3);
          goto LABEL_6;
        case 3:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 28);
          goto LABEL_5;
        case 4:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 32);
LABEL_5:
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v10, a2, a3);
          goto LABEL_6;
        case 5:
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v13 + 36), a2, a3);
LABEL_6:
          v9 = v11;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100041ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v12, 2, a2, a3);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v14);
    v15 = *(unsigned __int8 *)(v5 + v10[9]);
    if (v15 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 5, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10004202C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, &qword_10036A8D8, (uint64_t)&unk_1002C6AA4);
}

uint64_t sub_100042048@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a2 + v8;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_1000420B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100041DA8(a1, a2, a3);
}

uint64_t sub_1000420C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100041ECC(a1, a2, a3);
}

uint64_t sub_1000420DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DDB8, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&unk_1002C6A1C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004212C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387508, (uint64_t)qword_100383208, (uint64_t)sub_100041B6C, a1);
}

uint64_t sub_100042148(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AD60, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&unk_1002C69A4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100042188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AD60, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&unk_1002C69A4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000421D8()
{
  return &unk_100352200;
}

unint64_t sub_1000421E4()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_100042200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383220);
  sub_10000E6A4(v0, (uint64_t)qword_100383220);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "sv_time";
  *(_QWORD *)(v9 + 8) = 7;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "frequency_offset";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "cn0_dbhz";
  *(_QWORD *)(v14 + 8) = 8;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100042394()
{
  return sub_100008BD0(&qword_100387510, (uint64_t)qword_100383220, (uint64_t)sub_100042200);
}

uint64_t sub_1000423B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387510, (uint64_t)qword_100383220, (uint64_t)sub_100042200, a1);
}

uint64_t sub_1000423CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t v15;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      switch(result)
      {
        case 3:
          v9 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + *(int *)(v9 + 28), a2, a3);
          goto LABEL_12;
        case 2:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 24);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
          v12 = &qword_10036AD30;
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset;
          v14 = &unk_1002C66D4;
          break;
        case 1:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 20);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
          v12 = &qword_10036AD18;
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime;
          v14 = &unk_1002C656C;
          break;
        default:
          goto LABEL_12;
      }
      v15 = sub_10000FD38(v12, v13, (uint64_t)v14);
      dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v15, a2, a3);
LABEL_12:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100042530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;

  v5 = v3;
  result = sub_1000425FC(v5, a1, a2, a3);
  if (!v4)
  {
    sub_100042770(v5, a1, a2, a3);
    v10 = v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 28);
    if ((*(_BYTE *)(v10 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v10);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000425FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A760);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  sub_10000E660(a1 + *(int *)(v13 + 20), (uint64_t)v8, &qword_10036A760);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A760);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  v15 = sub_10000FD38(&qword_10036AD18, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&unk_1002C656C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100042770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A768);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036A768);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A768);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  v15 = sub_10000FD38(&qword_10036AD30, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&unk_1002C66D4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

Swift::Int sub_1000428E8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &qword_10036A8E0, (uint64_t)&unk_1002C6C0C);
}

uint64_t sub_100042904@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + a1[6];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = a2 + a1[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_10004299C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000423CC(a1, a2, a3);
}

uint64_t sub_1000429B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100042530(a1, a2, a3);
}

uint64_t sub_1000429C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DDB0, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&unk_1002C6B84);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100042A14@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387510, (uint64_t)qword_100383220, (uint64_t)sub_100042200, a1);
}

uint64_t sub_100042A30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AD78, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&unk_1002C6B0C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100042A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AD78, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&unk_1002C6B0C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100042AC4()
{
  return &unk_100352210;
}

unint64_t sub_100042AD0()
{
  return 0xD000000000000023;
}

uint64_t sub_100042AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383238);
  sub_10000E6A4(v0, (uint64_t)qword_100383238);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "derived_full_sv_time_nanoseconds";
  *(_QWORD *)(v9 + 8) = 32;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "derived_full_sv_time_unc_nanoseconds";
  *((_QWORD *)v13 + 1) = 36;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "full_sv_time_source";
  *(_QWORD *)(v14 + 8) = 19;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100042C80()
{
  return sub_100008BD0(&qword_100387518, (uint64_t)qword_100383238, (uint64_t)sub_100042AEC);
}

uint64_t sub_100042C9C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387518, (uint64_t)qword_100383238, (uint64_t)sub_100042AEC, a1);
}

uint64_t sub_100042CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      switch(result)
      {
        case 3:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 28);
          v10 = sub_10007FB3C();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v9, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource, v10, a2, a3);
          goto LABEL_12;
        case 2:
          v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 24);
          break;
        case 1:
          v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 20);
          break;
        default:
          goto LABEL_12;
      }
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v11, a2, a3);
LABEL_12:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100042DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  v10 = result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v11);
  if (!v4)
  {
    v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    if (*(_BYTE *)(v5 + *(int *)(v10 + 28)) != 6)
    {
      v14 = *(_BYTE *)(v5 + *(int *)(v10 + 28));
      v13 = sub_10007FB3C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v14, 3, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource, v13, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_100042EE0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, &qword_10036A8E8, (uint64_t)&unk_1002C6D74);
}

uint64_t sub_100042EFC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100042F04(a1, 6, a2);
}

uint64_t sub_100042F04@<X0>(int *a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = UnknownStorage.init()();
  v7 = a1[6];
  v8 = a3 + a1[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a3 + v7;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a3 + a1[7]) = a2;
  return result;
}

uint64_t sub_100042F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100042CB8(a1, a2, a3);
}

uint64_t sub_100042F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100042DC8(a1, a2, a3);
}

uint64_t sub_100042F84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DDA8, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&unk_1002C6CEC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100042FD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387518, (uint64_t)qword_100383238, (uint64_t)sub_100042AEC, a1);
}

uint64_t sub_100042FF0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AD90, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&unk_1002C6C74);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100043030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AD90, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&unk_1002C6C74);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100043080()
{
  return &unk_100352220;
}

unint64_t sub_10004308C()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1000430A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383250);
  sub_10000E6A4(v0, (uint64_t)qword_100383250);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "innovation";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "residual";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "final_uncertainty";
  *(_QWORD *)(v14 + 8) = 17;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100043244()
{
  return sub_100008BD0(&qword_100387520, (uint64_t)qword_100383250, (uint64_t)sub_1000430A8);
}

uint64_t sub_100043260@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387520, (uint64_t)qword_100383250, (uint64_t)sub_1000430A8, a1);
}

uint64_t sub_10004327C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v9, a2, a3);
        break;
      case 2:
        v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 24);
        goto LABEL_3;
      case 1:
        v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 20);
        goto LABEL_3;
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_100043340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v10 = result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(1, a2, a3, *(float *)v11);
  if (!v4)
  {
    v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2, a2, a3, *(float *)v12);
    v13 = v5 + *(int *)(v10 + 28);
    if ((*(_BYTE *)(v13 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v13);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10004343C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, &qword_10036A8F0, (uint64_t)&unk_1002C6EDC);
}

uint64_t sub_100043458@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a2 + a1[7];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_1000434AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004327C(a1, a2, a3);
}

uint64_t sub_1000434C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100043340(a1, a2, a3);
}

uint64_t sub_1000434D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DDA0, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&unk_1002C6E54);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100043524@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387520, (uint64_t)qword_100383250, (uint64_t)sub_1000430A8, a1);
}

uint64_t sub_100043540(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036ADA8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&unk_1002C6DDC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100043580(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036ADA8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&unk_1002C6DDC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000435D0()
{
  return &unk_100352230;
}

unint64_t sub_1000435DC()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_1000435F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v41;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383268);
  sub_10000E6A4(v0, (uint64_t)qword_100383268);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v41 = swift_allocObject(v1, v6 + 16 * v4, v5 | 7);
  *(_OWORD *)(v41 + 16) = xmmword_1002C40F0;
  v7 = v41 + v6;
  v8 = v41 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v41 + v6) = 1;
  *(_QWORD *)v8 = "jammer_cn0_dbHz";
  *(_QWORD *)(v8 + 8) = 15;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "snr_at_correlator_output";
  *(_QWORD *)(v12 + 8) = 24;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "full_sv_time";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "sv_time_usage_nanoseconds";
  *((_QWORD *)v16 + 1) = 25;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "frequency_offset_usage_ppb";
  *((_QWORD *)v18 + 1) = 26;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "carrier_phase_usage_nanoseconds";
  *((_QWORD *)v20 + 1) = 31;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "noncoherent_interval_count";
  *((_QWORD *)v22 + 1) = 26;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "coherent_integration_ms";
  *((_QWORD *)v24 + 1) = 23;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "sv_time_detection_method";
  *(_QWORD *)(v25 + 8) = 24;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "frequency_detection_method";
  *((_QWORD *)v27 + 1) = 26;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "channel_id";
  *((_QWORD *)v29 + 1) = 10;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v7 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "code_lock_duration_seconds";
  *((_QWORD *)v31 + 1) = 26;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v7 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "frequency_lock_duration_seconds";
  *((_QWORD *)v33 + 1) = 31;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v7 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "metadata";
  *((_QWORD *)v35 + 1) = 8;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v7 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "metadata_format";
  *((_QWORD *)v37 + 1) = 15;
  v37[16] = 2;
  v11();
  v38 = (_QWORD *)(v7 + 15 * v4);
  v39 = (char *)v38 + *(int *)(v2 + 48);
  *v38 = 16;
  *(_QWORD *)v39 = "top_correlation_peaks";
  *((_QWORD *)v39 + 1) = 21;
  v39[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v41);
}

uint64_t sub_100043A40()
{
  return sub_100008BD0(&qword_100387528, (uint64_t)qword_100383268, (uint64_t)sub_1000435F8);
}

uint64_t sub_100043A5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387528, (uint64_t)qword_100383268, (uint64_t)sub_1000435F8, a1);
}

double sub_100043A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_DWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 20) = 1;
  *(_DWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 28) = 1;
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(v1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, 1, 1, v5);
  v6(v1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, 1, 1, v5);
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod) = 7;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod) = 7;
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  result = 0.0;
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata) = xmmword_1002C40A0;
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks) = &_swiftEmptyArrayStorage;
  qword_100387538 = v1;
  return result;
}

uint64_t sub_100043C2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE v89[24];
  _BYTE v90[24];
  _BYTE v91[24];
  _BYTE v92[24];
  _BYTE v93[24];
  _BYTE v94[24];
  _BYTE v95[24];
  _BYTE v96[24];
  _BYTE v97[32];

  v3 = sub_1000039AC(&qword_10036A778);
  __chkstk_darwin(v3);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036A770);
  __chkstk_darwin(v6);
  v58 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 20) = 1;
  *(_DWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 28) = 1;
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  v57 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  v59 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v10, 1, 1, v11);
  v60 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  v12();
  v61 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  v12();
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v62 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod) = 7;
  v15 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  *v15 = 7;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  v63 = v15;
  v64 = v16;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  v65 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  v66 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  v67 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata) = xmmword_1002C40A0;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  v68 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  v69 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks) = &_swiftEmptyArrayStorage;
  swift_beginAccess(a1 + 16, v97, 0, 0);
  v20 = *(_DWORD *)(a1 + 16);
  LOBYTE(v10) = *(_BYTE *)(a1 + 20);
  swift_beginAccess(v1 + 16, v96, 1, 0);
  *(_DWORD *)(v1 + 16) = v20;
  *(_BYTE *)(v1 + 20) = v10;
  swift_beginAccess(a1 + 24, v95, 0, 0);
  v21 = *(_DWORD *)(a1 + 24);
  v22 = *(_BYTE *)(a1 + 28);
  swift_beginAccess(v1 + 24, v94, 1, 0);
  *(_DWORD *)(v1 + 24) = v21;
  *(_BYTE *)(v1 + 28) = v22;
  v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, v93, 0, 0);
  v24 = v58;
  sub_10000E660(v23, v58, &qword_10036A770);
  v25 = v57;
  swift_beginAccess(v57, v92, 33, 0);
  sub_10000E574(v24, v25, &qword_10036A770);
  swift_endAccess(v92);
  v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, v92, 0, 0);
  sub_10000E660(v26, (uint64_t)v5, &qword_10036A778);
  v27 = v59;
  swift_beginAccess(v59, v91, 33, 0);
  sub_10000E574((uint64_t)v5, v27, &qword_10036A778);
  swift_endAccess(v91);
  v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, v91, 0, 0);
  sub_10000E660(v28, (uint64_t)v5, &qword_10036A778);
  v29 = v60;
  swift_beginAccess(v60, v90, 33, 0);
  sub_10000E574((uint64_t)v5, v29, &qword_10036A778);
  swift_endAccess(v90);
  v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, v90, 0, 0);
  sub_10000E660(v30, (uint64_t)v5, &qword_10036A778);
  v31 = v61;
  swift_beginAccess(v61, v89, 33, 0);
  sub_10000E574((uint64_t)v5, v31, &qword_10036A778);
  swift_endAccess(v89);
  v32 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount, v89, 0, 0);
  LODWORD(v31) = *(_DWORD *)v32;
  LOBYTE(v32) = *(_BYTE *)(v32 + 4);
  swift_beginAccess(v13, &v88, 1, 0);
  *(_DWORD *)v13 = v31;
  *(_BYTE *)(v13 + 4) = v32;
  v33 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs, &v87, 0, 0);
  LODWORD(v13) = *(_DWORD *)v33;
  LOBYTE(v33) = *(_BYTE *)(v33 + 4);
  swift_beginAccess(v14, &v86, 1, 0);
  *(_DWORD *)v14 = v13;
  *(_BYTE *)(v14 + 4) = v33;
  v34 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod, &v85, 0, 0);
  LOBYTE(v34) = *v34;
  v35 = v62;
  swift_beginAccess(v62, &v84, 1, 0);
  *v35 = (_BYTE)v34;
  v36 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod, &v83, 0, 0);
  LOBYTE(v36) = *v36;
  v37 = v63;
  swift_beginAccess(v63, &v82, 1, 0);
  *v37 = (_BYTE)v36;
  v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID, &v81, 0, 0);
  LODWORD(v37) = *(_DWORD *)v38;
  LOBYTE(v38) = *(_BYTE *)(v38 + 4);
  v39 = v64;
  swift_beginAccess(v64, &v80, 1, 0);
  *(_DWORD *)v39 = (_DWORD)v37;
  *(_BYTE *)(v39 + 4) = v38;
  v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds, &v79, 0, 0);
  LODWORD(v37) = *(_DWORD *)v40;
  LOBYTE(v40) = *(_BYTE *)(v40 + 4);
  v41 = v65;
  swift_beginAccess(v65, &v78, 1, 0);
  *(_DWORD *)v41 = (_DWORD)v37;
  *(_BYTE *)(v41 + 4) = v40;
  v42 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds, &v77, 0, 0);
  LODWORD(v37) = *(_DWORD *)v42;
  LOBYTE(v42) = *(_BYTE *)(v42 + 4);
  v43 = v66;
  swift_beginAccess(v66, &v76, 1, 0);
  *(_DWORD *)v43 = (_DWORD)v37;
  *(_BYTE *)(v43 + 4) = v42;
  v44 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata, &v75, 0, 0);
  v46 = *v44;
  v45 = v44[1];
  v47 = v67;
  swift_beginAccess(v67, &v74, 1, 0);
  v48 = *v47;
  v49 = v47[1];
  *v47 = v46;
  v47[1] = v45;
  sub_10005F298(v46, v45);
  sub_10005F2AC(v48, v49);
  v50 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat, &v73, 0, 0);
  LODWORD(v46) = *(_DWORD *)v50;
  LOBYTE(v50) = *(_BYTE *)(v50 + 4);
  v51 = v68;
  swift_beginAccess(v68, &v72, 1, 0);
  *(_DWORD *)v51 = v46;
  *(_BYTE *)(v51 + 4) = v50;
  v52 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks, &v71, 0, 0);
  v53 = *v52;
  swift_bridgeObjectRetain(v53);
  swift_release(a1);
  v54 = v69;
  swift_beginAccess(v69, &v70, 1, 0);
  v55 = *v54;
  *v54 = v53;
  swift_bridgeObjectRelease(v55);
  return v1;
}

uint64_t sub_10004437C()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, &qword_10036A770);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, &qword_10036A778);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, &qword_10036A778);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, &qword_10036A778);
  sub_10005F2AC(*(_QWORD *)(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata), *(_QWORD *)(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata+ 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100044424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];
  uint64_t v41;

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_100043C2C(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    v41 = v15 + 24;
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          swift_beginAccess(v15 + 16, v40, 33, 0);
          v19 = v15 + 16;
          goto LABEL_26;
        case 2:
          v20 = v41;
          goto LABEL_25;
        case 3:
          v21 = v15
              + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, v40, 33, 0);
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
          v23 = &qword_10036AD90;
          v24 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime;
          v25 = &unk_1002C6C74;
          goto LABEL_15;
        case 4:
          v26 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
          goto LABEL_14;
        case 5:
          v26 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
          goto LABEL_14;
        case 6:
          v26 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
LABEL_14:
          v21 = v15 + v26;
          swift_beginAccess(v15 + v26, v40, 33, 0);
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
          v23 = &qword_10036ADA8;
          v24 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage;
          v25 = &unk_1002C6DDC;
LABEL_15:
          v27 = sub_10000FD38(v23, v24, (uint64_t)v25);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v21, v22, v27, a2, a3);
          goto LABEL_31;
        case 7:
          v29 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
          goto LABEL_29;
        case 8:
          v29 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
          goto LABEL_29;
        case 9:
          v30 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod;
          goto LABEL_20;
        case 10:
          v30 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod;
LABEL_20:
          v31 = v15 + v30;
          swift_beginAccess(v15 + v30, v40, 33, 0);
          v32 = sub_10007FAF8();
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v31, &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod, v32, a2, a3);
          goto LABEL_31;
        case 11:
          v33 = v15
              + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID, v40, 33, 0);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v33, a2, a3);
          goto LABEL_31;
        case 12:
          v34 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
          goto LABEL_24;
        case 13:
          v34 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
LABEL_24:
          v20 = v15 + v34;
LABEL_25:
          swift_beginAccess(v20, v40, 33, 0);
          v19 = v20;
LABEL_26:
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v19, a2, a3);
          goto LABEL_31;
        case 14:
          v35 = v15
              + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata, v40, 33, 0);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)(v35, a2, a3);
          goto LABEL_31;
        case 15:
          v29 = OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
LABEL_29:
          v36 = v15 + v29;
          swift_beginAccess(v15 + v29, v40, 33, 0);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v36, a2, a3);
          goto LABEL_31;
        case 16:
          v37 = v15
              + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks, v40, 33, 0);
          v38 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          v39 = sub_10000FD38(&qword_10036AD78, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&unk_1002C6B0C);
          v28 = v5;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v37, v38, v39, a2, a3);
LABEL_31:
          v5 = v28;
          swift_endAccess(v40);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_100044828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unsigned int *v11;
  unsigned int *v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v30, 0, 0);
  if ((*(_BYTE *)(v9 + 20) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(1, a2, a3, *(float *)(v9 + 16));
  if (v4)
    return swift_release(v9);
  swift_beginAccess(v9 + 24, v31, 0, 0);
  if ((*(_BYTE *)(v9 + 28) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2, a2, a3, *(float *)(v9 + 24));
  sub_100044D34(v9, a1, a2, a3);
  sub_100044EC0(v9, a1, a2, a3);
  sub_10004504C(v9, a1, a2, a3);
  sub_1000451D8(v9, a1, a2, a3);
  v11 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount, v40, 0, 0);
  if ((v11[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 7, a2, a3);
  v12 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs, v39, 0, 0);
  if ((v12[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v12, 8, a2, a3);
  v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod, v38, 0, 0);
  if (*v13 != 7)
  {
    v37[0] = *v13;
    v14 = sub_10007FAF8();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v37, 9, &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod, v14, a2, a3);
  }
  v15 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod, v37, 0, 0);
  if (*v15 != 7)
  {
    v36[0] = *v15;
    v16 = sub_10007FAF8();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v36, 10, &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod, v16, a2, a3);
  }
  v17 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID, v36, 0, 0);
  if ((v17[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v17, 11, a2, a3);
  v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds, v35, 0, 0);
  if ((*(_BYTE *)(v18 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(12, a2, a3, *(float *)v18);
  v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds, v34, 0, 0);
  if ((*(_BYTE *)(v19 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(13, a2, a3, *(float *)v19);
  v20 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata, v33, 0, 0);
  v21 = v20[1];
  if (v21 >> 60 != 15)
  {
    v22 = *v20;
    sub_100017EF8(v22, v21);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v22, v21, 14, a2, a3);
    sub_10005F2AC(v22, v21);
  }
  v23 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat, v32, 0, 0);
  if ((v23[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v23, 15, a2, a3);
  v24 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks, &v29, 0, 0);
  v25 = *v24;
  if (*(_QWORD *)(v25 + 16))
  {
    v26 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
    v27 = sub_10000FD38(&qword_10036AD78, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&unk_1002C6B0C);
    v28 = swift_bridgeObjectRetain(v25);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v28, 16, v26, v27, a2, a3);
    swift_bridgeObjectRelease(v25);
  }
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100044D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A770);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A770);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A770);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  v15 = sub_10000FD38(&qword_10036AD90, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&unk_1002C6C74);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100044EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A778);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A778);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A778);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  v15 = sub_10000FD38(&qword_10036ADA8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&unk_1002C6DDC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_10004504C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A778);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A778);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A778);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  v15 = sub_10000FD38(&qword_10036ADA8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&unk_1002C6DDC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_1000451D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A778);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A778);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A778);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  v15 = sub_10000FD38(&qword_10036ADA8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&unk_1002C6DDC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100045364(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, sub_10004538C) & 1;
}

uint64_t sub_10004538C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  float v34;
  char v35;
  char v36;
  uint64_t v37;
  float v38;
  char v39;
  uint64_t v40;
  float *v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  char v88;
  int *v89;
  int v90;
  char v91;
  uint64_t v92;
  char v93;
  int *v94;
  int v95;
  char v96;
  uint64_t v97;
  char v98;
  unsigned __int8 *v99;
  int v100;
  unsigned __int8 *v101;
  int v102;
  unsigned __int8 *v103;
  int v104;
  unsigned __int8 *v105;
  int v106;
  int *v107;
  int v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  float v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  float v118;
  char v119;
  uint64_t v120;
  char v121;
  uint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  char v129;
  int *v130;
  int v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE v182[24];
  _BYTE v183[24];
  _BYTE v184[24];
  _BYTE v185[24];
  _BYTE v186[24];
  _BYTE v187[32];

  v149 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v147 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v144 = (uint64_t)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_1000039AC(&qword_10036DF88);
  v5 = __chkstk_darwin(v152);
  v141 = (uint64_t)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v143 = (uint64_t)&v139 - v8;
  __chkstk_darwin(v7);
  v148 = (uint64_t)&v139 - v9;
  v10 = sub_1000039AC(&qword_10036A778);
  v11 = __chkstk_darwin(v10);
  v140 = (uint64_t)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v150 = (uint64_t)&v139 - v14;
  v15 = __chkstk_darwin(v13);
  v142 = (uint64_t)&v139 - v16;
  v17 = __chkstk_darwin(v15);
  v153 = (uint64_t)&v139 - v18;
  v19 = __chkstk_darwin(v17);
  v145 = (uint64_t)&v139 - v20;
  __chkstk_darwin(v19);
  v151 = (uint64_t)&v139 - v21;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v146 = (uint64_t)&v139 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000039AC(&qword_10036DF90);
  __chkstk_darwin(v25);
  v27 = (char *)&v139 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1000039AC(&qword_10036A770);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v139 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v33 = (char *)&v139 - v32;
  swift_beginAccess(a1 + 16, v187, 0, 0);
  v34 = *(float *)(a1 + 16);
  v155 = a1;
  v35 = *(_BYTE *)(a1 + 20);
  swift_beginAccess(a2 + 16, v186, 0, 0);
  v154 = a2;
  v36 = *(_BYTE *)(a2 + 20);
  if ((v35 & 1) == 0)
  {
    if (v34 != *(float *)(a2 + 16))
      v36 = 1;
    if ((v36 & 1) != 0)
      goto LABEL_9;
LABEL_7:
    v37 = v155;
    swift_beginAccess(v155 + 24, v185, 0, 0);
    v38 = *(float *)(v37 + 24);
    v39 = *(_BYTE *)(v37 + 28);
    v40 = v154;
    v41 = (float *)(v154 + 24);
    swift_beginAccess(v154 + 24, v184, 0, 0);
    v42 = *(_BYTE *)(v40 + 28);
    if ((v39 & 1) != 0)
    {
      if (!*(_BYTE *)(v40 + 28))
        goto LABEL_9;
    }
    else
    {
      if (v38 != *v41)
        v42 = 1;
      if ((v42 & 1) != 0)
        goto LABEL_9;
    }
    v44 = v155
        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
    swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, v183, 0, 0);
    sub_10000E660(v44, (uint64_t)v33, &qword_10036A770);
    v45 = v154;
    v46 = v154
        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
    swift_beginAccess(v154+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, v182, 0, 0);
    v47 = (uint64_t)&v27[*(int *)(v25 + 48)];
    sub_10000E660((uint64_t)v33, (uint64_t)v27, &qword_10036A770);
    sub_10000E660(v46, v47, &qword_10036A770);
    v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
    if (v48((uint64_t)v27, 1, v22) == 1)
    {
      swift_retain(v155);
      swift_retain(v45);
      sub_100015704((uint64_t)v33, &qword_10036A770);
      v49 = v45;
      if (v48(v47, 1, v22) == 1)
      {
        sub_100015704((uint64_t)v27, &qword_10036A770);
        v50 = v153;
        goto LABEL_20;
      }
    }
    else
    {
      sub_10000E660((uint64_t)v27, (uint64_t)v31, &qword_10036A770);
      v51 = v48(v47, 1, v22);
      v50 = v153;
      if (v51 != 1)
      {
        v54 = v146;
        sub_100003E08(v47, v146, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        swift_retain(v155);
        v49 = v154;
        swift_retain(v154);
        v55 = sub_10006534C((uint64_t)v31, v54);
        sub_100004030(v54, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        sub_100015704((uint64_t)v33, &qword_10036A770);
        sub_100004030((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        sub_100015704((uint64_t)v27, &qword_10036A770);
        if ((v55 & 1) == 0)
          goto LABEL_41;
LABEL_20:
        v56 = v155
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
        swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, &v181, 0, 0);
        v57 = v151;
        sub_10000E660(v56, v151, &qword_10036A778);
        v58 = v49
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
        swift_beginAccess(v49+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, &v180, 0, 0);
        v59 = v148;
        v60 = v148 + *(int *)(v152 + 48);
        sub_10000E660(v57, v148, &qword_10036A778);
        sub_10000E660(v58, v60, &qword_10036A778);
        v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 48);
        v62 = v149;
        if (v61(v59, 1, v149) == 1)
        {
          sub_100015704(v57, &qword_10036A778);
          v63 = v61(v60, 1, v62);
          v64 = v150;
          if (v63 == 1)
          {
            sub_100015704(v59, &qword_10036A778);
            goto LABEL_27;
          }
        }
        else
        {
          v65 = v145;
          sub_10000E660(v59, v145, &qword_10036A778);
          if (v61(v60, 1, v62) != 1)
          {
            v66 = v150;
            v67 = v144;
            sub_100003E08(v60, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            v68 = sub_100061B44(v65, v67);
            sub_100004030(v67, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            sub_100015704(v151, &qword_10036A778);
            v64 = v66;
            v49 = v154;
            sub_100004030(v65, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            sub_100015704(v59, &qword_10036A778);
            if ((v68 & 1) == 0)
              goto LABEL_41;
LABEL_27:
            v69 = v155
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
            swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, &v179, 0, 0);
            sub_10000E660(v69, v50, &qword_10036A778);
            v70 = v49
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
            swift_beginAccess(v49+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, &v178, 0, 0);
            v71 = v50;
            v72 = v143;
            v73 = v143 + *(int *)(v152 + 48);
            sub_10000E660(v71, v143, &qword_10036A778);
            sub_10000E660(v70, v73, &qword_10036A778);
            if (v61(v72, 1, v62) == 1)
            {
              sub_100015704(v71, &qword_10036A778);
              if (v61(v73, 1, v62) == 1)
              {
                sub_100015704(v72, &qword_10036A778);
LABEL_34:
                v79 = v155
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
                swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, &v177, 0, 0);
                sub_10000E660(v79, v64, &qword_10036A778);
                v80 = v49
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
                swift_beginAccess(v49+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, &v176, 0, 0);
                v81 = v141;
                v82 = v141 + *(int *)(v152 + 48);
                sub_10000E660(v64, v141, &qword_10036A778);
                v83 = v81;
                sub_10000E660(v80, v82, &qword_10036A778);
                if (v61(v81, 1, v62) == 1)
                {
                  sub_100015704(v64, &qword_10036A778);
                  if (v61(v82, 1, v62) == 1)
                  {
                    sub_100015704(v81, &qword_10036A778);
LABEL_45:
                    v89 = (int *)(v155
                                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
                    swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount, &v175, 0, 0);
                    v90 = *v89;
                    v91 = *((_BYTE *)v89 + 4);
                    v92 = v49
                        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
                    swift_beginAccess(v49+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount, &v174, 0, 0);
                    v93 = *(_BYTE *)(v92 + 4);
                    if ((v91 & 1) != 0)
                    {
                      if (!*(_BYTE *)(v92 + 4))
                        goto LABEL_41;
                    }
                    else
                    {
                      if (v90 != *(_DWORD *)v92)
                        v93 = 1;
                      if ((v93 & 1) != 0)
                        goto LABEL_41;
                    }
                    v94 = (int *)(v155
                                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
                    swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs, &v173, 0, 0);
                    v95 = *v94;
                    v96 = *((_BYTE *)v94 + 4);
                    v97 = v49
                        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
                    swift_beginAccess(v49+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs, &v172, 0, 0);
                    v98 = *(_BYTE *)(v97 + 4);
                    if ((v96 & 1) != 0)
                    {
                      if (!*(_BYTE *)(v97 + 4))
                        goto LABEL_41;
                    }
                    else
                    {
                      if (v95 != *(_DWORD *)v97)
                        v98 = 1;
                      if ((v98 & 1) != 0)
                        goto LABEL_41;
                    }
                    v99 = (unsigned __int8 *)(v155
                                            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
                    swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod, &v171, 0, 0);
                    v100 = *v99;
                    v101 = (unsigned __int8 *)(v49
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
                    swift_beginAccess(v49+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod, &v170, 0, 0);
                    v102 = *v101;
                    if (v100 == 7)
                    {
                      if (v102 != 7)
                        goto LABEL_41;
                    }
                    else
                    {
                      v43 = 0;
                      if (v102 == 7 || v100 != v102)
                        goto LABEL_42;
                    }
                    v103 = (unsigned __int8 *)(v155
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
                    swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod, &v169, 0, 0);
                    v104 = *v103;
                    v105 = (unsigned __int8 *)(v49
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
                    swift_beginAccess(v49+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod, &v168, 0, 0);
                    v106 = *v105;
                    if (v104 == 7)
                    {
                      if (v106 != 7)
                        goto LABEL_41;
                    }
                    else
                    {
                      v43 = 0;
                      if (v106 == 7 || v104 != v106)
                        goto LABEL_42;
                    }
                    v107 = (int *)(v155
                                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
                    swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID, &v167, 0, 0);
                    v108 = *v107;
                    v109 = *((_BYTE *)v107 + 4);
                    v110 = v49
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
                    swift_beginAccess(v49+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID, &v166, 0, 0);
                    v111 = *(_BYTE *)(v110 + 4);
                    if ((v109 & 1) != 0)
                    {
                      if (!*(_BYTE *)(v110 + 4))
                        goto LABEL_41;
                    }
                    else
                    {
                      if (v108 != *(_DWORD *)v110)
                        v111 = 1;
                      if ((v111 & 1) != 0)
                        goto LABEL_41;
                    }
                    v112 = v155
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
                    swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds, &v165, 0, 0);
                    v113 = *(float *)v112;
                    v114 = *(_BYTE *)(v112 + 4);
                    v115 = v49
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
                    swift_beginAccess(v49+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds, &v164, 0, 0);
                    v116 = *(_BYTE *)(v115 + 4);
                    if ((v114 & 1) != 0)
                    {
                      if (*(_BYTE *)(v115 + 4))
                        goto LABEL_79;
                    }
                    else
                    {
                      if (v113 != *(float *)v115)
                        v116 = 1;
                      if ((v116 & 1) == 0)
                      {
LABEL_79:
                        v117 = v155
                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
                        swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds, &v163, 0, 0);
                        v118 = *(float *)v117;
                        v119 = *(_BYTE *)(v117 + 4);
                        v120 = v49
                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
                        swift_beginAccess(v49+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds, &v162, 0, 0);
                        v121 = *(_BYTE *)(v120 + 4);
                        if ((v119 & 1) != 0)
                        {
                          if (!*(_BYTE *)(v120 + 4))
                            goto LABEL_90;
                        }
                        else
                        {
                          if (v118 != *(float *)v120)
                            v121 = 1;
                          if ((v121 & 1) != 0)
                            goto LABEL_90;
                        }
                        v122 = (uint64_t *)(v155
                                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
                        swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata, &v161, 0, 0);
                        v123 = *v122;
                        v124 = v122[1];
                        v125 = (uint64_t *)(v154
                                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
                        swift_beginAccess(v154+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata, &v160, 0, 0);
                        v126 = *v125;
                        v127 = v125[1];
                        if (v124 >> 60 == 15)
                        {
                          if (v127 >> 60 == 15)
                          {
LABEL_92:
                            v130 = (int *)(v155
                                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
                            swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat, &v159, 0, 0);
                            v131 = *v130;
                            v132 = *((_BYTE *)v130 + 4);
                            v133 = v154
                                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
                            swift_beginAccess(v154+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat, &v158, 0, 0);
                            v134 = *(_BYTE *)(v133 + 4);
                            if ((v132 & 1) == 0)
                            {
                              if (v131 != *(_DWORD *)v133)
                                v134 = 1;
                              if ((v134 & 1) != 0)
                                goto LABEL_90;
LABEL_98:
                              v135 = (uint64_t *)(v155
                                               + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
                              swift_beginAccess(v155+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks, &v157, 0, 0);
                              v136 = *v135;
                              v49 = v154;
                              v137 = (uint64_t *)(v154
                                               + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
                              swift_beginAccess(v154+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks, &v156, 0, 0);
                              v138 = *v137;
                              swift_bridgeObjectRetain(v136);
                              swift_bridgeObjectRetain(v138);
                              v43 = sub_10005DF1C(v136, v138);
                              swift_bridgeObjectRelease(v136);
                              swift_bridgeObjectRelease(v138);
                              goto LABEL_42;
                            }
                            if (*(_BYTE *)(v133 + 4))
                              goto LABEL_98;
LABEL_90:
                            v43 = 0;
                            v49 = v154;
                            goto LABEL_42;
                          }
                        }
                        else if (v127 >> 60 != 15)
                        {
                          sub_10005F298(v123, v124);
                          sub_10005F298(v126, v127);
                          sub_100060048(v123, v124);
                          v129 = v128;
                          sub_10005F2AC(v126, v127);
                          sub_10005F2AC(v123, v124);
                          if ((v129 & 1) == 0)
                            goto LABEL_90;
                          goto LABEL_92;
                        }
                        sub_10005F298(v123, v124);
                        sub_10005F298(v126, v127);
                        sub_10005F2AC(v123, v124);
                        sub_10005F2AC(v126, v127);
                        goto LABEL_90;
                      }
                    }
LABEL_41:
                    v43 = 0;
LABEL_42:
                    swift_release(v155);
                    swift_release(v49);
                    return v43 & 1;
                  }
                }
                else
                {
                  v84 = v81;
                  v85 = v140;
                  sub_10000E660(v84, v140, &qword_10036A778);
                  if (v61(v82, 1, v62) != 1)
                  {
                    v87 = v144;
                    sub_100003E08(v82, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    v88 = sub_100061B44(v85, v87);
                    sub_100004030(v87, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    sub_100015704(v150, &qword_10036A778);
                    sub_100004030(v85, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    sub_100015704(v83, &qword_10036A778);
                    if ((v88 & 1) == 0)
                      goto LABEL_41;
                    goto LABEL_45;
                  }
                  sub_100015704(v150, &qword_10036A778);
                  sub_100004030(v85, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                }
                v52 = &qword_10036DF88;
                v53 = v83;
LABEL_40:
                sub_100015704(v53, v52);
                goto LABEL_41;
              }
            }
            else
            {
              v74 = v142;
              sub_10000E660(v72, v142, &qword_10036A778);
              if (v61(v73, 1, v62) != 1)
              {
                v75 = v72;
                v76 = v74;
                v77 = v144;
                sub_100003E08(v73, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                v78 = sub_100061B44(v76, v77);
                sub_100004030(v77, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                sub_100015704(v153, &qword_10036A778);
                sub_100004030(v76, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                sub_100015704(v75, &qword_10036A778);
                if ((v78 & 1) == 0)
                  goto LABEL_41;
                goto LABEL_34;
              }
              sub_100015704(v153, &qword_10036A778);
              sub_100004030(v74, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            }
            v52 = &qword_10036DF88;
            v53 = v72;
            goto LABEL_40;
          }
          sub_100015704(v151, &qword_10036A778);
          sub_100004030(v65, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
        }
        v52 = &qword_10036DF88;
        v53 = v59;
        goto LABEL_40;
      }
      swift_retain(v155);
      v49 = v154;
      swift_retain(v154);
      sub_100015704((uint64_t)v33, &qword_10036A770);
      sub_100004030((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
    }
    v52 = &qword_10036DF90;
    v53 = (uint64_t)v27;
    goto LABEL_40;
  }
  if (*(_BYTE *)(a2 + 20))
    goto LABEL_7;
LABEL_9:
  v43 = 0;
  return v43 & 1;
}

Swift::Int sub_1000462F4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &qword_10036A8F8, (uint64_t)&unk_1002C7044);
}

uint64_t sub_100046310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100387530, &qword_100387538, (uint64_t)sub_100043A78, a2);
}

uint64_t sub_10004632C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100044424(a1, a2, a3);
}

uint64_t sub_100046340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100044828(a1, a2, a3);
}

uint64_t sub_100046354(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD98, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&unk_1002C6FBC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000463A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387528, (uint64_t)qword_100383268, (uint64_t)sub_1000435F8, a1);
}

uint64_t sub_1000463C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036ADC0, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&unk_1002C6F44);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100046400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036ADC0, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&unk_1002C6F44);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100046450()
{
  return &unk_100352240;
}

unint64_t sub_10004645C()
{
  return 0xD000000000000024;
}

uint64_t sub_100046478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v37;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383280);
  sub_10000E6A4(v0, (uint64_t)qword_100383280);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v37 = swift_allocObject(v1, v6 + 14 * v4, v5 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_1002C4100;
  v7 = v37 + v6;
  v8 = v37 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v37 + v6) = 1;
  *(_QWORD *)v8 = "id";
  *(_QWORD *)(v8 + 8) = 2;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "sync_state";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "start_time_nanoseconds";
  *((_QWORD *)v14 + 1) = 22;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "end_time_nanoseconds";
  *((_QWORD *)v16 + 1) = 20;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "applicability_time_nanoseconds";
  *((_QWORD *)v18 + 1) = 30;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "sv_time";
  *((_QWORD *)v20 + 1) = 7;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "frequency_offset";
  *((_QWORD *)v22 + 1) = 16;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "phase_tracking";
  *((_QWORD *)v24 + 1) = 14;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "extension";
  *(_QWORD *)(v25 + 8) = 9;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "cn0_dbHz";
  *((_QWORD *)v27 + 1) = 8;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "multipath_indicator";
  *((_QWORD *)v29 + 1) = 19;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v7 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "averaged_frequency_offset";
  *((_QWORD *)v31 + 1) = 25;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v7 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "is_usable";
  *((_QWORD *)v33 + 1) = 9;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v7 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "averaged_frequency_offset_from_phase_tracking";
  *((_QWORD *)v35 + 1) = 45;
  v35[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v37);
}

uint64_t sub_100046858()
{
  return sub_100008BD0(&qword_100387540, (uint64_t)qword_100383280, (uint64_t)sub_100046478);
}

uint64_t sub_100046874@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387540, (uint64_t)qword_100383280, (uint64_t)sub_100046478, a1);
}

uint64_t sub_100046890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  v15 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator) = 5;
  v13(v1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, 1, 1, v12);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable) = 2;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  v20 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  qword_100387550 = v1;
  return result;
}

uint64_t sub_100046ABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE v89[24];
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[24];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE v97[24];
  _BYTE v98[24];
  _BYTE v99[24];
  _BYTE v100[24];
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[24];
  _BYTE v104[24];
  _BYTE v105[24];
  _BYTE v106[24];
  _BYTE v107[24];
  _BYTE v108[24];
  _BYTE v109[32];

  v3 = sub_1000039AC(&qword_10036A7A0);
  __chkstk_darwin(v3);
  v88 = (uint64_t)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036A798);
  __chkstk_darwin(v5);
  v87 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036A790);
  __chkstk_darwin(v7);
  v86 = (uint64_t)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000039AC(&qword_10036A768);
  __chkstk_darwin(v9);
  v84 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10036A760);
  __chkstk_darwin(v11);
  v81 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000039AC(&qword_10036A788);
  __chkstk_darwin(v13);
  v74 = (uint64_t)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000039AC(&qword_10036A780);
  __chkstk_darwin(v15);
  v72 = (uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  v18 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  v73 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  v20 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  *(_QWORD *)v22 = 0;
  *(_BYTE *)(v22 + 8) = 1;
  v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v23 + 8) = 1;
  v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  v25 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  v76 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  v27 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v28 = *(void (**)(void))(*(_QWORD *)(v27 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v28)(v26, 1, 1, v27);
  v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  v32 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  v79 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  *(_DWORD *)v33 = 0;
  *(_BYTE *)(v33 + 4) = 1;
  v80 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator) = 5;
  v82 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  v28();
  v83 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable) = 2;
  v34 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  v85 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  v35 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
  v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, v109, 0, 0);
  v37 = v72;
  sub_10000E660(v36, v72, &qword_10036A780);
  swift_beginAccess(v17, v108, 33, 0);
  sub_10000E574(v37, v17, &qword_10036A780);
  swift_endAccess(v108);
  v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, v108, 0, 0);
  v39 = v74;
  sub_10000E660(v38, v74, &qword_10036A788);
  v40 = v73;
  swift_beginAccess(v73, v107, 33, 0);
  sub_10000E574(v39, v40, &qword_10036A788);
  swift_endAccess(v107);
  v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds, v107, 0, 0);
  v42 = *v41;
  LOBYTE(v41) = *((_BYTE *)v41 + 8);
  swift_beginAccess(v21, v106, 1, 0);
  *(_QWORD *)v21 = v42;
  *(_BYTE *)(v21 + 8) = (_BYTE)v41;
  v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds, v105, 0, 0);
  v44 = *v43;
  LOBYTE(v43) = *((_BYTE *)v43 + 8);
  swift_beginAccess(v22, v104, 1, 0);
  *(_QWORD *)v22 = v44;
  *(_BYTE *)(v22 + 8) = (_BYTE)v43;
  v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds, v103, 0, 0);
  v46 = *v45;
  LOBYTE(v45) = *((_BYTE *)v45 + 8);
  swift_beginAccess(v23, &v102, 1, 0);
  *(_QWORD *)v23 = v46;
  *(_BYTE *)(v23 + 8) = (_BYTE)v45;
  v47 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, &v101, 0, 0);
  v48 = v81;
  sub_10000E660(v47, v81, &qword_10036A760);
  v49 = v75;
  swift_beginAccess(v75, v100, 33, 0);
  sub_10000E574(v48, v49, &qword_10036A760);
  swift_endAccess(v100);
  v50 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, v100, 0, 0);
  v51 = v84;
  sub_10000E660(v50, v84, &qword_10036A768);
  v52 = v76;
  swift_beginAccess(v76, v99, 33, 0);
  sub_10000E574(v51, v52, &qword_10036A768);
  swift_endAccess(v99);
  v53 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, v99, 0, 0);
  v54 = v86;
  sub_10000E660(v53, v86, &qword_10036A790);
  v55 = v77;
  swift_beginAccess(v77, v98, 33, 0);
  sub_10000E574(v54, v55, &qword_10036A790);
  swift_endAccess(v98);
  v56 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, v98, 0, 0);
  v57 = v87;
  sub_10000E660(v56, v87, &qword_10036A798);
  v58 = v78;
  swift_beginAccess(v78, v97, 33, 0);
  sub_10000E574(v57, v58, &qword_10036A798);
  swift_endAccess(v97);
  v59 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz, v97, 0, 0);
  LODWORD(v57) = *(_DWORD *)v59;
  LOBYTE(v59) = *(_BYTE *)(v59 + 4);
  v60 = v79;
  swift_beginAccess(v79, &v96, 1, 0);
  *(_DWORD *)v60 = v57;
  *(_BYTE *)(v60 + 4) = v59;
  v61 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator, &v95, 0, 0);
  LOBYTE(v61) = *v61;
  v62 = v80;
  swift_beginAccess(v80, &v94, 1, 0);
  *v62 = (_BYTE)v61;
  v63 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, &v93, 0, 0);
  sub_10000E660(v63, v51, &qword_10036A768);
  v64 = v82;
  swift_beginAccess(v82, v92, 33, 0);
  sub_10000E574(v51, v64, &qword_10036A768);
  swift_endAccess(v92);
  v65 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, v92, 0, 0);
  LOBYTE(v65) = *v65;
  v66 = v83;
  swift_beginAccess(v83, &v91, 1, 0);
  *v66 = (_BYTE)v65;
  v67 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, &v90, 0, 0);
  v68 = v88;
  sub_10000E660(v67, v88, &qword_10036A7A0);
  swift_release(a1);
  v69 = v85;
  swift_beginAccess(v85, v89, 33, 0);
  sub_10000E574(v68, v69, &qword_10036A7A0);
  swift_endAccess(v89);
  return v1;
}

uint64_t sub_1000473B0()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, &qword_10036A780);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, &qword_10036A788);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, &qword_10036A760);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, &qword_10036A768);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, &qword_10036A790);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, &qword_10036A798);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, &qword_10036A768);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, &qword_10036A7A0);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100047498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_100046ABC(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, v33, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
          v21 = &qword_10036AC10;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          v23 = &unk_1002C55F4;
          goto LABEL_23;
        case 2:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, v33, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
          v21 = &qword_10036AD00;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState;
          v23 = &unk_1002C6404;
          goto LABEL_23;
        case 3:
          v24 = OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
          goto LABEL_12;
        case 4:
          v24 = OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
          goto LABEL_12;
        case 5:
          v24 = OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
LABEL_12:
          v25 = v15 + v24;
          swift_beginAccess(v15 + v24, v33, 33, 0);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v25, a2, a3);
          goto LABEL_24;
        case 6:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, v33, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
          v21 = &qword_10036AD18;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime;
          v23 = &unk_1002C656C;
          goto LABEL_23;
        case 7:
          v27 = OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
          goto LABEL_20;
        case 8:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, v33, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
          v21 = &qword_10036AD60;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking;
          v23 = &unk_1002C69A4;
          goto LABEL_23;
        case 9:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, v33, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
          v21 = &qword_10036ADC0;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension;
          v23 = &unk_1002C6F44;
          goto LABEL_23;
        case 10:
          v28 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz, v33, 33, 0);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v28, a2, a3);
          goto LABEL_24;
        case 11:
          v29 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator, v33, 33, 0);
          v30 = sub_10007FAB4();
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v29, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator, v30, a2, a3);
          goto LABEL_24;
        case 12:
          v27 = OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
LABEL_20:
          v19 = v15 + v27;
          swift_beginAccess(v15 + v27, v33, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
          v21 = &qword_10036AD30;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset;
          v23 = &unk_1002C66D4;
          goto LABEL_23;
        case 13:
          v31 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, v33, 33, 0);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v31, a2, a3);
          goto LABEL_24;
        case 14:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, v33, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
          v21 = &qword_10036AD48;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking;
          v23 = &unk_1002C683C;
LABEL_23:
          v32 = sub_10000FD38(v21, v22, (uint64_t)v23);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v32, a2, a3);
LABEL_24:
          v5 = v26;
          swift_endAccess(v33);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_100047908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];
  _BYTE v25[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20));
  v10 = swift_retain(v9);
  sub_100047C68(v10, a1, a2, a3);
  if (v4)
    return swift_release(v9);
  sub_100047DF4(v9, a1, a2, a3);
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds, &v20, 0, 0);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v12, 3, a2, a3);
  v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds, v21, 0, 0);
  if ((*(_BYTE *)(v13 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v13, 4, a2, a3);
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds, v25, 0, 0);
  if ((*(_BYTE *)(v14 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v14, 5, a2, a3);
  sub_100047F80(v9, a1, a2, a3);
  sub_10004810C(v9, a1, a2, a3);
  sub_100048298(v9, a1, a2, a3);
  sub_100048424(v9, a1, a2, a3);
  v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz, v24, 0, 0);
  if ((*(_BYTE *)(v15 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(10, a2, a3, *(float *)v15);
  v16 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator, v23, 0, 0);
  if (*v16 != 5)
  {
    v22[0] = *v16;
    v17 = sub_10007FAB4();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v22, 11, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator, v17, a2, a3);
  }
  sub_1000485B0(v9, a1, a2, a3);
  v18 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, v22, 0, 0);
  v19 = *v18;
  if (v19 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v19 & 1, 13, a2, a3);
  sub_10004873C(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100047C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A780);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A780);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A780);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  v15 = sub_10000FD38(&qword_10036AC10, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&unk_1002C55F4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100047DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A788);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A788);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A788);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  v15 = sub_10000FD38(&qword_10036AD00, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&unk_1002C6404);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t sub_100047F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A760);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A760);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A760);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  v15 = sub_10000FD38(&qword_10036AD18, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&unk_1002C656C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10004810C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A768);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A768);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A768);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  v15 = sub_10000FD38(&qword_10036AD30, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&unk_1002C66D4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 7, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100048298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A790);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A790);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A790);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  v15 = sub_10000FD38(&qword_10036AD60, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&unk_1002C69A4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 8, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100048424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A798);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A798);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A798);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  v15 = sub_10000FD38(&qword_10036ADC0, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&unk_1002C6F44);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 9, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_1000485B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A768);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A768);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A768);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  v15 = sub_10000FD38(&qword_10036AD30, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&unk_1002C66D4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 12, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10004873C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A7A0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A7A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7A0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  v15 = sub_10000FD38(&qword_10036AD48, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&unk_1002C683C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 14, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_1000488C8(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t (*)(uint64_t, uint64_t))sub_1000488F0) & 1;
}

BOOL sub_1000488F0(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char *v84;
  uint64_t v86;
  char v87;
  uint64_t *v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int (*v146)(uint64_t, uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  float v153;
  char v154;
  char *v155;
  uint64_t v156;
  unsigned __int8 *v157;
  int v158;
  char *v159;
  char *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  unsigned __int8 *v170;
  int v171;
  char *v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int (*v179)(uint64_t, uint64_t, uint64_t);
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char v254[24];
  char v255[24];
  char v256[24];
  char v257[24];
  char v258[24];
  char v259[32];

  v231 = a2;
  v189 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  v187 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v184 = (uint64_t)&v183 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_1000039AC(&qword_10036DF40);
  __chkstk_darwin(v186);
  v190 = (uint64_t)&v183 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036A7A0);
  v6 = __chkstk_darwin(v5);
  v185 = (uint64_t)&v183 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v188 = (uint64_t)&v183 - v8;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  v198 = *(_QWORD *)(v9 - 8);
  v199 = v9;
  __chkstk_darwin(v9);
  v194 = (uint64_t)&v183 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_1000039AC(&qword_10036DF48);
  __chkstk_darwin(v197);
  v200 = (uint64_t)&v183 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_10036A798);
  v13 = __chkstk_darwin(v12);
  v195 = (uint64_t)&v183 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v227 = (char *)&v183 - v15;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v204 = *(_QWORD *)(v16 - 8);
  v205 = v16;
  __chkstk_darwin(v16);
  v196 = (uint64_t)&v183 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_1000039AC(&qword_10036DF50);
  __chkstk_darwin(v203);
  v206 = (uint64_t)&v183 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000039AC(&qword_10036A790);
  v20 = __chkstk_darwin(v19);
  v201 = (uint64_t)&v183 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v218 = (uint64_t)&v183 - v22;
  v212 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v209 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v202 = (uint64_t)&v183 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = sub_1000039AC(&qword_10036DF58);
  v24 = __chkstk_darwin(v211);
  v193 = (uint64_t)&v183 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v210 = (uint64_t)&v183 - v26;
  v27 = sub_1000039AC(&qword_10036A768);
  v28 = __chkstk_darwin(v27);
  v191 = (uint64_t)&v183 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v192 = (uint64_t)&v183 - v31;
  v32 = __chkstk_darwin(v30);
  v207 = (uint64_t)&v183 - v33;
  __chkstk_darwin(v32);
  v228 = (uint64_t)&v183 - v34;
  v216 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v214 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v208 = (uint64_t)&v183 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_1000039AC(&qword_10036DF60);
  __chkstk_darwin(v213);
  v217 = (uint64_t)&v183 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1000039AC(&qword_10036A760);
  v38 = __chkstk_darwin(v37);
  v215 = (uint64_t)&v183 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v219 = (uint64_t)&v183 - v40;
  v41 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  v224 = *(_QWORD *)(v41 - 8);
  v225 = v41;
  __chkstk_darwin(v41);
  v220 = (uint64_t)&v183 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = sub_1000039AC(&qword_10036DF68);
  __chkstk_darwin(v223);
  v226 = (uint64_t)&v183 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_1000039AC(&qword_10036A788);
  v45 = __chkstk_darwin(v44);
  v221 = (uint64_t)&v183 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v230 = (uint64_t)&v183 - v47;
  v48 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v49 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v222 = (uint64_t)&v183 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1000039AC(&qword_10036DED0);
  __chkstk_darwin(v51);
  v53 = (char *)&v183 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_1000039AC(&qword_10036A780);
  v55 = __chkstk_darwin(v54);
  v229 = (uint64_t)&v183 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55);
  v58 = (char *)&v183 - v57;
  v59 = a1;
  v60 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v60, v259, 0, 0);
  sub_10000E660(v60, (uint64_t)v58, &qword_10036A780);
  v61 = v231;
  v62 = (uint64_t)&v231[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id];
  swift_beginAccess(&v231[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id], v258, 0, 0);
  v63 = (uint64_t)&v53[*(int *)(v51 + 48)];
  sub_10000E660((uint64_t)v58, (uint64_t)v53, &qword_10036A780);
  sub_10000E660(v62, v63, &qword_10036A780);
  v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v64((uint64_t)v53, 1, v48) == 1)
  {
    swift_retain(v59);
    swift_retain(v61);
    sub_100015704((uint64_t)v58, &qword_10036A780);
    v65 = v59;
    if (v64(v63, 1, v48) == 1)
    {
      sub_100015704((uint64_t)v53, &qword_10036A780);
      goto LABEL_8;
    }
LABEL_6:
    v67 = &qword_10036DED0;
    v68 = (uint64_t)v53;
LABEL_15:
    sub_100015704(v68, v67);
    goto LABEL_16;
  }
  v65 = v59;
  v66 = v229;
  sub_10000E660((uint64_t)v53, v229, &qword_10036A780);
  if (v64(v63, 1, v48) == 1)
  {
    swift_retain(v59);
    swift_retain(v61);
    sub_100015704((uint64_t)v58, &qword_10036A780);
    sub_100004030(v66, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }
  v69 = v222;
  sub_100003E08(v63, v222, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  swift_retain(v65);
  swift_retain(v61);
  v70 = v66;
  v71 = sub_1000670C8(v66, v69);
  sub_100004030(v69, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100015704((uint64_t)v58, &qword_10036A780);
  sub_100004030(v70, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100015704((uint64_t)v53, &qword_10036A780);
  if ((v71 & 1) == 0)
    goto LABEL_16;
LABEL_8:
  v72 = v65
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess(v65+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, v257, 0, 0);
  v73 = v230;
  sub_10000E660(v72, v230, &qword_10036A788);
  v74 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState];
  swift_beginAccess(&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState], v256, 0, 0);
  v75 = v226;
  v76 = v226 + *(int *)(v223 + 48);
  sub_10000E660(v73, v226, &qword_10036A788);
  sub_10000E660(v74, v76, &qword_10036A788);
  v77 = v225;
  v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v224 + 48);
  if (v78(v75, 1, v225) == 1)
  {
    sub_100015704(v73, &qword_10036A788);
    v79 = v78(v76, 1, v77);
    v81 = (uint64_t)v227;
    v80 = v228;
    if (v79 == 1)
    {
      sub_100015704(v75, &qword_10036A788);
      goto LABEL_20;
    }
LABEL_13:
    v67 = &qword_10036DF68;
LABEL_14:
    v68 = v75;
    goto LABEL_15;
  }
  v82 = v221;
  sub_10000E660(v75, v221, &qword_10036A788);
  v83 = v78(v76, 1, v77);
  v81 = (uint64_t)v227;
  v80 = v228;
  if (v83 == 1)
  {
    sub_100015704(v230, &qword_10036A788);
    sub_100004030(v82, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
    goto LABEL_13;
  }
  v86 = v220;
  sub_100003E08(v76, v220, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  v87 = sub_100065A60(v82, v86, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t (*)(uint64_t, uint64_t))sub_10003F09C);
  sub_100004030(v86, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  sub_100015704(v230, &qword_10036A788);
  sub_100004030(v82, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  sub_100015704(v75, &qword_10036A788);
  if ((v87 & 1) == 0)
    goto LABEL_16;
LABEL_20:
  v88 = (uint64_t *)(v65
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
  swift_beginAccess(v65+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds, v255, 0, 0);
  v89 = *v88;
  v90 = *((_BYTE *)v88 + 8);
  v91 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds];
  swift_beginAccess(&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds], v254, 0, 0);
  if ((v90 & 1) != 0)
  {
    if ((v91[8] & 1) == 0)
      goto LABEL_16;
  }
  else if ((v91[8] & 1) != 0 || v89 != *(_QWORD *)v91)
  {
    goto LABEL_16;
  }
  v92 = (uint64_t *)(v65
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
  swift_beginAccess(v65+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds, &v253, 0, 0);
  v93 = *v92;
  v94 = *((_BYTE *)v92 + 8);
  v95 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds];
  swift_beginAccess(&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds], &v252, 0, 0);
  if ((v94 & 1) != 0)
  {
    if ((v95[8] & 1) == 0)
      goto LABEL_16;
  }
  else if ((v95[8] & 1) != 0 || v93 != *(_QWORD *)v95)
  {
    goto LABEL_16;
  }
  v96 = (uint64_t *)(v65
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
  swift_beginAccess(v65+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds, &v251, 0, 0);
  v97 = *v96;
  v98 = *((_BYTE *)v96 + 8);
  v99 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds];
  swift_beginAccess(&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds], &v250, 0, 0);
  if ((v98 & 1) != 0)
  {
    if ((v99[8] & 1) == 0)
      goto LABEL_16;
  }
  else if ((v99[8] & 1) != 0 || v97 != *(_QWORD *)v99)
  {
    goto LABEL_16;
  }
  v100 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess(v65+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, &v249, 0, 0);
  v101 = v100;
  v102 = v219;
  sub_10000E660(v101, v219, &qword_10036A760);
  v103 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime];
  swift_beginAccess(&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime], &v248, 0, 0);
  v104 = v217;
  v105 = v217 + *(int *)(v213 + 48);
  sub_10000E660(v102, v217, &qword_10036A760);
  sub_10000E660(v103, v105, &qword_10036A760);
  v106 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v214 + 48);
  v107 = v216;
  if (v106(v104, 1, v216) == 1)
  {
    sub_100015704(v102, &qword_10036A760);
    v108 = v106(v105, 1, v107);
    v109 = v218;
    if (v108 == 1)
    {
      sub_100015704(v104, &qword_10036A760);
      goto LABEL_42;
    }
LABEL_40:
    v67 = &qword_10036DF60;
    v68 = v104;
    goto LABEL_15;
  }
  sub_10000E660(v104, v215, &qword_10036A760);
  v110 = v105;
  v111 = v106(v105, 1, v107);
  v112 = v218;
  if (v111 == 1)
  {
    sub_100015704(v219, &qword_10036A760);
    sub_100004030(v215, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    goto LABEL_40;
  }
  v113 = v208;
  sub_100003E08(v110, v208, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  v114 = v112;
  v115 = v215;
  LODWORD(v231) = sub_1000658A4(v215, v113, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100004030(v113, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100015704(v219, &qword_10036A760);
  v116 = v115;
  v109 = v114;
  sub_100004030(v116, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100015704(v104, &qword_10036A760);
  if ((v231 & 1) == 0)
    goto LABEL_16;
LABEL_42:
  v117 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess(v65+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, &v247, 0, 0);
  sub_10000E660(v117, v80, &qword_10036A768);
  v118 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset];
  swift_beginAccess(&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset], &v246, 0, 0);
  v119 = v80;
  v120 = v210;
  v121 = v210 + *(int *)(v211 + 48);
  sub_10000E660(v119, v210, &qword_10036A768);
  v122 = v118;
  v75 = v120;
  sub_10000E660(v122, v121, &qword_10036A768);
  v123 = *(char **)(v209 + 48);
  v124 = v212;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v123)(v75, 1, v212) == 1)
  {
    sub_100015704(v119, &qword_10036A768);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v123)(v121, 1, v124) == 1)
    {
      v231 = v123;
      sub_100015704(v75, &qword_10036A768);
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  v125 = v123;
  v126 = v207;
  sub_10000E660(v75, v207, &qword_10036A768);
  v231 = v125;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v125)(v121, 1, v124) == 1)
  {
    sub_100015704(v228, &qword_10036A768);
    sub_100004030(v126, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
LABEL_47:
    v67 = &qword_10036DF58;
    goto LABEL_14;
  }
  v127 = v75;
  v128 = v202;
  sub_100003E08(v121, v202, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  v129 = sub_1000658A4(v126, v128, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100004030(v128, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100015704(v228, &qword_10036A768);
  sub_100004030(v126, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100015704(v127, &qword_10036A768);
  if ((v129 & 1) == 0)
    goto LABEL_16;
LABEL_49:
  v130 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess(v65+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, &v245, 0, 0);
  sub_10000E660(v130, v109, &qword_10036A790);
  v131 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking];
  swift_beginAccess(&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking], &v244, 0, 0);
  v132 = v206;
  v133 = v206 + *(int *)(v203 + 48);
  sub_10000E660(v109, v206, &qword_10036A790);
  v134 = v131;
  v75 = v132;
  sub_10000E660(v134, v133, &qword_10036A790);
  v135 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v204 + 48);
  v136 = v132;
  v137 = v205;
  if (v135(v136, 1, v205) == 1)
  {
    sub_100015704(v109, &qword_10036A790);
    if (v135(v133, 1, v137) == 1)
    {
      sub_100015704(v75, &qword_10036A790);
      goto LABEL_56;
    }
    goto LABEL_54;
  }
  v138 = v201;
  sub_10000E660(v75, v201, &qword_10036A790);
  if (v135(v133, 1, v137) == 1)
  {
    sub_100015704(v218, &qword_10036A790);
    sub_100004030(v138, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
LABEL_54:
    v67 = &qword_10036DF50;
    goto LABEL_14;
  }
  v139 = v196;
  sub_100003E08(v133, v196, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  v140 = sub_100063EF8(v138, v139);
  sub_100004030(v139, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  sub_100015704(v218, &qword_10036A790);
  sub_100004030(v138, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  sub_100015704(v75, &qword_10036A790);
  if ((v140 & 1) == 0)
    goto LABEL_16;
LABEL_56:
  v141 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess(v65+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, &v243, 0, 0);
  sub_10000E660(v141, v81, &qword_10036A798);
  v142 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension];
  swift_beginAccess(&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension], &v242, 0, 0);
  v143 = v200;
  v144 = v200 + *(int *)(v197 + 48);
  sub_10000E660(v81, v200, &qword_10036A798);
  v145 = v142;
  v75 = v143;
  sub_10000E660(v145, v144, &qword_10036A798);
  v146 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v198 + 48);
  v147 = v143;
  v148 = v199;
  if (v146(v147, 1, v199) == 1)
  {
    sub_100015704(v81, &qword_10036A798);
    if (v146(v144, 1, v148) == 1)
    {
      sub_100015704(v75, &qword_10036A798);
      goto LABEL_63;
    }
    goto LABEL_61;
  }
  v149 = v195;
  sub_10000E660(v75, v195, &qword_10036A798);
  if (v146(v144, 1, v148) == 1)
  {
    sub_100015704(v81, &qword_10036A798);
    sub_100004030(v149, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
LABEL_61:
    v67 = &qword_10036DF48;
    goto LABEL_14;
  }
  v150 = v194;
  sub_100003E08(v144, v194, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  v151 = sub_100065A60(v149, v150, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, sub_10004538C);
  sub_100004030(v150, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  sub_100015704(v81, &qword_10036A798);
  sub_100004030(v149, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  sub_100015704(v75, &qword_10036A798);
  if ((v151 & 1) == 0)
    goto LABEL_16;
LABEL_63:
  v152 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess(v65+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz, &v241, 0, 0);
  v153 = *(float *)v152;
  v154 = *(_BYTE *)(v152 + 4);
  v155 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz];
  swift_beginAccess(&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz], &v240, 0, 0);
  if ((v154 & 1) != 0)
  {
    if ((v155[4] & 1) != 0)
      goto LABEL_68;
LABEL_16:
    swift_release(v65);
    v84 = v61;
LABEL_17:
    swift_release(v84);
    return 0;
  }
  if ((v155[4] & 1) != 0 || v153 != *(float *)v155)
    goto LABEL_16;
LABEL_68:
  v156 = v65;
  v157 = (unsigned __int8 *)(v65
                           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess(v65+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator, &v239, 0, 0);
  v158 = *v157;
  v159 = v61;
  v160 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator];
  swift_beginAccess(&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator], &v238, 0, 0);
  v161 = *v160;
  if (v158 == 5)
  {
    if (v161 != 5)
      goto LABEL_79;
  }
  else if (v161 == 5 || v158 != v161)
  {
    goto LABEL_79;
  }
  v162 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess(v65+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, &v237, 0, 0);
  v163 = v192;
  sub_10000E660(v162, v192, &qword_10036A768);
  v164 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset];
  swift_beginAccess(&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset], &v236, 0, 0);
  v165 = v193;
  v166 = v193 + *(int *)(v211 + 48);
  sub_10000E660(v163, v193, &qword_10036A768);
  sub_10000E660(v164, v166, &qword_10036A768);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v231)(v165, 1, v212) == 1)
  {
    sub_100015704(v192, &qword_10036A768);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v231)(v166, 1, v212) == 1)
    {
      sub_100015704(v193, &qword_10036A768);
      goto LABEL_81;
    }
LABEL_78:
    sub_100015704(v193, &qword_10036DF58);
    goto LABEL_79;
  }
  sub_10000E660(v193, v191, &qword_10036A768);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v231)(v166, 1, v212) == 1)
  {
    sub_100015704(v192, &qword_10036A768);
    sub_100004030(v191, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_78;
  }
  v167 = v202;
  sub_100003E08(v166, v202, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  v168 = v191;
  v169 = sub_1000658A4(v191, v167, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100004030(v167, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100015704(v192, &qword_10036A768);
  sub_100004030(v168, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100015704(v193, &qword_10036A768);
  if ((v169 & 1) == 0)
    goto LABEL_79;
LABEL_81:
  v170 = (unsigned __int8 *)(v156
                           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess(v156+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, &v235, 0, 0);
  v171 = *v170;
  v172 = &v159[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable];
  swift_beginAccess(&v159[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable], &v234, 0, 0);
  v173 = *v172;
  if (v171 == 2)
  {
    if (v173 == 2)
      goto LABEL_86;
LABEL_79:
    swift_release(v156);
    v84 = v159;
    goto LABEL_17;
  }
  if (v173 == 2 || ((((v173 & 1) == 0) ^ v171) & 1) == 0)
    goto LABEL_79;
LABEL_86:
  v174 = v156
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess(v156+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, &v233, 0, 0);
  v175 = v188;
  sub_10000E660(v174, v188, &qword_10036A7A0);
  v176 = (uint64_t)&v159[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking];
  swift_beginAccess(&v159[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking], &v232, 0, 0);
  v177 = v190;
  v178 = v190 + *(int *)(v186 + 48);
  sub_10000E660(v175, v190, &qword_10036A7A0);
  sub_10000E660(v176, v178, &qword_10036A7A0);
  v179 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v187 + 48);
  if (v179(v177, 1, v189) == 1)
  {
    swift_release(v156);
    swift_release(v159);
    sub_100015704(v188, &qword_10036A7A0);
    if (v179(v178, 1, v189) == 1)
    {
      sub_100015704(v190, &qword_10036A7A0);
      return 1;
    }
LABEL_91:
    sub_100015704(v190, &qword_10036DF40);
    return 0;
  }
  sub_10000E660(v190, v185, &qword_10036A7A0);
  if (v179(v178, 1, v189) == 1)
  {
    swift_release(v156);
    swift_release(v159);
    sub_100015704(v188, &qword_10036A7A0);
    sub_100004030(v185, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
    goto LABEL_91;
  }
  v180 = v184;
  sub_100003E08(v178, v184, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  v181 = v185;
  v182 = sub_1000602C0(v185, v180);
  swift_release(v156);
  swift_release(v159);
  sub_100004030(v180, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  sub_100015704(v188, &qword_10036A7A0);
  sub_100004030(v181, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  sub_100015704(v190, &qword_10036A7A0);
  return (v182 & 1) != 0;
}

Swift::Int sub_10004A060()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &qword_10036A900, (uint64_t)&unk_1002C71AC);
}

uint64_t sub_10004A07C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100387548, &qword_100387550, (uint64_t)sub_100046890, a2);
}

uint64_t sub_10004A098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100047498(a1, a2, a3);
}

uint64_t sub_10004A0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100047908(a1, a2, a3);
}

uint64_t sub_10004A0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD90, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&unk_1002C7124);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004A110@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387540, (uint64_t)qword_100383280, (uint64_t)sub_100046478, a1);
}

uint64_t sub_10004A12C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036ADD8, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&unk_1002C70AC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A16C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036ADD8, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&unk_1002C70AC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004A1BC()
{
  return &unk_100352250;
}

unint64_t sub_10004A1C8()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10004A1E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383298);
  sub_10000E6A4(v0, (uint64_t)qword_100383298);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "frequency_noise_ppb_per_second_per_rtHz";
  *(_QWORD *)(v9 + 8) = 39;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "phase_noise_ppb_per_rtHz";
  *(_QWORD *)(v13 + 8) = 24;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "frequency_variance_ppb2";
  *((_QWORD *)v15 + 1) = 23;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "phase_variance_nanoseconds2";
  *((_QWORD *)v17 + 1) = 27;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "clock_jump_detected";
  *(_QWORD *)(v18 + 8) = 19;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004A3E8()
{
  return sub_100008BD0(&qword_100387558, (uint64_t)qword_100383298, (uint64_t)sub_10004A1E4);
}

uint64_t sub_10004A404@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387558, (uint64_t)qword_100383298, (uint64_t)sub_10004A1E4, a1);
}

uint64_t sub_10004A420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 20);
          goto LABEL_5;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 24);
          goto LABEL_5;
        case 3:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 28);
          goto LABEL_5;
        case 4:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v9, a2, a3);
          break;
        case 5:
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v10 + 36), a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10004A538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(1, a2, a3, *(float *)v11);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2, a2, a3, *(float *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4, a2, a3, *(float *)v14);
    v15 = *(unsigned __int8 *)(v5 + v10[9]);
    if (v15 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 5, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10004A698()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, &qword_10036A908, (uint64_t)&unk_1002C7314);
}

uint64_t sub_10004A6B4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a2 + v8;
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_10004A720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004A420(a1, a2, a3);
}

uint64_t sub_10004A734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004A538(a1, a2, a3);
}

uint64_t sub_10004A748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD88, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&unk_1002C728C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004A798@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387558, (uint64_t)qword_100383298, (uint64_t)sub_10004A1E4, a1);
}

uint64_t sub_10004A7B4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036ADF0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&unk_1002C7214);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036ADF0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&unk_1002C7214);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004A848()
{
  return &unk_100352260;
}

unint64_t sub_10004A854()
{
  return 0xD000000000000031;
}

uint64_t sub_10004A870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003832B0);
  sub_10000E6A4(v0, (uint64_t)qword_1003832B0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "frequency_correction_ppb";
  *(_QWORD *)(v9 + 8) = 24;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "cummulative_phase_correction_nanoseconds";
  *(_QWORD *)(v13 + 8) = 40;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "current_temperature_degrees_celsius";
  *((_QWORD *)v15 + 1) = 35;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "current_temperature_rate_degrees_per_second";
  *((_QWORD *)v17 + 1) = 43;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "avg_temperature_over_last_epoch_degrees_celsius";
  *(_QWORD *)(v18 + 8) = 47;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004AA74()
{
  return sub_100008BD0(&qword_100387560, (uint64_t)qword_1003832B0, (uint64_t)sub_10004A870);
}

uint64_t sub_10004AA90@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387560, (uint64_t)qword_1003832B0, (uint64_t)sub_10004A870, a1);
}

uint64_t sub_10004AAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 20);
          goto LABEL_5;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 24);
          goto LABEL_5;
        case 3:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 28);
          goto LABEL_5;
        case 4:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 32);
          goto LABEL_5;
        case 5:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 36);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10004ABA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v11);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v14);
    v15 = v5 + v10[9];
    if ((*(_BYTE *)(v15 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5, a2, a3, *(double *)v15);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10004AD08()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, &qword_10036A910, (uint64_t)&unk_1002C747C);
}

uint64_t sub_10004AD24@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a2 + v8;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a2 + a1[9];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

uint64_t sub_10004AD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004AAAC(a1, a2, a3);
}

uint64_t sub_10004ADA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004ABA8(a1, a2, a3);
}

uint64_t sub_10004ADBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD80, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&unk_1002C73F4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004AE0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387560, (uint64_t)qword_1003832B0, (uint64_t)sub_10004A870, a1);
}

uint64_t sub_10004AE28(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AE08, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&unk_1002C737C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004AE68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AE08, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&unk_1002C737C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004AEB8()
{
  return &unk_100352270;
}

unint64_t sub_10004AEC4()
{
  return 0xD000000000000034;
}

uint64_t sub_10004AEE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003832C8);
  sub_10000E6A4(v0, (uint64_t)qword_1003832C8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "offset_nanoseconds";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "sub_nanosecond_offset_nanoseconds";
  *(_QWORD *)(v13 + 8) = 33;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "offset_uncertainty_nanoseconds";
  *((_QWORD *)v15 + 1) = 30;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "drift_ppb";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "drift_uncertainty_ppb";
  *(_QWORD *)(v18 + 8) = 21;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004B0E4()
{
  return sub_100008BD0(&qword_100387568, (uint64_t)qword_1003832C8, (uint64_t)sub_10004AEE0);
}

uint64_t sub_10004B100@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387568, (uint64_t)qword_1003832C8, (uint64_t)sub_10004AEE0, a1);
}

uint64_t sub_10004B11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + *(int *)(v12 + 20), a2, a3);
          goto LABEL_6;
        case 2:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 24);
          goto LABEL_5;
        case 3:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 28);
          goto LABEL_5;
        case 4:
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v13 + 32), a2, a3);
          goto LABEL_6;
        case 5:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 36);
LABEL_5:
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v10, a2, a3);
LABEL_6:
          v9 = v11;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10004B240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2, a2, a3, *(float *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v14);
    v15 = v5 + v10[9];
    if ((*(_BYTE *)(v15 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(5, a2, a3, *(float *)v15);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10004B3A0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, &qword_10036A918, (uint64_t)&unk_1002C75E4);
}

uint64_t sub_10004B3BC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a2 + v8;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a2 + a1[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_10004B42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004B11C(a1, a2, a3);
}

uint64_t sub_10004B440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004B240(a1, a2, a3);
}

uint64_t sub_10004B454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD78, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&unk_1002C755C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004B4A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387568, (uint64_t)qword_1003832C8, (uint64_t)sub_10004AEE0, a1);
}

uint64_t sub_10004B4C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AE20, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&unk_1002C74E4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004B500(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AE20, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&unk_1002C74E4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004B550()
{
  return &unk_100352280;
}

unint64_t sub_10004B55C()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10004B578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003832E0);
  sub_10000E6A4(v0, (uint64_t)qword_1003832E0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "clock_nanoseconds";
  *(_QWORD *)(v9 + 8) = 17;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "model";
  *(_QWORD *)(v13 + 8) = 5;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "corrections";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "receiver_to_gps_time";
  *((_QWORD *)v17 + 1) = 20;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004B74C()
{
  return sub_100008BD0(&qword_100387570, (uint64_t)qword_1003832E0, (uint64_t)sub_10004B578);
}

uint64_t sub_10004B768@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387570, (uint64_t)qword_1003832E0, (uint64_t)sub_10004B578, a1);
}

uint64_t sub_10004B784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v15 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v15 + 20), a2, a3);
          break;
        case 2:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 24);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
          v11 = &qword_10036ADF0;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel;
          v13 = &unk_1002C7214;
          goto LABEL_5;
        case 3:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 28);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
          v11 = &qword_10036AE08;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections;
          v13 = &unk_1002C737C;
          goto LABEL_5;
        case 4:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 32);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
          v11 = &qword_10036AE20;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion;
          v13 = &unk_1002C74E4;
LABEL_5:
          v14 = sub_10000FD38(v11, v12, (uint64_t)v13);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10004B928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  v10 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v10 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v10, 1, a2, a3);
  if (!v4)
  {
    sub_10004BA1C(v5, a1, a2, a3);
    sub_10004BB90(v5, a1, a2, a3);
    sub_10004BD04(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10004BA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7A8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036A7A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7A8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  v15 = sub_10000FD38(&qword_10036ADF0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&unk_1002C7214);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_10004BB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7B0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036A7B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7B0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  v15 = sub_10000FD38(&qword_10036AE08, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&unk_1002C737C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_10004BD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7B8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  sub_10000E660(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_10036A7B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7B8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  v15 = sub_10000FD38(&qword_10036AE20, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&unk_1002C74E4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Int sub_10004BE7C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10036A920, (uint64_t)&unk_1002C774C);
}

uint64_t sub_10004BE98@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + v4;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a2 + a1[7];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a2 + a1[8];
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t sub_10004BF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004B784(a1, a2, a3);
}

uint64_t sub_10004BF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004B928(a1, a2, a3);
}

uint64_t sub_10004BF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD70, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&unk_1002C76C4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004BFCC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387570, (uint64_t)qword_1003832E0, (uint64_t)sub_10004B578, a1);
}

uint64_t sub_10004BFE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AE38, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&unk_1002C764C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004C028(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AE38, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&unk_1002C764C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004C078()
{
  return &unk_100352290;
}

unint64_t sub_10004C084()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10004C0A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003832F8);
  sub_10000E6A4(v0, (uint64_t)qword_1003832F8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "clock";
  *(_QWORD *)(v9 + 8) = 5;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "measurements";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004C1F0()
{
  return sub_100008BD0(&qword_100387578, (uint64_t)qword_1003832F8, (uint64_t)sub_10004C0A0);
}

uint64_t sub_10004C20C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387578, (uint64_t)qword_1003832F8, (uint64_t)sub_10004C0A0, a1);
}

uint64_t sub_10004C228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements) = &_swiftEmptyArrayStorage;
  qword_100387588 = v1;
  return result;
}

uint64_t sub_10004C2A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];

  v3 = sub_1000039AC(&qword_10036A7C0);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (uint64_t *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements) = &_swiftEmptyArrayStorage;
  v9 = a1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, v17, 0, 0);
  sub_10000E660(v9, (uint64_t)v5, &qword_10036A7C0);
  swift_beginAccess(v6, v16, 33, 0);
  sub_10000E574((uint64_t)v5, v6, &qword_10036A7C0);
  swift_endAccess(v16);
  v10 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements, v16, 0, 0);
  v11 = *v10;
  swift_bridgeObjectRetain(v11);
  swift_release(a1);
  swift_beginAccess(v8, v15, 1, 0);
  v12 = *v8;
  *v8 = v11;
  swift_bridgeObjectRelease(v12);
  return v1;
}

uint64_t sub_10004C410()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, &qword_10036A7C0);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10004C458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10004C2A4(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v17 & 1) != 0)
        return swift_release(v15);
      if (v16 == 2)
        break;
      if (v16 == 1)
      {
        v23 = v15
            + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
        swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, v26, 33, 0);
        v24 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
        v25 = sub_10000FD38(&qword_10036AE38, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&unk_1002C764C);
        v22 = v5;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v23, v24, v25, a2, a3);
        goto LABEL_7;
      }
LABEL_8:
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v19 = v15
        + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements;
    swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements, v26, 33, 0);
    v20 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0);
    v21 = sub_10000FD38(&qword_10036ADD8, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&unk_1002C70AC);
    v22 = v5;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v19, v20, v21, a2, a3);
LABEL_7:
    v5 = v22;
    swift_endAccess(v26);
    goto LABEL_8;
  }
  return swift_release(v15);
}

uint64_t sub_10004C650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20));
  v10 = swift_retain(v9);
  sub_10004C790(v10, a1, a2, a3);
  if (v4)
    return swift_release(v9);
  v12 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements, v17, 0, 0);
  v13 = *v12;
  if (*(_QWORD *)(v13 + 16))
  {
    v14 = type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0);
    v15 = sub_10000FD38(&qword_10036ADD8, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&unk_1002C70AC);
    v16 = swift_bridgeObjectRetain(v13);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v16, 2, v14, v15, a2, a3);
    swift_bridgeObjectRelease(v13);
  }
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10004C790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A7C0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A7C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7C0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  v15 = sub_10000FD38(&qword_10036AE38, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&unk_1002C764C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_10004C91C(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, sub_10004C944) & 1;
}

uint64_t sub_10004C944(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];

  v30 = a2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v29 = (uint64_t)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036DF38);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000039AC(&qword_10036A7C0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v29 - v13;
  v15 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, v34, 0, 0);
  sub_10000E660(v15, (uint64_t)v14, &qword_10036A7C0);
  v16 = v30;
  v17 = v30
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess(v30+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, v33, 0, 0);
  v18 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10000E660((uint64_t)v14, (uint64_t)v8, &qword_10036A7C0);
  sub_10000E660(v17, v18, &qword_10036A7C0);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v8, 1, v3) != 1)
  {
    v20 = a1;
    sub_10000E660((uint64_t)v8, (uint64_t)v12, &qword_10036A7C0);
    if (v19(v18, 1, v3) != 1)
    {
      v21 = v29;
      sub_100003E08(v18, v29, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      swift_retain(a1);
      swift_retain(v16);
      v22 = sub_100065DF0((uint64_t)v12, v21);
      sub_100004030(v21, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      sub_100015704((uint64_t)v14, &qword_10036A7C0);
      sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      sub_100015704((uint64_t)v8, &qword_10036A7C0);
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v27 = 0;
      goto LABEL_10;
    }
    swift_retain(a1);
    swift_retain(v16);
    sub_100015704((uint64_t)v14, &qword_10036A7C0);
    sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
LABEL_6:
    sub_100015704((uint64_t)v8, &qword_10036DF38);
    goto LABEL_9;
  }
  swift_retain(a1);
  swift_retain(v16);
  sub_100015704((uint64_t)v14, &qword_10036A7C0);
  v20 = a1;
  if (v19(v18, 1, v3) != 1)
    goto LABEL_6;
  sub_100015704((uint64_t)v8, &qword_10036A7C0);
LABEL_8:
  v23 = (uint64_t *)(v20
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements, v32, 0, 0);
  v24 = *v23;
  v25 = (uint64_t *)(v16
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements, v31, 0, 0);
  v26 = *v25;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v26);
  v27 = sub_10005E820(v24, v26, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t (*)(uint64_t, uint64_t))sub_1000488F0);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v26);
LABEL_10:
  swift_release(v20);
  swift_release(v16);
  return v27 & 1;
}

Swift::Int sub_10004CCCC()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &qword_10036A928, (uint64_t)&unk_1002C78B4);
}

uint64_t sub_10004CCE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100387580, &qword_100387588, (uint64_t)sub_10004C228, a2);
}

uint64_t sub_10004CD04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004C458(a1, a2, a3);
}

uint64_t sub_10004CD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004C650(a1, a2, a3);
}

uint64_t sub_10004CD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD68, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&unk_1002C782C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004CD7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387578, (uint64_t)qword_1003832F8, (uint64_t)sub_10004C0A0, a1);
}

uint64_t sub_10004CD98(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AE50, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&unk_1002C77B4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004CDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AE50, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&unk_1002C77B4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004CE28()
{
  return &unk_1003522A0;
}

unint64_t sub_10004CE34()
{
  return 0xD000000000000022;
}

uint64_t sub_10004CE50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383310);
  sub_10000E6A4(v0, (uint64_t)qword_100383310);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "x";
  *(_QWORD *)(v9 + 8) = 1;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "y";
  *((_QWORD *)v13 + 1) = 1;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "z";
  *(_QWORD *)(v14 + 8) = 1;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004CFDC()
{
  return sub_100008BD0(&qword_100387590, (uint64_t)qword_100383310, (uint64_t)sub_10004CE50);
}

uint64_t sub_10004CFF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387590, (uint64_t)qword_100383310, (uint64_t)sub_10004CE50, a1);
}

uint64_t sub_10004D014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054098(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularDoubleField(value:));
}

uint64_t sub_10004D038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A7A0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_10004D054(uint64_t a1, uint64_t a2)
{
  return sub_1000656F0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef) & 1;
}

Swift::Int sub_10004D074()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, &qword_10036A930, (uint64_t)&unk_1002C7A1C);
}

uint64_t sub_10004D094(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD60, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&unk_1002C7994);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004D0E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387590, (uint64_t)qword_100383310, (uint64_t)sub_10004CE50, a1);
}

uint64_t sub_10004D100(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AE68, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&unk_1002C791C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004D140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AE68, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&unk_1002C791C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004D190()
{
  return &unk_1003522B0;
}

unint64_t sub_10004D19C()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10004D1B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383328);
  sub_10000E6A4(v0, (uint64_t)qword_100383328);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "band";
  *(_QWORD *)(v9 + 8) = 4;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "tropospheric_nanoseconds";
  *(_QWORD *)(v13 + 8) = 24;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ionospheric_nanoseconds";
  *((_QWORD *)v15 + 1) = 23;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "tx_group_delay_nanoseconds";
  *((_QWORD *)v17 + 1) = 26;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "ionospheric_model";
  *(_QWORD *)(v18 + 8) = 17;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004D3C8()
{
  return sub_100008BD0(&qword_100387598, (uint64_t)qword_100383328, (uint64_t)sub_10004D1B8);
}

uint64_t sub_10004D3E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387598, (uint64_t)qword_100383328, (uint64_t)sub_10004D1B8, a1);
}

uint64_t sub_10004D400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  ValueMetadata *v13;
  uint64_t v14;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 20);
          v11 = sub_10007FB80();
          v12 = v10;
          v13 = &type metadata for CLP_LogEntry_PrivateData_Band;
          goto LABEL_12;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 24);
          goto LABEL_5;
        case 3:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 28);
          goto LABEL_5;
        case 4:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 5:
          v14 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36);
          v11 = sub_10007F9E8();
          v12 = v14;
          v13 = &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
LABEL_12:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v12, v13, v11, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10004D560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 13)
  {
    v16 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v11 = sub_10007FB80();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v16, 1, &type metadata for CLP_LogEntry_PrivateData_Band, v11, a2, a3);
  }
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v14);
    if (*(_BYTE *)(v5 + v10[9]) != 3)
    {
      v17 = *(_BYTE *)(v5 + v10[9]);
      v15 = sub_10007F9E8();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v17, 5, &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource, v15, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10004D6F0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, &qword_10036A938, (uint64_t)&unk_1002C7B84);
}

uint64_t sub_10004D70C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 13;
  v6 = a2 + v5;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1[8];
  v8 = a2 + a1[7];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a2 + v7;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a2 + a1[9]) = 3;
  return result;
}

uint64_t sub_10004D774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004D400(a1, a2, a3);
}

uint64_t sub_10004D788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004D560(a1, a2, a3);
}

uint64_t sub_10004D79C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD58, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&unk_1002C7AFC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004D7EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387598, (uint64_t)qword_100383328, (uint64_t)sub_10004D1B8, a1);
}

uint64_t sub_10004D808(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AE80, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&unk_1002C7A84);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004D848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AE80, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&unk_1002C7A84);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004D898()
{
  return &unk_1003522C0;
}

unint64_t sub_10004D8A4()
{
  return 0xD000000000000029;
}

uint64_t sub_10004D8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383340);
  sub_10000E6A4(v0, (uint64_t)qword_100383340);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "applicable_time_nanoseconds";
  *(_QWORD *)(v9 + 8) = 27;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "position";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004DA18()
{
  return sub_100008BD0(&qword_1003875A0, (uint64_t)qword_100383340, (uint64_t)sub_10004D8C0);
}

uint64_t sub_10004DA34@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003875A0, (uint64_t)qword_100383340, (uint64_t)sub_10004D8C0, a1);
}

uint64_t sub_10004DA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0) + 24);
        v10 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
        v11 = sub_10000FD38(&qword_10036AE68, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&unk_1002C791C);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
      }
      else if (result == 1)
      {
        v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v12 + 20), a2, a3);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10004DB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  v10 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v10 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v10);
  if (!v4)
  {
    sub_10004DC28(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10004DC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7C8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036A7C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7C8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  v15 = sub_10000FD38(&qword_10036AE68, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&unk_1002C791C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Int sub_10004DDA0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, &qword_10036A940, (uint64_t)&unk_1002C7CEC);
}

uint64_t sub_10004DDBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 24);
  v5 = a2 + *(int *)(a1 + 20);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + v4;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_10004DE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004DA50(a1, a2, a3);
}

uint64_t sub_10004DE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004DB74(a1, a2, a3);
}

uint64_t sub_10004DE40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD50, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&unk_1002C7C64);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004DE90@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003875A0, (uint64_t)qword_100383340, (uint64_t)sub_10004D8C0, a1);
}

uint64_t sub_10004DEAC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AE98, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&unk_1002C7BEC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004DEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AE98, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&unk_1002C7BEC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004DF3C()
{
  return &unk_1003522D0;
}

unint64_t sub_10004DF48()
{
  return 0xD000000000000028;
}

uint64_t sub_10004DF64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383358);
  sub_10000E6A4(v0, (uint64_t)qword_100383358);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 2;
  *(_QWORD *)v9 = "fit_validity_start_time_ns";
  *(_QWORD *)(v9 + 8) = 26;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 3;
  *(_QWORD *)v13 = "fit_validity_end_time_ns";
  *(_QWORD *)(v13 + 8) = 24;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "x_position_ecef_coefficients";
  *((_QWORD *)v15 + 1) = 28;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "y_position_ecef_coefficients";
  *((_QWORD *)v17 + 1) = 28;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 6;
  *(_QWORD *)v18 = "z_position_ecef_coefficients";
  *(_QWORD *)(v18 + 8) = 28;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10004E168()
{
  return sub_100008BD0(&qword_1003875A8, (uint64_t)qword_100383358, (uint64_t)sub_10004DF64);
}

uint64_t sub_10004E184@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003875A8, (uint64_t)qword_100383358, (uint64_t)sub_10004DF64, a1);
}

uint64_t sub_10004E1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 2:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 32);
          goto LABEL_10;
        case 3:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 36);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v10, a2, a3);
          break;
        case 4:
          v9 = v3;
          goto LABEL_5;
        case 5:
          v9 = v3 + 8;
          goto LABEL_5;
        case 6:
          v9 = v3 + 16;
LABEL_5:
          dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)(v9, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10004E2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  double *v10;
  double *v11;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  v9 = result;
  v10 = (double *)((char *)v3 + *(int *)(result + 32));
  if (((_BYTE)v10[1] & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *v10);
  if (!v4)
  {
    v11 = (double *)((char *)v3 + *(int *)(v9 + 36));
    if (((_BYTE)v11[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *v11);
    if (*(_QWORD *)(*v3 + 16))
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    if (*(_QWORD *)(v3[1] + 16))
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    if (*(_QWORD *)(v3[2] + 16))
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10004E418()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &qword_10036A948, (uint64_t)&unk_1002C7E54);
}

uint64_t sub_10004E434@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  char *v7;

  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  a2[2] = &_swiftEmptyArrayStorage;
  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 36);
  v6 = (char *)a2 + *(int *)(a1 + 32);
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = (char *)a2 + v5;
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  return result;
}

uint64_t sub_10004E490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E1A0(a1, a2, a3);
}

uint64_t sub_10004E4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E2B0(a1, a2, a3);
}

uint64_t sub_10004E4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD48, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&unk_1002C7DCC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004E508@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003875A8, (uint64_t)qword_100383358, (uint64_t)sub_10004DF64, a1);
}

uint64_t sub_10004E524(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AEB0, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&unk_1002C7D54);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004E564(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AEB0, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&unk_1002C7D54);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10004E5B4()
{
  return &unk_1003522E0;
}

unint64_t sub_10004E5C0()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_10004E5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v54;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383370);
  sub_10000E6A4(v0, (uint64_t)qword_100383370);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v54 = swift_allocObject(v1, v6 + 23 * v4, v5 | 7);
  *(_OWORD *)(v54 + 16) = xmmword_1002C4110;
  v7 = v54 + v6;
  v8 = v54 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v54 + v6) = 1;
  *(_QWORD *)v8 = "id";
  *(_QWORD *)(v8 + 8) = 2;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v54 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "reference_time_nanoseconds";
  *(_QWORD *)(v12 + 8) = 26;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v54 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "position_source";
  *((_QWORD *)v14 + 1) = 15;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v54 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "anchor_positions";
  *((_QWORD *)v16 + 1) = 16;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v54 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "clock_bias_correction_nanoseconds";
  *((_QWORD *)v18 + 1) = 33;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v54 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "clock_frequency_correction_ppb";
  *((_QWORD *)v20 + 1) = 30;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v54 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "clock_frequency_change_correction_ppb_per_sec";
  *((_QWORD *)v22 + 1) = 45;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v54 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "range_accuracy_position_m";
  *((_QWORD *)v24 + 1) = 25;
  v24[16] = 2;
  v11();
  v25 = v54 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "range_accuracy_clock_nanoseconds";
  *(_QWORD *)(v25 + 8) = 32;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v54 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "over_the_air_from_sv_health_l1";
  *((_QWORD *)v27 + 1) = 30;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v54 + v6 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "over_the_air_from_other_sv_health_l1";
  *((_QWORD *)v29 + 1) = 36;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v54 + v6 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "assistance_file_health_l1";
  *((_QWORD *)v31 + 1) = 25;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v54 + v6 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "ms_based_health_l1";
  *((_QWORD *)v33 + 1) = 18;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v54 + v6 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "integrity_health_l1";
  *((_QWORD *)v35 + 1) = 19;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v54 + v6 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "sv_band_corrections";
  *((_QWORD *)v37 + 1) = 19;
  v37[16] = 2;
  v11();
  v38 = (_QWORD *)(v54 + v6 + 15 * v4);
  v39 = (char *)v38 + *(int *)(v2 + 48);
  *v38 = 16;
  *(_QWORD *)v39 = "polynomial_orbit";
  *((_QWORD *)v39 + 1) = 16;
  v39[16] = 2;
  v11();
  v40 = v54 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 16 * v4) = 18;
  *(_QWORD *)v40 = "over_the_air_from_sv_health_l5";
  *(_QWORD *)(v40 + 8) = 30;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  v41 = (_QWORD *)(v54 + v6 + 17 * v4);
  v42 = (char *)v41 + *(int *)(v2 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "over_the_air_from_other_sv_health_l5";
  *((_QWORD *)v42 + 1) = 36;
  v42[16] = 2;
  v11();
  v43 = (_QWORD *)(v54 + v6 + 18 * v4);
  v44 = (char *)v43 + *(int *)(v2 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "assistance_file_health_l5";
  *((_QWORD *)v44 + 1) = 25;
  v44[16] = 2;
  v11();
  v45 = (_QWORD *)(v54 + v6 + 19 * v4);
  v46 = (char *)v45 + *(int *)(v2 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "ms_based_health_l5";
  *((_QWORD *)v46 + 1) = 18;
  v46[16] = 2;
  v11();
  v47 = (_QWORD *)(v54 + v6 + 20 * v4);
  v48 = (char *)v47 + *(int *)(v2 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "integrity_health_l5";
  *((_QWORD *)v48 + 1) = 19;
  v48[16] = 2;
  v11();
  v49 = (_QWORD *)(v54 + v6 + 21 * v4);
  v50 = (char *)v49 + *(int *)(v2 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "clock_frequency_accel_correction_ppb_per_sec_per_sec";
  *((_QWORD *)v50 + 1) = 52;
  v50[16] = 2;
  v11();
  v51 = (_QWORD *)(v54 + v6 + 22 * v4);
  v52 = (char *)v51 + *(int *)(v2 + 48);
  *v51 = 24;
  *(_QWORD *)v52 = "sv_reference_point";
  *((_QWORD *)v52 + 1) = 18;
  v52[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v54);
}

uint64_t sub_10004EB98()
{
  return sub_100008BD0(&qword_1003875B0, (uint64_t)qword_100383370, (uint64_t)sub_10004E5DC);
}

uint64_t sub_10004EBB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003875B0, (uint64_t)qword_100383370, (uint64_t)sub_10004E5DC, a1);
}

uint64_t sub_10004EBD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource) = 7;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions) = &_swiftEmptyArrayStorage;
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1) = 5;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections) = &_swiftEmptyArrayStorage;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5) = 5;
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint) = 4;
  qword_1003875C0 = v1;
  return result;
}

uint64_t sub_10004EDBC()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, &qword_10036A780);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections));
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit, &qword_10036A7D0);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10004EE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  ValueMetadata *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t (*v32)(uint64_t);
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10005F3D8(v13);
    swift_release(v10);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, v43, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
          v21 = &qword_10036AC10;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          v23 = &unk_1002C55F4;
          goto LABEL_25;
        case 2:
          v24 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
          goto LABEL_34;
        case 3:
          v25 = v15
              + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource, v43, 33, 0);
          v26 = sub_10007FA70();
          v27 = v25;
          v28 = &type metadata for CLP_LogEntry_PrivateData_SvPositionSource;
          goto LABEL_32;
        case 4:
          v29 = v15
              + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions, v43, 33, 0);
          v30 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
          v31 = &qword_10036AE98;
          v32 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime;
          v33 = &unk_1002C7BEC;
          goto LABEL_23;
        case 5:
          v24 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
          goto LABEL_34;
        case 6:
          v24 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
          goto LABEL_34;
        case 7:
          v24 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
          goto LABEL_34;
        case 8:
          v34 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
          goto LABEL_16;
        case 9:
          v34 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
LABEL_16:
          v35 = v15 + v34;
          swift_beginAccess(v15 + v34, v43, 33, 0);
          v36 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v35, a2, a3);
          goto LABEL_35;
        case 10:
          v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1;
          goto LABEL_31;
        case 11:
          v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1;
          goto LABEL_31;
        case 12:
          v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1;
          goto LABEL_31;
        case 13:
          v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1;
          goto LABEL_31;
        case 14:
          v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1;
          goto LABEL_31;
        case 15:
          v29 = v15
              + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections, v43, 33, 0);
          v30 = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          v31 = &qword_10036AE80;
          v32 = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections;
          v33 = &unk_1002C7A84;
LABEL_23:
          v38 = sub_10000FD38(v31, v32, (uint64_t)v33);
          v36 = v5;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v29, v30, v38, a2, a3);
          goto LABEL_35;
        case 16:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit, v43, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
          v21 = &qword_10036AEB0;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit;
          v23 = &unk_1002C7D54;
LABEL_25:
          v39 = sub_10000FD38(v21, v22, (uint64_t)v23);
          v36 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v39, a2, a3);
          goto LABEL_35;
        case 18:
          v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5;
          goto LABEL_31;
        case 19:
          v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5;
          goto LABEL_31;
        case 20:
          v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5;
          goto LABEL_31;
        case 21:
          v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5;
          goto LABEL_31;
        case 22:
          v37 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5;
LABEL_31:
          v40 = v15 + v37;
          swift_beginAccess(v15 + v37, v43, 33, 0);
          v26 = sub_10007FA2C();
          v27 = v40;
          v28 = &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication;
          goto LABEL_32;
        case 23:
          v24 = OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
LABEL_34:
          v41 = v15 + v24;
          swift_beginAccess(v15 + v24, v43, 33, 0);
          v36 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v41, a2, a3);
          goto LABEL_35;
        case 24:
          v42 = v15
              + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, v43, 33, 0);
          v26 = sub_10007F91C();
          v27 = v42;
          v28 = &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint;
LABEL_32:
          v36 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v27, v28, v26, a2, a3);
LABEL_35:
          v5 = v36;
          swift_endAccess(v43);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_10004F2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  _BYTE *v46;
  unint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  _BYTE v53[24];
  _BYTE v54[24];
  _BYTE v55[24];
  _BYTE v56[24];
  _BYTE v57[24];
  _BYTE v58[24];
  _BYTE v59[24];
  _BYTE v60[24];
  _BYTE v61[24];
  _BYTE v62[24];
  _BYTE v63[24];
  _BYTE v64[24];
  _BYTE v65[24];
  _BYTE v66[24];
  _BYTE v67[24];
  _BYTE v68[24];
  _BYTE v69[24];
  _BYTE v70[24];
  _BYTE v71[24];
  _BYTE v72[24];
  _BYTE v73[24];
  char v74;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20));
  v10 = swift_retain(v9);
  sub_10004FB18(v10, a1, a2, a3);
  if (v4)
    return swift_release(v9);
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds, v55, 0, 0);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
  v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource, v56, 0, 0);
  if (*v13 != 7)
  {
    v73[0] = *v13;
    v14 = sub_10007FA70();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v73, 3, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource, v14, a2, a3);
  }
  v15 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions, v54, 0, 0);
  v16 = *v15;
  if (*(_QWORD *)(v16 + 16))
  {
    v17 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
    v18 = sub_10000FD38(&qword_10036AE98, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&unk_1002C7BEC);
    v19 = swift_bridgeObjectRetain(v16);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v19, 4, v17, v18, a2, a3);
    swift_bridgeObjectRelease(v16);
  }
  v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds, v57, 0, 0);
  if ((*(_BYTE *)(v20 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5, a2, a3, *(double *)v20);
  v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb, v73, 0, 0);
  if ((*(_BYTE *)(v21 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(6, a2, a3, *(double *)v21);
  v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec, v72, 0, 0);
  if ((*(_BYTE *)(v22 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7, a2, a3, *(double *)v22);
  v23 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM, v71, 0, 0);
  if ((*(_BYTE *)(v23 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(8, a2, a3, *(float *)v23);
  v24 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds, v70, 0, 0);
  if ((*(_BYTE *)(v24 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(9, a2, a3, *(float *)v24);
  v25 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1, v69, 0, 0);
  if (*v25 != 5)
  {
    v68[0] = *v25;
    v26 = sub_10007FA2C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v68, 10, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication, v26, a2, a3);
  }
  v27 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1, v68, 0, 0);
  if (*v27 != 5)
  {
    v67[0] = *v27;
    v28 = sub_10007FA2C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v67, 11, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication, v28, a2, a3);
  }
  v29 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1, v67, 0, 0);
  if (*v29 != 5)
  {
    v66[0] = *v29;
    v30 = sub_10007FA2C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v66, 12, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication, v30, a2, a3);
  }
  v31 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1, v66, 0, 0);
  if (*v31 != 5)
  {
    v65[0] = *v31;
    v32 = sub_10007FA2C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v65, 13, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication, v32, a2, a3);
  }
  v33 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1, v65, 0, 0);
  if (*v33 != 5)
  {
    v64[0] = *v33;
    v34 = sub_10007FA2C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v64, 14, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication, v34, a2, a3);
  }
  v35 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections, v53, 0, 0);
  v36 = *v35;
  if (*(_QWORD *)(v36 + 16))
  {
    v37 = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
    v38 = sub_10000FD38(&qword_10036AE80, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&unk_1002C7A84);
    v39 = swift_bridgeObjectRetain(v36);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v39, 15, v37, v38, a2, a3);
    swift_bridgeObjectRelease(v36);
  }
  sub_10004FCA4(v9, a1, a2, a3);
  v40 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5, v64, 0, 0);
  if (*v40 != 5)
  {
    v63[0] = *v40;
    v41 = sub_10007FA2C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v63, 18, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication, v41, a2, a3);
  }
  v42 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5, v63, 0, 0);
  if (*v42 != 5)
  {
    v62[0] = *v42;
    v43 = sub_10007FA2C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v62, 19, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication, v43, a2, a3);
  }
  v44 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5, v62, 0, 0);
  if (*v44 != 5)
  {
    v61[0] = *v44;
    v45 = sub_10007FA2C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v61, 20, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication, v45, a2, a3);
  }
  v46 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5, v61, 0, 0);
  if (*v46 != 5)
  {
    v60[0] = *v46;
    v47 = sub_10007FA2C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v60, 21, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication, v47, a2, a3);
  }
  v48 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, v60, 0, 0);
  if (*v48 != 5)
  {
    v59[0] = *v48;
    v49 = sub_10007FA2C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v59, 22, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication, v49, a2, a3);
  }
  v50 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec, v59, 0, 0);
  if ((*(_BYTE *)(v50 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(23, a2, a3, *(double *)v50);
  v51 = (char *)(v9
               + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, v58, 0, 0);
  if (*v51 != 4)
  {
    v74 = *v51;
    v52 = sub_10007F91C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v74, 24, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint, v52, a2, a3);
  }
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10004FB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A780);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A780);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A780);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  v15 = sub_10000FD38(&qword_10036AC10, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&unk_1002C55F4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_10004FCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A7D0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A7D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7D0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  v15 = sub_10000FD38(&qword_10036AEB0, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&unk_1002C7D54);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 16, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10004FE30(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t (*)(uint64_t, uint64_t))sub_10004FE58) & 1;
}

BOOL sub_10004FE58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 result;
  uint64_t v33;
  char v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  unsigned __int8 *v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  unsigned __int8 *v64;
  int v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int v70;
  unsigned __int8 *v71;
  int v72;
  unsigned __int8 *v73;
  int v74;
  unsigned __int8 *v75;
  int v76;
  unsigned __int8 *v77;
  int v78;
  unsigned __int8 *v79;
  int v80;
  unsigned __int8 *v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t *v94;
  uint64_t *v95;
  char v96;
  unsigned __int8 *v97;
  int v98;
  unsigned __int8 *v99;
  int v100;
  unsigned __int8 *v101;
  int v102;
  unsigned __int8 *v103;
  int v104;
  unsigned __int8 *v105;
  int v106;
  unsigned __int8 *v107;
  int v108;
  unsigned __int8 *v109;
  int v110;
  unsigned __int8 *v111;
  int v112;
  unsigned __int8 *v113;
  int v114;
  unsigned __int8 *v115;
  int v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  unsigned __int8 *v120;
  int v121;
  unsigned __int8 *v122;
  int v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _BYTE v175[24];
  _BYTE v176[24];
  _BYTE v177[24];
  _BYTE v178[24];
  _BYTE v179[24];
  _BYTE v180[32];

  v134 = a2;
  v130 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  v128 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v125 = (uint64_t *)((char *)&v124 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v127 = sub_1000039AC(&qword_10036DEC8);
  __chkstk_darwin(v127);
  v131 = (uint64_t)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036A7D0);
  v6 = __chkstk_darwin(v5);
  v126 = (uint64_t *)((char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v129 = (uint64_t)&v124 - v8;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v132 = (uint64_t)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_10036DED0);
  __chkstk_darwin(v12);
  v14 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000039AC(&qword_10036A780);
  v16 = __chkstk_darwin(v15);
  v133 = (uint64_t)&v124 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v124 - v18;
  v20 = a1;
  v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v21, v180, 0, 0);
  sub_10000E660(v21, (uint64_t)v19, &qword_10036A780);
  v22 = v134;
  v23 = v134
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(v134+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, v179, 0, 0);
  v24 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_10000E660((uint64_t)v19, (uint64_t)v14, &qword_10036A780);
  sub_10000E660(v23, v24, &qword_10036A780);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v25((uint64_t)v14, 1, v9) == 1)
  {
    swift_retain(v20);
    swift_retain(v22);
    sub_100015704((uint64_t)v19, &qword_10036A780);
    v26 = v25(v24, 1, v9);
    v27 = v22;
    v28 = v20;
    if (v26 == 1)
    {
      sub_100015704((uint64_t)v14, &qword_10036A780);
      goto LABEL_12;
    }
LABEL_6:
    sub_100015704((uint64_t)v14, &qword_10036DED0);
    goto LABEL_7;
  }
  v28 = v20;
  v29 = v22;
  v30 = v133;
  sub_10000E660((uint64_t)v14, v133, &qword_10036A780);
  if (v25(v24, 1, v9) == 1)
  {
    swift_retain(v28);
    v27 = v22;
    swift_retain(v22);
    sub_100015704((uint64_t)v19, &qword_10036A780);
    sub_100004030(v30, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }
  v33 = v132;
  sub_100003E08(v24, v132, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  swift_retain(v28);
  v27 = v29;
  swift_retain(v29);
  v34 = sub_1000670C8(v30, v33);
  sub_100004030(v33, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100015704((uint64_t)v19, &qword_10036A780);
  sub_100004030(v30, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100015704((uint64_t)v14, &qword_10036A780);
  if ((v34 & 1) == 0)
    goto LABEL_7;
LABEL_12:
  v35 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds, v178, 0, 0);
  v36 = *(double *)v35;
  LOBYTE(v35) = *(_BYTE *)(v35 + 8);
  v37 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds, v177, 0, 0);
  if ((v35 & 1) != 0)
  {
    if ((*(_BYTE *)(v37 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v37 + 8) & 1) != 0 || v36 != *(double *)v37)
  {
    goto LABEL_7;
  }
  v38 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource, v176, 0, 0);
  v39 = *v38;
  v40 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource, v175, 0, 0);
  v41 = *v40;
  if (v39 == 7)
  {
    if (v41 != 7)
      goto LABEL_7;
  }
  else if (v41 == 7 || v39 != v41)
  {
    goto LABEL_7;
  }
  v42 = (uint64_t *)(v28
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions, &v174, 0, 0);
  v43 = *v42;
  v44 = (uint64_t *)(v27
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions, &v173, 0, 0);
  v45 = *v44;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v45);
  v46 = sub_10005E058(v43, v45);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v45);
  if ((v46 & 1) == 0)
    goto LABEL_7;
  v47 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds, &v172, 0, 0);
  v48 = *(double *)v47;
  LOBYTE(v47) = *(_BYTE *)(v47 + 8);
  v49 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds, &v171, 0, 0);
  if ((v47 & 1) != 0)
  {
    if ((*(_BYTE *)(v49 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v49 + 8) & 1) != 0 || v48 != *(double *)v49)
  {
    goto LABEL_7;
  }
  v50 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb, &v170, 0, 0);
  v51 = *(double *)v50;
  LOBYTE(v50) = *(_BYTE *)(v50 + 8);
  v52 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb, &v169, 0, 0);
  if ((v50 & 1) != 0)
  {
    if ((*(_BYTE *)(v52 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v52 + 8) & 1) != 0 || v51 != *(double *)v52)
  {
    goto LABEL_7;
  }
  v53 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec, &v168, 0, 0);
  v54 = *(double *)v53;
  LOBYTE(v53) = *(_BYTE *)(v53 + 8);
  v55 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec, &v167, 0, 0);
  if ((v53 & 1) != 0)
  {
    if ((*(_BYTE *)(v55 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v55 + 8) & 1) != 0 || v54 != *(double *)v55)
  {
    goto LABEL_7;
  }
  v56 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM, &v166, 0, 0);
  v57 = *(float *)v56;
  LOBYTE(v56) = *(_BYTE *)(v56 + 4);
  v58 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM, &v165, 0, 0);
  if ((v56 & 1) != 0)
  {
    if ((*(_BYTE *)(v58 + 4) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v58 + 4) & 1) != 0 || v57 != *(float *)v58)
  {
    goto LABEL_7;
  }
  v59 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds, &v164, 0, 0);
  v60 = *(float *)v59;
  LOBYTE(v59) = *(_BYTE *)(v59 + 4);
  v61 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds, &v163, 0, 0);
  if ((v59 & 1) != 0)
  {
    if ((*(_BYTE *)(v61 + 4) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v61 + 4) & 1) != 0 || v60 != *(float *)v61)
  {
    goto LABEL_7;
  }
  v62 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1, &v162, 0, 0);
  v63 = *v62;
  v64 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1, &v161, 0, 0);
  v65 = *v64;
  if (v63 == 5)
  {
    if (v65 == 5)
      goto LABEL_53;
LABEL_7:
    swift_release(v28);
    v31 = v27;
LABEL_8:
    swift_release(v31);
    return 0;
  }
  if (v65 == 5 || v63 != v65)
    goto LABEL_7;
LABEL_53:
  v66 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1, &v160, 0, 0);
  v67 = *v66;
  v68 = v27;
  v69 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1, &v159, 0, 0);
  v70 = *v69;
  if (v67 == 5)
  {
    if (v70 != 5)
      goto LABEL_80;
  }
  else if (v70 == 5 || v67 != v70)
  {
    goto LABEL_80;
  }
  v71 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1, &v158, 0, 0);
  v72 = *v71;
  v73 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1, &v157, 0, 0);
  v74 = *v73;
  if (v72 == 5)
  {
    if (v74 != 5)
      goto LABEL_80;
  }
  else if (v74 == 5 || v72 != v74)
  {
    goto LABEL_80;
  }
  v75 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1, &v156, 0, 0);
  v76 = *v75;
  v77 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1, &v155, 0, 0);
  v78 = *v77;
  if (v76 == 5)
  {
    if (v78 != 5)
      goto LABEL_80;
  }
  else if (v78 == 5 || v76 != v78)
  {
    goto LABEL_80;
  }
  v79 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1, &v154, 0, 0);
  v80 = *v79;
  v81 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1, &v153, 0, 0);
  v82 = *v81;
  if (v80 == 5)
  {
    if (v82 != 5)
      goto LABEL_80;
  }
  else if (v82 == 5 || v80 != v82)
  {
    goto LABEL_80;
  }
  v83 = (uint64_t *)(v28
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections, &v152, 0, 0);
  v84 = *v83;
  v85 = (uint64_t *)(v27
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections, &v151, 0, 0);
  v86 = *v85;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRetain(v86);
  v87 = sub_10005E598(v84, v86);
  swift_bridgeObjectRelease(v84);
  swift_bridgeObjectRelease(v86);
  if ((v87 & 1) == 0)
    goto LABEL_80;
  v88 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit, &v150, 0, 0);
  v89 = v129;
  sub_10000E660(v88, v129, &qword_10036A7D0);
  v90 = v68
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess(v68+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit, &v149, 0, 0);
  v91 = v131;
  v92 = v131 + *(int *)(v127 + 48);
  sub_10000E660(v89, v131, &qword_10036A7D0);
  sub_10000E660(v90, v92, &qword_10036A7D0);
  v93 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
  if (v93(v91, 1, v130) == 1)
  {
    sub_100015704(v129, &qword_10036A7D0);
    if (v93(v92, 1, v130) == 1)
    {
      sub_100015704(v131, &qword_10036A7D0);
      goto LABEL_82;
    }
LABEL_79:
    sub_100015704(v131, &qword_10036DEC8);
    goto LABEL_80;
  }
  sub_10000E660(v131, (uint64_t)v126, &qword_10036A7D0);
  if (v93(v92, 1, v130) == 1)
  {
    sub_100015704(v129, &qword_10036A7D0);
    sub_100004030((uint64_t)v126, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
    goto LABEL_79;
  }
  v94 = v125;
  sub_100003E08(v92, (uint64_t)v125, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  v95 = v126;
  v96 = sub_100062A10(v126, v94);
  sub_100004030((uint64_t)v94, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  sub_100015704(v129, &qword_10036A7D0);
  sub_100004030((uint64_t)v95, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  sub_100015704(v131, &qword_10036A7D0);
  if ((v96 & 1) == 0)
    goto LABEL_80;
LABEL_82:
  v97 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5, &v148, 0, 0);
  v98 = *v97;
  v99 = (unsigned __int8 *)(v68
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess(v68+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5, &v147, 0, 0);
  v100 = *v99;
  if (v98 == 5)
  {
    if (v100 != 5)
      goto LABEL_80;
  }
  else if (v100 == 5 || v98 != v100)
  {
    goto LABEL_80;
  }
  v101 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5, &v146, 0, 0);
  v102 = *v101;
  v103 = (unsigned __int8 *)(v68
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess(v68+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5, &v145, 0, 0);
  v104 = *v103;
  if (v102 == 5)
  {
    if (v104 != 5)
      goto LABEL_80;
  }
  else if (v104 == 5 || v102 != v104)
  {
    goto LABEL_80;
  }
  v105 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5, &v144, 0, 0);
  v106 = *v105;
  v107 = (unsigned __int8 *)(v68
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess(v68+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5, &v143, 0, 0);
  v108 = *v107;
  if (v106 == 5)
  {
    if (v108 != 5)
      goto LABEL_80;
  }
  else if (v108 == 5 || v106 != v108)
  {
    goto LABEL_80;
  }
  v109 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5, &v142, 0, 0);
  v110 = *v109;
  v111 = (unsigned __int8 *)(v68
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess(v68+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5, &v141, 0, 0);
  v112 = *v111;
  if (v110 == 5)
  {
    if (v112 != 5)
      goto LABEL_80;
  }
  else if (v112 == 5 || v110 != v112)
  {
    goto LABEL_80;
  }
  v113 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, &v140, 0, 0);
  v114 = *v113;
  v115 = (unsigned __int8 *)(v68
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess(v68+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, &v139, 0, 0);
  v116 = *v115;
  if (v114 == 5)
  {
    if (v116 != 5)
      goto LABEL_80;
  }
  else if (v116 == 5 || v114 != v116)
  {
    goto LABEL_80;
  }
  v117 = v28
       + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec, &v138, 0, 0);
  v118 = *(double *)v117;
  LOBYTE(v117) = *(_BYTE *)(v117 + 8);
  v119 = v68
       + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess(v68+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec, &v137, 0, 0);
  if ((v117 & 1) != 0)
  {
    if ((*(_BYTE *)(v119 + 8) & 1) != 0)
      goto LABEL_112;
LABEL_80:
    swift_release(v28);
    v31 = v68;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(v119 + 8) & 1) != 0 || v118 != *(double *)v119)
    goto LABEL_80;
LABEL_112:
  v120 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess(v28+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, &v136, 0, 0);
  v121 = *v120;
  swift_release(v28);
  v122 = (unsigned __int8 *)(v68
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess(v68+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, &v135, 0, 0);
  v123 = *v122;
  swift_release(v68);
  if (v121 == 4)
    return v123 == 4;
  result = 0;
  if (v123 != 4 && v121 == v123)
    return 1;
  return result;
}

Swift::Int sub_100050CB8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &qword_10036A950, (uint64_t)&unk_1002C7FBC);
}

uint64_t sub_100050CD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_1003875B8, &qword_1003875C0, (uint64_t)sub_10004EBD0, a2);
}

uint64_t sub_100050CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004EE2C(a1, a2, a3);
}

uint64_t sub_100050D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F2A4(a1, a2, a3);
}

uint64_t sub_100050D18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD40, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&unk_1002C7F34);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100050D68@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003875B0, (uint64_t)qword_100383370, (uint64_t)sub_10004E5DC, a1);
}

uint64_t sub_100050D84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AEC8, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&unk_1002C7EBC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100050DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AEC8, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&unk_1002C7EBC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100050E14()
{
  return &unk_1003522F0;
}

unint64_t sub_100050E20()
{
  return 0xD000000000000030;
}

uint64_t sub_100050E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383388);
  sub_10000E6A4(v0, (uint64_t)qword_100383388);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "band";
  *(_QWORD *)(v9 + 8) = 4;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "rf_time_bias_nanoseconds";
  *(_QWORD *)(v13 + 8) = 24;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "rf_time_bias_uncertainty_nanoseconds";
  *((_QWORD *)v15 + 1) = 36;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "automatic_gain_control_db";
  *((_QWORD *)v17 + 1) = 25;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005100C()
{
  return sub_100008BD0(&qword_1003875C8, (uint64_t)qword_100383388, (uint64_t)sub_100050E3C);
}

uint64_t sub_100051028@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003875C8, (uint64_t)qword_100383388, (uint64_t)sub_100050E3C, a1);
}

uint64_t sub_100051044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 20);
          v11 = sub_10007FB80();
          v12 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v10, &type metadata for CLP_LogEntry_PrivateData_Band, v11, a2, a3);
          goto LABEL_5;
        case 2:
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          v12 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v13 + 24), a2, a3);
          goto LABEL_5;
        case 3:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 28);
          goto LABEL_12;
        case 4:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 32);
LABEL_12:
          v12 = v9;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v14, a2, a3);
LABEL_5:
          v9 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100051178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 13)
  {
    v15 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v11 = sub_10007FB80();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 1, &type metadata for CLP_LogEntry_PrivateData_Band, v11, a2, a3);
  }
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4, a2, a3, *(float *)v14);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000512C4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, &qword_10036A958, (uint64_t)&unk_1002C8124);
}

uint64_t sub_1000512E0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 13;
  v6 = a2 + v5;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1[8];
  v8 = a2 + a1[7];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a2 + v7;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_10005133C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100051044(a1, a2, a3);
}

uint64_t sub_100051350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100051178(a1, a2, a3);
}

uint64_t sub_100051364(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD38, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&unk_1002C809C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000513B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003875C8, (uint64_t)qword_100383388, (uint64_t)sub_100050E3C, a1);
}

uint64_t sub_1000513D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AEE0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&unk_1002C8024);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100051410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AEE0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&unk_1002C8024);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100051460()
{
  return &unk_100352300;
}

unint64_t sub_10005146C()
{
  return 0xD000000000000029;
}

uint64_t sub_100051488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003833A0);
  sub_10000E6A4(v0, (uint64_t)qword_1003833A0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "time_of_change";
  *(_QWORD *)(v9 + 8) = 14;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "new_leap_second";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000515D8()
{
  return sub_100008BD0(&qword_1003875D0, (uint64_t)qword_1003833A0, (uint64_t)sub_100051488);
}

uint64_t sub_1000515F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003875D0, (uint64_t)qword_1003833A0, (uint64_t)sub_100051488, a1);
}

uint64_t sub_100051610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    if (result == 2)
    {
      v9 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v9 + 24), a2, a3);
    }
    else if (result == 1)
    {
      v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v12 + 20), a2, a3);
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_1000516DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v10 = result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = (unsigned int *)(v5 + *(int *)(v10 + 24));
    if ((v12[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v12, 2, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000517A8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, &qword_10036A960, (uint64_t)&unk_1002C828C);
}

uint64_t sub_1000517C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 24);
  v6 = a2 + *(int *)(a1 + 20);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_100051808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100051610(a1, a2, a3);
}

uint64_t sub_10005181C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000516DC(a1, a2, a3);
}

uint64_t sub_100051830(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD30, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&unk_1002C8204);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100051880@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003875D0, (uint64_t)qword_1003833A0, (uint64_t)sub_100051488, a1);
}

uint64_t sub_10005189C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AEF8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&unk_1002C818C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000518DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AEF8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&unk_1002C818C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100051930()
{
  return &unk_100352310;
}

unint64_t sub_10005193C()
{
  return 0xD000000000000027;
}

uint64_t sub_100051958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003833B8);
  sub_10000E6A4(v0, (uint64_t)qword_1003833B8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "current_leap_second";
  *(_QWORD *)(v9 + 8) = 19;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "change_knowledge";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "new_leap_second";
  *(_QWORD *)(v14 + 8) = 15;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100051AEC()
{
  return sub_100008BD0(&qword_1003875D8, (uint64_t)qword_1003833B8, (uint64_t)sub_100051958);
}

uint64_t sub_100051B08@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003875D8, (uint64_t)qword_1003833B8, (uint64_t)sub_100051958, a1);
}

uint64_t sub_100051B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v15 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 24);
        v16 = sub_10007F9A4();
        v13 = v9;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v15, &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge, v16, a2, a3);
        goto LABEL_5;
      }
      if (result == 1)
      {
        v14 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
        v13 = v9;
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v14 + 20), a2, a3);
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 28);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    v12 = sub_10000FD38(&qword_10036AEF8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&unk_1002C818C);
    v13 = v9;
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
LABEL_5:
    v9 = v13;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_100051C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  char v13;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v10 = result;
  v11 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v11[1] & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 1, a2, a3);
  if (!v4)
  {
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 5)
    {
      v13 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      v12 = sub_10007F9A4();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v13, 2, &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge, v12, a2, a3);
    }
    sub_100051D80(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100051D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7D8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036A7D8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7D8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  v15 = sub_10000FD38(&qword_10036AEF8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&unk_1002C818C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

Swift::Int sub_100051EF8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, &qword_10036A968, (uint64_t)&unk_1002C83F4);
}

uint64_t sub_100051F14@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a2 + v4) = 5;
  v6 = a2 + a1[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_100051F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100051B24(a1, a2, a3);
}

uint64_t sub_100051F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100051C7C(a1, a2, a3);
}

uint64_t sub_100051FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD28, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&unk_1002C836C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100051FF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003875D8, (uint64_t)qword_1003833B8, (uint64_t)sub_100051958, a1);
}

uint64_t sub_100052010(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AF10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&unk_1002C82F4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100052050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AF10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&unk_1002C82F4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000520A4()
{
  return &unk_100352320;
}

unint64_t sub_1000520B0()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1000520CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003833D0);
  sub_10000E6A4(v0, (uint64_t)qword_1003833D0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "applicable_time_nanoseconds";
  *(_QWORD *)(v9 + 8) = 27;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "offset_nanoseconds";
  *(_QWORD *)(v13 + 8) = 18;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "drift_ppb";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "accel_ppb_per_second";
  *((_QWORD *)v17 + 1) = 20;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005228C()
{
  return sub_100008BD0(&qword_1003875E0, (uint64_t)qword_1003833D0, (uint64_t)sub_1000520CC);
}

uint64_t sub_1000522A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003875E0, (uint64_t)qword_1003833D0, (uint64_t)sub_1000520CC, a1);
}

uint64_t sub_1000522C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v10 + 20), a2, a3);
          break;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 24);
          goto LABEL_5;
        case 3:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 28);
          goto LABEL_5;
        case 4:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000523D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v14);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_100052500()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, &qword_10036A970, (uint64_t)&unk_1002C855C);
}

uint64_t sub_10005251C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a2 + v8;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return result;
}

uint64_t sub_10005257C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000522C4(a1, a2, a3);
}

uint64_t sub_100052590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000523D0(a1, a2, a3);
}

uint64_t sub_1000525A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD20, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&unk_1002C84D4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000525F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003875E0, (uint64_t)qword_1003833D0, (uint64_t)sub_1000520CC, a1);
}

uint64_t sub_100052610(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AF28, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&unk_1002C845C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100052650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AF28, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&unk_1002C845C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000526A0()
{
  return &unk_100352330;
}

unint64_t sub_1000526AC()
{
  return 0xD000000000000024;
}

uint64_t sub_1000526C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003833E8);
  sub_10000E6A4(v0, (uint64_t)qword_1003833E8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "week";
  *(_QWORD *)(v9 + 8) = 4;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "leap_second";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "conversion";
  *(_QWORD *)(v14 + 8) = 10;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100052864()
{
  return sub_100008BD0(&qword_1003875E8, (uint64_t)qword_1003833E8, (uint64_t)sub_1000526C8);
}

uint64_t sub_100052880@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003875E8, (uint64_t)qword_1003833E8, (uint64_t)sub_1000526C8, a1);
}

uint64_t sub_10005289C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 24);
        v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
        v11 = &qword_10036AF10;
        v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
        v13 = &unk_1002C82F4;
        goto LABEL_5;
      }
      if (result == 1)
      {
        v15 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v15 + 20), a2, a3);
      }
LABEL_11:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 28);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
    v11 = &qword_10036AF28;
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion;
    v13 = &unk_1002C845C;
LABEL_5:
    v14 = sub_10000FD38(v11, v12, (uint64_t)v13);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_100052A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned int *v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  v10 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v10[1] & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v10, 1, a2, a3);
  if (!v4)
  {
    sub_100052AD4(v5, a1, a2, a3);
    sub_100052C48(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100052AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036A7E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7E0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  v15 = sub_10000FD38(&qword_10036AF10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&unk_1002C82F4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100052C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7E8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036A7E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7E8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  v15 = sub_10000FD38(&qword_10036AF28, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&unk_1002C845C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Int sub_100052DC0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &qword_10036A978, (uint64_t)&unk_1002C86C4);
}

uint64_t sub_100052DDC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + v4;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a2 + a1[7];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t sub_100052E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005289C(a1, a2, a3);
}

uint64_t sub_100052E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100052A00(a1, a2, a3);
}

uint64_t sub_100052E94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD18, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&unk_1002C863C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100052EE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003875E8, (uint64_t)qword_1003833E8, (uint64_t)sub_1000526C8, a1);
}

uint64_t sub_100052F00(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AF40, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&unk_1002C85C4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100052F40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AF40, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&unk_1002C85C4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100052F90()
{
  return &unk_100352340;
}

unint64_t sub_100052F9C()
{
  return 0xD000000000000033;
}

uint64_t sub_100052FB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383400);
  sub_10000E6A4(v0, (uint64_t)qword_100383400);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "collection_time_nanoseconds";
  *(_QWORD *)(v9 + 8) = 27;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "offset_time_nanoseconds";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100053108()
{
  return sub_100008BD0(&qword_1003875F0, (uint64_t)qword_100383400, (uint64_t)sub_100052FB8);
}

uint64_t sub_100053124@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003875F0, (uint64_t)qword_100383400, (uint64_t)sub_100052FB8, a1);
}

uint64_t sub_100053140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    if (result == 2)
    {
      v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v9 + 24), a2, a3);
    }
    else if (result == 1)
    {
      v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v12 + 20), a2, a3);
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_10005320C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v10 = result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000532D8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, &qword_10036A980, (uint64_t)&unk_1002C882C);
}

uint64_t sub_1000532F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 24);
  v6 = a2 + *(int *)(a1 + 20);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_100053338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100053140(a1, a2, a3);
}

uint64_t sub_10005334C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005320C(a1, a2, a3);
}

uint64_t sub_100053360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD10, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&unk_1002C87A4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000533B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003875F0, (uint64_t)qword_100383400, (uint64_t)sub_100052FB8, a1);
}

uint64_t sub_1000533CC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AF58, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&unk_1002C872C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005340C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AF58, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&unk_1002C872C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100053460()
{
  return &unk_100352350;
}

unint64_t sub_10005346C()
{
  return 0xD000000000000028;
}

uint64_t sub_100053488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383418);
  sub_10000E6A4(v0, (uint64_t)qword_100383418);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "four_week_period";
  *(_QWORD *)(v9 + 8) = 16;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "day";
  *(_QWORD *)(v13 + 8) = 3;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "leap_second_deprecated";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "gps_time_conversion";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "utc_conversion_deprecated";
  *(_QWORD *)(v18 + 8) = 25;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100053698()
{
  return sub_100008BD0(&qword_1003875F8, (uint64_t)qword_100383418, (uint64_t)sub_100053488);
}

uint64_t sub_1000536B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003875F8, (uint64_t)qword_100383418, (uint64_t)sub_100053488, a1);
}

uint64_t sub_1000536D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 20);
          goto LABEL_12;
        case 2:
          v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 24);
LABEL_12:
          v14 = v9;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + v15, a2, a3);
          goto LABEL_6;
        case 3:
          v16 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 28);
          v17 = sub_10007F960();
          v14 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v16, &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated, v17, a2, a3);
          goto LABEL_6;
        case 4:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 32);
          goto LABEL_5;
        case 5:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
LABEL_5:
          v11 = v3 + v10;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
          v13 = sub_10000FD38(&qword_10036AF58, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&unk_1002C872C);
          v14 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v11, v12, v13, a2, a3);
LABEL_6:
          v9 = v14;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100053850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  char v14;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  v10 = result;
  v11 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v11[1] & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 1, a2, a3);
  if (!v4)
  {
    v12 = (unsigned int *)(v5 + *(int *)(v10 + 24));
    if ((v12[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v12, 2, a2, a3);
    if (*(_BYTE *)(v5 + *(int *)(v10 + 28)) != 6)
    {
      v14 = *(_BYTE *)(v5 + *(int *)(v10 + 28));
      v13 = sub_10007F960();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v14, 3, &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated, v13, a2, a3);
    }
    sub_1000539A8(v5, a1, a2, a3);
    sub_100053B1C(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000539A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  sub_10000E660(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_10036A7F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7F0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  v15 = sub_10000FD38(&qword_10036AF58, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&unk_1002C872C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_100053B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  sub_10000E660(a1 + *(int *)(v13 + 36), (uint64_t)v8, &qword_10036A7F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7F0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  v15 = sub_10000FD38(&qword_10036AF58, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&unk_1002C872C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

Swift::Int sub_100053C94()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, &qword_10036A988, (uint64_t)&unk_1002C8994);
}

uint64_t sub_100053CB0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + v4;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 6;
  v8 = a2 + v7;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v11(v8, 1, 1, v9);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11)(a2 + a1[9], 1, 1, v9);
}

uint64_t sub_100053D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000536D0(a1, a2, a3);
}

uint64_t sub_100053D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100053850(a1, a2, a3);
}

uint64_t sub_100053D84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD08, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&unk_1002C890C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100053DD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003875F8, (uint64_t)qword_100383418, (uint64_t)sub_100053488, a1);
}

uint64_t sub_100053DF0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AF70, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&unk_1002C8894);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100053E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AF70, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&unk_1002C8894);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100053E80()
{
  return &unk_100352360;
}

unint64_t sub_100053E8C()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_100053EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383430);
  sub_10000E6A4(v0, (uint64_t)qword_100383430);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "applicable_time_nanoSeconds";
  *(_QWORD *)(v9 + 8) = 27;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "offset_nanoSeconds";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "drift_ppb";
  *(_QWORD *)(v14 + 8) = 9;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005403C()
{
  return sub_100008BD0(&qword_100387600, (uint64_t)qword_100383430, (uint64_t)sub_100053EA8);
}

uint64_t sub_100054058@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387600, (uint64_t)qword_100383430, (uint64_t)sub_100053EA8, a1);
}

uint64_t sub_100054074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054098(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularUInt64Field(value:));
}

uint64_t sub_100054098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t result;
  char v15;
  uint64_t v16;

  v11 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v11, i);
    if (v6 || (v15 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        v13 = *(int *)(a4(0) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v5 + v13, a2, a3);
        break;
      case 2:
        v13 = *(int *)(a4(0) + 24);
        goto LABEL_3;
      case 1:
        v16 = a4(0);
        a5(v5 + *(int *)(v16 + 20), a2, a3);
        break;
    }
    v6 = 0;
    v11 = a2;
  }
  return result;
}

uint64_t sub_10005418C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v10 = result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    v13 = v5 + *(int *)(v10 + 28);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v13);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_100054288()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, &qword_10036A990, (uint64_t)&unk_1002C8AFC);
}

uint64_t sub_1000542A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005418C(a1, a2, a3);
}

uint64_t sub_1000542B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DD00, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C8A74);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100054308@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387600, (uint64_t)qword_100383430, (uint64_t)sub_100053EA8, a1);
}

uint64_t sub_100054324(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AF88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C89FC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100054364(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AF88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C89FC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000543B8()
{
  return &unk_100352370;
}

unint64_t sub_1000543C4()
{
  return 0xD000000000000027;
}

uint64_t sub_1000543E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383448);
  sub_10000E6A4(v0, (uint64_t)qword_100383448);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C30F0;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v8 = "week";
  *(_QWORD *)(v8 + 8) = 4;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6 + v4) = 2;
  *(_QWORD *)v12 = "leap_second_deprecated";
  *(_QWORD *)(v12 + 8) = 22;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "gps_time_conversion";
  *((_QWORD *)v14 + 1) = 19;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "glonass_time_conversion";
  *((_QWORD *)v16 + 1) = 23;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "galileo_time_conversion";
  *((_QWORD *)v18 + 1) = 23;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "utc_time_conversion_deprecated";
  *((_QWORD *)v20 + 1) = 30;
  v20[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100054620()
{
  return sub_100008BD0(&qword_100387608, (uint64_t)qword_100383448, (uint64_t)sub_1000543E0);
}

uint64_t sub_10005463C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387608, (uint64_t)qword_100383448, (uint64_t)sub_1000543E0, a1);
}

uint64_t sub_100054658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_DWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 20) = 1;
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(v1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, 1, 1, v5);
  v6(v1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, 1, 1, v5);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(v1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, 1, 1, v5);
  qword_100387618 = v1;
  return result;
}

uint64_t sub_10005475C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[32];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036A7E0);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 0;
  v10 = (_DWORD *)(v1 + 16);
  *(_BYTE *)(v2 + 20) = 1;
  v11 = v2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = v2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v15 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15)(v13, 1, 1, v14);
  v16 = v2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15)(v2+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, 1, 1, v14);
  v26 = v2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  v15();
  v27 = v2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  v15();
  swift_beginAccess(a1 + 16, v35, 0, 0);
  LODWORD(v14) = *(_DWORD *)(a1 + 16);
  LOBYTE(v15) = *(_BYTE *)(a1 + 20);
  swift_beginAccess(v10, v34, 1, 0);
  *v10 = v14;
  *(_BYTE *)(v2 + 20) = (_BYTE)v15;
  v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, v33, 0, 0);
  sub_10000E660(v17, (uint64_t)v9, &qword_10036A7E0);
  swift_beginAccess(v11, v32, 33, 0);
  sub_10000E574((uint64_t)v9, v11, &qword_10036A7E0);
  swift_endAccess(v32);
  v18 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, v32, 0, 0);
  sub_10000E660(v18, (uint64_t)v6, &qword_10036A7F8);
  swift_beginAccess(v13, v31, 33, 0);
  sub_10000E574((uint64_t)v6, v13, &qword_10036A7F8);
  swift_endAccess(v31);
  v19 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, v31, 0, 0);
  sub_10000E660(v19, (uint64_t)v6, &qword_10036A7F8);
  swift_beginAccess(v16, v30, 33, 0);
  sub_10000E574((uint64_t)v6, v16, &qword_10036A7F8);
  swift_endAccess(v30);
  v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, v30, 0, 0);
  sub_10000E660(v20, (uint64_t)v6, &qword_10036A7F8);
  v21 = v26;
  swift_beginAccess(v26, v29, 33, 0);
  sub_10000E574((uint64_t)v6, v21, &qword_10036A7F8);
  swift_endAccess(v29);
  v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, v29, 0, 0);
  sub_10000E660(v22, (uint64_t)v6, &qword_10036A7F8);
  swift_release(a1);
  v23 = v27;
  swift_beginAccess(v27, v28, 33, 0);
  sub_10000E574((uint64_t)v6, v23, &qword_10036A7F8);
  swift_endAccess(v28);
  return v2;
}

uint64_t sub_100054B1C()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, &qword_10036A7E0);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, &qword_10036A7F8);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, &qword_10036A7F8);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, &qword_10036A7F8);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, &qword_10036A7F8);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100054BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t (*v23)(uint64_t);
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10005475C(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          swift_beginAccess(v15 + 16, v27, 33, 0);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v15 + 16, a2, a3);
          goto LABEL_9;
        case 2:
          v20 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, v27, 33, 0);
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
          v22 = &qword_10036AF10;
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
          v24 = &unk_1002C82F4;
          goto LABEL_8;
        case 3:
          v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
          goto LABEL_7;
        case 4:
          v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
          goto LABEL_7;
        case 5:
          v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
          goto LABEL_7;
        case 6:
          v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
LABEL_7:
          v20 = v15 + v19;
          swift_beginAccess(v15 + v19, v27, 33, 0);
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
          v22 = &qword_10036AF88;
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion;
          v24 = &unk_1002C89FC;
LABEL_8:
          v25 = sub_10000FD38(v22, v23, (uint64_t)v24);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v20, v21, v25, a2, a3);
LABEL_9:
          v5 = v26;
          swift_endAccess(v27);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_100054DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  _BYTE v11[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v11, 0, 0);
  if ((*(_BYTE *)(v9 + 20) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*(unsigned int *)(v9 + 16), 1, a2, a3);
  if (v4)
    return swift_release(v9);
  sub_100054F64(v9, a1, a2, a3);
  sub_1000550F0(v9, a1, a2, a3);
  sub_10005527C(v9, a1, a2, a3);
  sub_100055408(v9, a1, a2, a3);
  sub_100055594(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100054F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A7E0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A7E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7E0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  v15 = sub_10000FD38(&qword_10036AF10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&unk_1002C82F4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_1000550F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7F8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v15 = sub_10000FD38(&qword_10036AF88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C89FC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10005527C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7F8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v15 = sub_10000FD38(&qword_10036AF88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C89FC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100055408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7F8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v15 = sub_10000FD38(&qword_10036AF88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C89FC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100055594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7F8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v15 = sub_10000FD38(&qword_10036AF88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C89FC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100055720(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t (*)(uint64_t, uint64_t))sub_100055748) & 1;
}

BOOL sub_100055748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE v134[24];
  _BYTE v135[24];
  _BYTE v136[24];
  _BYTE v137[24];
  _BYTE v138[24];
  _BYTE v139[24];
  _BYTE v140[32];

  v123 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v121 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v116 = (uint64_t)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_1000039AC(&qword_10036DF10);
  v5 = __chkstk_darwin(v125);
  v110 = (uint64_t)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v113 = (uint64_t)&v108 - v8;
  v9 = __chkstk_darwin(v7);
  v117 = (uint64_t)&v108 - v10;
  __chkstk_darwin(v9);
  v122 = (uint64_t)&v108 - v11;
  v12 = sub_1000039AC(&qword_10036A7F8);
  v13 = __chkstk_darwin(v12);
  v109 = (uint64_t)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v112 = (uint64_t)&v108 - v16;
  v17 = __chkstk_darwin(v15);
  v111 = (uint64_t)&v108 - v18;
  v19 = __chkstk_darwin(v17);
  v115 = (char *)&v108 - v20;
  v21 = __chkstk_darwin(v19);
  v114 = (uint64_t)&v108 - v22;
  v23 = __chkstk_darwin(v21);
  v119 = (uint64_t)&v108 - v24;
  v25 = __chkstk_darwin(v23);
  v118 = (uint64_t)&v108 - v26;
  __chkstk_darwin(v25);
  v126 = (uint64_t)&v108 - v27;
  v127 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v28 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v120 = (uint64_t)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000039AC(&qword_10036DF18);
  __chkstk_darwin(v30);
  v32 = (char *)&v108 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1000039AC(&qword_10036A7E0);
  v34 = __chkstk_darwin(v33);
  v124 = (uint64_t)&v108 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v37 = (char *)&v108 - v36;
  swift_beginAccess(a1 + 16, v140, 0, 0);
  v38 = *(_DWORD *)(a1 + 16);
  v128 = a1;
  v39 = *(_BYTE *)(a1 + 20);
  swift_beginAccess(a2 + 16, v139, 0, 0);
  v40 = a2;
  v41 = *(_BYTE *)(a2 + 20);
  if ((v39 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 20))
      return 0;
  }
  else
  {
    if (v38 != *(_DWORD *)(a2 + 16))
      v41 = 1;
    if ((v41 & 1) != 0)
      return 0;
  }
  v42 = v128;
  v43 = v128
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess(v128+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, v138, 0, 0);
  sub_10000E660(v43, (uint64_t)v37, &qword_10036A7E0);
  v44 = v40;
  v45 = v40
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess(v40+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, v137, 0, 0);
  v46 = (uint64_t)&v32[*(int *)(v30 + 48)];
  sub_10000E660((uint64_t)v37, (uint64_t)v32, &qword_10036A7E0);
  sub_10000E660(v45, v46, &qword_10036A7E0);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  v48 = v127;
  if (v47((uint64_t)v32, 1, v127) == 1)
  {
    swift_retain(v42);
    swift_retain(v40);
    sub_100015704((uint64_t)v37, &qword_10036A7E0);
    if (v47(v46, 1, v48) == 1)
    {
      sub_100015704((uint64_t)v32, &qword_10036A7E0);
      v49 = v42;
      goto LABEL_16;
    }
LABEL_12:
    v51 = &qword_10036DF18;
    v52 = (uint64_t)v32;
LABEL_13:
    sub_100015704(v52, v51);
LABEL_14:
    v53 = v42;
LABEL_30:
    swift_release(v53);
    swift_release(v44);
    return 0;
  }
  v50 = v124;
  sub_10000E660((uint64_t)v32, v124, &qword_10036A7E0);
  if (v47(v46, 1, v48) == 1)
  {
    swift_retain(v42);
    swift_retain(v40);
    sub_100015704((uint64_t)v37, &qword_10036A7E0);
    sub_100004030(v50, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    goto LABEL_12;
  }
  v54 = v120;
  sub_100003E08(v46, v120, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  swift_retain(v42);
  swift_retain(v40);
  v55 = sub_100064844(v50, v54);
  v56 = v50;
  v49 = v42;
  v57 = v55;
  sub_100004030(v54, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_100015704((uint64_t)v37, &qword_10036A7E0);
  v58 = v56;
  v44 = v40;
  sub_100004030(v58, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_100015704((uint64_t)v32, &qword_10036A7E0);
  if ((v57 & 1) == 0)
  {
    v53 = v49;
    goto LABEL_30;
  }
LABEL_16:
  v59 = v49
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess(v49+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, v136, 0, 0);
  v60 = v126;
  sub_10000E660(v59, v126, &qword_10036A7F8);
  v61 = v44
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess(v44+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, v135, 0, 0);
  v62 = v122;
  v63 = v122 + *(int *)(v125 + 48);
  sub_10000E660(v60, v122, &qword_10036A7F8);
  sub_10000E660(v61, v63, &qword_10036A7F8);
  v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 48);
  v65 = v123;
  if (v64(v62, 1, v123) == 1)
  {
    sub_100015704(v60, &qword_10036A7F8);
    v66 = v64(v63, 1, v65);
    v67 = v128;
    if (v66 == 1)
    {
      sub_100015704(v62, &qword_10036A7F8);
      goto LABEL_24;
    }
LABEL_21:
    sub_100015704(v62, &qword_10036DF10);
    v53 = v67;
    goto LABEL_30;
  }
  v68 = v118;
  sub_10000E660(v62, v118, &qword_10036A7F8);
  if (v64(v63, 1, v65) == 1)
  {
    sub_100015704(v126, &qword_10036A7F8);
    sub_100004030(v68, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    v67 = v128;
    goto LABEL_21;
  }
  v69 = v62;
  v70 = v116;
  sub_100003E08(v63, v116, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v71 = sub_100064118(v68, v70);
  sub_100004030(v70, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015704(v126, &qword_10036A7F8);
  sub_100004030(v68, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015704(v69, &qword_10036A7F8);
  v67 = v128;
  if ((v71 & 1) == 0)
  {
    v53 = v128;
    goto LABEL_30;
  }
LABEL_24:
  v72 = v67
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, v134, 0, 0);
  v73 = v119;
  sub_10000E660(v72, v119, &qword_10036A7F8);
  v74 = v44
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess(v44+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, &v133, 0, 0);
  v75 = v125;
  v76 = v117;
  v77 = v117 + *(int *)(v125 + 48);
  sub_10000E660(v73, v117, &qword_10036A7F8);
  sub_10000E660(v74, v77, &qword_10036A7F8);
  if (v64(v76, 1, v65) == 1)
  {
    sub_100015704(v73, &qword_10036A7F8);
    v78 = v64(v77, 1, v65);
    v42 = v128;
    if (v78 == 1)
    {
      sub_100015704(v76, &qword_10036A7F8);
      v79 = (uint64_t)v115;
      goto LABEL_33;
    }
LABEL_38:
    v51 = &qword_10036DF10;
    v52 = v76;
    goto LABEL_13;
  }
  v80 = v114;
  sub_10000E660(v76, v114, &qword_10036A7F8);
  v81 = v64(v77, 1, v65);
  v79 = (uint64_t)v115;
  if (v81 == 1)
  {
    sub_100015704(v119, &qword_10036A7F8);
    sub_100004030(v80, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    v42 = v128;
    goto LABEL_38;
  }
  v83 = v116;
  sub_100003E08(v77, v116, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v84 = sub_100064118(v80, v83);
  sub_100004030(v83, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015704(v119, &qword_10036A7F8);
  sub_100004030(v80, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015704(v117, &qword_10036A7F8);
  v42 = v128;
  if ((v84 & 1) == 0)
    goto LABEL_14;
LABEL_33:
  v85 = v42
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess(v42+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, &v132, 0, 0);
  sub_10000E660(v85, v79, &qword_10036A7F8);
  v86 = v44
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess(v44+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, &v131, 0, 0);
  v87 = *(int *)(v75 + 48);
  v88 = v113;
  v89 = v113 + v87;
  sub_10000E660(v79, v113, &qword_10036A7F8);
  v76 = v88;
  sub_10000E660(v86, v89, &qword_10036A7F8);
  if (v64(v88, 1, v65) == 1)
  {
    sub_100015704(v79, &qword_10036A7F8);
    v90 = v64(v89, 1, v65);
    v91 = v112;
    if (v90 == 1)
    {
      sub_100015704(v76, &qword_10036A7F8);
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  v92 = v111;
  sub_10000E660(v88, v111, &qword_10036A7F8);
  v93 = v64(v89, 1, v65);
  v91 = v112;
  if (v93 == 1)
  {
    sub_100015704(v79, &qword_10036A7F8);
    sub_100004030(v92, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_38;
  }
  v94 = v79;
  v95 = v92;
  v96 = v116;
  sub_100003E08(v89, v116, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v97 = sub_100064118(v95, v96);
  sub_100004030(v96, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015704(v94, &qword_10036A7F8);
  sub_100004030(v95, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015704(v113, &qword_10036A7F8);
  if ((v97 & 1) == 0)
    goto LABEL_14;
LABEL_40:
  v98 = v42
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess(v42+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, &v130, 0, 0);
  sub_10000E660(v98, v91, &qword_10036A7F8);
  v99 = v44
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess(v44+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, &v129, 0, 0);
  v100 = v91;
  v101 = v110;
  v102 = v110 + *(int *)(v125 + 48);
  sub_10000E660(v100, v110, &qword_10036A7F8);
  v103 = v101;
  sub_10000E660(v99, v102, &qword_10036A7F8);
  if (v64(v101, 1, v65) != 1)
  {
    v104 = v101;
    v105 = v109;
    sub_10000E660(v104, v109, &qword_10036A7F8);
    if (v64(v102, 1, v65) == 1)
    {
      swift_release(v42);
      swift_release(v44);
      sub_100015704(v112, &qword_10036A7F8);
      sub_100004030(v105, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      goto LABEL_45;
    }
    v106 = v116;
    sub_100003E08(v102, v116, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    v107 = sub_100064118(v105, v106);
    swift_release(v42);
    swift_release(v44);
    sub_100004030(v106, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    sub_100015704(v112, &qword_10036A7F8);
    sub_100004030(v105, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    sub_100015704(v103, &qword_10036A7F8);
    return (v107 & 1) != 0;
  }
  swift_release(v42);
  swift_release(v44);
  sub_100015704(v100, &qword_10036A7F8);
  if (v64(v102, 1, v65) != 1)
  {
LABEL_45:
    sub_100015704(v103, &qword_10036DF10);
    return 0;
  }
  sub_100015704(v101, &qword_10036A7F8);
  return 1;
}

Swift::Int sub_1000563E4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &qword_10036A998, (uint64_t)&unk_1002C8C64);
}

uint64_t sub_100056400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100387610, &qword_100387618, (uint64_t)sub_100054658, a2);
}

uint64_t sub_10005641C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054BB4(a1, a2, a3);
}

uint64_t sub_100056430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054DEC(a1, a2, a3);
}

uint64_t sub_100056444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DCF8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&unk_1002C8BDC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100056494@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387608, (uint64_t)qword_100383448, (uint64_t)sub_1000543E0, a1);
}

uint64_t sub_1000564B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AFA0, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&unk_1002C8B64);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000564F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AFA0, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&unk_1002C8B64);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100056540()
{
  return &unk_100352380;
}

unint64_t sub_10005654C()
{
  return 0xD000000000000028;
}

uint64_t sub_100056568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383460);
  sub_10000E6A4(v0, (uint64_t)qword_100383460);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "week";
  *(_QWORD *)(v9 + 8) = 4;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "leap_second_deprecated";
  *(_QWORD *)(v13 + 8) = 22;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "gps_time_conversion";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "utc_time_conversion_deprecated";
  *((_QWORD *)v17 + 1) = 30;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100056738()
{
  return sub_100008BD0(&qword_100387620, (uint64_t)qword_100383460, (uint64_t)sub_100056568);
}

uint64_t sub_100056754@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387620, (uint64_t)qword_100383460, (uint64_t)sub_100056568, a1);
}

uint64_t sub_100056770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t v15;
  uint64_t v16;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v9 + 20), a2, a3);
          break;
        case 2:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 24);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
          v12 = &qword_10036AF10;
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
          v14 = &unk_1002C82F4;
          goto LABEL_11;
        case 3:
          v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 28);
          goto LABEL_10;
        case 4:
          v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 32);
LABEL_10:
          v10 = v3 + v15;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
          v12 = &qword_10036AF88;
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion;
          v14 = &unk_1002C89FC;
LABEL_11:
          v16 = sub_10000FD38(v12, v13, (uint64_t)v14);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v16, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000568EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned int *v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  v10 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v10[1] & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v10, 1, a2, a3);
  if (!v4)
  {
    sub_1000569E0(v5, a1, a2, a3);
    sub_100056B54(v5, a1, a2, a3);
    sub_100056CC8(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000569E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036A7E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7E0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  v15 = sub_10000FD38(&qword_10036AF10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&unk_1002C82F4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100056B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7F8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v15 = sub_10000FD38(&qword_10036AF88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C89FC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100056CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  sub_10000E660(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_10036A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7F8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v15 = sub_10000FD38(&qword_10036AF88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C89FC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Int sub_100056E40()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10036A9A0, (uint64_t)&unk_1002C8DCC);
}

uint64_t sub_100056E5C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + v4;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a2 + a1[7];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v11(v8, 1, 1, v9);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11)(a2 + a1[8], 1, 1, v9);
}

uint64_t sub_100056F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100056770(a1, a2, a3);
}

uint64_t sub_100056F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000568EC(a1, a2, a3);
}

uint64_t sub_100056F44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DCF0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&unk_1002C8D44);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100056F94@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387620, (uint64_t)qword_100383460, (uint64_t)sub_100056568, a1);
}

uint64_t sub_100056FB0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AFB8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&unk_1002C8CCC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100056FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AFB8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&unk_1002C8CCC);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100057040()
{
  return &unk_100352390;
}

unint64_t sub_10005704C()
{
  return 0xD000000000000026;
}

uint64_t sub_100057068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383478);
  sub_10000E6A4(v0, (uint64_t)qword_100383478);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "gps_time_conversion";
  *(_QWORD *)(v9 + 8) = 19;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "week";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000571C0()
{
  return sub_100008BD0(&qword_100387628, (uint64_t)qword_100383478, (uint64_t)sub_100057068);
}

uint64_t sub_1000571DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387628, (uint64_t)qword_100383478, (uint64_t)sub_100057068, a1);
}

uint64_t sub_1000571F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        v9 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v9 + 24), a2, a3);
      }
      else if (result == 1)
      {
        v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 20);
        v11 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
        v12 = sub_10000FD38(&qword_10036AF88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C89FC);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10005731C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned int *v10;

  v5 = v3;
  result = sub_1000573C8(v5, a1, a2, a3);
  if (!v4)
  {
    v10 = (unsigned int *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 24));
    if ((v10[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v10, 2, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000573C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A7F8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  sub_10000E660(a1 + *(int *)(v13 + 20), (uint64_t)v8, &qword_10036A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A7F8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v15 = sub_10000FD38(&qword_10036AF88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C89FC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Int sub_100057540()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, &qword_10036A9A8, (uint64_t)&unk_1002C8F34);
}

uint64_t sub_10005755C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a2 + *(int *)(a1 + 24);
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_1000575C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000571F8(a1, a2, a3);
}

uint64_t sub_1000575DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005731C(a1, a2, a3);
}

uint64_t sub_1000575F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DCE8, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&unk_1002C8EAC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100057640@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387628, (uint64_t)qword_100383478, (uint64_t)sub_100057068, a1);
}

uint64_t sub_10005765C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AFD0, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&unk_1002C8E34);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005769C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AFD0, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&unk_1002C8E34);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000576EC()
{
  return &unk_1003523A0;
}

unint64_t sub_1000576F8()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_100057714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383490);
  sub_10000E6A4(v0, (uint64_t)qword_100383490);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "gps";
  *(_QWORD *)(v9 + 8) = 3;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "glonass";
  *(_QWORD *)(v13 + 8) = 7;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "beidou";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "galileo";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "navic";
  *(_QWORD *)(v18 + 8) = 5;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100057914()
{
  return sub_100008BD0(&qword_100387630, (uint64_t)qword_100383490, (uint64_t)sub_100057714);
}

uint64_t sub_100057930@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387630, (uint64_t)qword_100383490, (uint64_t)sub_100057714, a1);
}

uint64_t sub_10005794C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  qword_100387640 = v1;
  return result;
}

uint64_t sub_100057A74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];
  _BYTE v42[32];

  v3 = sub_1000039AC(&qword_10036A820);
  __chkstk_darwin(v3);
  v36 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036A818);
  __chkstk_darwin(v5);
  v35 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036A810);
  __chkstk_darwin(v7);
  v34 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000039AC(&qword_10036A808);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_10036A800);
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  v18 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  v20 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, v42, 0, 0);
  sub_10000E660(v25, (uint64_t)v14, &qword_10036A800);
  swift_beginAccess(v15, v41, 33, 0);
  sub_10000E574((uint64_t)v14, v15, &qword_10036A800);
  swift_endAccess(v41);
  v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, v41, 0, 0);
  sub_10000E660(v26, (uint64_t)v11, &qword_10036A808);
  swift_beginAccess(v17, v40, 33, 0);
  sub_10000E574((uint64_t)v11, v17, &qword_10036A808);
  swift_endAccess(v40);
  v27 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, v40, 0, 0);
  v28 = v34;
  sub_10000E660(v27, v34, &qword_10036A810);
  swift_beginAccess(v19, v39, 33, 0);
  sub_10000E574(v28, v19, &qword_10036A810);
  swift_endAccess(v39);
  v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, v39, 0, 0);
  v30 = v35;
  sub_10000E660(v29, v35, &qword_10036A818);
  swift_beginAccess(v21, v38, 33, 0);
  sub_10000E574(v30, v21, &qword_10036A818);
  swift_endAccess(v38);
  v31 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, v38, 0, 0);
  v32 = v36;
  sub_10000E660(v31, v36, &qword_10036A820);
  swift_release(a1);
  swift_beginAccess(v23, v37, 33, 0);
  sub_10000E574(v32, v23, &qword_10036A820);
  swift_endAccess(v37);
  return v1;
}

uint64_t sub_100057ED4()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, &qword_10036A800);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, &qword_10036A808);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, &qword_10036A810);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, &qword_10036A818);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, &qword_10036A820);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100057F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t (*v21)(uint64_t);
  void *v22;
  uint64_t v23;
  _BYTE v24[24];

  v5 = v3;
  v8 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v8)) & 1) == 0)
  {
    v9 = *(_QWORD *)(v3 + v8);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100057A74(v12);
    v13 = *(_QWORD *)(v5 + v8);
    *(_QWORD *)(v5 + v8) = v11;
    swift_release(v13);
  }
  v14 = *(_QWORD *)(v5 + v8);
  swift_retain(v14);
  v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v16 & 1) == 0)
    {
      switch(v15)
      {
        case 1:
          v18 = v14
              + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, v24, 33, 0);
          v19 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
          v20 = &qword_10036AF40;
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo;
          v22 = &unk_1002C85C4;
          goto LABEL_7;
        case 2:
          v18 = v14
              + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, v24, 33, 0);
          v19 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          v20 = &qword_10036AF70;
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo;
          v22 = &unk_1002C8894;
          goto LABEL_7;
        case 3:
          v18 = v14
              + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, v24, 33, 0);
          v19 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
          v20 = &qword_10036AFA0;
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo;
          v22 = &unk_1002C8B64;
          goto LABEL_7;
        case 4:
          v18 = v14
              + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, v24, 33, 0);
          v19 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          v20 = &qword_10036AFB8;
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo;
          v22 = &unk_1002C8CCC;
          goto LABEL_7;
        case 5:
          v18 = v14
              + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, v24, 33, 0);
          v19 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
          v20 = &qword_10036AFD0;
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo;
          v22 = &unk_1002C8E34;
LABEL_7:
          v23 = sub_10000FD38(v20, v21, (uint64_t)v22);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v18, v19, v23, a2, a3);
          swift_endAccess(v24);
          break;
        default:
          break;
      }
      v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v14);
}

uint64_t sub_100058228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20));
  v9 = swift_retain(v8);
  sub_100058344(v9, a1, a2, a3);
  if (v4)
    return swift_release(v8);
  sub_1000584D0(v8, a1, a2, a3);
  sub_10005865C(v8, a1, a2, a3);
  sub_1000587E8(v8, a1, a2, a3);
  sub_100058974(v8, a1, a2, a3);
  swift_release(v8);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_100058344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A800);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A800);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A800);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  v15 = sub_10000FD38(&qword_10036AF40, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&unk_1002C85C4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_1000584D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A808);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A808);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A808);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  v15 = sub_10000FD38(&qword_10036AF70, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&unk_1002C8894);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10005865C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A810);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A810);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A810);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  v15 = sub_10000FD38(&qword_10036AFA0, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&unk_1002C8B64);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t sub_1000587E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A818);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A818);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A818);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  v15 = sub_10000FD38(&qword_10036AFB8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&unk_1002C8CCC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_100058974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A820);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A820);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A820);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  v15 = sub_10000FD38(&qword_10036AFD0, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&unk_1002C8E34);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_100058B00(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t (*)(uint64_t, uint64_t))sub_100058B28) & 1;
}

BOOL sub_100058B28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE v124[16];
  _BYTE v125[8];
  _BYTE v126[8];
  _BYTE v127[8];
  _BYTE v128[8];
  _BYTE v129[8];
  _BYTE v130[8];
  _BYTE v131[8];
  _BYTE v132[8];
  _BYTE v133[8];

  v123 = a2;
  v98 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v94 = (uint64_t)&v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_1000039AC(&qword_10036DEE8);
  __chkstk_darwin(v96);
  v99 = (uint64_t)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036A820);
  v6 = __chkstk_darwin(v5);
  v108 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v107 = (char *)&v93 - v8;
  v105 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  v103 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v95 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_1000039AC(&qword_10036DEF0);
  __chkstk_darwin(v102);
  v106 = (uint64_t)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10036A818);
  v12 = __chkstk_darwin(v11);
  v100 = (uint64_t)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v104 = (uint64_t)&v93 - v14;
  v114 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  v112 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v101 = (uint64_t)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_1000039AC(&qword_10036DEF8);
  __chkstk_darwin(v111);
  v115 = (uint64_t)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000039AC(&qword_10036A810);
  v18 = __chkstk_darwin(v17);
  v109 = (uint64_t)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v113 = (uint64_t)&v93 - v20;
  v121 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  v119 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v110 = (uint64_t)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_1000039AC(&qword_10036DF00);
  __chkstk_darwin(v118);
  v122 = (uint64_t)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000039AC(&qword_10036A808);
  v24 = __chkstk_darwin(v23);
  v116 = (uint64_t)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v120 = (uint64_t)&v93 - v26;
  v27 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v117 = (uint64_t)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000039AC(&qword_10036DF08);
  __chkstk_darwin(v30);
  v32 = (char *)&v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1000039AC(&qword_10036A800);
  v34 = __chkstk_darwin(v33);
  v36 = (char *)&v93 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v38 = (char *)&v93 - v37;
  v39 = a1;
  v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess(v40, v133, 0, 0);
  sub_10000E660(v40, (uint64_t)v38, &qword_10036A800);
  v41 = v123;
  v42 = v123
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess(v123+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, v132, 0, 0);
  v43 = (uint64_t)&v32[*(int *)(v30 + 48)];
  sub_10000E660((uint64_t)v38, (uint64_t)v32, &qword_10036A800);
  sub_10000E660(v42, v43, &qword_10036A800);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v44((uint64_t)v32, 1, v27) == 1)
  {
    swift_retain(v39);
    swift_retain(v41);
    sub_100015704((uint64_t)v38, &qword_10036A800);
    if (v44(v43, 1, v27) == 1)
    {
      sub_100015704((uint64_t)v32, &qword_10036A800);
      goto LABEL_8;
    }
LABEL_6:
    v45 = &qword_10036DF08;
    v46 = (uint64_t)v32;
LABEL_29:
    sub_100015704(v46, v45);
    goto LABEL_30;
  }
  sub_10000E660((uint64_t)v32, (uint64_t)v36, &qword_10036A800);
  if (v44(v43, 1, v27) == 1)
  {
    swift_retain(v39);
    swift_retain(v41);
    sub_100015704((uint64_t)v38, &qword_10036A800);
    sub_100004030((uint64_t)v36, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
    goto LABEL_6;
  }
  v47 = v117;
  sub_100003E08(v43, v117, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  swift_retain(v39);
  swift_retain(v41);
  v48 = sub_100064C8C((uint64_t)v36, v47);
  sub_100004030(v47, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  sub_100015704((uint64_t)v38, &qword_10036A800);
  sub_100004030((uint64_t)v36, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  sub_100015704((uint64_t)v32, &qword_10036A800);
  if ((v48 & 1) == 0)
    goto LABEL_30;
LABEL_8:
  v49 = v39
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess(v39+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, v131, 0, 0);
  v50 = v120;
  sub_10000E660(v49, v120, &qword_10036A808);
  v51 = v41
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess(v41+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, v130, 0, 0);
  v52 = v122;
  v53 = v122 + *(int *)(v118 + 48);
  sub_10000E660(v50, v122, &qword_10036A808);
  sub_10000E660(v51, v53, &qword_10036A808);
  v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48);
  v55 = v121;
  if (v54(v52, 1, v121) == 1)
  {
    sub_100015704(v50, &qword_10036A808);
    if (v54(v53, 1, v55) == 1)
    {
      sub_100015704(v52, &qword_10036A808);
      goto LABEL_15;
    }
LABEL_13:
    v45 = &qword_10036DF00;
LABEL_28:
    v46 = v52;
    goto LABEL_29;
  }
  v56 = v116;
  sub_10000E660(v52, v116, &qword_10036A808);
  if (v54(v53, 1, v55) == 1)
  {
    sub_100015704(v50, &qword_10036A808);
    sub_100004030(v56, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
    goto LABEL_13;
  }
  v57 = v110;
  sub_100003E08(v53, v110, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  v58 = sub_100062F7C(v56, v57);
  sub_100004030(v57, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  sub_100015704(v50, &qword_10036A808);
  sub_100004030(v56, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  sub_100015704(v52, &qword_10036A808);
  if ((v58 & 1) == 0)
    goto LABEL_30;
LABEL_15:
  v59 = v39
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess(v39+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, v129, 0, 0);
  v60 = v113;
  sub_10000E660(v59, v113, &qword_10036A810);
  v61 = v41
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess(v41+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, v128, 0, 0);
  v52 = v115;
  v62 = v115 + *(int *)(v111 + 48);
  sub_10000E660(v60, v115, &qword_10036A810);
  sub_10000E660(v61, v62, &qword_10036A810);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48);
  v64 = v114;
  if (v63(v52, 1, v114) == 1)
  {
    sub_100015704(v60, &qword_10036A810);
    if (v63(v62, 1, v64) == 1)
    {
      sub_100015704(v52, &qword_10036A810);
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  v65 = v109;
  sub_10000E660(v52, v109, &qword_10036A810);
  if (v63(v62, 1, v64) == 1)
  {
    sub_100015704(v60, &qword_10036A810);
    sub_100004030(v65, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
LABEL_20:
    v45 = &qword_10036DEF8;
    goto LABEL_28;
  }
  v66 = v101;
  sub_100003E08(v62, v101, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  v67 = sub_100065A60(v65, v66, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t (*)(uint64_t, uint64_t))sub_100055748);
  sub_100004030(v66, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  sub_100015704(v60, &qword_10036A810);
  sub_100004030(v65, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  sub_100015704(v52, &qword_10036A810);
  if ((v67 & 1) == 0)
    goto LABEL_30;
LABEL_22:
  v68 = v39
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess(v39+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, v127, 0, 0);
  v69 = v104;
  sub_10000E660(v68, v104, &qword_10036A818);
  v70 = v41
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess(v41+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, v126, 0, 0);
  v52 = v106;
  v71 = v106 + *(int *)(v102 + 48);
  sub_10000E660(v69, v106, &qword_10036A818);
  sub_10000E660(v70, v71, &qword_10036A818);
  v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  v73 = v105;
  if (v72(v52, 1, v105) != 1)
  {
    v77 = v100;
    sub_10000E660(v52, v100, &qword_10036A818);
    v78 = v72(v71, 1, v73);
    v75 = (uint64_t)v108;
    v76 = (uint64_t)v107;
    if (v78 == 1)
    {
      sub_100015704(v69, &qword_10036A818);
      sub_100004030(v77, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
      goto LABEL_27;
    }
    v80 = v95;
    sub_100003E08(v71, v95, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    v81 = sub_100063628(v77, v80);
    sub_100004030(v80, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    sub_100015704(v69, &qword_10036A818);
    sub_100004030(v77, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    sub_100015704(v52, &qword_10036A818);
    if ((v81 & 1) != 0)
      goto LABEL_34;
LABEL_30:
    swift_release(v39);
    swift_release(v41);
    return 0;
  }
  sub_100015704(v69, &qword_10036A818);
  v74 = v72(v71, 1, v73);
  v75 = (uint64_t)v108;
  v76 = (uint64_t)v107;
  if (v74 != 1)
  {
LABEL_27:
    v45 = &qword_10036DEF0;
    goto LABEL_28;
  }
  sub_100015704(v52, &qword_10036A818);
LABEL_34:
  v82 = v39
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess(v39+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, v125, 0, 0);
  sub_10000E660(v82, v76, &qword_10036A820);
  v83 = v41
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess(v41+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, v124, 0, 0);
  v84 = v99;
  v85 = v99 + *(int *)(v96 + 48);
  sub_10000E660(v76, v99, &qword_10036A820);
  v86 = v83;
  v87 = v84;
  sub_10000E660(v86, v85, &qword_10036A820);
  v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
  v89 = v84;
  v90 = v98;
  if (v88(v89, 1, v98) == 1)
  {
    swift_release(v39);
    swift_release(v41);
    sub_100015704(v76, &qword_10036A820);
    if (v88(v85, 1, v90) == 1)
    {
      sub_100015704(v87, &qword_10036A820);
      return 1;
    }
    goto LABEL_39;
  }
  sub_10000E660(v87, v75, &qword_10036A820);
  if (v88(v85, 1, v90) == 1)
  {
    swift_release(v39);
    swift_release(v41);
    sub_100015704(v76, &qword_10036A820);
    sub_100004030(v75, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
LABEL_39:
    sub_100015704(v87, &qword_10036DEE8);
    return 0;
  }
  v91 = v94;
  sub_100003E08(v85, v94, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  v92 = sub_1000642C8(v75, v91);
  swift_release(v39);
  swift_release(v41);
  sub_100004030(v91, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  sub_100015704(v76, &qword_10036A820);
  sub_100004030(v75, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  sub_100015704(v87, &qword_10036A820);
  return (v92 & 1) != 0;
}

Swift::Int sub_100059994()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &qword_10036A9B0, (uint64_t)&unk_1002C909C);
}

uint64_t sub_1000599B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100387638, &qword_100387640, (uint64_t)sub_10005794C, a2);
}

uint64_t sub_1000599CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100057F6C(a1, a2, a3);
}

uint64_t sub_1000599E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100058228(a1, a2, a3);
}

uint64_t sub_1000599F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DCE0, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&unk_1002C9014);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100059A44@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387630, (uint64_t)qword_100383490, (uint64_t)sub_100057714, a1);
}

uint64_t sub_100059A60(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036AFE8, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&unk_1002C8F9C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100059AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036AFE8, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&unk_1002C8F9C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100059AF0()
{
  return &unk_1003523B0;
}

unint64_t sub_100059AFC()
{
  return 0xD000000000000031;
}

uint64_t sub_100059B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003834A8);
  sub_10000E6A4(v0, (uint64_t)qword_1003834A8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v27 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1002C3130;
  v7 = v27 + v6;
  v8 = v27 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v27 + v6) = 1;
  *(_QWORD *)v8 = "decode_time_full_gps_ns";
  *(_QWORD *)(v8 + 8) = 23;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "alpha0";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "alpha1";
  *((_QWORD *)v14 + 1) = 6;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "alpha2";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "alpha3";
  *((_QWORD *)v18 + 1) = 6;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "beta0";
  *((_QWORD *)v20 + 1) = 5;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "beta1";
  *((_QWORD *)v22 + 1) = 5;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "beta2";
  *((_QWORD *)v24 + 1) = 5;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "beta3";
  *(_QWORD *)(v25 + 8) = 5;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v27);
}

uint64_t sub_100059DE8()
{
  return sub_100008BD0(&qword_100387648, (uint64_t)qword_1003834A8, (uint64_t)sub_100059B18);
}

uint64_t sub_100059E04@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387648, (uint64_t)qword_1003834A8, (uint64_t)sub_100059B18, a1);
}

uint64_t sub_100059E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v9 + 20), a2, a3);
          break;
        case 2:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 24);
          goto LABEL_14;
        case 3:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 28);
          goto LABEL_14;
        case 4:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 32);
          goto LABEL_14;
        case 5:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 36);
          goto LABEL_14;
        case 6:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 40);
          goto LABEL_14;
        case 7:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 44);
          goto LABEL_14;
        case 8:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48);
          goto LABEL_14;
        case 9:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52);
LABEL_14:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v10, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100059F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2, a2, a3, *(float *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4, a2, a3, *(float *)v14);
    sub_10005A144(v5, a1, a2, a3);
    sub_10005A1B8(v5, a1, a2, a3);
    sub_10005A22C(v5, a1, a2, a3);
    sub_10005A2A0(v5, a1, a2, a3);
    sub_10005A314(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10005A144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v8 = a1 + *(int *)(result + 36);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(5, a3, a4, *(float *)v8);
  return result;
}

uint64_t sub_10005A1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v8 = a1 + *(int *)(result + 40);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(6, a3, a4, *(float *)v8);
  return result;
}

uint64_t sub_10005A22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v8 = a1 + *(int *)(result + 44);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(7, a3, a4, *(float *)v8);
  return result;
}

uint64_t sub_10005A2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v8 = a1 + *(int *)(result + 48);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(8, a3, a4, *(float *)v8);
  return result;
}

uint64_t sub_10005A314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v8 = a1 + *(int *)(result + 52);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(9, a3, a4, *(float *)v8);
  return result;
}

Swift::Int sub_10005A38C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, &qword_10036A9B8, (uint64_t)&unk_1002C9204);
}

uint64_t sub_10005A3A8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a2 + v8;
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1[10];
  v12 = a2 + a1[9];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a2 + v11;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1[12];
  v15 = a2 + a1[11];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a2 + v14;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = a2 + a1[13];
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  return result;
}

uint64_t sub_10005A450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059E20(a1, a2, a3);
}

uint64_t sub_10005A464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059F78(a1, a2, a3);
}

uint64_t sub_10005A478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DCD8, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&unk_1002C917C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005A4C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387648, (uint64_t)qword_1003834A8, (uint64_t)sub_100059B18, a1);
}

uint64_t sub_10005A4E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036B000, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&unk_1002C9104);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005A524(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036B000, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&unk_1002C9104);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10005A574()
{
  return &unk_1003523C0;
}

unint64_t sub_10005A580()
{
  return 0xD000000000000020;
}

uint64_t sub_10005A59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003834C0);
  sub_10000E6A4(v0, (uint64_t)qword_1003834C0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "x";
  *(_QWORD *)(v9 + 8) = 1;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "y";
  *((_QWORD *)v13 + 1) = 1;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "z";
  *(_QWORD *)(v14 + 8) = 1;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005A728()
{
  return sub_100008BD0(&qword_100387650, (uint64_t)qword_1003834C0, (uint64_t)sub_10005A59C);
}

uint64_t sub_10005A744@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387650, (uint64_t)qword_1003834C0, (uint64_t)sub_10005A59C, a1);
}

uint64_t sub_10005A760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054098(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularDoubleField(value:));
}

uint64_t sub_10005A784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A7A0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_10005A7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = v4;
  result = a4(0);
  v11 = result;
  v12 = v6 + *(int *)(result + 20);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v12);
  if (!v5)
  {
    v13 = v6 + *(int *)(v11 + 24);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v13);
    v14 = v6 + *(int *)(v11 + 28);
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v14);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10005A898(uint64_t a1, uint64_t a2)
{
  return sub_1000656F0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz) & 1;
}

Swift::Int sub_10005A8B8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, &qword_10036A9C0, (uint64_t)&unk_1002C936C);
}

uint64_t sub_10005A8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DCD0, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&unk_1002C92E4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005A924@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387650, (uint64_t)qword_1003834C0, (uint64_t)sub_10005A59C, a1);
}

uint64_t sub_10005A940(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036B018, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&unk_1002C926C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005A980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036B018, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&unk_1002C926C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10005A9D0()
{
  return &unk_1003523D0;
}

unint64_t sub_10005A9DC()
{
  return 0xD000000000000033;
}

uint64_t sub_10005A9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003834D8);
  sub_10000E6A4(v0, (uint64_t)qword_1003834D8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v8 = "id";
  *(_QWORD *)(v8 + 8) = 2;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6 + v4) = 2;
  *(_QWORD *)v12 = "band";
  *(_QWORD *)(v12 + 8) = 4;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "sv_reference_point";
  *((_QWORD *)v14 + 1) = 18;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "offset_xyz_m";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005ABC4()
{
  return sub_100008BD0(&qword_100387658, (uint64_t)qword_1003834D8, (uint64_t)sub_10005A9F8);
}

uint64_t sub_10005ABE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387658, (uint64_t)qword_1003834D8, (uint64_t)sub_10005A9F8, a1);
}

uint64_t sub_10005ABFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  ValueMetadata *v18;
  uint64_t v19;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 20);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
          v11 = &qword_10036AC10;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          v13 = &unk_1002C55F4;
          goto LABEL_5;
        case 2:
          v15 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 24);
          v16 = sub_10007FB80();
          v17 = v15;
          v18 = &type metadata for CLP_LogEntry_PrivateData_Band;
          goto LABEL_10;
        case 3:
          v19 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 28);
          v16 = sub_10007F91C();
          v17 = v19;
          v18 = &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint;
LABEL_10:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v17, v18, v16, a2, a3);
          break;
        case 4:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 32);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
          v11 = &qword_10036B018;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz;
          v13 = &unk_1002C926C;
LABEL_5:
          v14 = sub_10000FD38(v11, v12, (uint64_t)v13);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v14, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10005ADA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;

  v5 = v3;
  result = sub_10005AED8(v5, a1, a2, a3);
  if (!v4)
  {
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
    v11 = v10;
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 13)
    {
      v14 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      v12 = sub_10007FB80();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v14, 2, &type metadata for CLP_LogEntry_PrivateData_Band, v12, a2, a3);
    }
    if (*(_BYTE *)(v5 + *(int *)(v11 + 28)) != 4)
    {
      v15 = *(_BYTE *)(v5 + *(int *)(v11 + 28));
      v13 = sub_10007F91C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 3, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint, v13, a2, a3);
    }
    sub_10005B04C(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10005AED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A780);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  sub_10000E660(a1 + *(int *)(v13 + 20), (uint64_t)v8, &qword_10036A780);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A780);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  v15 = sub_10000FD38(&qword_10036AC10, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&unk_1002C55F4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_10005B04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036A828);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  sub_10000E660(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_10036A828);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A828);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  v15 = sub_10000FD38(&qword_10036B018, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&unk_1002C926C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Int sub_10005B1C4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &qword_10036A9C8, (uint64_t)&unk_1002C94D4);
}

uint64_t sub_10005B1E0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1[7];
  *(_BYTE *)(a2 + a1[6]) = 13;
  *(_BYTE *)(a2 + v6) = 4;
  v7 = a2 + a1[8];
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t sub_10005B274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005ABFC(a1, a2, a3);
}

uint64_t sub_10005B288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005ADA4(a1, a2, a3);
}

uint64_t sub_10005B29C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DCC8, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&unk_1002C944C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005B2EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387658, (uint64_t)qword_1003834D8, (uint64_t)sub_10005A9F8, a1);
}

uint64_t sub_10005B308(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036B030, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&unk_1002C93D4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005B348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036B030, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&unk_1002C93D4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10005B398()
{
  return &unk_1003523E0;
}

unint64_t sub_10005B3A4()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10005B3C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003834F0);
  sub_10000E6A4(v0, (uint64_t)qword_1003834F0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "ios_absolute_sec";
  *(_QWORD *)(v9 + 8) = 16;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "mach_absolute_sec";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "mach_continuous_sec";
  *(_QWORD *)(v14 + 8) = 19;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005B554()
{
  return sub_100008BD0(&qword_100387660, (uint64_t)qword_1003834F0, (uint64_t)sub_10005B3C0);
}

uint64_t sub_10005B570@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387660, (uint64_t)qword_1003834F0, (uint64_t)sub_10005B3C0, a1);
}

uint64_t sub_10005B58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054098(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularDoubleField(value:));
}

uint64_t sub_10005B5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A7A0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_10005B5CC(uint64_t a1, uint64_t a2)
{
  return sub_1000656F0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp) & 1;
}

Swift::Int sub_10005B5EC()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, &qword_10036A9D0, (uint64_t)&unk_1002C963C);
}

uint64_t sub_10005B608@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a2 + a1[7];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  return result;
}

uint64_t sub_10005B65C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DCC0, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&unk_1002C95B4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005B6AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387660, (uint64_t)qword_1003834F0, (uint64_t)sub_10005B3C0, a1);
}

uint64_t sub_10005B6C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036B048, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&unk_1002C953C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005B708(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036B048, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&unk_1002C953C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10005B758()
{
  return &unk_1003523F0;
}

unint64_t sub_10005B764()
{
  return 0xD00000000000003ALL;
}

uint64_t sub_10005B780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383508);
  sub_10000E6A4(v0, (uint64_t)qword_100383508);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3130;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "received_timestamp";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "meas_report";
  *(_QWORD *)(v13 + 8) = 11;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "sv_info";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "rx_band_corrections";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "time_conversion";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "meas_applicability_time_mach_continuous_sec";
  *((_QWORD *)v21 + 1) = 43;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "meas_applicability_time_uncertainty_sec";
  *((_QWORD *)v23 + 1) = 39;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 8;
  *(_QWORD *)v25 = "klobuchar_model";
  *((_QWORD *)v25 + 1) = 15;
  v25[16] = 2;
  v12();
  v26 = v8 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 8 * v4) = 9;
  *(_QWORD *)v26 = "apc_sv_offset";
  *(_QWORD *)(v26 + 8) = 13;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10005BA60()
{
  return sub_100008BD0(&qword_100387668, (uint64_t)qword_100383508, (uint64_t)sub_10005B780);
}

uint64_t sub_10005BA7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100387668, (uint64_t)qword_100383508, (uint64_t)sub_10005B780, a1);
}

uint64_t sub_10005BA98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections) = &_swiftEmptyArrayStorage;
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]) = &_swiftEmptyArrayStorage;
  qword_100387678 = v1;
  return result;
}

uint64_t sub_10005BBF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[24];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[24];
  uint64_t v67;
  char v68[24];
  char v69[24];
  char v70[24];
  _BYTE v71[24];
  _BYTE v72[24];
  char v73[32];

  v53 = a1;
  v2 = sub_1000039AC(&qword_10036A848);
  __chkstk_darwin(v2);
  v59 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000039AC(&qword_10036A840);
  __chkstk_darwin(v4);
  v58 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036A838);
  __chkstk_darwin(v6);
  v52 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036A830);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo) = &_swiftEmptyArrayStorage;
  v16 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections) = &_swiftEmptyArrayStorage;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  v54 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  v18 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v1;
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  v55 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  v56 = v22;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = v19;
  v57 = (uint64_t *)(v19
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  *(_QWORD *)(v19
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset) = &_swiftEmptyArrayStorage;
  v25 = v53;
  v26 = v53
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess(v53+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, v73, 0, 0);
  sub_10000E660(v26, (uint64_t)v10, &qword_10036A830);
  swift_beginAccess(v11, v72, 33, 0);
  sub_10000E574((uint64_t)v10, v11, &qword_10036A830);
  swift_endAccess(v72);
  v27 = v25
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, v72, 0, 0);
  v28 = v52;
  sub_10000E660(v27, v52, &qword_10036A838);
  swift_beginAccess(v13, v71, 33, 0);
  sub_10000E574(v28, v13, &qword_10036A838);
  swift_endAccess(v71);
  v29 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo, v71, 0, 0);
  v30 = *v29;
  swift_beginAccess(v15, v70, 1, 0);
  v31 = *v15;
  *v15 = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections, v69, 0, 0);
  v33 = *v32;
  swift_beginAccess(v16, v68, 1, 0);
  v34 = *v16;
  *v16 = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v35 = v25
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, &v67, 0, 0);
  v36 = v58;
  sub_10000E660(v35, v58, &qword_10036A840);
  v37 = v54;
  swift_beginAccess(v54, v66, 33, 0);
  sub_10000E574(v36, v37, &qword_10036A840);
  swift_endAccess(v66);
  v38 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec, v66, 0, 0);
  v39 = *v38;
  LOBYTE(v38) = *((_BYTE *)v38 + 8);
  swift_beginAccess(v20, &v65, 1, 0);
  *(_QWORD *)v20 = v39;
  *(_BYTE *)(v20 + 8) = (_BYTE)v38;
  v40 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec, &v64, 0, 0);
  v41 = *v40;
  LOBYTE(v40) = *((_BYTE *)v40 + 8);
  v42 = v55;
  swift_beginAccess(v55, &v63, 1, 0);
  *(_QWORD *)v42 = v41;
  *(_BYTE *)(v42 + 8) = (_BYTE)v40;
  v43 = v25
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, &v62, 0, 0);
  v44 = v59;
  sub_10000E660(v43, v59, &qword_10036A848);
  v45 = v56;
  swift_beginAccess(v56, v61, 33, 0);
  sub_10000E574(v44, v45, &qword_10036A848);
  swift_endAccess(v61);
  v46 = (uint64_t *)(v25
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset, v61, 0, 0);
  v47 = *v46;
  swift_bridgeObjectRetain(v47);
  swift_release(v25);
  v48 = v57;
  swift_beginAccess(v57, &v60, 1, 0);
  v49 = *v48;
  *v48 = v47;
  swift_bridgeObjectRelease(v49);
  return v24;
}

uint64_t sub_10005C190()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, &qword_10036A830);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, &qword_10036A838);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections));
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, &qword_10036A840);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, &qword_10036A848);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10005C240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t (*v27)(uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10005BBF0(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
          v21 = &qword_10036B048;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp;
          v23 = &unk_1002C953C;
          goto LABEL_16;
        case 2:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
          v21 = &qword_10036AE50;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport;
          v23 = &unk_1002C77B4;
          goto LABEL_16;
        case 3:
          v24 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo, v34, 33, 0);
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0);
          v26 = &qword_10036AEC8;
          v27 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo;
          v28 = &unk_1002C7EBC;
          goto LABEL_18;
        case 4:
          v24 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections, v34, 33, 0);
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          v26 = &qword_10036AEE0;
          v27 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections;
          v28 = &unk_1002C8024;
          goto LABEL_18;
        case 5:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
          v21 = &qword_10036AFE8;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo;
          v23 = &unk_1002C8F9C;
          goto LABEL_16;
        case 6:
          v29 = OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
          goto LABEL_14;
        case 7:
          v29 = OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
LABEL_14:
          v30 = v15 + v29;
          swift_beginAccess(v15 + v29, v34, 33, 0);
          v31 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v30, a2, a3);
          goto LABEL_19;
        case 8:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
          v21 = &qword_10036B000;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters;
          v23 = &unk_1002C9104;
LABEL_16:
          v32 = sub_10000FD38(v21, v22, (uint64_t)v23);
          v31 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v32, a2, a3);
          goto LABEL_19;
        case 9:
          v24 = v15
              + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0];
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0], v34, 33, 0);
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          v26 = &qword_10036B030;
          v27 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset;
          v28 = &unk_1002C93D4;
LABEL_18:
          v33 = sub_10000FD38(v26, v27, (uint64_t)v28);
          v31 = v5;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v24, v25, v33, a2, a3);
LABEL_19:
          v5 = v31;
          swift_endAccess(v34);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_10005C5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20));
  v10 = swift_retain(v9);
  sub_10005C940(v10, a1, a2, a3);
  if (v4)
    return swift_release(v9);
  sub_10005CACC(v9, a1, a2, a3);
  v12 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo, v31, 0, 0);
  v13 = *v12;
  if (*(_QWORD *)(v13 + 16))
  {
    v14 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0);
    v15 = sub_10000FD38(&qword_10036AEC8, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&unk_1002C7EBC);
    v16 = swift_bridgeObjectRetain(v13);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v16, 3, v14, v15, a2, a3);
    swift_bridgeObjectRelease(v13);
  }
  v17 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections, v30, 0, 0);
  v18 = *v17;
  if (*(_QWORD *)(v18 + 16))
  {
    v19 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
    v20 = sub_10000FD38(&qword_10036AEE0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&unk_1002C8024);
    v21 = swift_bridgeObjectRetain(v18);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v21, 4, v19, v20, a2, a3);
    swift_bridgeObjectRelease(v18);
  }
  sub_10005CC58(v9, a1, a2, a3);
  v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec, v33, 0, 0);
  if ((*(_BYTE *)(v22 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(6, a2, a3, *(double *)v22);
  v23 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec, v32, 0, 0);
  if ((*(_BYTE *)(v23 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7, a2, a3, *(double *)v23);
  sub_10005CDE4(v9, a1, a2, a3);
  v24 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0], v29, 0, 0);
  v25 = *v24;
  if (*(_QWORD *)(v25 + 16))
  {
    v26 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
    v27 = sub_10000FD38(&qword_10036B030, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&unk_1002C93D4);
    v28 = swift_bridgeObjectRetain(v25);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v28, 9, v26, v27, a2, a3);
    swift_bridgeObjectRelease(v25);
  }
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10005C940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A830);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A830);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A830);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  v15 = sub_10000FD38(&qword_10036B048, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&unk_1002C953C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_10005CACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A838);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A838);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A838);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  v15 = sub_10000FD38(&qword_10036AE50, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&unk_1002C77B4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t sub_10005CC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A840);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A840);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A840);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  v15 = sub_10000FD38(&qword_10036AFE8, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&unk_1002C8F9C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t sub_10005CDE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036A848);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036A848);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036A848);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  v15 = sub_10000FD38(&qword_10036B000, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&unk_1002C9104);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 8, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_10005CF70(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, sub_10005CF98) & 1;
}

uint64_t sub_10005CF98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  char v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  double v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  char v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150[24];
  char v151[24];
  char v152[24];
  char v153[24];
  char v154[24];
  char v155[32];

  v137 = a2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v116 = *(_QWORD *)(v3 - 8);
  v117 = v3;
  __chkstk_darwin(v3);
  v114 = (uint64_t)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_1000039AC(&qword_10036DEA8);
  __chkstk_darwin(v115);
  v118 = (uint64_t)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036A848);
  v7 = __chkstk_darwin(v6);
  v120 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v129 = (char *)&v113 - v9;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  v123 = *(_QWORD *)(v10 - 8);
  v124 = v10;
  __chkstk_darwin(v10);
  v119 = (uint64_t)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_1000039AC(&qword_10036DEB0);
  __chkstk_darwin(v122);
  v125 = (uint64_t)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000039AC(&qword_10036A840);
  v14 = __chkstk_darwin(v13);
  v121 = (uint64_t)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v134 = (uint64_t)&v113 - v16;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  v131 = *(_QWORD *)(v17 - 8);
  v132 = v17;
  __chkstk_darwin(v17);
  v126 = (uint64_t)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_1000039AC(&qword_10036DEB8);
  __chkstk_darwin(v130);
  v133 = (uint64_t)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000039AC(&qword_10036A838);
  v21 = __chkstk_darwin(v20);
  v127 = (uint64_t)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v136 = (uint64_t)&v113 - v23;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v128 = (uint64_t)&v113 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1000039AC(&qword_10036DEC0);
  __chkstk_darwin(v27);
  v29 = (char *)&v113 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000039AC(&qword_10036A830);
  v31 = __chkstk_darwin(v30);
  v135 = (uint64_t)&v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v34 = (char *)&v113 - v33;
  v35 = a1;
  v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess(v36, v155, 0, 0);
  sub_10000E660(v36, (uint64_t)v34, &qword_10036A830);
  v37 = v137;
  v38 = v137
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess(v137+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, v154, 0, 0);
  v39 = (uint64_t)&v29[*(int *)(v27 + 48)];
  sub_10000E660((uint64_t)v34, (uint64_t)v29, &qword_10036A830);
  sub_10000E660(v38, v39, &qword_10036A830);
  v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v40((uint64_t)v29, 1, v24) == 1)
  {
    swift_retain(v35);
    swift_retain(v37);
    sub_100015704((uint64_t)v34, &qword_10036A830);
    v41 = v40(v39, 1, v24);
    v42 = v37;
    v43 = v35;
    if (v41 == 1)
    {
      sub_100015704((uint64_t)v29, &qword_10036A830);
      goto LABEL_8;
    }
LABEL_6:
    sub_100015704((uint64_t)v29, &qword_10036DEC0);
    goto LABEL_43;
  }
  v43 = v35;
  v44 = v135;
  sub_10000E660((uint64_t)v29, v135, &qword_10036A830);
  if (v40(v39, 1, v24) == 1)
  {
    swift_retain(v35);
    v42 = v37;
    swift_retain(v37);
    sub_100015704((uint64_t)v34, &qword_10036A830);
    sub_100004030(v44, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
    goto LABEL_6;
  }
  v45 = v128;
  sub_100003E08(v39, v128, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  swift_retain(v43);
  v42 = v37;
  swift_retain(v37);
  v46 = v44;
  v47 = sub_1000656F0(v44, v45, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  sub_100015704((uint64_t)v34, &qword_10036A830);
  sub_100004030(v46, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  sub_100015704((uint64_t)v29, &qword_10036A830);
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_8:
  v48 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, v153, 0, 0);
  v49 = v136;
  sub_10000E660(v48, v136, &qword_10036A838);
  v50 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess(v42+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, v152, 0, 0);
  v51 = v133;
  v52 = v133 + *(int *)(v130 + 48);
  sub_10000E660(v49, v133, &qword_10036A838);
  v53 = v50;
  v54 = v51;
  sub_10000E660(v53, v52, &qword_10036A838);
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  v56 = v51;
  v57 = v132;
  if (v55(v56, 1, v132) == 1)
  {
    sub_100015704(v49, &qword_10036A838);
    v58 = v55(v52, 1, v57);
    v59 = (uint64_t)v129;
    v60 = v134;
    if (v58 == 1)
    {
      sub_100015704(v54, &qword_10036A838);
      goto LABEL_16;
    }
LABEL_13:
    v63 = &qword_10036DEB8;
LABEL_14:
    sub_100015704(v54, v63);
    goto LABEL_43;
  }
  v61 = v127;
  sub_10000E660(v54, v127, &qword_10036A838);
  v62 = v55(v52, 1, v57);
  v59 = (uint64_t)v129;
  v60 = v134;
  if (v62 == 1)
  {
    sub_100015704(v136, &qword_10036A838);
    sub_100004030(v61, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
    goto LABEL_13;
  }
  v64 = v61;
  v65 = v126;
  sub_100003E08(v52, v126, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  v66 = sub_100065A60(v64, v65, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, sub_10004C944);
  sub_100004030(v65, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  sub_100015704(v136, &qword_10036A838);
  sub_100004030(v64, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  sub_100015704(v54, &qword_10036A838);
  if ((v66 & 1) == 0)
    goto LABEL_43;
LABEL_16:
  v67 = (uint64_t *)(v43
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo, v151, 0, 0);
  v68 = *v67;
  v69 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess(v42+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo, v150, 0, 0);
  v70 = *v69;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v70);
  v71 = sub_10005E820(v68, v70, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t (*)(uint64_t, uint64_t))sub_10004FE58);
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v70);
  if ((v71 & 1) == 0)
    goto LABEL_43;
  v72 = (uint64_t *)(v43
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections, &v149, 0, 0);
  v73 = *v72;
  v74 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess(v42+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections, &v148, 0, 0);
  v75 = *v74;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v75);
  v76 = sub_10005EA04(v73, v75);
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v75);
  if ((v76 & 1) == 0)
    goto LABEL_43;
  v77 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, &v147, 0, 0);
  sub_10000E660(v77, v60, &qword_10036A840);
  v78 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess(v42+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, &v146, 0, 0);
  v79 = v125;
  v80 = v125 + *(int *)(v122 + 48);
  sub_10000E660(v60, v125, &qword_10036A840);
  v81 = v78;
  v54 = v79;
  sub_10000E660(v81, v80, &qword_10036A840);
  v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48);
  v83 = v79;
  v84 = v124;
  if (v82(v83, 1, v124) == 1)
  {
    sub_100015704(v60, &qword_10036A840);
    if (v82(v80, 1, v84) == 1)
    {
      sub_100015704(v54, &qword_10036A840);
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  v85 = v121;
  sub_10000E660(v54, v121, &qword_10036A840);
  if (v82(v80, 1, v84) == 1)
  {
    sub_100015704(v134, &qword_10036A840);
    sub_100004030(v85, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
LABEL_23:
    v63 = &qword_10036DEB0;
    goto LABEL_14;
  }
  v86 = v119;
  sub_100003E08(v80, v119, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  v87 = sub_100065A60(v85, v86, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t (*)(uint64_t, uint64_t))sub_100058B28);
  sub_100004030(v86, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  sub_100015704(v134, &qword_10036A840);
  sub_100004030(v85, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  sub_100015704(v54, &qword_10036A840);
  if ((v87 & 1) == 0)
    goto LABEL_43;
LABEL_25:
  v88 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec, &v145, 0, 0);
  v89 = *(double *)v88;
  v90 = *(_BYTE *)(v88 + 8);
  v91 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess(v42+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec, &v144, 0, 0);
  if ((v90 & 1) != 0)
  {
    v92 = (uint64_t)v120;
    if ((*(_BYTE *)(v91 + 8) & 1) == 0)
      goto LABEL_43;
  }
  else
  {
    v92 = (uint64_t)v120;
    if ((*(_BYTE *)(v91 + 8) & 1) != 0 || v89 != *(double *)v91)
      goto LABEL_43;
  }
  v93 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec, &v143, 0, 0);
  v94 = *(double *)v93;
  v95 = *(_BYTE *)(v93 + 8);
  v96 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess(v42+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec, &v142, 0, 0);
  if ((v95 & 1) != 0)
  {
    if ((*(_BYTE *)(v96 + 8) & 1) == 0)
      goto LABEL_43;
  }
  else if ((*(_BYTE *)(v96 + 8) & 1) != 0 || v94 != *(double *)v96)
  {
    goto LABEL_43;
  }
  v97 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, &v141, 0, 0);
  sub_10000E660(v97, v59, &qword_10036A848);
  v98 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess(v42+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, &v140, 0, 0);
  v99 = v118;
  v100 = v118 + *(int *)(v115 + 48);
  sub_10000E660(v59, v118, &qword_10036A848);
  v101 = v98;
  v54 = v99;
  sub_10000E660(v101, v100, &qword_10036A848);
  v102 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  v103 = v99;
  v104 = v117;
  if (v102(v103, 1, v117) != 1)
  {
    sub_10000E660(v54, v92, &qword_10036A848);
    if (v102(v100, 1, v104) == 1)
    {
      sub_100015704(v59, &qword_10036A848);
      sub_100004030(v92, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
      goto LABEL_40;
    }
    v105 = v114;
    sub_100003E08(v100, v114, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    v106 = sub_100060FC0(v92, v105);
    sub_100004030(v105, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    sub_100015704(v59, &qword_10036A848);
    sub_100004030(v92, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    sub_100015704(v54, &qword_10036A848);
    if ((v106 & 1) != 0)
      goto LABEL_42;
LABEL_43:
    swift_release(v43);
    swift_release(v42);
    v111 = 0;
    return v111 & 1;
  }
  sub_100015704(v59, &qword_10036A848);
  if (v102(v100, 1, v104) != 1)
  {
LABEL_40:
    v63 = &qword_10036DEA8;
    goto LABEL_14;
  }
  sub_100015704(v54, &qword_10036A848);
LABEL_42:
  v107 = (uint64_t *)(v43
                   + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]);
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0], &v139, 0, 0);
  v108 = *v107;
  v109 = (uint64_t *)(v42
                   + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]);
  swift_beginAccess(v42+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0], &v138, 0, 0);
  v110 = *v109;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v110);
  v111 = sub_10005EC5C(v108, v110);
  swift_bridgeObjectRelease(v108);
  swift_bridgeObjectRelease(v110);
  swift_release(v43);
  swift_release(v42);
  return v111 & 1;
}

Swift::Int sub_10005DCE4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &qword_10036A9D8, (uint64_t)&unk_1002C97A4);
}

uint64_t sub_10005DD00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100387670, &qword_100387678, (uint64_t)sub_10005BA98, a2);
}

uint64_t sub_10005DD1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v10 = *(int *)(a1 + 20);
  if (*a2 != -1)
    swift_once(a2, a4);
  v11 = *a3;
  *(_QWORD *)(a5 + v10) = *a3;
  return swift_retain(v11);
}

uint64_t sub_10005DD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005C240(a1, a2, a3);
}

uint64_t sub_10005DD98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005C5F8(a1, a2, a3);
}

uint64_t sub_10005DDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036DCB8, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&unk_1002C971C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005DDFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100387668, (uint64_t)qword_100383508, (uint64_t)sub_10005B780, a1);
}

uint64_t sub_10005DE18(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036B060, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&unk_1002C96A4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005DE58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036B060, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&unk_1002C96A4);
  return Message.hash(into:)(a1, a2, v4);
}

BOOL sub_10005DEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (double *)(a1 + 40);
  v6 = (double *)(a2 + 40);
  do
  {
    v7 = *v5++;
    v8 = v7;
    v9 = *v6++;
    v10 = v9;
    v12 = v4-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

uint64_t sub_10005DF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_100003FEC(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        sub_100003FEC(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        v15 = sub_100061484((uint64_t)v10, (uint64_t)v7);
        sub_100004030((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_10005E058(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  char v42;
  double *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  char v48;
  double *v49;
  int v50;
  uint64_t v51;
  double *v52;
  char v53;
  double *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v71 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036A7C8);
  __chkstk_darwin(v7);
  v70 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000039AC(&qword_10036DED8);
  __chkstk_darwin(v9);
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  v12 = __chkstk_darwin(v74);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v17 = (char *)&v65 - v16;
  v18 = *(_QWORD *)(a1 + 16);
  if (v18 != *(_QWORD *)(a2 + 16))
    goto LABEL_44;
  if (!v18 || a1 == a2)
  {
    v61 = 1;
    return v61 & 1;
  }
  v73 = v4;
  v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = *(_QWORD *)(v15 + 72);
  v66 = v6;
  v67 = v20;
  v21 = v18 - 1;
  v68 = a2;
  v69 = a1;
  v65 = v9;
  while (1)
  {
    v72 = v21;
    sub_100003FEC(a1 + v19, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    sub_100003FEC(a2 + v19, (uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    v22 = *(int *)(v74 + 20);
    v23 = (double *)&v17[v22];
    v24 = v17[v22 + 8];
    v25 = (double *)&v14[v22];
    v26 = v14[v22 + 8];
    if ((v24 & 1) != 0)
    {
      if (!v26)
        goto LABEL_43;
    }
    else
    {
      if (*v23 != *v25)
        LOBYTE(v26) = 1;
      if ((v26 & 1) != 0)
        goto LABEL_43;
    }
    v27 = *(int *)(v74 + 24);
    v28 = (uint64_t)&v14[v27];
    v29 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_10000E660((uint64_t)&v17[v27], (uint64_t)v11, &qword_10036A7C8);
    sub_10000E660(v28, v29, &qword_10036A7C8);
    v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
    v31 = v73;
    if (v30((uint64_t)v11, 1, v73) == 1)
    {
      if (v30(v29, 1, v31) != 1)
      {
        v63 = &qword_10036DED8;
        goto LABEL_42;
      }
      sub_100015704((uint64_t)v11, &qword_10036A7C8);
      v32 = v68;
      a1 = v69;
      goto LABEL_34;
    }
    v33 = v17;
    v34 = v14;
    v35 = v11;
    v36 = (uint64_t)v11;
    v37 = v70;
    sub_10000E660(v36, v70, &qword_10036A7C8);
    if (v30(v29, 1, v31) == 1)
      break;
    v38 = v29;
    v39 = (uint64_t)v66;
    sub_100003E08(v38, (uint64_t)v66, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    v40 = *(int *)(v31 + 20);
    v41 = (double *)(v37 + v40);
    v42 = *(_BYTE *)(v37 + v40 + 8);
    v43 = (double *)(v39 + v40);
    v44 = *(unsigned __int8 *)(v39 + v40 + 8);
    v45 = v37;
    if ((v42 & 1) != 0)
    {
      v32 = v68;
      a1 = v69;
      v11 = v35;
      v14 = v34;
      v17 = v33;
      if (!v44)
        goto LABEL_38;
    }
    else
    {
      if (*v41 != *v43)
        LOBYTE(v44) = 1;
      v32 = v68;
      a1 = v69;
      v11 = v35;
      v14 = v34;
      v17 = v33;
      if ((v44 & 1) != 0)
      {
LABEL_38:
        sub_100004030(v39, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
        v62 = v70;
        v63 = &qword_10036A7C8;
        goto LABEL_41;
      }
    }
    v46 = *(int *)(v73 + 24);
    v47 = (double *)(v45 + v46);
    v48 = *(_BYTE *)(v45 + v46 + 8);
    v49 = (double *)(v39 + v46);
    v50 = *(unsigned __int8 *)(v39 + v46 + 8);
    if ((v48 & 1) != 0)
    {
      if (!v50)
        goto LABEL_38;
    }
    else
    {
      if (*v47 != *v49)
        LOBYTE(v50) = 1;
      if ((v50 & 1) != 0)
        goto LABEL_38;
    }
    v51 = *(int *)(v73 + 28);
    v52 = (double *)(v45 + v51);
    v53 = *(_BYTE *)(v45 + v51 + 8);
    v54 = (double *)(v39 + v51);
    v55 = *(unsigned __int8 *)(v39 + v51 + 8);
    if ((v53 & 1) != 0)
    {
      if (!v55)
        goto LABEL_38;
    }
    else
    {
      if (*v52 != *v54)
        LOBYTE(v55) = 1;
      if ((v55 & 1) != 0)
        goto LABEL_38;
    }
    v56 = v39;
    v57 = type metadata accessor for UnknownStorage(0);
    v58 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    LOBYTE(v57) = dispatch thunk of static Equatable.== infix(_:_:)(v45, v56, v57, v58);
    sub_100004030(v56, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    sub_100015704((uint64_t)v11, &qword_10036A7C8);
    v9 = v65;
    if ((v57 & 1) == 0)
      goto LABEL_43;
LABEL_34:
    v59 = type metadata accessor for UnknownStorage(0);
    v60 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v61 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v14, v59, v60);
    sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    v21 = v72 - 1;
    if ((v61 & 1) != 0)
    {
      v19 += v67;
      a2 = v32;
      if (v72)
        continue;
    }
    return v61 & 1;
  }
  v62 = v37;
  v11 = v35;
  v14 = v34;
  v17 = v33;
  v63 = &qword_10036DED8;
LABEL_41:
  sub_100004030(v62, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
LABEL_42:
  sub_100015704((uint64_t)v11, v63);
LABEL_43:
  sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
LABEL_44:
  v61 = 0;
  return v61 & 1;
}

uint64_t sub_10005E598(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  double *v25;
  char v26;
  double *v27;
  int v28;
  uint64_t v29;
  double *v30;
  char v31;
  double *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  BOOL v41;
  uint64_t v43;

  v4 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v43 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      while (1)
      {
        sub_100003FEC(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        sub_100003FEC(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        v15 = v4[5];
        v16 = v10[v15];
        v17 = v7[v15];
        if (v16 == 13)
        {
          if (v17 != 13)
            goto LABEL_43;
        }
        else if (v17 == 13 || v16 != v17)
        {
          goto LABEL_43;
        }
        v19 = v4[6];
        v20 = (double *)&v10[v19];
        v21 = v10[v19 + 8];
        v22 = (double *)&v7[v19];
        v23 = v7[v19 + 8];
        if ((v21 & 1) != 0)
        {
          if (!v23)
            goto LABEL_43;
        }
        else
        {
          if (*v20 != *v22)
            LOBYTE(v23) = 1;
          if ((v23 & 1) != 0)
          {
LABEL_43:
            sub_100004030((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
            sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
            goto LABEL_44;
          }
        }
        v24 = v4[7];
        v25 = (double *)&v10[v24];
        v26 = v10[v24 + 8];
        v27 = (double *)&v7[v24];
        v28 = v7[v24 + 8];
        if ((v26 & 1) != 0)
        {
          if (!v28)
            goto LABEL_43;
        }
        else
        {
          if (*v25 != *v27)
            LOBYTE(v28) = 1;
          if ((v28 & 1) != 0)
            goto LABEL_43;
        }
        v29 = v4[8];
        v30 = (double *)&v10[v29];
        v31 = v10[v29 + 8];
        v32 = (double *)&v7[v29];
        v33 = v7[v29 + 8];
        if ((v31 & 1) != 0)
        {
          if (!v33)
            goto LABEL_43;
        }
        else
        {
          if (*v30 != *v32)
            LOBYTE(v33) = 1;
          if ((v33 & 1) != 0)
            goto LABEL_43;
        }
        v34 = v4[9];
        v35 = v10[v34];
        v36 = v7[v34];
        if (v35 == 3)
        {
          if (v36 != 3)
            goto LABEL_43;
        }
        else if (v36 == 3 || v35 != v36)
        {
          goto LABEL_43;
        }
        v37 = type metadata accessor for UnknownStorage(0);
        v38 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v39 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v37, v38);
        sub_100004030((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        v41 = v14-- != 0;
        if ((v39 & 1) != 0)
        {
          v12 += v13;
          if (v41)
            continue;
        }
        return v39 & 1;
      }
    }
    v39 = 1;
  }
  else
  {
LABEL_44:
    v39 = 0;
  }
  return v39 & 1;
}

uint64_t sub_10005E820(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v24;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v27 = a4;
  v29 = a3(0);
  v7 = __chkstk_darwin(v29);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v12 = (char *)&v26 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 != *(_QWORD *)(a2 + 16))
  {
LABEL_15:
    v22 = 0;
    return v22 & 1;
  }
  if (v13 && a1 != a2)
  {
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v28 = *(_QWORD *)(v10 + 72);
    v15 = v13 - 1;
    while (1)
    {
      sub_100003FEC(a1 + v14, (uint64_t)v12, a3);
      sub_100003FEC(a2 + v14, (uint64_t)v9, a3);
      v16 = *(int *)(v29 + 20);
      v17 = *(_QWORD *)&v12[v16];
      v18 = *(_QWORD *)&v9[v16];
      if (v17 != v18)
      {
        swift_retain(*(_QWORD *)&v12[v16]);
        swift_retain(v18);
        v19 = v27(v17, v18);
        swift_release(v18);
        swift_release(v17);
        if ((v19 & 1) == 0)
          break;
      }
      v20 = type metadata accessor for UnknownStorage(0);
      v21 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v20, v21);
      sub_100004030((uint64_t)v9, a3);
      sub_100004030((uint64_t)v12, a3);
      v24 = v15-- != 0;
      if ((v22 & 1) != 0)
      {
        v14 += v28;
        if (v24)
          continue;
      }
      return v22 & 1;
    }
    sub_100004030((uint64_t)v9, a3);
    sub_100004030((uint64_t)v12, a3);
    goto LABEL_15;
  }
  v22 = 1;
  return v22 & 1;
}

uint64_t sub_10005EA04(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  float *v25;
  char v26;
  float *v27;
  int v28;
  uint64_t v29;
  float *v30;
  char v31;
  float *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  BOOL v38;
  uint64_t v40;

  v4 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v40 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      while (1)
      {
        sub_100003FEC(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        sub_100003FEC(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        v15 = v4[5];
        v16 = v10[v15];
        v17 = v7[v15];
        if (v16 == 13)
        {
          if (v17 != 13)
            goto LABEL_38;
        }
        else if (v17 == 13 || v16 != v17)
        {
          goto LABEL_38;
        }
        v19 = v4[6];
        v20 = (double *)&v10[v19];
        v21 = v10[v19 + 8];
        v22 = (double *)&v7[v19];
        v23 = v7[v19 + 8];
        if ((v21 & 1) != 0)
        {
          if (!v23)
            goto LABEL_38;
        }
        else
        {
          if (*v20 != *v22)
            LOBYTE(v23) = 1;
          if ((v23 & 1) != 0)
          {
LABEL_38:
            sub_100004030((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
            sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
            goto LABEL_39;
          }
        }
        v24 = v4[7];
        v25 = (float *)&v10[v24];
        v26 = v10[v24 + 4];
        v27 = (float *)&v7[v24];
        v28 = v7[v24 + 4];
        if ((v26 & 1) != 0)
        {
          if (!v28)
            goto LABEL_38;
        }
        else
        {
          if (*v25 != *v27)
            LOBYTE(v28) = 1;
          if ((v28 & 1) != 0)
            goto LABEL_38;
        }
        v29 = v4[8];
        v30 = (float *)&v10[v29];
        v31 = v10[v29 + 4];
        v32 = (float *)&v7[v29];
        v33 = v7[v29 + 4];
        if ((v31 & 1) != 0)
        {
          if (!v33)
            goto LABEL_38;
        }
        else
        {
          if (*v30 != *v32)
            LOBYTE(v33) = 1;
          if ((v33 & 1) != 0)
            goto LABEL_38;
        }
        v34 = type metadata accessor for UnknownStorage(0);
        v35 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v36 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v34, v35);
        sub_100004030((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        v38 = v14-- != 0;
        if ((v36 & 1) != 0)
        {
          v12 += v13;
          if (v38)
            continue;
        }
        return v36 & 1;
      }
    }
    v36 = 1;
  }
  else
  {
LABEL_39:
    v36 = 0;
  }
  return v36 & 1;
}

uint64_t sub_10005EC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_100003FEC(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        sub_100003FEC(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        v15 = sub_1000606C8((uint64_t)v10, (uint64_t)v7);
        sub_100004030((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

void sub_10005ED98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10005EDF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10005EFDCLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

unint64_t sub_10005F000(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t sub_10005F010(uint64_t a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 4:
      result = 3;
      break;
    case 8:
      result = 4;
      break;
    case 16:
      result = 5;
      break;
    case 32:
      result = 6;
      break;
    case 64:
      result = 7;
      break;
    default:
      result = 8;
      break;
  }
  return result;
}

unint64_t sub_10005F078(unint64_t result)
{
  if (result >= 0xD)
    return 13;
  return result;
}

unint64_t sub_10005F088(unint64_t result)
{
  if (result >= 6)
    return 6;
  return result;
}

unint64_t sub_10005F098(unint64_t result)
{
  if (result >= 7)
    return 7;
  return result;
}

unint64_t sub_10005F0A8(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393310, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393320, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393330, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvId(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393340, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393350, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393360, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393370, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393380, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393390, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003933A0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003933B0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003933C0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003933D0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SyncState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003933E0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393630, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SyncState._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvTime(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003933F0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393400, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393410, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393420, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393430, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393440, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393450, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393460, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393640, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass);
}

uint64_t sub_10005F298(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100017EF8(result, a2);
  return result;
}

uint64_t sub_10005F2AC(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100017F3C(result, a2);
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Measurement(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393470, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393650, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Measurement._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393480, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393490, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003934A0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Clock(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003934B0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003934C0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393660, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003934D0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003934E0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003934F0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393500, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393510, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393670, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SvInfo._StorageClass);
}

uint64_t sub_10005F3D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t *v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE v108[24];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[24];
  _BYTE v133[24];
  _BYTE v134[24];
  _BYTE v135[24];
  _BYTE v136[24];
  _BYTE v137[24];
  _BYTE v138[32];

  v3 = sub_1000039AC(&qword_10036A7D0);
  __chkstk_darwin(v3);
  v93 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036A780);
  __chkstk_darwin(v5);
  v75 = (uint64_t)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  v74 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v76 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource) = 7;
  v10 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions) = &_swiftEmptyArrayStorage;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  v79 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v80 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1) = 5;
  v81 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1) = 5;
  v82 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1) = 5;
  v83 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1) = 5;
  v84 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1) = 5;
  v16 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  *v16 = (uint64_t)&_swiftEmptyArrayStorage;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  v85 = v16;
  v86 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  v18 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v87 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5) = 5;
  v88 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5) = 5;
  v89 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5) = 5;
  v90 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5) = 5;
  v91 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5) = 5;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  v92 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v94 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint) = 4;
  v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, v138, 0, 0);
  v21 = v75;
  sub_10000E660(v20, v75, &qword_10036A780);
  v22 = v74;
  swift_beginAccess(v74, v137, 33, 0);
  sub_10000E574(v21, v22, &qword_10036A780);
  swift_endAccess(v137);
  v23 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds, v137, 0, 0);
  v24 = *v23;
  LOBYTE(v23) = *((_BYTE *)v23 + 8);
  swift_beginAccess(v9, v136, 1, 0);
  *(_QWORD *)v9 = v24;
  *(_BYTE *)(v9 + 8) = (_BYTE)v23;
  v25 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource, v135, 0, 0);
  LOBYTE(v25) = *v25;
  v26 = v76;
  swift_beginAccess(v76, v134, 1, 0);
  *v26 = (_BYTE)v25;
  v27 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions, v133, 0, 0);
  v28 = *v27;
  swift_beginAccess(v10, v132, 1, 0);
  v29 = *v10;
  *v10 = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds, &v131, 0, 0);
  v31 = *v30;
  LOBYTE(v30) = *((_BYTE *)v30 + 8);
  swift_beginAccess(v11, &v130, 1, 0);
  *(_QWORD *)v11 = v31;
  *(_BYTE *)(v11 + 8) = (_BYTE)v30;
  v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb, &v129, 0, 0);
  v33 = *v32;
  LOBYTE(v32) = *((_BYTE *)v32 + 8);
  swift_beginAccess(v12, &v128, 1, 0);
  *(_QWORD *)v12 = v33;
  *(_BYTE *)(v12 + 8) = (_BYTE)v32;
  v34 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec, &v127, 0, 0);
  v35 = *v34;
  LOBYTE(v34) = *((_BYTE *)v34 + 8);
  v36 = v77;
  swift_beginAccess(v77, &v126, 1, 0);
  *(_QWORD *)v36 = v35;
  *(_BYTE *)(v36 + 8) = (_BYTE)v34;
  v37 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM, &v125, 0, 0);
  LODWORD(v35) = *(_DWORD *)v37;
  LOBYTE(v37) = *(_BYTE *)(v37 + 4);
  v38 = v78;
  swift_beginAccess(v78, &v124, 1, 0);
  *(_DWORD *)v38 = v35;
  *(_BYTE *)(v38 + 4) = v37;
  v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds, &v123, 0, 0);
  LODWORD(v35) = *(_DWORD *)v39;
  LOBYTE(v39) = *(_BYTE *)(v39 + 4);
  v40 = v79;
  swift_beginAccess(v79, &v122, 1, 0);
  *(_DWORD *)v40 = v35;
  *(_BYTE *)(v40 + 4) = v39;
  v41 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1, &v121, 0, 0);
  LOBYTE(v41) = *v41;
  v42 = v80;
  swift_beginAccess(v80, &v120, 1, 0);
  *v42 = (_BYTE)v41;
  v43 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1, &v119, 0, 0);
  LOBYTE(v43) = *v43;
  v44 = v81;
  swift_beginAccess(v81, &v118, 1, 0);
  *v44 = (_BYTE)v43;
  v45 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1, &v117, 0, 0);
  LOBYTE(v45) = *v45;
  v46 = v82;
  swift_beginAccess(v82, &v116, 1, 0);
  *v46 = (_BYTE)v45;
  v47 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1, &v115, 0, 0);
  LOBYTE(v47) = *v47;
  v48 = v83;
  swift_beginAccess(v83, &v114, 1, 0);
  *v48 = (_BYTE)v47;
  v49 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1, &v113, 0, 0);
  LOBYTE(v49) = *v49;
  v50 = v84;
  swift_beginAccess(v84, &v112, 1, 0);
  *v50 = (_BYTE)v49;
  v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections, &v111, 0, 0);
  v52 = *v51;
  v53 = v85;
  swift_beginAccess(v85, &v110, 1, 0);
  v54 = *v53;
  *v53 = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v54);
  v55 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit, &v109, 0, 0);
  v56 = v93;
  sub_10000E660(v55, v93, &qword_10036A7D0);
  v57 = v86;
  swift_beginAccess(v86, v108, 33, 0);
  sub_10000E574(v56, v57, &qword_10036A7D0);
  swift_endAccess(v108);
  v58 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5, v108, 0, 0);
  LOBYTE(v58) = *v58;
  v59 = v87;
  swift_beginAccess(v87, &v107, 1, 0);
  *v59 = (_BYTE)v58;
  v60 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5, &v106, 0, 0);
  LOBYTE(v60) = *v60;
  v61 = v88;
  swift_beginAccess(v88, &v105, 1, 0);
  *v61 = (_BYTE)v60;
  v62 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5, &v104, 0, 0);
  LOBYTE(v62) = *v62;
  v63 = v89;
  swift_beginAccess(v89, &v103, 1, 0);
  *v63 = (_BYTE)v62;
  v64 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5, &v102, 0, 0);
  LOBYTE(v64) = *v64;
  v65 = v90;
  swift_beginAccess(v90, &v101, 1, 0);
  *v65 = (_BYTE)v64;
  v66 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, &v100, 0, 0);
  LOBYTE(v66) = *v66;
  v67 = v91;
  swift_beginAccess(v91, &v99, 1, 0);
  *v67 = (_BYTE)v66;
  v68 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec, &v98, 0, 0);
  v69 = *v68;
  LOBYTE(v68) = *((_BYTE *)v68 + 8);
  v70 = v92;
  swift_beginAccess(v92, &v97, 1, 0);
  *(_QWORD *)v70 = v69;
  *(_BYTE *)(v70 + 8) = (_BYTE)v68;
  v71 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess(v71, &v96, 0, 0);
  LOBYTE(v71) = *v71;
  v72 = v94;
  swift_beginAccess(v94, &v95, 1, 0);
  *v72 = (_BYTE)v71;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393520, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393530, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393540, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393550, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393560, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393570, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393580, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393590, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003935A0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393680, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003935B0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003935C0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003935D0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393690, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003935E0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003935F0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393600, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393610, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393620, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003936A0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass);
}

uint64_t sub_10005FEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_10005ED98((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_10005FF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_10005ED98(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_100060048(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100060094()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1000600C8 + *((int *)qword_1000602A0 + (v0 >> 62))))();
}

uint64_t sub_1000600D8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_1000602C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v33 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_24;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_24;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_24;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_24;
  }
  v22 = v11[7];
  v23 = *(unsigned __int8 *)(a1 + v22);
  v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 2)
  {
    if (v24 != 2)
      goto LABEL_24;
  }
  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_24;
  }
  v25 = v11[8];
  v26 = *(unsigned __int8 *)(a1 + v25);
  v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 == 2)
      goto LABEL_23;
LABEL_24:
    v30 = 0;
    return v30 & 1;
  }
  if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0)
    goto LABEL_24;
LABEL_23:
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v28(v10, a1, v4);
  v28(v8, a2, v4);
  v29 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v30 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v29);
  v31 = *(void (**)(char *, uint64_t))(v5 + 8);
  v31(v8, v4);
  v31(v10, v4);
  return v30 & 1;
}

uint64_t sub_1000604B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  float *v18;
  char v19;
  float *v20;
  int v21;
  uint64_t v22;
  float *v23;
  char v24;
  float *v25;
  int v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  uint64_t v32;
  float *v33;
  char v34;
  float *v35;
  int v36;
  char v37;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v42 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_27;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_27;
  }
  v17 = v11[6];
  v18 = (float *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 4);
  v20 = (float *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_27;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_27;
  }
  v22 = v11[7];
  v23 = (float *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 4);
  v25 = (float *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_27;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_27;
  }
  v27 = v11[8];
  v28 = (double *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 8);
  v30 = (double *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_27;
LABEL_25:
    v32 = v11[9];
    v33 = (float *)(a1 + v32);
    v34 = *(_BYTE *)(a1 + v32 + 4);
    v35 = (float *)(a2 + v32);
    v36 = *(unsigned __int8 *)(a2 + v32 + 4);
    if ((v34 & 1) != 0)
    {
      if (!v36)
        goto LABEL_27;
    }
    else
    {
      if (*v33 != *v35)
        LOBYTE(v36) = 1;
      if ((v36 & 1) != 0)
        goto LABEL_27;
    }
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    v40 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v37 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v40);
    v41 = *(void (**)(char *, uint64_t))(v5 + 8);
    v41(v8, v4);
    v41(v10, v4);
    return v37 & 1;
  }
  if (v31)
    goto LABEL_25;
LABEL_27:
  v37 = 0;
  return v37 & 1;
}

uint64_t sub_1000606C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v75 = a1;
  v76 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v66 = *(_QWORD *)(v2 - 8);
  v67 = v2;
  v3 = __chkstk_darwin(v2);
  v65 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v64 = (char *)&v63 - v5;
  v74 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v69 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v63 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_1000039AC(&qword_10036DEE0);
  __chkstk_darwin(v68);
  v70 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036A828);
  v9 = __chkstk_darwin(v8);
  v73 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v71 = (char *)&v63 - v12;
  __chkstk_darwin(v11);
  v72 = (char *)&v63 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_10036DED0);
  __chkstk_darwin(v18);
  v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC(&qword_10036A780);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v63 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v63 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  sub_10000E660(v75 + v30[5], (uint64_t)v29, &qword_10036A780);
  sub_10000E660(v76 + v30[5], (uint64_t)v27, &qword_10036A780);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v29, (uint64_t)v20, &qword_10036A780);
  sub_10000E660((uint64_t)v27, v31, &qword_10036A780);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036A780);
    sub_100015704((uint64_t)v29, &qword_10036A780);
    if (v32(v31, 1, v14) == 1)
    {
      sub_100015704((uint64_t)v20, &qword_10036A780);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &qword_10036DED0;
    v34 = (uint64_t)v20;
LABEL_7:
    sub_100015704(v34, v33);
LABEL_8:
    v35 = 0;
    return v35 & 1;
  }
  sub_10000E660((uint64_t)v20, (uint64_t)v24, &qword_10036A780);
  if (v32(v31, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036A780);
    sub_100015704((uint64_t)v29, &qword_10036A780);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }
  sub_100003E08(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  v37 = sub_1000670C8((uint64_t)v24, (uint64_t)v17);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100015704((uint64_t)v27, &qword_10036A780);
  sub_100015704((uint64_t)v29, &qword_10036A780);
  sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100015704((uint64_t)v20, &qword_10036A780);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v75;
  v40 = v76;
  v41 = *(unsigned __int8 *)(v75 + v38);
  v42 = *(unsigned __int8 *)(v76 + v38);
  if (v41 == 13)
  {
    v44 = (uint64_t)v73;
    v43 = v74;
    v46 = (uint64_t)v71;
    v45 = (uint64_t)v72;
    if (v42 != 13)
      goto LABEL_8;
  }
  else
  {
    v35 = 0;
    v44 = (uint64_t)v73;
    v43 = v74;
    v46 = (uint64_t)v71;
    v45 = (uint64_t)v72;
    if (v42 == 13 || v41 != v42)
      return v35 & 1;
  }
  v47 = v30[7];
  v48 = *(unsigned __int8 *)(v75 + v47);
  v49 = *(unsigned __int8 *)(v76 + v47);
  if (v48 == 4)
  {
    if (v49 != 4)
      goto LABEL_8;
    goto LABEL_21;
  }
  v35 = 0;
  if (v49 != 4 && v48 == v49)
  {
LABEL_21:
    sub_10000E660(v75 + v30[8], v45, &qword_10036A828);
    sub_10000E660(v40 + v30[8], v46, &qword_10036A828);
    v50 = v70;
    v51 = v70 + *(int *)(v68 + 48);
    sub_10000E660(v45, v70, &qword_10036A828);
    v52 = v50;
    sub_10000E660(v46, v51, &qword_10036A828);
    v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
    if (v53(v52, 1, v43) == 1)
    {
      sub_100015704(v46, &qword_10036A828);
      sub_100015704(v45, &qword_10036A828);
      if (v53(v51, 1, v43) == 1)
      {
        sub_100015704(v70, &qword_10036A828);
LABEL_28:
        v57 = v66;
        v56 = v67;
        v58 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
        v59 = v64;
        v58(v64, v39, v67);
        v60 = v65;
        v58(v65, v40, v56);
        v61 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v35 = dispatch thunk of static Equatable.== infix(_:_:)(v59, v60, v56, v61);
        v62 = *(void (**)(char *, uint64_t))(v57 + 8);
        v62(v60, v56);
        v62(v59, v56);
        return v35 & 1;
      }
    }
    else
    {
      sub_10000E660(v52, v44, &qword_10036A828);
      if (v53(v51, 1, v43) != 1)
      {
        v54 = v63;
        sub_100003E08(v51, v63, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        v55 = sub_1000656F0(v44, v54, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        sub_100004030(v54, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        sub_100015704(v46, &qword_10036A828);
        sub_100015704(v45, &qword_10036A828);
        sub_100004030(v44, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        sub_100015704(v52, &qword_10036A828);
        if ((v55 & 1) != 0)
          goto LABEL_28;
        goto LABEL_8;
      }
      sub_100015704(v46, &qword_10036A828);
      sub_100015704(v45, &qword_10036A828);
      sub_100004030(v44, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    }
    v33 = &qword_10036DEE0;
    v34 = v70;
    goto LABEL_7;
  }
  return v35 & 1;
}

uint64_t sub_100060DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  uint64_t v32;
  double *v33;
  char v34;
  double *v35;
  int v36;
  char v37;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v42 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_27;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_27;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_27;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_27;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_27;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_27;
  }
  v27 = v11[8];
  v28 = (double *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 8);
  v30 = (double *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_27;
LABEL_25:
    v32 = v11[9];
    v33 = (double *)(a1 + v32);
    v34 = *(_BYTE *)(a1 + v32 + 8);
    v35 = (double *)(a2 + v32);
    v36 = *(unsigned __int8 *)(a2 + v32 + 8);
    if ((v34 & 1) != 0)
    {
      if (!v36)
        goto LABEL_27;
    }
    else
    {
      if (*v33 != *v35)
        LOBYTE(v36) = 1;
      if ((v36 & 1) != 0)
        goto LABEL_27;
    }
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    v40 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v37 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v40);
    v41 = *(void (**)(char *, uint64_t))(v5 + 8);
    v41(v8, v4);
    v41(v10, v4);
    return v37 & 1;
  }
  if (v31)
    goto LABEL_25;
LABEL_27:
  v37 = 0;
  return v37 & 1;
}

uint64_t sub_100060FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  float *v18;
  char v19;
  float *v20;
  int v21;
  uint64_t v22;
  float *v23;
  char v24;
  float *v25;
  int v26;
  uint64_t v27;
  float *v28;
  char v29;
  float *v30;
  int v31;
  uint64_t v32;
  float *v33;
  char v34;
  float *v35;
  int v36;
  uint64_t v37;
  float *v38;
  char v39;
  float *v40;
  int v41;
  uint64_t v42;
  float *v43;
  char v44;
  float *v45;
  int v46;
  uint64_t v47;
  float *v48;
  char v49;
  float *v50;
  int v51;
  uint64_t v52;
  float *v53;
  char v54;
  float *v55;
  int v56;
  char v57;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v62 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_51;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_51;
  }
  v17 = v11[6];
  v18 = (float *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 4);
  v20 = (float *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_51;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_51;
  }
  v22 = v11[7];
  v23 = (float *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 4);
  v25 = (float *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_51;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_51;
  }
  v27 = v11[8];
  v28 = (float *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 4);
  v30 = (float *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if ((v29 & 1) != 0)
  {
    if (!v31)
      goto LABEL_51;
  }
  else
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_51;
  }
  v32 = v11[9];
  v33 = (float *)(a1 + v32);
  v34 = *(_BYTE *)(a1 + v32 + 4);
  v35 = (float *)(a2 + v32);
  v36 = *(unsigned __int8 *)(a2 + v32 + 4);
  if ((v34 & 1) != 0)
  {
    if (!v36)
      goto LABEL_51;
  }
  else
  {
    if (*v33 != *v35)
      LOBYTE(v36) = 1;
    if ((v36 & 1) != 0)
      goto LABEL_51;
  }
  v37 = v11[10];
  v38 = (float *)(a1 + v37);
  v39 = *(_BYTE *)(a1 + v37 + 4);
  v40 = (float *)(a2 + v37);
  v41 = *(unsigned __int8 *)(a2 + v37 + 4);
  if ((v39 & 1) != 0)
  {
    if (!v41)
      goto LABEL_51;
  }
  else
  {
    if (*v38 != *v40)
      LOBYTE(v41) = 1;
    if ((v41 & 1) != 0)
      goto LABEL_51;
  }
  v42 = v11[11];
  v43 = (float *)(a1 + v42);
  v44 = *(_BYTE *)(a1 + v42 + 4);
  v45 = (float *)(a2 + v42);
  v46 = *(unsigned __int8 *)(a2 + v42 + 4);
  if ((v44 & 1) != 0)
  {
    if (!v46)
      goto LABEL_51;
  }
  else
  {
    if (*v43 != *v45)
      LOBYTE(v46) = 1;
    if ((v46 & 1) != 0)
      goto LABEL_51;
  }
  v47 = v11[12];
  v48 = (float *)(a1 + v47);
  v49 = *(_BYTE *)(a1 + v47 + 4);
  v50 = (float *)(a2 + v47);
  v51 = *(unsigned __int8 *)(a2 + v47 + 4);
  if ((v49 & 1) == 0)
  {
    if (*v48 != *v50)
      LOBYTE(v51) = 1;
    if ((v51 & 1) != 0)
      goto LABEL_51;
LABEL_49:
    v52 = v11[13];
    v53 = (float *)(a1 + v52);
    v54 = *(_BYTE *)(a1 + v52 + 4);
    v55 = (float *)(a2 + v52);
    v56 = *(unsigned __int8 *)(a2 + v52 + 4);
    if ((v54 & 1) != 0)
    {
      if (!v56)
        goto LABEL_51;
    }
    else
    {
      if (*v53 != *v55)
        LOBYTE(v56) = 1;
      if ((v56 & 1) != 0)
        goto LABEL_51;
    }
    v59 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v59(v10, a1, v4);
    v59(v8, a2, v4);
    v60 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v57 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v60);
    v61 = *(void (**)(char *, uint64_t))(v5 + 8);
    v61(v8, v4);
    v61(v10, v4);
    return v57 & 1;
  }
  if (v51)
    goto LABEL_49;
LABEL_51:
  v57 = 0;
  return v57 & 1;
}

uint64_t sub_1000612A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double *v17;
  char v18;
  double *v19;
  int v20;
  uint64_t v21;
  float *v22;
  char v23;
  float *v24;
  int v25;
  uint64_t v26;
  float *v27;
  char v28;
  float *v29;
  int v30;
  char v31;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v36 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 13)
  {
    if (v14 != 13)
      goto LABEL_23;
  }
  else if (v14 == 13 || v13 != v14)
  {
    goto LABEL_23;
  }
  v16 = v11[6];
  v17 = (double *)(a1 + v16);
  v18 = *(_BYTE *)(a1 + v16 + 8);
  v19 = (double *)(a2 + v16);
  v20 = *(unsigned __int8 *)(a2 + v16 + 8);
  if ((v18 & 1) != 0)
  {
    if (!v20)
      goto LABEL_23;
  }
  else
  {
    if (*v17 != *v19)
      LOBYTE(v20) = 1;
    if ((v20 & 1) != 0)
      goto LABEL_23;
  }
  v21 = v11[7];
  v22 = (float *)(a1 + v21);
  v23 = *(_BYTE *)(a1 + v21 + 4);
  v24 = (float *)(a2 + v21);
  v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if ((v23 & 1) == 0)
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      goto LABEL_23;
LABEL_21:
    v26 = v11[8];
    v27 = (float *)(a1 + v26);
    v28 = *(_BYTE *)(a1 + v26 + 4);
    v29 = (float *)(a2 + v26);
    v30 = *(unsigned __int8 *)(a2 + v26 + 4);
    if ((v28 & 1) != 0)
    {
      if (!v30)
        goto LABEL_23;
    }
    else
    {
      if (*v27 != *v29)
        LOBYTE(v30) = 1;
      if ((v30 & 1) != 0)
        goto LABEL_23;
    }
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v33(v10, a1, v4);
    v33(v8, a2, v4);
    v34 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v31 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v34);
    v35 = *(void (**)(char *, uint64_t))(v5 + 8);
    v35(v8, v4);
    v35(v10, v4);
    return v31 & 1;
  }
  if (v25)
    goto LABEL_21;
LABEL_23:
  v31 = 0;
  return v31 & 1;
}

uint64_t sub_100061484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v48;
  char v49;
  uint64_t v50;
  float *v51;
  char v52;
  float *v53;
  int v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v77 = a1;
  v78 = a2;
  v2 = type metadata accessor for UnknownStorage(0);
  v66 = *(_QWORD *)(v2 - 8);
  v67 = v2;
  v3 = __chkstk_darwin(v2);
  v65 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v64 = (char *)&v63 - v5;
  v74 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v71 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v68 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_1000039AC(&qword_10036DF58);
  __chkstk_darwin(v70);
  v75 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10036A768);
  v9 = __chkstk_darwin(v8);
  v69 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v72 = (uint64_t)&v63 - v12;
  __chkstk_darwin(v11);
  v73 = (uint64_t)&v63 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_10036DF60);
  __chkstk_darwin(v18);
  v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC(&qword_10036A760);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v63 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v63 - v28;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  sub_10000E660(v77 + *(int *)(v30 + 20), (uint64_t)v29, &qword_10036A760);
  v76 = v30;
  sub_10000E660(v78 + *(int *)(v30 + 20), (uint64_t)v27, &qword_10036A760);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v29, (uint64_t)v20, &qword_10036A760);
  sub_10000E660((uint64_t)v27, v31, &qword_10036A760);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036A760);
    sub_100015704((uint64_t)v29, &qword_10036A760);
    if (v32(v31, 1, v14) == 1)
    {
      sub_100015704((uint64_t)v20, &qword_10036A760);
      goto LABEL_8;
    }
LABEL_6:
    v33 = &qword_10036DF60;
    v34 = (uint64_t)v20;
LABEL_14:
    sub_100015704(v34, v33);
    goto LABEL_15;
  }
  sub_10000E660((uint64_t)v20, (uint64_t)v24, &qword_10036A760);
  if (v32(v31, 1, v14) == 1)
  {
    sub_100015704((uint64_t)v27, &qword_10036A760);
    sub_100015704((uint64_t)v29, &qword_10036A760);
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    goto LABEL_6;
  }
  sub_100003E08(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  v35 = sub_1000658A4((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100015704((uint64_t)v27, &qword_10036A760);
  sub_100015704((uint64_t)v29, &qword_10036A760);
  sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100015704((uint64_t)v20, &qword_10036A760);
  if ((v35 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v36 = v76;
  v37 = v77;
  v38 = v73;
  sub_10000E660(v77 + *(int *)(v76 + 24), v73, &qword_10036A768);
  v39 = v78;
  v40 = v72;
  sub_10000E660(v78 + *(int *)(v36 + 24), v72, &qword_10036A768);
  v41 = v75;
  v42 = v75 + *(int *)(v70 + 48);
  sub_10000E660(v38, v75, &qword_10036A768);
  sub_10000E660(v40, v42, &qword_10036A768);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  v44 = v74;
  if (v43(v41, 1, v74) != 1)
  {
    v45 = v69;
    sub_10000E660(v41, v69, &qword_10036A768);
    if (v43(v42, 1, v44) != 1)
    {
      v48 = v68;
      sub_100003E08(v42, v68, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      v49 = sub_1000658A4(v45, v48, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      sub_100004030(v48, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      sub_100015704(v40, &qword_10036A768);
      sub_100015704(v38, &qword_10036A768);
      sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      sub_100015704(v41, &qword_10036A768);
      if ((v49 & 1) == 0)
        goto LABEL_15;
      goto LABEL_18;
    }
    sub_100015704(v40, &qword_10036A768);
    sub_100015704(v38, &qword_10036A768);
    sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_13;
  }
  sub_100015704(v40, &qword_10036A768);
  sub_100015704(v38, &qword_10036A768);
  if (v43(v42, 1, v44) != 1)
  {
LABEL_13:
    v33 = &qword_10036DF58;
    v34 = v41;
    goto LABEL_14;
  }
  sub_100015704(v41, &qword_10036A768);
LABEL_18:
  v50 = *(int *)(v76 + 28);
  v51 = (float *)(v37 + v50);
  v52 = *(_BYTE *)(v37 + v50 + 4);
  v53 = (float *)(v39 + v50);
  v54 = *(unsigned __int8 *)(v39 + v50 + 4);
  if ((v52 & 1) != 0)
  {
    if (v54)
    {
LABEL_24:
      v55 = v66;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
      v57 = v64;
      v58 = v37;
      v59 = v67;
      v56(v64, v58, v67);
      v60 = v65;
      v56(v65, v39, v59);
      v61 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v46 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v60, v59, v61);
      v62 = *(void (**)(char *, uint64_t))(v55 + 8);
      v62(v60, v59);
      v62(v57, v59);
      return v46 & 1;
    }
  }
  else
  {
    if (*v51 != *v53)
      LOBYTE(v54) = 1;
    if ((v54 & 1) == 0)
      goto LABEL_24;
  }
LABEL_15:
  v46 = 0;
  return v46 & 1;
}

uint64_t sub_100061B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  float *v13;
  char v14;
  float *v15;
  int v16;
  uint64_t v17;
  float *v18;
  char v19;
  float *v20;
  int v21;
  uint64_t v22;
  float *v23;
  char v24;
  float *v25;
  int v26;
  char v27;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v12 = v11[5];
  v13 = (float *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 4);
  v15 = (float *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_15;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_15;
  }
  v17 = v11[6];
  v18 = (float *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 4);
  v20 = (float *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_15;
LABEL_13:
    v22 = v11[7];
    v23 = (float *)(a1 + v22);
    v24 = *(_BYTE *)(a1 + v22 + 4);
    v25 = (float *)(a2 + v22);
    v26 = *(unsigned __int8 *)(a2 + v22 + 4);
    if ((v24 & 1) != 0)
    {
      if (!v26)
        goto LABEL_15;
    }
    else
    {
      if (*v23 != *v25)
        LOBYTE(v26) = 1;
      if ((v26 & 1) != 0)
        goto LABEL_15;
    }
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    v30 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v30);
    v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    v31(v8, v4);
    v31(v10, v4);
    return v27 & 1;
  }
  if (v21)
    goto LABEL_13;
LABEL_15:
  v27 = 0;
  return v27 & 1;
}

uint64_t sub_100061CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  char v32;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v37 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_21;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_21;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_21;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_21;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_21;
LABEL_19:
    v27 = v11[8];
    v28 = (double *)(a1 + v27);
    v29 = *(_BYTE *)(a1 + v27 + 8);
    v30 = (double *)(a2 + v27);
    v31 = *(unsigned __int8 *)(a2 + v27 + 8);
    if ((v29 & 1) != 0)
    {
      if (!v31)
        goto LABEL_21;
    }
    else
    {
      if (*v28 != *v30)
        LOBYTE(v31) = 1;
      if ((v31 & 1) != 0)
        goto LABEL_21;
    }
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v34(v10, a1, v4);
    v34(v8, a2, v4);
    v35 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v35);
    v36 = *(void (**)(char *, uint64_t))(v5 + 8);
    v36(v8, v4);
    v36(v10, v4);
    return v32 & 1;
  }
  if (v26)
    goto LABEL_19;
LABEL_21:
  v32 = 0;
  return v32 & 1;
}

uint64_t sub_100061ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v47;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v47 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_52;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_52;
  }
  v15 = v11[6];
  v16 = *(unsigned __int8 *)(a1 + v15);
  v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
      goto LABEL_52;
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_52;
  }
  v18 = v11[7];
  v19 = *(unsigned __int8 *)(a1 + v18);
  v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2)
      goto LABEL_52;
  }
  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_52;
  }
  v21 = v11[8];
  v22 = *(unsigned __int8 *)(a1 + v21);
  v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 != 2)
      goto LABEL_52;
  }
  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_52;
  }
  v24 = v11[9];
  v25 = *(unsigned __int8 *)(a1 + v24);
  v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2)
      goto LABEL_52;
  }
  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_52;
  }
  v27 = v11[10];
  v28 = *(unsigned __int8 *)(a1 + v27);
  v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 != 2)
      goto LABEL_52;
  }
  else if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
  {
    goto LABEL_52;
  }
  v30 = v11[11];
  v31 = *(unsigned __int8 *)(a1 + v30);
  v32 = *(unsigned __int8 *)(a2 + v30);
  if (v31 == 2)
  {
    if (v32 != 2)
      goto LABEL_52;
  }
  else if (v32 == 2 || ((((v32 & 1) == 0) ^ v31) & 1) == 0)
  {
    goto LABEL_52;
  }
  v33 = v11[12];
  v34 = *(unsigned __int8 *)(a1 + v33);
  v35 = *(unsigned __int8 *)(a2 + v33);
  if (v34 == 2)
  {
    if (v35 != 2)
      goto LABEL_52;
  }
  else if (v35 == 2 || ((((v35 & 1) == 0) ^ v34) & 1) == 0)
  {
    goto LABEL_52;
  }
  v36 = v11[13];
  v37 = *(unsigned __int8 *)(a1 + v36);
  v38 = *(unsigned __int8 *)(a2 + v36);
  if (v37 == 2)
  {
    if (v38 != 2)
      goto LABEL_52;
  }
  else if (v38 == 2 || ((((v38 & 1) == 0) ^ v37) & 1) == 0)
  {
    goto LABEL_52;
  }
  v39 = v11[14];
  v40 = *(unsigned __int8 *)(a1 + v39);
  v41 = *(unsigned __int8 *)(a2 + v39);
  if (v40 == 2)
  {
    if (v41 == 2)
      goto LABEL_51;
LABEL_52:
    v44 = 0;
    return v44 & 1;
  }
  if (v41 == 2 || ((((v41 & 1) == 0) ^ v40) & 1) == 0)
    goto LABEL_52;
LABEL_51:
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v42(v10, a1, v4);
  v42(v8, a2, v4);
  v43 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v44 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v43);
  v45 = *(void (**)(char *, uint64_t))(v5 + 8);
  v45(v8, v4);
  v45(v10, v4);
  return v44 & 1;
}

uint64_t sub_100062220(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double *v17;
  char v18;
  double *v19;
  int v20;
  uint64_t v21;
  double *v22;
  char v23;
  double *v24;
  int v25;
  uint64_t v26;
  double *v27;
  char v28;
  double *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  char v34;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v39 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 13)
  {
    if (v14 != 13)
      goto LABEL_29;
  }
  else if (v14 == 13 || v13 != v14)
  {
    goto LABEL_29;
  }
  v16 = v11[6];
  v17 = (double *)(a1 + v16);
  v18 = *(_BYTE *)(a1 + v16 + 8);
  v19 = (double *)(a2 + v16);
  v20 = *(unsigned __int8 *)(a2 + v16 + 8);
  if ((v18 & 1) != 0)
  {
    if (!v20)
      goto LABEL_29;
  }
  else
  {
    if (*v17 != *v19)
      LOBYTE(v20) = 1;
    if ((v20 & 1) != 0)
      goto LABEL_29;
  }
  v21 = v11[7];
  v22 = (double *)(a1 + v21);
  v23 = *(_BYTE *)(a1 + v21 + 8);
  v24 = (double *)(a2 + v21);
  v25 = *(unsigned __int8 *)(a2 + v21 + 8);
  if ((v23 & 1) != 0)
  {
    if (!v25)
      goto LABEL_29;
  }
  else
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      goto LABEL_29;
  }
  v26 = v11[8];
  v27 = (double *)(a1 + v26);
  v28 = *(_BYTE *)(a1 + v26 + 8);
  v29 = (double *)(a2 + v26);
  v30 = *(unsigned __int8 *)(a2 + v26 + 8);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      goto LABEL_29;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      goto LABEL_29;
  }
  v31 = v11[9];
  v32 = *(unsigned __int8 *)(a1 + v31);
  v33 = *(unsigned __int8 *)(a2 + v31);
  if (v32 == 3)
  {
    if (v33 != 3)
    {
LABEL_29:
      v34 = 0;
      return v34 & 1;
    }
LABEL_33:
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v36(v10, a1, v4);
    v36(v8, a2, v4);
    v37 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v34 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v37);
    v38 = *(void (**)(char *, uint64_t))(v5 + 8);
    v38(v8, v4);
    v38(v10, v4);
    return v34 & 1;
  }
  v34 = 0;
  if (v33 != 3 && v32 == v33)
    goto LABEL_33;
  return v34 & 1;
}

uint64_t sub_100062430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  char v26;
  double *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = type metadata accessor for UnknownStorage(0);
  v50 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v49 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v48 = (char *)&v45 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v47 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10036DED8);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036A7C8);
  v15 = __chkstk_darwin(v14);
  v51 = (uint64_t)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v45 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v45 - v20;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  v23 = v22;
  v24 = *(int *)(v22 + 20);
  v25 = (double *)(a1 + v24);
  v26 = *(_BYTE *)(a1 + v24 + 8);
  v52 = a2;
  v27 = (double *)(a2 + v24);
  v28 = *(unsigned __int8 *)(a2 + v24 + 8);
  if ((v26 & 1) != 0)
  {
    if (!v28)
      goto LABEL_13;
  }
  else
  {
    if (*v25 != *v27)
      LOBYTE(v28) = 1;
    if ((v28 & 1) != 0)
      goto LABEL_13;
  }
  v46 = v4;
  v29 = a1;
  sub_10000E660(a1 + *(int *)(v22 + 24), (uint64_t)v21, &qword_10036A7C8);
  sub_10000E660(v52 + *(int *)(v23 + 24), (uint64_t)v19, &qword_10036A7C8);
  v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v21, (uint64_t)v13, &qword_10036A7C8);
  sub_10000E660((uint64_t)v19, v30, &qword_10036A7C8);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v19, &qword_10036A7C8);
    sub_100015704((uint64_t)v21, &qword_10036A7C8);
    v32 = v31(v30, 1, v8);
    v33 = v46;
    if (v32 == 1)
    {
      sub_100015704((uint64_t)v13, &qword_10036A7C8);
LABEL_16:
      v39 = v50;
      v40 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      v41 = v48;
      v40(v48, v29, v33);
      v42 = v49;
      v40(v49, v52, v33);
      v43 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v33, v43);
      v44 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44(v42, v33);
      v44(v41, v33);
      return v35 & 1;
    }
    goto LABEL_12;
  }
  v34 = v51;
  sub_10000E660((uint64_t)v13, v51, &qword_10036A7C8);
  if (v31(v30, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v19, &qword_10036A7C8);
    sub_100015704((uint64_t)v21, &qword_10036A7C8);
    sub_100004030(v34, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
LABEL_12:
    sub_100015704((uint64_t)v13, &qword_10036DED8);
    goto LABEL_13;
  }
  v37 = v47;
  sub_100003E08(v30, v47, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  v38 = sub_1000656F0(v34, v37, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  sub_100004030(v37, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  sub_100015704((uint64_t)v19, &qword_10036A7C8);
  sub_100015704((uint64_t)v21, &qword_10036A7C8);
  sub_100004030(v34, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  sub_100015704((uint64_t)v13, &qword_10036A7C8);
  v33 = v46;
  if ((v38 & 1) != 0)
    goto LABEL_16;
LABEL_13:
  v35 = 0;
  return v35 & 1;
}

uint64_t sub_100062850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_17;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_17;
  }
  v15 = v11[6];
  v16 = *(unsigned __int8 *)(a1 + v15);
  v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
      goto LABEL_17;
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_17;
  }
  v18 = v11[7];
  v19 = *(unsigned __int8 *)(a1 + v18);
  v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 == 2)
      goto LABEL_16;
LABEL_17:
    v23 = 0;
    return v23 & 1;
  }
  if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
    goto LABEL_17;
LABEL_16:
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v21(v10, a1, v4);
  v21(v8, a2, v4);
  v22 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v22);
  v24 = *(void (**)(char *, uint64_t))(v5 + 8);
  v24(v8, v4);
  v24(v10, v4);
  return v23 & 1;
}

uint64_t sub_100062A10(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  char v15;
  double *v16;
  int v17;
  uint64_t v18;
  double *v19;
  char v20;
  double *v21;
  int v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v29 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  v12 = v11;
  v13 = *(int *)(v11 + 32);
  v14 = (double *)((char *)a1 + v13);
  v15 = *((_BYTE *)a1 + v13 + 8);
  v16 = (double *)((char *)a2 + v13);
  v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_17;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_17;
  }
  v18 = *(int *)(v11 + 36);
  v19 = (double *)((char *)a1 + v18);
  v20 = *((_BYTE *)a1 + v18 + 8);
  v21 = (double *)((char *)a2 + v18);
  v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) != 0)
  {
    if (!v22)
    {
LABEL_17:
      v26 = 0;
      return v26 & 1;
    }
  }
  else
  {
    if (*v19 != *v21)
      LOBYTE(v22) = 1;
    if ((v22 & 1) != 0)
      goto LABEL_17;
  }
  if (!sub_10005DEA8(*a1, *a2) || !sub_10005DEA8(a1[1], a2[1]) || !sub_10005DEA8(a1[2], a2[2]))
    goto LABEL_17;
  v23 = (char *)a1 + *(int *)(v12 + 28);
  v24 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v24(v10, v23, v4);
  v24(v8, (char *)a2 + *(int *)(v12 + 28), v4);
  v25 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v25);
  v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v8, v4);
  v27(v10, v4);
  return v26 & 1;
}

uint64_t sub_100062BCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v34 - v11;
  v13 = (int *)a3(0);
  v14 = v13[5];
  v15 = *(unsigned __int8 *)(a1 + v14);
  v16 = *(unsigned __int8 *)(a2 + v14);
  if (v15 == 2)
  {
    if (v16 != 2)
      goto LABEL_27;
  }
  else if (v16 == 2 || ((((v16 & 1) == 0) ^ v15) & 1) == 0)
  {
    goto LABEL_27;
  }
  v17 = v13[6];
  v18 = *(unsigned __int8 *)(a1 + v17);
  v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2)
      goto LABEL_27;
  }
  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_27;
  }
  v20 = v13[7];
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2)
      goto LABEL_27;
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_27;
  }
  v23 = v13[8];
  v24 = *(unsigned __int8 *)(a1 + v23);
  v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 2)
  {
    if (v25 != 2)
      goto LABEL_27;
  }
  else if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0)
  {
    goto LABEL_27;
  }
  v26 = v13[9];
  v27 = *(unsigned __int8 *)(a1 + v26);
  v28 = *(unsigned __int8 *)(a2 + v26);
  if (v27 == 2)
  {
    if (v28 == 2)
      goto LABEL_26;
LABEL_27:
    v31 = 0;
    return v31 & 1;
  }
  if (v28 == 2 || ((((v28 & 1) == 0) ^ v27) & 1) == 0)
    goto LABEL_27;
LABEL_26:
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v29(v12, a1, v6);
  v29(v10, a2, v6);
  v30 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v31 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v30);
  v32 = *(void (**)(char *, uint64_t))(v7 + 8);
  v32(v10, v6);
  v32(v12, v6);
  return v31 & 1;
}

uint64_t sub_100062E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v27 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_9;
LABEL_7:
    v17 = *(int *)(v11 + 24);
    v18 = (double *)(a1 + v17);
    v19 = *(_BYTE *)(a1 + v17 + 8);
    v20 = (double *)(a2 + v17);
    v21 = *(unsigned __int8 *)(a2 + v17 + 8);
    if ((v19 & 1) != 0)
    {
      if (!v21)
        goto LABEL_9;
    }
    else
    {
      if (*v18 != *v20)
        LOBYTE(v21) = 1;
      if ((v21 & 1) != 0)
        goto LABEL_9;
    }
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v10, a1, v4);
    v23(v8, a2, v4);
    v24 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v24);
    v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v8, v4);
    v25(v10, v4);
    return v22 & 1;
  }
  if (v16)
    goto LABEL_7;
LABEL_9:
  v22 = 0;
  return v22 & 1;
}

uint64_t sub_100062F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _DWORD *v35;
  char v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  char v41;
  _DWORD *v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v64;
  char v65;
  uint64_t v66;
  void (*v67)(_BYTE *, uint64_t, uint64_t);
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  void (*v72)(_BYTE *, uint64_t);
  _BYTE v73[4];
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;

  v4 = type metadata accessor for UnknownStorage(0);
  v80 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v79 = &v73[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v78 = &v73[-v7];
  v85 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v8 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v82 = &v73[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_1000039AC(&qword_10036DF20);
  v11 = __chkstk_darwin(v10);
  v84 = &v73[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v14 = &v73[-v13];
  v15 = sub_1000039AC(&qword_10036A7F0);
  v16 = __chkstk_darwin(v15);
  v81 = &v73[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v16);
  v20 = &v73[-v19];
  v21 = __chkstk_darwin(v18);
  v83 = &v73[-v22];
  v23 = __chkstk_darwin(v21);
  v25 = &v73[-v24];
  v26 = __chkstk_darwin(v23);
  v28 = &v73[-v27];
  __chkstk_darwin(v26);
  v30 = &v73[-v29];
  v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  v32 = a2;
  v33 = v31;
  v34 = v31[5];
  v35 = (_DWORD *)(a1 + v34);
  v36 = *(_BYTE *)(a1 + v34 + 4);
  v37 = (_DWORD *)(v32 + v34);
  v38 = *(unsigned __int8 *)(v32 + v34 + 4);
  if ((v36 & 1) != 0)
  {
    if (!v38)
      goto LABEL_32;
  }
  else
  {
    if (*v35 != *v37)
      LOBYTE(v38) = 1;
    if ((v38 & 1) != 0)
      goto LABEL_32;
  }
  v39 = v31[6];
  v40 = (_DWORD *)(a1 + v39);
  v41 = *(_BYTE *)(a1 + v39 + 4);
  v42 = (_DWORD *)(v32 + v39);
  v43 = *(unsigned __int8 *)(v32 + v39 + 4);
  if ((v41 & 1) != 0)
  {
    if (!v43)
      goto LABEL_32;
  }
  else
  {
    if (*v40 != *v42)
      LOBYTE(v43) = 1;
    if ((v43 & 1) != 0)
      goto LABEL_32;
  }
  v44 = v31[7];
  v45 = *(unsigned __int8 *)(a1 + v44);
  v46 = *(unsigned __int8 *)(v32 + v44);
  v77 = v4;
  if (v45 == 6)
  {
    if (v46 != 6)
      goto LABEL_32;
LABEL_18:
    v48 = v31[8];
    v75 = a1;
    v49 = a1 + v48;
    v50 = v32;
    sub_10000E660(v49, (uint64_t)v30, &qword_10036A7F0);
    v51 = v33[8];
    v76 = v50;
    sub_10000E660(v50 + v51, (uint64_t)v28, &qword_10036A7F0);
    v52 = (uint64_t)&v14[*(int *)(v10 + 48)];
    sub_10000E660((uint64_t)v30, (uint64_t)v14, &qword_10036A7F0);
    sub_10000E660((uint64_t)v28, v52, &qword_10036A7F0);
    v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v54 = v85;
    if (v53((uint64_t)v14, 1, v85) == 1)
    {
      sub_100015704((uint64_t)v28, &qword_10036A7F0);
      sub_100015704((uint64_t)v30, &qword_10036A7F0);
      if (v53(v52, 1, v54) == 1)
      {
        sub_100015704((uint64_t)v14, &qword_10036A7F0);
LABEL_25:
        v58 = v75;
        v59 = v83;
        sub_10000E660(v75 + v33[9], (uint64_t)v83, &qword_10036A7F0);
        sub_10000E660(v76 + v33[9], (uint64_t)v20, &qword_10036A7F0);
        v60 = v84;
        v61 = (uint64_t)&v84[*(int *)(v10 + 48)];
        sub_10000E660((uint64_t)v59, (uint64_t)v84, &qword_10036A7F0);
        sub_10000E660((uint64_t)v20, v61, &qword_10036A7F0);
        if (v53((uint64_t)v60, 1, v54) == 1)
        {
          sub_100015704((uint64_t)v20, &qword_10036A7F0);
          sub_100015704((uint64_t)v59, &qword_10036A7F0);
          if (v53(v61, 1, v54) == 1)
          {
            sub_100015704((uint64_t)v60, &qword_10036A7F0);
LABEL_35:
            v66 = v80;
            v67 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v80 + 16);
            v68 = v77;
            v69 = v78;
            v67(v78, v58, v77);
            v70 = v79;
            v67(v79, v76, v68);
            v71 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
            v47 = dispatch thunk of static Equatable.== infix(_:_:)(v69, v70, v68, v71);
            v72 = *(void (**)(_BYTE *, uint64_t))(v66 + 8);
            v72(v70, v68);
            v72(v69, v68);
            return v47 & 1;
          }
          goto LABEL_30;
        }
        v62 = v81;
        sub_10000E660((uint64_t)v60, (uint64_t)v81, &qword_10036A7F0);
        if (v53(v61, 1, v54) == 1)
        {
          sub_100015704((uint64_t)v20, &qword_10036A7F0);
          sub_100015704((uint64_t)v59, &qword_10036A7F0);
          sub_100004030((uint64_t)v62, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_30:
          v55 = (uint64_t)v60;
          goto LABEL_31;
        }
        v64 = v82;
        sub_100003E08(v61, (uint64_t)v82, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        v65 = sub_100062E00((uint64_t)v62, (uint64_t)v64);
        sub_100004030((uint64_t)v64, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        sub_100015704((uint64_t)v20, &qword_10036A7F0);
        sub_100015704((uint64_t)v59, &qword_10036A7F0);
        sub_100004030((uint64_t)v62, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        sub_100015704((uint64_t)v60, &qword_10036A7F0);
        if ((v65 & 1) != 0)
          goto LABEL_35;
LABEL_32:
        v47 = 0;
        return v47 & 1;
      }
    }
    else
    {
      sub_10000E660((uint64_t)v14, (uint64_t)v25, &qword_10036A7F0);
      if (v53(v52, 1, v54) != 1)
      {
        v56 = v52;
        v57 = v82;
        sub_100003E08(v56, (uint64_t)v82, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        v74 = sub_100062E00((uint64_t)v25, (uint64_t)v57);
        sub_100004030((uint64_t)v57, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        sub_100015704((uint64_t)v28, &qword_10036A7F0);
        sub_100015704((uint64_t)v30, &qword_10036A7F0);
        sub_100004030((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        v54 = v85;
        sub_100015704((uint64_t)v14, &qword_10036A7F0);
        if ((v74 & 1) == 0)
          goto LABEL_32;
        goto LABEL_25;
      }
      sub_100015704((uint64_t)v28, &qword_10036A7F0);
      sub_100015704((uint64_t)v30, &qword_10036A7F0);
      sub_100004030((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    }
    v55 = (uint64_t)v14;
LABEL_31:
    sub_100015704(v55, &qword_10036DF20);
    goto LABEL_32;
  }
  v47 = 0;
  if (v46 != 6 && v45 == v46)
    goto LABEL_18;
  return v47 & 1;
}

uint64_t sub_100063628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  char v43;
  _DWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v4 = type metadata accessor for UnknownStorage(0);
  v87 = *(_QWORD *)(v4 - 8);
  v88 = v4;
  v5 = __chkstk_darwin(v4);
  v86 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v85 = (char *)&v83 - v7;
  v98 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v96 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v90 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_1000039AC(&qword_10036DF10);
  v9 = __chkstk_darwin(v97);
  v91 = (uint64_t)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v99 = (uint64_t)&v83 - v11;
  v12 = sub_1000039AC(&qword_10036A7F8);
  v13 = __chkstk_darwin(v12);
  v89 = (uint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v93 = (char *)&v83 - v16;
  v17 = __chkstk_darwin(v15);
  v94 = (char *)&v83 - v18;
  v19 = __chkstk_darwin(v17);
  v92 = (uint64_t)&v83 - v20;
  v21 = __chkstk_darwin(v19);
  v100 = (uint64_t)&v83 - v22;
  __chkstk_darwin(v21);
  v95 = (uint64_t)&v83 - v23;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1000039AC(&qword_10036DF18);
  __chkstk_darwin(v28);
  v30 = (char *)&v83 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1000039AC(&qword_10036A7E0);
  v32 = __chkstk_darwin(v31);
  v34 = (char *)&v83 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v32);
  v37 = (char *)&v83 - v36;
  __chkstk_darwin(v35);
  v39 = (char *)&v83 - v38;
  v40 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  v41 = *(int *)(v40 + 20);
  v42 = (_DWORD *)(a1 + v41);
  v43 = *(_BYTE *)(a1 + v41 + 4);
  v101 = a2;
  v44 = (_DWORD *)(a2 + v41);
  v45 = *(unsigned __int8 *)(a2 + v41 + 4);
  if ((v43 & 1) != 0)
  {
    if (!v45)
      goto LABEL_28;
  }
  else
  {
    if (*v42 != *v44)
      LOBYTE(v45) = 1;
    if ((v45 & 1) != 0)
      goto LABEL_28;
  }
  v46 = *(int *)(v40 + 24);
  v47 = v40;
  v83 = a1;
  sub_10000E660(a1 + v46, (uint64_t)v39, &qword_10036A7E0);
  v84 = v47;
  sub_10000E660(v101 + *(int *)(v47 + 24), (uint64_t)v37, &qword_10036A7E0);
  v48 = (uint64_t)&v30[*(int *)(v28 + 48)];
  sub_10000E660((uint64_t)v39, (uint64_t)v30, &qword_10036A7E0);
  sub_10000E660((uint64_t)v37, v48, &qword_10036A7E0);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v49((uint64_t)v30, 1, v24) == 1)
  {
    sub_100015704((uint64_t)v37, &qword_10036A7E0);
    sub_100015704((uint64_t)v39, &qword_10036A7E0);
    if (v49(v48, 1, v24) == 1)
    {
      sub_100015704((uint64_t)v30, &qword_10036A7E0);
      goto LABEL_14;
    }
LABEL_12:
    v50 = &qword_10036DF18;
    v51 = (uint64_t)v30;
LABEL_27:
    sub_100015704(v51, v50);
    goto LABEL_28;
  }
  sub_10000E660((uint64_t)v30, (uint64_t)v34, &qword_10036A7E0);
  if (v49(v48, 1, v24) == 1)
  {
    sub_100015704((uint64_t)v37, &qword_10036A7E0);
    sub_100015704((uint64_t)v39, &qword_10036A7E0);
    sub_100004030((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    goto LABEL_12;
  }
  sub_100003E08(v48, (uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  v52 = sub_100064844((uint64_t)v34, (uint64_t)v27);
  sub_100004030((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_100015704((uint64_t)v37, &qword_10036A7E0);
  sub_100015704((uint64_t)v39, &qword_10036A7E0);
  sub_100004030((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_100015704((uint64_t)v30, &qword_10036A7E0);
  if ((v52 & 1) == 0)
    goto LABEL_28;
LABEL_14:
  v54 = v83;
  v53 = v84;
  v55 = v95;
  sub_10000E660(v83 + *(int *)(v84 + 28), v95, &qword_10036A7F8);
  v56 = v100;
  sub_10000E660(v101 + *(int *)(v53 + 28), v100, &qword_10036A7F8);
  v57 = v97;
  v58 = v99;
  v59 = v99 + *(int *)(v97 + 48);
  sub_10000E660(v55, v99, &qword_10036A7F8);
  sub_10000E660(v56, v59, &qword_10036A7F8);
  v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48);
  v61 = v98;
  if (v60(v58, 1, v98) == 1)
  {
    sub_100015704(v56, &qword_10036A7F8);
    sub_100015704(v55, &qword_10036A7F8);
    v62 = v60(v59, 1, v61);
    v64 = (uint64_t)v93;
    v63 = (uint64_t)v94;
    if (v62 != 1)
    {
LABEL_26:
      v50 = &qword_10036DF10;
      v51 = v58;
      goto LABEL_27;
    }
    sub_100015704(v58, &qword_10036A7F8);
LABEL_20:
    v70 = v84;
    sub_10000E660(v54 + *(int *)(v84 + 32), v63, &qword_10036A7F8);
    sub_10000E660(v101 + *(int *)(v70 + 32), v64, &qword_10036A7F8);
    v58 = v91;
    v71 = v91 + *(int *)(v57 + 48);
    sub_10000E660(v63, v91, &qword_10036A7F8);
    sub_10000E660(v64, v71, &qword_10036A7F8);
    if (v60(v58, 1, v61) == 1)
    {
      sub_100015704(v64, &qword_10036A7F8);
      sub_100015704(v63, &qword_10036A7F8);
      if (v60(v71, 1, v61) == 1)
      {
        sub_100015704(v58, &qword_10036A7F8);
LABEL_31:
        v76 = v87;
        v77 = v88;
        v78 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
        v79 = v85;
        v78(v85, v54, v88);
        v80 = v86;
        v78(v86, v101, v77);
        v81 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v72 = dispatch thunk of static Equatable.== infix(_:_:)(v79, v80, v77, v81);
        v82 = *(void (**)(char *, uint64_t))(v76 + 8);
        v82(v80, v77);
        v82(v79, v77);
        return v72 & 1;
      }
      goto LABEL_26;
    }
    v65 = v89;
    sub_10000E660(v58, v89, &qword_10036A7F8);
    if (v60(v71, 1, v61) == 1)
    {
      sub_100015704(v64, &qword_10036A7F8);
      v67 = v63;
      goto LABEL_25;
    }
    v74 = v90;
    sub_100003E08(v71, v90, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    v75 = sub_100064118(v65, v74);
    sub_100004030(v74, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    sub_100015704(v64, &qword_10036A7F8);
    sub_100015704(v63, &qword_10036A7F8);
    sub_100004030(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    sub_100015704(v58, &qword_10036A7F8);
    if ((v75 & 1) != 0)
      goto LABEL_31;
    goto LABEL_28;
  }
  v65 = v92;
  sub_10000E660(v58, v92, &qword_10036A7F8);
  v66 = v60(v59, 1, v61);
  v64 = (uint64_t)v93;
  v63 = (uint64_t)v94;
  if (v66 == 1)
  {
    sub_100015704(v100, &qword_10036A7F8);
    v67 = v55;
LABEL_25:
    sub_100015704(v67, &qword_10036A7F8);
    sub_100004030(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_26;
  }
  v68 = v90;
  sub_100003E08(v59, v90, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v69 = sub_100064118(v65, v68);
  sub_100004030(v68, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015704(v100, &qword_10036A7F8);
  sub_100015704(v55, &qword_10036A7F8);
  v54 = v83;
  sub_100004030(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100015704(v99, &qword_10036A7F8);
  if ((v69 & 1) != 0)
    goto LABEL_20;
LABEL_28:
  v72 = 0;
  return v72 & 1;
}

uint64_t sub_100063EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v40 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_31;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_31;
  }
  v17 = v11[6];
  v18 = (_QWORD *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (_QWORD *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_31;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_31;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_31;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_31;
  }
  v27 = v11[8];
  v28 = (double *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 8);
  v30 = (double *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) != 0)
  {
    if (!v31)
      goto LABEL_31;
  }
  else
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_31;
  }
  v32 = v11[9];
  v33 = *(unsigned __int8 *)(a1 + v32);
  v34 = *(unsigned __int8 *)(a2 + v32);
  if (v33 == 2)
  {
    if (v34 == 2)
      goto LABEL_30;
LABEL_31:
    v37 = 0;
    return v37 & 1;
  }
  if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0)
    goto LABEL_31;
LABEL_30:
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35(v10, a1, v4);
  v35(v8, a2, v4);
  v36 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v37 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v36);
  v38 = *(void (**)(char *, uint64_t))(v5 + 8);
  v38(v8, v4);
  v38(v10, v4);
  return v37 & 1;
}

uint64_t sub_100064118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  char v27;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_15;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_15;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_15;
LABEL_13:
    v22 = v11[7];
    v23 = (double *)(a1 + v22);
    v24 = *(_BYTE *)(a1 + v22 + 8);
    v25 = (double *)(a2 + v22);
    v26 = *(unsigned __int8 *)(a2 + v22 + 8);
    if ((v24 & 1) != 0)
    {
      if (!v26)
        goto LABEL_15;
    }
    else
    {
      if (*v23 != *v25)
        LOBYTE(v26) = 1;
      if ((v26 & 1) != 0)
        goto LABEL_15;
    }
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    v30 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v30);
    v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    v31(v8, v4);
    v31(v10, v4);
    return v27 & 1;
  }
  if (v21)
    goto LABEL_13;
LABEL_15:
  v27 = 0;
  return v27 & 1;
}

uint64_t sub_1000642C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  char v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *);
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  v4 = type metadata accessor for UnknownStorage(0);
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  v5 = __chkstk_darwin(v4);
  v46 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v45 = (char *)&v45 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v51 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10036DF10);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036A7F8);
  v15 = __chkstk_darwin(v14);
  v52 = (uint64_t)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v45 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v45 - v20;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  v23 = *(int *)(v22 + 20);
  v49 = a1;
  sub_10000E660(a1 + v23, (uint64_t)v21, &qword_10036A7F8);
  v24 = *(int *)(v22 + 20);
  v50 = a2;
  sub_10000E660(a2 + v24, (uint64_t)v19, &qword_10036A7F8);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v21, (uint64_t)v13, &qword_10036A7F8);
  sub_10000E660((uint64_t)v19, v25, &qword_10036A7F8);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) != 1)
  {
    v27 = (uint64_t)v51;
    v28 = v52;
    sub_10000E660((uint64_t)v13, v52, &qword_10036A7F8);
    if (v26(v25, 1, v8) != 1)
    {
      sub_100003E08(v25, v27, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      v31 = sub_100064118(v28, v27);
      sub_100004030(v27, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      sub_100015704((uint64_t)v19, &qword_10036A7F8);
      sub_100015704((uint64_t)v21, &qword_10036A7F8);
      sub_100004030(v28, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      sub_100015704((uint64_t)v13, &qword_10036A7F8);
      if ((v31 & 1) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    sub_100015704((uint64_t)v19, &qword_10036A7F8);
    sub_100015704((uint64_t)v21, &qword_10036A7F8);
    sub_100004030(v28, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_6:
    sub_100015704((uint64_t)v13, &qword_10036DF10);
    goto LABEL_7;
  }
  sub_100015704((uint64_t)v19, &qword_10036A7F8);
  sub_100015704((uint64_t)v21, &qword_10036A7F8);
  if (v26(v25, 1, v8) != 1)
    goto LABEL_6;
  sub_100015704((uint64_t)v13, &qword_10036A7F8);
LABEL_10:
  v32 = *(int *)(v22 + 24);
  v33 = v50;
  v34 = (_DWORD *)(v49 + v32);
  v35 = *(_BYTE *)(v49 + v32 + 4);
  v36 = (_DWORD *)(v50 + v32);
  v37 = *(unsigned __int8 *)(v50 + v32 + 4);
  if ((v35 & 1) != 0)
  {
    if (v37)
    {
LABEL_16:
      v39 = v47;
      v38 = v48;
      v40 = *(void (**)(char *))(v47 + 16);
      v41 = v45;
      v40(v45);
      v42 = v46;
      ((void (*)(char *, uint64_t, uint64_t))v40)(v46, v33, v38);
      v43 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v29 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v38, v43);
      v44 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44(v42, v38);
      v44(v41, v38);
      return v29 & 1;
    }
  }
  else
  {
    if (*v34 != *v36)
      LOBYTE(v37) = 1;
    if ((v37 & 1) == 0)
      goto LABEL_16;
  }
LABEL_7:
  v29 = 0;
  return v29 & 1;
}

uint64_t sub_1000646C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  char v19;
  _DWORD *v20;
  int v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v27 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_9;
LABEL_7:
    v17 = *(int *)(v11 + 24);
    v18 = (_DWORD *)(a1 + v17);
    v19 = *(_BYTE *)(a1 + v17 + 4);
    v20 = (_DWORD *)(a2 + v17);
    v21 = *(unsigned __int8 *)(a2 + v17 + 4);
    if ((v19 & 1) != 0)
    {
      if (!v21)
        goto LABEL_9;
    }
    else
    {
      if (*v18 != *v20)
        LOBYTE(v21) = 1;
      if ((v21 & 1) != 0)
        goto LABEL_9;
    }
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v10, a1, v4);
    v23(v8, a2, v4);
    v24 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v24);
    v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v8, v4);
    v25(v10, v4);
    return v22 & 1;
  }
  if (v16)
    goto LABEL_7;
LABEL_9:
  v22 = 0;
  return v22 & 1;
}

uint64_t sub_100064844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  _DWORD *v27;
  char v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  char v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;

  v4 = type metadata accessor for UnknownStorage(0);
  v58 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v57 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v56 = (char *)&v51 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v55 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10036DF30);
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036A7D8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v51 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v51 - v21;
  v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v24 = a2;
  v25 = v23;
  v26 = v23[5];
  v27 = (_DWORD *)(a1 + v26);
  v28 = *(_BYTE *)(a1 + v26 + 4);
  v29 = (_DWORD *)(v24 + v26);
  v30 = *(unsigned __int8 *)(v24 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      goto LABEL_18;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      goto LABEL_18;
  }
  v54 = v4;
  v31 = v23[6];
  v32 = *(unsigned __int8 *)(a1 + v31);
  v33 = *(unsigned __int8 *)(v24 + v31);
  if (v32 == 5)
  {
    if (v33 != 5)
      goto LABEL_18;
LABEL_12:
    v35 = v23[7];
    v52 = a1;
    v36 = a1 + v35;
    v37 = v24;
    sub_10000E660(v36, (uint64_t)v22, &qword_10036A7D8);
    v38 = v25[7];
    v53 = v37;
    sub_10000E660(v37 + v38, (uint64_t)v20, &qword_10036A7D8);
    v39 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10036A7D8);
    sub_10000E660((uint64_t)v20, v39, &qword_10036A7D8);
    v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v40((uint64_t)v13, 1, v8) == 1)
    {
      sub_100015704((uint64_t)v20, &qword_10036A7D8);
      sub_100015704((uint64_t)v22, &qword_10036A7D8);
      if (v40(v39, 1, v8) == 1)
      {
        sub_100015704((uint64_t)v13, &qword_10036A7D8);
LABEL_21:
        v44 = v58;
        v45 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
        v46 = v56;
        v47 = v54;
        v45(v56, v52, v54);
        v48 = v57;
        v45(v57, v53, v47);
        v49 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v34 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v48, v47, v49);
        v50 = *(void (**)(char *, uint64_t))(v44 + 8);
        v50(v48, v47);
        v50(v46, v47);
        return v34 & 1;
      }
    }
    else
    {
      sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10036A7D8);
      if (v40(v39, 1, v8) != 1)
      {
        v42 = v55;
        sub_100003E08(v39, v55, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        v43 = sub_1000646C8((uint64_t)v17, v42);
        sub_100004030(v42, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        sub_100015704((uint64_t)v20, &qword_10036A7D8);
        sub_100015704((uint64_t)v22, &qword_10036A7D8);
        sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        sub_100015704((uint64_t)v13, &qword_10036A7D8);
        if ((v43 & 1) != 0)
          goto LABEL_21;
LABEL_18:
        v34 = 0;
        return v34 & 1;
      }
      sub_100015704((uint64_t)v20, &qword_10036A7D8);
      sub_100015704((uint64_t)v22, &qword_10036A7D8);
      sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    }
    sub_100015704((uint64_t)v13, &qword_10036DF30);
    goto LABEL_18;
  }
  v34 = 0;
  if (v33 != 5 && v32 == v33)
    goto LABEL_12;
  return v34 & 1;
}

uint64_t sub_100064C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  char v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v4 = type metadata accessor for UnknownStorage(0);
  v67 = *(_QWORD *)(v4 - 8);
  v68 = v4;
  v5 = __chkstk_darwin(v4);
  v66 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v65 = (char *)&v63 - v7;
  v75 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v72 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v64 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_1000039AC(&qword_10036DF28);
  __chkstk_darwin(v71);
  v76 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000039AC(&qword_10036A7E8);
  v11 = __chkstk_darwin(v10);
  v69 = (uint64_t)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v73 = (uint64_t)&v63 - v14;
  __chkstk_darwin(v13);
  v74 = (uint64_t)&v63 - v15;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v70 = (uint64_t)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000039AC(&qword_10036DF18);
  __chkstk_darwin(v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000039AC(&qword_10036A7E0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v63 - v27;
  __chkstk_darwin(v26);
  v30 = (char *)&v63 - v29;
  v31 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  v32 = v31;
  v33 = *(int *)(v31 + 20);
  v77 = a1;
  v78 = a2;
  v34 = (_DWORD *)(a1 + v33);
  v35 = *(_BYTE *)(a1 + v33 + 4);
  v36 = (_DWORD *)(a2 + v33);
  v37 = *(unsigned __int8 *)(a2 + v33 + 4);
  if ((v35 & 1) != 0)
  {
    if (!v37)
      goto LABEL_21;
  }
  else
  {
    if (*v34 != *v36)
      LOBYTE(v37) = 1;
    if ((v37 & 1) != 0)
      goto LABEL_21;
  }
  sub_10000E660(v77 + *(int *)(v31 + 24), (uint64_t)v30, &qword_10036A7E0);
  sub_10000E660(v78 + *(int *)(v32 + 24), (uint64_t)v28, &qword_10036A7E0);
  v38 = (uint64_t)&v21[*(int *)(v19 + 48)];
  sub_10000E660((uint64_t)v30, (uint64_t)v21, &qword_10036A7E0);
  sub_10000E660((uint64_t)v28, v38, &qword_10036A7E0);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v39((uint64_t)v21, 1, v16) != 1)
  {
    sub_10000E660((uint64_t)v21, (uint64_t)v25, &qword_10036A7E0);
    if (v39(v38, 1, v16) != 1)
    {
      v42 = v70;
      sub_100003E08(v38, v70, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      v43 = sub_100064844((uint64_t)v25, v42);
      sub_100004030(v42, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      sub_100015704((uint64_t)v28, &qword_10036A7E0);
      sub_100015704((uint64_t)v30, &qword_10036A7E0);
      sub_100004030((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      sub_100015704((uint64_t)v21, &qword_10036A7E0);
      if ((v43 & 1) == 0)
        goto LABEL_21;
      goto LABEL_14;
    }
    sub_100015704((uint64_t)v28, &qword_10036A7E0);
    sub_100015704((uint64_t)v30, &qword_10036A7E0);
    sub_100004030((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_12:
    v40 = &qword_10036DF18;
    v41 = (uint64_t)v21;
LABEL_20:
    sub_100015704(v41, v40);
    goto LABEL_21;
  }
  sub_100015704((uint64_t)v28, &qword_10036A7E0);
  sub_100015704((uint64_t)v30, &qword_10036A7E0);
  if (v39(v38, 1, v16) != 1)
    goto LABEL_12;
  sub_100015704((uint64_t)v21, &qword_10036A7E0);
LABEL_14:
  v44 = v74;
  sub_10000E660(v77 + *(int *)(v32 + 28), v74, &qword_10036A7E8);
  v45 = v78 + *(int *)(v32 + 28);
  v46 = v73;
  sub_10000E660(v45, v73, &qword_10036A7E8);
  v47 = v76;
  v48 = v76 + *(int *)(v71 + 48);
  sub_10000E660(v44, v76, &qword_10036A7E8);
  sub_10000E660(v46, v48, &qword_10036A7E8);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  v50 = v75;
  if (v49(v47, 1, v75) == 1)
  {
    sub_100015704(v46, &qword_10036A7E8);
    sub_100015704(v44, &qword_10036A7E8);
    if (v49(v48, 1, v50) == 1)
    {
      sub_100015704(v47, &qword_10036A7E8);
LABEL_24:
      v57 = v67;
      v56 = v68;
      v58 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      v59 = v65;
      v58(v65, v77, v68);
      v60 = v66;
      v58(v66, v78, v56);
      v61 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v52 = dispatch thunk of static Equatable.== infix(_:_:)(v59, v60, v56, v61);
      v62 = *(void (**)(char *, uint64_t))(v57 + 8);
      v62(v60, v56);
      v62(v59, v56);
      return v52 & 1;
    }
    goto LABEL_19;
  }
  v51 = v69;
  sub_10000E660(v47, v69, &qword_10036A7E8);
  if (v49(v48, 1, v50) == 1)
  {
    sub_100015704(v46, &qword_10036A7E8);
    sub_100015704(v44, &qword_10036A7E8);
    sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
LABEL_19:
    v40 = &qword_10036DF28;
    v41 = v47;
    goto LABEL_20;
  }
  v54 = v64;
  sub_100003E08(v48, v64, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  v55 = sub_100061CF4(v51, v54);
  sub_100004030(v54, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  sub_100015704(v46, &qword_10036A7E8);
  sub_100015704(v44, &qword_10036A7E8);
  sub_100004030(v51, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  sub_100015704(v47, &qword_10036A7E8);
  if ((v55 & 1) != 0)
    goto LABEL_24;
LABEL_21:
  v52 = 0;
  return v52 & 1;
}

uint64_t sub_10006534C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v31;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v31 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_20;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_20;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_20;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_20;
  }
  v22 = v11[7];
  v23 = *(unsigned __int8 *)(a1 + v22);
  v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 != 6)
  {
    if (v24 != 6 && v23 == v24)
      goto LABEL_15;
LABEL_20:
    v27 = 0;
    return v27 & 1;
  }
  if (v24 != 6)
    goto LABEL_20;
LABEL_15:
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v25(v10, a1, v4);
  v25(v8, a2, v4);
  v26 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v26);
  v28 = *(void (**)(char *, uint64_t))(v5 + 8);
  v28(v8, v4);
  v28(v10, v4);
  return v27 & 1;
}

uint64_t sub_1000654F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v31 - v11;
  v13 = (int *)a3(0);
  v14 = v13[5];
  v15 = *(unsigned __int8 *)(a1 + v14);
  v16 = *(unsigned __int8 *)(a2 + v14);
  if (v15 == 2)
  {
    if (v16 != 2)
      goto LABEL_22;
  }
  else if (v16 == 2 || ((((v16 & 1) == 0) ^ v15) & 1) == 0)
  {
    goto LABEL_22;
  }
  v17 = v13[6];
  v18 = *(unsigned __int8 *)(a1 + v17);
  v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2)
      goto LABEL_22;
  }
  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_22;
  }
  v20 = v13[7];
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2)
      goto LABEL_22;
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_22;
  }
  v23 = v13[8];
  v24 = *(unsigned __int8 *)(a1 + v23);
  v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 2)
  {
    if (v25 == 2)
      goto LABEL_21;
LABEL_22:
    v28 = 0;
    return v28 & 1;
  }
  if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0)
    goto LABEL_22;
LABEL_21:
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v26(v12, a1, v6);
  v26(v10, a2, v6);
  v27 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v28 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v27);
  v29 = *(void (**)(char *, uint64_t))(v7 + 8);
  v29(v10, v6);
  v29(v12, v6);
  return v28 & 1;
}

uint64_t sub_1000656F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  double *v15;
  char v16;
  double *v17;
  int v18;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  double *v25;
  char v26;
  double *v27;
  int v28;
  char v29;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v34 - v11;
  v13 = (int *)a3(0);
  v14 = v13[5];
  v15 = (double *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 8);
  v17 = (double *)(a2 + v14);
  v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) != 0)
  {
    if (!v18)
      goto LABEL_15;
  }
  else
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_15;
  }
  v19 = v13[6];
  v20 = (double *)(a1 + v19);
  v21 = *(_BYTE *)(a1 + v19 + 8);
  v22 = (double *)(a2 + v19);
  v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) == 0)
  {
    if (*v20 != *v22)
      LOBYTE(v23) = 1;
    if ((v23 & 1) != 0)
      goto LABEL_15;
LABEL_13:
    v24 = v13[7];
    v25 = (double *)(a1 + v24);
    v26 = *(_BYTE *)(a1 + v24 + 8);
    v27 = (double *)(a2 + v24);
    v28 = *(unsigned __int8 *)(a2 + v24 + 8);
    if ((v26 & 1) != 0)
    {
      if (!v28)
        goto LABEL_15;
    }
    else
    {
      if (*v25 != *v27)
        LOBYTE(v28) = 1;
      if ((v28 & 1) != 0)
        goto LABEL_15;
    }
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v31(v12, a1, v6);
    v31(v10, a2, v6);
    v32 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v29 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v32);
    v33 = *(void (**)(char *, uint64_t))(v7 + 8);
    v33(v10, v6);
    v33(v12, v6);
    return v29 & 1;
  }
  if (v23)
    goto LABEL_13;
LABEL_15:
  v29 = 0;
  return v29 & 1;
}

uint64_t sub_1000658A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  double *v15;
  char v16;
  double *v17;
  int v18;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  v13 = (int *)a3(0);
  v14 = v13[5];
  v15 = (double *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 8);
  v17 = (double *)(a2 + v14);
  v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) != 0)
  {
    if (!v18)
      goto LABEL_19;
  }
  else
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_19;
  }
  v19 = v13[6];
  v20 = (double *)(a1 + v19);
  v21 = *(_BYTE *)(a1 + v19 + 8);
  v22 = (double *)(a2 + v19);
  v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) != 0)
  {
    if (!v23)
      goto LABEL_19;
  }
  else
  {
    if (*v20 != *v22)
      LOBYTE(v23) = 1;
    if ((v23 & 1) != 0)
      goto LABEL_19;
  }
  v24 = v13[7];
  v25 = *(unsigned __int8 *)(a1 + v24);
  v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 == 2)
      goto LABEL_18;
LABEL_19:
    v29 = 0;
    return v29 & 1;
  }
  if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
    goto LABEL_19;
LABEL_18:
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v27(v12, a1, v6);
  v27(v10, a2, v6);
  v28 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v29 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v28);
  v30 = *(void (**)(char *, uint64_t))(v7 + 8);
  v30(v10, v6);
  v30(v12, v6);
  return v29 & 1;
}

uint64_t sub_100065A60(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v24 - v13;
  v15 = *(int *)(a3(0) + 20);
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(*(_QWORD *)(a1 + v15)),
        swift_retain(v17),
        v18 = a4(v16, v17),
        swift_release(v17),
        swift_release(v16),
        (v18 & 1) != 0))
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    v20 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v21 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v12, v8, v20);
    v22 = *(void (**)(char *, uint64_t))(v9 + 8);
    v22(v12, v8);
    v22(v14, v8);
  }
  else
  {
    v21 = 0;
  }
  return v21 & 1;
}

uint64_t sub_100065BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  float *v13;
  char v14;
  float *v15;
  int v16;
  uint64_t v17;
  float *v18;
  char v19;
  float *v20;
  int v21;
  uint64_t v22;
  float *v23;
  char v24;
  float *v25;
  int v26;
  uint64_t v27;
  float *v28;
  char v29;
  float *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v40 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v12 = v11[5];
  v13 = (float *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 4);
  v15 = (float *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_31;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_31;
  }
  v17 = v11[6];
  v18 = (float *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 4);
  v20 = (float *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_31;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_31;
  }
  v22 = v11[7];
  v23 = (float *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 4);
  v25 = (float *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_31;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_31;
  }
  v27 = v11[8];
  v28 = (float *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 4);
  v30 = (float *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if ((v29 & 1) != 0)
  {
    if (!v31)
      goto LABEL_31;
  }
  else
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_31;
  }
  v32 = v11[9];
  v33 = *(unsigned __int8 *)(a1 + v32);
  v34 = *(unsigned __int8 *)(a2 + v32);
  if (v33 == 2)
  {
    if (v34 == 2)
      goto LABEL_30;
LABEL_31:
    v37 = 0;
    return v37 & 1;
  }
  if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0)
    goto LABEL_31;
LABEL_30:
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35(v10, a1, v4);
  v35(v8, a2, v4);
  v36 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v37 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v36);
  v38 = *(void (**)(char *, uint64_t))(v5 + 8);
  v38(v8, v4);
  v38(v10, v4);
  return v37 & 1;
}

uint64_t sub_100065DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  char v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v97 = type metadata accessor for UnknownStorage(0);
  v87 = *(_QWORD *)(v97 - 8);
  v4 = __chkstk_darwin(v97);
  v86 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v85 = (char *)&v83 - v6;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v90 = *(_QWORD *)(v7 - 8);
  v91 = v7;
  __chkstk_darwin(v7);
  v84 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_1000039AC(&qword_10036DF70);
  __chkstk_darwin(v89);
  v92 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000039AC(&qword_10036A7B8);
  v11 = __chkstk_darwin(v10);
  v96 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v94 = (char *)&v83 - v14;
  __chkstk_darwin(v13);
  v95 = (char *)&v83 - v15;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v99 = *(_QWORD *)(v16 - 8);
  v100 = v16;
  __chkstk_darwin(v16);
  v88 = (uint64_t)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_1000039AC(&qword_10036DF78);
  __chkstk_darwin(v98);
  v101 = (uint64_t)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000039AC(&qword_10036A7B0);
  v20 = __chkstk_darwin(v19);
  v93 = (uint64_t)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v102 = (uint64_t)&v83 - v23;
  __chkstk_darwin(v22);
  v103 = (uint64_t)&v83 - v24;
  v25 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1000039AC(&qword_10036DF80);
  __chkstk_darwin(v29);
  v31 = (char *)&v83 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1000039AC(&qword_10036A7A8);
  v33 = __chkstk_darwin(v32);
  v35 = (char *)&v83 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v83 - v37;
  __chkstk_darwin(v36);
  v40 = (char *)&v83 - v39;
  v41 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  v42 = *(int *)(v41 + 20);
  v104 = a1;
  v105 = a2;
  v43 = (_QWORD *)(a1 + v42);
  v44 = *(_BYTE *)(a1 + v42 + 8);
  v45 = (_QWORD *)(a2 + v42);
  v46 = *(unsigned __int8 *)(a2 + v42 + 8);
  if ((v44 & 1) != 0)
  {
    if (!v46)
      goto LABEL_22;
  }
  else
  {
    if (*v43 != *v45)
      LOBYTE(v46) = 1;
    if ((v46 & 1) != 0)
      goto LABEL_22;
  }
  v47 = v41;
  sub_10000E660(v104 + *(int *)(v41 + 24), (uint64_t)v40, &qword_10036A7A8);
  v83 = v47;
  sub_10000E660(v105 + *(int *)(v47 + 24), (uint64_t)v38, &qword_10036A7A8);
  v48 = (uint64_t)&v31[*(int *)(v29 + 48)];
  sub_10000E660((uint64_t)v40, (uint64_t)v31, &qword_10036A7A8);
  sub_10000E660((uint64_t)v38, v48, &qword_10036A7A8);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v49((uint64_t)v31, 1, v25) == 1)
  {
    sub_100015704((uint64_t)v38, &qword_10036A7A8);
    sub_100015704((uint64_t)v40, &qword_10036A7A8);
    if (v49(v48, 1, v25) == 1)
    {
      sub_100015704((uint64_t)v31, &qword_10036A7A8);
      goto LABEL_15;
    }
LABEL_12:
    v50 = &qword_10036DF80;
LABEL_13:
    v51 = (uint64_t)v31;
LABEL_21:
    sub_100015704(v51, v50);
    goto LABEL_22;
  }
  sub_10000E660((uint64_t)v31, (uint64_t)v35, &qword_10036A7A8);
  if (v49(v48, 1, v25) == 1)
  {
    sub_100015704((uint64_t)v38, &qword_10036A7A8);
    sub_100015704((uint64_t)v40, &qword_10036A7A8);
    sub_100004030((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
    goto LABEL_12;
  }
  sub_100003E08(v48, (uint64_t)v28, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  v52 = sub_100065BD0((uint64_t)v35, (uint64_t)v28);
  sub_100004030((uint64_t)v28, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  sub_100015704((uint64_t)v38, &qword_10036A7A8);
  sub_100015704((uint64_t)v40, &qword_10036A7A8);
  sub_100004030((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  sub_100015704((uint64_t)v31, &qword_10036A7A8);
  if ((v52 & 1) == 0)
    goto LABEL_22;
LABEL_15:
  v53 = v83;
  v54 = v103;
  sub_10000E660(v104 + *(int *)(v83 + 28), v103, &qword_10036A7B0);
  v55 = v102;
  sub_10000E660(v105 + *(int *)(v53 + 28), v102, &qword_10036A7B0);
  v56 = v101;
  v57 = v101 + *(int *)(v98 + 48);
  sub_10000E660(v54, v101, &qword_10036A7B0);
  sub_10000E660(v55, v57, &qword_10036A7B0);
  v58 = v100;
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 48);
  if (v59(v56, 1, v100) != 1)
  {
    v65 = v93;
    sub_10000E660(v56, v93, &qword_10036A7B0);
    v66 = v59(v57, 1, v58);
    v62 = (uint64_t)v96;
    v61 = v97;
    v64 = (uint64_t)v94;
    v63 = (uint64_t)v95;
    if (v66 != 1)
    {
      v69 = v88;
      sub_100003E08(v57, v88, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      v70 = sub_100060DA8(v65, v69);
      sub_100004030(v69, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      sub_100015704(v102, &qword_10036A7B0);
      sub_100015704(v103, &qword_10036A7B0);
      sub_100004030(v65, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      sub_100015704(v56, &qword_10036A7B0);
      if ((v70 & 1) == 0)
        goto LABEL_22;
      goto LABEL_25;
    }
    sub_100015704(v102, &qword_10036A7B0);
    sub_100015704(v103, &qword_10036A7B0);
    sub_100004030(v65, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_20:
    v50 = &qword_10036DF78;
    v51 = v56;
    goto LABEL_21;
  }
  sub_100015704(v55, &qword_10036A7B0);
  sub_100015704(v54, &qword_10036A7B0);
  v60 = v59(v57, 1, v58);
  v62 = (uint64_t)v96;
  v61 = v97;
  v64 = (uint64_t)v94;
  v63 = (uint64_t)v95;
  if (v60 != 1)
    goto LABEL_20;
  sub_100015704(v56, &qword_10036A7B0);
LABEL_25:
  v71 = v83;
  sub_10000E660(v104 + *(int *)(v83 + 32), v63, &qword_10036A7B8);
  sub_10000E660(v105 + *(int *)(v71 + 32), v64, &qword_10036A7B8);
  v31 = v92;
  v72 = (uint64_t)&v92[*(int *)(v89 + 48)];
  sub_10000E660(v63, (uint64_t)v92, &qword_10036A7B8);
  sub_10000E660(v64, v72, &qword_10036A7B8);
  v73 = v91;
  v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
  if (v74((uint64_t)v31, 1, v91) == 1)
  {
    sub_100015704(v64, &qword_10036A7B8);
    sub_100015704(v63, &qword_10036A7B8);
    if (v74(v72, 1, v73) == 1)
    {
      sub_100015704((uint64_t)v31, &qword_10036A7B8);
LABEL_32:
      v77 = v87;
      v78 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
      v79 = v85;
      v78(v85, v104, v61);
      v80 = v86;
      v78(v86, v105, v61);
      v81 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v67 = dispatch thunk of static Equatable.== infix(_:_:)(v79, v80, v61, v81);
      v82 = *(void (**)(char *, uint64_t))(v77 + 8);
      v82(v80, v61);
      v82(v79, v61);
      return v67 & 1;
    }
    goto LABEL_30;
  }
  sub_10000E660((uint64_t)v31, v62, &qword_10036A7B8);
  if (v74(v72, 1, v73) == 1)
  {
    sub_100015704(v64, &qword_10036A7B8);
    sub_100015704(v63, &qword_10036A7B8);
    sub_100004030(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
LABEL_30:
    v50 = &qword_10036DF70;
    goto LABEL_13;
  }
  v75 = v84;
  sub_100003E08(v72, v84, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  v76 = sub_1000604B0(v62, v75);
  sub_100004030(v75, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  sub_100015704(v64, &qword_10036A7B8);
  sub_100015704(v63, &qword_10036A7B8);
  sub_100004030(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  sub_100015704((uint64_t)v31, &qword_10036A7B8);
  if ((v76 & 1) != 0)
    goto LABEL_32;
LABEL_22:
  v67 = 0;
  return v67 & 1;
}

uint64_t sub_10006677C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  char v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = type metadata accessor for UnknownStorage(0);
  v50 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v49 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v48 = (char *)&v45 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v47 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10036DFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036A700);
  v15 = __chkstk_darwin(v14);
  v51 = (uint64_t)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v45 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v45 - v20;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v23 = v22;
  v24 = *(int *)(v22 + 20);
  v25 = (_DWORD *)(a1 + v24);
  v26 = *(_BYTE *)(a1 + v24 + 4);
  v52 = a2;
  v27 = (_DWORD *)(a2 + v24);
  v28 = *(unsigned __int8 *)(a2 + v24 + 4);
  if ((v26 & 1) != 0)
  {
    if (!v28)
      goto LABEL_13;
  }
  else
  {
    if (*v25 != *v27)
      LOBYTE(v28) = 1;
    if ((v28 & 1) != 0)
      goto LABEL_13;
  }
  v46 = v4;
  v29 = a1;
  sub_10000E660(a1 + *(int *)(v22 + 24), (uint64_t)v21, &qword_10036A700);
  sub_10000E660(v52 + *(int *)(v23 + 24), (uint64_t)v19, &qword_10036A700);
  v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v21, (uint64_t)v13, &qword_10036A700);
  sub_10000E660((uint64_t)v19, v30, &qword_10036A700);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v19, &qword_10036A700);
    sub_100015704((uint64_t)v21, &qword_10036A700);
    v32 = v31(v30, 1, v8);
    v33 = v46;
    if (v32 == 1)
    {
      sub_100015704((uint64_t)v13, &qword_10036A700);
LABEL_16:
      v39 = v50;
      v40 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      v41 = v48;
      v40(v48, v29, v33);
      v42 = v49;
      v40(v49, v52, v33);
      v43 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v33, v43);
      v44 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44(v42, v33);
      v44(v41, v33);
      return v35 & 1;
    }
    goto LABEL_12;
  }
  v34 = v51;
  sub_10000E660((uint64_t)v13, v51, &qword_10036A700);
  if (v31(v30, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v19, &qword_10036A700);
    sub_100015704((uint64_t)v21, &qword_10036A700);
    sub_100004030(v34, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
LABEL_12:
    sub_100015704((uint64_t)v13, &qword_10036DFF0);
    goto LABEL_13;
  }
  v37 = v47;
  sub_100003E08(v30, v47, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  v38 = sub_1000674E4(v34, v37);
  sub_100004030(v37, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  sub_100015704((uint64_t)v19, &qword_10036A700);
  sub_100015704((uint64_t)v21, &qword_10036A700);
  sub_100004030(v34, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  sub_100015704((uint64_t)v13, &qword_10036A700);
  v33 = v46;
  if ((v38 & 1) != 0)
    goto LABEL_16;
LABEL_13:
  v35 = 0;
  return v35 & 1;
}

uint64_t sub_100066B98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  char v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  char v34;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _DWORD *v39;
  char v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  char v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  _DWORD *v49;
  char v50;
  _DWORD *v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  char v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  char v60;
  _DWORD *v61;
  int v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  int *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v4 = type metadata accessor for UnknownStorage(0);
  v75 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v74 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v73 = (char *)&v70 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v76 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10036DFE8);
  __chkstk_darwin(v11);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036A708);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v70 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v70 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v24 = *(int *)(v23 + 20);
  v25 = a1;
  v26 = (_DWORD *)(a1 + v24);
  v27 = *(_BYTE *)(a1 + v24 + 4);
  v77 = a2;
  v28 = (_DWORD *)(a2 + v24);
  v29 = *(unsigned __int8 *)(a2 + v24 + 4);
  if ((v27 & 1) != 0)
  {
    if (!v29)
      goto LABEL_13;
  }
  else
  {
    if (*v26 != *v28)
      LOBYTE(v29) = 1;
    if ((v29 & 1) != 0)
      goto LABEL_13;
  }
  v71 = v4;
  v30 = a1;
  v31 = (int *)v23;
  sub_10000E660(v25 + *(int *)(v23 + 24), (uint64_t)v22, &qword_10036A708);
  v72 = v31;
  sub_10000E660(v77 + v31[6], (uint64_t)v20, &qword_10036A708);
  v32 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10036A708);
  sub_10000E660((uint64_t)v20, v32, &qword_10036A708);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v33((uint64_t)v13, 1, v8) != 1)
  {
    sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10036A708);
    if (v33(v32, 1, v8) != 1)
    {
      v36 = v76;
      sub_100003E08(v32, v76, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      v37 = sub_10006677C((uint64_t)v17, v36);
      sub_100004030(v36, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      sub_100015704((uint64_t)v20, &qword_10036A708);
      sub_100015704((uint64_t)v22, &qword_10036A708);
      sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      sub_100015704((uint64_t)v13, &qword_10036A708);
      if ((v37 & 1) == 0)
        goto LABEL_13;
      goto LABEL_16;
    }
    sub_100015704((uint64_t)v20, &qword_10036A708);
    sub_100015704((uint64_t)v22, &qword_10036A708);
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_12:
    sub_100015704((uint64_t)v13, &qword_10036DFE8);
    goto LABEL_13;
  }
  sub_100015704((uint64_t)v20, &qword_10036A708);
  sub_100015704((uint64_t)v22, &qword_10036A708);
  if (v33(v32, 1, v8) != 1)
    goto LABEL_12;
  sub_100015704((uint64_t)v13, &qword_10036A708);
LABEL_16:
  v38 = v72[7];
  v39 = (_DWORD *)(v30 + v38);
  v40 = *(_BYTE *)(v30 + v38 + 4);
  v41 = (_DWORD *)(v77 + v38);
  v42 = *(unsigned __int8 *)(v77 + v38 + 4);
  if ((v40 & 1) != 0)
  {
    if (!v42)
      goto LABEL_13;
  }
  else
  {
    if (*v39 != *v41)
      LOBYTE(v42) = 1;
    if ((v42 & 1) != 0)
      goto LABEL_13;
  }
  v43 = v72[8];
  v44 = (_DWORD *)(v30 + v43);
  v45 = *(_BYTE *)(v30 + v43 + 4);
  v46 = (_DWORD *)(v77 + v43);
  v47 = *(unsigned __int8 *)(v77 + v43 + 4);
  if ((v45 & 1) != 0)
  {
    if (!v47)
      goto LABEL_13;
  }
  else
  {
    if (*v44 != *v46)
      LOBYTE(v47) = 1;
    if ((v47 & 1) != 0)
      goto LABEL_13;
  }
  v48 = v72[9];
  v49 = (_DWORD *)(v30 + v48);
  v50 = *(_BYTE *)(v30 + v48 + 4);
  v51 = (_DWORD *)(v77 + v48);
  v52 = *(unsigned __int8 *)(v77 + v48 + 4);
  if ((v50 & 1) != 0)
  {
    if (!v52)
      goto LABEL_13;
  }
  else
  {
    if (*v49 != *v51)
      LOBYTE(v52) = 1;
    if ((v52 & 1) != 0)
      goto LABEL_13;
  }
  v53 = v72[10];
  v54 = (_DWORD *)(v30 + v53);
  v55 = *(_BYTE *)(v30 + v53 + 4);
  v56 = (_DWORD *)(v77 + v53);
  v57 = *(unsigned __int8 *)(v77 + v53 + 4);
  if ((v55 & 1) != 0)
  {
    if (!v57)
      goto LABEL_13;
  }
  else
  {
    if (*v54 != *v56)
      LOBYTE(v57) = 1;
    if ((v57 & 1) != 0)
      goto LABEL_13;
  }
  v58 = v72[11];
  v59 = (_DWORD *)(v30 + v58);
  v60 = *(_BYTE *)(v30 + v58 + 4);
  v61 = (_DWORD *)(v77 + v58);
  v62 = *(unsigned __int8 *)(v77 + v58 + 4);
  if ((v60 & 1) == 0)
  {
    if (*v59 != *v61)
      LOBYTE(v62) = 1;
    if ((v62 & 1) != 0)
      goto LABEL_13;
LABEL_46:
    v63 = v75;
    v64 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
    v65 = v73;
    v66 = v71;
    v64(v73, v30, v71);
    v67 = v74;
    v64(v74, v77, v66);
    v68 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v34 = dispatch thunk of static Equatable.== infix(_:_:)(v65, v67, v66, v68);
    v69 = *(void (**)(char *, uint64_t))(v63 + 8);
    v69(v67, v66);
    v69(v65, v66);
    return v34 & 1;
  }
  if (v62)
    goto LABEL_46;
LABEL_13:
  v34 = 0;
  return v34 & 1;
}

uint64_t sub_1000670C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  char v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = type metadata accessor for UnknownStorage(0);
  v50 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v49 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v48 = (char *)&v45 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v47 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10036DFE0);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036A710);
  v15 = __chkstk_darwin(v14);
  v51 = (uint64_t)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v45 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v45 - v20;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v23 = v22;
  v24 = *(int *)(v22 + 20);
  v25 = (_DWORD *)(a1 + v24);
  v26 = *(_BYTE *)(a1 + v24 + 4);
  v52 = a2;
  v27 = (_DWORD *)(a2 + v24);
  v28 = *(unsigned __int8 *)(a2 + v24 + 4);
  if ((v26 & 1) != 0)
  {
    if (!v28)
      goto LABEL_13;
  }
  else
  {
    if (*v25 != *v27)
      LOBYTE(v28) = 1;
    if ((v28 & 1) != 0)
      goto LABEL_13;
  }
  v46 = v4;
  v29 = a1;
  sub_10000E660(a1 + *(int *)(v22 + 24), (uint64_t)v21, &qword_10036A710);
  sub_10000E660(v52 + *(int *)(v23 + 24), (uint64_t)v19, &qword_10036A710);
  v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v21, (uint64_t)v13, &qword_10036A710);
  sub_10000E660((uint64_t)v19, v30, &qword_10036A710);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v19, &qword_10036A710);
    sub_100015704((uint64_t)v21, &qword_10036A710);
    v32 = v31(v30, 1, v8);
    v33 = v46;
    if (v32 == 1)
    {
      sub_100015704((uint64_t)v13, &qword_10036A710);
LABEL_16:
      v39 = v50;
      v40 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      v41 = v48;
      v40(v48, v29, v33);
      v42 = v49;
      v40(v49, v52, v33);
      v43 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v33, v43);
      v44 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44(v42, v33);
      v44(v41, v33);
      return v35 & 1;
    }
    goto LABEL_12;
  }
  v34 = v51;
  sub_10000E660((uint64_t)v13, v51, &qword_10036A710);
  if (v31(v30, 1, v8) == 1)
  {
    sub_100015704((uint64_t)v19, &qword_10036A710);
    sub_100015704((uint64_t)v21, &qword_10036A710);
    sub_100004030(v34, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_12:
    sub_100015704((uint64_t)v13, &qword_10036DFE0);
    goto LABEL_13;
  }
  v37 = v47;
  sub_100003E08(v30, v47, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  v38 = sub_100066B98(v34, v37);
  sub_100004030(v37, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  sub_100015704((uint64_t)v19, &qword_10036A710);
  sub_100015704((uint64_t)v21, &qword_10036A710);
  sub_100004030(v34, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  sub_100015704((uint64_t)v13, &qword_10036A710);
  v33 = v46;
  if ((v38 & 1) != 0)
    goto LABEL_16;
LABEL_13:
  v35 = 0;
  return v35 & 1;
}

uint64_t sub_1000674E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  char v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v26;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_DWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 4);
  v15 = (_DWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_14;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_14;
  }
  v17 = *(int *)(v11 + 24);
  v18 = *(unsigned __int8 *)(a1 + v17);
  v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 != 5)
  {
    if (v19 != 5 && v18 == v19)
      goto LABEL_9;
LABEL_14:
    v22 = 0;
    return v22 & 1;
  }
  if (v19 != 5)
    goto LABEL_14;
LABEL_9:
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v20(v10, a1, v4);
  v20(v8, a2, v4);
  v21 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v21);
  v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v8, v4);
  v23(v10, v4);
  return v22 & 1;
}

unint64_t sub_10006765C()
{
  unint64_t result;

  result = qword_10036A9E0;
  if (!qword_10036A9E0)
  {
    result = swift_getWitnessTable(&unk_1002C425C, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource);
    atomic_store(result, (unint64_t *)&qword_10036A9E0);
  }
  return result;
}

unint64_t sub_1000676A4()
{
  unint64_t result;

  result = qword_10036A9E8;
  if (!qword_10036A9E8)
  {
    result = swift_getWitnessTable(&unk_1002C4284, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource);
    atomic_store(result, (unint64_t *)&qword_10036A9E8);
  }
  return result;
}

unint64_t sub_1000676EC()
{
  unint64_t result;

  result = qword_10036A9F0;
  if (!qword_10036A9F0)
  {
    result = swift_getWitnessTable(&unk_1002C430C, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource);
    atomic_store(result, (unint64_t *)&qword_10036A9F0);
  }
  return result;
}

uint64_t sub_100067730()
{
  return sub_10000FFB4(&qword_10036A9F8, &qword_10036AA00);
}

unint64_t sub_100067758()
{
  unint64_t result;

  result = qword_10036AA08;
  if (!qword_10036AA08)
  {
    result = swift_getWitnessTable(&unk_1002C437C, &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem);
    atomic_store(result, (unint64_t *)&qword_10036AA08);
  }
  return result;
}

unint64_t sub_1000677A0()
{
  unint64_t result;

  result = qword_10036AA10;
  if (!qword_10036AA10)
  {
    result = swift_getWitnessTable(&unk_1002C43A4, &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem);
    atomic_store(result, (unint64_t *)&qword_10036AA10);
  }
  return result;
}

unint64_t sub_1000677E8()
{
  unint64_t result;

  result = qword_10036AA18;
  if (!qword_10036AA18)
  {
    result = swift_getWitnessTable(&unk_1002C442C, &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem);
    atomic_store(result, (unint64_t *)&qword_10036AA18);
  }
  return result;
}

uint64_t sub_10006782C()
{
  return sub_10000FFB4(&qword_10036AA20, &qword_10036AA28);
}

unint64_t sub_100067854()
{
  unint64_t result;

  result = qword_10036AA30;
  if (!qword_10036AA30)
  {
    result = swift_getWitnessTable(&unk_1002C449C, &type metadata for CLP_LogEntry_PrivateData_Band);
    atomic_store(result, (unint64_t *)&qword_10036AA30);
  }
  return result;
}

unint64_t sub_10006789C()
{
  unint64_t result;

  result = qword_10036AA38;
  if (!qword_10036AA38)
  {
    result = swift_getWitnessTable(&unk_1002C44C4, &type metadata for CLP_LogEntry_PrivateData_Band);
    atomic_store(result, (unint64_t *)&qword_10036AA38);
  }
  return result;
}

unint64_t sub_1000678E4()
{
  unint64_t result;

  result = qword_10036AA40;
  if (!qword_10036AA40)
  {
    result = swift_getWitnessTable(&unk_1002C454C, &type metadata for CLP_LogEntry_PrivateData_Band);
    atomic_store(result, (unint64_t *)&qword_10036AA40);
  }
  return result;
}

uint64_t sub_100067928()
{
  return sub_10000FFB4(&qword_10036AA48, &qword_10036AA50);
}

unint64_t sub_100067950()
{
  unint64_t result;

  result = qword_10036AA58;
  if (!qword_10036AA58)
  {
    result = swift_getWitnessTable(&unk_1002C45BC, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource);
    atomic_store(result, (unint64_t *)&qword_10036AA58);
  }
  return result;
}

unint64_t sub_100067998()
{
  unint64_t result;

  result = qword_10036AA60;
  if (!qword_10036AA60)
  {
    result = swift_getWitnessTable(&unk_1002C45E4, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource);
    atomic_store(result, (unint64_t *)&qword_10036AA60);
  }
  return result;
}

unint64_t sub_1000679E0()
{
  unint64_t result;

  result = qword_10036AA68;
  if (!qword_10036AA68)
  {
    result = swift_getWitnessTable(&unk_1002C466C, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource);
    atomic_store(result, (unint64_t *)&qword_10036AA68);
  }
  return result;
}

uint64_t sub_100067A24()
{
  return sub_10000FFB4(&qword_10036AA70, &qword_10036AA78);
}

unint64_t sub_100067A4C()
{
  unint64_t result;

  result = qword_10036AA80;
  if (!qword_10036AA80)
  {
    result = swift_getWitnessTable(&unk_1002C46DC, &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
    atomic_store(result, (unint64_t *)&qword_10036AA80);
  }
  return result;
}

unint64_t sub_100067A94()
{
  unint64_t result;

  result = qword_10036AA88;
  if (!qword_10036AA88)
  {
    result = swift_getWitnessTable(&unk_1002C4704, &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
    atomic_store(result, (unint64_t *)&qword_10036AA88);
  }
  return result;
}

unint64_t sub_100067ADC()
{
  unint64_t result;

  result = qword_10036AA90;
  if (!qword_10036AA90)
  {
    result = swift_getWitnessTable(&unk_1002C478C, &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
    atomic_store(result, (unint64_t *)&qword_10036AA90);
  }
  return result;
}

uint64_t sub_100067B20()
{
  return sub_10000FFB4(&qword_10036AA98, &qword_10036AAA0);
}

unint64_t sub_100067B48()
{
  unint64_t result;

  result = qword_10036AAA8;
  if (!qword_10036AAA8)
  {
    result = swift_getWitnessTable(&unk_1002C47FC, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator);
    atomic_store(result, (unint64_t *)&qword_10036AAA8);
  }
  return result;
}

unint64_t sub_100067B90()
{
  unint64_t result;

  result = qword_10036AAB0;
  if (!qword_10036AAB0)
  {
    result = swift_getWitnessTable(&unk_1002C4824, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator);
    atomic_store(result, (unint64_t *)&qword_10036AAB0);
  }
  return result;
}

unint64_t sub_100067BD8()
{
  unint64_t result;

  result = qword_10036AAB8;
  if (!qword_10036AAB8)
  {
    result = swift_getWitnessTable(&unk_1002C48AC, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator);
    atomic_store(result, (unint64_t *)&qword_10036AAB8);
  }
  return result;
}

uint64_t sub_100067C1C()
{
  return sub_10000FFB4(&qword_10036AAC0, &qword_10036AAC8);
}

unint64_t sub_100067C44()
{
  unint64_t result;

  result = qword_10036AAD0;
  if (!qword_10036AAD0)
  {
    result = swift_getWitnessTable(&unk_1002C491C, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource);
    atomic_store(result, (unint64_t *)&qword_10036AAD0);
  }
  return result;
}

unint64_t sub_100067C8C()
{
  unint64_t result;

  result = qword_10036AAD8;
  if (!qword_10036AAD8)
  {
    result = swift_getWitnessTable(&unk_1002C4944, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource);
    atomic_store(result, (unint64_t *)&qword_10036AAD8);
  }
  return result;
}

unint64_t sub_100067CD4()
{
  unint64_t result;

  result = qword_10036AAE0;
  if (!qword_10036AAE0)
  {
    result = swift_getWitnessTable(&unk_1002C49CC, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource);
    atomic_store(result, (unint64_t *)&qword_10036AAE0);
  }
  return result;
}

uint64_t sub_100067D18()
{
  return sub_10000FFB4(&qword_10036AAE8, &qword_10036AAF0);
}

unint64_t sub_100067D40()
{
  unint64_t result;

  result = qword_10036AAF8;
  if (!qword_10036AAF8)
  {
    result = swift_getWitnessTable(&unk_1002C4A3C, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication);
    atomic_store(result, (unint64_t *)&qword_10036AAF8);
  }
  return result;
}

unint64_t sub_100067D88()
{
  unint64_t result;

  result = qword_10036AB00;
  if (!qword_10036AB00)
  {
    result = swift_getWitnessTable(&unk_1002C4A64, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication);
    atomic_store(result, (unint64_t *)&qword_10036AB00);
  }
  return result;
}

unint64_t sub_100067DD0()
{
  unint64_t result;

  result = qword_10036AB08;
  if (!qword_10036AB08)
  {
    result = swift_getWitnessTable(&unk_1002C4AEC, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication);
    atomic_store(result, (unint64_t *)&qword_10036AB08);
  }
  return result;
}

uint64_t sub_100067E14()
{
  return sub_10000FFB4(&qword_10036AB10, &qword_10036AB18);
}

unint64_t sub_100067E3C()
{
  unint64_t result;

  result = qword_10036AB20;
  if (!qword_10036AB20)
  {
    result = swift_getWitnessTable(&unk_1002C4B5C, &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
    atomic_store(result, (unint64_t *)&qword_10036AB20);
  }
  return result;
}

unint64_t sub_100067E84()
{
  unint64_t result;

  result = qword_10036AB28;
  if (!qword_10036AB28)
  {
    result = swift_getWitnessTable(&unk_1002C4B84, &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
    atomic_store(result, (unint64_t *)&qword_10036AB28);
  }
  return result;
}

unint64_t sub_100067ECC()
{
  unint64_t result;

  result = qword_10036AB30;
  if (!qword_10036AB30)
  {
    result = swift_getWitnessTable(&unk_1002C4C0C, &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
    atomic_store(result, (unint64_t *)&qword_10036AB30);
  }
  return result;
}

uint64_t sub_100067F10()
{
  return sub_10000FFB4(&qword_10036AB38, &qword_10036AB40);
}

unint64_t sub_100067F38()
{
  unint64_t result;

  result = qword_10036AB48;
  if (!qword_10036AB48)
  {
    result = swift_getWitnessTable(&unk_1002C4C7C, &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
    atomic_store(result, (unint64_t *)&qword_10036AB48);
  }
  return result;
}

unint64_t sub_100067F80()
{
  unint64_t result;

  result = qword_10036AB50;
  if (!qword_10036AB50)
  {
    result = swift_getWitnessTable(&unk_1002C4CA4, &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
    atomic_store(result, (unint64_t *)&qword_10036AB50);
  }
  return result;
}

unint64_t sub_100067FC8()
{
  unint64_t result;

  result = qword_10036AB58;
  if (!qword_10036AB58)
  {
    result = swift_getWitnessTable(&unk_1002C4D2C, &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
    atomic_store(result, (unint64_t *)&qword_10036AB58);
  }
  return result;
}

uint64_t sub_10006800C()
{
  return sub_10000FFB4(&qword_10036AB60, &qword_10036AB68);
}

unint64_t sub_100068034()
{
  unint64_t result;

  result = qword_10036AB70;
  if (!qword_10036AB70)
  {
    result = swift_getWitnessTable(&unk_1002C4D9C, &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
    atomic_store(result, (unint64_t *)&qword_10036AB70);
  }
  return result;
}

unint64_t sub_10006807C()
{
  unint64_t result;

  result = qword_10036AB78;
  if (!qword_10036AB78)
  {
    result = swift_getWitnessTable(&unk_1002C4DC4, &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
    atomic_store(result, (unint64_t *)&qword_10036AB78);
  }
  return result;
}

unint64_t sub_1000680C4()
{
  unint64_t result;

  result = qword_10036AB80;
  if (!qword_10036AB80)
  {
    result = swift_getWitnessTable(&unk_1002C4E4C, &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
    atomic_store(result, (unint64_t *)&qword_10036AB80);
  }
  return result;
}

uint64_t sub_100068108()
{
  return sub_10000FFB4(&qword_10036AB88, &qword_10036AB90);
}

unint64_t sub_100068130()
{
  unint64_t result;

  result = qword_10036AB98;
  if (!qword_10036AB98)
  {
    result = swift_getWitnessTable(&unk_1002C4EBC, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint);
    atomic_store(result, (unint64_t *)&qword_10036AB98);
  }
  return result;
}

unint64_t sub_100068178()
{
  unint64_t result;

  result = qword_10036ABA0;
  if (!qword_10036ABA0)
  {
    result = swift_getWitnessTable(&unk_1002C4EE4, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint);
    atomic_store(result, (unint64_t *)&qword_10036ABA0);
  }
  return result;
}

unint64_t sub_1000681C0()
{
  unint64_t result;

  result = qword_10036ABA8;
  if (!qword_10036ABA8)
  {
    result = swift_getWitnessTable(&unk_1002C4F6C, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint);
    atomic_store(result, (unint64_t *)&qword_10036ABA8);
  }
  return result;
}

uint64_t sub_100068204()
{
  return sub_10000FFB4(&qword_10036ABB0, &qword_10036ABB8);
}

uint64_t sub_100068228()
{
  return sub_10000FD38(&qword_10036ABC0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&unk_1002C5294);
}

uint64_t sub_100068254()
{
  return sub_10000FD38(&qword_10036ABC8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&unk_1002C51BC);
}

uint64_t sub_100068280()
{
  return sub_10000FD38(&qword_10036A850, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&unk_1002C52BC);
}

uint64_t sub_1000682AC()
{
  return sub_10000FD38(&qword_10036ABD0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&unk_1002C52FC);
}

uint64_t sub_1000682D8()
{
  return sub_10000FD38(&qword_10036ABD8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&unk_1002C53FC);
}

uint64_t sub_100068304()
{
  return sub_10000FD38(&qword_10036ABE0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&unk_1002C5324);
}

uint64_t sub_100068330()
{
  return sub_10000FD38(&qword_10036A858, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&unk_1002C5424);
}

uint64_t sub_10006835C()
{
  return sub_10000FD38(&qword_10036ABE8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&unk_1002C5464);
}

uint64_t sub_100068388()
{
  return sub_10000FD38(&qword_10036ABF0, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&unk_1002C5564);
}

uint64_t sub_1000683B4()
{
  return sub_10000FD38(&qword_10036ABF8, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&unk_1002C548C);
}

uint64_t sub_1000683E0()
{
  return sub_10000FD38(&qword_10036A860, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&unk_1002C558C);
}

uint64_t sub_10006840C()
{
  return sub_10000FD38(&qword_10036AC00, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&unk_1002C55CC);
}

uint64_t sub_100068438()
{
  return sub_10000FD38(&qword_10036AC08, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&unk_1002C56CC);
}

uint64_t sub_100068464()
{
  return sub_10000FD38(&qword_10036AC10, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&unk_1002C55F4);
}

uint64_t sub_100068490()
{
  return sub_10000FD38(&qword_10036A868, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&unk_1002C56F4);
}

uint64_t sub_1000684BC()
{
  return sub_10000FD38(&qword_10036AC18, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&unk_1002C5734);
}

uint64_t sub_1000684E8()
{
  return sub_10000FD38(&qword_10036AC20, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&unk_1002C5834);
}

uint64_t sub_100068514()
{
  return sub_10000FD38(&qword_10036AC28, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&unk_1002C575C);
}

uint64_t sub_100068540()
{
  return sub_10000FD38(&qword_10036A870, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&unk_1002C585C);
}

uint64_t sub_10006856C()
{
  return sub_10000FD38(&qword_10036AC30, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&unk_1002C589C);
}

uint64_t sub_100068598()
{
  return sub_10000FD38(&qword_10036AC38, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&unk_1002C599C);
}

uint64_t sub_1000685C4()
{
  return sub_10000FD38(&qword_10036AC40, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&unk_1002C58C4);
}

uint64_t sub_1000685F0()
{
  return sub_10000FD38(&qword_10036A878, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&unk_1002C59C4);
}

uint64_t sub_10006861C()
{
  return sub_10000FD38(&qword_10036AC48, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&unk_1002C5A04);
}

uint64_t sub_100068648()
{
  return sub_10000FD38(&qword_10036AC50, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&unk_1002C5B04);
}

uint64_t sub_100068674()
{
  return sub_10000FD38(&qword_10036AC58, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&unk_1002C5A2C);
}

uint64_t sub_1000686A0()
{
  return sub_10000FD38(&qword_10036A880, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&unk_1002C5B2C);
}

uint64_t sub_1000686CC()
{
  return sub_10000FD38(&qword_10036AC60, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&unk_1002C5B6C);
}

uint64_t sub_1000686F8()
{
  return sub_10000FD38(&qword_10036AC68, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&unk_1002C5C6C);
}

uint64_t sub_100068724()
{
  return sub_10000FD38(&qword_10036AC70, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&unk_1002C5B94);
}

uint64_t sub_100068750()
{
  return sub_10000FD38(&qword_10036A888, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&unk_1002C5C94);
}

uint64_t sub_10006877C()
{
  return sub_10000FD38(&qword_10036AC78, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&unk_1002C5CD4);
}

uint64_t sub_1000687A8()
{
  return sub_10000FD38(&qword_10036AC80, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&unk_1002C5DD4);
}

uint64_t sub_1000687D4()
{
  return sub_10000FD38(&qword_10036AC88, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&unk_1002C5CFC);
}

uint64_t sub_100068800()
{
  return sub_10000FD38(&qword_10036A890, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&unk_1002C5DFC);
}

uint64_t sub_10006882C()
{
  return sub_10000FD38(&qword_10036AC90, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&unk_1002C5E3C);
}

uint64_t sub_100068858()
{
  return sub_10000FD38(&qword_10036AC98, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&unk_1002C5F3C);
}

uint64_t sub_100068884()
{
  return sub_10000FD38(&qword_10036ACA0, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&unk_1002C5E64);
}

uint64_t sub_1000688B0()
{
  return sub_10000FD38(&qword_10036A898, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&unk_1002C5F64);
}

uint64_t sub_1000688DC()
{
  return sub_10000FD38(&qword_10036ACA8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&unk_1002C5FA4);
}

uint64_t sub_100068908()
{
  return sub_10000FD38(&qword_10036ACB0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&unk_1002C60A4);
}

uint64_t sub_100068934()
{
  return sub_10000FD38(&qword_10036ACB8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&unk_1002C5FCC);
}

uint64_t sub_100068960()
{
  return sub_10000FD38(&qword_10036A8A0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&unk_1002C60CC);
}

uint64_t sub_10006898C()
{
  return sub_10000FD38(&qword_10036ACC0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&unk_1002C610C);
}

uint64_t sub_1000689B8()
{
  return sub_10000FD38(&qword_10036ACC8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&unk_1002C620C);
}

uint64_t sub_1000689E4()
{
  return sub_10000FD38(&qword_10036ACD0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&unk_1002C6134);
}

uint64_t sub_100068A10()
{
  return sub_10000FD38(&qword_10036A8A8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&unk_1002C6234);
}

uint64_t sub_100068A3C()
{
  return sub_10000FD38(&qword_10036ACD8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&unk_1002C6274);
}

uint64_t sub_100068A68()
{
  return sub_10000FD38(&qword_10036ACE0, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&unk_1002C6374);
}

uint64_t sub_100068A94()
{
  return sub_10000FD38(&qword_10036ACE8, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&unk_1002C629C);
}

uint64_t sub_100068AC0()
{
  return sub_10000FD38(&qword_10036A8B0, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&unk_1002C639C);
}

uint64_t sub_100068AEC()
{
  return sub_10000FD38(&qword_10036ACF0, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&unk_1002C63DC);
}

uint64_t sub_100068B18()
{
  return sub_10000FD38(&qword_10036ACF8, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&unk_1002C64DC);
}

uint64_t sub_100068B44()
{
  return sub_10000FD38(&qword_10036AD00, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&unk_1002C6404);
}

uint64_t sub_100068B70()
{
  return sub_10000FD38(&qword_10036A8B8, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&unk_1002C6504);
}

uint64_t sub_100068B9C()
{
  return sub_10000FD38(&qword_10036AD08, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&unk_1002C6544);
}

uint64_t sub_100068BC8()
{
  return sub_10000FD38(&qword_10036AD10, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&unk_1002C6644);
}

uint64_t sub_100068BF4()
{
  return sub_10000FD38(&qword_10036AD18, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&unk_1002C656C);
}

uint64_t sub_100068C20()
{
  return sub_10000FD38(&qword_10036A8C0, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&unk_1002C666C);
}

uint64_t sub_100068C4C()
{
  return sub_10000FD38(&qword_10036AD20, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&unk_1002C66AC);
}

uint64_t sub_100068C78()
{
  return sub_10000FD38(&qword_10036AD28, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&unk_1002C67AC);
}

uint64_t sub_100068CA4()
{
  return sub_10000FD38(&qword_10036AD30, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&unk_1002C66D4);
}

uint64_t sub_100068CD0()
{
  return sub_10000FD38(&qword_10036A8C8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&unk_1002C67D4);
}

uint64_t sub_100068CFC()
{
  return sub_10000FD38(&qword_10036AD38, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&unk_1002C6814);
}

uint64_t sub_100068D28()
{
  return sub_10000FD38(&qword_10036AD40, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&unk_1002C6914);
}

uint64_t sub_100068D54()
{
  return sub_10000FD38(&qword_10036AD48, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&unk_1002C683C);
}

uint64_t sub_100068D80()
{
  return sub_10000FD38(&qword_10036A8D0, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&unk_1002C693C);
}

uint64_t sub_100068DAC()
{
  return sub_10000FD38(&qword_10036AD50, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&unk_1002C697C);
}

uint64_t sub_100068DD8()
{
  return sub_10000FD38(&qword_10036AD58, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&unk_1002C6A7C);
}

uint64_t sub_100068E04()
{
  return sub_10000FD38(&qword_10036AD60, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&unk_1002C69A4);
}

uint64_t sub_100068E30()
{
  return sub_10000FD38(&qword_10036A8D8, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&unk_1002C6AA4);
}

uint64_t sub_100068E5C()
{
  return sub_10000FD38(&qword_10036AD68, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&unk_1002C6AE4);
}

uint64_t sub_100068E88()
{
  return sub_10000FD38(&qword_10036AD70, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&unk_1002C6BE4);
}

uint64_t sub_100068EB4()
{
  return sub_10000FD38(&qword_10036AD78, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&unk_1002C6B0C);
}

uint64_t sub_100068EE0()
{
  return sub_10000FD38(&qword_10036A8E0, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&unk_1002C6C0C);
}

uint64_t sub_100068F0C()
{
  return sub_10000FD38(&qword_10036AD80, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&unk_1002C6C4C);
}

uint64_t sub_100068F38()
{
  return sub_10000FD38(&qword_10036AD88, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&unk_1002C6D4C);
}

uint64_t sub_100068F64()
{
  return sub_10000FD38(&qword_10036AD90, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&unk_1002C6C74);
}

uint64_t sub_100068F90()
{
  return sub_10000FD38(&qword_10036A8E8, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&unk_1002C6D74);
}

uint64_t sub_100068FBC()
{
  return sub_10000FD38(&qword_10036AD98, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&unk_1002C6DB4);
}

uint64_t sub_100068FE8()
{
  return sub_10000FD38(&qword_10036ADA0, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&unk_1002C6EB4);
}

uint64_t sub_100069014()
{
  return sub_10000FD38(&qword_10036ADA8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&unk_1002C6DDC);
}

uint64_t sub_100069040()
{
  return sub_10000FD38(&qword_10036A8F0, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&unk_1002C6EDC);
}

uint64_t sub_10006906C()
{
  return sub_10000FD38(&qword_10036ADB0, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&unk_1002C6F1C);
}

uint64_t sub_100069098()
{
  return sub_10000FD38(&qword_10036ADB8, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&unk_1002C701C);
}

uint64_t sub_1000690C4()
{
  return sub_10000FD38(&qword_10036ADC0, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&unk_1002C6F44);
}

uint64_t sub_1000690F0()
{
  return sub_10000FD38(&qword_10036A8F8, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&unk_1002C7044);
}

uint64_t sub_10006911C()
{
  return sub_10000FD38(&qword_10036ADC8, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&unk_1002C7084);
}

uint64_t sub_100069148()
{
  return sub_10000FD38(&qword_10036ADD0, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&unk_1002C7184);
}

uint64_t sub_100069174()
{
  return sub_10000FD38(&qword_10036ADD8, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&unk_1002C70AC);
}

uint64_t sub_1000691A0()
{
  return sub_10000FD38(&qword_10036A900, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&unk_1002C71AC);
}

uint64_t sub_1000691CC()
{
  return sub_10000FD38(&qword_10036ADE0, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&unk_1002C71EC);
}

uint64_t sub_1000691F8()
{
  return sub_10000FD38(&qword_10036ADE8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&unk_1002C72EC);
}

uint64_t sub_100069224()
{
  return sub_10000FD38(&qword_10036ADF0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&unk_1002C7214);
}

uint64_t sub_100069250()
{
  return sub_10000FD38(&qword_10036A908, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&unk_1002C7314);
}

uint64_t sub_10006927C()
{
  return sub_10000FD38(&qword_10036ADF8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&unk_1002C7354);
}

uint64_t sub_1000692A8()
{
  return sub_10000FD38(&qword_10036AE00, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&unk_1002C7454);
}

uint64_t sub_1000692D4()
{
  return sub_10000FD38(&qword_10036AE08, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&unk_1002C737C);
}

uint64_t sub_100069300()
{
  return sub_10000FD38(&qword_10036A910, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&unk_1002C747C);
}

uint64_t sub_10006932C()
{
  return sub_10000FD38(&qword_10036AE10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&unk_1002C74BC);
}

uint64_t sub_100069358()
{
  return sub_10000FD38(&qword_10036AE18, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&unk_1002C75BC);
}

uint64_t sub_100069384()
{
  return sub_10000FD38(&qword_10036AE20, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&unk_1002C74E4);
}

uint64_t sub_1000693B0()
{
  return sub_10000FD38(&qword_10036A918, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&unk_1002C75E4);
}

uint64_t sub_1000693DC()
{
  return sub_10000FD38(&qword_10036AE28, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&unk_1002C7624);
}

uint64_t sub_100069408()
{
  return sub_10000FD38(&qword_10036AE30, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&unk_1002C7724);
}

uint64_t sub_100069434()
{
  return sub_10000FD38(&qword_10036AE38, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&unk_1002C764C);
}

uint64_t sub_100069460()
{
  return sub_10000FD38(&qword_10036A920, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&unk_1002C774C);
}

uint64_t sub_10006948C()
{
  return sub_10000FD38(&qword_10036AE40, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&unk_1002C778C);
}

uint64_t sub_1000694B8()
{
  return sub_10000FD38(&qword_10036AE48, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&unk_1002C788C);
}

uint64_t sub_1000694E4()
{
  return sub_10000FD38(&qword_10036AE50, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&unk_1002C77B4);
}

uint64_t sub_100069510()
{
  return sub_10000FD38(&qword_10036A928, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&unk_1002C78B4);
}

uint64_t sub_10006953C()
{
  return sub_10000FD38(&qword_10036AE58, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&unk_1002C78F4);
}

uint64_t sub_100069568()
{
  return sub_10000FD38(&qword_10036AE60, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&unk_1002C79F4);
}

uint64_t sub_100069594()
{
  return sub_10000FD38(&qword_10036AE68, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&unk_1002C791C);
}

uint64_t sub_1000695C0()
{
  return sub_10000FD38(&qword_10036A930, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&unk_1002C7A1C);
}

uint64_t sub_1000695EC()
{
  return sub_10000FD38(&qword_10036AE70, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&unk_1002C7A5C);
}

uint64_t sub_100069618()
{
  return sub_10000FD38(&qword_10036AE78, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&unk_1002C7B5C);
}

uint64_t sub_100069644()
{
  return sub_10000FD38(&qword_10036AE80, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&unk_1002C7A84);
}

uint64_t sub_100069670()
{
  return sub_10000FD38(&qword_10036A938, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&unk_1002C7B84);
}

uint64_t sub_10006969C()
{
  return sub_10000FD38(&qword_10036AE88, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&unk_1002C7BC4);
}

uint64_t sub_1000696C8()
{
  return sub_10000FD38(&qword_10036AE90, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&unk_1002C7CC4);
}

uint64_t sub_1000696F4()
{
  return sub_10000FD38(&qword_10036AE98, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&unk_1002C7BEC);
}

uint64_t sub_100069720()
{
  return sub_10000FD38(&qword_10036A940, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&unk_1002C7CEC);
}

uint64_t sub_10006974C()
{
  return sub_10000FD38(&qword_10036AEA0, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&unk_1002C7D2C);
}

uint64_t sub_100069778()
{
  return sub_10000FD38(&qword_10036AEA8, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&unk_1002C7E2C);
}

uint64_t sub_1000697A4()
{
  return sub_10000FD38(&qword_10036AEB0, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&unk_1002C7D54);
}

uint64_t sub_1000697D0()
{
  return sub_10000FD38(&qword_10036A948, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&unk_1002C7E54);
}

uint64_t sub_1000697FC()
{
  return sub_10000FD38(&qword_10036AEB8, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&unk_1002C7E94);
}

uint64_t sub_100069828()
{
  return sub_10000FD38(&qword_10036AEC0, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&unk_1002C7F94);
}

uint64_t sub_100069854()
{
  return sub_10000FD38(&qword_10036AEC8, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&unk_1002C7EBC);
}

uint64_t sub_100069880()
{
  return sub_10000FD38(&qword_10036A950, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&unk_1002C7FBC);
}

uint64_t sub_1000698AC()
{
  return sub_10000FD38(&qword_10036AED0, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&unk_1002C7FFC);
}

uint64_t sub_1000698D8()
{
  return sub_10000FD38(&qword_10036AED8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&unk_1002C80FC);
}

uint64_t sub_100069904()
{
  return sub_10000FD38(&qword_10036AEE0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&unk_1002C8024);
}

uint64_t sub_100069930()
{
  return sub_10000FD38(&qword_10036A958, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&unk_1002C8124);
}

uint64_t sub_10006995C()
{
  return sub_10000FD38(&qword_10036AEE8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&unk_1002C8164);
}

uint64_t sub_100069988()
{
  return sub_10000FD38(&qword_10036AEF0, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&unk_1002C8264);
}

uint64_t sub_1000699B4()
{
  return sub_10000FD38(&qword_10036AEF8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&unk_1002C818C);
}

uint64_t sub_1000699E0()
{
  return sub_10000FD38(&qword_10036A960, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&unk_1002C828C);
}

uint64_t sub_100069A0C()
{
  return sub_10000FD38(&qword_10036AF00, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&unk_1002C82CC);
}

uint64_t sub_100069A38()
{
  return sub_10000FD38(&qword_10036AF08, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&unk_1002C83CC);
}

uint64_t sub_100069A64()
{
  return sub_10000FD38(&qword_10036AF10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&unk_1002C82F4);
}

uint64_t sub_100069A90()
{
  return sub_10000FD38(&qword_10036A968, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&unk_1002C83F4);
}

uint64_t sub_100069ABC()
{
  return sub_10000FD38(&qword_10036AF18, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&unk_1002C8434);
}

uint64_t sub_100069AE8()
{
  return sub_10000FD38(&qword_10036AF20, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&unk_1002C8534);
}

uint64_t sub_100069B14()
{
  return sub_10000FD38(&qword_10036AF28, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&unk_1002C845C);
}

uint64_t sub_100069B40()
{
  return sub_10000FD38(&qword_10036A970, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&unk_1002C855C);
}

uint64_t sub_100069B6C()
{
  return sub_10000FD38(&qword_10036AF30, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&unk_1002C859C);
}

uint64_t sub_100069B98()
{
  return sub_10000FD38(&qword_10036AF38, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&unk_1002C869C);
}

uint64_t sub_100069BC4()
{
  return sub_10000FD38(&qword_10036AF40, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&unk_1002C85C4);
}

uint64_t sub_100069BF0()
{
  return sub_10000FD38(&qword_10036A978, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&unk_1002C86C4);
}

uint64_t sub_100069C1C()
{
  return sub_10000FD38(&qword_10036AF48, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&unk_1002C8704);
}

uint64_t sub_100069C48()
{
  return sub_10000FD38(&qword_10036AF50, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&unk_1002C8804);
}

uint64_t sub_100069C74()
{
  return sub_10000FD38(&qword_10036AF58, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&unk_1002C872C);
}

uint64_t sub_100069CA0()
{
  return sub_10000FD38(&qword_10036A980, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&unk_1002C882C);
}

uint64_t sub_100069CCC()
{
  return sub_10000FD38(&qword_10036AF60, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&unk_1002C886C);
}

uint64_t sub_100069CF8()
{
  return sub_10000FD38(&qword_10036AF68, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&unk_1002C896C);
}

uint64_t sub_100069D24()
{
  return sub_10000FD38(&qword_10036AF70, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&unk_1002C8894);
}

uint64_t sub_100069D50()
{
  return sub_10000FD38(&qword_10036A988, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&unk_1002C8994);
}

uint64_t sub_100069D7C()
{
  return sub_10000FD38(&qword_10036AF78, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&unk_1002C89D4);
}

uint64_t sub_100069DA8()
{
  return sub_10000FD38(&qword_10036AF80, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C8AD4);
}

uint64_t sub_100069DD4()
{
  return sub_10000FD38(&qword_10036AF88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C89FC);
}

uint64_t sub_100069E00()
{
  return sub_10000FD38(&qword_10036A990, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C8AFC);
}

uint64_t sub_100069E2C()
{
  return sub_10000FD38(&qword_10036AF90, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&unk_1002C8B3C);
}

uint64_t sub_100069E58()
{
  return sub_10000FD38(&qword_10036AF98, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&unk_1002C8C3C);
}

uint64_t sub_100069E84()
{
  return sub_10000FD38(&qword_10036AFA0, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&unk_1002C8B64);
}

uint64_t sub_100069EB0()
{
  return sub_10000FD38(&qword_10036A998, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&unk_1002C8C64);
}

uint64_t sub_100069EDC()
{
  return sub_10000FD38(&qword_10036AFA8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&unk_1002C8CA4);
}

uint64_t sub_100069F08()
{
  return sub_10000FD38(&qword_10036AFB0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&unk_1002C8DA4);
}

uint64_t sub_100069F34()
{
  return sub_10000FD38(&qword_10036AFB8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&unk_1002C8CCC);
}

uint64_t sub_100069F60()
{
  return sub_10000FD38(&qword_10036A9A0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&unk_1002C8DCC);
}

uint64_t sub_100069F8C()
{
  return sub_10000FD38(&qword_10036AFC0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&unk_1002C8E0C);
}

uint64_t sub_100069FB8()
{
  return sub_10000FD38(&qword_10036AFC8, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&unk_1002C8F0C);
}

uint64_t sub_100069FE4()
{
  return sub_10000FD38(&qword_10036AFD0, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&unk_1002C8E34);
}

uint64_t sub_10006A010()
{
  return sub_10000FD38(&qword_10036A9A8, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&unk_1002C8F34);
}

uint64_t sub_10006A03C()
{
  return sub_10000FD38(&qword_10036AFD8, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&unk_1002C8F74);
}

uint64_t sub_10006A068()
{
  return sub_10000FD38(&qword_10036AFE0, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&unk_1002C9074);
}

uint64_t sub_10006A094()
{
  return sub_10000FD38(&qword_10036AFE8, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&unk_1002C8F9C);
}

uint64_t sub_10006A0C0()
{
  return sub_10000FD38(&qword_10036A9B0, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&unk_1002C909C);
}

uint64_t sub_10006A0EC()
{
  return sub_10000FD38(&qword_10036AFF0, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&unk_1002C90DC);
}

uint64_t sub_10006A118()
{
  return sub_10000FD38(&qword_10036AFF8, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&unk_1002C91DC);
}

uint64_t sub_10006A144()
{
  return sub_10000FD38(&qword_10036B000, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&unk_1002C9104);
}

uint64_t sub_10006A170()
{
  return sub_10000FD38(&qword_10036A9B8, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&unk_1002C9204);
}

uint64_t sub_10006A19C()
{
  return sub_10000FD38(&qword_10036B008, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&unk_1002C9244);
}

uint64_t sub_10006A1C8()
{
  return sub_10000FD38(&qword_10036B010, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&unk_1002C9344);
}

uint64_t sub_10006A1F4()
{
  return sub_10000FD38(&qword_10036B018, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&unk_1002C926C);
}

uint64_t sub_10006A220()
{
  return sub_10000FD38(&qword_10036A9C0, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&unk_1002C936C);
}

uint64_t sub_10006A24C()
{
  return sub_10000FD38(&qword_10036B020, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&unk_1002C93AC);
}

uint64_t sub_10006A278()
{
  return sub_10000FD38(&qword_10036B028, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&unk_1002C94AC);
}

uint64_t sub_10006A2A4()
{
  return sub_10000FD38(&qword_10036B030, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&unk_1002C93D4);
}

uint64_t sub_10006A2D0()
{
  return sub_10000FD38(&qword_10036A9C8, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&unk_1002C94D4);
}

uint64_t sub_10006A2FC()
{
  return sub_10000FD38(&qword_10036B038, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&unk_1002C9514);
}

uint64_t sub_10006A328()
{
  return sub_10000FD38(&qword_10036B040, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&unk_1002C9614);
}

uint64_t sub_10006A354()
{
  return sub_10000FD38(&qword_10036B048, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&unk_1002C953C);
}

uint64_t sub_10006A380()
{
  return sub_10000FD38(&qword_10036A9D0, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&unk_1002C963C);
}

uint64_t sub_10006A3AC()
{
  return sub_10000FD38(&qword_10036B050, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&unk_1002C967C);
}

uint64_t sub_10006A3D8()
{
  return sub_10000FD38(&qword_10036B058, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&unk_1002C977C);
}

uint64_t sub_10006A404()
{
  return sub_10000FD38(&qword_10036B060, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&unk_1002C96A4);
}

uint64_t sub_10006A430()
{
  return sub_10000FD38(&qword_10036A9D8, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&unk_1002C97A4);
}

uint64_t sub_10006A45C()
{
  return sub_10000FD38(&qword_10036B068, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&unk_1002C97E4);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Type7Info.Placement(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SatelliteSystem(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10006A57C + 4 * byte_1002C4219[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10006A5B0 + 4 * byte_1002C4214[v4]))();
}

uint64_t sub_10006A5B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A5B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006A5C0);
  return result;
}

uint64_t sub_10006A5CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006A5D4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10006A5D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A5E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SatelliteSystem()
{
  return &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Band(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Band(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_10006A6D8 + 4 * byte_1002C4223[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_10006A70C + 4 * byte_1002C421E[v4]))();
}

uint64_t sub_10006A70C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A714(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006A71CLL);
  return result;
}

uint64_t sub_10006A728(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006A730);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_10006A734(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A73C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Band()
{
  return &type metadata for CLP_LogEntry_PrivateData_Band;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_FullSvTimeSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MeasurementDetectionMethod()
{
  return &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MultipathIndicator()
{
  return &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator;
}

uint64_t _s10ALProtobuf51CLP_LogEntry_PrivateData_MeasurementDetectionMethodOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10006A7E4 + 4 * byte_1002C422D[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10006A818 + 4 * byte_1002C4228[v4]))();
}

uint64_t sub_10006A818(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A820(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006A828);
  return result;
}

uint64_t sub_10006A834(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006A83CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10006A840(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A848(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvPositionSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvPositionSource;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvHealthIndication()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_BtAdvertisement.BtType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_IonosphericCorrectionSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10006A950 + 4 * byte_1002C4237[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10006A984 + 4 * byte_1002C4232[v4]))();
}

uint64_t sub_10006A984(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A98C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006A994);
  return result;
}

uint64_t sub_10006A9A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006A9A8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10006A9AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A9B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IonosphericCorrectionSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
}

uint64_t _s10ALProtobuf42CLP_LogEntry_PrivateData_GlonassSlotSourceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10006AA1C + 4 * byte_1002C4241[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10006AA50 + 4 * byte_1002C423C[v4]))();
}

uint64_t sub_10006AA50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AA58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006AA60);
  return result;
}

uint64_t sub_10006AA6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006AA74);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10006AA78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AA80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge()
{
  return &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10ALProtobuf41CLP_LogEntry_PrivateData_FullSvTimeSourceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10006AB78 + 4 * byte_1002C424B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10006ABAC + 4 * byte_1002C4246[v4]))();
}

uint64_t sub_10006ABAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006ABB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006ABBCLL);
  return result;
}

uint64_t sub_10006ABC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006ABD0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10006ABD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006ABDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated()
{
  return &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvReferencePoint(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvReferencePoint(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10006ACD4 + 4 * byte_1002C4255[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10006AD08 + 4 * byte_1002C4250[v4]))();
}

uint64_t sub_10006AD08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AD10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006AD18);
  return result;
}

uint64_t sub_10006AD24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006AD2CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10006AD30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AD38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvReferencePoint()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint;
}

_QWORD *sub_10006AD54(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
  }
  return a1;
}

uint64_t sub_10006ADF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10006AE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10006AEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10006AF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10006AFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006AFD8);
}

uint64_t sub_10006AFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 5u)
    v9 = 5;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  v10 = v9 - 5;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 5u)
    return v10;
  else
    return 0;
}

uint64_t sub_10006B05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B068);
}

uint64_t sub_10006B068(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 5;
  return result;
}

uint64_t sub_10006B0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)&unk_1002C9AC0, (uint64_t)&unk_1002C9AD8);
}

uint64_t *sub_10006B0F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_1000039AC(&qword_10036A700);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      v19 = *(int *)(v15 + 20);
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t sub_10006B244(uint64_t a1, uint64_t a2)
{
  return sub_1000742EC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_10006B250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A700);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = *(int *)(v14 + 20);
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_10006B374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_BYTE *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_BYTE *)(v11 + 4);
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = v12;
  v13 = *(int *)(a3 + 24);
  v14 = (_BYTE *)(a1 + v13);
  v15 = (_BYTE *)(a2 + v13);
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      v8((uint64_t)v14, (uint64_t)v15, v6);
      v27 = *(int *)(v16 + 20);
      v28 = &v14[v27];
      v29 = &v15[v27];
      v30 = *(_DWORD *)v29;
      v28[4] = v29[4];
      *(_DWORD *)v28 = v30;
      v14[*(int *)(v16 + 24)] = v15[*(int *)(v16 + 24)];
      return a1;
    }
    sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v25 = sub_1000039AC(&qword_10036A700);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v14, v15, v6);
  v21 = *(int *)(v16 + 20);
  v22 = &v14[v21];
  v23 = &v15[v21];
  v24 = *(_DWORD *)v23;
  v22[4] = v23[4];
  *(_DWORD *)v22 = v24;
  v14[*(int *)(v16 + 24)] = v15[*(int *)(v16 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_10006B510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A700);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = *(int *)(v14 + 20);
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_10006B634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_BYTE *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  char *v27;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = (_BYTE *)(a1 + v10);
  v14 = (_BYTE *)(a2 + v10);
  v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v8((uint64_t)v13, (uint64_t)v14, v6);
      v25 = *(int *)(v15 + 20);
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_DWORD *)v26 = *(_DWORD *)v27;
      v26[4] = v27[4];
      v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
      return a1;
    }
    sub_100004030((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v23 = sub_1000039AC(&qword_10036A700);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v13, v14, v6);
  v20 = *(int *)(v15 + 20);
  v21 = &v13[v20];
  v22 = &v14[v20];
  *(_DWORD *)v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_10006B7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B7D8);
}

uint64_t sub_10006B7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074A2C(a1, a2, a3, &qword_10036A700);
}

uint64_t sub_10006B7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B7F0);
}

uint64_t sub_10006B7F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100074ABC(a1, a2, a3, a4, &qword_10036A700);
}

void sub_10006B7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100074B60(a1, a2, a3, (uint64_t)&unk_1002C9AC0, (unint64_t *)&unk_10036B150, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t *sub_10006B818(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v45;
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_1000039AC(&qword_10036A708);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      v19 = *(int *)(v15 + 20);
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v22 = *(int *)(v15 + 24);
      __dst = &v13[v22];
      v23 = &v14[v22];
      v24 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      v45 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v23, 1, v24))
      {
        v25 = sub_1000039AC(&qword_10036A700);
        memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)__dst, (uint64_t *)v23, v7);
        v26 = *(int *)(v24 + 20);
        v27 = &__dst[v26];
        v28 = &v23[v26];
        *(_DWORD *)v27 = *(_DWORD *)v28;
        v27[4] = v28[4];
        __dst[*(int *)(v24 + 24)] = v23[*(int *)(v24 + 24)];
        (*(void (**)(void))(v45 + 56))();
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v29 = a3[7];
    v30 = a3[8];
    v31 = (char *)a1 + v29;
    v32 = (char *)a2 + v29;
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    v33 = (char *)a1 + v30;
    v34 = (char *)a2 + v30;
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    v35 = a3[9];
    v36 = a3[10];
    v37 = (char *)a1 + v35;
    v38 = (char *)a2 + v35;
    *(_DWORD *)v37 = *(_DWORD *)v38;
    v37[4] = v38[4];
    v39 = (char *)a1 + v36;
    v40 = (char *)a2 + v36;
    *(_DWORD *)v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    v41 = a3[11];
    v42 = (char *)a1 + v41;
    v43 = (char *)a2 + v41;
    LODWORD(v37) = *(_DWORD *)v43;
    v42[4] = v43[4];
    *(_DWORD *)v42 = (_DWORD)v37;
  }
  return a1;
}

uint64_t sub_10006BAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    v10(v5, v4);
    v8 = v5 + *(int *)(v6 + 24);
    v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  }
  return result;
}

uint64_t sub_10006BB84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A708);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = *(int *)(v14 + 20);
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = *(int *)(v14 + 24);
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    v43 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v21, 1, v22))
    {
      v23 = sub_1000039AC(&qword_10036A700);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      v24 = *(int *)(v22 + 20);
      v25 = &__dst[v24];
      v26 = &v21[v24];
      *(_DWORD *)v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      __dst[*(int *)(v22 + 24)] = v21[*(int *)(v22 + 24)];
      (*(void (**)(void))(v43 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v27 = a3[7];
  v28 = a3[8];
  v29 = a1 + v27;
  v30 = a2 + v27;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  v31 = a1 + v28;
  v32 = a2 + v28;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  v33 = a3[9];
  v34 = a3[10];
  v35 = a1 + v33;
  v36 = a2 + v33;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  v37 = a1 + v34;
  v38 = a2 + v34;
  *(_DWORD *)v37 = *(_DWORD *)v38;
  *(_BYTE *)(v37 + 4) = *(_BYTE *)(v38 + 4);
  v39 = a3[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  LODWORD(v35) = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = v35;
  return a1;
}

uint64_t sub_10006BDE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int v71;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  uint64_t v77;
  void (*v78)(uint64_t, char *, uint64_t);
  uint64_t v79;
  void (*v80)(uint64_t, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v79 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(v10 + 4);
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = v11;
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v77 = *(_QWORD *)(v15 - 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  v17 = v16(v13, 1, v15);
  v18 = v16((uint64_t)v14, 1, v15);
  if (!v17)
  {
    v78 = (void (*)(uint64_t, char *, uint64_t))v7;
    if (!v18)
    {
      v7(v13, (uint64_t)v14, v6);
      v32 = *(int *)(v15 + 20);
      v33 = v13 + v32;
      v34 = &v14[v32];
      v35 = v34[4];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      *(_BYTE *)(v33 + 4) = v35;
      v36 = *(int *)(v15 + 24);
      v37 = v13 + v36;
      v38 = &v14[v36];
      v39 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      v40 = *(_QWORD *)(v39 - 8);
      v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
      v42 = v41(v37, 1, v39);
      v43 = v41((uint64_t)v38, 1, v39);
      if (v42)
      {
        if (!v43)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v79 + 16))(v37, v38, v6);
          v44 = *(int *)(v39 + 20);
          v45 = v37 + v44;
          v46 = &v38[v44];
          v47 = *(_DWORD *)v46;
          *(_BYTE *)(v45 + 4) = v46[4];
          *(_DWORD *)v45 = v47;
          *(_BYTE *)(v37 + *(int *)(v39 + 24)) = v38[*(int *)(v39 + 24)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v43)
        {
          v78(v37, v38, v6);
          v73 = *(int *)(v39 + 20);
          v74 = v37 + v73;
          v75 = &v38[v73];
          v76 = *(_DWORD *)v75;
          *(_BYTE *)(v74 + 4) = v75[4];
          *(_DWORD *)v74 = v76;
          *(_BYTE *)(v37 + *(int *)(v39 + 24)) = v38[*(int *)(v39 + 24)];
          goto LABEL_14;
        }
        sub_100004030(v37, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A700) - 8) + 64);
      v30 = (void *)v37;
      v31 = v38;
      goto LABEL_8;
    }
    sub_100004030(v13, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A708) - 8) + 64);
    v30 = (void *)v13;
    v31 = v14;
LABEL_8:
    memcpy(v30, v31, v29);
    goto LABEL_14;
  }
  if (v18)
    goto LABEL_7;
  v80 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 16);
  v80(v13, v14, v6);
  v19 = *(int *)(v15 + 20);
  v20 = v13 + v19;
  v21 = &v14[v19];
  v22 = v21[4];
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  v23 = *(int *)(v15 + 24);
  v24 = (char *)(v13 + v23);
  v25 = &v14[v23];
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_1000039AC(&qword_10036A700);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v80((uint64_t)v24, v25, v6);
    v48 = *(int *)(v26 + 20);
    v49 = &v24[v48];
    v50 = &v25[v48];
    v51 = *(_DWORD *)v50;
    v49[4] = v50[4];
    *(_DWORD *)v49 = v51;
    v24[*(int *)(v26 + 24)] = v25[*(int *)(v26 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v77 + 56))(v13, 0, 1, v15);
LABEL_14:
  v52 = a3[7];
  v53 = a1 + v52;
  v54 = (int *)(a2 + v52);
  v55 = *v54;
  *(_BYTE *)(v53 + 4) = *((_BYTE *)v54 + 4);
  *(_DWORD *)v53 = v55;
  v56 = a3[8];
  v57 = a1 + v56;
  v58 = (int *)(a2 + v56);
  v59 = *v58;
  *(_BYTE *)(v57 + 4) = *((_BYTE *)v58 + 4);
  *(_DWORD *)v57 = v59;
  v60 = a3[9];
  v61 = a1 + v60;
  v62 = (int *)(a2 + v60);
  v63 = *v62;
  *(_BYTE *)(v61 + 4) = *((_BYTE *)v62 + 4);
  *(_DWORD *)v61 = v63;
  v64 = a3[10];
  v65 = a1 + v64;
  v66 = (int *)(a2 + v64);
  v67 = *v66;
  *(_BYTE *)(v65 + 4) = *((_BYTE *)v66 + 4);
  *(_DWORD *)v65 = v67;
  v68 = a3[11];
  v69 = a1 + v68;
  v70 = (int *)(a2 + v68);
  v71 = *v70;
  *(_BYTE *)(v69 + 4) = *((_BYTE *)v70 + 4);
  *(_DWORD *)v69 = v71;
  return a1;
}

uint64_t sub_10006C1D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A708);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = *(int *)(v14 + 20);
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = *(int *)(v14 + 24);
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    v43 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v21, 1, v22))
    {
      v23 = sub_1000039AC(&qword_10036A700);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      v24 = *(int *)(v22 + 20);
      v25 = &__dst[v24];
      v26 = &v21[v24];
      *(_DWORD *)v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      __dst[*(int *)(v22 + 24)] = v21[*(int *)(v22 + 24)];
      (*(void (**)(void))(v43 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v27 = a3[7];
  v28 = a3[8];
  v29 = a1 + v27;
  v30 = a2 + v27;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  v31 = a1 + v28;
  v32 = a2 + v28;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  v33 = a3[9];
  v34 = a3[10];
  v35 = a1 + v33;
  v36 = a2 + v33;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  v37 = a1 + v34;
  v38 = a2 + v34;
  *(_DWORD *)v37 = *(_DWORD *)v38;
  *(_BYTE *)(v37 + 4) = *(_BYTE *)(v38 + 4);
  v39 = a3[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  LODWORD(v35) = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = v35;
  return a1;
}

uint64_t sub_10006C438(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  void (*v69)(uint64_t, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v68 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = a1 + v9;
  v13 = (char *)(a2 + v9);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v66 = *(_QWORD *)(v14 - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  v16 = v15(v12, 1, v14);
  v17 = v15((uint64_t)v13, 1, v14);
  if (!v16)
  {
    v67 = (void (*)(uint64_t, char *, uint64_t))v7;
    if (!v17)
    {
      v7(v12, (uint64_t)v13, v6);
      v30 = *(int *)(v14 + 20);
      v31 = v12 + v30;
      v32 = &v13[v30];
      *(_DWORD *)v31 = *(_DWORD *)v32;
      *(_BYTE *)(v31 + 4) = v32[4];
      v33 = *(int *)(v14 + 24);
      v34 = v12 + v33;
      v35 = &v13[v33];
      v36 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      v39 = v38(v34, 1, v36);
      v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v34, v35, v6);
          v41 = *(int *)(v36 + 20);
          v42 = v34 + v41;
          v43 = &v35[v41];
          *(_DWORD *)v42 = *(_DWORD *)v43;
          *(_BYTE *)(v42 + 4) = v43[4];
          *(_BYTE *)(v34 + *(int *)(v36 + 24)) = v35[*(int *)(v36 + 24)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v40)
        {
          v67(v34, v35, v6);
          v63 = *(int *)(v36 + 20);
          v64 = v34 + v63;
          v65 = &v35[v63];
          *(_DWORD *)v64 = *(_DWORD *)v65;
          *(_BYTE *)(v64 + 4) = v65[4];
          *(_BYTE *)(v34 + *(int *)(v36 + 24)) = v35[*(int *)(v36 + 24)];
          goto LABEL_14;
        }
        sub_100004030(v34, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A700) - 8) + 64);
      v28 = (void *)v34;
      v29 = v35;
      goto LABEL_8;
    }
    sub_100004030(v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A708) - 8) + 64);
    v28 = (void *)v12;
    v29 = v13;
LABEL_8:
    memcpy(v28, v29, v27);
    goto LABEL_14;
  }
  if (v17)
    goto LABEL_7;
  v69 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v69(v12, v13, v6);
  v18 = *(int *)(v14 + 20);
  v19 = v12 + v18;
  v20 = &v13[v18];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = v20[4];
  v21 = *(int *)(v14 + 24);
  v22 = (char *)(v12 + v21);
  v23 = &v13[v21];
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_1000039AC(&qword_10036A700);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v69((uint64_t)v22, v23, v6);
    v44 = *(int *)(v24 + 20);
    v45 = &v22[v44];
    v46 = &v23[v44];
    *(_DWORD *)v45 = *(_DWORD *)v46;
    v45[4] = v46[4];
    v22[*(int *)(v24 + 24)] = v23[*(int *)(v24 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v66 + 56))(v12, 0, 1, v14);
LABEL_14:
  v47 = a3[7];
  v48 = a3[8];
  v49 = a1 + v47;
  v50 = a2 + v47;
  *(_DWORD *)v49 = *(_DWORD *)v50;
  *(_BYTE *)(v49 + 4) = *(_BYTE *)(v50 + 4);
  v51 = a1 + v48;
  v52 = a2 + v48;
  *(_DWORD *)v51 = *(_DWORD *)v52;
  *(_BYTE *)(v51 + 4) = *(_BYTE *)(v52 + 4);
  v53 = a3[9];
  v54 = a3[10];
  v55 = a1 + v53;
  v56 = a2 + v53;
  *(_DWORD *)v55 = *(_DWORD *)v56;
  *(_BYTE *)(v55 + 4) = *(_BYTE *)(v56 + 4);
  v57 = a1 + v54;
  v58 = a2 + v54;
  *(_DWORD *)v57 = *(_DWORD *)v58;
  *(_BYTE *)(v57 + 4) = *(_BYTE *)(v58 + 4);
  v59 = a3[11];
  v60 = a1 + v59;
  v61 = a2 + v59;
  LODWORD(v55) = *(_DWORD *)v61;
  *(_BYTE *)(v60 + 4) = *(_BYTE *)(v61 + 4);
  *(_DWORD *)v60 = v55;
  return a1;
}

uint64_t sub_10006C820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006C82C);
}

uint64_t sub_10006C82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074A2C(a1, a2, a3, &qword_10036A708);
}

uint64_t sub_10006C838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006C844);
}

uint64_t sub_10006C844(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100074ABC(a1, a2, a3, a4, &qword_10036A708);
}

void sub_10006C850(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1002C9AC0;
    sub_10001198C(319, (unint64_t *)&unk_10036B1E0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1002C9AC0;
      v6[4] = &unk_1002C9AC0;
      v6[5] = &unk_1002C9AC0;
      v6[6] = &unk_1002C9AC0;
      v6[7] = &unk_1002C9AC0;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

uint64_t *sub_10006C8F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_1000039AC(&qword_10036A710);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v59 = v16;
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      v25 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = sub_1000039AC(&qword_10036A708);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        v28 = v59;
      }
      else
      {
        v57 = v26;
        v8((uint64_t *)v23, (uint64_t *)v24, v7);
        v29 = *(int *)(v25 + 20);
        v30 = &v23[v29];
        v31 = &v24[v29];
        *(_DWORD *)v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        v32 = *(int *)(v25 + 24);
        v58 = v23;
        v33 = &v23[v32];
        v34 = &v24[v32];
        v35 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v56 = *(_QWORD *)(v35 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v34, 1, v35))
        {
          v36 = sub_1000039AC(&qword_10036A700);
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          v8((uint64_t *)v33, (uint64_t *)v34, v7);
          v37 = *(int *)(v35 + 20);
          v38 = &v33[v37];
          v39 = &v34[v37];
          *(_DWORD *)v38 = *(_DWORD *)v39;
          v38[4] = v39[4];
          v33[*(int *)(v35 + 24)] = v34[*(int *)(v35 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v33, 0, 1, v35);
        }
        v28 = v59;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v25);
      }
      v40 = v15[7];
      v41 = &v13[v40];
      v42 = &v14[v40];
      *(_DWORD *)v41 = *(_DWORD *)v42;
      v41[4] = v42[4];
      v43 = v15[8];
      v44 = &v13[v43];
      v45 = &v14[v43];
      v44[4] = v45[4];
      *(_DWORD *)v44 = *(_DWORD *)v45;
      v46 = v15[9];
      v47 = &v13[v46];
      v48 = &v14[v46];
      *(_DWORD *)v47 = *(_DWORD *)v48;
      v47[4] = v48[4];
      v49 = v15[10];
      v50 = &v13[v49];
      v51 = &v14[v49];
      *(_DWORD *)v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      v52 = v15[11];
      v53 = &v13[v52];
      v54 = &v14[v52];
      *(_DWORD *)v53 = *(_DWORD *)v54;
      v53[4] = v54[4];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v28 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t sub_10006CC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    v12(v5, v4);
    v8 = v5 + *(int *)(v6 + 24);
    v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
    {
      v12(v8, v4);
      v10 = v8 + *(int *)(v9 + 24);
      v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
      if (!(_DWORD)result)
        return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v4);
    }
  }
  return result;
}

uint64_t sub_10006CD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A710);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v56 = v15;
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    v23 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = sub_1000039AC(&qword_10036A708);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v54 = v24;
      v7((uint64_t)v21, (uint64_t)v22, v6);
      v26 = *(int *)(v23 + 20);
      v27 = &v21[v26];
      v28 = &v22[v26];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      v29 = *(int *)(v23 + 24);
      v55 = v21;
      v30 = &v21[v29];
      v31 = &v22[v29];
      v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      v53 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v31, 1, v32))
      {
        v33 = sub_1000039AC(&qword_10036A700);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v30, (uint64_t)v31, v6);
        v34 = *(int *)(v32 + 20);
        v35 = &v30[v34];
        v36 = &v31[v34];
        *(_DWORD *)v35 = *(_DWORD *)v36;
        v35[4] = v36[4];
        v30[*(int *)(v32 + 24)] = v31[*(int *)(v32 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v30, 0, 1, v32);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v55, 0, 1, v23);
    }
    v37 = v14[7];
    v38 = &v12[v37];
    v39 = &v13[v37];
    *(_DWORD *)v38 = *(_DWORD *)v39;
    v38[4] = v39[4];
    v40 = v14[8];
    v41 = &v12[v40];
    v42 = &v13[v40];
    v41[4] = v42[4];
    *(_DWORD *)v41 = *(_DWORD *)v42;
    v43 = v14[9];
    v44 = &v12[v43];
    v45 = &v13[v43];
    *(_DWORD *)v44 = *(_DWORD *)v45;
    v44[4] = v45[4];
    v46 = v14[10];
    v47 = &v12[v46];
    v48 = &v13[v46];
    *(_DWORD *)v47 = *(_DWORD *)v48;
    v47[4] = v48[4];
    v49 = v14[11];
    v50 = &v12[v49];
    v51 = &v13[v49];
    *(_DWORD *)v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_10006D064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, int *);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  int v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int v81;
  uint64_t v82;
  char *v83;
  char *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t);
  int v95;
  size_t v96;
  void *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  int v109;
  uint64_t v110;
  char *v111;
  char *v112;
  int v113;
  uint64_t v114;
  char *v115;
  char *v116;
  int v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int v125;
  uint64_t v126;
  char *v127;
  char *v128;
  int v129;
  void (*v131)(uint64_t, char *, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *__dst;
  char *__dsta;
  void (*v140)(char *, char *, uint64_t);
  uint64_t v141;
  uint64_t v142;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_BYTE *)(v11 + 4);
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = v12;
  v13 = *(int *)(a3 + 24);
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (v20)
    {
      sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
      goto LABEL_7;
    }
    v136 = a1;
    v8((uint64_t)v14, (uint64_t)v15, v6);
    v32 = v16[5];
    v33 = &v14[v32];
    v34 = &v15[v32];
    v35 = v34[4];
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v33[4] = v35;
    v36 = v16[6];
    v37 = &v14[v36];
    v38 = &v15[v36];
    v39 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v132 = *(_QWORD *)(v39 - 8);
    v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 48);
    v141 = (uint64_t)v37;
    LODWORD(v37) = v40(v37, 1, v39);
    v134 = v39;
    v41 = v40(v38, 1, v39);
    if ((_DWORD)v37)
    {
      if (!v41)
      {
        v131 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
        v131(v141, v38, v6);
        v52 = *(int *)(v39 + 20);
        v53 = v141 + v52;
        v54 = &v38[v52];
        v55 = v54[4];
        *(_DWORD *)v53 = *(_DWORD *)v54;
        *(_BYTE *)(v53 + 4) = v55;
        v56 = *(int *)(v39 + 24);
        v57 = (char *)(v141 + v56);
        v58 = &v38[v56];
        v59 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v60 = *(_QWORD *)(v59 - 8);
        a1 = v136;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          v61 = sub_1000039AC(&qword_10036A700);
          memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        }
        else
        {
          v131((uint64_t)v57, v58, v6);
          v98 = *(int *)(v59 + 20);
          v99 = &v57[v98];
          v100 = &v58[v98];
          v101 = *(_DWORD *)v100;
          v99[4] = v100[4];
          *(_DWORD *)v99 = v101;
          v57[*(int *)(v59 + 24)] = v58[*(int *)(v59 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v132 + 56))(v141, 0, 1, v134);
        goto LABEL_31;
      }
      v42 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A708) - 8) + 64);
      v43 = (void *)v141;
    }
    else
    {
      if (!v41)
      {
        v8(v141, (uint64_t)v38, v6);
        v86 = *(int *)(v39 + 20);
        v87 = v141 + v86;
        v88 = &v38[v86];
        v89 = v88[4];
        *(_DWORD *)v87 = *(_DWORD *)v88;
        *(_BYTE *)(v87 + 4) = v89;
        v90 = *(int *)(v39 + 24);
        v91 = v141 + v90;
        v92 = &v38[v90];
        v93 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v135 = *(_QWORD *)(v93 - 8);
        v94 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
        v142 = v91;
        LODWORD(v91) = v94(v91, 1, v93);
        __dsta = v92;
        v95 = v94((uint64_t)v92, 1, v93);
        if ((_DWORD)v91)
        {
          a1 = v136;
          if (!v95)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v142, __dsta, v6);
            v102 = *(int *)(v93 + 20);
            v103 = v142 + v102;
            v104 = &__dsta[v102];
            v105 = *(_DWORD *)v104;
            *(_BYTE *)(v103 + 4) = v104[4];
            *(_DWORD *)v103 = v105;
            *(_BYTE *)(v142 + *(int *)(v93 + 24)) = __dsta[*(int *)(v93 + 24)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v135 + 56))(v142, 0, 1, v93);
            goto LABEL_31;
          }
          v96 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A700) - 8) + 64);
          v97 = (void *)v142;
        }
        else
        {
          a1 = v136;
          if (!v95)
          {
            v8(v142, (uint64_t)__dsta, v6);
            v106 = *(int *)(v93 + 20);
            v107 = v142 + v106;
            v108 = &__dsta[v106];
            v109 = *(_DWORD *)v108;
            *(_BYTE *)(v107 + 4) = v108[4];
            *(_DWORD *)v107 = v109;
            *(_BYTE *)(v142 + *(int *)(v93 + 24)) = __dsta[*(int *)(v93 + 24)];
            goto LABEL_31;
          }
          sub_100004030(v142, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
          v96 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A700) - 8) + 64);
          v97 = (void *)v142;
        }
        memcpy(v97, __dsta, v96);
LABEL_31:
        v110 = v16[7];
        v111 = &v14[v110];
        v112 = &v15[v110];
        v113 = *(_DWORD *)v112;
        v111[4] = v112[4];
        *(_DWORD *)v111 = v113;
        v114 = v16[8];
        v115 = &v14[v114];
        v116 = &v15[v114];
        v117 = *(_DWORD *)v116;
        v115[4] = v116[4];
        *(_DWORD *)v115 = v117;
        v118 = v16[9];
        v119 = &v14[v118];
        v120 = &v15[v118];
        v121 = *(_DWORD *)v120;
        v119[4] = v120[4];
        *(_DWORD *)v119 = v121;
        v122 = v16[10];
        v123 = &v14[v122];
        v124 = &v15[v122];
        v125 = *(_DWORD *)v124;
        v123[4] = v124[4];
        *(_DWORD *)v123 = v125;
        v126 = v16[11];
        v127 = &v14[v126];
        v128 = &v15[v126];
        v129 = *(_DWORD *)v128;
        v127[4] = v128[4];
        *(_DWORD *)v127 = v129;
        return a1;
      }
      sub_100004030(v141, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      v42 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A708) - 8) + 64);
      v43 = (void *)v141;
    }
    memcpy(v43, v38, v42);
    a1 = v136;
    goto LABEL_31;
  }
  if (v20)
  {
LABEL_7:
    v31 = sub_1000039AC(&qword_10036A710);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  v140 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v140(v14, v15, v6);
  v21 = v16[5];
  v22 = &v14[v21];
  v23 = &v15[v21];
  v24 = v23[4];
  *(_DWORD *)v22 = *(_DWORD *)v23;
  v22[4] = v24;
  v25 = v16[6];
  v26 = &v14[v25];
  v27 = &v15[v25];
  v28 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = sub_1000039AC(&qword_10036A708);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v140(v26, v27, v6);
    v44 = *(int *)(v28 + 20);
    v45 = &v26[v44];
    v46 = &v27[v44];
    v47 = v46[4];
    *(_DWORD *)v45 = *(_DWORD *)v46;
    v45[4] = v47;
    v48 = *(int *)(v28 + 24);
    v137 = v26;
    __dst = &v26[v48];
    v49 = &v27[v48];
    v50 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    v133 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v49, 1, v50))
    {
      v51 = sub_1000039AC(&qword_10036A700);
      memcpy(__dst, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      v140(__dst, v49, v6);
      v62 = *(int *)(v50 + 20);
      v63 = &__dst[v62];
      v64 = &v49[v62];
      v65 = *(_DWORD *)v64;
      v63[4] = v64[4];
      *(_DWORD *)v63 = v65;
      __dst[*(int *)(v50 + 24)] = v49[*(int *)(v50 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(__dst, 0, 1, v50);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v137, 0, 1, v28);
  }
  v66 = v16[7];
  v67 = &v14[v66];
  v68 = &v15[v66];
  v69 = *(_DWORD *)v68;
  v67[4] = v68[4];
  *(_DWORD *)v67 = v69;
  v70 = v16[8];
  v71 = &v14[v70];
  v72 = &v15[v70];
  v73 = *(_DWORD *)v72;
  v71[4] = v72[4];
  *(_DWORD *)v71 = v73;
  v74 = v16[9];
  v75 = &v14[v74];
  v76 = &v15[v74];
  v77 = *(_DWORD *)v76;
  v75[4] = v76[4];
  *(_DWORD *)v75 = v77;
  v78 = v16[10];
  v79 = &v14[v78];
  v80 = &v15[v78];
  v81 = *(_DWORD *)v80;
  v79[4] = v80[4];
  *(_DWORD *)v79 = v81;
  v82 = v16[11];
  v83 = &v14[v82];
  v84 = &v15[v82];
  v85 = *(_DWORD *)v84;
  v83[4] = v84[4];
  *(_DWORD *)v83 = v85;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_10006D7B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A710);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v56 = v15;
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    v23 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = sub_1000039AC(&qword_10036A708);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v54 = v24;
      v7((uint64_t)v21, (uint64_t)v22, v6);
      v26 = *(int *)(v23 + 20);
      v27 = &v21[v26];
      v28 = &v22[v26];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      v29 = *(int *)(v23 + 24);
      v55 = v21;
      v30 = &v21[v29];
      v31 = &v22[v29];
      v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      v53 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v31, 1, v32))
      {
        v33 = sub_1000039AC(&qword_10036A700);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v30, (uint64_t)v31, v6);
        v34 = *(int *)(v32 + 20);
        v35 = &v30[v34];
        v36 = &v31[v34];
        *(_DWORD *)v35 = *(_DWORD *)v36;
        v35[4] = v36[4];
        v30[*(int *)(v32 + 24)] = v31[*(int *)(v32 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v30, 0, 1, v32);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v55, 0, 1, v23);
    }
    v37 = v14[7];
    v38 = &v12[v37];
    v39 = &v13[v37];
    *(_DWORD *)v38 = *(_DWORD *)v39;
    v38[4] = v39[4];
    v40 = v14[8];
    v41 = &v12[v40];
    v42 = &v13[v40];
    v41[4] = v42[4];
    *(_DWORD *)v41 = *(_DWORD *)v42;
    v43 = v14[9];
    v44 = &v12[v43];
    v45 = &v13[v43];
    *(_DWORD *)v44 = *(_DWORD *)v45;
    v44[4] = v45[4];
    v46 = v14[10];
    v47 = &v12[v46];
    v48 = &v13[v46];
    *(_DWORD *)v47 = *(_DWORD *)v48;
    v47[4] = v48[4];
    v49 = v14[11];
    v50 = &v12[v49];
    v51 = &v13[v49];
    *(_DWORD *)v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_10006DAC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  size_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t);
  int v83;
  size_t v84;
  void *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  void (*v111)(uint64_t, char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *__dst;
  char *__dsta;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  uint64_t v122;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = (char *)(a1 + v10);
  v14 = (char *)(a2 + v10);
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      sub_100004030((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
      goto LABEL_7;
    }
    v116 = a1;
    v8((uint64_t)v13, (uint64_t)v14, v6);
    v30 = v15[5];
    v31 = &v13[v30];
    v32 = &v14[v30];
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    v33 = v15[6];
    v34 = &v13[v33];
    v35 = &v14[v33];
    v36 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v112 = *(_QWORD *)(v36 - 8);
    v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
    v121 = (uint64_t)v34;
    LODWORD(v34) = v37(v34, 1, v36);
    v114 = v36;
    v38 = v37(v35, 1, v36);
    if ((_DWORD)v34)
    {
      if (!v38)
      {
        v111 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
        v111(v121, v35, v6);
        v48 = *(int *)(v36 + 20);
        v49 = v121 + v48;
        v50 = &v35[v48];
        *(_DWORD *)v49 = *(_DWORD *)v50;
        *(_BYTE *)(v49 + 4) = v50[4];
        v51 = *(int *)(v36 + 24);
        v52 = (char *)(v121 + v51);
        v53 = &v35[v51];
        v54 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v55 = *(_QWORD *)(v54 - 8);
        a1 = v116;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          v56 = sub_1000039AC(&qword_10036A700);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          v111((uint64_t)v52, v53, v6);
          v86 = *(int *)(v54 + 20);
          v87 = &v52[v86];
          v88 = &v53[v86];
          *(_DWORD *)v87 = *(_DWORD *)v88;
          v87[4] = v88[4];
          v52[*(int *)(v54 + 24)] = v53[*(int *)(v54 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v112 + 56))(v121, 0, 1, v114);
        goto LABEL_31;
      }
      v39 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A708) - 8) + 64);
      v40 = (void *)v121;
    }
    else
    {
      if (!v38)
      {
        v8(v121, (uint64_t)v35, v6);
        v75 = *(int *)(v36 + 20);
        v76 = v121 + v75;
        v77 = &v35[v75];
        *(_DWORD *)v76 = *(_DWORD *)v77;
        *(_BYTE *)(v76 + 4) = v77[4];
        v78 = *(int *)(v36 + 24);
        v79 = v121 + v78;
        v80 = &v35[v78];
        v81 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v115 = *(_QWORD *)(v81 - 8);
        v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
        v122 = v79;
        LODWORD(v79) = v82(v79, 1, v81);
        __dsta = v80;
        v83 = v82((uint64_t)v80, 1, v81);
        if ((_DWORD)v79)
        {
          a1 = v116;
          if (!v83)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v122, __dsta, v6);
            v89 = *(int *)(v81 + 20);
            v90 = v122 + v89;
            v91 = &__dsta[v89];
            *(_DWORD *)v90 = *(_DWORD *)v91;
            *(_BYTE *)(v90 + 4) = v91[4];
            *(_BYTE *)(v122 + *(int *)(v81 + 24)) = __dsta[*(int *)(v81 + 24)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v115 + 56))(v122, 0, 1, v81);
            goto LABEL_31;
          }
          v84 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A700) - 8) + 64);
          v85 = (void *)v122;
        }
        else
        {
          a1 = v116;
          if (!v83)
          {
            v8(v122, (uint64_t)__dsta, v6);
            v92 = *(int *)(v81 + 20);
            v93 = v122 + v92;
            v94 = &__dsta[v92];
            *(_DWORD *)v93 = *(_DWORD *)v94;
            *(_BYTE *)(v93 + 4) = v94[4];
            *(_BYTE *)(v122 + *(int *)(v81 + 24)) = __dsta[*(int *)(v81 + 24)];
            goto LABEL_31;
          }
          sub_100004030(v122, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
          v84 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A700) - 8) + 64);
          v85 = (void *)v122;
        }
        memcpy(v85, __dsta, v84);
LABEL_31:
        v95 = v15[7];
        v96 = &v13[v95];
        v97 = &v14[v95];
        *(_DWORD *)v96 = *(_DWORD *)v97;
        v96[4] = v97[4];
        v98 = v15[8];
        v99 = &v13[v98];
        v100 = &v14[v98];
        v99[4] = v100[4];
        *(_DWORD *)v99 = *(_DWORD *)v100;
        v101 = v15[9];
        v102 = &v13[v101];
        v103 = &v14[v101];
        *(_DWORD *)v102 = *(_DWORD *)v103;
        v102[4] = v103[4];
        v104 = v15[10];
        v105 = &v13[v104];
        v106 = &v14[v104];
        *(_DWORD *)v105 = *(_DWORD *)v106;
        v105[4] = v106[4];
        v107 = v15[11];
        v108 = &v13[v107];
        v109 = &v14[v107];
        *(_DWORD *)v108 = *(_DWORD *)v109;
        v108[4] = v109[4];
        return a1;
      }
      sub_100004030(v121, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      v39 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A708) - 8) + 64);
      v40 = (void *)v121;
    }
    memcpy(v40, v35, v39);
    a1 = v116;
    goto LABEL_31;
  }
  if (v19)
  {
LABEL_7:
    v29 = sub_1000039AC(&qword_10036A710);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  v120 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v120(v13, v14, v6);
  v20 = v15[5];
  v21 = &v13[v20];
  v22 = &v14[v20];
  *(_DWORD *)v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  v23 = v15[6];
  v24 = &v13[v23];
  v25 = &v14[v23];
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_1000039AC(&qword_10036A708);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v120(v24, v25, v6);
    v41 = *(int *)(v26 + 20);
    v42 = &v24[v41];
    v43 = &v25[v41];
    *(_DWORD *)v42 = *(_DWORD *)v43;
    v42[4] = v43[4];
    v44 = *(int *)(v26 + 24);
    v117 = v24;
    __dst = &v24[v44];
    v45 = &v25[v44];
    v46 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    v113 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v45, 1, v46))
    {
      v47 = sub_1000039AC(&qword_10036A700);
      memcpy(__dst, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      v120(__dst, v45, v6);
      v57 = *(int *)(v46 + 20);
      v58 = &__dst[v57];
      v59 = &v45[v57];
      *(_DWORD *)v58 = *(_DWORD *)v59;
      v58[4] = v59[4];
      __dst[*(int *)(v46 + 24)] = v45[*(int *)(v46 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56))(__dst, 0, 1, v46);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v117, 0, 1, v26);
  }
  v60 = v15[7];
  v61 = &v13[v60];
  v62 = &v14[v60];
  *(_DWORD *)v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  v63 = v15[8];
  v64 = &v13[v63];
  v65 = &v14[v63];
  v64[4] = v65[4];
  *(_DWORD *)v64 = *(_DWORD *)v65;
  v66 = v15[9];
  v67 = &v13[v66];
  v68 = &v14[v66];
  *(_DWORD *)v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  v69 = v15[10];
  v70 = &v13[v69];
  v71 = &v14[v69];
  *(_DWORD *)v70 = *(_DWORD *)v71;
  v70[4] = v71[4];
  v72 = v15[11];
  v73 = &v13[v72];
  v74 = &v14[v72];
  *(_DWORD *)v73 = *(_DWORD *)v74;
  v73[4] = v74[4];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_10006E218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E224);
}

uint64_t sub_10006E224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074A2C(a1, a2, a3, &qword_10036A710);
}

uint64_t sub_10006E230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E23C);
}

uint64_t sub_10006E23C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100074ABC(a1, a2, a3, a4, &qword_10036A710);
}

void sub_10006E248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100074B60(a1, a2, a3, (uint64_t)&unk_1002C9AC0, (unint64_t *)&unk_10036B280, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_10006E278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E284);
}

uint64_t sub_10006E288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E294);
}

uint64_t sub_10006E298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000767A4(a1, a2, a3, (uint64_t)&unk_1002C9B98, (uint64_t)&unk_1002C9B98, (uint64_t)&unk_1002C9B98);
}

uint64_t sub_10006E2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E2CC);
}

uint64_t sub_10006E2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E2DC);
}

uint64_t sub_10006E2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000740D4(a1, a2, a3, (uint64_t)&unk_1002C9B98, (uint64_t)&unk_1002C9B98, (uint64_t)&unk_1002C9B98, (uint64_t)&unk_1002C9B98);
}

uint64_t sub_10006E2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E304);
}

uint64_t sub_10006E308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E314);
}

_QWORD *sub_10006E318(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_10006E3C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006E44C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006E4D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006E55C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006E5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E5EC);
}

uint64_t sub_10006E5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E5FC);
}

uint64_t sub_10006E600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E60C);
}

uint64_t sub_10006E610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E61C);
}

uint64_t sub_10006E620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E62C);
}

uint64_t sub_10006E630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E63C);
}

_QWORD *sub_10006E640(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
  }
  return a1;
}

uint64_t sub_10006E6E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10006E75C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10006E7DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10006E854(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_10006E8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E8D8);
}

uint64_t sub_10006E8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E8E8);
}

_QWORD *sub_10006E8EC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    v10 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
    v11 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
    v12 = a3[14];
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  }
  return a1;
}

uint64_t sub_10006E9CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t sub_10006EA80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_10006EB48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t sub_10006EBFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t sub_10006ECB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006ECBC);
}

uint64_t sub_10006ECC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006ECCC);
}

uint64_t sub_10006ECD0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1002C9B98;
    v4[2] = &unk_1002C9B98;
    v4[3] = &unk_1002C9B98;
    v4[4] = &unk_1002C9B98;
    v4[5] = &unk_1002C9B98;
    v4[6] = &unk_1002C9B98;
    v4[7] = &unk_1002C9B98;
    v4[8] = &unk_1002C9B98;
    v4[9] = &unk_1002C9B98;
    v4[10] = &unk_1002C9B98;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_10006ED54(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_10006EDF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10006EE60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10006EED4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10006EF44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10006EFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006EFC0);
}

uint64_t sub_10006EFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10006F05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F068);
}

uint64_t sub_10006F06C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t sub_10006F0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007EE4C(a1, a2, a3, (uint64_t)&unk_1002C9B98, (uint64_t)&unk_1002C9B98);
}

uint64_t sub_10006F10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006F118);
}

uint64_t sub_10006F11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F128);
}

uint64_t sub_10006F144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006F150);
}

uint64_t sub_10006F154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F160);
}

uint64_t sub_10006F164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007EE4C(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_1002C9B98);
}

uint64_t sub_10006F178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006F184);
}

uint64_t sub_10006F188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F194);
}

_QWORD *sub_10006F198(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  }
  return a1;
}

uint64_t sub_10006F25C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t sub_10006F2F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10006F394(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t sub_10006F42C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t sub_10006F4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006F4D0);
}

uint64_t sub_10006F4D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10006F56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F578);
}

uint64_t sub_10006F57C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  return result;
}

uint64_t sub_10006F5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000767A4(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)&unk_1002C9B98);
}

_QWORD *sub_10006F60C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_10006F6FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006F7C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v10;
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  LOBYTE(v10) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006F88C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006F950(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006FA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006FA20);
}

uint64_t sub_10006FA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006FA30);
}

uint64_t sub_10006FA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000740D4(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t", (uint64_t)&unk_1002C9B98);
}

uint64_t *sub_10006FA50(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036A760);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v10[v12[7]] = v11[v12[7]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v22 = a3[6];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
    v26 = *((_QWORD *)v25 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_1000039AC(&qword_10036A768);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v23, (uint64_t *)v24, v7);
      v28 = v25[5];
      v29 = &v23[v28];
      v30 = &v24[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      v31 = v25[6];
      v32 = &v23[v31];
      v33 = &v24[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v23[v25[7]] = v24[v25[7]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v26 + 56))(v23, 0, 1, v25);
    }
    v34 = a3[7];
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    *(_DWORD *)v35 = *(_DWORD *)v36;
    v35[4] = v36[4];
  }
  return a1;
}

uint64_t sub_10006FC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    v10(v5, v4);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v4);
  return result;
}

uint64_t sub_10006FD68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036A760);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v9[v11[7]] = v10[v11[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v20 = a3[6];
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v24 = *((_QWORD *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    v25 = sub_1000039AC(&qword_10036A768);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v21, (uint64_t)v22, v6);
    v26 = v23[5];
    v27 = &v21[v26];
    v28 = &v22[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = v23[6];
    v30 = &v21[v29];
    v31 = &v22[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v21[v23[7]] = v22[v23[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  v32 = a3[7];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t sub_10006FF78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int *v26;
  uint64_t v27;
  uint64_t (*v28)(_BYTE *, uint64_t, int *);
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;

  v6 = type metadata accessor for UnknownStorage(0);
  v59 = *(_QWORD *)(v6 - 8);
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 24);
  v58(a1, a2, v6);
  v7 = a3[5];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 16))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = *(_QWORD *)v17;
      v16[8] = v17[8];
      *(_QWORD *)v16 = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      LOBYTE(v18) = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v18;
      v8[v10[7]] = v9[v10[7]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
LABEL_6:
    v22 = sub_1000039AC(&qword_10036A760);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  v58((uint64_t)v8, (uint64_t)v9, v6);
  v44 = v10[5];
  v45 = &v8[v44];
  v46 = &v9[v44];
  v47 = *(_QWORD *)v46;
  v45[8] = v46[8];
  *(_QWORD *)v45 = v47;
  v48 = v10[6];
  v49 = &v8[v48];
  v50 = &v9[v48];
  LOBYTE(v47) = v50[8];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v47;
  v8[v10[7]] = v9[v10[7]];
LABEL_7:
  v23 = a3[6];
  v24 = (_BYTE *)(a1 + v23);
  v25 = (_BYTE *)(a2 + v23);
  v26 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      v58((uint64_t)v24, (uint64_t)v25, v6);
      v51 = v26[5];
      v52 = &v24[v51];
      v53 = &v25[v51];
      v54 = *(_QWORD *)v53;
      v52[8] = v53[8];
      *(_QWORD *)v52 = v54;
      v55 = v26[6];
      v56 = &v24[v55];
      v57 = &v25[v55];
      LOBYTE(v54) = v57[8];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = v54;
      v24[v26[7]] = v25[v26[7]];
      goto LABEL_13;
    }
    sub_100004030((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v38 = sub_1000039AC(&qword_10036A768);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 16))(v24, v25, v6);
  v31 = v26[5];
  v32 = &v24[v31];
  v33 = &v25[v31];
  v34 = *(_QWORD *)v33;
  v32[8] = v33[8];
  *(_QWORD *)v32 = v34;
  v35 = v26[6];
  v36 = &v24[v35];
  v37 = &v25[v35];
  LOBYTE(v34) = v37[8];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v34;
  v24[v26[7]] = v25[v26[7]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
LABEL_13:
  v39 = a3[7];
  v40 = a1 + v39;
  v41 = (int *)(a2 + v39);
  v42 = *v41;
  *(_BYTE *)(v40 + 4) = *((_BYTE *)v41 + 4);
  *(_DWORD *)v40 = v42;
  return a1;
}

uint64_t sub_1000702B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036A760);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v9[v11[7]] = v10[v11[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v20 = a3[6];
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v24 = *((_QWORD *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    v25 = sub_1000039AC(&qword_10036A768);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v21, (uint64_t)v22, v6);
    v26 = v23[5];
    v27 = &v21[v26];
    v28 = &v22[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = v23[6];
    v30 = &v21[v29];
    v31 = &v22[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v21[v23[7]] = v22[v23[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  v32 = a3[7];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t sub_1000704C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  int *v25;
  uint64_t v26;
  uint64_t (*v27)(_BYTE *, uint64_t, int *);
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;

  v6 = type metadata accessor for UnknownStorage(0);
  v54 = *(_QWORD *)(v6 - 8);
  v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 40);
  v53(a1, a2, v6);
  v7 = a3[5];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v54 + 32))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v8[v10[7]] = v9[v10[7]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
LABEL_6:
    v21 = sub_1000039AC(&qword_10036A760);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v53((uint64_t)v8, (uint64_t)v9, v6);
  v41 = v10[5];
  v42 = &v8[v41];
  v43 = &v9[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = v10[6];
  v45 = &v8[v44];
  v46 = &v9[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v8[v10[7]] = v9[v10[7]];
LABEL_7:
  v22 = a3[6];
  v23 = (_BYTE *)(a1 + v22);
  v24 = (_BYTE *)(a2 + v22);
  v25 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v26 = *((_QWORD *)v25 - 1);
  v27 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      v53((uint64_t)v23, (uint64_t)v24, v6);
      v47 = v25[5];
      v48 = &v23[v47];
      v49 = &v24[v47];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      v50 = v25[6];
      v51 = &v23[v50];
      v52 = &v24[v50];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v52[8];
      v23[v25[7]] = v24[v25[7]];
      goto LABEL_13;
    }
    sub_100004030((uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    v36 = sub_1000039AC(&qword_10036A768);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v54 + 32))(v23, v24, v6);
  v30 = v25[5];
  v31 = &v23[v30];
  v32 = &v24[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v31[8] = v32[8];
  v33 = v25[6];
  v34 = &v23[v33];
  v35 = &v24[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  v23[v25[7]] = v24[v25[7]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v26 + 56))(v23, 0, 1, v25);
LABEL_13:
  v37 = a3[7];
  v38 = a1 + v37;
  v39 = a2 + v37;
  *(_DWORD *)v38 = *(_DWORD *)v39;
  *(_BYTE *)(v38 + 4) = *(_BYTE *)(v39 + 4);
  return a1;
}

uint64_t sub_100070808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100070814);
}

uint64_t sub_100070814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_1000039AC(&qword_10036A760);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_1000039AC(&qword_10036A768);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1000708B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000708C0);
}

uint64_t sub_1000708C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_1000039AC(&qword_10036A760);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_1000039AC(&qword_10036A768);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100070968(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_10036BAE0, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, (unint64_t *)&unk_10036BAE8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = &unk_1002C9AC0;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

_QWORD *sub_100070A30(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_100070AEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100070B7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100070C10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100070CA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100070D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100070D3C);
}

uint64_t sub_100070D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 6u)
    v9 = 6;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  v10 = v9 - 6;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 6u)
    return v10;
  else
    return 0;
}

uint64_t sub_100070DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100070DCC);
}

uint64_t sub_100070DCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 6;
  return result;
}

uint64_t sub_100070E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007EE4C(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_1002C9E98);
}

uint64_t *sub_100070E58(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
  }
  return a1;
}

uint64_t sub_100070F24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t sub_100070FC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  return a1;
}

uint64_t sub_100071068(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t sub_100071108(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t sub_1000711A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000711B4);
}

uint64_t sub_1000711B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000711C4);
}

uint64_t sub_1000711C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007EE4C(a1, a2, a3, (uint64_t)&unk_1002C9AC0, (uint64_t)&unk_1002C9AC0);
}

uint64_t sub_1000711D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000711E4);
}

uint64_t sub_1000711E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000711F4);
}

uint64_t sub_1000711F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100071204);
}

uint64_t sub_100071208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071214);
}

_QWORD *sub_100071218(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_100071308(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000713CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 4);
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = v10;
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  LOBYTE(v10) = *(_BYTE *)(v19 + 4);
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100071498(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10007155C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100071620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007162C);
}

uint64_t sub_100071630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1000716C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000716D4);
}

uint64_t sub_1000716D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
  return result;
}

uint64_t sub_100071750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000740D4(a1, a2, a3, (uint64_t)&unk_1002C9AC0, (uint64_t)&unk_1002C9AC0, (uint64_t)&unk_1002C9AC0, (uint64_t)&unk_1002C9B98);
}

uint64_t *sub_10007176C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = a3[9];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = *(_QWORD *)v22;
    v21[8] = v22[8];
    *(_QWORD *)v21 = v23;
  }
  return a1;
}

uint64_t sub_10007186C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(_QWORD *)v20 = v22;
  return a1;
}

uint64_t sub_100071940(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v22;
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = v26;
  return a1;
}

uint64_t sub_100071A1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(_QWORD *)v20 = v22;
  return a1;
}

uint64_t sub_100071AF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(_QWORD *)v20 = v22;
  return a1;
}

uint64_t sub_100071BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100071BD0);
}

uint64_t sub_100071BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071BE0);
}

uint64_t sub_100071BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000740D4(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t");
}

uint64_t *sub_100071BFC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v23);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = a3[9];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    LODWORD(v16) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)v21 = (_DWORD)v16;
  }
  return a1;
}

uint64_t sub_100071CFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v15;
  return a1;
}

uint64_t sub_100071DD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v22;
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  return a1;
}

uint64_t sub_100071EAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v15;
  return a1;
}

uint64_t sub_100071F80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v15;
  return a1;
}

uint64_t sub_100072054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100072060);
}

uint64_t sub_100072064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100072070);
}

uint64_t sub_100072074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000740D4(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_1002C9AC0, (uint64_t)"\t", (uint64_t)&unk_1002C9AC0);
}

uint64_t *sub_100072090(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_1000039AC(&qword_10036A7A8);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      *(_DWORD *)v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      v25 = v15[7];
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_DWORD *)v26 = *(_DWORD *)v27;
      v26[4] = v27[4];
      v28 = v15[8];
      v29 = &v13[v28];
      v30 = &v14[v28];
      *(_DWORD *)v29 = *(_DWORD *)v30;
      v29[4] = v30[4];
      v13[v15[9]] = v14[v15[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    v31 = a3[7];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
    v35 = *((_QWORD *)v34 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_1000039AC(&qword_10036A7B0);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v32, (uint64_t *)v33, v7);
      v37 = v34[5];
      v38 = &v32[v37];
      v39 = &v33[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v34[6];
      v41 = &v32[v40];
      v42 = &v33[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v42[8];
      v43 = v34[7];
      v44 = &v32[v43];
      v45 = &v33[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      v46 = v34[8];
      v47 = &v32[v46];
      v48 = &v33[v46];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      v47[8] = v48[8];
      v49 = v34[9];
      v50 = &v32[v49];
      v51 = &v33[v49];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v50[8] = v51[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
    }
    v52 = a3[8];
    v53 = (char *)a1 + v52;
    v54 = (char *)a2 + v52;
    v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
    v56 = *((_QWORD *)v55 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v56 + 48))(v54, 1, v55))
    {
      v57 = sub_1000039AC(&qword_10036A7B8);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v53, (uint64_t *)v54, v7);
      v58 = v55[5];
      v59 = &v53[v58];
      v60 = &v54[v58];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      v59[8] = v60[8];
      v61 = v55[6];
      v62 = &v53[v61];
      v63 = &v54[v61];
      *(_DWORD *)v62 = *(_DWORD *)v63;
      v62[4] = v63[4];
      v64 = v55[7];
      v65 = &v53[v64];
      v66 = &v54[v64];
      *(_DWORD *)v65 = *(_DWORD *)v66;
      v65[4] = v66[4];
      v67 = v55[8];
      v68 = &v53[v67];
      v69 = &v54[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v69[8];
      v70 = v55[9];
      v71 = &v53[v70];
      v72 = &v54[v70];
      *(_DWORD *)v71 = *(_DWORD *)v72;
      v71[4] = v72[4];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
    }
  }
  return a1;
}

uint64_t sub_100072454(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + a2[6];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    v12(v5, v4);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    v12(v7, v4);
  v9 = a1 + a2[8];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  return result;
}

uint64_t sub_10007256C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A7A8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_DWORD *)v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    v26 = v14[8];
    v27 = &v12[v26];
    v28 = &v13[v26];
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v12[v14[9]] = v13[v14[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v29 = a3[7];
  v30 = (char *)(a1 + v29);
  v31 = (char *)(a2 + v29);
  v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v33 = *((_QWORD *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_1000039AC(&qword_10036A7B0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    v35 = v32[5];
    v36 = &v30[v35];
    v37 = &v31[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v32[6];
    v39 = &v30[v38];
    v40 = &v31[v38];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v41 = v32[7];
    v42 = &v30[v41];
    v43 = &v31[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v44 = v32[8];
    v45 = &v30[v44];
    v46 = &v31[v44];
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = v46[8];
    v47 = v32[9];
    v48 = &v30[v47];
    v49 = &v31[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  v50 = a3[8];
  v51 = (char *)(a1 + v50);
  v52 = (char *)(a2 + v50);
  v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v54 = *((_QWORD *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    v55 = sub_1000039AC(&qword_10036A7B8);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    v56 = v53[5];
    v57 = &v51[v56];
    v58 = &v52[v56];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v57[8] = v58[8];
    v59 = v53[6];
    v60 = &v51[v59];
    v61 = &v52[v59];
    *(_DWORD *)v60 = *(_DWORD *)v61;
    v60[4] = v61[4];
    v62 = v53[7];
    v63 = &v51[v62];
    v64 = &v52[v62];
    *(_DWORD *)v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    v65 = v53[8];
    v66 = &v51[v65];
    v67 = &v52[v65];
    *(_QWORD *)v66 = *(_QWORD *)v67;
    v66[8] = v67[8];
    v68 = v53[9];
    v69 = &v51[v68];
    v70 = &v52[v68];
    *(_DWORD *)v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t sub_100072904(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(_BYTE *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, int *);
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  int *v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, int *);
  int v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char v89;
  uint64_t v90;
  uint64_t v92;
  char *v93;
  char *v94;
  int v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char v144;
  void (*v145)(uint64_t, uint64_t, uint64_t);
  uint64_t v146;

  v6 = type metadata accessor for UnknownStorage(0);
  v146 = *(_QWORD *)(v6 - 8);
  v145 = *(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 24);
  v145(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v146 + 16))(v12, v13, v6);
      v19 = v14[5];
      v20 = &v12[v19];
      v21 = &v13[v19];
      v22 = *(_DWORD *)v21;
      v20[4] = v21[4];
      *(_DWORD *)v20 = v22;
      v23 = v14[6];
      v24 = &v12[v23];
      v25 = &v13[v23];
      LOBYTE(v22) = v25[4];
      *(_DWORD *)v24 = *(_DWORD *)v25;
      v24[4] = v22;
      v26 = v14[7];
      v27 = &v12[v26];
      v28 = &v13[v26];
      LOBYTE(v22) = v28[4];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v22;
      v29 = v14[8];
      v30 = &v12[v29];
      v31 = &v13[v29];
      LOBYTE(v22) = v31[4];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      v30[4] = v22;
      v12[v14[9]] = v13[v14[9]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
LABEL_6:
    v32 = sub_1000039AC(&qword_10036A7A8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  v145((uint64_t)v12, (uint64_t)v13, v6);
  v92 = v14[5];
  v93 = &v12[v92];
  v94 = &v13[v92];
  v95 = *(_DWORD *)v94;
  v93[4] = v94[4];
  *(_DWORD *)v93 = v95;
  v96 = v14[6];
  v97 = &v12[v96];
  v98 = &v13[v96];
  LOBYTE(v95) = v98[4];
  *(_DWORD *)v97 = *(_DWORD *)v98;
  v97[4] = v95;
  v99 = v14[7];
  v100 = &v12[v99];
  v101 = &v13[v99];
  LOBYTE(v95) = v101[4];
  *(_DWORD *)v100 = *(_DWORD *)v101;
  v100[4] = v95;
  v102 = v14[8];
  v103 = &v12[v102];
  v104 = &v13[v102];
  LOBYTE(v95) = v104[4];
  *(_DWORD *)v103 = *(_DWORD *)v104;
  v103[4] = v95;
  v12[v14[9]] = v13[v14[9]];
LABEL_7:
  v33 = a3[7];
  v34 = (char *)(a1 + v33);
  v35 = (char *)(a2 + v33);
  v36 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v37 = *((_QWORD *)v36 - 1);
  v38 = *(uint64_t (**)(char *, uint64_t, int *))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v34, v35, v6);
      v41 = v36[5];
      v42 = &v34[v41];
      v43 = &v35[v41];
      v44 = v43[8];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v44;
      v45 = v36[6];
      v46 = &v34[v45];
      v47 = &v35[v45];
      v48 = v47[8];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v48;
      v49 = v36[7];
      v50 = &v34[v49];
      v51 = &v35[v49];
      v52 = v51[8];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v50[8] = v52;
      v53 = v36[8];
      v54 = &v34[v53];
      v55 = &v35[v53];
      v56 = v55[8];
      *(_QWORD *)v54 = *(_QWORD *)v55;
      v54[8] = v56;
      v57 = v36[9];
      v58 = &v34[v57];
      v59 = &v35[v57];
      v60 = v59[8];
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v58[8] = v60;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    sub_100004030((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_12:
    v61 = sub_1000039AC(&qword_10036A7B0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_13;
  }
  v145((uint64_t)v34, (uint64_t)v35, v6);
  v105 = v36[5];
  v106 = &v34[v105];
  v107 = &v35[v105];
  v108 = v107[8];
  *(_QWORD *)v106 = *(_QWORD *)v107;
  v106[8] = v108;
  v109 = v36[6];
  v110 = &v34[v109];
  v111 = &v35[v109];
  v112 = v111[8];
  *(_QWORD *)v110 = *(_QWORD *)v111;
  v110[8] = v112;
  v113 = v36[7];
  v114 = &v34[v113];
  v115 = &v35[v113];
  v116 = v115[8];
  *(_QWORD *)v114 = *(_QWORD *)v115;
  v114[8] = v116;
  v117 = v36[8];
  v118 = &v34[v117];
  v119 = &v35[v117];
  v120 = v119[8];
  *(_QWORD *)v118 = *(_QWORD *)v119;
  v118[8] = v120;
  v121 = v36[9];
  v122 = &v34[v121];
  v123 = &v35[v121];
  v124 = v123[8];
  *(_QWORD *)v122 = *(_QWORD *)v123;
  v122[8] = v124;
LABEL_13:
  v62 = a3[8];
  v63 = (char *)(a1 + v62);
  v64 = (char *)(a2 + v62);
  v65 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v66 = *((_QWORD *)v65 - 1);
  v67 = *(uint64_t (**)(char *, uint64_t, int *))(v66 + 48);
  v68 = v67(v63, 1, v65);
  v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      v145((uint64_t)v63, (uint64_t)v64, v6);
      v125 = v65[5];
      v126 = &v63[v125];
      v127 = &v64[v125];
      v128 = v127[8];
      *(_QWORD *)v126 = *(_QWORD *)v127;
      v126[8] = v128;
      v129 = v65[6];
      v130 = &v63[v129];
      v131 = &v64[v129];
      v132 = v131[4];
      *(_DWORD *)v130 = *(_DWORD *)v131;
      v130[4] = v132;
      v133 = v65[7];
      v134 = &v63[v133];
      v135 = &v64[v133];
      v136 = v135[4];
      *(_DWORD *)v134 = *(_DWORD *)v135;
      v134[4] = v136;
      v137 = v65[8];
      v138 = &v63[v137];
      v139 = &v64[v137];
      v140 = v139[8];
      *(_QWORD *)v138 = *(_QWORD *)v139;
      v138[8] = v140;
      v141 = v65[9];
      v142 = &v63[v141];
      v143 = &v64[v141];
      v144 = v143[4];
      *(_DWORD *)v142 = *(_DWORD *)v143;
      v142[4] = v144;
      return a1;
    }
    sub_100004030((uint64_t)v63, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
    goto LABEL_18;
  }
  if (v69)
  {
LABEL_18:
    v90 = sub_1000039AC(&qword_10036A7B8);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v63, v64, v6);
  v70 = v65[5];
  v71 = &v63[v70];
  v72 = &v64[v70];
  v73 = v72[8];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v71[8] = v73;
  v74 = v65[6];
  v75 = &v63[v74];
  v76 = &v64[v74];
  v77 = v76[4];
  *(_DWORD *)v75 = *(_DWORD *)v76;
  v75[4] = v77;
  v78 = v65[7];
  v79 = &v63[v78];
  v80 = &v64[v78];
  v81 = v80[4];
  *(_DWORD *)v79 = *(_DWORD *)v80;
  v79[4] = v81;
  v82 = v65[8];
  v83 = &v63[v82];
  v84 = &v64[v82];
  v85 = v84[8];
  *(_QWORD *)v83 = *(_QWORD *)v84;
  v83[8] = v85;
  v86 = v65[9];
  v87 = &v63[v86];
  v88 = &v64[v86];
  v89 = v88[4];
  *(_DWORD *)v87 = *(_DWORD *)v88;
  v87[4] = v89;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v66 + 56))(v63, 0, 1, v65);
  return a1;
}

uint64_t sub_100072F28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A7A8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_DWORD *)v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    v26 = v14[8];
    v27 = &v12[v26];
    v28 = &v13[v26];
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v12[v14[9]] = v13[v14[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v29 = a3[7];
  v30 = (char *)(a1 + v29);
  v31 = (char *)(a2 + v29);
  v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v33 = *((_QWORD *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_1000039AC(&qword_10036A7B0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    v35 = v32[5];
    v36 = &v30[v35];
    v37 = &v31[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v32[6];
    v39 = &v30[v38];
    v40 = &v31[v38];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v41 = v32[7];
    v42 = &v30[v41];
    v43 = &v31[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v44 = v32[8];
    v45 = &v30[v44];
    v46 = &v31[v44];
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = v46[8];
    v47 = v32[9];
    v48 = &v30[v47];
    v49 = &v31[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  v50 = a3[8];
  v51 = (char *)(a1 + v50);
  v52 = (char *)(a2 + v50);
  v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v54 = *((_QWORD *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    v55 = sub_1000039AC(&qword_10036A7B8);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    v56 = v53[5];
    v57 = &v51[v56];
    v58 = &v52[v56];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v57[8] = v58[8];
    v59 = v53[6];
    v60 = &v51[v59];
    v61 = &v52[v59];
    *(_DWORD *)v60 = *(_DWORD *)v61;
    v60[4] = v61[4];
    v62 = v53[7];
    v63 = &v51[v62];
    v64 = &v52[v62];
    *(_DWORD *)v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    v65 = v53[8];
    v66 = &v51[v65];
    v67 = &v52[v65];
    *(_QWORD *)v66 = *(_QWORD *)v67;
    v66[8] = v67[8];
    v68 = v53[9];
    v69 = &v51[v68];
    v70 = &v52[v68];
    *(_DWORD *)v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t sub_1000732C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(_BYTE *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, int *);
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int *v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, int *);
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  void (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;

  v6 = type metadata accessor for UnknownStorage(0);
  v123 = *(_QWORD *)(v6 - 8);
  v122 = *(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 40);
  v122(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (_BYTE *)(a1 + v8);
  v12 = (_BYTE *)(a2 + v8);
  v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v123 + 32))(v11, v12, v6);
      v18 = v13[5];
      v19 = &v11[v18];
      v20 = &v12[v18];
      *(_DWORD *)v19 = *(_DWORD *)v20;
      v19[4] = v20[4];
      v21 = v13[6];
      v22 = &v11[v21];
      v23 = &v12[v21];
      *(_DWORD *)v22 = *(_DWORD *)v23;
      v22[4] = v23[4];
      v24 = v13[7];
      v25 = &v11[v24];
      v26 = &v12[v24];
      *(_DWORD *)v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      v27 = v13[8];
      v28 = &v11[v27];
      v29 = &v12[v27];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      v11[v13[9]] = v12[v13[9]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_100004030((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
LABEL_6:
    v30 = sub_1000039AC(&qword_10036A7A8);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  v122((uint64_t)v11, (uint64_t)v12, v6);
  v80 = v13[5];
  v81 = &v11[v80];
  v82 = &v12[v80];
  *(_DWORD *)v81 = *(_DWORD *)v82;
  v81[4] = v82[4];
  v83 = v13[6];
  v84 = &v11[v83];
  v85 = &v12[v83];
  *(_DWORD *)v84 = *(_DWORD *)v85;
  v84[4] = v85[4];
  v86 = v13[7];
  v87 = &v11[v86];
  v88 = &v12[v86];
  *(_DWORD *)v87 = *(_DWORD *)v88;
  v87[4] = v88[4];
  v89 = v13[8];
  v90 = &v11[v89];
  v91 = &v12[v89];
  *(_DWORD *)v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v11[v13[9]] = v12[v13[9]];
LABEL_7:
  v31 = a3[7];
  v32 = (char *)(a1 + v31);
  v33 = (char *)(a2 + v31);
  v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v35 = *((_QWORD *)v34 - 1);
  v36 = *(uint64_t (**)(char *, uint64_t, int *))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v32, v33, v6);
      v39 = v34[5];
      v40 = &v32[v39];
      v41 = &v33[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      v42 = v34[6];
      v43 = &v32[v42];
      v44 = &v33[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v34[7];
      v46 = &v32[v45];
      v47 = &v33[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      v48 = v34[8];
      v49 = &v32[v48];
      v50 = &v33[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v50[8];
      v51 = v34[9];
      v52 = &v32[v51];
      v53 = &v33[v51];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v52[8] = v53[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    sub_100004030((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_12:
    v54 = sub_1000039AC(&qword_10036A7B0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_13;
  }
  v122((uint64_t)v32, (uint64_t)v33, v6);
  v92 = v34[5];
  v93 = &v32[v92];
  v94 = &v33[v92];
  *(_QWORD *)v93 = *(_QWORD *)v94;
  v93[8] = v94[8];
  v95 = v34[6];
  v96 = &v32[v95];
  v97 = &v33[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v96[8] = v97[8];
  v98 = v34[7];
  v99 = &v32[v98];
  v100 = &v33[v98];
  *(_QWORD *)v99 = *(_QWORD *)v100;
  v99[8] = v100[8];
  v101 = v34[8];
  v102 = &v32[v101];
  v103 = &v33[v101];
  *(_QWORD *)v102 = *(_QWORD *)v103;
  v102[8] = v103[8];
  v104 = v34[9];
  v105 = &v32[v104];
  v106 = &v33[v104];
  *(_QWORD *)v105 = *(_QWORD *)v106;
  v105[8] = v106[8];
LABEL_13:
  v55 = a3[8];
  v56 = (char *)(a1 + v55);
  v57 = (char *)(a2 + v55);
  v58 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v59 = *((_QWORD *)v58 - 1);
  v60 = *(uint64_t (**)(char *, uint64_t, int *))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      v122((uint64_t)v56, (uint64_t)v57, v6);
      v107 = v58[5];
      v108 = &v56[v107];
      v109 = &v57[v107];
      *(_QWORD *)v108 = *(_QWORD *)v109;
      v108[8] = v109[8];
      v110 = v58[6];
      v111 = &v56[v110];
      v112 = &v57[v110];
      *(_DWORD *)v111 = *(_DWORD *)v112;
      v111[4] = v112[4];
      v113 = v58[7];
      v114 = &v56[v113];
      v115 = &v57[v113];
      *(_DWORD *)v114 = *(_DWORD *)v115;
      v114[4] = v115[4];
      v116 = v58[8];
      v117 = &v56[v116];
      v118 = &v57[v116];
      *(_QWORD *)v117 = *(_QWORD *)v118;
      v117[8] = v118[8];
      v119 = v58[9];
      v120 = &v56[v119];
      v121 = &v57[v119];
      *(_DWORD *)v120 = *(_DWORD *)v121;
      v120[4] = v121[4];
      return a1;
    }
    sub_100004030((uint64_t)v56, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
    goto LABEL_18;
  }
  if (v62)
  {
LABEL_18:
    v78 = sub_1000039AC(&qword_10036A7B8);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v56, v57, v6);
  v63 = v58[5];
  v64 = &v56[v63];
  v65 = &v57[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;
  v64[8] = v65[8];
  v66 = v58[6];
  v67 = &v56[v66];
  v68 = &v57[v66];
  *(_DWORD *)v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  v69 = v58[7];
  v70 = &v56[v69];
  v71 = &v57[v69];
  *(_DWORD *)v70 = *(_DWORD *)v71;
  v70[4] = v71[4];
  v72 = v58[8];
  v73 = &v56[v72];
  v74 = &v57[v72];
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v74[8];
  v75 = v58[9];
  v76 = &v56[v75];
  v77 = &v57[v75];
  *(_DWORD *)v76 = *(_DWORD *)v77;
  v76[4] = v77[4];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v59 + 56))(v56, 0, 1, v58);
  return a1;
}

uint64_t sub_1000738E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000738EC);
}

uint64_t sub_1000738EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_1000039AC(&qword_10036A7A8);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[6];
    }
    else
    {
      v14 = sub_1000039AC(&qword_10036A7B0);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[7];
      }
      else
      {
        v8 = sub_1000039AC(&qword_10036A7B8);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[8];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1000739B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000739C0);
}

uint64_t sub_1000739C0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_1000039AC(&qword_10036A7A8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v16 = sub_1000039AC(&qword_10036A7B0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        v10 = sub_1000039AC(&qword_10036A7B8);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[8];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100073A90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[5];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = "\t";
    sub_10001198C(319, &qword_10036BF38, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, &qword_10036BF40, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001198C(319, (unint64_t *)&unk_10036BF48, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 5, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100073B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100073B90);
}

uint64_t sub_100073B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100073BA0);
}

uint64_t sub_100073BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100073BC4);
}

uint64_t sub_100073BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100073BD4);
}

uint64_t sub_100073BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007EE4C(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t");
}

_QWORD *sub_100073BE8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v9[8] = v10[8];
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v11 = a3[7];
    v12 = a3[8];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    v13[8] = v14[8];
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_100073CC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100073D7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100073E38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100073EEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100073FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100073FAC);
}

uint64_t sub_100073FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36)) <= 3u)
    v9 = 3;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  v10 = v9 - 3;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36)) >= 3u)
    return v10;
  else
    return 0;
}

uint64_t sub_100074030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007403C);
}

uint64_t sub_10007403C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 3;
  return result;
}

uint64_t sub_1000740B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000740D4(a1, a2, a3, (uint64_t)&unk_1002CA0A0, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)&unk_1002CA0B8);
}

uint64_t sub_1000740D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  unint64_t v13;
  _QWORD v14[6];

  result = type metadata accessor for UnknownStorage(319);
  if (v13 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(result - 8) + 64;
    v14[1] = a4;
    v14[2] = a5;
    v14[3] = a5;
    v14[4] = a6;
    v14[5] = a7;
    swift_initStructMetadata(a1, 256, 6, v14, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100074164(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_1000039AC(&qword_10036A7C8);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v15[7];
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t sub_1000742E0(uint64_t a1, uint64_t a2)
{
  return sub_1000742EC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_1000742EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v10(a1, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = a3(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v6);
  return result;
}

uint64_t sub_100074390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A7C8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_1000744E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, int *);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = v12;
  v13 = *(int *)(a3 + 24);
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      v8((uint64_t)v14, (uint64_t)v15, v6);
      v35 = v16[5];
      v36 = &v14[v35];
      v37 = &v15[v35];
      v38 = v37[8];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v38;
      v39 = v16[6];
      v40 = &v14[v39];
      v41 = &v15[v39];
      v42 = v41[8];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v42;
      v43 = v16[7];
      v44 = &v14[v43];
      v45 = &v15[v43];
      v46 = v45[8];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v46;
      return a1;
    }
    sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v33 = sub_1000039AC(&qword_10036A7C8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v14, v15, v6);
  v21 = v16[5];
  v22 = &v14[v21];
  v23 = &v15[v21];
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  v25 = v16[6];
  v26 = &v14[v25];
  v27 = &v15[v25];
  v28 = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v28;
  v29 = v16[7];
  v30 = &v14[v29];
  v31 = &v15[v29];
  v32 = v31[8];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v32;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_1000746D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A7C8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_100074824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = (char *)(a1 + v10);
  v14 = (char *)(a2 + v10);
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v8((uint64_t)v13, (uint64_t)v14, v6);
      v31 = v15[5];
      v32 = &v13[v31];
      v33 = &v14[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v15[6];
      v35 = &v13[v34];
      v36 = &v14[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v15[7];
      v38 = &v13[v37];
      v39 = &v14[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      return a1;
    }
    sub_100004030((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v29 = sub_1000039AC(&qword_10036A7C8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  v20 = v15[5];
  v21 = &v13[v20];
  v22 = &v14[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = v15[6];
  v24 = &v13[v23];
  v25 = &v14[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  v26 = v15[7];
  v27 = &v13[v26];
  v28 = &v14[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_100074A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100074A20);
}

uint64_t sub_100074A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074A2C(a1, a2, a3, &qword_10036A7C8);
}

uint64_t sub_100074A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
  }
  else
  {
    v10 = sub_1000039AC(a4);
    v12 = a1 + *(int *)(a3 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  }
  return v11(v12, a2, v10);
}

uint64_t sub_100074AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100074AB0);
}

uint64_t sub_100074AB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100074ABC(a1, a2, a3, a4, &qword_10036A7C8);
}

uint64_t sub_100074ABC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
  }
  else
  {
    v12 = sub_1000039AC(a5);
    v14 = a1 + *(int *)(a4 + 24);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  }
  return v13(v14, a2, a2, v12);
}

void sub_100074B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100074B60(a1, a2, a3, (uint64_t)"\t", (unint64_t *)&unk_10036C178, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

void sub_100074B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[3];

  v10 = type metadata accessor for UnknownStorage(319);
  if (v11 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v10 - 8) + 64;
    v14[1] = a4;
    sub_10001198C(319, a5, a6);
    if (v13 <= 0x3F)
    {
      v14[2] = *(_QWORD *)(v12 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v14, a1 + 16);
    }
  }
}

uint64_t *sub_100074C00(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    v9 = a2[2];
    a1[1] = v8;
    a1[2] = v9;
    v10 = a3[7];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    v15 = a3[8];
    v16 = a3[9];
    v17 = (char *)v7 + v15;
    v18 = (char *)a2 + v15;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = (char *)v7 + v16;
    v20 = (char *)a2 + v16;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
  }
  return v7;
}

uint64_t *sub_100074CFC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a2[2];
  a1[2] = v8;
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  v14 = a3[8];
  v15 = a3[9];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = (char *)a1 + v15;
  v19 = (char *)a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  return a1;
}

uint64_t *sub_100074DD0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[2];
  v11 = a1[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  v20 = a3[9];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  return a1;
}

uint64_t sub_100074EB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  v11 = a3[9];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t *sub_100074F5C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[8];
  v14 = a3[9];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = (char *)a1 + v14;
  v18 = (char *)a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  return a1;
}

uint64_t sub_100075024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100075030);
}

uint64_t sub_100075030(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_1000750AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000750B8);
}

char *sub_1000750B8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_10007512C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = "\t";
    v4[5] = "\t";
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000751B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000751C0);
}

uint64_t sub_1000751C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000751D0);
}

_QWORD *sub_1000751D4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v9[8] = v10[8];
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v11 = a3[7];
    v12 = a3[8];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    v15[4] = v16[4];
    *(_DWORD *)v15 = *(_DWORD *)v16;
  }
  return a1;
}

uint64_t sub_1000752A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  *(_DWORD *)v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t sub_100075350(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  return a1;
}

uint64_t sub_100075400(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  *(_DWORD *)v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t sub_1000754A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  *(_DWORD *)v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t sub_100075550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007555C);
}

uint64_t sub_10007555C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 0xDu)
    v9 = 13;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 13;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 0xDu)
    return v10;
  else
    return 0;
}

uint64_t sub_1000755E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000755EC);
}

uint64_t sub_1000755EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 13;
  return result;
}

uint64_t sub_100075664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000767A4(a1, a2, a3, (uint64_t)&unk_1002CA0A0, (uint64_t)"\t", (uint64_t)&unk_1002C9AC0);
}

uint64_t *sub_100075680(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
  }
  return a1;
}

uint64_t sub_100075730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  return a1;
}

uint64_t sub_1000757B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  return a1;
}

uint64_t sub_10007583C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  return a1;
}

uint64_t sub_1000758C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  return a1;
}

uint64_t sub_100075944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100075950);
}

uint64_t sub_100075954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100075960);
}

uint64_t sub_100075964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_1002C9AC0);
}

char *sub_100075978(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = &a1[v9];
    v12 = &a2[v9];
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v13 = a2[v10];
    v11[4] = v12[4];
    a1[v10] = v13;
    v14 = a3[7];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_1000039AC(&qword_10036A7D8);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v8(v15, v16, v7);
      v21 = *(int *)(v17 + 20);
      v22 = &v15[v21];
      v23 = &v16[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      v24 = *(int *)(v17 + 24);
      v25 = &v15[v24];
      v26 = &v16[v24];
      *(_DWORD *)v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t sub_100075AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  return result;
}

uint64_t sub_100075B84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  v12 = *(_BYTE *)(a2 + v9);
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  *(_BYTE *)(a1 + v9) = v12;
  v13 = a3[7];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_1000039AC(&qword_10036A7D8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    v19 = *(int *)(v16 + 20);
    v20 = &v14[v19];
    v21 = &v15[v19];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    v22 = *(int *)(v16 + 24);
    v23 = &v14[v22];
    v24 = &v15[v22];
    *(_DWORD *)v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_100075CC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (int *)(a2 + v9);
  v12 = *v11;
  *(_BYTE *)(v10 + 4) = *((_BYTE *)v11 + 4);
  *(_DWORD *)v10 = v12;
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v13 = a3[7];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      v8((uint64_t)v14, (uint64_t)v15, v6);
      v31 = *(int *)(v16 + 20);
      v32 = &v14[v31];
      v33 = &v15[v31];
      v34 = v33[8];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v34;
      v35 = *(int *)(v16 + 24);
      v36 = &v14[v35];
      v37 = &v15[v35];
      v38 = v37[4];
      *(_DWORD *)v36 = *(_DWORD *)v37;
      v36[4] = v38;
      return a1;
    }
    sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v29 = sub_1000039AC(&qword_10036A7D8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v14, v15, v6);
  v21 = *(int *)(v16 + 20);
  v22 = &v14[v21];
  v23 = &v15[v21];
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  v25 = *(int *)(v16 + 24);
  v26 = &v14[v25];
  v27 = &v15[v25];
  v28 = v27[4];
  *(_DWORD *)v26 = *(_DWORD *)v27;
  v26[4] = v28;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_100075E8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  v12 = *(_BYTE *)(a2 + v9);
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  *(_BYTE *)(a1 + v9) = v12;
  v13 = a3[7];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_1000039AC(&qword_10036A7D8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    v19 = *(int *)(v16 + 20);
    v20 = &v14[v19];
    v21 = &v15[v19];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    v22 = *(int *)(v16 + 24);
    v23 = &v14[v22];
    v24 = &v15[v22];
    *(_DWORD *)v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_100075FCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a3[6];
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v13 = *(_BYTE *)(a2 + v10);
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  *(_BYTE *)(a1 + v10) = v13;
  v14 = a3[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      v8((uint64_t)v15, (uint64_t)v16, v6);
      v30 = *(int *)(v17 + 20);
      v31 = &v15[v30];
      v32 = &v16[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      v33 = *(int *)(v17 + 24);
      v34 = &v15[v33];
      v35 = &v16[v33];
      *(_DWORD *)v34 = *(_DWORD *)v35;
      v34[4] = v35[4];
      return a1;
    }
    sub_100004030((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v28 = sub_1000039AC(&qword_10036A7D8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
  v22 = *(int *)(v17 + 20);
  v23 = &v15[v22];
  v24 = &v16[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = *(int *)(v17 + 24);
  v26 = &v15[v25];
  v27 = &v16[v25];
  *(_DWORD *)v26 = *(_DWORD *)v27;
  v26[4] = v27[4];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_100076190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007619C);
}

uint64_t sub_10007619C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 5u)
      v9 = 5;
    else
      v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    v10 = v9 - 5;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 5u)
      return v10;
    else
      return 0;
  }
  else
  {
    v11 = sub_1000039AC(&qword_10036A7D8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v11);
  }
}

uint64_t sub_10007624C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100076258);
}

uint64_t sub_100076258(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 250)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 5;
      return result;
    }
    v10 = sub_1000039AC(&qword_10036A7D8);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000762FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1002C9AC0;
    v6[2] = &unk_1002C9AD8;
    sub_10001198C(319, (unint64_t *)&unk_10036C430, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t *sub_1000763A4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
  }
  return a1;
}

uint64_t sub_100076488(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t sub_100076540(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v22;
  return a1;
}

uint64_t sub_100076600(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t sub_1000766B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t sub_100076770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007677C);
}

uint64_t sub_100076780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007678C);
}

uint64_t sub_100076790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000767A4(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t", (uint64_t)"\t");
}

uint64_t sub_1000767A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  unint64_t v11;
  _QWORD v12[5];

  result = type metadata accessor for UnknownStorage(319);
  if (v11 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(result - 8) + 64;
    v12[1] = a4;
    v12[2] = a5;
    v12[3] = a6;
    v12[4] = a6;
    swift_initStructMetadata(a1, 256, 5, v12, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100076828(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v51;
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_1000039AC(&qword_10036A7E0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[v15[6]] = v14[v15[6]];
      v22 = v15[7];
      __dst = &v13[v22];
      v23 = &v14[v22];
      v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      v51 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v23, 1, v24))
      {
        v25 = sub_1000039AC(&qword_10036A7D8);
        memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)__dst, (uint64_t *)v23, v7);
        v26 = *(int *)(v24 + 20);
        v27 = &__dst[v26];
        v28 = &v23[v26];
        *(_QWORD *)v27 = *(_QWORD *)v28;
        v27[8] = v28[8];
        v29 = *(int *)(v24 + 24);
        v30 = &__dst[v29];
        v31 = &v23[v29];
        *(_DWORD *)v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        (*(void (**)(void))(v51 + 56))();
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    v32 = a3[7];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
    v36 = *((_QWORD *)v35 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
    {
      v37 = sub_1000039AC(&qword_10036A7E8);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v33, (uint64_t *)v34, v7);
      v38 = v35[5];
      v39 = &v33[v38];
      v40 = &v34[v38];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      v41 = v35[6];
      v42 = &v33[v41];
      v43 = &v34[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      v44 = v35[7];
      v45 = &v33[v44];
      v46 = &v34[v44];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      v47 = v35[8];
      v48 = &v33[v47];
      v49 = &v34[v47];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t sub_100076B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v12(v5, v4);
    v7 = v5 + *(int *)(v6 + 28);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
      v12(v7, v4);
  }
  v9 = a1 + *(int *)(a2 + 28);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  return result;
}

uint64_t sub_100076C6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v49;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A7E0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    v20 = v14[7];
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    v49 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v21, 1, v22))
    {
      v23 = sub_1000039AC(&qword_10036A7D8);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      v24 = *(int *)(v22 + 20);
      v25 = &__dst[v24];
      v26 = &v21[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      v27 = *(int *)(v22 + 24);
      v28 = &__dst[v27];
      v29 = &v21[v27];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v49 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v30 = a3[7];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v34 = *((_QWORD *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
  {
    v35 = sub_1000039AC(&qword_10036A7E8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    v36 = v33[5];
    v37 = &v31[v36];
    v38 = &v32[v36];
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v37[8] = v38[8];
    v39 = v33[6];
    v40 = &v31[v39];
    v41 = &v32[v39];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v40[8] = v41[8];
    v42 = v33[7];
    v43 = &v31[v42];
    v44 = &v32[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    v45 = v33[8];
    v46 = &v31[v45];
    v47 = &v32[v45];
    *(_QWORD *)v46 = *(_QWORD *)v47;
    v46[8] = v47[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t sub_100076F5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int *v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, int *);
  int v65;
  int v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char v82;
  uint64_t v83;
  uint64_t v85;
  char *v86;
  char *v87;
  char v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char v108;
  void (*v109)(uint64_t, char *, uint64_t);
  char *__dst;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;

  v6 = type metadata accessor for UnknownStorage(0);
  v112 = *(_QWORD *)(v6 - 8);
  v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 24);
  v111(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16((uint64_t)v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v111(v12, (uint64_t)v13, v6);
      v31 = v14[5];
      v32 = v12 + v31;
      v33 = &v13[v31];
      v34 = *(_DWORD *)v33;
      *(_BYTE *)(v32 + 4) = v33[4];
      *(_DWORD *)v32 = v34;
      *(_BYTE *)(v12 + v14[6]) = v13[v14[6]];
      v35 = v14[7];
      v36 = v12 + v35;
      v37 = &v13[v35];
      v38 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      v39 = *(_QWORD *)(v38 - 8);
      v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      v41 = v40(v36, 1, v38);
      v42 = v40((uint64_t)v37, 1, v38);
      if (v41)
      {
        if (!v42)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v112 + 16))(v36, v37, v6);
          v43 = *(int *)(v38 + 20);
          v44 = v36 + v43;
          v45 = &v37[v43];
          v46 = v45[8];
          *(_QWORD *)v44 = *(_QWORD *)v45;
          *(_BYTE *)(v44 + 8) = v46;
          v47 = *(int *)(v38 + 24);
          v48 = v36 + v47;
          v49 = &v37[v47];
          v50 = v49[4];
          *(_DWORD *)v48 = *(_DWORD *)v49;
          *(_BYTE *)(v48 + 4) = v50;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v42)
        {
          v111(v36, (uint64_t)v37, v6);
          v101 = *(int *)(v38 + 20);
          v102 = v36 + v101;
          v103 = &v37[v101];
          v104 = v103[8];
          *(_QWORD *)v102 = *(_QWORD *)v103;
          *(_BYTE *)(v102 + 8) = v104;
          v105 = *(int *)(v38 + 24);
          v106 = v36 + v105;
          v107 = &v37[v105];
          v108 = v107[4];
          *(_DWORD *)v106 = *(_DWORD *)v107;
          *(_BYTE *)(v106 + 4) = v108;
          goto LABEL_14;
        }
        sub_100004030(v36, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A7D8) - 8) + 64);
      v29 = (void *)v36;
      v30 = v37;
LABEL_8:
      memcpy(v29, v30, v28);
      goto LABEL_14;
    }
    sub_100004030(v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A7E0) - 8) + 64);
    v29 = (void *)v12;
    v30 = v13;
    goto LABEL_8;
  }
  if (v18)
    goto LABEL_7;
  v109 = *(void (**)(uint64_t, char *, uint64_t))(v112 + 16);
  v109(v12, v13, v6);
  v19 = v14[5];
  v20 = v12 + v19;
  v21 = &v13[v19];
  v22 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v21[4];
  *(_DWORD *)v20 = v22;
  *(_BYTE *)(v12 + v14[6]) = v13[v14[6]];
  v23 = v14[7];
  __dst = (char *)(v12 + v23);
  v24 = &v13[v23];
  v25 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = sub_1000039AC(&qword_10036A7D8);
    memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v109((uint64_t)__dst, v24, v6);
    v51 = *(int *)(v25 + 20);
    v52 = &__dst[v51];
    v53 = &v24[v51];
    v54 = v53[8];
    *(_QWORD *)v52 = *(_QWORD *)v53;
    v52[8] = v54;
    v55 = *(int *)(v25 + 24);
    v56 = &__dst[v55];
    v57 = &v24[v55];
    v58 = v57[4];
    *(_DWORD *)v56 = *(_DWORD *)v57;
    v56[4] = v58;
    (*(void (**)(void))(v26 + 56))();
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
LABEL_14:
  v59 = a3[7];
  v60 = (char *)(a1 + v59);
  v61 = (char *)(a2 + v59);
  v62 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v63 = *((_QWORD *)v62 - 1);
  v64 = *(uint64_t (**)(char *, uint64_t, int *))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (!v65)
  {
    if (!v66)
    {
      v111((uint64_t)v60, (uint64_t)v61, v6);
      v85 = v62[5];
      v86 = &v60[v85];
      v87 = &v61[v85];
      v88 = v87[8];
      *(_QWORD *)v86 = *(_QWORD *)v87;
      v86[8] = v88;
      v89 = v62[6];
      v90 = &v60[v89];
      v91 = &v61[v89];
      v92 = v91[8];
      *(_QWORD *)v90 = *(_QWORD *)v91;
      v90[8] = v92;
      v93 = v62[7];
      v94 = &v60[v93];
      v95 = &v61[v93];
      v96 = v95[8];
      *(_QWORD *)v94 = *(_QWORD *)v95;
      v94[8] = v96;
      v97 = v62[8];
      v98 = &v60[v97];
      v99 = &v61[v97];
      v100 = v99[8];
      *(_QWORD *)v98 = *(_QWORD *)v99;
      v98[8] = v100;
      return a1;
    }
    sub_100004030((uint64_t)v60, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
    goto LABEL_19;
  }
  if (v66)
  {
LABEL_19:
    v83 = sub_1000039AC(&qword_10036A7E8);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v60, v61, v6);
  v67 = v62[5];
  v68 = &v60[v67];
  v69 = &v61[v67];
  v70 = v69[8];
  *(_QWORD *)v68 = *(_QWORD *)v69;
  v68[8] = v70;
  v71 = v62[6];
  v72 = &v60[v71];
  v73 = &v61[v71];
  v74 = v73[8];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  v72[8] = v74;
  v75 = v62[7];
  v76 = &v60[v75];
  v77 = &v61[v75];
  v78 = v77[8];
  *(_QWORD *)v76 = *(_QWORD *)v77;
  v76[8] = v78;
  v79 = v62[8];
  v80 = &v60[v79];
  v81 = &v61[v79];
  v82 = v81[8];
  *(_QWORD *)v80 = *(_QWORD *)v81;
  v80[8] = v82;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v63 + 56))(v60, 0, 1, v62);
  return a1;
}

uint64_t sub_1000774B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v49;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A7E0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    v20 = v14[7];
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    v49 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v21, 1, v22))
    {
      v23 = sub_1000039AC(&qword_10036A7D8);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      v24 = *(int *)(v22 + 20);
      v25 = &__dst[v24];
      v26 = &v21[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      v27 = *(int *)(v22 + 24);
      v28 = &__dst[v27];
      v29 = &v21[v27];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v49 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v30 = a3[7];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v34 = *((_QWORD *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
  {
    v35 = sub_1000039AC(&qword_10036A7E8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    v36 = v33[5];
    v37 = &v31[v36];
    v38 = &v32[v36];
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v37[8] = v38[8];
    v39 = v33[6];
    v40 = &v31[v39];
    v41 = &v32[v39];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v40[8] = v41[8];
    v42 = v33[7];
    v43 = &v31[v42];
    v44 = &v32[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    v45 = v33[8];
    v46 = &v31[v45];
    v47 = &v32[v45];
    *(_QWORD *)v46 = *(_QWORD *)v47;
    v46[8] = v47[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t sub_1000777A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  uint64_t (*v57)(char *, uint64_t, int *);
  int v58;
  int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void (*v92)(uint64_t, char *, uint64_t);
  char *__dst;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;

  v6 = type metadata accessor for UnknownStorage(0);
  v95 = *(_QWORD *)(v6 - 8);
  v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 40);
  v94(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = (char *)(a2 + v8);
  v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15((uint64_t)v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      v94(v11, (uint64_t)v12, v6);
      v29 = v13[5];
      v30 = v11 + v29;
      v31 = &v12[v29];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      *(_BYTE *)(v30 + 4) = v31[4];
      *(_BYTE *)(v11 + v13[6]) = v12[v13[6]];
      v32 = v13[7];
      v33 = v11 + v32;
      v34 = &v12[v32];
      v35 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      v36 = *(_QWORD *)(v35 - 8);
      v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      v38 = v37(v33, 1, v35);
      v39 = v37((uint64_t)v34, 1, v35);
      if (v38)
      {
        if (!v39)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v95 + 32))(v33, v34, v6);
          v40 = *(int *)(v35 + 20);
          v41 = v33 + v40;
          v42 = &v34[v40];
          *(_QWORD *)v41 = *(_QWORD *)v42;
          *(_BYTE *)(v41 + 8) = v42[8];
          v43 = *(int *)(v35 + 24);
          v44 = v33 + v43;
          v45 = &v34[v43];
          *(_DWORD *)v44 = *(_DWORD *)v45;
          *(_BYTE *)(v44 + 4) = v45[4];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v39)
        {
          v94(v33, (uint64_t)v34, v6);
          v86 = *(int *)(v35 + 20);
          v87 = v33 + v86;
          v88 = &v34[v86];
          *(_QWORD *)v87 = *(_QWORD *)v88;
          *(_BYTE *)(v87 + 8) = v88[8];
          v89 = *(int *)(v35 + 24);
          v90 = v33 + v89;
          v91 = &v34[v89];
          *(_DWORD *)v90 = *(_DWORD *)v91;
          *(_BYTE *)(v90 + 4) = v91[4];
          goto LABEL_14;
        }
        sub_100004030(v33, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A7D8) - 8) + 64);
      v27 = (void *)v33;
      v28 = v34;
LABEL_8:
      memcpy(v27, v28, v26);
      goto LABEL_14;
    }
    sub_100004030(v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A7E0) - 8) + 64);
    v27 = (void *)v11;
    v28 = v12;
    goto LABEL_8;
  }
  if (v17)
    goto LABEL_7;
  v92 = *(void (**)(uint64_t, char *, uint64_t))(v95 + 32);
  v92(v11, v12, v6);
  v18 = v13[5];
  v19 = v11 + v18;
  v20 = &v12[v18];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = v20[4];
  *(_BYTE *)(v11 + v13[6]) = v12[v13[6]];
  v21 = v13[7];
  __dst = (char *)(v11 + v21);
  v22 = &v12[v21];
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = sub_1000039AC(&qword_10036A7D8);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v92((uint64_t)__dst, v22, v6);
    v46 = *(int *)(v23 + 20);
    v47 = &__dst[v46];
    v48 = &v22[v46];
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    v49 = *(int *)(v23 + 24);
    v50 = &__dst[v49];
    v51 = &v22[v49];
    *(_DWORD *)v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    (*(void (**)(void))(v24 + 56))();
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
LABEL_14:
  v52 = a3[7];
  v53 = (char *)(a1 + v52);
  v54 = (char *)(a2 + v52);
  v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v56 = *((_QWORD *)v55 - 1);
  v57 = *(uint64_t (**)(char *, uint64_t, int *))(v56 + 48);
  v58 = v57(v53, 1, v55);
  v59 = v57(v54, 1, v55);
  if (!v58)
  {
    if (!v59)
    {
      v94((uint64_t)v53, (uint64_t)v54, v6);
      v74 = v55[5];
      v75 = &v53[v74];
      v76 = &v54[v74];
      *(_QWORD *)v75 = *(_QWORD *)v76;
      v75[8] = v76[8];
      v77 = v55[6];
      v78 = &v53[v77];
      v79 = &v54[v77];
      *(_QWORD *)v78 = *(_QWORD *)v79;
      v78[8] = v79[8];
      v80 = v55[7];
      v81 = &v53[v80];
      v82 = &v54[v80];
      *(_QWORD *)v81 = *(_QWORD *)v82;
      v81[8] = v82[8];
      v83 = v55[8];
      v84 = &v53[v83];
      v85 = &v54[v83];
      *(_QWORD *)v84 = *(_QWORD *)v85;
      v84[8] = v85[8];
      return a1;
    }
    sub_100004030((uint64_t)v53, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
    goto LABEL_19;
  }
  if (v59)
  {
LABEL_19:
    v72 = sub_1000039AC(&qword_10036A7E8);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v53, v54, v6);
  v60 = v55[5];
  v61 = &v53[v60];
  v62 = &v54[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  v61[8] = v62[8];
  v63 = v55[6];
  v64 = &v53[v63];
  v65 = &v54[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;
  v64[8] = v65[8];
  v66 = v55[7];
  v67 = &v53[v66];
  v68 = &v54[v66];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v67[8] = v68[8];
  v69 = v55[8];
  v70 = &v53[v69];
  v71 = &v54[v69];
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v70[8] = v71[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
  return a1;
}

uint64_t sub_100077CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100077CFC);
}

uint64_t sub_100077CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007AA50(a1, a2, a3, &qword_10036A7E8);
}

uint64_t sub_100077D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100077D14);
}

uint64_t sub_100077D14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10007AB08(a1, a2, a3, a4, &qword_10036A7E8);
}

void sub_100077D20(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_1002C9AC0;
    sub_10001198C(319, &qword_10036C550, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, (unint64_t *)&unk_10036C558, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

uint64_t *sub_100077DE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
  }
  return a1;
}

uint64_t sub_100077E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

uint64_t sub_100077F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  return a1;
}

uint64_t sub_100077FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

uint64_t sub_100078028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

uint64_t sub_1000780AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000780B8);
}

uint64_t sub_1000780BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000780C8);
}

uint64_t sub_1000780CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)"\t", (uint64_t)"\t");
}

uint64_t sub_1000780DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v9;
  _QWORD v10[3];

  result = type metadata accessor for UnknownStorage(319);
  if (v9 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(result - 8) + 64;
    v10[1] = a4;
    v10[2] = a5;
    swift_initStructMetadata(a1, 256, 3, v10, a1 + 16);
    return 0;
  }
  return result;
}

char *sub_100078158(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = &a1[v9];
    v12 = &a2[v9];
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = &a1[v10];
    v14 = &a2[v10];
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    v15 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    v16 = &a1[v15];
    v17 = &a2[v15];
    v18 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    if (v20(v17, 1, v18))
    {
      v21 = sub_1000039AC(&qword_10036A7F0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v8(v16, v17, v7);
      v23 = *(int *)(v18 + 20);
      v24 = &v16[v23];
      v25 = &v17[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      v26 = *(int *)(v18 + 24);
      v27 = &v16[v26];
      v28 = &v17[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v29 = a3[9];
    v30 = &a1[v29];
    v31 = &a2[v29];
    if (v20(v31, 1, v18))
    {
      v32 = sub_1000039AC(&qword_10036A7F0);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v8(v30, v31, v7);
      v33 = *(int *)(v18 + 20);
      v34 = &v30[v33];
      v35 = &v31[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = *(int *)(v18 + 24);
      v37 = &v30[v36];
      v38 = &v31[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v30, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t sub_100078388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 32);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6))
    v10(v5, v4);
  v8 = a1 + *(int *)(a2 + 36);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  return result;
}

uint64_t sub_100078464(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1, v17))
  {
    v20 = sub_1000039AC(&qword_10036A7F0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v15, (uint64_t)v16, v6);
    v21 = *(int *)(v17 + 20);
    v22 = &v15[v21];
    v23 = &v16[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = *(int *)(v17 + 24);
    v25 = &v15[v24];
    v26 = &v16[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v27 = a3[9];
  v28 = (char *)(a1 + v27);
  v29 = (char *)(a2 + v27);
  if (v19(v29, 1, v17))
  {
    v30 = sub_1000039AC(&qword_10036A7F0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v28, (uint64_t)v29, v6);
    v31 = *(int *)(v17 + 20);
    v32 = &v28[v31];
    v33 = &v29[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = *(int *)(v17 + 24);
    v35 = &v28[v34];
    v36 = &v29[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v28, 0, 1, v17);
  }
  return a1;
}

uint64_t sub_100078668(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  char *v48;
  char v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;

  v6 = type metadata accessor for UnknownStorage(0);
  v63 = *(_QWORD *)(v6 - 8);
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 24);
  v62(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = a3[8];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v15, v16, v6);
      v22 = *(int *)(v17 + 20);
      v23 = &v15[v22];
      v24 = &v16[v22];
      v25 = v24[8];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v25;
      v26 = *(int *)(v17 + 24);
      v27 = &v15[v26];
      v28 = &v16[v26];
      v29 = v28[8];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v29;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_100004030((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_6:
    v30 = sub_1000039AC(&qword_10036A7F0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  v62((uint64_t)v15, (uint64_t)v16, v6);
  v46 = *(int *)(v17 + 20);
  v47 = &v15[v46];
  v48 = &v16[v46];
  v49 = v48[8];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v47[8] = v49;
  v50 = *(int *)(v17 + 24);
  v51 = &v15[v50];
  v52 = &v16[v50];
  v53 = v52[8];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  v51[8] = v53;
LABEL_7:
  v31 = a3[9];
  v32 = (char *)(a1 + v31);
  v33 = (char *)(a2 + v31);
  v34 = v19((char *)(a1 + v31), 1, v17);
  v35 = v19(v33, 1, v17);
  if (!v34)
  {
    if (!v35)
    {
      v62((uint64_t)v32, (uint64_t)v33, v6);
      v54 = *(int *)(v17 + 20);
      v55 = &v32[v54];
      v56 = &v33[v54];
      v57 = v56[8];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      v55[8] = v57;
      v58 = *(int *)(v17 + 24);
      v59 = &v32[v58];
      v60 = &v33[v58];
      v61 = v60[8];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      v59[8] = v61;
      return a1;
    }
    sub_100004030((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v44 = sub_1000039AC(&qword_10036A7F0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v32, v33, v6);
  v36 = *(int *)(v17 + 20);
  v37 = &v32[v36];
  v38 = &v33[v36];
  v39 = v38[8];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v39;
  v40 = *(int *)(v17 + 24);
  v41 = &v32[v40];
  v42 = &v33[v40];
  v43 = v42[8];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v43;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v32, 0, 1, v17);
  return a1;
}

uint64_t sub_10007898C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1, v17))
  {
    v20 = sub_1000039AC(&qword_10036A7F0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v15, (uint64_t)v16, v6);
    v21 = *(int *)(v17 + 20);
    v22 = &v15[v21];
    v23 = &v16[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = *(int *)(v17 + 24);
    v25 = &v15[v24];
    v26 = &v16[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v27 = a3[9];
  v28 = (char *)(a1 + v27);
  v29 = (char *)(a2 + v27);
  if (v19(v29, 1, v17))
  {
    v30 = sub_1000039AC(&qword_10036A7F0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v28, (uint64_t)v29, v6);
    v31 = *(int *)(v17 + 20);
    v32 = &v28[v31];
    v33 = &v29[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = *(int *)(v17 + 24);
    v35 = &v28[v34];
    v36 = &v29[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v28, 0, 1, v17);
  }
  return a1;
}

uint64_t sub_100078B90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;

  v6 = type metadata accessor for UnknownStorage(0);
  v54 = *(_QWORD *)(v6 - 8);
  v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 40);
  v53(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v14, v15, v6);
      v21 = *(int *)(v16 + 20);
      v22 = &v14[v21];
      v23 = &v15[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      v24 = *(int *)(v16 + 24);
      v25 = &v14[v24];
      v26 = &v15[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_6:
    v27 = sub_1000039AC(&qword_10036A7F0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v53((uint64_t)v14, (uint64_t)v15, v6);
  v41 = *(int *)(v16 + 20);
  v42 = &v14[v41];
  v43 = &v15[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = *(int *)(v16 + 24);
  v45 = &v14[v44];
  v46 = &v15[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
LABEL_7:
  v28 = a3[9];
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = v18((char *)(a1 + v28), 1, v16);
  v32 = v18(v30, 1, v16);
  if (!v31)
  {
    if (!v32)
    {
      v53((uint64_t)v29, (uint64_t)v30, v6);
      v47 = *(int *)(v16 + 20);
      v48 = &v29[v47];
      v49 = &v30[v47];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      v50 = *(int *)(v16 + 24);
      v51 = &v29[v50];
      v52 = &v30[v50];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v52[8];
      return a1;
    }
    sub_100004030((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v39 = sub_1000039AC(&qword_10036A7F0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v29, v30, v6);
  v33 = *(int *)(v16 + 20);
  v34 = &v29[v33];
  v35 = &v30[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  v36 = *(int *)(v16 + 24);
  v37 = &v29[v36];
  v38 = &v30[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v38[8];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v29, 0, 1, v16);
  return a1;
}

uint64_t sub_100078EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100078EB8);
}

uint64_t sub_100078EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 249)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 6u)
      v9 = 6;
    else
      v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    v10 = v9 - 6;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 6u)
      return v10;
    else
      return 0;
  }
  else
  {
    v11 = sub_1000039AC(&qword_10036A7F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v11);
  }
}

uint64_t sub_100078F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100078F74);
}

uint64_t sub_100078F74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 249)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 6;
      return result;
    }
    v10 = sub_1000039AC(&qword_10036A7F0);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100079018(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];
  uint64_t v7;
  uint64_t v8;

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1002C9AC0;
    v6[2] = &unk_1002C9AC0;
    v6[3] = &unk_1002C9E98;
    sub_10001198C(319, (unint64_t *)&unk_10036C670, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000790C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000790CC);
}

uint64_t sub_1000790D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000790DC);
}

uint64_t sub_1000790E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000790EC);
}

uint64_t sub_1000790F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000790FC);
}

uint64_t *sub_100079100(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, int *);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v62;
  char *__dst;
  void (*v64)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    v16 = *((_QWORD *)v15 - 1);
    v64 = v8;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_1000039AC(&qword_10036A7E0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8(v13, v14, v7);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[v15[6]] = v14[v15[6]];
      v22 = v15[7];
      __dst = &v13[v22];
      v23 = &v14[v22];
      v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      v62 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v23, 1, v24))
      {
        v25 = sub_1000039AC(&qword_10036A7D8);
        memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v8(__dst, v23, v7);
        v26 = *(int *)(v24 + 20);
        v27 = &__dst[v26];
        v28 = &v23[v26];
        *(_QWORD *)v27 = *(_QWORD *)v28;
        v27[8] = v28[8];
        v29 = *(int *)(v24 + 24);
        v30 = &__dst[v29];
        v31 = &v23[v29];
        *(_DWORD *)v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        (*(void (**)(void))(v62 + 56))();
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    v32 = a3[7];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    v36 = *((_QWORD *)v35 - 1);
    v37 = *(unsigned int (**)(char *, uint64_t, int *))(v36 + 48);
    if (v37(v34, 1, v35))
    {
      v38 = sub_1000039AC(&qword_10036A7F8);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v64(v33, v34, v7);
      v39 = v35[5];
      v40 = &v33[v39];
      v41 = &v34[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      v42 = v35[6];
      v43 = &v33[v42];
      v44 = &v34[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v35[7];
      v46 = &v33[v45];
      v47 = &v34[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
    }
    v48 = a3[8];
    v49 = (char *)a1 + v48;
    v50 = (char *)a2 + v48;
    if (v37(v50, 1, v35))
    {
      v51 = sub_1000039AC(&qword_10036A7F8);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      v64(v49, v50, v7);
      v52 = v35[5];
      v53 = &v49[v52];
      v54 = &v50[v52];
      *(_QWORD *)v53 = *(_QWORD *)v54;
      v53[8] = v54[8];
      v55 = v35[6];
      v56 = &v49[v55];
      v57 = &v50[v55];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = v57[8];
      v58 = v35[7];
      v59 = &v49[v58];
      v60 = &v50[v58];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      v59[8] = v60[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v49, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t sub_1000794C4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  void (*v14)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v14(a1, v4);
  v5 = a1 + a2[6];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v14(v5, v4);
    v7 = v5 + *(int *)(v6 + 28);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
      v14(v7, v4);
  }
  v9 = a1 + a2[7];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  if (!v11(v9, 1, v10))
    v14(v9, v4);
  v12 = a1 + a2[8];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12, 1, v10);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v12, v4);
  return result;
}

uint64_t sub_10007961C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, int *);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v60;
  char *__dst;
  void (*v62)(char *, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  v62 = (void (*)(char *, char *, uint64_t))v7;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A7E0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    v20 = v14[7];
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    v60 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v21, 1, v22))
    {
      v23 = sub_1000039AC(&qword_10036A7D8);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      v24 = *(int *)(v22 + 20);
      v25 = &__dst[v24];
      v26 = &v21[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      v27 = *(int *)(v22 + 24);
      v28 = &__dst[v27];
      v29 = &v21[v27];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v60 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v30 = a3[7];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v34 = *((_QWORD *)v33 - 1);
  v35 = *(unsigned int (**)(char *, uint64_t, int *))(v34 + 48);
  if (v35(v32, 1, v33))
  {
    v36 = sub_1000039AC(&qword_10036A7F8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v62(v31, v32, v6);
    v37 = v33[5];
    v38 = &v31[v37];
    v39 = &v32[v37];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    v40 = v33[6];
    v41 = &v31[v40];
    v42 = &v32[v40];
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    v43 = v33[7];
    v44 = &v31[v43];
    v45 = &v32[v43];
    *(_QWORD *)v44 = *(_QWORD *)v45;
    v44[8] = v45[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  v46 = a3[8];
  v47 = (char *)(a1 + v46);
  v48 = (char *)(a2 + v46);
  if (v35(v48, 1, v33))
  {
    v49 = sub_1000039AC(&qword_10036A7F8);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v62(v47, v48, v6);
    v50 = v33[5];
    v51 = &v47[v50];
    v52 = &v48[v50];
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
    v53 = v33[6];
    v54 = &v47[v53];
    v55 = &v48[v53];
    *(_QWORD *)v54 = *(_QWORD *)v55;
    v54[8] = v55[8];
    v56 = v33[7];
    v57 = &v47[v56];
    v58 = &v48[v56];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v57[8] = v58[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v47, 0, 1, v33);
  }
  return a1;
}

uint64_t sub_1000799B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int *v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t, int *);
  int v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char v97;
  uint64_t v98;
  uint64_t v100;
  char *v101;
  char *v102;
  char v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char v131;
  void (*v132)(uint64_t, char *, uint64_t);
  char *__dst;
  void (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;

  v6 = type metadata accessor for UnknownStorage(0);
  v135 = *(_QWORD *)(v6 - 8);
  v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 24);
  v134(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16((uint64_t)v13, 1, v14);
  v136 = v6;
  if (!v17)
  {
    if (!v18)
    {
      v134(v12, (uint64_t)v13, v6);
      v32 = v14[5];
      v33 = v12 + v32;
      v34 = &v13[v32];
      v35 = *(_DWORD *)v34;
      *(_BYTE *)(v33 + 4) = v34[4];
      *(_DWORD *)v33 = v35;
      *(_BYTE *)(v12 + v14[6]) = v13[v14[6]];
      v36 = v14[7];
      v37 = v12 + v36;
      v38 = &v13[v36];
      v39 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      v40 = *(_QWORD *)(v39 - 8);
      v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
      v42 = v41(v37, 1, v39);
      v43 = v41((uint64_t)v38, 1, v39);
      if (v42)
      {
        if (!v43)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v135 + 16))(v37, v38, v136);
          v44 = *(int *)(v39 + 20);
          v45 = v37 + v44;
          v46 = &v38[v44];
          v47 = v46[8];
          *(_QWORD *)v45 = *(_QWORD *)v46;
          *(_BYTE *)(v45 + 8) = v47;
          v48 = *(int *)(v39 + 24);
          v49 = v37 + v48;
          v50 = &v38[v48];
          v51 = v50[4];
          *(_DWORD *)v49 = *(_DWORD *)v50;
          *(_BYTE *)(v49 + 4) = v51;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v43)
        {
          v134(v37, (uint64_t)v38, v136);
          v124 = *(int *)(v39 + 20);
          v125 = v37 + v124;
          v126 = &v38[v124];
          v127 = v126[8];
          *(_QWORD *)v125 = *(_QWORD *)v126;
          *(_BYTE *)(v125 + 8) = v127;
          v128 = *(int *)(v39 + 24);
          v129 = v37 + v128;
          v130 = &v38[v128];
          v131 = v130[4];
          *(_DWORD *)v129 = *(_DWORD *)v130;
          *(_BYTE *)(v129 + 4) = v131;
          goto LABEL_14;
        }
        sub_100004030(v37, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A7D8) - 8) + 64);
      v30 = (void *)v37;
      v31 = v38;
LABEL_8:
      memcpy(v30, v31, v29);
      goto LABEL_14;
    }
    sub_100004030(v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A7E0) - 8) + 64);
    v30 = (void *)v12;
    v31 = v13;
    goto LABEL_8;
  }
  if (v18)
    goto LABEL_7;
  v132 = *(void (**)(uint64_t, char *, uint64_t))(v135 + 16);
  v132(v12, v13, v6);
  v19 = v14[5];
  v20 = v12 + v19;
  v21 = &v13[v19];
  v22 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v21[4];
  *(_DWORD *)v20 = v22;
  *(_BYTE *)(v12 + v14[6]) = v13[v14[6]];
  v23 = v14[7];
  __dst = (char *)(v12 + v23);
  v24 = &v13[v23];
  v25 = v6;
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26))
  {
    v28 = sub_1000039AC(&qword_10036A7D8);
    memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v132((uint64_t)__dst, v24, v25);
    v52 = *(int *)(v26 + 20);
    v53 = &__dst[v52];
    v54 = &v24[v52];
    v55 = v54[8];
    *(_QWORD *)v53 = *(_QWORD *)v54;
    v53[8] = v55;
    v56 = *(int *)(v26 + 24);
    v57 = &__dst[v56];
    v58 = &v24[v56];
    v59 = v58[4];
    *(_DWORD *)v57 = *(_DWORD *)v58;
    v57[4] = v59;
    (*(void (**)(void))(v27 + 56))();
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
LABEL_14:
  v60 = a3[7];
  v61 = (char *)(a1 + v60);
  v62 = (char *)(a2 + v60);
  v63 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v64 = *((_QWORD *)v63 - 1);
  v65 = *(uint64_t (**)(char *, uint64_t, int *))(v64 + 48);
  v66 = v65(v61, 1, v63);
  v67 = v65(v62, 1, v63);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v61, v62, v136);
      v68 = v63[5];
      v69 = &v61[v68];
      v70 = &v62[v68];
      v71 = v70[8];
      *(_QWORD *)v69 = *(_QWORD *)v70;
      v69[8] = v71;
      v72 = v63[6];
      v73 = &v61[v72];
      v74 = &v62[v72];
      v75 = v74[8];
      *(_QWORD *)v73 = *(_QWORD *)v74;
      v73[8] = v75;
      v76 = v63[7];
      v77 = &v61[v76];
      v78 = &v62[v76];
      v79 = v78[8];
      *(_QWORD *)v77 = *(_QWORD *)v78;
      v77[8] = v79;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v64 + 56))(v61, 0, 1, v63);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v67)
  {
    sub_100004030((uint64_t)v61, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_19:
    v80 = sub_1000039AC(&qword_10036A7F8);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_20;
  }
  v134((uint64_t)v61, (uint64_t)v62, v136);
  v100 = v63[5];
  v101 = &v61[v100];
  v102 = &v62[v100];
  v103 = v102[8];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v101[8] = v103;
  v104 = v63[6];
  v105 = &v61[v104];
  v106 = &v62[v104];
  v107 = v106[8];
  *(_QWORD *)v105 = *(_QWORD *)v106;
  v105[8] = v107;
  v108 = v63[7];
  v109 = &v61[v108];
  v110 = &v62[v108];
  v111 = v110[8];
  *(_QWORD *)v109 = *(_QWORD *)v110;
  v109[8] = v111;
LABEL_20:
  v81 = a3[8];
  v82 = (char *)(a1 + v81);
  v83 = (char *)(a2 + v81);
  v84 = v65((char *)(a1 + v81), 1, v63);
  v85 = v65(v83, 1, v63);
  if (!v84)
  {
    if (!v85)
    {
      v134((uint64_t)v82, (uint64_t)v83, v136);
      v112 = v63[5];
      v113 = &v82[v112];
      v114 = &v83[v112];
      v115 = v114[8];
      *(_QWORD *)v113 = *(_QWORD *)v114;
      v113[8] = v115;
      v116 = v63[6];
      v117 = &v82[v116];
      v118 = &v83[v116];
      v119 = v118[8];
      *(_QWORD *)v117 = *(_QWORD *)v118;
      v117[8] = v119;
      v120 = v63[7];
      v121 = &v82[v120];
      v122 = &v83[v120];
      v123 = v122[8];
      *(_QWORD *)v121 = *(_QWORD *)v122;
      v121[8] = v123;
      return a1;
    }
    sub_100004030((uint64_t)v82, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_25;
  }
  if (v85)
  {
LABEL_25:
    v98 = sub_1000039AC(&qword_10036A7F8);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v82, v83, v136);
  v86 = v63[5];
  v87 = &v82[v86];
  v88 = &v83[v86];
  v89 = v88[8];
  *(_QWORD *)v87 = *(_QWORD *)v88;
  v87[8] = v89;
  v90 = v63[6];
  v91 = &v82[v90];
  v92 = &v83[v90];
  v93 = v92[8];
  *(_QWORD *)v91 = *(_QWORD *)v92;
  v91[8] = v93;
  v94 = v63[7];
  v95 = &v82[v94];
  v96 = &v83[v94];
  v97 = v96[8];
  *(_QWORD *)v95 = *(_QWORD *)v96;
  v95[8] = v97;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v64 + 56))(v82, 0, 1, v63);
  return a1;
}

uint64_t sub_10007A02C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, int *);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v60;
  char *__dst;
  void (*v62)(char *, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  v62 = (void (*)(char *, char *, uint64_t))v7;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10036A7E0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    v20 = v14[7];
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    v60 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v21, 1, v22))
    {
      v23 = sub_1000039AC(&qword_10036A7D8);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      v24 = *(int *)(v22 + 20);
      v25 = &__dst[v24];
      v26 = &v21[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      v27 = *(int *)(v22 + 24);
      v28 = &__dst[v27];
      v29 = &v21[v27];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v60 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v30 = a3[7];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v34 = *((_QWORD *)v33 - 1);
  v35 = *(unsigned int (**)(char *, uint64_t, int *))(v34 + 48);
  if (v35(v32, 1, v33))
  {
    v36 = sub_1000039AC(&qword_10036A7F8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v62(v31, v32, v6);
    v37 = v33[5];
    v38 = &v31[v37];
    v39 = &v32[v37];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    v40 = v33[6];
    v41 = &v31[v40];
    v42 = &v32[v40];
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    v43 = v33[7];
    v44 = &v31[v43];
    v45 = &v32[v43];
    *(_QWORD *)v44 = *(_QWORD *)v45;
    v44[8] = v45[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  v46 = a3[8];
  v47 = (char *)(a1 + v46);
  v48 = (char *)(a2 + v46);
  if (v35(v48, 1, v33))
  {
    v49 = sub_1000039AC(&qword_10036A7F8);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v62(v47, v48, v6);
    v50 = v33[5];
    v51 = &v47[v50];
    v52 = &v48[v50];
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
    v53 = v33[6];
    v54 = &v47[v53];
    v55 = &v48[v53];
    *(_QWORD *)v54 = *(_QWORD *)v55;
    v54[8] = v55[8];
    v56 = v33[7];
    v57 = &v47[v56];
    v58 = &v48[v56];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v57[8] = v58[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v47, 0, 1, v33);
  }
  return a1;
}

uint64_t sub_10007A3C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int *v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, int *);
  int v59;
  int v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void (*v111)(uint64_t, char *, uint64_t);
  char *__dst;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;

  v6 = type metadata accessor for UnknownStorage(0);
  v114 = *(_QWORD *)(v6 - 8);
  v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 40);
  v113(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = (char *)(a2 + v8);
  v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15((uint64_t)v12, 1, v13);
  v115 = v6;
  if (!v16)
  {
    if (!v17)
    {
      v113(v11, (uint64_t)v12, v6);
      v30 = v13[5];
      v31 = v11 + v30;
      v32 = &v12[v30];
      *(_DWORD *)v31 = *(_DWORD *)v32;
      *(_BYTE *)(v31 + 4) = v32[4];
      *(_BYTE *)(v11 + v13[6]) = v12[v13[6]];
      v33 = v13[7];
      v34 = v11 + v33;
      v35 = &v12[v33];
      v36 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      v39 = v38(v34, 1, v36);
      v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v114 + 32))(v34, v35, v115);
          v41 = *(int *)(v36 + 20);
          v42 = v34 + v41;
          v43 = &v35[v41];
          *(_QWORD *)v42 = *(_QWORD *)v43;
          *(_BYTE *)(v42 + 8) = v43[8];
          v44 = *(int *)(v36 + 24);
          v45 = v34 + v44;
          v46 = &v35[v44];
          *(_DWORD *)v45 = *(_DWORD *)v46;
          *(_BYTE *)(v45 + 4) = v46[4];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v40)
        {
          v113(v34, (uint64_t)v35, v115);
          v105 = *(int *)(v36 + 20);
          v106 = v34 + v105;
          v107 = &v35[v105];
          *(_QWORD *)v106 = *(_QWORD *)v107;
          *(_BYTE *)(v106 + 8) = v107[8];
          v108 = *(int *)(v36 + 24);
          v109 = v34 + v108;
          v110 = &v35[v108];
          *(_DWORD *)v109 = *(_DWORD *)v110;
          *(_BYTE *)(v109 + 4) = v110[4];
          goto LABEL_14;
        }
        sub_100004030(v34, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A7D8) - 8) + 64);
      v28 = (void *)v34;
      v29 = v35;
LABEL_8:
      memcpy(v28, v29, v27);
      goto LABEL_14;
    }
    sub_100004030(v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A7E0) - 8) + 64);
    v28 = (void *)v11;
    v29 = v12;
    goto LABEL_8;
  }
  if (v17)
    goto LABEL_7;
  v111 = *(void (**)(uint64_t, char *, uint64_t))(v114 + 32);
  v111(v11, v12, v6);
  v18 = v13[5];
  v19 = v11 + v18;
  v20 = &v12[v18];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = v20[4];
  *(_BYTE *)(v11 + v13[6]) = v12[v13[6]];
  v21 = v13[7];
  __dst = (char *)(v11 + v21);
  v22 = &v12[v21];
  v23 = v6;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
  {
    v26 = sub_1000039AC(&qword_10036A7D8);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v111((uint64_t)__dst, v22, v23);
    v47 = *(int *)(v24 + 20);
    v48 = &__dst[v47];
    v49 = &v22[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = v49[8];
    v50 = *(int *)(v24 + 24);
    v51 = &__dst[v50];
    v52 = &v22[v50];
    *(_DWORD *)v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    (*(void (**)(void))(v25 + 56))();
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
LABEL_14:
  v53 = a3[7];
  v54 = (char *)(a1 + v53);
  v55 = (char *)(a2 + v53);
  v56 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v57 = *((_QWORD *)v56 - 1);
  v58 = *(uint64_t (**)(char *, uint64_t, int *))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v54, v55, v115);
      v61 = v56[5];
      v62 = &v54[v61];
      v63 = &v55[v61];
      *(_QWORD *)v62 = *(_QWORD *)v63;
      v62[8] = v63[8];
      v64 = v56[6];
      v65 = &v54[v64];
      v66 = &v55[v64];
      *(_QWORD *)v65 = *(_QWORD *)v66;
      v65[8] = v66[8];
      v67 = v56[7];
      v68 = &v54[v67];
      v69 = &v55[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v69[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v57 + 56))(v54, 0, 1, v56);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v60)
  {
    sub_100004030((uint64_t)v54, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_19:
    v70 = sub_1000039AC(&qword_10036A7F8);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_20;
  }
  v113((uint64_t)v54, (uint64_t)v55, v115);
  v87 = v56[5];
  v88 = &v54[v87];
  v89 = &v55[v87];
  *(_QWORD *)v88 = *(_QWORD *)v89;
  v88[8] = v89[8];
  v90 = v56[6];
  v91 = &v54[v90];
  v92 = &v55[v90];
  *(_QWORD *)v91 = *(_QWORD *)v92;
  v91[8] = v92[8];
  v93 = v56[7];
  v94 = &v54[v93];
  v95 = &v55[v93];
  *(_QWORD *)v94 = *(_QWORD *)v95;
  v94[8] = v95[8];
LABEL_20:
  v71 = a3[8];
  v72 = (char *)(a1 + v71);
  v73 = (char *)(a2 + v71);
  v74 = v58((char *)(a1 + v71), 1, v56);
  v75 = v58(v73, 1, v56);
  if (!v74)
  {
    if (!v75)
    {
      v113((uint64_t)v72, (uint64_t)v73, v115);
      v96 = v56[5];
      v97 = &v72[v96];
      v98 = &v73[v96];
      *(_QWORD *)v97 = *(_QWORD *)v98;
      v97[8] = v98[8];
      v99 = v56[6];
      v100 = &v72[v99];
      v101 = &v73[v99];
      *(_QWORD *)v100 = *(_QWORD *)v101;
      v100[8] = v101[8];
      v102 = v56[7];
      v103 = &v72[v102];
      v104 = &v73[v102];
      *(_QWORD *)v103 = *(_QWORD *)v104;
      v103[8] = v104[8];
      return a1;
    }
    sub_100004030((uint64_t)v72, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_25;
  }
  if (v75)
  {
LABEL_25:
    v85 = sub_1000039AC(&qword_10036A7F8);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v72, v73, v115);
  v76 = v56[5];
  v77 = &v72[v76];
  v78 = &v73[v76];
  *(_QWORD *)v77 = *(_QWORD *)v78;
  v77[8] = v78[8];
  v79 = v56[6];
  v80 = &v72[v79];
  v81 = &v73[v79];
  *(_QWORD *)v80 = *(_QWORD *)v81;
  v80[8] = v81[8];
  v82 = v56[7];
  v83 = &v72[v82];
  v84 = &v73[v82];
  *(_QWORD *)v83 = *(_QWORD *)v84;
  v83[8] = v84[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v57 + 56))(v72, 0, 1, v56);
  return a1;
}

uint64_t sub_10007AA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007AA44);
}

uint64_t sub_10007AA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007AA50(a1, a2, a3, &qword_10036A7F8);
}

uint64_t sub_10007AA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
  }
  else
  {
    v13 = sub_1000039AC(&qword_10036A7E0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v10 = v13;
      v15 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_1000039AC(a4);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a3 + 28);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  }
  return v11(v12, a2, v10);
}

uint64_t sub_10007AAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007AAFC);
}

uint64_t sub_10007AAFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10007AB08(a1, a2, a3, a4, &qword_10036A7F8);
}

uint64_t sub_10007AB08(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
  }
  else
  {
    v15 = sub_1000039AC(&qword_10036A7E0);
    v16 = *(_QWORD *)(v15 - 8);
    if (*(_DWORD *)(v16 + 84) == a3)
    {
      v12 = v15;
      v17 = *(int *)(a4 + 24);
    }
    else
    {
      v12 = sub_1000039AC(a5);
      v16 = *(_QWORD *)(v12 - 8);
      v17 = *(int *)(a4 + 28);
    }
    v14 = a1 + v17;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  }
  return v13(v14, a2, a2, v12);
}

void sub_10007ABB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_1002C9AC0;
    sub_10001198C(319, &qword_10036C550, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, (unint64_t *)&unk_10036C810, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      if (v7 <= 0x3F)
      {
        v9 = *(_QWORD *)(v6 - 8) + 64;
        v10 = v9;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

uint64_t *sub_10007AC80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036A7F8);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = *(int *)(a3 + 24);
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    *(_DWORD *)v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
  }
  return a1;
}

uint64_t sub_10007AE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  return result;
}

uint64_t sub_10007AEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036A7F8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = *(int *)(a3 + 24);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  return a1;
}

uint64_t sub_10007B004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v47 = a3;
  v48 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v35 = v12[5];
      v36 = &v10[v35];
      v37 = &v11[v35];
      v38 = v37[8];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v38;
      v39 = v12[6];
      v40 = &v10[v39];
      v41 = &v11[v39];
      v42 = v41[8];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v42;
      v43 = v12[7];
      v44 = &v10[v43];
      v45 = &v11[v43];
      v46 = v45[8];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v46;
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v29 = sub_1000039AC(&qword_10036A7F8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  v20 = v19[8];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v20;
  v21 = v12[6];
  v22 = &v10[v21];
  v23 = &v11[v21];
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  v25 = v12[7];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v28;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v30 = *(int *)(v47 + 24);
  v31 = a1 + v30;
  v32 = (int *)(v48 + v30);
  v33 = *v32;
  *(_BYTE *)(v31 + 4) = *((_BYTE *)v32 + 4);
  *(_DWORD *)v31 = v33;
  return a1;
}

uint64_t sub_10007B208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036A7F8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = *(int *)(a3 + 24);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  return a1;
}

uint64_t sub_10007B364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v40 = a3;
  v41 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v31 = v12[5];
      v32 = &v10[v31];
      v33 = &v11[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v12[6];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v12[7];
      v38 = &v10[v37];
      v39 = &v11[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v26 = sub_1000039AC(&qword_10036A7F8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = v12[7];
  v24 = &v10[v23];
  v25 = &v11[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v27 = *(int *)(v40 + 24);
  v28 = a1 + v27;
  v29 = v41 + v27;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  return a1;
}

uint64_t sub_10007B568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007B574);
}

uint64_t sub_10007B574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_1000039AC(&qword_10036A7F8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10007B5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007B5F8);
}

uint64_t sub_10007B5F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_1000039AC(&qword_10036A7F8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10007B678(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036C810, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_1002C9AC0;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_10007B714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007B720);
}

uint64_t sub_10007B724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007B730);
}

uint64_t *sub_10007B734(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v36);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = a3[9];
    v21 = a3[10];
    v22 = (char *)a1 + v20;
    v23 = (char *)a2 + v20;
    v24 = *(_DWORD *)v23;
    v22[4] = v23[4];
    *(_DWORD *)v22 = v24;
    v25 = (char *)a1 + v21;
    v26 = (char *)a2 + v21;
    v25[4] = v26[4];
    *(_DWORD *)v25 = *(_DWORD *)v26;
    v27 = a3[11];
    v28 = a3[12];
    v29 = (char *)a1 + v27;
    v30 = (char *)a2 + v27;
    v29[4] = v30[4];
    *(_DWORD *)v29 = *(_DWORD *)v30;
    v31 = (char *)a1 + v28;
    v32 = (char *)a2 + v28;
    v31[4] = v32[4];
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v33 = a3[13];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v34[4] = v35[4];
    *(_DWORD *)v34 = *(_DWORD *)v35;
  }
  return a1;
}

uint64_t sub_10007B89C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = (int *)(a2 + v19);
  v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)v21 = v23;
  v24 = a1 + v20;
  v25 = a2 + v20;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  *(_DWORD *)v28 = *(_DWORD *)v29;
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_DWORD *)v30 = *(_DWORD *)v31;
  v32 = a3[13];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  *(_DWORD *)v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t sub_10007B9D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(_BYTE *)(v29 + 4);
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = v30;
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_BYTE *)(v33 + 4);
  *(_DWORD *)v32 = *(_DWORD *)v33;
  *(_BYTE *)(v32 + 4) = v34;
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = *(_BYTE *)(v37 + 4);
  *(_DWORD *)v36 = *(_DWORD *)v37;
  *(_BYTE *)(v36 + 4) = v38;
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = v42;
  return a1;
}

uint64_t sub_10007BB24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = (int *)(a2 + v19);
  v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)v21 = v23;
  v24 = a1 + v20;
  v25 = a2 + v20;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  *(_DWORD *)v28 = *(_DWORD *)v29;
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_DWORD *)v30 = *(_DWORD *)v31;
  v32 = a3[13];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  *(_DWORD *)v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t sub_10007BC60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = (int *)(a2 + v19);
  v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)v21 = v23;
  v24 = a1 + v20;
  v25 = a2 + v20;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  *(_DWORD *)v28 = *(_DWORD *)v29;
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_DWORD *)v30 = *(_DWORD *)v31;
  v32 = a3[13];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  *(_DWORD *)v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t sub_10007BD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007BDA8);
}

uint64_t sub_10007BDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007BDB8);
}

uint64_t sub_10007BDBC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\t";
    v4[2] = &unk_1002C9AC0;
    v4[3] = &unk_1002C9AC0;
    v4[4] = &unk_1002C9AC0;
    v4[5] = &unk_1002C9AC0;
    v4[6] = &unk_1002C9AC0;
    v4[7] = &unk_1002C9AC0;
    v4[8] = &unk_1002C9AC0;
    v4[9] = &unk_1002C9AC0;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10007BE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007BE50);
}

uint64_t sub_10007BE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007BE60);
}

char *sub_10007BE64(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *__src;
  uint64_t v85;
  char *v86;
  char *__dst;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  uint64_t v90;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10036A780);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v90 = v13;
      v8(v10, v11, v7);
      v16 = *(int *)(v12 + 20);
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_DWORD *)v17 = *(_DWORD *)v18;
      v17[4] = v18[4];
      v19 = *(int *)(v12 + 24);
      v20 = v8;
      v89 = v10;
      v21 = &v10[v19];
      v22 = &v11[v19];
      v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
      v24 = *((_QWORD *)v23 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
      {
        v25 = sub_1000039AC(&qword_10036A710);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        v8 = v20;
        v26 = v90;
      }
      else
      {
        v85 = v24;
        v88 = v20;
        v20(v21, v22, v7);
        v27 = v23[5];
        v28 = &v21[v27];
        v29 = &v22[v27];
        *(_DWORD *)v28 = *(_DWORD *)v29;
        v28[4] = v29[4];
        v30 = v23[6];
        v86 = v21;
        __dst = &v21[v30];
        v31 = &v22[v30];
        v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        v33 = *(_QWORD *)(v32 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        {
          v34 = sub_1000039AC(&qword_10036A708);
          memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
          v8 = v88;
          v26 = v90;
        }
        else
        {
          v81 = v22;
          v35 = __dst;
          v88(__dst, v31, v7);
          v36 = *(int *)(v32 + 20);
          v37 = &__dst[v36];
          v38 = &v31[v36];
          *(_DWORD *)v37 = *(_DWORD *)v38;
          v37[4] = v38[4];
          v83 = v32;
          v39 = *(int *)(v32 + 24);
          v82 = &__dst[v39];
          v40 = &v31[v39];
          v41 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
          v79 = *(_QWORD *)(v41 - 8);
          v80 = v41;
          __src = v40;
          v42 = (*(uint64_t (**)(char *, uint64_t))(v79 + 48))(v40, 1);
          v8 = v88;
          v26 = v90;
          if (v42)
          {
            v43 = sub_1000039AC(&qword_10036A700);
            memcpy(v82, __src, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
          }
          else
          {
            v88(v82, __src, v7);
            v44 = *(int *)(v80 + 20);
            v45 = &v82[v44];
            v46 = &__src[v44];
            *(_DWORD *)v45 = *(_DWORD *)v46;
            v45[4] = v46[4];
            v82[*(int *)(v80 + 24)] = __src[*(int *)(v80 + 24)];
            v35 = __dst;
            (*(void (**)(char *, _QWORD, uint64_t))(v79 + 56))(v82, 0, 1);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v83);
          v22 = v81;
        }
        v47 = v23[7];
        v48 = &v86[v47];
        v49 = &v22[v47];
        *(_DWORD *)v48 = *(_DWORD *)v49;
        v48[4] = v49[4];
        v50 = v23[8];
        v51 = &v86[v50];
        v52 = &v22[v50];
        v51[4] = v52[4];
        *(_DWORD *)v51 = *(_DWORD *)v52;
        v53 = v23[9];
        v54 = &v86[v53];
        v55 = &v22[v53];
        *(_DWORD *)v54 = *(_DWORD *)v55;
        v54[4] = v55[4];
        v56 = v23[10];
        v57 = &v86[v56];
        v58 = &v22[v56];
        *(_DWORD *)v57 = *(_DWORD *)v58;
        v57[4] = v58[4];
        v59 = v23[11];
        v60 = &v86[v59];
        v61 = &v22[v59];
        *(_DWORD *)v60 = *(_DWORD *)v61;
        v60[4] = v61[4];
        (*(void (**)(void))(v85 + 56))();
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v89, 0, 1, v12);
    }
    v62 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v62] = a2[v62];
    v63 = a3[8];
    v64 = &a1[v63];
    v65 = &a2[v63];
    v66 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
    v67 = *((_QWORD *)v66 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v67 + 48))(v65, 1, v66))
    {
      v68 = sub_1000039AC(&qword_10036A828);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v8(v64, v65, v7);
      v69 = v66[5];
      v70 = &v64[v69];
      v71 = &v65[v69];
      *(_QWORD *)v70 = *(_QWORD *)v71;
      v70[8] = v71[8];
      v72 = v66[6];
      v73 = &v64[v72];
      v74 = &v65[v72];
      *(_QWORD *)v73 = *(_QWORD *)v74;
      v73[8] = v74[8];
      v75 = v66[7];
      v76 = &v64[v75];
      v77 = &v65[v75];
      *(_QWORD *)v76 = *(_QWORD *)v77;
      v76[8] = v77[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v67 + 56))(v64, 0, 1, v66);
    }
  }
  return a1;
}

uint64_t sub_10007C35C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  void (*v16)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v16(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v16(v5, v4);
    v7 = v5 + *(int *)(v6 + 24);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    {
      v16(v7, v4);
      v9 = v7 + *(int *)(v8 + 24);
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
      {
        v16(v9, v4);
        v11 = v9 + *(int *)(v10 + 24);
        v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
          v16(v11, v4);
      }
    }
  }
  v13 = a1 + *(int *)(a2 + 32);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v16)(v13, v4);
  return result;
}

uint64_t sub_10007C504(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v81;
  uint64_t v82;
  char *__dst;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036A780);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v92 = v12;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = *(int *)(v11 + 20);
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    v17 = *(int *)(v11 + 24);
    v18 = v7;
    v91 = v9;
    v19 = &v9[v17];
    v20 = &v10[v17];
    v21 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_1000039AC(&qword_10036A710);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v7 = v18;
      v24 = v91;
      v25 = v92;
    }
    else
    {
      v89 = v22;
      v18((uint64_t)v19, (uint64_t)v20, v6);
      v26 = *(int *)(v21 + 20);
      v27 = &v19[v26];
      v28 = &v20[v26];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      v87 = (int *)v21;
      v88 = v20;
      v29 = *(int *)(v21 + 24);
      v90 = v19;
      v30 = &v19[v29];
      v31 = &v20[v29];
      v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = sub_1000039AC(&qword_10036A708);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        v7 = v18;
        v24 = v91;
        v25 = v92;
        v36 = v87;
        v35 = v88;
      }
      else
      {
        v84 = v33;
        v18((uint64_t)v30, (uint64_t)v31, v6);
        v37 = *(int *)(v32 + 20);
        v38 = &v30[v37];
        v39 = &v31[v37];
        *(_DWORD *)v38 = *(_DWORD *)v39;
        v38[4] = v39[4];
        v85 = v32;
        v86 = v30;
        v40 = *(int *)(v32 + 24);
        __dst = &v30[v40];
        v41 = &v31[v40];
        v42 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v81 = *(_QWORD *)(v42 - 8);
        v82 = v42;
        v43 = v41;
        v44 = (*(uint64_t (**)(char *, uint64_t))(v81 + 48))(v41, 1);
        v7 = v18;
        v24 = v91;
        v25 = v92;
        if (v44)
        {
          v45 = sub_1000039AC(&qword_10036A700);
          memcpy(__dst, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          v18((uint64_t)__dst, (uint64_t)v43, v6);
          v46 = *(int *)(v82 + 20);
          v47 = &__dst[v46];
          v48 = &v43[v46];
          *(_DWORD *)v47 = *(_DWORD *)v48;
          v47[4] = v48[4];
          __dst[*(int *)(v82 + 24)] = v43[*(int *)(v82 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t))(v81 + 56))(__dst, 0, 1);
        }
        v36 = v87;
        v35 = v88;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v86, 0, 1, v85);
      }
      v49 = v36[7];
      v50 = &v90[v49];
      v51 = &v35[v49];
      *(_DWORD *)v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      v52 = v36[8];
      v53 = &v90[v52];
      v54 = &v35[v52];
      v53[4] = v54[4];
      *(_DWORD *)v53 = *(_DWORD *)v54;
      v55 = v36[9];
      v56 = &v90[v55];
      v57 = &v35[v55];
      *(_DWORD *)v56 = *(_DWORD *)v57;
      v56[4] = v57[4];
      v58 = v36[10];
      v59 = &v90[v58];
      v60 = &v35[v58];
      *(_DWORD *)v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      v61 = v36[11];
      v62 = &v90[v61];
      v63 = &v35[v61];
      *(_DWORD *)v62 = *(_DWORD *)v63;
      v62[4] = v63[4];
      (*(void (**)(void))(v89 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v24, 0, 1, v11);
  }
  v64 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v64) = *(_BYTE *)(a2 + v64);
  v65 = a3[8];
  v66 = (char *)(a1 + v65);
  v67 = (char *)(a2 + v65);
  v68 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v69 = *((_QWORD *)v68 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v69 + 48))(v67, 1, v68))
  {
    v70 = sub_1000039AC(&qword_10036A828);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v66, (uint64_t)v67, v6);
    v71 = v68[5];
    v72 = &v66[v71];
    v73 = &v67[v71];
    *(_QWORD *)v72 = *(_QWORD *)v73;
    v72[8] = v73[8];
    v74 = v68[6];
    v75 = &v66[v74];
    v76 = &v67[v74];
    *(_QWORD *)v75 = *(_QWORD *)v76;
    v75[8] = v76[8];
    v77 = v68[7];
    v78 = &v66[v77];
    v79 = &v67[v77];
    *(_QWORD *)v78 = *(_QWORD *)v79;
    v78[8] = v79[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v69 + 56))(v66, 0, 1, v68);
  }
  return a1;
}

uint64_t sub_10007C9BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t);
  int v81;
  size_t v82;
  void *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int v95;
  uint64_t v96;
  char *v97;
  char *v98;
  int v99;
  uint64_t v100;
  char *v101;
  char *v102;
  int v103;
  uint64_t v104;
  char *v105;
  char *v106;
  int v107;
  uint64_t v108;
  char *v109;
  char *v110;
  int v111;
  uint64_t v112;
  char *v113;
  char *v114;
  int v115;
  uint64_t v116;
  char *v117;
  char *v118;
  int *v119;
  uint64_t v120;
  uint64_t (*v121)(char *, uint64_t, int *);
  int v122;
  int v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char v135;
  uint64_t v136;
  uint64_t v138;
  char *v139;
  char *v140;
  char v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t (*v192)(uint64_t, uint64_t, uint64_t);
  int v193;
  uint64_t v194;
  char *v195;
  char *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  void (**__src)(void *, _QWORD, uint64_t, uint64_t);
  char *__srca;
  uint64_t v235;
  uint64_t v236;
  void (*v237)(uint64_t, char *, uint64_t);
  char *__dst;
  void *__dsta;
  char *__dstb;
  _QWORD *__dstc;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void (*v245)(uint64_t, char *, uint64_t);
  void (*v246)(uint64_t, char *, uint64_t);
  uint64_t v247;
  int *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  void (*v252)(uint64_t, uint64_t, uint64_t);
  uint64_t v253;

  v6 = type metadata accessor for UnknownStorage(0);
  v253 = *(_QWORD *)(v6 - 8);
  v252 = *(void (**)(uint64_t, uint64_t, uint64_t))(v253 + 24);
  v252(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12((uint64_t)v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_100004030(v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
      goto LABEL_7;
    }
    v252(v8, (uint64_t)v9, v6);
    v28 = *(int *)(v10 + 20);
    v29 = v8 + v28;
    v30 = &v9[v28];
    v31 = v30[4];
    *(_DWORD *)v29 = *(_DWORD *)v30;
    *(_BYTE *)(v29 + 4) = v31;
    v32 = *(int *)(v10 + 24);
    v33 = v8 + v32;
    v34 = &v9[v32];
    v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    v36 = *((_QWORD *)v35 - 1);
    v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v36 + 48);
    v38 = v37(v33, 1, v35);
    v39 = v37((uint64_t)v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        v246 = *(void (**)(uint64_t, char *, uint64_t))(v253 + 16);
        v246(v33, v34, v6);
        v40 = v35[5];
        v41 = v33 + v40;
        v42 = &v34[v40];
        v43 = v42[4];
        *(_DWORD *)v41 = *(_DWORD *)v42;
        *(_BYTE *)(v41 + 4) = v43;
        v44 = v35[6];
        v45 = v34;
        v46 = (char *)(v33 + v44);
        v242 = v6;
        v249 = v45;
        v47 = &v45[v44];
        v48 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        v49 = *(_QWORD *)(v48 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
        {
          v50 = sub_1000039AC(&qword_10036A708);
          memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
          v6 = v242;
          v51 = v249;
        }
        else
        {
          v236 = v49;
          v246((uint64_t)v46, v47, v242);
          v84 = *(int *)(v48 + 20);
          v85 = &v46[v84];
          v86 = &v47[v84];
          v87 = v86[4];
          *(_DWORD *)v85 = *(_DWORD *)v86;
          v85[4] = v87;
          v88 = *(int *)(v48 + 24);
          __dsta = v46;
          __srca = &v46[v88];
          v89 = &v47[v88];
          v90 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
          v232 = *(_QWORD *)(v90 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v232 + 48))(v89, 1, v90))
          {
            v91 = sub_1000039AC(&qword_10036A700);
            memcpy(__srca, v89, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
          }
          else
          {
            v246((uint64_t)__srca, v89, v242);
            v160 = *(int *)(v90 + 20);
            v161 = &__srca[v160];
            v162 = &v89[v160];
            v163 = *(_DWORD *)v162;
            v161[4] = v162[4];
            *(_DWORD *)v161 = v163;
            __srca[*(int *)(v90 + 24)] = v89[*(int *)(v90 + 24)];
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v232 + 56))(__srca, 0, 1, v90);
          }
          v51 = v249;
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v236 + 56))(__dsta, 0, 1, v48);
          v6 = v242;
        }
        v164 = v35[7];
        v165 = v33 + v164;
        v166 = &v51[v164];
        v167 = *(_DWORD *)v166;
        *(_BYTE *)(v165 + 4) = v166[4];
        *(_DWORD *)v165 = v167;
        v168 = v35[8];
        v169 = v33 + v168;
        v170 = &v51[v168];
        v171 = *(_DWORD *)v170;
        *(_BYTE *)(v169 + 4) = v170[4];
        *(_DWORD *)v169 = v171;
        v172 = v35[9];
        v173 = v33 + v172;
        v174 = &v51[v172];
        v175 = *(_DWORD *)v174;
        *(_BYTE *)(v173 + 4) = v174[4];
        *(_DWORD *)v173 = v175;
        v176 = v35[10];
        v177 = v33 + v176;
        v178 = &v51[v176];
        v179 = *(_DWORD *)v178;
        *(_BYTE *)(v177 + 4) = v178[4];
        *(_DWORD *)v177 = v179;
        v180 = v35[11];
        v181 = v33 + v180;
        v182 = &v51[v180];
        v183 = *(_DWORD *)v182;
        *(_BYTE *)(v181 + 4) = v182[4];
        *(_DWORD *)v181 = v183;
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
        goto LABEL_29;
      }
      goto LABEL_17;
    }
    if (v39)
    {
      sub_100004030(v33, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_17:
      v25 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A710) - 8) + 64);
      v26 = (void *)v33;
      v27 = v34;
      goto LABEL_8;
    }
    v244 = v6;
    v252(v33, (uint64_t)v34, v6);
    v72 = v35[5];
    v73 = v33 + v72;
    v74 = &v34[v72];
    v75 = v74[4];
    *(_DWORD *)v73 = *(_DWORD *)v74;
    *(_BYTE *)(v73 + 4) = v75;
    v76 = v35[6];
    v77 = v33 + v76;
    v78 = &v34[v76];
    v79 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v247 = *(_QWORD *)(v79 - 8);
    v250 = v77;
    v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v247 + 48);
    LODWORD(v77) = v80(v77, 1, v79);
    v81 = v80((uint64_t)v78, 1, v79);
    if ((_DWORD)v77)
    {
      if (!v81)
      {
        v237 = *(void (**)(uint64_t, char *, uint64_t))(v253 + 16);
        v237(v250, v78, v244);
        v151 = *(int *)(v79 + 20);
        v152 = v250 + v151;
        v153 = &v78[v151];
        v154 = v153[4];
        *(_DWORD *)v152 = *(_DWORD *)v153;
        *(_BYTE *)(v152 + 4) = v154;
        v155 = *(int *)(v79 + 24);
        __dstb = (char *)(v250 + v155);
        v156 = &v78[v155];
        v157 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v158 = *(_QWORD *)(v157 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
        {
          v159 = sub_1000039AC(&qword_10036A700);
          memcpy(__dstb, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
        }
        else
        {
          v237((uint64_t)__dstb, v156, v244);
          v194 = *(int *)(v157 + 20);
          v195 = &__dstb[v194];
          v196 = &v156[v194];
          v197 = *(_DWORD *)v196;
          v195[4] = v196[4];
          *(_DWORD *)v195 = v197;
          __dstb[*(int *)(v157 + 24)] = v156[*(int *)(v157 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(__dstb, 0, 1, v157);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v247 + 56))(v250, 0, 1, v79);
        goto LABEL_51;
      }
      v82 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A708) - 8) + 64);
      v83 = (void *)v250;
    }
    else
    {
      if (!v81)
      {
        v252(v250, (uint64_t)v78, v244);
        v184 = *(int *)(v79 + 20);
        v185 = v250 + v184;
        v186 = &v78[v184];
        v187 = v186[4];
        *(_DWORD *)v185 = *(_DWORD *)v186;
        *(_BYTE *)(v185 + 4) = v187;
        v188 = *(int *)(v79 + 24);
        v189 = v250 + v188;
        v190 = &v78[v188];
        v191 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        __dstc = *(_QWORD **)(v191 - 8);
        v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dstc[6];
        v251 = v189;
        LODWORD(v189) = v192(v189, 1, v191);
        v193 = v192((uint64_t)v190, 1, v191);
        if ((_DWORD)v189)
        {
          if (!v193)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v253 + 16))(v251, v190, v244);
            v218 = *(int *)(v191 + 20);
            v219 = v251 + v218;
            v220 = &v190[v218];
            v221 = *(_DWORD *)v220;
            *(_BYTE *)(v219 + 4) = v220[4];
            *(_DWORD *)v219 = v221;
            *(_BYTE *)(v251 + *(int *)(v191 + 24)) = v190[*(int *)(v191 + 24)];
            v222 = v191;
            v6 = v244;
            ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))__dstc[7])(v251, 0, 1, v222);
            goto LABEL_52;
          }
          v82 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A700) - 8) + 64);
          v150 = v190;
          v83 = (void *)v251;
        }
        else
        {
          if (!v193)
          {
            v252(v251, (uint64_t)v190, v244);
            v223 = *(int *)(v191 + 20);
            v224 = v251 + v223;
            v225 = &v190[v223];
            v226 = *(_DWORD *)v225;
            *(_BYTE *)(v224 + 4) = v225[4];
            *(_DWORD *)v224 = v226;
            v227 = *(int *)(v191 + 24);
            v6 = v244;
            *(_BYTE *)(v251 + v227) = v190[v227];
            goto LABEL_52;
          }
          sub_100004030(v251, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
          v82 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A700) - 8) + 64);
          v83 = (void *)v251;
          v150 = v190;
        }
        goto LABEL_40;
      }
      sub_100004030(v250, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      v82 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A708) - 8) + 64);
      v83 = (void *)v250;
    }
    v150 = v78;
LABEL_40:
    memcpy(v83, v150, v82);
LABEL_51:
    v6 = v244;
LABEL_52:
    v198 = v35[7];
    v199 = v33 + v198;
    v200 = &v34[v198];
    v201 = *(_DWORD *)v200;
    *(_BYTE *)(v199 + 4) = v200[4];
    *(_DWORD *)v199 = v201;
    v202 = v35[8];
    v203 = v33 + v202;
    v204 = &v34[v202];
    v205 = *(_DWORD *)v204;
    *(_BYTE *)(v203 + 4) = v204[4];
    *(_DWORD *)v203 = v205;
    v206 = v35[9];
    v207 = v33 + v206;
    v208 = &v34[v206];
    v209 = *(_DWORD *)v208;
    *(_BYTE *)(v207 + 4) = v208[4];
    *(_DWORD *)v207 = v209;
    v210 = v35[10];
    v211 = v33 + v210;
    v212 = &v34[v210];
    v213 = *(_DWORD *)v212;
    *(_BYTE *)(v211 + 4) = v212[4];
    *(_DWORD *)v211 = v213;
    v214 = v35[11];
    v215 = v33 + v214;
    v216 = &v34[v214];
    v217 = *(_DWORD *)v216;
    *(_BYTE *)(v215 + 4) = v216[4];
    *(_DWORD *)v215 = v217;
    goto LABEL_29;
  }
  if (v14)
  {
LABEL_7:
    v25 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A780) - 8) + 64);
    v26 = (void *)v8;
    v27 = v9;
LABEL_8:
    memcpy(v26, v27, v25);
    goto LABEL_29;
  }
  v245 = *(void (**)(uint64_t, char *, uint64_t))(v253 + 16);
  v248 = a3;
  v245(v8, v9, v6);
  v15 = *(int *)(v10 + 20);
  v16 = v8 + v15;
  v17 = &v9[v15];
  v18 = v17[4];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  v19 = *(int *)(v10 + 24);
  v20 = (char *)(v8 + v19);
  v21 = &v9[v19];
  v22 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v23 = *((_QWORD *)v22 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_1000039AC(&qword_10036A710);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    a3 = v248;
  }
  else
  {
    v235 = v23;
    v245((uint64_t)v20, v21, v6);
    v52 = v22[5];
    v53 = &v20[v52];
    v54 = &v21[v52];
    v55 = v54[4];
    *(_DWORD *)v53 = *(_DWORD *)v54;
    v53[4] = v55;
    v56 = v22[6];
    __dst = &v20[v56];
    v243 = v6;
    v230 = v21;
    v57 = &v21[v56];
    v58 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v59 = *(_QWORD *)(v58 - 8);
    v231 = v20;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      v60 = sub_1000039AC(&qword_10036A708);
      memcpy(__dst, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      v6 = v243;
      a3 = v248;
      v62 = v230;
      v61 = v231;
    }
    else
    {
      v228 = v59;
      v245((uint64_t)__dst, v57, v243);
      v63 = *(int *)(v58 + 20);
      v64 = &__dst[v63];
      v65 = &v57[v63];
      v66 = v65[4];
      *(_DWORD *)v64 = *(_DWORD *)v65;
      v64[4] = v66;
      v229 = v58;
      v67 = *(int *)(v58 + 24);
      v68 = &__dst[v67];
      v69 = &v57[v67];
      v70 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      __src = *(void (***)(void *, _QWORD, uint64_t, uint64_t))(v70 - 8);
      a3 = v248;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))__src[6])(v69, 1, v70))
      {
        v71 = sub_1000039AC(&qword_10036A700);
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      else
      {
        v245((uint64_t)v68, v69, v243);
        v92 = *(int *)(v70 + 20);
        v93 = &v68[v92];
        v94 = &v69[v92];
        v95 = *(_DWORD *)v94;
        v93[4] = v94[4];
        *(_DWORD *)v93 = v95;
        v68[*(int *)(v70 + 24)] = v69[*(int *)(v70 + 24)];
        __src[7](v68, 0, 1, v70);
      }
      v62 = v230;
      v61 = v231;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v228 + 56))(__dst, 0, 1, v229);
      v6 = v243;
    }
    v96 = v22[7];
    v97 = &v61[v96];
    v98 = &v62[v96];
    v99 = *(_DWORD *)v98;
    v97[4] = v98[4];
    *(_DWORD *)v97 = v99;
    v100 = v22[8];
    v101 = &v61[v100];
    v102 = &v62[v100];
    v103 = *(_DWORD *)v102;
    v101[4] = v102[4];
    *(_DWORD *)v101 = v103;
    v104 = v22[9];
    v105 = &v61[v104];
    v106 = &v62[v104];
    v107 = *(_DWORD *)v106;
    v105[4] = v106[4];
    *(_DWORD *)v105 = v107;
    v108 = v22[10];
    v109 = &v61[v108];
    v110 = &v62[v108];
    v111 = *(_DWORD *)v110;
    v109[4] = v110[4];
    *(_DWORD *)v109 = v111;
    v112 = v22[11];
    v113 = &v61[v112];
    v114 = &v62[v112];
    v115 = *(_DWORD *)v114;
    v113[4] = v114[4];
    *(_DWORD *)v113 = v115;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v235 + 56))(v61, 0, 1, v22);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_29:
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v116 = a3[8];
  v117 = (char *)(a1 + v116);
  v118 = (char *)(a2 + v116);
  v119 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v120 = *((_QWORD *)v119 - 1);
  v121 = *(uint64_t (**)(char *, uint64_t, int *))(v120 + 48);
  v122 = v121(v117, 1, v119);
  v123 = v121(v118, 1, v119);
  if (!v122)
  {
    if (!v123)
    {
      v252((uint64_t)v117, (uint64_t)v118, v6);
      v138 = v119[5];
      v139 = &v117[v138];
      v140 = &v118[v138];
      v141 = v140[8];
      *(_QWORD *)v139 = *(_QWORD *)v140;
      v139[8] = v141;
      v142 = v119[6];
      v143 = &v117[v142];
      v144 = &v118[v142];
      v145 = v144[8];
      *(_QWORD *)v143 = *(_QWORD *)v144;
      v143[8] = v145;
      v146 = v119[7];
      v147 = &v117[v146];
      v148 = &v118[v146];
      v149 = v148[8];
      *(_QWORD *)v147 = *(_QWORD *)v148;
      v147[8] = v149;
      return a1;
    }
    sub_100004030((uint64_t)v117, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    goto LABEL_34;
  }
  if (v123)
  {
LABEL_34:
    v136 = sub_1000039AC(&qword_10036A828);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v253 + 16))(v117, v118, v6);
  v124 = v119[5];
  v125 = &v117[v124];
  v126 = &v118[v124];
  v127 = v126[8];
  *(_QWORD *)v125 = *(_QWORD *)v126;
  v125[8] = v127;
  v128 = v119[6];
  v129 = &v117[v128];
  v130 = &v118[v128];
  v131 = v130[8];
  *(_QWORD *)v129 = *(_QWORD *)v130;
  v129[8] = v131;
  v132 = v119[7];
  v133 = &v117[v132];
  v134 = &v118[v132];
  v135 = v134[8];
  *(_QWORD *)v133 = *(_QWORD *)v134;
  v133[8] = v135;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v120 + 56))(v117, 0, 1, v119);
  return a1;
}

uint64_t sub_10007D66C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v81;
  uint64_t v82;
  char *__dst;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10036A780);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v92 = v12;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = *(int *)(v11 + 20);
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    v17 = *(int *)(v11 + 24);
    v18 = v7;
    v91 = v9;
    v19 = &v9[v17];
    v20 = &v10[v17];
    v21 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_1000039AC(&qword_10036A710);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v7 = v18;
      v24 = v91;
      v25 = v92;
    }
    else
    {
      v89 = v22;
      v18((uint64_t)v19, (uint64_t)v20, v6);
      v26 = *(int *)(v21 + 20);
      v27 = &v19[v26];
      v28 = &v20[v26];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      v87 = (int *)v21;
      v88 = v20;
      v29 = *(int *)(v21 + 24);
      v90 = v19;
      v30 = &v19[v29];
      v31 = &v20[v29];
      v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = sub_1000039AC(&qword_10036A708);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        v7 = v18;
        v24 = v91;
        v25 = v92;
        v36 = v87;
        v35 = v88;
      }
      else
      {
        v84 = v33;
        v18((uint64_t)v30, (uint64_t)v31, v6);
        v37 = *(int *)(v32 + 20);
        v38 = &v30[v37];
        v39 = &v31[v37];
        *(_DWORD *)v38 = *(_DWORD *)v39;
        v38[4] = v39[4];
        v85 = v32;
        v86 = v30;
        v40 = *(int *)(v32 + 24);
        __dst = &v30[v40];
        v41 = &v31[v40];
        v42 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v81 = *(_QWORD *)(v42 - 8);
        v82 = v42;
        v43 = v41;
        v44 = (*(uint64_t (**)(char *, uint64_t))(v81 + 48))(v41, 1);
        v7 = v18;
        v24 = v91;
        v25 = v92;
        if (v44)
        {
          v45 = sub_1000039AC(&qword_10036A700);
          memcpy(__dst, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          v18((uint64_t)__dst, (uint64_t)v43, v6);
          v46 = *(int *)(v82 + 20);
          v47 = &__dst[v46];
          v48 = &v43[v46];
          *(_DWORD *)v47 = *(_DWORD *)v48;
          v47[4] = v48[4];
          __dst[*(int *)(v82 + 24)] = v43[*(int *)(v82 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t))(v81 + 56))(__dst, 0, 1);
        }
        v36 = v87;
        v35 = v88;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v86, 0, 1, v85);
      }
      v49 = v36[7];
      v50 = &v90[v49];
      v51 = &v35[v49];
      *(_DWORD *)v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      v52 = v36[8];
      v53 = &v90[v52];
      v54 = &v35[v52];
      v53[4] = v54[4];
      *(_DWORD *)v53 = *(_DWORD *)v54;
      v55 = v36[9];
      v56 = &v90[v55];
      v57 = &v35[v55];
      *(_DWORD *)v56 = *(_DWORD *)v57;
      v56[4] = v57[4];
      v58 = v36[10];
      v59 = &v90[v58];
      v60 = &v35[v58];
      *(_DWORD *)v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      v61 = v36[11];
      v62 = &v90[v61];
      v63 = &v35[v61];
      *(_DWORD *)v62 = *(_DWORD *)v63;
      v62[4] = v63[4];
      (*(void (**)(void))(v89 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v24, 0, 1, v11);
  }
  v64 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v64) = *(_BYTE *)(a2 + v64);
  v65 = a3[8];
  v66 = (char *)(a1 + v65);
  v67 = (char *)(a2 + v65);
  v68 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v69 = *((_QWORD *)v68 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v69 + 48))(v67, 1, v68))
  {
    v70 = sub_1000039AC(&qword_10036A828);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v66, (uint64_t)v67, v6);
    v71 = v68[5];
    v72 = &v66[v71];
    v73 = &v67[v71];
    *(_QWORD *)v72 = *(_QWORD *)v73;
    v72[8] = v73[8];
    v74 = v68[6];
    v75 = &v66[v74];
    v76 = &v67[v74];
    *(_QWORD *)v75 = *(_QWORD *)v76;
    v75[8] = v76[8];
    v77 = v68[7];
    v78 = &v66[v77];
    v79 = &v67[v77];
    *(_QWORD *)v78 = *(_QWORD *)v79;
    v78[8] = v79[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v69 + 56))(v66, 0, 1, v68);
  }
  return a1;
}

uint64_t sub_10007DB24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, int *);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  int v75;
  size_t v76;
  void *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  int *v107;
  uint64_t v108;
  uint64_t (*v109)(char *, uint64_t, int *);
  int v110;
  int v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t (*v166)(uint64_t, uint64_t, uint64_t);
  int v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  void (**__src)(void *, _QWORD, uint64_t, uint64_t);
  char *__srca;
  uint64_t v201;
  uint64_t v202;
  void (*v203)(uint64_t, char *, uint64_t);
  char *__dst;
  void *__dsta;
  char *__dstb;
  _QWORD *__dstc;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void (*v211)(uint64_t, char *, uint64_t);
  void (*v212)(uint64_t, char *, uint64_t);
  uint64_t v213;
  int *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(uint64_t, uint64_t, uint64_t);
  uint64_t v219;

  v6 = type metadata accessor for UnknownStorage(0);
  v219 = *(_QWORD *)(v6 - 8);
  v218 = *(void (**)(uint64_t, uint64_t, uint64_t))(v219 + 40);
  v218(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12((uint64_t)v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_100004030(v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
      goto LABEL_7;
    }
    v218(v8, (uint64_t)v9, v6);
    v27 = *(int *)(v10 + 20);
    v28 = v8 + v27;
    v29 = &v9[v27];
    *(_DWORD *)v28 = *(_DWORD *)v29;
    *(_BYTE *)(v28 + 4) = v29[4];
    v30 = *(int *)(v10 + 24);
    v31 = v8 + v30;
    v32 = &v9[v30];
    v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    v34 = *((_QWORD *)v33 - 1);
    v35 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v34 + 48);
    v36 = v35(v31, 1, v33);
    v37 = v35((uint64_t)v32, 1, v33);
    if (v36)
    {
      if (!v37)
      {
        v212 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 32);
        v212(v31, v32, v6);
        v38 = v33[5];
        v39 = v31 + v38;
        v40 = &v32[v38];
        *(_DWORD *)v39 = *(_DWORD *)v40;
        *(_BYTE *)(v39 + 4) = v40[4];
        v41 = v33[6];
        v42 = v32;
        v43 = (char *)(v31 + v41);
        v208 = v6;
        v215 = v42;
        v44 = &v42[v41];
        v45 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        v46 = *(_QWORD *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
        {
          v47 = sub_1000039AC(&qword_10036A708);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
          v6 = v208;
          v48 = v215;
        }
        else
        {
          v202 = v46;
          v212((uint64_t)v43, v44, v208);
          v78 = *(int *)(v45 + 20);
          v79 = &v43[v78];
          v80 = &v44[v78];
          *(_DWORD *)v79 = *(_DWORD *)v80;
          v79[4] = v80[4];
          v81 = *(int *)(v45 + 24);
          __dsta = v43;
          __srca = &v43[v81];
          v82 = &v44[v81];
          v83 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
          v198 = *(_QWORD *)(v83 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v198 + 48))(v82, 1, v83))
          {
            v84 = sub_1000039AC(&qword_10036A700);
            memcpy(__srca, v82, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
          }
          else
          {
            v212((uint64_t)__srca, v82, v208);
            v141 = *(int *)(v83 + 20);
            v142 = &__srca[v141];
            v143 = &v82[v141];
            *(_DWORD *)v142 = *(_DWORD *)v143;
            v142[4] = v143[4];
            __srca[*(int *)(v83 + 24)] = v82[*(int *)(v83 + 24)];
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v198 + 56))(__srca, 0, 1, v83);
          }
          v48 = v215;
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v202 + 56))(__dsta, 0, 1, v45);
          v6 = v208;
        }
        v144 = v33[7];
        v145 = v31 + v144;
        v146 = &v48[v144];
        *(_DWORD *)v145 = *(_DWORD *)v146;
        *(_BYTE *)(v145 + 4) = v146[4];
        v147 = v33[8];
        v148 = v31 + v147;
        v149 = &v48[v147];
        *(_BYTE *)(v148 + 4) = v149[4];
        *(_DWORD *)v148 = *(_DWORD *)v149;
        v150 = v33[9];
        v151 = v31 + v150;
        v152 = &v48[v150];
        *(_DWORD *)v151 = *(_DWORD *)v152;
        *(_BYTE *)(v151 + 4) = v152[4];
        v153 = v33[10];
        v154 = v31 + v153;
        v155 = &v48[v153];
        *(_DWORD *)v154 = *(_DWORD *)v155;
        *(_BYTE *)(v154 + 4) = v155[4];
        v156 = v33[11];
        v157 = v31 + v156;
        v158 = &v48[v156];
        *(_DWORD *)v157 = *(_DWORD *)v158;
        *(_BYTE *)(v157 + 4) = v158[4];
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
        goto LABEL_29;
      }
      goto LABEL_17;
    }
    if (v37)
    {
      sub_100004030(v31, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_17:
      v24 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A710) - 8) + 64);
      v25 = (void *)v31;
      v26 = v32;
      goto LABEL_8;
    }
    v210 = v6;
    v218(v31, (uint64_t)v32, v6);
    v67 = v33[5];
    v68 = v31 + v67;
    v69 = &v32[v67];
    *(_DWORD *)v68 = *(_DWORD *)v69;
    *(_BYTE *)(v68 + 4) = v69[4];
    v70 = v33[6];
    v71 = v31 + v70;
    v72 = &v32[v70];
    v73 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v213 = *(_QWORD *)(v73 - 8);
    v216 = v71;
    v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v213 + 48);
    LODWORD(v71) = v74(v71, 1, v73);
    v75 = v74((uint64_t)v72, 1, v73);
    if ((_DWORD)v71)
    {
      if (!v75)
      {
        v203 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 32);
        v203(v216, v72, v210);
        v133 = *(int *)(v73 + 20);
        v134 = v216 + v133;
        v135 = &v72[v133];
        *(_DWORD *)v134 = *(_DWORD *)v135;
        *(_BYTE *)(v134 + 4) = v135[4];
        v136 = *(int *)(v73 + 24);
        __dstb = (char *)(v216 + v136);
        v137 = &v72[v136];
        v138 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v139 = *(_QWORD *)(v138 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
        {
          v140 = sub_1000039AC(&qword_10036A700);
          memcpy(__dstb, v137, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
        }
        else
        {
          v203((uint64_t)__dstb, v137, v210);
          v168 = *(int *)(v138 + 20);
          v169 = &__dstb[v168];
          v170 = &v137[v168];
          *(_DWORD *)v169 = *(_DWORD *)v170;
          v169[4] = v170[4];
          __dstb[*(int *)(v138 + 24)] = v137[*(int *)(v138 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(__dstb, 0, 1, v138);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v213 + 56))(v216, 0, 1, v73);
        goto LABEL_51;
      }
      v76 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A708) - 8) + 64);
      v77 = (void *)v216;
    }
    else
    {
      if (!v75)
      {
        v218(v216, (uint64_t)v72, v210);
        v159 = *(int *)(v73 + 20);
        v160 = v216 + v159;
        v161 = &v72[v159];
        *(_DWORD *)v160 = *(_DWORD *)v161;
        *(_BYTE *)(v160 + 4) = v161[4];
        v162 = *(int *)(v73 + 24);
        v163 = v216 + v162;
        v164 = &v72[v162];
        v165 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        __dstc = *(_QWORD **)(v165 - 8);
        v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dstc[6];
        v217 = v163;
        LODWORD(v163) = v166(v163, 1, v165);
        v167 = v166((uint64_t)v164, 1, v165);
        if ((_DWORD)v163)
        {
          if (!v167)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v219 + 32))(v217, v164, v210);
            v186 = *(int *)(v165 + 20);
            v187 = v217 + v186;
            v188 = &v164[v186];
            *(_DWORD *)v187 = *(_DWORD *)v188;
            *(_BYTE *)(v187 + 4) = v188[4];
            *(_BYTE *)(v217 + *(int *)(v165 + 24)) = v164[*(int *)(v165 + 24)];
            v189 = v165;
            v6 = v210;
            ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))__dstc[7])(v217, 0, 1, v189);
            goto LABEL_52;
          }
          v76 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A700) - 8) + 64);
          v132 = v164;
          v77 = (void *)v217;
        }
        else
        {
          if (!v167)
          {
            v218(v217, (uint64_t)v164, v210);
            v190 = *(int *)(v165 + 20);
            v191 = v217 + v190;
            v192 = &v164[v190];
            *(_DWORD *)v191 = *(_DWORD *)v192;
            *(_BYTE *)(v191 + 4) = v192[4];
            v193 = *(int *)(v165 + 24);
            v6 = v210;
            *(_BYTE *)(v217 + v193) = v164[v193];
            goto LABEL_52;
          }
          sub_100004030(v217, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
          v76 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A700) - 8) + 64);
          v77 = (void *)v217;
          v132 = v164;
        }
        goto LABEL_40;
      }
      sub_100004030(v216, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      v76 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A708) - 8) + 64);
      v77 = (void *)v216;
    }
    v132 = v72;
LABEL_40:
    memcpy(v77, v132, v76);
LABEL_51:
    v6 = v210;
LABEL_52:
    v171 = v33[7];
    v172 = v31 + v171;
    v173 = &v32[v171];
    *(_DWORD *)v172 = *(_DWORD *)v173;
    *(_BYTE *)(v172 + 4) = v173[4];
    v174 = v33[8];
    v175 = v31 + v174;
    v176 = &v32[v174];
    *(_BYTE *)(v175 + 4) = v176[4];
    *(_DWORD *)v175 = *(_DWORD *)v176;
    v177 = v33[9];
    v178 = v31 + v177;
    v179 = &v32[v177];
    *(_DWORD *)v178 = *(_DWORD *)v179;
    *(_BYTE *)(v178 + 4) = v179[4];
    v180 = v33[10];
    v181 = v31 + v180;
    v182 = &v32[v180];
    *(_DWORD *)v181 = *(_DWORD *)v182;
    *(_BYTE *)(v181 + 4) = v182[4];
    v183 = v33[11];
    v184 = v31 + v183;
    v185 = &v32[v183];
    *(_DWORD *)v184 = *(_DWORD *)v185;
    *(_BYTE *)(v184 + 4) = v185[4];
    goto LABEL_29;
  }
  if (v14)
  {
LABEL_7:
    v24 = *(_QWORD *)(*(_QWORD *)(sub_1000039AC(&qword_10036A780) - 8) + 64);
    v25 = (void *)v8;
    v26 = v9;
LABEL_8:
    memcpy(v25, v26, v24);
    goto LABEL_29;
  }
  v211 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 32);
  v214 = a3;
  v211(v8, v9, v6);
  v15 = *(int *)(v10 + 20);
  v16 = v8 + v15;
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v17[4];
  v18 = *(int *)(v10 + 24);
  v19 = (char *)(v8 + v18);
  v20 = &v9[v18];
  v21 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v22 = *((_QWORD *)v21 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_1000039AC(&qword_10036A710);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    a3 = v214;
  }
  else
  {
    v201 = v22;
    v211((uint64_t)v19, v20, v6);
    v49 = v21[5];
    v50 = &v19[v49];
    v51 = &v20[v49];
    *(_DWORD *)v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    v52 = v21[6];
    __dst = &v19[v52];
    v209 = v6;
    v196 = v20;
    v53 = &v20[v52];
    v54 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v55 = *(_QWORD *)(v54 - 8);
    v197 = v19;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      v56 = sub_1000039AC(&qword_10036A708);
      memcpy(__dst, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      v6 = v209;
      a3 = v214;
      v58 = v196;
      v57 = v197;
    }
    else
    {
      v194 = v55;
      v211((uint64_t)__dst, v53, v209);
      v59 = *(int *)(v54 + 20);
      v60 = &__dst[v59];
      v61 = &v53[v59];
      *(_DWORD *)v60 = *(_DWORD *)v61;
      v60[4] = v61[4];
      v195 = v54;
      v62 = *(int *)(v54 + 24);
      v63 = &__dst[v62];
      v64 = &v53[v62];
      v65 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      __src = *(void (***)(void *, _QWORD, uint64_t, uint64_t))(v65 - 8);
      a3 = v214;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))__src[6])(v64, 1, v65))
      {
        v66 = sub_1000039AC(&qword_10036A700);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        v211((uint64_t)v63, v64, v209);
        v85 = *(int *)(v65 + 20);
        v86 = &v63[v85];
        v87 = &v64[v85];
        *(_DWORD *)v86 = *(_DWORD *)v87;
        v86[4] = v87[4];
        v63[*(int *)(v65 + 24)] = v64[*(int *)(v65 + 24)];
        __src[7](v63, 0, 1, v65);
      }
      v58 = v196;
      v57 = v197;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v194 + 56))(__dst, 0, 1, v195);
      v6 = v209;
    }
    v88 = v21[7];
    v89 = &v57[v88];
    v90 = &v58[v88];
    *(_DWORD *)v89 = *(_DWORD *)v90;
    v89[4] = v90[4];
    v91 = v21[8];
    v92 = &v57[v91];
    v93 = &v58[v91];
    v92[4] = v93[4];
    *(_DWORD *)v92 = *(_DWORD *)v93;
    v94 = v21[9];
    v95 = &v57[v94];
    v96 = &v58[v94];
    *(_DWORD *)v95 = *(_DWORD *)v96;
    v95[4] = v96[4];
    v97 = v21[10];
    v98 = &v57[v97];
    v99 = &v58[v97];
    *(_DWORD *)v98 = *(_DWORD *)v99;
    v98[4] = v99[4];
    v100 = v21[11];
    v101 = &v57[v100];
    v102 = &v58[v100];
    *(_DWORD *)v101 = *(_DWORD *)v102;
    v101[4] = v102[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v201 + 56))(v57, 0, 1, v21);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_29:
  v103 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v103) = *(_BYTE *)(a2 + v103);
  v104 = a3[8];
  v105 = (char *)(a1 + v104);
  v106 = (char *)(a2 + v104);
  v107 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v108 = *((_QWORD *)v107 - 1);
  v109 = *(uint64_t (**)(char *, uint64_t, int *))(v108 + 48);
  v110 = v109(v105, 1, v107);
  v111 = v109(v106, 1, v107);
  if (!v110)
  {
    if (!v111)
    {
      v218((uint64_t)v105, (uint64_t)v106, v6);
      v123 = v107[5];
      v124 = &v105[v123];
      v125 = &v106[v123];
      *(_QWORD *)v124 = *(_QWORD *)v125;
      v124[8] = v125[8];
      v126 = v107[6];
      v127 = &v105[v126];
      v128 = &v106[v126];
      *(_QWORD *)v127 = *(_QWORD *)v128;
      v127[8] = v128[8];
      v129 = v107[7];
      v130 = &v105[v129];
      v131 = &v106[v129];
      *(_QWORD *)v130 = *(_QWORD *)v131;
      v130[8] = v131[8];
      return a1;
    }
    sub_100004030((uint64_t)v105, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    goto LABEL_34;
  }
  if (v111)
  {
LABEL_34:
    v121 = sub_1000039AC(&qword_10036A828);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v219 + 32))(v105, v106, v6);
  v112 = v107[5];
  v113 = &v105[v112];
  v114 = &v106[v112];
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v113[8] = v114[8];
  v115 = v107[6];
  v116 = &v105[v115];
  v117 = &v106[v115];
  *(_QWORD *)v116 = *(_QWORD *)v117;
  v116[8] = v117[8];
  v118 = v107[7];
  v119 = &v105[v118];
  v120 = &v106[v118];
  *(_QWORD *)v119 = *(_QWORD *)v120;
  v119[8] = v120[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v108 + 56))(v105, 0, 1, v107);
  return a1;
}

uint64_t sub_10007E7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007E7DC);
}

uint64_t sub_10007E7DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_1000039AC(&qword_10036A780);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 251)
  {
    v11 = sub_1000039AC(&qword_10036A828);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if (*(unsigned __int8 *)(a1 + a3[7]) <= 4u)
    v13 = 4;
  else
    v13 = *(unsigned __int8 *)(a1 + a3[7]);
  v14 = v13 - 4;
  if (*(unsigned __int8 *)(a1 + a3[7]) >= 4u)
    return v14;
  else
    return 0;
}

uint64_t sub_10007E8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007E8C0);
}

uint64_t sub_10007E8C0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_1000039AC(&qword_10036A780);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 251)
      {
        *(_BYTE *)(a1 + a4[7]) = a2 + 4;
        return result;
      }
      v10 = sub_1000039AC(&qword_10036A828);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10007E98C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_10036CAD8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_1002CA0A0;
      v8[3] = &unk_1002CA458;
      sub_10001198C(319, (unint64_t *)&unk_10036CAE0, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

uint64_t *sub_10007EA60(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
  }
  return a1;
}

uint64_t sub_10007EB2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t sub_10007EBCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  return a1;
}

uint64_t sub_10007EC70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t sub_10007ED10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t sub_10007EDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007EDBC);
}

uint64_t sub_10007EDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10007EDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007EE08);
}

uint64_t sub_10007EE0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10007EE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v9;
  _QWORD v10[4];

  result = type metadata accessor for UnknownStorage(319);
  if (v9 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(result - 8) + 64;
    v10[1] = a4;
    v10[2] = a4;
    v10[3] = a5;
    swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10007EEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007EED4);
}

uint64_t sub_10007EED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10007EF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007EF60);
}

uint64_t sub_10007EF64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_10007EFDC()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
}

void sub_10007EFE4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v21[11];

  v21[0] = &unk_1002CA0A0;
  sub_10001198C(319, &qword_10036CC50, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v21[1] = v4;
    sub_10001198C(319, &qword_10036CC58, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
    if (v6 <= 0x3F)
    {
      v21[2] = *(_QWORD *)(v5 - 8) + 64;
      sub_10001198C(319, &qword_10036CC60, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
      if (v8 <= 0x3F)
      {
        v21[3] = *(_QWORD *)(v7 - 8) + 64;
        sub_10001198C(319, &qword_10036CC68, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
        if (v10 <= 0x3F)
        {
          v21[4] = *(_QWORD *)(v9 - 8) + 64;
          sub_10001198C(319, &qword_10036CC70, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
          if (v12 <= 0x3F)
          {
            v21[5] = *(_QWORD *)(v11 - 8) + 64;
            sub_10001198C(319, &qword_10036CC78, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
            if (v14 <= 0x3F)
            {
              v21[6] = *(_QWORD *)(v13 - 8) + 64;
              sub_10001198C(319, &qword_10036CC80, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
              if (v16 <= 0x3F)
              {
                v21[7] = *(_QWORD *)(v15 - 8) + 64;
                sub_10001198C(319, &qword_10036CC88, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                if (v18 <= 0x3F)
                {
                  v21[8] = *(_QWORD *)(v17 - 8) + 64;
                  sub_10001198C(319, (unint64_t *)&unk_10036CC90, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                  if (v20 <= 0x3F)
                  {
                    v21[9] = *(_QWORD *)(v19 - 8) + 64;
                    v21[10] = v4;
                    swift_updateClassMetadata2(a1, 256, 11, v21, a1 + 80);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10007F1C8()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
}

void sub_10007F1D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char *v19;

  v6[0] = &unk_1002C9AC0;
  v6[1] = &unk_1002C9AC0;
  sub_10001198C(319, &qword_10036CE98, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036CEA0, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = v7;
      v10 = &unk_1002C9AC0;
      v11 = &unk_1002C9AC0;
      v12 = &unk_1002CA508;
      v13 = &unk_1002CA508;
      v14 = &unk_1002C9AC0;
      v15 = &unk_1002C9AC0;
      v16 = &unk_1002C9AC0;
      v17 = &unk_1002CA520;
      v18 = &unk_1002C9AC0;
      v19 = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256, 16, v6, a1 + 80);
    }
  }
}

uint64_t sub_10007F2B4()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
}

void sub_10007F2BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[14];

  sub_10001198C(319, &qword_10036CAD8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  if (v3 <= 0x3F)
  {
    v17[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_10036D148, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
    if (v5 <= 0x3F)
    {
      v17[1] = *(_QWORD *)(v4 - 8) + 64;
      v17[2] = "\t";
      v17[3] = "\t";
      v17[4] = "\t";
      sub_10001198C(319, &qword_10036BAE0, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
      if (v7 <= 0x3F)
      {
        v17[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001198C(319, (unint64_t *)&unk_10036BAE8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
        if (v9 <= 0x3F)
        {
          v10 = *(_QWORD *)(v8 - 8) + 64;
          v17[6] = v10;
          sub_10001198C(319, &qword_10036D150, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
          if (v12 <= 0x3F)
          {
            v17[7] = *(_QWORD *)(v11 - 8) + 64;
            sub_10001198C(319, &qword_10036D158, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
            if (v14 <= 0x3F)
            {
              v17[8] = *(_QWORD *)(v13 - 8) + 64;
              v17[9] = &unk_1002C9AC0;
              v17[10] = &unk_1002C9AD8;
              v17[11] = v10;
              v17[12] = &unk_1002C9B98;
              sub_10001198C(319, (unint64_t *)&unk_10036D160, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
              if (v16 <= 0x3F)
              {
                v17[13] = *(_QWORD *)(v15 - 8) + 64;
                swift_updateClassMetadata2(a1, 256, 14, v17, a1 + 80);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10007F468()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
}

void sub_10007F470(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10001198C(319, (unint64_t *)&unk_10036D3C8, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t sub_10007F4F8()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
}

void sub_10007F500(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[23];

  sub_10001198C(319, &qword_10036CAD8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    v6[2] = &unk_1002CA508;
    v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[4] = "\t";
    v6[5] = "\t";
    v6[6] = "\t";
    v6[7] = &unk_1002C9AC0;
    v6[8] = &unk_1002C9AC0;
    v6[9] = &unk_1002C9AD8;
    v6[10] = &unk_1002C9AD8;
    v6[11] = &unk_1002C9AD8;
    v6[12] = &unk_1002C9AD8;
    v6[13] = &unk_1002C9AD8;
    v6[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036D4B0, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
    if (v5 <= 0x3F)
    {
      v6[15] = *(_QWORD *)(v4 - 8) + 64;
      v6[16] = &unk_1002C9AD8;
      v6[17] = &unk_1002C9AD8;
      v6[18] = &unk_1002C9AD8;
      v6[19] = &unk_1002C9AD8;
      v6[20] = &unk_1002C9AD8;
      v6[21] = "\t";
      v6[22] = &unk_1002CA458;
      swift_updateClassMetadata2(a1, 256, 23, v6, a1 + 80);
    }
  }
}

uint64_t sub_10007F608()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
}

void sub_10007F610(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[0] = &unk_1002C9AC0;
  sub_10001198C(319, &qword_10036C550, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036C810, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = v7;
      v10 = v7;
      swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
    }
  }
}

uint64_t sub_10007F6C8()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
}

void sub_10007F6D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_10001198C(319, &qword_10036D998, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_10036D9A0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, &qword_10036D9A8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001198C(319, &qword_10036D9B0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_10001198C(319, (unint64_t *)&unk_10036D9B8, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_updateClassMetadata2(a1, 256, 5, v12, a1 + 80);
          }
        }
      }
    }
  }
}

uint64_t sub_10007F7F8()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
}

void sub_10007F800(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[9];

  sub_10001198C(319, &qword_10036DB00, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_10036DB08, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v10[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      sub_10001198C(319, &qword_10036DB10, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        v10[5] = "\t";
        v10[6] = "\t";
        sub_10001198C(319, (unint64_t *)&unk_10036DB18, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
        if (v9 <= 0x3F)
        {
          v10[7] = *(_QWORD *)(v8 - 8) + 64;
          v10[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_updateClassMetadata2(a1, 256, 9, v10, a1 + 80);
        }
      }
    }
  }
}

unint64_t sub_10007F91C()
{
  unint64_t result;

  result = qword_10036DE48;
  if (!qword_10036DE48)
  {
    result = swift_getWitnessTable(&unk_1002C4F24, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint);
    atomic_store(result, (unint64_t *)&qword_10036DE48);
  }
  return result;
}

unint64_t sub_10007F960()
{
  unint64_t result;

  result = qword_10036DE50;
  if (!qword_10036DE50)
  {
    result = swift_getWitnessTable(&unk_1002C4E04, &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
    atomic_store(result, (unint64_t *)&qword_10036DE50);
  }
  return result;
}

unint64_t sub_10007F9A4()
{
  unint64_t result;

  result = qword_10036DE58;
  if (!qword_10036DE58)
  {
    result = swift_getWitnessTable(&unk_1002C4CE4, &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
    atomic_store(result, (unint64_t *)&qword_10036DE58);
  }
  return result;
}

unint64_t sub_10007F9E8()
{
  unint64_t result;

  result = qword_10036DE60;
  if (!qword_10036DE60)
  {
    result = swift_getWitnessTable(&unk_1002C4BC4, &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
    atomic_store(result, (unint64_t *)&qword_10036DE60);
  }
  return result;
}

unint64_t sub_10007FA2C()
{
  unint64_t result;

  result = qword_10036DE68;
  if (!qword_10036DE68)
  {
    result = swift_getWitnessTable(&unk_1002C4AA4, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication);
    atomic_store(result, (unint64_t *)&qword_10036DE68);
  }
  return result;
}

unint64_t sub_10007FA70()
{
  unint64_t result;

  result = qword_10036DE70;
  if (!qword_10036DE70)
  {
    result = swift_getWitnessTable(&unk_1002C4984, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource);
    atomic_store(result, (unint64_t *)&qword_10036DE70);
  }
  return result;
}

unint64_t sub_10007FAB4()
{
  unint64_t result;

  result = qword_10036DE78;
  if (!qword_10036DE78)
  {
    result = swift_getWitnessTable(&unk_1002C4864, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator);
    atomic_store(result, (unint64_t *)&qword_10036DE78);
  }
  return result;
}

unint64_t sub_10007FAF8()
{
  unint64_t result;

  result = qword_10036DE80;
  if (!qword_10036DE80)
  {
    result = swift_getWitnessTable(&unk_1002C4744, &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
    atomic_store(result, (unint64_t *)&qword_10036DE80);
  }
  return result;
}

unint64_t sub_10007FB3C()
{
  unint64_t result;

  result = qword_10036DE88;
  if (!qword_10036DE88)
  {
    result = swift_getWitnessTable(&unk_1002C4624, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource);
    atomic_store(result, (unint64_t *)&qword_10036DE88);
  }
  return result;
}

