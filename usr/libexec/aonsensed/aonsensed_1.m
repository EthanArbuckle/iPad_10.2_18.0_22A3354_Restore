unint64_t sub_10007FB80()
{
  unint64_t result;

  result = qword_10036DE90;
  if (!qword_10036DE90)
  {
    result = swift_getWitnessTable(&unk_1002C4504, &type metadata for CLP_LogEntry_PrivateData_Band);
    atomic_store(result, (unint64_t *)&qword_10036DE90);
  }
  return result;
}

unint64_t sub_10007FBC4()
{
  unint64_t result;

  result = qword_10036DE98;
  if (!qword_10036DE98)
  {
    result = swift_getWitnessTable(&unk_1002C43E4, &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem);
    atomic_store(result, (unint64_t *)&qword_10036DE98);
  }
  return result;
}

unint64_t sub_10007FC08()
{
  unint64_t result;

  result = qword_10036DEA0;
  if (!qword_10036DEA0)
  {
    result = swift_getWitnessTable(&unk_1002C42C4, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource);
    atomic_store(result, (unint64_t *)&qword_10036DEA0);
  }
  return result;
}

uint64_t sub_10007FC74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_1000039AC(&qword_10036DFF8);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10036DFF8);
  v7 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036DFF8);
}

int *sub_10007FD94@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_LogEntry(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393D50, (uint64_t)&nominal type descriptor for CLP_LogEntry_LogEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_100393D60, (uint64_t)&nominal type descriptor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t sub_10007FE28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
  sub_100015704(v3, &qword_10036DFF8);
  sub_100003E08(a1, v3, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  v4 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*sub_10007FE98(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036DFF8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036DFF8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036DFF8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  }
  return sub_10007FFF8;
}

void sub_10007FFF8(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036DFF8, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

BOOL sub_10008000C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = sub_1000039AC(&qword_10036DFF8);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_10000E660(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_10036DFF8);
  v5 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100015704((uint64_t)v3, &qword_10036DFF8);
  return v6;
}

uint64_t sub_1000800C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
  sub_100015704(v1, &qword_10036DFF8);
  v2 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_100080118@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = sub_1000039AC(&qword_10036E000);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10036E000);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  sub_100087F9C(a1);
  return sub_100015704((uint64_t)v5, &qword_10036E000);
}

uint64_t sub_1000801F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
  sub_100015704(v3, &qword_10036E000);
  sub_100003E08(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*sub_100080260(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E000);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_100087F9C((uint64_t)v9);
    sub_100015704((uint64_t)v5, &qword_10036E000);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  }
  return sub_10008037C;
}

void sub_10008037C(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E000, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

BOOL sub_100080390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = sub_1000039AC(&qword_10036E000);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_10000E660(v0 + *(int *)(v4 + 28), (uint64_t)v3, &qword_10036E000);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100015704((uint64_t)v3, &qword_10036E000);
  return v6;
}

uint64_t sub_100080444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
  sub_100015704(v1, &qword_10036E000);
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

double sub_10008049C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t sub_1000804D0(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v4 = v1 + *(int *)(result + 20);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100080504(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10008055C()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20) + 8) & 1) == 0;
}

uint64_t sub_100080588()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v2 = v0 + *(int *)(result + 20);
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

double sub_1000805B4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t sub_1000805E8(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v4 = v1 + *(int *)(result + 24);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_10008061C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100080674()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24) + 8) & 1) == 0;
}

uint64_t sub_1000806A0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v2 = v0 + *(int *)(result + 24);
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

double sub_1000806CC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t sub_100080700(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v4 = v1 + *(int *)(result + 28);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100080734(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10008078C()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28) + 8) & 1) == 0;
}

uint64_t sub_1000807B8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v2 = v0 + *(int *)(result + 28);
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_1000807E4()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t sub_100080814(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v4 = v1 + *(int *)(result + 32);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100080848(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100004A78;
}

BOOL sub_10008089C()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32) + 8) & 1) == 0;
}

uint64_t sub_1000808C8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v2 = v0 + *(int *)(result + 32);
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_1000808F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  ExtensionFieldValueSet.init()();
  v3 = a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 28);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t sub_10008098C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, a1);
}

uint64_t sub_100080998@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, a1);
}

uint64_t sub_1000809A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 20);
  v4 = type metadata accessor for ExtensionFieldValueSet(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000809EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 20);
  v4 = type metadata accessor for ExtensionFieldValueSet(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_100080A34())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_LogEntry(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100080A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for ExtensionFieldValueSet(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_100080A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ExtensionFieldValueSet(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

void *sub_100080ADC()
{
  return &unk_100352EE0;
}

unint64_t sub_100080AE8()
{
  return 0xD000000000000015;
}

uint64_t sub_100080B04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383520);
  sub_10000E6A4(v0, (uint64_t)qword_100383520);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "event_record_time";
  *(_QWORD *)(v9 + 8) = 17;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 4;
  *(_QWORD *)v13 = "private_data_capture";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100080C58()
{
  return sub_100008BD0(&qword_1003936B0, (uint64_t)qword_100383520, (uint64_t)sub_100080B04);
}

uint64_t sub_100080C74@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003936B0, (uint64_t)qword_100383520, (uint64_t)sub_100080B04, a1);
}

uint64_t sub_100080C90()
{
  type metadata accessor for CLP_LogEntry_LogEntry(0);
  return ExtensionFieldValueSet.isInitialized.getter() & 1;
}

uint64_t sub_100080CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  uint64_t v16;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      if (result == 4)
        break;
      if (result == 2)
      {
        v9 = type metadata accessor for CLP_LogEntry_LogEntry(0);
        v10 = sub_10000FD38(&qword_10036E018, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002CA5D4);
        dispatch thunk of Decoder.decodeExtensionField(values:messageType:fieldNumber:)(v3 + *(int *)(v9 + 20), v9, v10, 2, a2, a3);
        goto LABEL_12;
      }
      if (result == 1)
      {
        v11 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
        v12 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
        v13 = (unint64_t *)&unk_10036E038;
        v14 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp;
        v15 = &unk_1002CA73C;
LABEL_11:
        v16 = sub_10000FD38(v13, v14, (uint64_t)v15);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v11, v12, v16, a2, a3);
      }
LABEL_12:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v11 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
    v13 = (unint64_t *)&unk_10036E1A0;
    v14 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture;
    v15 = &unk_1002CA930;
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_100080E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;

  v5 = v3;
  result = sub_100080F14(v5, a1, a2, a3);
  if (!v4)
  {
    v10 = type metadata accessor for CLP_LogEntry_LogEntry(0);
    dispatch thunk of Visitor.visitExtensionFields(fields:start:end:)(v5 + *(int *)(v10 + 20), 2, 3, a2, a3);
    sub_100081088(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100080F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036DFF8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036DFF8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036DFF8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  v15 = sub_10000FD38(&qword_10036E038, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&unk_1002CA73C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t sub_100081088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E000);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036E000);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E000);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  v15 = sub_10000FD38(&qword_10036E1A0, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&unk_1002CA930);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

Swift::Int sub_100081200()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_LogEntry, &qword_10036E008, (uint64_t)&unk_1002CA6D4);
}

uint64_t sub_10008121C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = UnknownStorage.init()();
  ExtensionFieldValueSet.init()(v4);
  v5 = a2 + *(int *)(a1 + 24);
  v6 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a2 + *(int *)(a1 + 28);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t sub_1000812A8()
{
  return ExtensionFieldValueSet.isInitialized.getter() & 1;
}

uint64_t sub_1000812D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100080CC0(a1, a2, a3);
}

uint64_t sub_1000812E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100080E50(a1, a2, a3);
}

uint64_t sub_1000812F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E178, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002CA64C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100081348@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003936B0, (uint64_t)qword_100383520, (uint64_t)sub_100080B04, a1);
}

uint64_t sub_100081364(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E018, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002CA5D4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000813A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E018, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002CA5D4);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_1000813F8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x617453656D69542ELL;
  v0._object = (void *)0xEA0000000000706DLL;
  String.append(_:)(v0);
  qword_100383538 = 0xD000000000000015;
  unk_100383540 = 0x80000001002F40F0;
}

uint64_t *sub_100081464()
{
  if (qword_1003936B8 != -1)
    swift_once(&qword_1003936B8, sub_1000813F8);
  return &qword_100383538;
}

uint64_t sub_1000814A4()
{
  uint64_t v0;

  if (qword_1003936B8 != -1)
    swift_once(&qword_1003936B8, sub_1000813F8);
  v0 = qword_100383538;
  swift_bridgeObjectRetain(unk_100383540);
  return v0;
}

uint64_t sub_100081500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383548);
  sub_10000E6A4(v0, (uint64_t)qword_100383548);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "cf_absolute_time_s";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "mach_absolute_time_s";
  *(_QWORD *)(v13 + 8) = 20;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "mach_continuous_time_s";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "pipelined_monotonic_time_ns";
  *((_QWORD *)v17 + 1) = 27;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000816C0()
{
  return sub_100008BD0(qword_1003936C0, (uint64_t)qword_100383548, (uint64_t)sub_100081500);
}

uint64_t sub_1000816DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(qword_1003936C0, (uint64_t)qword_100383548, (uint64_t)sub_100081500, a1);
}

uint64_t sub_1000816F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20);
          goto LABEL_5;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24);
          goto LABEL_5;
        case 3:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 4:
          v10 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + *(int *)(v10 + 32), a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100081804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v11);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(*(_QWORD *)v14, 4, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_100081934()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, &qword_10036E010, (uint64_t)&unk_1002CA83C);
}

uint64_t sub_100081950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000816F8(a1, a2, a3);
}

uint64_t sub_100081964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100081804(a1, a2, a3);
}

uint64_t sub_100081978(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E170, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&unk_1002CA7B4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000819C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(qword_1003936C0, (uint64_t)qword_100383548, (uint64_t)sub_100081500, a1);
}

uint64_t sub_1000819E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E038, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&unk_1002CA73C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100081A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E038, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&unk_1002CA73C);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_100081A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  _QWORD *v30;
  int v31;
  char v32;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v37 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_21;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_21;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_21;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_21;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_21;
LABEL_19:
    v27 = v11[8];
    v28 = (_QWORD *)(a1 + v27);
    v29 = *(_BYTE *)(a1 + v27 + 8);
    v30 = (_QWORD *)(a2 + v27);
    v31 = *(unsigned __int8 *)(a2 + v27 + 8);
    if ((v29 & 1) != 0)
    {
      if (!v31)
        goto LABEL_21;
    }
    else
    {
      if (*v28 != *v30)
        LOBYTE(v31) = 1;
      if ((v31 & 1) != 0)
        goto LABEL_21;
    }
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v34(v10, a1, v4);
    v34(v8, a2, v4);
    v35 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v35);
    v36 = *(void (**)(char *, uint64_t))(v5 + 8);
    v36(v8, v4);
    v36(v10, v4);
    return v32 & 1;
  }
  if (v26)
    goto LABEL_19;
LABEL_21:
  v32 = 0;
  return v32 & 1;
}

uint64_t sub_100081C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v87 = a1;
  v88 = a2;
  v2 = type metadata accessor for ExtensionFieldValueSet(0);
  v72 = *(_QWORD *)(v2 - 8);
  v73 = v2;
  v3 = __chkstk_darwin(v2);
  v71 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v70 = (char *)&v70 - v5;
  v6 = type metadata accessor for UnknownStorage(0);
  v77 = *(_QWORD *)(v6 - 8);
  v78 = v6;
  v7 = __chkstk_darwin(v6);
  v76 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v75 = (char *)&v70 - v9;
  v84 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v81 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v74 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_1000039AC(&qword_10036E180);
  __chkstk_darwin(v80);
  v85 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_10036E000);
  v13 = __chkstk_darwin(v12);
  v79 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v86 = (uint64_t)&v70 - v16;
  __chkstk_darwin(v15);
  v82 = (uint64_t)&v70 - v17;
  v18 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000039AC(&qword_10036E188);
  __chkstk_darwin(v22);
  v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000039AC(&qword_10036DFF8);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v70 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)&v70 - v32;
  v34 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_10000E660(v87 + *(int *)(v34 + 24), (uint64_t)v33, &qword_10036DFF8);
  v83 = v34;
  sub_10000E660(v88 + *(int *)(v34 + 24), (uint64_t)v31, &qword_10036DFF8);
  v35 = (uint64_t)&v24[*(int *)(v22 + 48)];
  sub_10000E660((uint64_t)v33, (uint64_t)v24, &qword_10036DFF8);
  sub_10000E660((uint64_t)v31, v35, &qword_10036DFF8);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v36((uint64_t)v24, 1, v18) == 1)
  {
    sub_100015704((uint64_t)v31, &qword_10036DFF8);
    sub_100015704((uint64_t)v33, &qword_10036DFF8);
    if (v36(v35, 1, v18) == 1)
    {
      sub_100015704((uint64_t)v24, &qword_10036DFF8);
      goto LABEL_8;
    }
LABEL_6:
    v37 = &qword_10036E188;
    v38 = (uint64_t)v24;
LABEL_14:
    sub_100015704(v38, v37);
    goto LABEL_15;
  }
  sub_10000E660((uint64_t)v24, (uint64_t)v28, &qword_10036DFF8);
  if (v36(v35, 1, v18) == 1)
  {
    sub_100015704((uint64_t)v31, &qword_10036DFF8);
    sub_100015704((uint64_t)v33, &qword_10036DFF8);
    sub_100004030((uint64_t)v28, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v35, (uint64_t)v21, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  v39 = sub_100081A78((uint64_t)v28, (uint64_t)v21);
  sub_100004030((uint64_t)v21, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  sub_100015704((uint64_t)v31, &qword_10036DFF8);
  sub_100015704((uint64_t)v33, &qword_10036DFF8);
  sub_100004030((uint64_t)v28, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  sub_100015704((uint64_t)v24, &qword_10036DFF8);
  if ((v39 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v41 = v82;
  v40 = v83;
  v42 = v87;
  sub_10000E660(v87 + *(int *)(v83 + 28), v82, &qword_10036E000);
  v43 = v88;
  v44 = v86;
  sub_10000E660(v88 + *(int *)(v40 + 28), v86, &qword_10036E000);
  v45 = v85;
  v46 = v85 + *(int *)(v80 + 48);
  sub_10000E660(v41, v85, &qword_10036E000);
  sub_10000E660(v44, v46, &qword_10036E000);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
  v48 = v84;
  if (v47(v45, 1, v84) != 1)
  {
    v49 = v79;
    sub_10000E660(v45, v79, &qword_10036E000);
    if (v47(v46, 1, v48) != 1)
    {
      v52 = v74;
      sub_100003E08(v46, v74, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      v53 = sub_10000FD38(&qword_10036E198, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&unk_1002CAA70);
      v54 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v52, v48, v53);
      sub_100004030(v52, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      sub_100015704(v86, &qword_10036E000);
      sub_100015704(v41, &qword_10036E000);
      sub_100004030(v49, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      sub_100015704(v45, &qword_10036E000);
      if ((v54 & 1) == 0)
        goto LABEL_15;
      goto LABEL_18;
    }
    sub_100015704(v86, &qword_10036E000);
    sub_100015704(v41, &qword_10036E000);
    sub_100004030(v49, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_13;
  }
  sub_100015704(v44, &qword_10036E000);
  sub_100015704(v41, &qword_10036E000);
  if (v47(v46, 1, v48) != 1)
  {
LABEL_13:
    v37 = &qword_10036E180;
    v38 = v45;
    goto LABEL_14;
  }
  sub_100015704(v45, &qword_10036E000);
LABEL_18:
  v55 = v77;
  v56 = v78;
  v57 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
  v58 = v75;
  v57(v75, v42, v78);
  v59 = v76;
  v57(v76, v43, v56);
  v60 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(v57) = dispatch thunk of static Equatable.== infix(_:_:)(v58, v59, v56, v60);
  v61 = *(void (**)(char *, uint64_t))(v55 + 8);
  v61(v59, v56);
  v61(v58, v56);
  if ((v57 & 1) != 0)
  {
    v63 = v72;
    v62 = v73;
    v64 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
    v65 = v70;
    v64(v70, v42 + *(int *)(v40 + 20), v73);
    v66 = v43 + *(int *)(v40 + 20);
    v67 = v71;
    v64(v71, v66, v62);
    v68 = sub_10000FD38(&qword_10036E190, (uint64_t (*)(uint64_t))&type metadata accessor for ExtensionFieldValueSet, (uint64_t)&protocol conformance descriptor for ExtensionFieldValueSet);
    v50 = dispatch thunk of static Equatable.== infix(_:_:)(v65, v67, v62, v68);
    v69 = *(void (**)(char *, uint64_t))(v63 + 8);
    v69(v67, v62);
    v69(v65, v62);
    return v50 & 1;
  }
LABEL_15:
  v50 = 0;
  return v50 & 1;
}

uint64_t sub_1000823E8()
{
  return sub_10000FD38(&qword_10036E018, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002CA5D4);
}

uint64_t sub_100082414()
{
  return sub_10000FD38(&qword_10036E020, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002CA6AC);
}

uint64_t sub_100082440()
{
  return sub_10000FD38(&qword_10036E018, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002CA5D4);
}

uint64_t sub_10008246C()
{
  return sub_10000FD38(&qword_10036E008, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002CA6D4);
}

uint64_t sub_100082498()
{
  return sub_10000FD38(&qword_10036E028, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002CA714);
}

uint64_t sub_1000824C4()
{
  return sub_10000FD38(&qword_10036E030, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&unk_1002CA814);
}

uint64_t sub_1000824F0()
{
  return sub_10000FD38(&qword_10036E038, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&unk_1002CA73C);
}

uint64_t sub_10008251C()
{
  return sub_10000FD38(&qword_10036E010, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&unk_1002CA83C);
}

uint64_t sub_100082548()
{
  return sub_10000FD38(&qword_10036E040, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&unk_1002CA87C);
}

uint64_t *sub_100082574(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, _QWORD, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for ExtensionFieldValueSet(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_1000039AC(&qword_10036DFF8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v14, (uint64_t *)v15, v7);
      v20 = v16[5];
      v21 = &v14[v20];
      v22 = &v15[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v16[6];
      v24 = &v14[v23];
      v25 = &v15[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      v26 = v16[7];
      v27 = &v14[v26];
      v28 = &v15[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      v29 = v16[8];
      v30 = &v14[v29];
      v31 = &v15[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      v30[8] = v31[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    v32 = a3[7];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = sub_1000039AC(&qword_10036E000);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v33, (uint64_t *)v34, v7);
      v38 = *(int *)(v35 + 20);
      v39 = *(_QWORD *)&v34[v38];
      *(_QWORD *)&v33[v38] = v39;
      v40 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56);
      swift_retain(v39);
      v40(v33, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t sub_1000827B8(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for ExtensionFieldValueSet(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[6];
  v9 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    v5(v8, v4);
  v10 = a1 + a2[7];
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    v5(v10, v4);
    return swift_release(*(_QWORD *)(v10 + *(int *)(v11 + 20)));
  }
  return result;
}

uint64_t sub_1000828BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for ExtensionFieldValueSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_1000039AC(&qword_10036DFF8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v13, (uint64_t)v14, v6);
    v18 = v15[5];
    v19 = &v13[v18];
    v20 = &v14[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v15[6];
    v22 = &v13[v21];
    v23 = &v14[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = v15[7];
    v25 = &v13[v24];
    v26 = &v14[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    v27 = v15[8];
    v28 = &v13[v27];
    v29 = &v14[v27];
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  v30 = a3[7];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = sub_1000039AC(&qword_10036E000);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    v36 = *(int *)(v33 + 20);
    v37 = *(_QWORD *)&v32[v36];
    *(_QWORD *)&v31[v36] = v37;
    v38 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56);
    swift_retain(v37);
    v38(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t sub_100082AD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;

  v6 = type metadata accessor for UnknownStorage(0);
  v69 = *(_QWORD *)(v6 - 8);
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 24);
  v68(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ExtensionFieldValueSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v12, v13, v6);
      v19 = v14[5];
      v20 = &v12[v19];
      v21 = &v13[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v14[6];
      v24 = &v12[v23];
      v25 = &v13[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      v27 = v14[7];
      v28 = &v12[v27];
      v29 = &v13[v27];
      v30 = v29[8];
      *(_QWORD *)v28 = *(_QWORD *)v29;
      v28[8] = v30;
      v31 = v14[8];
      v32 = &v12[v31];
      v33 = &v13[v31];
      v34 = v33[8];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v34;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
LABEL_6:
    v35 = sub_1000039AC(&qword_10036DFF8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_7;
  }
  v68((uint64_t)v12, (uint64_t)v13, v6);
  v49 = v14[5];
  v50 = &v12[v49];
  v51 = &v13[v49];
  v52 = v51[8];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v52;
  v53 = v14[6];
  v54 = &v12[v53];
  v55 = &v13[v53];
  v56 = v55[8];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v56;
  v57 = v14[7];
  v58 = &v12[v57];
  v59 = &v13[v57];
  v60 = v59[8];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v60;
  v61 = v14[8];
  v62 = &v12[v61];
  v63 = &v13[v61];
  v64 = v63[8];
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v62[8] = v64;
LABEL_7:
  v36 = a3[7];
  v37 = (char *)(a1 + v36);
  v38 = (char *)(a2 + v36);
  v39 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  v42 = v41(v37, 1, v39);
  v43 = v41(v38, 1, v39);
  if (!v42)
  {
    if (!v43)
    {
      v68((uint64_t)v37, (uint64_t)v38, v6);
      v65 = *(int *)(v39 + 20);
      v66 = *(_QWORD *)&v38[v65];
      v67 = *(_QWORD *)&v37[v65];
      *(_QWORD *)&v37[v65] = v66;
      swift_retain(v66);
      swift_release(v67);
      return a1;
    }
    sub_100004030((uint64_t)v37, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_12;
  }
  if (v43)
  {
LABEL_12:
    v47 = sub_1000039AC(&qword_10036E000);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v37, v38, v6);
  v44 = *(int *)(v39 + 20);
  v45 = *(_QWORD *)&v38[v44];
  *(_QWORD *)&v37[v44] = v45;
  v46 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56);
  swift_retain(v45);
  v46(v37, 0, 1, v39);
  return a1;
}

uint64_t sub_100082E20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for ExtensionFieldValueSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_1000039AC(&qword_10036DFF8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v13, (uint64_t)v14, v6);
    v18 = v15[5];
    v19 = &v13[v18];
    v20 = &v14[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v15[6];
    v22 = &v13[v21];
    v23 = &v14[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = v15[7];
    v25 = &v13[v24];
    v26 = &v14[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    v27 = v15[8];
    v28 = &v13[v27];
    v29 = &v14[v27];
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  v30 = a3[7];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = sub_1000039AC(&qword_10036E000);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    *(_QWORD *)&v31[*(int *)(v33 + 20)] = *(_QWORD *)&v32[*(int *)(v33 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t sub_100083034(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;

  v6 = type metadata accessor for UnknownStorage(0);
  v57 = *(_QWORD *)(v6 - 8);
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 40);
  v56(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ExtensionFieldValueSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v12, v13, v6);
      v19 = v14[5];
      v20 = &v12[v19];
      v21 = &v13[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v14[6];
      v23 = &v12[v22];
      v24 = &v13[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v14[7];
      v26 = &v12[v25];
      v27 = &v13[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      v28 = v14[8];
      v29 = &v12[v28];
      v30 = &v13[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
LABEL_6:
    v31 = sub_1000039AC(&qword_10036DFF8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  v56((uint64_t)v12, (uint64_t)v13, v6);
  v42 = v14[5];
  v43 = &v12[v42];
  v44 = &v13[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v43[8] = v44[8];
  v45 = v14[6];
  v46 = &v12[v45];
  v47 = &v13[v45];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v46[8] = v47[8];
  v48 = v14[7];
  v49 = &v12[v48];
  v50 = &v13[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v50[8];
  v51 = v14[8];
  v52 = &v12[v51];
  v53 = &v13[v51];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v52[8] = v53[8];
LABEL_7:
  v32 = a3[7];
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  v35 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      v56((uint64_t)v33, (uint64_t)v34, v6);
      v54 = *(int *)(v35 + 20);
      v55 = *(_QWORD *)&v33[v54];
      *(_QWORD *)&v33[v54] = *(_QWORD *)&v34[v54];
      swift_release(v55);
      return a1;
    }
    sub_100004030((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    v40 = sub_1000039AC(&qword_10036E000);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v33, v34, v6);
  *(_QWORD *)&v33[*(int *)(v35 + 20)] = *(_QWORD *)&v34[*(int *)(v35 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t sub_100083374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100083380);
}

uint64_t sub_100083380(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for ExtensionFieldValueSet(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_1000039AC(&qword_10036DFF8);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_1000039AC(&qword_10036E000);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100083444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100083450);
}

uint64_t sub_100083450(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for ExtensionFieldValueSet(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_1000039AC(&qword_10036DFF8);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_1000039AC(&qword_10036E000);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10008351C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ExtensionFieldValueSet(319);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, &qword_10036E0A0, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001198C(319, (unint64_t *)&unk_10036E0A8, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_1000835F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100083604);
}

uint64_t sub_100083604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100083640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008364C);
}

uint64_t sub_10008364C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10008368C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\t";
    v4[2] = "\t";
    v4[3] = "\t";
    v4[4] = "\t";
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100083704@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t started;
  char v6;
  uint64_t result;
  char v8;

  v1 = sub_1000038F8(a1);
  v2 = ALResultOptions._maxBatchSize.getter(v1);
  if ((v2 & 0x100000000) == 0)
    v2 = sub_1000043B0(v2);
  v3 = ALResultOptions._intervalSec.getter(v2);
  if ((v3 & 0x100000000) == 0)
    v3 = sub_1000044C0(*(float *)&v3);
  v4 = ALResultOptions._maxAgeSec.getter(v3);
  if ((v4 & 0x100000000) == 0)
    v4 = sub_1000045D8(*(float *)&v4);
  started = ALResultOptions._startCfaTimeSec.getter(v4);
  if ((v6 & 1) == 0)
    started = sub_1000048D4(*(double *)&started);
  result = ALResultOptions._endCfaTimeSec.getter(started);
  if ((v8 & 1) == 0)
    return sub_1000049EC(*(double *)&result);
  return result;
}

uint64_t sub_1000837A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v0 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v5 = (_QWORD *)((char *)v14 - v4);
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  __chkstk_darwin(v6);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004BB4((uint64_t)v8);
  sub_1000036C0(3);
  v9 = sub_1000038F8(v5);
  v10 = ALResultOptions.intervalSec.getter(v9);
  sub_1000044C0(v10);
  sub_100003FEC((uint64_t)v5, (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  sub_100003A00((uint64_t)v3);
  v11 = sub_10000FD38((unint64_t *)&qword_100369F30, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&unk_1002C342C);
  v12 = Message.serializedData(partial:)(0, v6, v11);
  sub_100004030((uint64_t)v5, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  sub_100004030((uint64_t)v8, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  return v12;
}

uint64_t sub_100083920(uint64_t a1)
{
  float v2;

  ALResultOptions.init()();
  if (sub_10000454C())
  {
    v2 = sub_10000448C();
    ALResultOptions._intervalSec.setter(LODWORD(v2));
  }
  return sub_100004030(a1, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_100083990@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  char *v28;

  v25 = a3;
  v6 = type metadata accessor for ALResultOptions(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v28 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BinaryDecodingOptions(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v24 - v16;
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  v18 = sub_100017EF8(a1, a2);
  BinaryDecodingOptions.init()(v18);
  v19 = sub_10000FD38(&qword_100369F48, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&unk_1002C35BC);
  Message.init(serializedData:extensions:partial:options:)(a1, a2, v26, 0, v11, v12, v19);
  if (v3)
    return sub_100017F3C(a1, a2);
  v21 = v25;
  v22 = sub_100003FEC((uint64_t)v17, (uint64_t)v15, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  ALResultOptions.init()(v22);
  if (sub_10000454C())
  {
    v23 = sub_10000448C();
    LOBYTE(v26[0]) = 0;
    ALResultOptions._intervalSec.setter(LODWORD(v23));
  }
  sub_100004030((uint64_t)v15, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21, v28, v6);
  sub_100017F3C(a1, a2);
  return sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

void sub_100083BB0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100083BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = enum case for ALWiFiScanSingleAccessPoint.Band.unknown(_:);
  v2 = ((uint64_t (*)(_QWORD))type metadata accessor for ALWiFiScanSingleAccessPoint.Band)(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t sub_100083C34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for ALWiFiScanSingleAccessPoint.Band.unknown(_:))
    return 0;
  if (v4 == enum case for ALWiFiScanSingleAccessPoint.Band.band2G(_:))
    return 1;
  if (v4 == enum case for ALWiFiScanSingleAccessPoint.Band.band5G(_:))
    return 2;
  if (v4 != enum case for ALWiFiScanSingleAccessPoint.Band.band6G(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 3;
}

void sub_100083CF8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100083D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = enum case for ALWiFiScanSingleAccessPoint.Mode.unknown(_:);
  v2 = ((uint64_t (*)(_QWORD))type metadata accessor for ALWiFiScanSingleAccessPoint.Mode)(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t sub_100083D7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for ALWiFiScanSingleAccessPoint.Mode.unknown(_:))
    return 0;
  if (v4 == enum case for ALWiFiScanSingleAccessPoint.Mode.ibss(_:))
    return 1;
  if (v4 == enum case for ALWiFiScanSingleAccessPoint.Mode.infra(_:))
    return 2;
  if (v4 != enum case for ALWiFiScanSingleAccessPoint.Mode.others(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 3;
}

uint64_t sub_100083E40()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char *v33;
  char *v34;
  int v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v0 = sub_1000039AC(&qword_10036E1A8);
  __chkstk_darwin(v0);
  v2 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode(0);
  v40 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v38 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v39 = (char *)&v37 - v6;
  v7 = sub_1000039AC(&qword_100380860);
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v37 - v16;
  v18 = ALWiFiScanSingleAccessPoint._mac.getter(v15);
  if ((v19 & 1) == 0)
    v18 = sub_1000B4D48(v18);
  v20 = ALWiFiScanSingleAccessPoint._ssid.getter(v18);
  if (v21)
    v20 = sub_1000B4DCC(v20, v21);
  v22 = ALWiFiScanSingleAccessPoint._rssidB.getter(v20);
  if ((v22 & 0x100000000) == 0)
    v22 = sub_1000B4E64(v22);
  v23 = ALWiFiScanSingleAccessPoint._channel.getter(v22);
  if ((v23 & 0x100000000) == 0)
    v23 = sub_1000B5014(v23);
  v24 = ALWiFiScanSingleAccessPoint._ageSec.getter(v23);
  if ((v24 & 0x100000000) == 0)
    v24 = sub_1000B50C8(*(float *)&v24);
  v25 = ALWiFiScanSingleAccessPoint._isMoving.getter(v24);
  if (v25 != 2)
    v25 = sub_1000B51FC(v25 & 1);
  v26 = ALWiFiScanSingleAccessPoint._frequencyKhz.getter(v25);
  if ((v26 & 0x100000000) == 0)
    v26 = sub_1000B53B8(v26);
  v27 = ALWiFiScanSingleAccessPoint._isAph.getter(v26);
  if (v27 != 2)
    v27 = sub_1000B5150(v27 & 1);
  ALWiFiScanSingleAccessPoint._band.getter(v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    v28 = sub_100015704((uint64_t)v9, &qword_100380860);
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v29 != enum case for ALWiFiScanSingleAccessPoint.Band.unknown(_:))
  {
    if (v29 == enum case for ALWiFiScanSingleAccessPoint.Band.band2G(_:))
    {
      v30 = 1;
      goto LABEL_27;
    }
    if (v29 == enum case for ALWiFiScanSingleAccessPoint.Band.band5G(_:))
    {
      v30 = 2;
      goto LABEL_27;
    }
    if (v29 == enum case for ALWiFiScanSingleAccessPoint.Band.band6G(_:))
    {
      v30 = 3;
      goto LABEL_27;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  v30 = 0;
LABEL_27:
  sub_1000B52C4(v30);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
LABEL_28:
  ALWiFiScanSingleAccessPoint._mode.getter(v28);
  v31 = v40;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v2, 1, v3) == 1)
    return sub_100015704((uint64_t)v2, &qword_10036E1A8);
  v33 = v39;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v39, v2, v3);
  v34 = v38;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v38, v33, v3);
  v35 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v34, v3);
  if (v35 != enum case for ALWiFiScanSingleAccessPoint.Mode.unknown(_:))
  {
    if (v35 == enum case for ALWiFiScanSingleAccessPoint.Mode.ibss(_:))
    {
      v36 = 1;
      goto LABEL_38;
    }
    if (v35 == enum case for ALWiFiScanSingleAccessPoint.Mode.infra(_:))
    {
      v36 = 2;
      goto LABEL_38;
    }
    if (v35 == enum case for ALWiFiScanSingleAccessPoint.Mode.others(_:))
    {
      v36 = 3;
      goto LABEL_38;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v3);
  }
  v36 = 0;
LABEL_38:
  sub_1000B4F10(v36);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v33, v3);
}

uint64_t sub_100084288@<X0>(uint64_t a1@<X8>)
{
  sub_1000B5494(a1);
  return sub_100083E40();
}

uint64_t sub_1000842AC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B5494((uint64_t)v2);
  sub_100083E40();
  v3 = sub_10000FD38(&qword_10036E1B0, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&unk_1002D5688);
  v4 = Message.serializedData(partial:)(0, v0, v3);
  sub_100004030((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return v4;
}

uint64_t sub_100084380(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  char v22;
  unsigned int v23;
  char v24;
  char v25;
  char *v26;
  char v27;
  uint64_t v29;
  char *v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v4 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v30 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036E1A8);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_100380860);
  __chkstk_darwin(v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiScanSingleAccessPoint.init(_:)(a2);
  if (sub_1000B4DA8())
  {
    v17 = sub_1000B4D3C();
    ALWiFiScanSingleAccessPoint._mac.setter(v17, 0);
  }
  if (sub_1000B4E40())
  {
    v18 = sub_1000B4DC0();
    ALWiFiScanSingleAccessPoint._ssid.setter(v18);
  }
  if (sub_1000B4EC0())
  {
    v19 = sub_1000B4E58();
    v31 = 0;
    ALWiFiScanSingleAccessPoint._rssidB.setter(v19);
  }
  if (sub_1000B50A4())
  {
    v20 = sub_1000B4FD4();
    v32 = 0;
    ALWiFiScanSingleAccessPoint._channel.setter(v20);
  }
  if (sub_1000B512C())
  {
    v21 = sub_1000B50BC();
    v33 = 0;
    ALWiFiScanSingleAccessPoint._ageSec.setter(LODWORD(v21));
  }
  if (sub_1000B5250())
  {
    v22 = sub_1000B51F0();
    ALWiFiScanSingleAccessPoint._isMoving.setter(v22 & 1);
  }
  if (sub_1000B543C())
  {
    v23 = sub_1000B5388();
    v34 = 0;
    ALWiFiScanSingleAccessPoint._frequencyKhz.setter(v23);
  }
  if (sub_1000B533C())
  {
    v24 = sub_1000B529C();
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *(unsigned int *)*(&off_100352FF0 + v24), v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v13, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    ALWiFiScanSingleAccessPoint._band.setter(v16);
  }
  if (sub_1000B4F88())
  {
    v25 = sub_1000B4ED8();
    v26 = v30;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v30, *(unsigned int *)*(&off_100353010 + v25), v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v26, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
    ALWiFiScanSingleAccessPoint._mode.setter(v9);
  }
  if (sub_1000B51A4())
  {
    v27 = sub_1000B5144();
    ALWiFiScanSingleAccessPoint._isAph.setter(v27 & 1);
  }
  return sub_100004030(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000846DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(uint64_t, char *, uint64_t);
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_BYTE *, _QWORD);
  uint64_t v35;
  void (*v36)(_BYTE *, _QWORD);
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _BYTE v50[32];

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v46 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v47 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v49 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - v10;
  v12 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v12);
  v45 = (uint64_t)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ALWiFiScanResult(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiScanResult.init()(v22);
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 32);
  v48 = a2;
  v25(a2, v24, v20);
  LOBYTE(v24) = sub_1000B5B40();
  sub_100003FEC(a1, (uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  if ((v24 & 1) != 0)
  {
    sub_1000B59C8((uint64_t)v16);
    v26 = sub_10008A1A8();
    sub_100004030((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    sub_100004030((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
    if (v26)
    {
      sub_1000B59C8((uint64_t)v16);
      v27 = v45;
      sub_100086964((uint64_t)v16);
      v28 = type metadata accessor for ALTimeStamp(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 0, 1, v28);
      ALWiFiScanResult._scanTimestamp.setter(v27);
    }
  }
  else
  {
    sub_100004030((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v31 = v49;
  v44 = *(_QWORD *)a1;
  v45 = a1;
  if (v30)
  {
    v32 = v29 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    v46 = *(_QWORD *)(v46 + 72);
    swift_bridgeObjectRetain(v29);
    do
    {
      v33 = v47;
      sub_100003FEC(v32, v47, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      v34 = (void (*)(_BYTE *, _QWORD))ALWiFiScanResult._scanTimestamp.modify(v50);
      sub_100084380(v33, v35);
      v34(v50, 0);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v31, v11, v6);
      v36 = (void (*)(_BYTE *, _QWORD))ALWiFiScanResult._accessPoints.modify(v50);
      v38 = v37;
      v39 = *v37;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v37);
      *v38 = v39;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v39 = sub_100017F80(0, *(_QWORD *)(v39 + 16) + 1, 1, v39, &qword_100380C30, (uint64_t (*)(_QWORD))&type metadata accessor for ALWiFiScanSingleAccessPoint);
        *v38 = v39;
      }
      v42 = *(_QWORD *)(v39 + 16);
      v41 = *(_QWORD *)(v39 + 24);
      if (v42 >= v41 >> 1)
      {
        v39 = sub_100017F80(v41 > 1, v42 + 1, 1, v39, &qword_100380C30, (uint64_t (*)(_QWORD))&type metadata accessor for ALWiFiScanSingleAccessPoint);
        *v38 = v39;
      }
      *(_QWORD *)(v39 + 16) = v42 + 1;
      v31 = v49;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v39+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v42, v49, v6);
      v36(v50, 0);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      v32 += v46;
      --v30;
    }
    while (v30);
  }
  else
  {
    swift_bridgeObjectRetain(v29);
  }
  sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  return swift_bridgeObjectRelease(v44);
}

uint64_t ALWiFiScanResult.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100017714(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &qword_10036E1B8, (uint64_t)&unk_1002D5958, (void (*)(char *))sub_1000846DC, a3);
}

uint64_t sub_100084B48@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v34 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v35 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v8);
  v33 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ALTimeStamp(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000B5BB8(a1);
  ALWiFiScanResult._scanTimestamp.getter(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v18 = sub_100015704((uint64_t)v12, &qword_10036A6D8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    v19 = v33;
    sub_100086A3C(v33);
    sub_1000B59D4(v19);
    v18 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  v20 = ALWiFiScanResult._accessPoints.getter(v18);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v22 = v20 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    v23 = *(_QWORD *)(v35 + 72);
    v32 = v20;
    v33 = v23;
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
    v25 = a1;
    do
    {
      v24(v7, v22, v5);
      sub_1000B5494((uint64_t)v4);
      sub_100083E40();
      v26 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
        v26 = sub_100017F80(0, *(_QWORD *)(v26 + 16) + 1, 1, v26, &qword_10036E1D8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      v28 = *(_QWORD *)(v26 + 16);
      v27 = *(_QWORD *)(v26 + 24);
      if (v28 >= v27 >> 1)
        v26 = sub_100017F80(v27 > 1, v28 + 1, 1, v26, &qword_10036E1D8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      *(_QWORD *)(v26 + 16) = v28 + 1;
      sub_100003E08((uint64_t)v4, v26+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v28, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      a1 = v25;
      *v25 = v26;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
      v22 += v33;
      --v21;
    }
    while (v21);
    v20 = v32;
  }
  swift_bridgeObjectRelease(v20);
  type metadata accessor for ALProtobufUtil();
  v29 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  v30 = sub_10000FD38(&qword_10036E1B8, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&unk_1002D5958);
  return static ALProtobufUtil.debug<A>(_:)(a1, v29, v30);
}

uint64_t sub_100084EB0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;

  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1000B5960(a3);
  if ((a2 & 1) == 0)
  {
    sub_1000B5550(1);
    sub_1000B5494((uint64_t)v8);
    sub_1000B5754((uint64_t)v8);
    sub_1000B55F0((uint64_t)v8);
    sub_1000B4D48(a1);
    return sub_1000B5754((uint64_t)v8);
  }
  return result;
}

uint64_t sub_100084F5C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!sub_1000B55A4())
    return 0;
  if (!sub_1000B5928())
    return 0;
  sub_1000B55F0((uint64_t)v2);
  v3 = sub_1000B4DA8();
  sub_100004030((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  if (!v3)
    return 0;
  sub_1000B55F0((uint64_t)v2);
  v4 = sub_1000B4D3C();
  sub_100004030((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return v4;
}

void sub_100085034(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100085060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = enum case for ALWiFiNotification.NotiType.unknown(_:);
  v2 = ((uint64_t (*)(_QWORD))type metadata accessor for ALWiFiNotification.NotiType)(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t sub_100085140(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v32;

  v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_1000039AC((uint64_t *)&unk_100380850);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000039AC(&qword_10036E1C0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiNotification.init()(v18);
  if (sub_1000B622C())
  {
    v21 = sub_1000B6158();
    sub_100085034(v21);
    v22 = type metadata accessor for ALWiFiNotification.NotiType(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v20, 0, 1, v22);
    ALWiFiNotification._type.setter(v20);
  }
  if (sub_1000B5EE8())
  {
    sub_1000B5BC4((uint64_t)v13);
    sub_100086964((uint64_t)v13);
    v23 = type metadata accessor for ALTimeStamp(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v16, 0, 1, v23);
    ALWiFiNotification._timestamp.setter(v16);
  }
  if (sub_1000B70A0())
  {
    sub_1000B6C58(v7);
    sub_1000846DC((uint64_t)v7, (uint64_t)v10);
    v24 = type metadata accessor for ALWiFiScanResult(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v10, 0, 1, v24);
    ALWiFiNotification._scanResult.setter(v10);
  }
  if (sub_1000B6B00())
  {
    sub_1000B66C0((uint64_t)v4);
    v25 = sub_100084F5C();
    v27 = v26 & 1;
    sub_100004030((uint64_t)v4, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
    ALWiFiNotification._associatedMac.setter(v25, v27);
  }
  if (sub_1000B72D0())
  {
    v28 = sub_1000B71F8();
    ALWiFiNotification._simulated.setter(v28 & 1);
  }
  if (sub_1000B7468())
  {
    v29 = sub_1000B7390();
    ALWiFiNotification._available.setter(v29 & 1);
  }
  if (sub_1000B7798())
  {
    v30 = sub_1000B76C0();
    ALWiFiNotification._isApAwake.setter(v30 & 1);
  }
  return sub_100004030(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t sub_10008547C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void (*v62)(char *, unint64_t, uint64_t);
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char isAp;
  uint64_t v75;
  uint64_t v76;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  __chkstk_darwin(v2);
  v83 = (uint64_t)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v93 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v82 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v78 - v7;
  v9 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v94 = *(_QWORD *)(v9 - 8);
  v95 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  __chkstk_darwin(v81);
  v13 = (unint64_t *)((char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_1000039AC((uint64_t *)&unk_100380850);
  __chkstk_darwin(v14);
  v87 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for ALWiFiScanResult(0);
  v90 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v89 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v17);
  v84 = (uint64_t)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000039AC(&qword_10036A6D8);
  v20 = __chkstk_darwin(v19);
  v80 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v85 = (char *)&v78 - v22;
  v86 = type metadata accessor for ALTimeStamp(0);
  v88 = *(_QWORD *)(v86 - 8);
  v23 = __chkstk_darwin(v86);
  v78 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v79 = (char *)&v78 - v25;
  v26 = sub_1000039AC(&qword_10036E1C0);
  __chkstk_darwin(v26);
  v28 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for ALWiFiNotification.NotiType(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v78 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&v78 - v34;
  v36 = sub_1000B7858(a1);
  ALWiFiNotification._type.getter(v36);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
    v37 = sub_100015704((uint64_t)v28, &qword_10036E1C0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v35, v28, v29);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v33, v35, v29);
    v38 = sub_10008676C((uint64_t)v33);
    sub_1000B6164(v38);
    v37 = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v35, v29);
  }
  v91 = a1;
  v39 = (uint64_t)v85;
  ALWiFiNotification._timestamp.getter(v37);
  v40 = v88;
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  v42 = v86;
  if (v41(v39, 1, v86) == 1)
  {
    v43 = sub_100015704(v39, &qword_10036A6D8);
  }
  else
  {
    v44 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v79, v39, v42);
    v45 = v84;
    sub_100086A3C(v84);
    sub_1000B5BE8(v45);
    v43 = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v44, v42);
  }
  v46 = (uint64_t)v87;
  ALWiFiNotification._scanResult.getter(v43);
  v47 = v90;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v46, 1, v92) == 1)
  {
    v48 = sub_100015704(v46, (uint64_t *)&unk_100380850);
    v49 = v91;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v89, v46, v92);
    v50 = sub_1000B5BB8(v13);
    v51 = (uint64_t)v80;
    ALWiFiScanResult._scanTimestamp.getter(v50);
    if (v41(v51, 1, v42) == 1)
    {
      v52 = sub_100015704(v51, &qword_10036A6D8);
    }
    else
    {
      v53 = v88;
      v54 = v78;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v78, v51, v42);
      v55 = v84;
      sub_100086A3C(v84);
      sub_1000B59D4(v55);
      v52 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v42);
    }
    v49 = v91;
    v56 = ALWiFiScanResult._accessPoints.getter(v52);
    v57 = *(_QWORD *)(v56 + 16);
    if (v57)
    {
      v58 = v95;
      v59 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
      v88 = v56;
      v60 = v56 + v59;
      v61 = *(_QWORD *)(v94 + 72);
      v62 = *(void (**)(char *, unint64_t, uint64_t))(v94 + 16);
      do
      {
        v62(v11, v60, v58);
        sub_1000B5494((uint64_t)v8);
        sub_100083E40();
        v63 = *v13;
        if ((swift_isUniquelyReferenced_nonNull_native(*v13) & 1) == 0)
          v63 = sub_100017F80(0, *(_QWORD *)(v63 + 16) + 1, 1, v63, &qword_10036E1D8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        v65 = *(_QWORD *)(v63 + 16);
        v64 = *(_QWORD *)(v63 + 24);
        if (v65 >= v64 >> 1)
          v63 = sub_100017F80(v64 > 1, v65 + 1, 1, v63, &qword_10036E1D8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        *(_QWORD *)(v63 + 16) = v65 + 1;
        sub_100003E08((uint64_t)v8, v63+ ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80))+ *(_QWORD *)(v93 + 72) * v65, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        *v13 = v63;
        v58 = v95;
        (*(void (**)(char *, uint64_t))(v94 + 8))(v11, v95);
        v60 += v61;
        --v57;
      }
      while (v57);
      swift_bridgeObjectRelease(v88);
      v49 = v91;
    }
    else
    {
      swift_bridgeObjectRelease(v56);
    }
    type metadata accessor for ALProtobufUtil();
    v66 = sub_10000FD38(&qword_10036E1B8, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&unk_1002D5958);
    static ALProtobufUtil.debug<A>(_:)(v13, v81, v66);
    sub_1000B6D98((uint64_t)v13);
    v48 = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v89, v92);
  }
  v67 = ALWiFiNotification._associatedMac.getter(v48);
  if ((v68 & 1) == 0)
  {
    v69 = v67;
    v70 = v83;
    sub_1000B5960(v83);
    sub_1000B5550(1);
    v71 = v82;
    sub_1000B5494(v82);
    sub_1000B5754(v71);
    sub_1000B55F0(v71);
    sub_1000B4D48(v69);
    sub_1000B5754(v71);
    v67 = sub_1000B67FC(v70);
  }
  v72 = ALWiFiNotification._simulated.getter(v67);
  if (v72 != 2)
    v72 = sub_1000B720C(v72 & 1);
  v73 = ALWiFiNotification._available.getter(v72);
  if (v73 != 2)
    v73 = sub_1000B73A4(v73 & 1);
  isAp = ALWiFiNotification._isApAwake.getter(v73);
  if (isAp != 2)
    sub_1000B76D4(isAp & 1);
  type metadata accessor for ALProtobufUtil();
  v75 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  v76 = sub_10000FD38(&qword_100369EA8, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&unk_1002D5AC0);
  return static ALProtobufUtil.debug<A>(_:)(v49, v75, v76);
}

uint64_t sub_100085C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _QWORD);
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _BYTE v49[39];
  char v50;

  v45 = a1;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ALWiFiNotification(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ALWiFiNotifications(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiNotifications.init()(v16);
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v20 = v45;
  v19(a2, v18, v14);
  if (sub_100005DC0()
    && (v48 = v10,
        v49[0] = sub_100005B7C(),
        v50 = 4,
        v21 = sub_10000FEBC(),
        (dispatch thunk of static Equatable.== infix(_:_:)(v49, &v50, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum, v21) & 1) != 0)&& sub_100006998())
  {
    v22 = v13;
    v23 = v13;
    v24 = v20;
    sub_1000067E0(v23);
    v25 = *(_QWORD *)v22;
    v26 = *(_QWORD *)(*(_QWORD *)v22 + 16);
    if (v26)
    {
      v43 = *(_QWORD *)v22;
      v44 = v22;
      v27 = v4;
      v28 = v25 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      v46 = *(_QWORD *)(v27 + 72);
      v47 = v7;
      swift_bridgeObjectRetain(v25);
      do
      {
        sub_100003FEC(v28, (uint64_t)v6, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        v29 = v6;
        sub_100085140((uint64_t)v6);
        v30 = a2;
        v31 = (void (*)(_BYTE *, _QWORD))ALWiFiNotifications._results.modify(v49);
        v33 = v32;
        v34 = *v32;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v32);
        *v33 = v34;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v34 = sub_100017F80(0, *(_QWORD *)(v34 + 16) + 1, 1, v34, &qword_10036E1D0, (uint64_t (*)(_QWORD))&type metadata accessor for ALWiFiNotification);
          *v33 = v34;
        }
        v37 = *(_QWORD *)(v34 + 16);
        v36 = *(_QWORD *)(v34 + 24);
        if (v37 >= v36 >> 1)
        {
          v34 = sub_100017F80(v36 > 1, v37 + 1, 1, v34, &qword_10036E1D0, (uint64_t (*)(_QWORD))&type metadata accessor for ALWiFiNotification);
          *v33 = v34;
        }
        a2 = v30;
        *(_QWORD *)(v34 + 16) = v37 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v34+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v37, v48, v47);
        v31(v49, 0);
        v28 += v46;
        --v26;
        v6 = v29;
      }
      while (v26);
      swift_bridgeObjectRelease(v43);
      v22 = v44;
      v24 = v45;
    }
    v41 = sub_100005118();
    ALWiFiNotifications._isLastBatch.setter(v41 & 1);
    sub_100004030(v24, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    v38 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication;
    v39 = (uint64_t)v22;
  }
  else
  {
    v38 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    v39 = v20;
  }
  return sub_100004030(v39, v38);
}

uint64_t sub_100085FC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = v1;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  v39 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ALWiFiNotification(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  v13 = __chkstk_darwin(v12);
  v33 = (uint64_t)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (_QWORD *)((char *)v32 - v15);
  sub_10000732C(a1);
  v35 = a1;
  sub_100005BCC(4);
  v17 = sub_100005210(v16);
  v34 = v3;
  v18 = ALWiFiNotifications.results.getter(v17);
  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    v32[0] = v18;
    v32[1] = v2;
    v20 = v18 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v21 = *(_QWORD *)(v9 + 72);
    v36 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    v37 = v21;
    v38 = v9;
    do
    {
      v36(v11, v20, v8);
      sub_10008547C((uint64_t)v7);
      v22 = *v16;
      if ((swift_isUniquelyReferenced_nonNull_native(*v16) & 1) == 0)
        v22 = sub_100017F80(0, *(_QWORD *)(v22 + 16) + 1, 1, v22, &qword_10036E1C8, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      v24 = *(_QWORD *)(v22 + 16);
      v23 = *(_QWORD *)(v22 + 24);
      if (v24 >= v23 >> 1)
        v22 = sub_100017F80(v23 > 1, v24 + 1, 1, v22, &qword_10036E1C8, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      *(_QWORD *)(v22 + 16) = v24 + 1;
      sub_100003E08((uint64_t)v7, v22+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v24, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      *v16 = v22;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
      v20 += v37;
      --v19;
    }
    while (v19);
    v25 = swift_bridgeObjectRelease(v32[0]);
  }
  else
  {
    v25 = swift_bridgeObjectRelease(v18);
  }
  v26 = ALWiFiNotifications.isLastBatch.getter(v25);
  sub_100005124(v26 & 1);
  v27 = v33;
  sub_100003FEC((uint64_t)v16, v33, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  v28 = v35;
  sub_1000067FC(v27);
  type metadata accessor for ALProtobufUtil();
  v29 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v30 = sub_10000FD38(&qword_100369FA8, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&unk_1002C3B5C);
  static ALProtobufUtil.debug<A>(_:)(v28, v29, v30);
  return sub_100004030((uint64_t)v16, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t ALWiFiNotifications.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100017714(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_Indication, &qword_100369FA8, (uint64_t)&unk_1002C3B5C, (void (*)(char *))sub_100085C78, a3);
}

uint64_t ALWiFiNotifications.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = v0;
  v3 = type metadata accessor for ALWiFiNotifications(0);
  v47 = *(char **)(v3 - 8);
  __chkstk_darwin(v3);
  v46 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100085FC0((uint64_t)v11);
  if (!v1)
  {
    v12 = sub_10000FD38(&qword_100369FA8, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&unk_1002C3B5C);
    v13 = Message.serializedData(partial:)(0, v9, v12);
    v15 = v14;
    v16 = (uint64_t)v11;
    v17 = v6;
    v18 = v5;
    sub_100004030(v16, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    v44 = v17;
    corelog.getter((uint64_t)v8);
    v21 = v46;
    v20 = v47;
    (*((void (**)(char *, uint64_t, uint64_t))v47 + 2))(v46, v2, v3);
    sub_100017EF8(v13, v15);
    v22 = v3;
    v45 = v13;
    v23 = sub_100017EF8(v13, v15);
    v24 = v21;
    v25 = Logger.logObject.getter(v23);
    v26 = static os_log_type_t.debug.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc(22, -1);
      v39 = v22;
      v29 = v28;
      v42 = swift_slowAlloc(64, -1);
      v50 = v42;
      *(_DWORD *)v29 = 136446466;
      v41 = v27;
      v30 = v24;
      v31 = ALWiFiNotifications.description.getter();
      v33 = v32;
      v48 = sub_10001818C(v31, v32, &v50);
      v43 = v18;
      v40 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v33);
      (*((void (**)(char *, uint64_t))v47 + 1))(v30, v39);
      *(_WORD *)(v29 + 12) = 2082;
      v0 = v45;
      sub_100017EF8(v45, v15);
      v34 = Data.description.getter(v0, v15);
      v47 = v8;
      v36 = v35;
      sub_100017F3C(v0, v15);
      v48 = sub_10001818C(v34, v36, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease(v36);
      sub_100017F3C(v0, v15);
      sub_100017F3C(v0, v15);
      v37 = v40;
      _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v41, "#WiFi,serializedData,notif,%{public}s,data,%{public}s", (uint8_t *)v29, 0x16u);
      v38 = v42;
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v43);
    }
    else
    {
      (*((void (**)(char *, uint64_t))v20 + 1))(v24, v22);
      v0 = v45;
      sub_100017F3C(v45, v15);
      sub_100017F3C(v0, v15);

      (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v18);
    }
  }
  return v0;
}

uint64_t static ALWiFiNotifications.serializedIndications(results:isLastBatch:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for ALWiFiNotifications(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_bridgeObjectRetain(a1);
  ALWiFiNotifications.init(_results:_isLastBatch:)(v8, a2 & 1);
  v9 = ALWiFiNotifications.serializedData()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

uint64_t sub_10008676C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = type metadata accessor for ALWiFiNotification.NotiType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for ALWiFiNotification.NotiType.unknown(_:))
    return 0;
  if (v4 == enum case for ALWiFiNotification.NotiType.available(_:))
    return 1;
  if (v4 == enum case for ALWiFiNotification.NotiType.power(_:))
    return 2;
  if (v4 == enum case for ALWiFiNotification.NotiType.scanReady(_:))
    return 3;
  if (v4 == enum case for ALWiFiNotification.NotiType.scan(_:))
    return 4;
  if (v4 == enum case for ALWiFiNotification.NotiType.scanError(_:))
    return 5;
  if (v4 == enum case for ALWiFiNotification.NotiType.scanErrorBusy(_:))
    return 6;
  if (v4 == enum case for ALWiFiNotification.NotiType.linkStatus(_:))
    return 7;
  if (v4 == enum case for ALWiFiNotification.NotiType.roam(_:))
    return 8;
  if (v4 == enum case for ALWiFiNotification.NotiType.backgroundEntry(_:))
    return 9;
  if (v4 == enum case for ALWiFiNotification.NotiType.backgroundExit(_:))
    return 10;
  if (v4 == enum case for ALWiFiNotification.NotiType.trackingAvailable(_:))
    return 11;
  if (v4 == enum case for ALWiFiNotification.NotiType.wow(_:))
    return 12;
  if (v4 == enum case for ALWiFiNotification.NotiType.scanCache(_:))
    return 13;
  if (v4 != enum case for ALWiFiNotification.NotiType.peerRanging(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 14;
}

uint64_t sub_100086964(uint64_t a1)
{
  double v2;
  double v3;
  double v4;

  ALTimeStamp.init()();
  if (sub_10008A098())
  {
    v2 = sub_10008A028();
    ALTimeStamp._cfAbsoluteTimeSec.setter(*(_QWORD *)&v2, 0);
  }
  if (sub_10008A120())
  {
    v3 = sub_10008A0B0();
    ALTimeStamp._machAbsoluteTimeSec.setter(*(_QWORD *)&v3, 0);
  }
  if (sub_10008A1A8())
  {
    v4 = sub_10008A138();
    ALTimeStamp._machContinuousTimeSec.setter(*(_QWORD *)&v4, 0);
  }
  return sub_100086A00(a1);
}

uint64_t sub_100086A00(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100086A3C@<X0>(uint64_t a1@<X8>)
{
  int *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  char v7;

  v1 = sub_10008A1C0(a1);
  v2 = ALTimeStamp.cfAbsoluteTimeSec.getter(v1);
  if ((v3 & 1) == 0)
    v2 = sub_10008A034(*(double *)&v2);
  v4 = ALTimeStamp.machAbsoluteTimeSec.getter(v2);
  if ((v5 & 1) == 0)
    v4 = sub_10008A0BC(*(double *)&v4);
  result = ALTimeStamp.machContinuousTimeSec.getter(v4);
  if ((v7 & 1) == 0)
    return sub_10008A144(*(double *)&result);
  return result;
}

uint64_t ALTimeStamp.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  double v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v5 = (char *)&v16 - v4;
  v6 = sub_10008A1C0((uint64_t)v3);
  v7 = ALTimeStamp.cfAbsoluteTimeSec.getter(v6);
  if ((v8 & 1) == 0)
    v7 = sub_10008A034(*(double *)&v7);
  v9 = ALTimeStamp.machAbsoluteTimeSec.getter(v7);
  if ((v10 & 1) == 0)
    v9 = sub_10008A0BC(*(double *)&v9);
  v11 = COERCE_DOUBLE(ALTimeStamp.machContinuousTimeSec.getter(v9));
  if ((v12 & 1) == 0)
    sub_10008A144(v11);
  sub_100086BC8((uint64_t)v3, (uint64_t)v5);
  v13 = sub_100086C0C();
  v14 = Message.serializedData(partial:)(0, v0, v13);
  sub_100086A00((uint64_t)v5);
  return v14;
}

uint64_t sub_100086BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100086C0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10036E1E0;
  if (!qword_10036E1E0)
  {
    v1 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(255);
    result = swift_getWitnessTable(&unk_1002CF5A8, v1);
    atomic_store(result, (unint64_t *)&qword_10036E1E0);
  }
  return result;
}

uint64_t static ALProtobufUtil.stringfyJson<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v5 = type metadata accessor for Logger(0);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v6);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for JSONEncodingOptions(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  JSONEncodingOptions.init()(v11);
  v14 = Message.jsonUTF8Data(options:)(v13, a2, a3);
  v16 = v15;
  v17 = (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
  static String.Encoding.utf8.getter(v17);
  v18 = String.init(data:encoding:)(v14, v16, v8);
  v20 = v19;
  sub_100017F3C(v14, v16);
  if (v20)
    return v18;
  else
    return 0x3E6C696E3CLL;
}

uint64_t static ALProtobufUtil.stringfyLogEntryJson(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v25[40];

  v3 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t)&v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for JSONEncodingOptions(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  __chkstk_darwin(v10);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000875F0(a1, (uint64_t)v25);
  v13 = sub_1000039AC(&qword_10036E1E8);
  v14 = swift_dynamicCast(v12, v25, v13, v10, 7);
  JSONEncodingOptions.init()(v14);
  v15 = sub_10000FD38(&qword_10036E018, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002CA5D4);
  v16 = Message.jsonUTF8Data(options:)(v9, v10, v15);
  if (v1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry);
  }
  else
  {
    v18 = v16;
    v19 = v17;
    v20 = (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    static String.Encoding.utf8.getter(v20);
    v5 = String.init(data:encoding:)(v18, v19, v5);
    v22 = v21;
    sub_100017F3C(v18, v19);
    if (!v22)
      v5 = 0x3E6C696E3CLL;
    sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry);
  }
  return v5;
}

uint64_t static ALProtobufUtil.stringfyLogEntryJson(serializedData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  BOOL v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  char *v39;
  uint64_t v40;
  char *v41;
  _OWORD v42[2];
  uint64_t v43;

  v5 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v5);
  v39 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for JSONEncodingOptions(0);
  v7 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v41 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BinaryDecodingOptions(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  v18 = sub_100017EF8(a1, a2);
  BinaryDecodingOptions.init()(v18);
  v19 = sub_10000FD38(&qword_10036E018, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&unk_1002CA5D4);
  Message.init(serializedData:extensions:partial:options:)(a1, a2, v42, 0, v14, v15, v19);
  if (!v2)
  {
    v20 = v7;
    v21 = v40;
    v22 = sub_1000039AC((uint64_t *)&unk_100380810);
    v23 = swift_allocObject(v22, 112, 7);
    *(_OWORD *)(v23 + 16) = xmmword_1002C3150;
    sub_10007FC74((uint64_t)v11);
    v24 = sub_1000806CC();
    sub_100004030((uint64_t)v11, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
    *(_QWORD *)(v23 + 56) = &type metadata for Double;
    *(_QWORD *)(v23 + 64) = &protocol witness table for Double;
    *(double *)(v23 + 32) = v24;
    v25 = sub_100080390();
    *(_QWORD *)(v23 + 96) = &type metadata for Bool;
    *(_QWORD *)(v23 + 104) = &protocol witness table for Bool;
    *(_BYTE *)(v23 + 72) = v25;
    sub_100087634();
    v26 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("time,%.2f,has,%d", v38, (_DWORD)v39);
    swift_bridgeObjectRelease(v23);

    v27 = v41;
    JSONEncodingOptions.init()(v28);
    v30 = Message.jsonUTF8Data(options:)(v27, v15, v19);
    v32 = v31;
    v33 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v27, v21);
    v34 = v39;
    static String.Encoding.utf8.getter(v33);
    v35 = String.init(data:encoding:)(v30, v32, v34);
    v37 = v36;
    sub_100017F3C(v30, v32);
    if (v37)
      a1 = v35;
    else
      a1 = 0x3E6C696E3CLL;
    sub_100004030((uint64_t)v17, type metadata accessor for CLP_LogEntry_LogEntry);
  }
  return a1;
}

uint64_t static ALProtobufUtil.serialized(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for Google_Protobuf_UInt32Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Google_Protobuf_UInt32Value.init()(v4);
  Google_Protobuf_UInt32Value.value.setter(a1);
  v7 = sub_10000FD38(&qword_10036E1F8, (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_UInt32Value, (uint64_t)&protocol conformance descriptor for Google_Protobuf_UInt32Value);
  v8 = Message.serializedData(partial:)(0, v2, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v8;
}

uint64_t static ALProtobufUtil.serialized(_:)(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = type metadata accessor for Google_Protobuf_DoubleValue(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Google_Protobuf_DoubleValue.init()(v4);
  Google_Protobuf_DoubleValue.value.setter(v7, a1);
  v8 = sub_10000FD38(&qword_10036E200, (uint64_t (*)(uint64_t))&type metadata accessor for Google_Protobuf_DoubleValue, (uint64_t)&protocol conformance descriptor for Google_Protobuf_DoubleValue);
  v9 = Message.serializedData(partial:)(0, v2, v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v9;
}

uint64_t PersistentConfig.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PersistentConfig.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_1000875E0()
{
  uint64_t v0;

  return swift_allocObject(v0, 16, 7);
}

uint64_t sub_1000875F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_100087634()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10036E1F0;
  if (!qword_10036E1F0)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10036E1F0);
  }
  return result;
}

uint64_t type metadata accessor for ALProtobufUtil()
{
  return objc_opt_self(_TtC10ALProtobuf14ALProtobufUtil);
}

uint64_t method lookup function for ALProtobufUtil(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALProtobufUtil);
}

uint64_t sub_10008769C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000878B0(&qword_10036E2A0, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, type metadata accessor for Proto_Gpsd_LogEntry, (void (*)(void))sub_10024A770, a1);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003940A0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t sub_1000876D4(uint64_t a1)
{
  return sub_1000879D4(a1, &qword_10036E2A0, type metadata accessor for Proto_Gpsd_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003940B0, (uint64_t)&nominal type descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass);
}

void (*sub_100087704(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E2A0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E2A0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10024A770((uint64_t)v9);
    sub_100015704((uint64_t)v5, &qword_10036E2A0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_LogEntry);
  }
  return sub_100087838;
}

void sub_100087838(uint64_t a1, char a2)
{
  sub_100087CA4(a1, a2, &qword_10036E2A0, type metadata accessor for Proto_Gpsd_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry);
}

BOOL sub_100087854()
{
  return sub_100087D6C(&qword_10036E2A0, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, type metadata accessor for Proto_Gpsd_LogEntry);
}

uint64_t sub_100087870()
{
  return sub_100087E68(&qword_10036E2A0, type metadata accessor for Proto_Gpsd_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry);
}

uint64_t sub_10008788C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000878B0(&qword_10036E2A8, OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (void (*)(void))sub_100007E10, a1);
}

uint64_t sub_1000878B0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[24];

  v11 = sub_1000039AC(a1);
  __chkstk_darwin(v11);
  v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + *a2;
  swift_beginAccess(v14, v18, 0, 0);
  sub_10000E660(v14, (uint64_t)v13, a1);
  v15 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15) != 1)
    return sub_100003E08((uint64_t)v13, a5, a3);
  a4();
  return sub_100015704((uint64_t)v13, a1);
}

uint64_t sub_1000879B8(uint64_t a1)
{
  return sub_1000879D4(a1, &qword_10036E2A8, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry);
}

uint64_t sub_1000879D4(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v27[24];

  v8 = v4;
  v10 = sub_1000039AC(a2);
  v11 = __chkstk_darwin(v10);
  v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v11);
  v15 = &v27[-v14 - 8];
  v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v16)) & 1) == 0)
  {
    v17 = *(_QWORD *)(v4 + v16);
    v18 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
    v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v20 = swift_retain(v17);
    sub_100088308(v20);
    v21 = *(_QWORD *)(v8 + v16);
    *(_QWORD *)(v8 + v16) = v19;
    swift_release(v21);
  }
  v22 = *(_QWORD *)(v8 + v16);
  sub_100003E08(a1, (uint64_t)v15, a3);
  v23 = a3(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v15, 0, 1, v23);
  sub_10000E530((uint64_t)v15, (uint64_t)v13, a2);
  v24 = v22 + *a4;
  swift_beginAccess(v24, v27, 33, 0);
  swift_retain(v22);
  sub_10000E574((uint64_t)v13, v24, a2);
  swift_endAccess(v27);
  return swift_release(v22);
}

void (*sub_100087B54(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E2A8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E2A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_100007E10((uint64_t)v9);
    sub_100015704((uint64_t)v5, &qword_10036E2A8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  }
  return sub_100087C88;
}

void sub_100087C88(uint64_t a1, char a2)
{
  sub_100087CA4(a1, a2, &qword_10036E2A8, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry);
}

void sub_100087CA4(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD), _QWORD *a5)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v8 = *(void **)a1;
  v9 = *(void **)(*(_QWORD *)a1 + 40);
  v10 = *(void **)(*(_QWORD *)a1 + 48);
  v11 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    sub_100003FEC((uint64_t)v10, (uint64_t)v9, a4);
    sub_1000879D4((uint64_t)v9, a3, a4, a5);
    sub_100004030((uint64_t)v10, a4);
  }
  else
  {
    sub_1000879D4((uint64_t)v10, a3, a4, a5);
  }
  free(v10);
  free(v9);
  free(v11);
  free(v8);
}

BOOL sub_100087D50()
{
  return sub_100087D6C(&qword_10036E2A8, OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

BOOL sub_100087D6C(uint64_t *a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  _BYTE v15[24];

  v7 = sub_1000039AC(a1);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + *a2;
  swift_beginAccess(v10, v15, 0, 0);
  sub_10000E660(v10, (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_100015704((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_100087E4C()
{
  return sub_100087E68(&qword_10036E2A8, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry);
}

uint64_t sub_100087E68(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v22[24];

  v7 = v3;
  v8 = sub_1000039AC(a1);
  __chkstk_darwin(v8);
  v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v3 + v11);
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    sub_100088308(v15);
    v16 = *(_QWORD *)(v7 + v11);
    *(_QWORD *)(v7 + v11) = v14;
    swift_release(v16);
  }
  v17 = *(_QWORD *)(v7 + v11);
  v18 = a2(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
  v19 = v17 + *a3;
  swift_beginAccess(v19, v22, 33, 0);
  swift_retain(v17);
  sub_10000E574((uint64_t)v10, v19, a1);
  swift_endAccess(v22);
  return swift_release(v17);
}

uint64_t sub_100087F9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  UnknownStorage.init()();
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if (qword_100393D78 != -1)
    swift_once(&qword_100393D78, sub_100088270);
  v3 = qword_100393D80;
  *(_QWORD *)(a1 + v2) = qword_100393D80;
  return swift_retain(v3);
}

uint64_t sub_100087FFC()
{
  if (qword_100393D78 != -1)
    swift_once(&qword_100393D78, sub_100088270);
  return swift_retain(qword_100393D80);
}

void *sub_10008803C()
{
  return &unk_100353030;
}

unint64_t sub_100088048()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_100088064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383560);
  sub_10000E6A4(v0, (uint64_t)qword_100383560);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1004;
  *(_QWORD *)v9 = "gpsd_log_entry";
  *(_QWORD *)(v9 + 8) = 14;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1018;
  *(_QWORD *)v13 = "aonloc_log_entry";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000881B8()
{
  uint64_t v0;

  if (qword_100393D70 != -1)
    swift_once(&qword_100393D70, sub_100088064);
  v0 = type metadata accessor for _NameMap(0);
  return sub_10000E6A4(v0, (uint64_t)qword_100383560);
}

uint64_t sub_100088200@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100393D70 != -1)
    swift_once(&qword_100393D70, sub_100088064);
  v2 = type metadata accessor for _NameMap(0);
  v3 = sub_10000E6A4(v2, (uint64_t)qword_100383560);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100088270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  v3 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  v5 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  qword_100393D80 = v1;
  return result;
}

uint64_t sub_100088308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];

  v3 = sub_1000039AC(&qword_10036E2A8);
  __chkstk_darwin(v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_1000039AC(&qword_10036E2A0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  v10 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  v12 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, v19, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E2A0);
  swift_beginAccess(v9, v18, 33, 0);
  sub_10000E574((uint64_t)v8, v9, &qword_10036E2A0);
  swift_endAccess(v18);
  v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry, v18, 0, 0);
  sub_10000E660(v14, (uint64_t)v5, &qword_10036E2A8);
  swift_release(a1);
  swift_beginAccess(v11, v17, 33, 0);
  sub_10000E574((uint64_t)v5, v11, &qword_10036E2A8);
  swift_endAccess(v17);
  return v1;
}

uint64_t sub_1000884E0()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, &qword_10036E2A0);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0], &qword_10036E2A8);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100088530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t (*v21)(uint64_t);
  void *v22;
  uint64_t v23;
  _BYTE v24[24];

  v5 = v3;
  v8 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v8)) & 1) == 0)
  {
    v9 = *(_QWORD *)(v3 + v8);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_100088308(v12);
    v13 = *(_QWORD *)(v5 + v8);
    *(_QWORD *)(v5 + v8) = v11;
    swift_release(v13);
  }
  v14 = *(_QWORD *)(v5 + v8);
  swift_retain(v14);
  v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v16 & 1) != 0)
        return swift_release(v14);
      if (v15 == 1018)
        break;
      if (v15 == 1004)
      {
        v18 = v14
            + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
        swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, v24, 33, 0);
        v19 = type metadata accessor for Proto_Gpsd_LogEntry(0);
        v20 = (unint64_t *)&unk_10036E450;
        v21 = type metadata accessor for Proto_Gpsd_LogEntry;
        v22 = &unk_1002EE2F0;
        goto LABEL_7;
      }
LABEL_8:
      v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v18 = v14
        + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
    swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0], v24, 33, 0);
    v19 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
    v20 = &qword_100369FC0;
    v21 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry;
    v22 = &unk_1002C3CEC;
LABEL_7:
    v23 = sub_10000FD38(v20, v21, (uint64_t)v22);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v18, v19, v23, a2, a3);
    swift_endAccess(v24);
    goto LABEL_8;
  }
  return swift_release(v14);
}

uint64_t sub_100088704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20));
  v9 = swift_retain(v8);
  sub_1000887C0(v9, a1, a2, a3);
  if (v4)
    return swift_release(v8);
  sub_10008894C(v8, a1, a2, a3);
  swift_release(v8);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000887C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E2A0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E2A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E2A0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_LogEntry);
  v15 = sub_10000FD38(&qword_10036E450, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&unk_1002EE2F0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1004, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for Proto_Gpsd_LogEntry);
}

uint64_t sub_10008894C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E2A8);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E2A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E2A8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  v15 = sub_10000FD38(&qword_100369FC0, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&unk_1002C3CEC);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1018, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

BOOL sub_100088ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[24];
  _BYTE v54[24];
  _BYTE v55[24];
  _BYTE v56[32];

  v52 = a2;
  v50 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v44 = (uint64_t)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1000039AC(&qword_10036E438);
  __chkstk_darwin(v47);
  v51 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036E2A8);
  v6 = __chkstk_darwin(v5);
  v45 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v49 = (uint64_t)&v44 - v8;
  v9 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v46 = (uint64_t)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_10036E440);
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000039AC(&qword_10036E2A0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v44 - v19;
  v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, v56, 0, 0);
  sub_10000E660(v21, (uint64_t)v20, &qword_10036E2A0);
  v22 = v52;
  v23 = v52
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess(v52+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, v55, 0, 0);
  v24 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_10000E660((uint64_t)v20, (uint64_t)v14, &qword_10036E2A0);
  sub_10000E660(v23, v24, &qword_10036E2A0);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v25((uint64_t)v14, 1, v9) != 1)
  {
    sub_10000E660((uint64_t)v14, (uint64_t)v18, &qword_10036E2A0);
    if (v25(v24, 1, v9) != 1)
    {
      v27 = v24;
      v28 = v46;
      sub_100003E08(v27, v46, type metadata accessor for Proto_Gpsd_LogEntry);
      v29 = sub_10000FD38(&qword_10036E448, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&unk_1002EE430);
      swift_retain(a1);
      swift_retain(v22);
      v30 = v29;
      v26 = a1;
      v31 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v28, v9, v30);
      sub_100004030(v28, type metadata accessor for Proto_Gpsd_LogEntry);
      sub_100015704((uint64_t)v20, &qword_10036E2A0);
      sub_100004030((uint64_t)v18, type metadata accessor for Proto_Gpsd_LogEntry);
      sub_100015704((uint64_t)v14, &qword_10036E2A0);
      if ((v31 & 1) != 0)
        goto LABEL_9;
LABEL_7:
      swift_release(v26);
      swift_release(v22);
      return 0;
    }
    v26 = a1;
    swift_retain(a1);
    swift_retain(v22);
    sub_100015704((uint64_t)v20, &qword_10036E2A0);
    sub_100004030((uint64_t)v18, type metadata accessor for Proto_Gpsd_LogEntry);
LABEL_6:
    sub_100015704((uint64_t)v14, &qword_10036E440);
    goto LABEL_7;
  }
  swift_retain(a1);
  swift_retain(v22);
  sub_100015704((uint64_t)v20, &qword_10036E2A0);
  v26 = a1;
  if (v25(v24, 1, v9) != 1)
    goto LABEL_6;
  sub_100015704((uint64_t)v14, &qword_10036E2A0);
LABEL_9:
  v32 = v26
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
  swift_beginAccess(v26+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0], v54, 0, 0);
  v33 = v49;
  sub_10000E660(v32, v49, &qword_10036E2A8);
  v34 = v22
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
  swift_beginAccess(v22+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0], v53, 0, 0);
  v35 = v51;
  v36 = v51 + *(int *)(v47 + 48);
  sub_10000E660(v33, v51, &qword_10036E2A8);
  sub_10000E660(v34, v36, &qword_10036E2A8);
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  v38 = v50;
  if (v37(v35, 1, v50) == 1)
  {
    swift_release(v26);
    swift_release(v22);
    sub_100015704(v33, &qword_10036E2A8);
    if (v37(v36, 1, v38) == 1)
    {
      sub_100015704(v35, &qword_10036E2A8);
      return 1;
    }
    goto LABEL_14;
  }
  v39 = v45;
  sub_10000E660(v35, v45, &qword_10036E2A8);
  if (v37(v36, 1, v38) == 1)
  {
    swift_release(v26);
    swift_release(v22);
    sub_100015704(v33, &qword_10036E2A8);
    sub_100004030(v39, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
LABEL_14:
    sub_100015704(v35, &qword_10036E438);
    return 0;
  }
  v41 = v44;
  sub_100003E08(v36, v44, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  v42 = sub_10000FD38(&qword_100369FC8, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&unk_1002C3E2C);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v41, v38, v42);
  swift_release(v26);
  swift_release(v22);
  sub_100004030(v41, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  sub_100015704(v33, &qword_10036E2A8);
  sub_100004030(v39, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  sub_100015704(v35, &qword_10036E2A8);
  return (v43 & 1) != 0;
}

Swift::Int sub_1000890E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  v0 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v1 = sub_10000FD38(&qword_10036E2B0, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&unk_1002CAA30);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_100089154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (qword_100393D78 != -1)
    swift_once(&qword_100393D78, sub_100088270);
  v5 = qword_100393D80;
  *(_QWORD *)(a2 + v4) = qword_100393D80;
  return swift_retain(v5);
}

uint64_t sub_1000891B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100088530(a1, a2, a3);
}

uint64_t sub_1000891C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100088704(a1, a2, a3);
}

uint64_t sub_1000891D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E430, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&unk_1002CA9A8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100089228(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E1A0, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&unk_1002CA930);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100089268(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E1A0, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&unk_1002CA930);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000892BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v20 - v9;
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(*(_QWORD *)(a1 + v11)),
        swift_retain(v13),
        v14 = sub_100088ADC(v12, v13),
        swift_release(v13),
        swift_release(v12),
        v14))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    v16 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v16);
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_100089424()
{
  return sub_10000FD38(&qword_10036E2B8, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&unk_1002CAA08);
}

uint64_t sub_100089450()
{
  return sub_10000FD38(&qword_10036E1A0, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&unk_1002CA930);
}

uint64_t sub_10008947C()
{
  return sub_10000FD38(&qword_10036E2B0, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&unk_1002CAA30);
}

uint64_t sub_1000894A8()
{
  return sub_10000FD38(&qword_10036E198, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&unk_1002CAA70);
}

uint64_t sub_1000894D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000894E0);
}

uint64_t sub_1000894E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10008955C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100089568);
}

uint64_t sub_100089568(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1000895E0()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
}

void sub_1000895E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10001198C(319, &qword_10036E368, type metadata accessor for Proto_Gpsd_LogEntry);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10036E370, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

uint64_t sub_100089690(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014AA00();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000896C8()
{
  return &off_100353668;
}

void sub_1000896D4(_QWORD *a1@<X8>)
{
  *a1 = &off_100353690;
}

uint64_t sub_1000896E8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A9BC();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100089720@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10010BBD8(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100089744@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10010BBD8(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10008976C()
{
  return &off_1003536B8;
}

void sub_100089778(_QWORD *a1@<X8>)
{
  *a1 = &off_1003536B8;
}

uint64_t sub_100089788(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A978();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000897C0()
{
  return &off_1003536E8;
}

void sub_1000897CC(_QWORD *a1@<X8>)
{
  *a1 = &off_1003536E8;
}

uint64_t sub_1000897DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A934();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089814()
{
  return &off_100353710;
}

void sub_100089820(_QWORD *a1@<X8>)
{
  *a1 = &off_100353738;
}

uint64_t sub_100089830(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A8F0();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089868()
{
  return &off_100353760;
}

void sub_100089874(_QWORD *a1@<X8>)
{
  *a1 = &off_100353788;
}

uint64_t sub_100089884(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A8AC();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000898BC()
{
  return &off_1003537B0;
}

void sub_1000898C8(_QWORD *a1@<X8>)
{
  *a1 = &off_1003537D8;
}

uint64_t sub_1000898D8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A868();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089910()
{
  return &off_100353800;
}

void sub_10008991C(_QWORD *a1@<X8>)
{
  *a1 = &off_100353828;
}

uint64_t sub_10008992C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A824();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089964()
{
  return &off_100353850;
}

void sub_100089970(_QWORD *a1@<X8>)
{
  *a1 = &off_100353878;
}

uint64_t sub_100089980(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A7E0();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000899B8()
{
  return &off_1003538A0;
}

void sub_1000899C4(_QWORD *a1@<X8>)
{
  *a1 = &off_1003538C8;
}

uint64_t sub_1000899D8(char a1)
{
  return qword_1002D91C0[a1];
}

BOOL sub_1000899EC(char *a1, char *a2)
{
  return qword_1002D91C0[*a1] == qword_1002D91C0[*a2];
}

uint64_t sub_100089A10(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A79C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100089A48@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10010BBE8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100089A6C()
{
  char *v0;

  return qword_1002D91C0[*v0];
}

uint64_t sub_100089A80@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10010BBE8(*a1);
  *a2 = result;
  return result;
}

void sub_100089AA8(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1002D91C0[*v1];
}

_UNKNOWN **sub_100089AC0()
{
  return &off_1003538F0;
}

void sub_100089ACC(_QWORD *a1@<X8>)
{
  *a1 = &off_1003538F0;
}

uint64_t sub_100089AE0(char a1)
{
  return qword_1002D9400[a1];
}

BOOL sub_100089AF4(char *a1, char *a2)
{
  return qword_1002D9400[*a1] == qword_1002D9400[*a2];
}

uint64_t sub_100089B18(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A758();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100089B50@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10010C108(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100089B74()
{
  char *v0;

  return qword_1002D9400[*v0];
}

uint64_t sub_100089B88@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10010C108(*a1);
  *a2 = result;
  return result;
}

void sub_100089BB0(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1002D9400[*v1];
}

_UNKNOWN **sub_100089BC8()
{
  return &off_100353958;
}

void sub_100089BD4(_QWORD *a1@<X8>)
{
  *a1 = &off_100353980;
}

uint64_t sub_100089BE4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A714();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089C1C()
{
  return &off_1003539A8;
}

void sub_100089C28(_QWORD *a1@<X8>)
{
  *a1 = &off_1003539D0;
}

uint64_t sub_100089C38(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A6D0();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089C70()
{
  return &off_1003539F8;
}

void sub_100089C7C(_QWORD *a1@<X8>)
{
  *a1 = &off_100353A20;
}

uint64_t sub_100089C90(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A68C();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089CC8()
{
  return &off_100353A48;
}

void sub_100089CD4(_QWORD *a1@<X8>)
{
  *a1 = &off_100353A48;
}

uint64_t sub_100089CE4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A648();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089D1C()
{
  return &off_100353A70;
}

void sub_100089D28(_QWORD *a1@<X8>)
{
  *a1 = &off_100353A98;
}

uint64_t sub_100089D38(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A604();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089D70()
{
  return &off_100353AC0;
}

void sub_100089D7C(_QWORD *a1@<X8>)
{
  *a1 = &off_100353AE8;
}

uint64_t sub_100089D8C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10000FCF4();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089DC4()
{
  return &off_100353B10;
}

void sub_100089DD0(_QWORD *a1@<X8>)
{
  *a1 = &off_100353B38;
}

uint64_t sub_100089DE4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A5C0();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_100089E1C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10010C15C(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100089E40@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10010C15C(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_100089E68()
{
  return &off_100353B60;
}

void sub_100089E74(_QWORD *a1@<X8>)
{
  *a1 = &off_100353B60;
}

uint64_t sub_100089E84(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A57C();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089EBC()
{
  return &off_100353B90;
}

void sub_100089EC8(_QWORD *a1@<X8>)
{
  *a1 = &off_100353B90;
}

uint64_t sub_100089ED8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A538();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089F10()
{
  return &off_100353BC0;
}

void sub_100089F1C(_QWORD *a1@<X8>)
{
  *a1 = &off_100353BE8;
}

uint64_t sub_100089F2C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A4F4();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089F64()
{
  return &off_100353C10;
}

void sub_100089F70(_QWORD *a1@<X8>)
{
  *a1 = &off_100353C38;
}

uint64_t sub_100089F80(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A4B0();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_100089FB8()
{
  return &off_100353C60;
}

void sub_100089FC4(_QWORD *a1@<X8>)
{
  *a1 = &off_100353C88;
}

uint64_t sub_100089FD4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A46C();
  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10008A00C()
{
  return &off_100353CB0;
}

void sub_10008A018(_QWORD *a1@<X8>)
{
  *a1 = &off_100353CD8;
}

double sub_10008A028()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A034(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*sub_10008A040(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10008A098()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A0A4()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_10008A0B0()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A0BC(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*sub_10008A0C8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10008A120()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A12C()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_10008A138()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A144(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*sub_10008A150(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10008A1A8()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A1B4()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

int *sub_10008A1C0@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB04(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_10008A1CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t sub_10008A1D8(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10008A1F4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

void sub_10008A344(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_10008A358()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A374()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float sub_10008A390()
{
  return sub_100027688(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A39C(float a1)
{
  return sub_1000276CC(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*sub_10008A3A8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008A400()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A40C()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

float sub_10008A418()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A424(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*sub_10008A430(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008A488()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A494()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

float sub_10008A4A0()
{
  return sub_10002CC70(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A4AC(float a1)
{
  return sub_10002CCB4(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*sub_10008A4B8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008A510()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A51C()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10008A528@<X0>(uint64_t a1@<X8>)
{
  return sub_10008AA90(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t sub_10008A534@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_10008A540@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0C4(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t sub_10008A54C(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_Accel, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10008A568(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Accel(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_10008A6B8()
{
  return sub_1000198C8(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A6D4()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_Accel, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A6F0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t sub_10008A6FC(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t (*sub_10008A708())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10008A730@<X0>(_QWORD *a1@<X8>)
{
  return sub_10008AD24(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t sub_10008A73C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t sub_10008A748(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10008A764(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_10008A8B4()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008A8D0()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float sub_10008A8EC()
{
  return sub_100027688(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008A8F8(float a1)
{
  return sub_1000276CC(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t (*sub_10008A904(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008A95C()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008A968()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

float sub_10008A974()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008A980(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t (*sub_10008A98C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008A9E4()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008A9F0()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

float sub_10008A9FC()
{
  return sub_10002CC70(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008AA08(float a1)
{
  return sub_10002CCB4(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t (*sub_10008AA14(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008AA6C()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008AA78()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_10008AA84@<X0>(uint64_t a1@<X8>)
{
  return sub_10008AA90(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t sub_10008AA90@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  v4 = (int *)a1(0);
  v5 = a2 + v4[5];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = a2 + v4[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a2 + v4[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a2 + v4[8];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_10008AB28@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0C4(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t sub_10008AB34(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10008AB50(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_10008ACA0()
{
  return sub_1000198C8(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008ACBC()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008ACD8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t sub_10008ACE4(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t (*sub_10008ACF0())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10008AD18@<X0>(_QWORD *a1@<X8>)
{
  return sub_10008AD24(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t sub_10008AD24@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;

  *a2 = &_swiftEmptyArrayStorage;
  v3 = a1(0);
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(v3 + 24);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t sub_10008AD90@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t sub_10008AD9C(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10008ADB8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_10008AF08()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008AF24()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float sub_10008AF40()
{
  return sub_100027688(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_10008AF4C(float a1)
{
  return sub_1000276CC(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t (*sub_10008AF58(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008AFB0()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_10008AFBC()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

float sub_10008AFC8()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_10008AFD4(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t (*sub_10008AFE0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008B038()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_10008B044()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_10008B050@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_10008B0D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0C4(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

uint64_t sub_10008B0E0(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_Baro, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10008B0FC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Baro(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_10008B24C()
{
  return sub_1000198C8(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008B268()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_Baro, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10008B284@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

uint64_t sub_10008B290(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t (*sub_10008B29C())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10008B2C4@<X0>(_QWORD *a1@<X8>)
{
  return sub_10008AD24(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

double sub_10008B2D0()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008B2DC(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t (*sub_10008B2E8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10008B340()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008B34C()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

double sub_10008B358()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008B364(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t (*sub_10008B370(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10008B3C8()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008B3D4()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008B3E0@<X0>(uint64_t a1@<X8>)
{
  return sub_10008E6C0(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t sub_10008B3EC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  if (*(_BYTE *)(v1 + 16) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_10008B43C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10010C234(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 16, v12, 1, 0);
  *(_BYTE *)(v10 + 16) = a1;
  return result;
}

void (*sub_10008B4E4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10008B560;
}

void sub_10008B560(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10010C234(v12);
    swift_release(v9);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_10008B638()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  return *(_BYTE *)(v1 + 16) != 4;
}

uint64_t sub_10008B688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010C234(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 16, v10, 1, 0);
  *(_BYTE *)(v8 + 16) = 4;
  return result;
}

uint64_t sub_10008B728@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD618(&qword_10036E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t sub_10008B74C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E460);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010C234(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E460);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E460);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10008B8D0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E460);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E460);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E460);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return sub_10008BA28;
}

void sub_10008BA28(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10008B74C, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL sub_10008BA3C()
{
  return sub_10001CFF4(&qword_10036E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008BA60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010C234(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E460);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_10008BB94()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

uint64_t sub_10008BBA8(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy, a1);
}

void (*sub_10008BBCC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008BC5C;
}

void sub_10008BC5C(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

BOOL sub_10008BC78()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

uint64_t sub_10008BC8C()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

double sub_10008BCB0()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

uint64_t sub_10008BCC4(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude, a1);
}

uint64_t sub_10008BCE8(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4, double a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _BYTE v19[24];

  v9 = v5;
  v11 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v5 + v11);
    v13 = a2(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    a3(v15);
    swift_release(v12);
    v16 = *(_QWORD *)(v9 + v11);
    *(_QWORD *)(v9 + v11) = v14;
    swift_release(v16);
  }
  v17 = *(_QWORD *)(v9 + v11) + *a4;
  result = swift_beginAccess(v17, v19, 1, 0);
  *(double *)v17 = a5;
  *(_BYTE *)(v17 + 8) = 0;
  return result;
}

void (*sub_10008BDBC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008BE4C;
}

void sub_10008BE4C(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

void sub_10008BE68(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v13 = *(int *)(v9 + 88);
    v14 = *(_QWORD *)(v9 + 80);
    v15 = *(_QWORD *)(v14 + v13);
    v16 = a3(0);
    v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v18 = swift_retain(v15);
    a4(v18);
    swift_release(v15);
    v19 = *(_QWORD *)(v14 + v13);
    *(_QWORD *)(v14 + v13) = v17;
    swift_release(v19);
  }
LABEL_4:
  v20 = *(_QWORD *)(*(_QWORD *)(v9 + 80) + *(int *)(v9 + 88)) + *a5;
  swift_beginAccess(v20, v12, 1, 0);
  *(_QWORD *)v20 = v10;
  *(_BYTE *)(v20 + 8) = 0;
  free((void *)v9);
}

BOOL sub_10008BF5C()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

uint64_t sub_10008BF70()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

uint64_t sub_10008BF94(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];

  v8 = v4;
  v9 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v4 + v9);
    v11 = a2(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    a3(v13);
    swift_release(v10);
    v14 = *(_QWORD *)(v8 + v9);
    *(_QWORD *)(v8 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v8 + v9) + *a4;
  result = swift_beginAccess(v15, v17, 1, 0);
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  return result;
}

double sub_10008C060()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

uint64_t sub_10008C074(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy, a1);
}

void (*sub_10008C098(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008C128;
}

void sub_10008C128(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

BOOL sub_10008C144()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

uint64_t sub_10008C158()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

double sub_10008C17C()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

uint64_t sub_10008C190(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed, a1);
}

void (*sub_10008C1B4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008C244;
}

void sub_10008C244(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

BOOL sub_10008C260()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

uint64_t sub_10008C274()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

double sub_10008C298()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

uint64_t sub_10008C2AC(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy, a1);
}

void (*sub_10008C2D0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008C360;
}

void sub_10008C360(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

BOOL sub_10008C37C()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

uint64_t sub_10008C390()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

double sub_10008C3B4()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

uint64_t sub_10008C3C8(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course, a1);
}

void (*sub_10008C3EC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008C47C;
}

void sub_10008C47C(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

BOOL sub_10008C498()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

uint64_t sub_10008C4AC()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

double sub_10008C4D0()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

uint64_t sub_10008C4E4(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy, a1);
}

void (*sub_10008C508(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008C598;
}

void sub_10008C598(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

BOOL sub_10008C5B4()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

uint64_t sub_10008C5C8()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

double sub_10008C5EC()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

uint64_t sub_10008C600(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, a1);
}

void (*sub_10008C624(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008C6B4;
}

void sub_10008C6B4(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

BOOL sub_10008C6D0()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

uint64_t sub_10008C6E4()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

uint64_t sub_10008C708()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

uint64_t sub_10008C71C(int a1)
{
  return sub_10008D18C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

void (*sub_10008C740(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10008C7CC;
}

void sub_10008C7CC(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

BOOL sub_10008C7E8()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

uint64_t sub_10008C7FC()
{
  return sub_10008D428(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

double sub_10008C820()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

uint64_t sub_10008C834(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan, a1);
}

void (*sub_10008C858(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008C8E8;
}

void sub_10008C8E8(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

BOOL sub_10008C904()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

uint64_t sub_10008C918()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

uint64_t sub_10008C93C()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(v1, v3, 0, 0);
  if (*v1 == 14)
    return 0;
  else
    return *v1;
}

uint64_t sub_10008C998(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

void (*sub_10008C9BC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 14)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10008CA44;
}

void sub_10008CA44(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

BOOL sub_10008CA60()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(v1, v3, 0, 0);
  return *v1 != 14;
}

uint64_t sub_10008CABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010C234(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 14;
  return result;
}

uint64_t sub_10008CB68@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD618(&qword_10036E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t sub_10008CB8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E460);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010C234(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E460);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E460);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10008CD10(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E460);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E460);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E460);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return sub_10008CE68;
}

void sub_10008CE68(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10008CB8C, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL sub_10008CE7C()
{
  return sub_10001CFF4(&qword_10036E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10008CEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010C234(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E460);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_10008CFD4()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

uint64_t sub_10008CFE8(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse, a1);
}

void (*sub_10008D00C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008D09C;
}

void sub_10008D09C(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

BOOL sub_10008D0B8()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

uint64_t sub_10008D0CC()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

uint64_t sub_10008D0F0()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t sub_10008D104(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE v5[24];

  v3 = (_BYTE *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0, 0);
  if (v3[4])
    return 0;
  else
    return *(unsigned int *)v3;
}

uint64_t sub_10008D168(int a1)
{
  return sub_10008D18C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t sub_10008D18C(int a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _BYTE v19[24];

  v9 = v5;
  v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v5 + v11);
    v13 = a3(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    a4(v15);
    swift_release(v12);
    v16 = *(_QWORD *)(v9 + v11);
    *(_QWORD *)(v9 + v11) = v14;
    swift_release(v16);
  }
  v17 = *(_QWORD *)(v9 + v11) + *a5;
  result = swift_beginAccess(v17, v19, 1, 0);
  *(_DWORD *)v17 = a1;
  *(_BYTE *)(v17 + 4) = 0;
  return result;
}

void (*sub_10008D254(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10008D2E0;
}

void sub_10008D2E0(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

void sub_10008D2FC(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  int v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *a1;
  v10 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v13 = *(int *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 72);
    v15 = *(_QWORD *)(v14 + v13);
    v16 = a3(0);
    v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v18 = swift_retain(v15);
    a4(v18);
    swift_release(v15);
    v19 = *(_QWORD *)(v14 + v13);
    *(_QWORD *)(v14 + v13) = v17;
    swift_release(v19);
  }
LABEL_4:
  v20 = *(_QWORD *)(*(_QWORD *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess(v20, v12, 1, 0);
  *(_DWORD *)v20 = v10;
  *(_BYTE *)(v20 + 4) = 0;
  free((void *)v9);
}

BOOL sub_10008D3F0()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t sub_10008D404()
{
  return sub_10008D428(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t sub_10008D428(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];

  v8 = v4;
  v9 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v4 + v9);
    v11 = a2(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    a3(v13);
    swift_release(v10);
    v14 = *(_QWORD *)(v8 + v9);
    *(_QWORD *)(v8 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v8 + v9) + *a4;
  result = swift_beginAccess(v15, v17, 1, 0);
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_10008D4F4()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t sub_10008D508(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t sub_10008D52C(char a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t result;
  _BYTE v19[24];

  v9 = v5;
  v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v5 + v11);
    v13 = a3(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    a4(v15);
    swift_release(v12);
    v16 = *(_QWORD *)(v9 + v11);
    *(_QWORD *)(v9 + v11) = v14;
    swift_release(v16);
  }
  v17 = (_BYTE *)(*(_QWORD *)(v9 + v11) + *a5);
  result = swift_beginAccess(v17, v19, 1, 0);
  *v17 = a1;
  return result;
}

void (*sub_10008D5F0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10008D678;
}

void sub_10008D678(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

void sub_10008D694(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;

  v9 = *a1;
  v10 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v13 = *(int *)(v9 + 80);
    v14 = *(_QWORD *)(v9 + 72);
    v15 = *(_QWORD *)(v14 + v13);
    v16 = a3(0);
    v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v18 = swift_retain(v15);
    a4(v18);
    swift_release(v15);
    v19 = *(_QWORD *)(v14 + v13);
    *(_QWORD *)(v14 + v13) = v17;
    swift_release(v19);
  }
LABEL_4:
  v20 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess(v20, v12, 1, 0);
  *v20 = v10;
  free((void *)v9);
}

BOOL sub_10008D784()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t sub_10008D798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010C234(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 5;
  return result;
}

uint64_t sub_10008D844()
{
  return sub_10008D9F4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t sub_10008D858(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

void (*sub_10008D87C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10008D904;
}

void sub_10008D904(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

BOOL sub_10008D920()
{
  return sub_10008DB30(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t sub_10008D934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010C234(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 3;
  return result;
}

uint64_t sub_10008D9E0()
{
  return sub_10008D9F4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

uint64_t sub_10008D9F4(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _BYTE v5[24];

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0, 0);
  if (*v3 == 3)
    return 0;
  else
    return *v3;
}

uint64_t sub_10008DA54(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

void (*sub_10008DA78(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10008DB00;
}

void sub_10008DB00(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

BOOL sub_10008DB1C()
{
  return sub_10008DB30(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

BOOL sub_10008DB30(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _BYTE v5[24];

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0, 0);
  return *v3 != 3;
}

uint64_t sub_10008DB90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010C234(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 3;
  return result;
}

uint64_t sub_10008DC3C()
{
  return sub_1000AFE74(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

uint64_t sub_10008DC50(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

void (*sub_10008DC74(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 8)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10008DCFC;
}

void sub_10008DCFC(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

BOOL sub_10008DD18()
{
  return sub_1000AFFB0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

uint64_t sub_10008DD2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010C234(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 8;
  return result;
}

double sub_10008DDD8()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

uint64_t sub_10008DDEC(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude, a1);
}

void (*sub_10008DE10(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008DEA0;
}

void sub_10008DEA0(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

BOOL sub_10008DEBC()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

uint64_t sub_10008DED0()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

uint64_t sub_10008DEF4()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

uint64_t sub_10008DF08(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

void (*sub_10008DF2C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_10008DFB0;
}

void sub_10008DFB0(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10010C234, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

BOOL sub_10008DFCC()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

uint64_t sub_10008DFE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010C234(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_10008E090(char a1)
{
  return qword_1002D9178[a1];
}

BOOL sub_10008E0A4(char *a1, char *a2)
{
  return qword_1002D9178[*a1] == qword_1002D9178[*a2];
}

uint64_t sub_10008E0C8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A428();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10008E100@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10010CAF0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008E124()
{
  char *v0;

  return qword_1002D9178[*v0];
}

uint64_t sub_10008E138@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10010CAF0(*a1);
  *a2 = result;
  return result;
}

void sub_10008E160(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1002D9178[*v1];
}

uint64_t sub_10008E17C(char a1)
{
  return qword_1002D9198[a1];
}

BOOL sub_10008E190(char *a1, char *a2)
{
  return qword_1002D9198[*a1] == qword_1002D9198[*a2];
}

uint64_t sub_10008E1B4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A3E4();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10008E1EC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10010CB2C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008E210()
{
  char *v0;

  return qword_1002D9198[*v0];
}

uint64_t sub_10008E224@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10010CB2C(*a1);
  *a2 = result;
  return result;
}

void sub_10008E24C(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1002D9198[*v1];
}

uint64_t sub_10008E264@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &qword_1003941C0, &qword_1003941C8, (uint64_t)sub_1000C8BF0, a1);
}

uint64_t sub_10008E288()
{
  return sub_100036594(&qword_1003941C0, &qword_1003941C8, (uint64_t)sub_1000C8BF0);
}

_UNKNOWN **sub_10008E2A4()
{
  return &off_100353D00;
}

void sub_10008E2B0(_QWORD *a1@<X8>)
{
  *a1 = &off_100353D28;
}

_UNKNOWN **sub_10008E2C0()
{
  return &off_100353D50;
}

void sub_10008E2CC(_QWORD *a1@<X8>)
{
  *a1 = &off_100353D78;
}

double sub_10008E2DC()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E2E8(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, a1);
}

uint64_t (*sub_10008E2F4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10008E34C()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E358()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

double sub_10008E364()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E370(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, a1);
}

uint64_t (*sub_10008E37C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10008E3D4()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E3E0()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E3EC()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E3F8(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t (*sub_10008E404(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10008E44C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 28)) != 2;
}

uint64_t sub_10008E474()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_10008E498()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10008E4A4(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t (*sub_10008E4B0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10008E4F8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 32)) != 2;
}

uint64_t sub_10008E520()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_10008E544@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  return result;
}

double sub_10008E5A4()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10008E5B0(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t (*sub_10008E5BC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10008E614()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10008E620()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

double sub_10008E62C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10008E638(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t (*sub_10008E644(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10008E69C()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10008E6A8()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10008E6B4@<X0>(uint64_t a1@<X8>)
{
  return sub_10008E6C0(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t sub_10008E6C0@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = a1(0);
  v5 = a2 + *(int *)(result + 20);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + *(int *)(result + 24);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

uint64_t sub_10008E710()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20));
  if (v1 == 7)
    return 0;
  else
    return v1;
}

uint64_t sub_10008E738(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10008E764(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10008E7B0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20)) != 7;
}

uint64_t sub_10008E7D8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 7;
  return result;
}

uint64_t sub_10008E7FC()
{
  return sub_10002DF3C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E808(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*sub_10008E814(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008E864()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E870()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float sub_10008E87C()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E888(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*sub_10008E894(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008E8EC()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E8F8()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float sub_10008E904()
{
  return sub_10002CC70(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E910(float a1)
{
  return sub_10002CCB4(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*sub_10008E91C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008E974()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E980()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float sub_10008E98C()
{
  return sub_100033534(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008E998(float a1)
{
  return sub_100033578(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*sub_10008E9A4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 36);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008E9FC()
{
  return sub_10002822C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008EA08()
{
  return sub_100028268(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float sub_10008EA14()
{
  return sub_1000A0928(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008EA20(float a1)
{
  return sub_1000A096C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*sub_10008EA2C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 40);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10008EA84()
{
  return sub_1000336EC(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008EA90()
{
  return sub_100033728(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008EA9C()
{
  return sub_1000A3B24(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008EAA8(char a1)
{
  return sub_1000A3B58(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*sub_10008EAB4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10008EAFC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 44)) != 2;
}

uint64_t sub_10008EB24()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_10008EB48()
{
  return sub_1000A3C24(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10008EB54(char a1)
{
  return sub_1000A3C58(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*sub_10008EB60(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10008EBA8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 48)) != 2;
}

uint64_t sub_10008EBD0()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

int *sub_10008EBF4@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(_BYTE *)(a1 + result[5]) = 7;
  v3 = a1 + result[6];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[10];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a1 + result[11]) = 2;
  *(_BYTE *)(a1 + result[12]) = 2;
  return result;
}

uint64_t sub_10008EC90()
{
  return 7;
}

double sub_10008EC98()
{
  return sub_1000BE304(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008ECA4(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10010CBEC(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 16, v12, 1, 0);
  *(double *)(v10 + 16) = a1;
  *(_BYTE *)(v10 + 24) = 0;
  return result;
}

void (*sub_10008ED50(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(double *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008EDD4;
}

void sub_10008EDD4(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10010CBEC(v12);
    swift_release(v9);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 16, v6, 1, 0);
  *(_QWORD *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 24) = 0;
  free((void *)v3);
}

BOOL sub_10008EEAC()
{
  return sub_1000BE55C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008EEB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 16, v10, 1, 0);
  *(_QWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 24) = 1;
  return result;
}

double sub_10008EF5C()
{
  return sub_10009B568(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008EF68(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10010CBEC(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 32, v12, 1, 0);
  *(double *)(v10 + 32) = a1;
  *(_BYTE *)(v10 + 40) = 0;
  return result;
}

void (*sub_10008F014(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0, 0);
  v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008F098;
}

void sub_10008F098(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10010CBEC(v12);
    swift_release(v9);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 32, v6, 1, 0);
  *(_QWORD *)(v14 + 32) = v4;
  *(_BYTE *)(v14 + 40) = 0;
  free((void *)v3);
}

BOOL sub_10008F170()
{
  return sub_10009B7D0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008F17C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 32, v10, 1, 0);
  *(_QWORD *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 40) = 1;
  return result;
}

double sub_10008F220()
{
  return sub_10009BF24(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008F22C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10010CBEC(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 48, v12, 1, 0);
  *(double *)(v10 + 48) = a1;
  *(_BYTE *)(v10 + 56) = 0;
  return result;
}

void (*sub_10008F2D8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 48, v3, 0, 0);
  v6 = *(double *)(v5 + 48);
  if (*(_BYTE *)(v5 + 56))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008F35C;
}

void sub_10008F35C(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10010CBEC(v12);
    swift_release(v9);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 48, v6, 1, 0);
  *(_QWORD *)(v14 + 48) = v4;
  *(_BYTE *)(v14 + 56) = 0;
  free((void *)v3);
}

BOOL sub_10008F434()
{
  return sub_10009C18C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008F440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 48, v10, 1, 0);
  *(_QWORD *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 56) = 1;
  return result;
}

double sub_10008F4E4()
{
  return sub_10009C28C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008F4F0(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10010CBEC(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 64, v12, 1, 0);
  *(double *)(v10 + 64) = a1;
  *(_BYTE *)(v10 + 72) = 0;
  return result;
}

void (*sub_10008F59C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 64, v3, 0, 0);
  v6 = *(double *)(v5 + 64);
  if (*(_BYTE *)(v5 + 72))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008F620;
}

void sub_10008F620(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10010CBEC(v12);
    swift_release(v9);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 64, v6, 1, 0);
  *(_QWORD *)(v14 + 64) = v4;
  *(_BYTE *)(v14 + 72) = 0;
  free((void *)v3);
}

BOOL sub_10008F6F8()
{
  return sub_10009C4F4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008F704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 64, v10, 1, 0);
  *(_QWORD *)(v8 + 64) = 0;
  *(_BYTE *)(v8 + 72) = 1;
  return result;
}

double sub_10008F7A8()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess(v1 + 80, v3, 0, 0);
  result = *(double *)(v1 + 80);
  if (*(_BYTE *)(v1 + 88))
    return 0.0;
  return result;
}

uint64_t sub_10008F800(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10010CBEC(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 80, v12, 1, 0);
  *(double *)(v10 + 80) = a1;
  *(_BYTE *)(v10 + 88) = 0;
  return result;
}

void (*sub_10008F8AC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 80, v3, 0, 0);
  v6 = *(double *)(v5 + 80);
  if (*(_BYTE *)(v5 + 88))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10008F930;
}

void sub_10008F930(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10010CBEC(v12);
    swift_release(v9);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 80, v6, 1, 0);
  *(_QWORD *)(v14 + 80) = v4;
  *(_BYTE *)(v14 + 88) = 0;
  free((void *)v3);
}

BOOL sub_10008FA08()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess(v1 + 80, v3, 0, 0);
  return (*(_BYTE *)(v1 + 88) & 1) == 0;
}

uint64_t sub_10008FA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 80, v10, 1, 0);
  *(_QWORD *)(v8 + 80) = 0;
  *(_BYTE *)(v8 + 88) = 1;
  return result;
}

float sub_10008FAFC()
{
  return sub_1000BFC14(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008FB08(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10010CBEC(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 92, v12, 1, 0);
  *(float *)(v10 + 92) = a1;
  *(_BYTE *)(v10 + 96) = 0;
  return result;
}

void (*sub_10008FBB4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 92, v3, 0, 0);
  v6 = *(float *)(v5 + 92);
  if (*(_BYTE *)(v5 + 96))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_10008FC38;
}

void sub_10008FC38(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10010CBEC(v12);
    swift_release(v9);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 92, v6, 1, 0);
  *(_DWORD *)(v14 + 92) = v4;
  *(_BYTE *)(v14 + 96) = 0;
  free((void *)v3);
}

BOOL sub_10008FD10()
{
  return sub_1000BFE6C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008FD1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 92, v10, 1, 0);
  *(_DWORD *)(v8 + 92) = 0;
  *(_BYTE *)(v8 + 96) = 1;
  return result;
}

float sub_10008FDC0()
{
  return sub_1000BFF64(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008FDCC(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10010CBEC(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 100, v12, 1, 0);
  *(float *)(v10 + 100) = a1;
  *(_BYTE *)(v10 + 104) = 0;
  return result;
}

void (*sub_10008FE78(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 100, v3, 0, 0);
  v6 = *(float *)(v5 + 100);
  if (*(_BYTE *)(v5 + 104))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_10008FEFC;
}

void sub_10008FEFC(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10010CBEC(v12);
    swift_release(v9);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 100, v6, 1, 0);
  *(_DWORD *)(v14 + 100) = v4;
  *(_BYTE *)(v14 + 104) = 0;
  free((void *)v3);
}

BOOL sub_10008FFD4()
{
  return sub_1000C01BC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10008FFE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 100, v10, 1, 0);
  *(_DWORD *)(v8 + 100) = 0;
  *(_BYTE *)(v8 + 104) = 1;
  return result;
}

float sub_100090084()
{
  return sub_1000C02B4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_100090090(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10010CBEC(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 108, v12, 1, 0);
  *(float *)(v10 + 108) = a1;
  *(_BYTE *)(v10 + 112) = 0;
  return result;
}

void (*sub_10009013C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 108, v3, 0, 0);
  v6 = *(float *)(v5 + 108);
  if (*(_BYTE *)(v5 + 112))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000901C0;
}

void sub_1000901C0(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10010CBEC(v12);
    swift_release(v9);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 108, v6, 1, 0);
  *(_DWORD *)(v14 + 108) = v4;
  *(_BYTE *)(v14 + 112) = 0;
  free((void *)v3);
}

BOOL sub_100090298()
{
  return sub_1000C050C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000902A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 108, v10, 1, 0);
  *(_DWORD *)(v8 + 108) = 0;
  *(_BYTE *)(v8 + 112) = 1;
  return result;
}

uint64_t sub_100090348()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess(v1 + 113, v3, 0, 0);
  return *(_BYTE *)(v1 + 113) & 1;
}

uint64_t sub_100090394(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10010CBEC(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 113, v12, 1, 0);
  *(_BYTE *)(v10 + 113) = a1 & 1;
  return result;
}

void (*sub_100090440(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 113, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 113) & 1;
  return sub_1000904B8;
}

void sub_1000904B8(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10010CBEC(v12);
    swift_release(v9);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 113, v6, 1, 0);
  *(_BYTE *)(v14 + 113) = v4;
  free((void *)v3);
}

BOOL sub_100090588()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess(v1 + 113, v3, 0, 0);
  return *(_BYTE *)(v1 + 113) != 2;
}

uint64_t sub_1000905D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 113, v10, 1, 0);
  *(_BYTE *)(v8 + 113) = 2;
  return result;
}

uint64_t sub_100090678()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess(v1 + 114, v3, 0, 0);
  if (*(_BYTE *)(v1 + 114) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 114);
}

uint64_t sub_1000906C8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10010CBEC(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 114, v12, 1, 0);
  *(_BYTE *)(v10 + 114) = a1;
  return result;
}

void (*sub_100090770(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 114, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 114);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000907EC;
}

void sub_1000907EC(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10010CBEC(v12);
    swift_release(v9);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 114);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_1000908C4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess(v1 + 114, v3, 0, 0);
  return *(_BYTE *)(v1 + 114) != 4;
}

uint64_t sub_100090914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 114, v10, 1, 0);
  *(_BYTE *)(v8 + 114) = 4;
  return result;
}

uint64_t sub_1000909B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD618(&qword_10036E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t sub_1000909D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E460);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010CBEC(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E460);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E460);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100090B5C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E460);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E460);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E460);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return sub_100090CB4;
}

void sub_100090CB4(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000909D8, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL sub_100090CC8()
{
  return sub_10001CFF4(&qword_10036E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_100090CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010CBEC(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E460);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_100090E20()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

uint64_t sub_100090E34(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse, a1);
}

void (*sub_100090E58(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100090EE8;
}

void sub_100090EE8(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

BOOL sub_100090F04()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

uint64_t sub_100090F18()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

uint64_t sub_100090F3C()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

uint64_t sub_100090F50(int a1)
{
  return sub_10008D18C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

void (*sub_100090F74(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100091000;
}

void sub_100091000(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

BOOL sub_10009101C()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

uint64_t sub_100091030()
{
  return sub_10008D428(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

uint64_t sub_100091054()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

uint64_t sub_100091068(int a1)
{
  return sub_10008D18C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

void (*sub_10009108C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100091118;
}

void sub_100091118(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

BOOL sub_100091134()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

uint64_t sub_100091148()
{
  return sub_10008D428(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

uint64_t sub_10009116C()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

uint64_t sub_100091180(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE v5[24];

  v3 = (_BYTE *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0, 0);
  return *v3 & 1;
}

uint64_t sub_1000911DC(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

uint64_t sub_100091200(char a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t result;
  _BYTE v19[24];

  v9 = v5;
  v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v5 + v11);
    v13 = a3(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    a4(v15);
    swift_release(v12);
    v16 = *(_QWORD *)(v9 + v11);
    *(_QWORD *)(v9 + v11) = v14;
    swift_release(v16);
  }
  v17 = (_BYTE *)(*(_QWORD *)(v9 + v11) + *a5);
  result = swift_beginAccess(v17, v19, 1, 0);
  *v17 = a1 & 1;
  return result;
}

void (*sub_1000912C8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_10009134C;
}

void sub_10009134C(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

void sub_100091368(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;

  v9 = *a1;
  v10 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v13 = *(int *)(v9 + 80);
    v14 = *(_QWORD *)(v9 + 72);
    v15 = *(_QWORD *)(v14 + v13);
    v16 = a3(0);
    v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v18 = swift_retain(v15);
    a4(v18);
    swift_release(v15);
    v19 = *(_QWORD *)(v14 + v13);
    *(_QWORD *)(v14 + v13) = v17;
    swift_release(v19);
  }
LABEL_4:
  v20 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess(v20, v12, 1, 0);
  *v20 = v10;
  free((void *)v9);
}

BOOL sub_100091454()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

BOOL sub_100091468(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _BYTE v5[24];

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0, 0);
  return *v3 != 2;
}

uint64_t sub_1000914C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_100091574@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD618(&qword_10036E468, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t sub_100091598(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E468);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010CBEC(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E468);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E468);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10009171C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E468);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E468);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E468);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  }
  return sub_100091874;
}

void sub_100091874(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100091598, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

BOOL sub_100091888()
{
  return sub_10001CFF4(&qword_10036E468, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000918AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E468);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010CBEC(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E468);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000919E0()
{
  return sub_100095724(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

uint64_t sub_1000919EC(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

void (*sub_100091A10(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_100091A98;
}

void sub_100091A98(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

BOOL sub_100091AB4()
{
  return sub_100095854(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

uint64_t sub_100091AC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 4;
  return result;
}

float sub_100091B6C()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

uint64_t sub_100091B80(float a1)
{
  return sub_1000B2DF4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation, a1);
}

void (*sub_100091BA4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_100091C34;
}

void sub_100091C34(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

BOOL sub_100091C50()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

uint64_t sub_100091C64()
{
  return sub_10008D428(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

uint64_t sub_100091C88@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD618(&qword_10036E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t sub_100091CAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E460);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010CBEC(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E460);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E460);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100091E30(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E460);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E460);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E460);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return sub_100091F88;
}

void sub_100091F88(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100091CAC, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL sub_100091F9C()
{
  return sub_10001CFF4(&qword_10036E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_100091FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010CBEC(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E460);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_1000920F4()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

uint64_t sub_100092108(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy, a1);
}

void (*sub_10009212C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000921BC;
}

void sub_1000921BC(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

BOOL sub_1000921D8()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

uint64_t sub_1000921EC()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

double sub_100092210()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

uint64_t sub_100092224(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime, a1);
}

void (*sub_100092248(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000922D8;
}

void sub_1000922D8(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

BOOL sub_1000922F4()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

uint64_t sub_100092308()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

uint64_t sub_10009232C()
{
  return sub_10008D9F4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

uint64_t sub_100092340(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

void (*sub_100092364(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000923EC;
}

void sub_1000923EC(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

BOOL sub_100092408()
{
  return sub_10008DB30(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

uint64_t sub_10009241C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 3;
  return result;
}

uint64_t sub_1000924C8()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

uint64_t sub_1000924DC(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

void (*sub_100092500(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_100092584;
}

void sub_100092584(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

BOOL sub_1000925A0()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

uint64_t sub_1000925B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_100092660@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036E470);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E470);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036E470);
}

uint64_t sub_10009279C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E470);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010CBEC(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E470);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E470);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100092920(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E470);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E470);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036E470);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  }
  return sub_100092A8C;
}

void sub_100092A8C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10009279C, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

BOOL sub_100092AA0()
{
  return sub_10001CFF4(&qword_10036E470, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_100092AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E470);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010CBEC(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E470);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_100092BF8()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

uint64_t sub_100092C0C(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope, a1);
}

void (*sub_100092C30(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100092CC0;
}

void sub_100092CC0(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

BOOL sub_100092CDC()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

uint64_t sub_100092CF0()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

double sub_100092D14()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

uint64_t sub_100092D28(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope, a1);
}

void (*sub_100092D4C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100092DDC;
}

void sub_100092DDC(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

BOOL sub_100092DF8()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

uint64_t sub_100092E0C()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

double sub_100092E30()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

uint64_t sub_100092E44(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude, a1);
}

void (*sub_100092E68(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100092EF8;
}

void sub_100092EF8(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

BOOL sub_100092F14()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

uint64_t sub_100092F28()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

double sub_100092F4C()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

uint64_t sub_100092F60(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty, a1);
}

void (*sub_100092F84(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100093014;
}

void sub_100093014(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

BOOL sub_100093030()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

uint64_t sub_100093044()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

double sub_100093068()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

uint64_t sub_10009307C(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude, a1);
}

void (*sub_1000930A0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100093130;
}

void sub_100093130(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

BOOL sub_10009314C()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

uint64_t sub_100093160()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

double sub_100093184()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

uint64_t sub_100093198(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty, a1);
}

void (*sub_1000931BC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10009324C;
}

void sub_10009324C(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

BOOL sub_100093268()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

uint64_t sub_10009327C()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

uint64_t sub_1000932A0()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

uint64_t sub_1000932B4(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

void (*sub_1000932D8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_10009335C;
}

void sub_10009335C(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

BOOL sub_100093378()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

uint64_t sub_10009338C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

double sub_100093438()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

uint64_t sub_10009344C(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy, a1);
}

void (*sub_100093470(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100093500;
}

void sub_100093500(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

BOOL sub_10009351C()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

uint64_t sub_100093530()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

double sub_100093554()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

uint64_t sub_100093568(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy, a1);
}

void (*sub_10009358C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10009361C;
}

void sub_10009361C(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

BOOL sub_100093638()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

uint64_t sub_10009364C()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

uint64_t sub_100093670()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

uint64_t sub_100093684(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

void (*sub_1000936A8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_10009372C;
}

void sub_10009372C(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

BOOL sub_100093748()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

uint64_t sub_10009375C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_100093808@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD618(&qword_10036E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t sub_10009382C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E460);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010CBEC(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E460);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E460);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000939B0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E460);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E460);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E460);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return sub_100093B08;
}

void sub_100093B08(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10009382C, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL sub_100093B1C()
{
  return sub_10001CFF4(&qword_10036E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_100093B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010CBEC(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E460);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_100093C74()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

uint64_t sub_100093C88(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy, a1);
}

void (*sub_100093CAC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100093D3C;
}

void sub_100093D3C(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

BOOL sub_100093D58()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

uint64_t sub_100093D6C()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

uint64_t sub_100093D90()
{
  return sub_10008D9F4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

uint64_t sub_100093DA4(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

void (*sub_100093DC8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_100093E50;
}

void sub_100093E50(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

BOOL sub_100093E6C()
{
  return sub_10008DB30(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

uint64_t sub_100093E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 3;
  return result;
}

double sub_100093F2C()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

uint64_t sub_100093F40(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse, a1);
}

void (*sub_100093F64(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100093FF4;
}

void sub_100093FF4(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

BOOL sub_100094010()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

uint64_t sub_100094024()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

double sub_100094048()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

uint64_t sub_10009405C(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy, a1);
}

void (*sub_100094080(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100094110;
}

void sub_100094110(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

BOOL sub_10009412C()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

uint64_t sub_100094140()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

double sub_100094164()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

uint64_t sub_100094178(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError, a1);
}

void (*sub_10009419C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10009422C;
}

void sub_10009422C(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

BOOL sub_100094248()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

uint64_t sub_10009425C()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

double sub_100094280()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

uint64_t sub_100094294(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude, a1);
}

void (*sub_1000942B8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100094348;
}

void sub_100094348(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

BOOL sub_100094364()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

uint64_t sub_100094378()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

double sub_10009439C()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

uint64_t sub_1000943B0(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy, a1);
}

void (*sub_1000943D4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100094464;
}

void sub_100094464(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

BOOL sub_100094480()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

uint64_t sub_100094494()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

uint64_t sub_1000944B8()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

uint64_t sub_1000944CC(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

void (*sub_1000944F0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_100094574;
}

void sub_100094574(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

BOOL sub_100094590()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

uint64_t sub_1000945A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

double sub_100094650()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

uint64_t sub_100094664(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude, a1);
}

void (*sub_100094688(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100094718;
}

void sub_100094718(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

BOOL sub_100094734()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

uint64_t sub_100094748()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

double sub_10009476C()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

uint64_t sub_100094780(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy, a1);
}

void (*sub_1000947A4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_100094834;
}

void sub_100094834(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

BOOL sub_100094850()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

uint64_t sub_100094864()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

uint64_t sub_100094888()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(*(_QWORD *)(v0
                            + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0)
                                     + 20))
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess(v1, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_1000948E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _BYTE v13[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_10010CBEC(v8);
    swift_release(v5);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = (uint64_t *)(*(_QWORD *)(v2 + v4)
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess(v10, v13, 1, 0);
  v11 = *v10;
  *v10 = a1;
  return swift_bridgeObjectRelease(v11);
}

void (*sub_10009499C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_100094A24;
}

void sub_100094A24(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(int *)(*a1 + 88);
  v5 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(*a1 + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v4)) & 1) == 0)
    {
      v6 = *(int *)(v2 + 88);
      v7 = *(_QWORD *)(v2 + 80);
      v8 = *(_QWORD *)(v7 + v6);
      v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
      v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
      v11 = swift_retain(v8);
      sub_10010CBEC(v11);
      swift_release(v8);
      v12 = *(_QWORD *)(v7 + v6);
      *(_QWORD *)(v7 + v6) = v10;
      swift_release(v12);
    }
    v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88))
                    + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
    swift_beginAccess(v13, v2 + 24, 1, 0);
    v14 = *v13;
    *v13 = v3;
    swift_bridgeObjectRelease(v14);
    v15 = *(_QWORD *)(v2 + 72);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v4)) & 1) == 0)
    {
      v16 = *(int *)(v2 + 88);
      v17 = *(_QWORD *)(v2 + 80);
      v18 = *(_QWORD *)(v17 + v16);
      v19 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
      v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      v21 = swift_retain(v18);
      sub_10010CBEC(v21);
      swift_release(v18);
      v22 = *(_QWORD *)(v17 + v16);
      *(_QWORD *)(v17 + v16) = v20;
      swift_release(v22);
    }
    v23 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88))
                    + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
    swift_beginAccess(v23, v2 + 48, 1, 0);
    v15 = *v23;
    *v23 = v3;
  }
  swift_bridgeObjectRelease(v15);
  free((void *)v2);
}

uint64_t sub_100094B98()
{
  return sub_10008D9F4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

uint64_t sub_100094BAC(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

void (*sub_100094BD0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_100094C58;
}

void sub_100094C58(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

BOOL sub_100094C74()
{
  return sub_10008DB30(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

uint64_t sub_100094C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 3;
  return result;
}

uint64_t sub_100094D34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];

  v3 = sub_1000039AC(&qword_10036E478);
  __chkstk_darwin(v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess(v6, v13, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E478);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(a1 + v7[8]) = 4;
  return sub_100015704((uint64_t)v5, &qword_10036E478);
}

int *sub_100094E78@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_BYTE *)(a1 + result[8]) = 4;
  return result;
}

uint64_t sub_100094EE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E478);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010CBEC(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E478);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E478);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100095064(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E478);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E478);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v9[v6[8]] = 4;
    sub_100015704((uint64_t)v5, &qword_10036E478);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  }
  return sub_1000951D8;
}

void sub_1000951D8(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100094EE0, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

BOOL sub_1000951EC()
{
  return sub_10001CFF4(&qword_10036E478, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_100095210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E478);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010CBEC(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E478);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100095344()
{
  return sub_10008D9F4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

uint64_t sub_100095358(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

void (*sub_10009537C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_100095404;
}

void sub_100095404(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

BOOL sub_100095420()
{
  return sub_10008DB30(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

uint64_t sub_100095434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 3;
  return result;
}

double sub_1000954E0()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

uint64_t sub_1000954F4(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor, a1);
}

void (*sub_100095518(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000955A8;
}

void sub_1000955A8(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

BOOL sub_1000955C4()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

uint64_t sub_1000955D8()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

double sub_1000955FC()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

uint64_t sub_100095610(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor, a1);
}

void (*sub_100095634(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000956C4;
}

void sub_1000956C4(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

BOOL sub_1000956E0()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

uint64_t sub_1000956F4()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

uint64_t sub_100095718()
{
  return sub_100095724(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

uint64_t sub_100095724(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _BYTE v4[24];

  v2 = (unsigned __int8 *)(*(_QWORD *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0)
                                              + 20))
                         + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  if (*v2 == 4)
    return 0;
  else
    return *v2;
}

uint64_t sub_100095780(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

void (*sub_1000957A4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009582C;
}

void sub_10009582C(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

BOOL sub_100095848()
{
  return sub_100095854(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

BOOL sub_100095854(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _BYTE v4[24];

  v2 = (unsigned __int8 *)(*(_QWORD *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0)
                                              + 20))
                         + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  return *v2 != 4;
}

uint64_t sub_1000958B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 4;
  return result;
}

uint64_t sub_10009595C()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

uint64_t sub_100095970(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

void (*sub_100095994(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_100095A18;
}

void sub_100095A18(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

BOOL sub_100095A34()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

uint64_t sub_100095A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_100095AF4()
{
  return sub_10008D9F4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

uint64_t sub_100095B08(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

void (*sub_100095B2C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_100095BB4;
}

void sub_100095BB4(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

BOOL sub_100095BD0()
{
  return sub_10008DB30(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

uint64_t sub_100095BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 3;
  return result;
}

uint64_t sub_100095C90()
{
  return sub_10002B3B4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

uint64_t sub_100095CA4(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

void (*sub_100095CC8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_100095D50;
}

void sub_100095D50(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

BOOL sub_100095D6C()
{
  return sub_10002B65C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

uint64_t sub_100095D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 5;
  return result;
}

uint64_t sub_100095E2C()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

uint64_t sub_100095E40(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

void (*sub_100095E64(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_100095EE8;
}

void sub_100095EE8(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10010CBEC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

BOOL sub_100095F04()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

uint64_t sub_100095F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010CBEC(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_100095FC4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A3A0();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100096000(unsigned __int8 a1)
{
  return a1 - 1;
}

uint64_t sub_10009600C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A35C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100096044@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10010E1F4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100096068()
{
  unsigned __int8 *v0;

  return *v0 - 1;
}

uint64_t sub_100096074@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10010E1F4(*a1);
  *a2 = result;
  return result;
}

void sub_10009609C(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 - 1;
}

uint64_t sub_1000960AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A318();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000960E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A2D4();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10009611C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A290();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100096154(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A24C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10009618C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A208();
  return Enum.hash(into:)(a1, a2, v4);
}

double sub_1000961C4()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000961D0(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*sub_1000961DC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100096234()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_100096240()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

double sub_10009624C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_100096258(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*sub_100096264(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000962BC()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000962C8()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

double sub_1000962D4()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000962E0(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*sub_1000962EC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100096344()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_100096350()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_10009635C()
{
  return sub_1000B4EE4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_100096368(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_100096394(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100003738;
}

BOOL sub_1000963E0()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0)
                           + 32)) != 4;
}

uint64_t sub_100096408()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_10009642C@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &qword_100394200, &qword_100394208, (uint64_t)sub_1000CCF84, a1);
}

uint64_t sub_100096450()
{
  return sub_100036594(&qword_100394200, &qword_100394208, (uint64_t)sub_1000CCF84);
}

_UNKNOWN **sub_10009646C()
{
  return &off_100353DA0;
}

void sub_100096478(_QWORD *a1@<X8>)
{
  *a1 = &off_100353DC8;
}

_UNKNOWN **sub_100096488()
{
  return &off_100353DF0;
}

void sub_100096494(_QWORD *a1@<X8>)
{
  *a1 = &off_100353E18;
}

_UNKNOWN **sub_1000964A4()
{
  return &off_100353E40;
}

void sub_1000964B0(_QWORD *a1@<X8>)
{
  *a1 = &off_100353E68;
}

_UNKNOWN **sub_1000964C0()
{
  return &off_100353E90;
}

void sub_1000964CC(_QWORD *a1@<X8>)
{
  *a1 = &off_100353EB8;
}

_UNKNOWN **sub_1000964DC()
{
  return &off_100353EE0;
}

void sub_1000964E8(_QWORD *a1@<X8>)
{
  *a1 = &off_100353F08;
}

_UNKNOWN **sub_1000964F8()
{
  return &off_100353F30;
}

void sub_100096504(_QWORD *a1@<X8>)
{
  *a1 = &off_100353F58;
}

_UNKNOWN **sub_100096514()
{
  return &off_100353F80;
}

void sub_100096520(_QWORD *a1@<X8>)
{
  *a1 = &off_100353FA8;
}

uint64_t sub_100096530()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20));
  if (v1 == 14)
    return 0;
  else
    return v1;
}

uint64_t sub_100096558(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100096584(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 14)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000965D0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20)) != 14;
}

uint64_t sub_1000965F8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 14;
  return result;
}

uint64_t sub_10009661C()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t sub_100096628(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t (*sub_100096634(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10009667C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 24)) != 2;
}

uint64_t sub_1000966A4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000966C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA214(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, 14, 2, a1);
}

uint64_t sub_1000966DC()
{
  return 14;
}

double sub_1000966E4()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000966F0(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*sub_1000966FC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100096754()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100096760()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

double sub_10009676C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100096778(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*sub_100096784(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000967DC()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000967E8()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

double sub_1000967F4()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100096800(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*sub_10009680C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100096864()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100096870()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

double sub_10009687C()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100096888(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*sub_100096894(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000968EC()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000968F8()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

int *sub_100096904@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF0B0(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

double sub_100096910()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_10009691C(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

uint64_t (*sub_100096928(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100096980()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_10009698C()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

double sub_100096998()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000969A4(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

uint64_t (*sub_1000969B0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100096A08()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_100096A14()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_100096A20@<X0>(uint64_t a1@<X8>)
{
  return sub_10008E6C0(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

double sub_100096A2C()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100096A38(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, a1);
}

uint64_t (*sub_100096A44(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100096A9C()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100096AA8()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100096AB4()
{
  return sub_10009E7A8(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100096AC0(uint64_t a1, uint64_t a2)
{
  return sub_10009E808(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t (*sub_100096ACC(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B34;
}

BOOL sub_100096B38()
{
  return sub_10009E8C0(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100096B44()
{
  return sub_10009E8FC(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100096B50@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;

  UnknownStorage.init()();
  result = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  v3 = a1 + *(int *)(result + 20);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = (_QWORD *)(a1 + *(int *)(result + 24));
  *v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t sub_100096B98()
{
  return 0;
}

double sub_100096BA4()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100096BB0(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*sub_100096BBC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100096C14()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100096C20()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

double sub_100096C2C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100096C38(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*sub_100096C44(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100096C9C()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100096CA8()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

double sub_100096CB4()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100096CC0(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*sub_100096CCC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_100096D24()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100096D30()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

int *sub_100096D3C@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB04(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t sub_100096D48@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_100096D6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000D4B70(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100096EEC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_100097054;
}

void sub_100097054(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100096D6C, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_100097068()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009708C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000D4B70(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000971BC()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000971D0(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1000D4B70, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*sub_1000971F4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_100097280;
}

void sub_100097280(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1000D4B70, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

BOOL sub_10009729C()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000972B0()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1000D4B70, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000972D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036E480);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E480);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_1003941C0 != -1)
    swift_once(&qword_1003941C0, sub_1000C8BF0);
  v9 = qword_1003941C8;
  *(_QWORD *)(a1 + v8) = qword_1003941C8;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_10036E480);
}

uint64_t sub_100097414(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E480);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000D4B70(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E480);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E480);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100097594(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E480);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E480);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_1003941C0 != -1)
      swift_once(&qword_1003941C0, sub_1000C8BF0);
    v12 = qword_1003941C8;
    *(_QWORD *)&v9[v11] = qword_1003941C8;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_10036E480);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  }
  return sub_100097704;
}

void sub_100097704(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100097414, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

BOOL sub_100097718()
{
  return sub_10001CFF4(&qword_10036E480, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t sub_10009773C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E480);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000D4B70(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E480);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10009786C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036E488);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E488);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_100394200 != -1)
    swift_once(&qword_100394200, sub_1000CCF84);
  v9 = qword_100394208;
  *(_QWORD *)(a1 + v8) = qword_100394208;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_10036E488);
}

uint64_t sub_1000979AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E488);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000D4B70(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E488);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E488);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100097B2C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E488);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E488);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_100394200 != -1)
      swift_once(&qword_100394200, sub_1000CCF84);
    v12 = qword_100394208;
    *(_QWORD *)&v9[v11] = qword_100394208;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_10036E488);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  }
  return sub_100097C9C;
}

void sub_100097C9C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000979AC, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

BOOL sub_100097CB0()
{
  return sub_10001CFF4(&qword_10036E488, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_100097CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E488);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000D4B70(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E488);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100097E04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v10[24];

  v3 = sub_1000039AC(&qword_10036E490);
  __chkstk_darwin(v3);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess(v6, v10, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E490);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 14;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036E490);
}

uint64_t sub_100097F20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E490);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000D4B70(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E490);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E490);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000980A0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E490);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E490);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 14;
    v9[*(int *)(v6 + 24)] = 2;
    sub_100015704((uint64_t)v5, &qword_10036E490);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  }
  return sub_1000981EC;
}

void sub_1000981EC(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100097F20, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

BOOL sub_100098200()
{
  return sub_10001CFF4(&qword_10036E490, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t sub_100098224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E490);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000D4B70(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E490);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100098354()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

uint64_t sub_100098368(char a1)
{
  return sub_1000ACF18(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1000D4B70, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

void (*sub_10009838C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_100098410;
}

void sub_100098410(uint64_t *a1, char a2)
{
  sub_1000AD07C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1000D4B70, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

BOOL sub_10009842C()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

uint64_t sub_100098440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D4B70(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

double sub_1000984E8()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

uint64_t sub_1000984FC(double a1)
{
  return sub_1000AC044(type metadata accessor for CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1000D4B70, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer, a1);
}

void (*sub_100098520(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000985B0;
}

void sub_1000985B0(uint64_t *a1, char a2)
{
  sub_1000AC1B8(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1000D4B70, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

BOOL sub_1000985CC()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

uint64_t sub_1000985E0()
{
  return sub_100024EAC(type metadata accessor for CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1000D4B70, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

uint64_t sub_100098604()
{
  return sub_10008D9F4(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

uint64_t sub_100098618(char a1)
{
  return sub_100023104(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1000D4B70, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

void (*sub_10009863C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000986C4;
}

void sub_1000986C4(uint64_t *a1, char a2)
{
  sub_100023268(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1000D4B70, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

BOOL sub_1000986E0()
{
  return sub_10008DB30(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

uint64_t sub_1000986F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D4B70(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 3;
  return result;
}

uint64_t sub_10009879C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B1318(&qword_10036E498, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t sub_1000987C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E498);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000D4B70(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E498);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E498);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100098940(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E498);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E498);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E498);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  }
  return sub_100098AB8;
}

void sub_100098AB8(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000987C0, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

BOOL sub_100098ACC()
{
  return sub_10001CFF4(&qword_10036E498, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100098AF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E498);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000D4B70(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E498);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100098C20@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD618(&qword_10036E4A0, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

uint64_t sub_100098C44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E4A0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000D4B70(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E4A0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E4A0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100098DC4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E4A0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E4A0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E4A0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  }
  return sub_100098F1C;
}

void sub_100098F1C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_100098C44, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

BOOL sub_100098F30()
{
  return sub_10001CFF4(&qword_10036E4A0, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_100098F54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E4A0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000D4B70(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E4A0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100099084@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036E4A8);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E4A8);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = (_QWORD *)(a1 + *(int *)(v7 + 24));
  *v9 = 0;
  v9[1] = 0;
  return sub_100015704((uint64_t)v5, &qword_10036E4A8);
}

uint64_t sub_1000991A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E4A8);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000D4B70(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E4A8);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E4A8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100099328(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E4A8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E4A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    sub_100015704((uint64_t)v5, &qword_10036E4A8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  }
  return sub_10009947C;
}

void sub_10009947C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000991A8, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

BOOL sub_100099490()
{
  return sub_10001CFF4(&qword_10036E4A8, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_1000994B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E4A8);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000D4B70(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E4A8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000995E4()
{
  return sub_10008D9F4(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

uint64_t sub_1000995F8(char a1)
{
  return sub_100023104(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1000D4B70, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

void (*sub_10009961C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000996A4;
}

void sub_1000996A4(uint64_t *a1, char a2)
{
  sub_100023268(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1000D4B70, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

BOOL sub_1000996C0()
{
  return sub_10008DB30(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

uint64_t sub_1000996D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D4B70(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 3;
  return result;
}

uint64_t sub_10009977C@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E4B0, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t sub_1000997A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E4B0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000D4B70(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E4B0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E4B0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_100099920(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E4B0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E4B0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E4B0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  }
  return sub_100099A88;
}

void sub_100099A88(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000997A0, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

BOOL sub_100099A9C()
{
  return sub_10001CFF4(&qword_10036E4B0, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100099AC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E4B0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000D4B70(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E4B0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_100099BF0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A1C4();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100099C28(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A180();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100099C60@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_Location, &qword_100394288, &qword_100394290, (uint64_t)sub_1000D4958, a1);
}

uint64_t sub_100099C84()
{
  return sub_100036594(&qword_100394288, &qword_100394290, (uint64_t)sub_1000D4958);
}

_UNKNOWN **sub_100099CA0()
{
  return &off_100353FD0;
}

void sub_100099CAC(_QWORD *a1@<X8>)
{
  *a1 = &off_100353FF8;
}

_UNKNOWN **sub_100099CBC()
{
  return &off_100354020;
}

void sub_100099CC8(_QWORD *a1@<X8>)
{
  *a1 = &off_100354048;
}

uint64_t sub_100099CD8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A6FFC(type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, a1);
}

uint64_t sub_100099CE4(uint64_t a1)
{
  return sub_1000A7054(a1, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t (*sub_100099CF0())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100099D18@<X0>(_QWORD *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
  return UnknownStorage.init()();
}

uint64_t sub_100099D54()
{
  return sub_1000A060C(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_100099D60(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100099D8C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100099DD8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 20)) != 3;
}

uint64_t sub_100099E00()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 3;
  return result;
}

uint64_t sub_100099E24()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_100099E30(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*sub_100099E3C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100099E84()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 24)) != 2;
}

uint64_t sub_100099EAC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100099ED0()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0)
                                   + 28));
  if (v1 == 5)
    return 1;
  else
    return v1;
}

uint64_t sub_100099EF8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100099F24(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 1;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_100099F70()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 28)) != 5;
}

uint64_t sub_100099F98()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 5;
  return result;
}

uint64_t sub_100099FBC()
{
  return sub_1000A9E40(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_100099FC8(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*sub_100099FD4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10009A024()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_10009A030()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_10009A03C()
{
  return sub_10001B080(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_10009A048(char a1)
{
  return sub_10001B0B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*sub_10009A054(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10009A09C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 36)) != 2;
}

uint64_t sub_10009A0C4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_10009A0E8@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(_BYTE *)(a1 + result[5]) = 3;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 5;
  v3 = a1 + result[8];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(a1 + result[9]) = 2;
  return result;
}

uint64_t sub_10009A150()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t sub_10009A15C(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t (*sub_10009A168(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10009A1B0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20)) != 2;
}

uint64_t sub_10009A1D8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10009A1FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  UnknownStorage.init()();
  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
  *(_BYTE *)(a1 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10009A230()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  if (*(_BYTE *)(v1 + 16) == 72)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_10009A280(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 16, v12, 1, 0);
  *(_BYTE *)(v10 + 16) = a1;
  return result;
}

void (*sub_10009A324(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 72)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009A3A0;
}

void sub_10009A3A0(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_10009A474()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 16, v3, 0, 0);
  return *(_BYTE *)(v1 + 16) != 72;
}

uint64_t sub_10009A4C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 16, v10, 1, 0);
  *(_BYTE *)(v8 + 16) = 72;
  return result;
}

uint64_t sub_10009A560()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 17, v3, 0, 0);
  if (*(_BYTE *)(v1 + 17) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 17);
}

uint64_t sub_10009A5B0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 17, v12, 1, 0);
  *(_BYTE *)(v10 + 17) = a1;
  return result;
}

void (*sub_10009A654(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 17, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 17);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009A6D0;
}

void sub_10009A6D0(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 17);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_10009A7A4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 17, v3, 0, 0);
  return *(_BYTE *)(v1 + 17) != 4;
}

uint64_t sub_10009A7F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 17, v10, 1, 0);
  *(_BYTE *)(v8 + 17) = 4;
  return result;
}

uint64_t sub_10009A890()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 18, v3, 0, 0);
  if (*(_BYTE *)(v1 + 18) == 3)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 18);
}

uint64_t sub_10009A8E0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 18, v12, 1, 0);
  *(_BYTE *)(v10 + 18) = a1;
  return result;
}

void (*sub_10009A984(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 18, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 18);
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009AA00;
}

void sub_10009AA00(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 18);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_10009AAD4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 18, v3, 0, 0);
  return *(_BYTE *)(v1 + 18) != 3;
}

uint64_t sub_10009AB24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 18, v10, 1, 0);
  *(_BYTE *)(v8 + 18) = 3;
  return result;
}

uint64_t sub_10009ABC0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 19, v3, 0, 0);
  if (*(_BYTE *)(v1 + 19) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 19);
}

uint64_t sub_10009AC10(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 19, v12, 1, 0);
  *(_BYTE *)(v10 + 19) = a1;
  return result;
}

void (*sub_10009ACB4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 19, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 19);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009AD30;
}

void sub_10009AD30(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 19);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_10009AE04()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 19, v3, 0, 0);
  return *(_BYTE *)(v1 + 19) != 4;
}

uint64_t sub_10009AE54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 19, v10, 1, 0);
  *(_BYTE *)(v8 + 19) = 4;
  return result;
}

uint64_t sub_10009AEF0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 20, v3, 0, 0);
  return *(_BYTE *)(v1 + 20) & 1;
}

uint64_t sub_10009AF3C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 20, v12, 1, 0);
  *(_BYTE *)(v10 + 20) = a1 & 1;
  return result;
}

void (*sub_10009AFE4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 20, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 20) & 1;
  return sub_10009B05C;
}

void sub_10009B05C(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 20, v6, 1, 0);
  *(_BYTE *)(v14 + 20) = v4;
  free((void *)v3);
}

BOOL sub_10009B128()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 20, v3, 0, 0);
  return *(_BYTE *)(v1 + 20) != 2;
}

uint64_t sub_10009B178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 20, v10, 1, 0);
  *(_BYTE *)(v8 + 20) = 2;
  return result;
}

float sub_10009B214()
{
  uint64_t v0;
  uint64_t v1;
  float result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 24, v3, 0, 0);
  result = *(float *)(v1 + 24);
  if (*(_BYTE *)(v1 + 28))
    return 0.0;
  return result;
}

uint64_t sub_10009B26C(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 24, v12, 1, 0);
  *(float *)(v10 + 24) = a1;
  *(_BYTE *)(v10 + 28) = 0;
  return result;
}

void (*sub_10009B314(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 24, v3, 0, 0);
  v6 = *(float *)(v5 + 24);
  if (*(_BYTE *)(v5 + 28))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_10009B398;
}

void sub_10009B398(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v14 + 24, v6, 1, 0);
  *(_DWORD *)(v14 + 24) = v4;
  *(_BYTE *)(v14 + 28) = 0;
  free((void *)v3);
}

BOOL sub_10009B46C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 24, v3, 0, 0);
  return (*(_BYTE *)(v1 + 28) & 1) == 0;
}

uint64_t sub_10009B4BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 24, v10, 1, 0);
  *(_DWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 28) = 1;
  return result;
}

double sub_10009B55C()
{
  return sub_10009B568(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double sub_10009B568(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 32, v4, 0, 0);
  result = *(double *)(v2 + 32);
  if (*(_BYTE *)(v2 + 40))
    return 0.0;
  return result;
}

uint64_t sub_10009B5C4(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 32, v12, 1, 0);
  *(double *)(v10 + 32) = a1;
  *(_BYTE *)(v10 + 40) = 0;
  return result;
}

void (*sub_10009B66C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0, 0);
  v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10009B6F0;
}

void sub_10009B6F0(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 32, v6, 1, 0);
  *(_QWORD *)(v14 + 32) = v4;
  *(_BYTE *)(v14 + 40) = 0;
  free((void *)v3);
}

BOOL sub_10009B7C4()
{
  return sub_10009B7D0(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL sub_10009B7D0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 32, v4, 0, 0);
  return (*(_BYTE *)(v2 + 40) & 1) == 0;
}

uint64_t sub_10009B824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 32, v10, 1, 0);
  *(_QWORD *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 40) = 1;
  return result;
}

uint64_t sub_10009B8C4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 41, v3, 0, 0);
  return *(_BYTE *)(v1 + 41) & 1;
}

uint64_t sub_10009B910(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 41, v12, 1, 0);
  *(_BYTE *)(v10 + 41) = a1 & 1;
  return result;
}

void (*sub_10009B9B8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 41, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 41) & 1;
  return sub_10009BA30;
}

void sub_10009BA30(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v14 + 41, v6, 1, 0);
  *(_BYTE *)(v14 + 41) = v4;
  free((void *)v3);
}

BOOL sub_10009BAFC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 41, v3, 0, 0);
  return *(_BYTE *)(v1 + 41) != 2;
}

uint64_t sub_10009BB4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 41, v10, 1, 0);
  *(_BYTE *)(v8 + 41) = 2;
  return result;
}

uint64_t sub_10009BBE8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 42, v3, 0, 0);
  if (*(_BYTE *)(v1 + 42) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 42);
}

uint64_t sub_10009BC38(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 42, v12, 1, 0);
  *(_BYTE *)(v10 + 42) = a1;
  return result;
}

void (*sub_10009BCDC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 42, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 42);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009BD58;
}

void sub_10009BD58(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 42);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_10009BE2C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 42, v3, 0, 0);
  return *(_BYTE *)(v1 + 42) != 4;
}

uint64_t sub_10009BE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 42, v10, 1, 0);
  *(_BYTE *)(v8 + 42) = 4;
  return result;
}

double sub_10009BF18()
{
  return sub_10009BF24(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double sub_10009BF24(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 48, v4, 0, 0);
  result = *(double *)(v2 + 48);
  if (*(_BYTE *)(v2 + 56))
    return 0.0;
  return result;
}

uint64_t sub_10009BF80(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 48, v12, 1, 0);
  *(double *)(v10 + 48) = a1;
  *(_BYTE *)(v10 + 56) = 0;
  return result;
}

void (*sub_10009C028(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 48, v3, 0, 0);
  v6 = *(double *)(v5 + 48);
  if (*(_BYTE *)(v5 + 56))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10009C0AC;
}

void sub_10009C0AC(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 48, v6, 1, 0);
  *(_QWORD *)(v14 + 48) = v4;
  *(_BYTE *)(v14 + 56) = 0;
  free((void *)v3);
}

BOOL sub_10009C180()
{
  return sub_10009C18C(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL sub_10009C18C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 48, v4, 0, 0);
  return (*(_BYTE *)(v2 + 56) & 1) == 0;
}

uint64_t sub_10009C1E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 48, v10, 1, 0);
  *(_QWORD *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 56) = 1;
  return result;
}

double sub_10009C280()
{
  return sub_10009C28C(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double sub_10009C28C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 64, v4, 0, 0);
  result = *(double *)(v2 + 64);
  if (*(_BYTE *)(v2 + 72))
    return 0.0;
  return result;
}

uint64_t sub_10009C2E8(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 64, v12, 1, 0);
  *(double *)(v10 + 64) = a1;
  *(_BYTE *)(v10 + 72) = 0;
  return result;
}

void (*sub_10009C390(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 64, v3, 0, 0);
  v6 = *(double *)(v5 + 64);
  if (*(_BYTE *)(v5 + 72))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_10009C414;
}

void sub_10009C414(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v14 + 64, v6, 1, 0);
  *(_QWORD *)(v14 + 64) = v4;
  *(_BYTE *)(v14 + 72) = 0;
  free((void *)v3);
}

BOOL sub_10009C4E8()
{
  return sub_10009C4F4(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL sub_10009C4F4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 64, v4, 0, 0);
  return (*(_BYTE *)(v2 + 72) & 1) == 0;
}

uint64_t sub_10009C548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 64, v10, 1, 0);
  *(_QWORD *)(v8 + 64) = 0;
  *(_BYTE *)(v8 + 72) = 1;
  return result;
}

uint64_t sub_10009C5E8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 73, v3, 0, 0);
  if (*(_BYTE *)(v1 + 73) == 72)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 73);
}

uint64_t sub_10009C638(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 73, v12, 1, 0);
  *(_BYTE *)(v10 + 73) = a1;
  return result;
}

void (*sub_10009C6DC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 73, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 73);
  if (v6 == 72)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009C758;
}

void sub_10009C758(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 73);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_10009C82C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 73, v3, 0, 0);
  return *(_BYTE *)(v1 + 73) != 72;
}

uint64_t sub_10009C87C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 73, v10, 1, 0);
  *(_BYTE *)(v8 + 73) = 72;
  return result;
}

uint64_t sub_10009C918()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 74, v3, 0, 0);
  if (*(_BYTE *)(v1 + 74) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 74);
}

uint64_t sub_10009C968(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v8 = swift_retain(v5);
    sub_1000D9B18(v8);
    v9 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v9);
  }
  v10 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v10 + 74, v12, 1, 0);
  *(_BYTE *)(v10 + 74) = a1;
  return result;
}

void (*sub_10009CA0C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 74, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 74);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_10009CA88;
}

void sub_10009CA88(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_1000D9B18(v12);
    v13 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v13);
  }
LABEL_4:
  v14 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 74);
  swift_beginAccess(v14, v6, 1, 0);
  *v14 = v4;
  free((void *)v3);
}

BOOL sub_10009CB5C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess(v1 + 74, v3, 0, 0);
  return *(_BYTE *)(v1 + 74) != 4;
}

uint64_t sub_10009CBAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000D9B18(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v8 + 74, v10, 1, 0);
  *(_BYTE *)(v8 + 74) = 4;
  return result;
}

uint64_t sub_10009CC48@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_10009CC6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000D9B18(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10009CDEC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10009CF54;
}

void sub_10009CF54(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10009CC6C, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_10009CF68()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009CF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000D9B18(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10009D0BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_10009D0E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000D9B18(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10009D260(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10009D3C8;
}

void sub_10009D3C8(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10009D0E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_10009D3DC()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009D400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000D9B18(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10009D530(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A13C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10009D568(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A0F8();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10009D5A0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A0B4();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10009D5D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_1003942C8, &qword_1003942D0, (uint64_t)sub_1000D9A40, a1);
}

uint64_t sub_10009D5FC()
{
  return sub_100036594(&qword_1003942C8, &qword_1003942D0, (uint64_t)sub_1000D9A40);
}

_UNKNOWN **sub_10009D618()
{
  return &off_100354070;
}

void sub_10009D624(_QWORD *a1@<X8>)
{
  *a1 = &off_100354098;
}

_UNKNOWN **sub_10009D634()
{
  return &off_1003540C0;
}

void sub_10009D640(_QWORD *a1@<X8>)
{
  *a1 = &off_1003540E8;
}

_UNKNOWN **sub_10009D650()
{
  return &off_100354110;
}

void sub_10009D65C(_QWORD *a1@<X8>)
{
  *a1 = &off_100354138;
}

uint64_t sub_10009D66C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, a1);
}

uint64_t sub_10009D678(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10009D694(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_10009D7E4()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009D800()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009D81C()
{
  return sub_10002DF3C(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t sub_10009D828(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t (*sub_10009D834(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10009D884()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t sub_10009D890()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t sub_10009D89C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036E4B8);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10036E4B8);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_1003942C8 != -1)
    swift_once(&qword_1003942C8, sub_1000D9A40);
  v9 = qword_1003942D0;
  *(_QWORD *)(a1 + v8) = qword_1003942D0;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_10036E4B8);
}

uint64_t sub_10009D9B4(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &qword_10036E4B8, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

void (*sub_10009D9D0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E4B8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E4B8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_1003942C8 != -1)
      swift_once(&qword_1003942C8, sub_1000D9A40);
    v12 = qword_1003942D0;
    *(_QWORD *)&v9[v11] = qword_1003942D0;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_10036E4B8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  }
  return sub_10009DB28;
}

void sub_10009DB28(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E4B8, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL sub_10009DB3C()
{
  return sub_10002D31C(&qword_10036E4B8, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t sub_10009DB58()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &qword_10036E4B8, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t sub_10009DB74@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E588(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a1);
}

uint64_t sub_10009DB88@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a1);
}

uint64_t sub_10009DB94()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20));
  if (v1 == 72)
    return 0;
  else
    return v1;
}

uint64_t sub_10009DBBC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10009DBE8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 72)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10009DC34()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20)) != 72;
}

uint64_t sub_10009DC5C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 72;
  return result;
}

double sub_10009DC80()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_10009DC8C(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t (*sub_10009DC98(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_10009DCF0()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_10009DCFC()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_10009DD08@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8688(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t sub_10009DD14(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10009DD30(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_10009DE80()
{
  return sub_10002D31C(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009DE9C()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009DEB8()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32));
  if (v1 == 72)
    return 0;
  else
    return v1;
}

uint64_t sub_10009DEE0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10009DF0C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 72)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10009DF58()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32)) != 72;
}

uint64_t sub_10009DF80()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 72;
  return result;
}

uint64_t sub_10009DFA4@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(_BYTE *)(a1 + v2[5]) = 72;
  v3 = a1 + v2[6];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + v2[7];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(_BYTE *)(a1 + v2[8]) = 72;
  return result;
}

uint64_t sub_10009E02C()
{
  return 72;
}

uint64_t sub_10009E034@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, a1);
}

uint64_t sub_10009E040(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10009E05C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_10009E1AC()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009E1C8()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009E1E4()
{
  return sub_10002DF3C(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t sub_10009E1F0(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t (*sub_10009E1FC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_10009E24C()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t sub_10009E258()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t sub_10009E264@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1000039AC(&qword_10036E4C0);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10036E4C0);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 72;
  v8 = a1 + v7[6];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[7];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_BYTE *)(a1 + v7[8]) = 72;
  return sub_100015704((uint64_t)v5, &qword_10036E4C0);
}

uint64_t sub_10009E39C(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &qword_10036E4C0, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

void (*sub_10009E3B8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E4C0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E4C0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 72;
    v11 = &v9[v6[6]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[7]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v9[v6[8]] = 72;
    sub_100015704((uint64_t)v5, &qword_10036E4C0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  }
  return sub_10009E528;
}

void sub_10009E528(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E4C0, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

BOOL sub_10009E53C()
{
  return sub_10002D31C(&qword_10036E4C0, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_10009E558()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &qword_10036E4C0, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_10009E574@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E588(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t sub_10009E588@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v6 = (int *)a1(0);
  v7 = a3 + v6[5];
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = a3 + v6[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a3 + v6[7];
  v11 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t sub_10009E634@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t sub_10009E640()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20));
  v2 = v1[1];
  if (v2)
    v3 = *v1;
  else
    v3 = 0;
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_10009E690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_10009E6D4(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B34;
}

BOOL sub_10009E73C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20) + 8) != 0;
}

uint64_t sub_10009E768()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20));
  result = swift_bridgeObjectRelease(v1[1]);
  *v1 = 0;
  v1[1] = 0;
  return result;
}

uint64_t sub_10009E79C()
{
  return sub_10009E7A8(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_10009E7A8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 24));
  v3 = v2[1];
  if (v3)
    v4 = *v2;
  else
    v4 = 0;
  swift_bridgeObjectRetain(v3);
  return v4;
}

uint64_t sub_10009E7FC(uint64_t a1, uint64_t a2)
{
  return sub_10009E808(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_10009E808(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 24));
  result = swift_bridgeObjectRelease(v6[1]);
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*sub_10009E84C(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B34;
}

BOOL sub_10009E8B4()
{
  return sub_10009E8C0(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

BOOL sub_10009E8C0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1(0) + 24) + 8) != 0;
}

uint64_t sub_10009E8F0()
{
  return sub_10009E8FC(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_10009E8FC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(v1 + *(int *)(a1(0) + 24));
  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t sub_10009E934()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28));
  if (v1 == 67)
    return 0;
  else
    return v1;
}

uint64_t sub_10009E95C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10009E988(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 67)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10009E9D4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28)) != 67;
}

uint64_t sub_10009E9FC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 67;
  return result;
}

uint64_t sub_10009EA20()
{
  return sub_1000A7834(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_10009EA2C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10009EA58(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10009EAA4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 32)) != 5;
}

uint64_t sub_10009EACC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 5;
  return result;
}

uint64_t sub_10009EAF0()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36));
  if (v1 == 3)
    return 0;
  else
    return v1;
}

uint64_t sub_10009EB18(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10009EB44(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10009EB90()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36)) != 3;
}

uint64_t sub_10009EBB8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 3;
  return result;
}

uint64_t sub_10009EBE0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A070();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10009EC18@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10010E348(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10009EC3C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10010E348(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009EC64(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10014A02C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10009EC9C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149FE8();
  return Enum.hash(into:)(a1, a2, v4);
}

int *sub_10009ECD4@<X0>(uint64_t a1@<X8>)
{
  int *result;
  _QWORD *v3;
  _QWORD *v4;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v3 = (_QWORD *)(a1 + result[5]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(a1 + result[6]);
  *v4 = 0;
  v4[1] = 0;
  *(_BYTE *)(a1 + result[7]) = 67;
  *(_BYTE *)(a1 + result[8]) = 5;
  *(_BYTE *)(a1 + result[9]) = 3;
  return result;
}

uint64_t sub_10009ED38()
{
  return 67;
}

_UNKNOWN **sub_10009ED40()
{
  return &off_100354160;
}

void sub_10009ED4C(_QWORD *a1@<X8>)
{
  *a1 = &off_100354160;
}

_UNKNOWN **sub_10009ED5C()
{
  return &off_1003541C8;
}

void sub_10009ED68(_QWORD *a1@<X8>)
{
  *a1 = &off_1003541F0;
}

_UNKNOWN **sub_10009ED78()
{
  return &off_100354218;
}

void sub_10009ED84(_QWORD *a1@<X8>)
{
  *a1 = &off_100354240;
}

uint64_t sub_10009ED94@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t sub_10009EDA0(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10009EDBC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_10009EF0C()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009EF28()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009EF44@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0C4(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t sub_10009EF50(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10009EF6C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_10009F0BC()
{
  return sub_1000198C8(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009F0D8()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009F0F4()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28));
  if (v1 == 19)
    return 0;
  else
    return v1;
}

uint64_t sub_10009F11C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10009F148(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 19)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_10009F194()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28)) != 19;
}

uint64_t sub_10009F1BC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 19;
  return result;
}

uint64_t sub_10009F1E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A694C(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t sub_10009F1EC(uint64_t a1)
{
  return sub_100034398(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_10009F208(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_10009F358()
{
  return sub_10002E3A0(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009F374()
{
  return sub_10002E478(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009F390@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036E4C8);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  sub_10000E660(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_10036E4C8);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  UnknownStorage.init()();
  v8 = (_QWORD *)(a1 + v7[5]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(a1 + v7[6]);
  *v9 = 0;
  v9[1] = 0;
  *(_BYTE *)(a1 + v7[7]) = 67;
  *(_BYTE *)(a1 + v7[8]) = 5;
  *(_BYTE *)(a1 + v7[9]) = 3;
  return sub_100015704((uint64_t)v5, &qword_10036E4C8);
}

uint64_t sub_10009F4A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
  sub_100015704(v3, &qword_10036E4C8);
  sub_100003E08(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*sub_10009F518(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E4C8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E4C8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *v11 = 0;
    v11[1] = 0;
    v12 = &v9[v6[6]];
    *v12 = 0;
    v12[1] = 0;
    v9[v6[7]] = 67;
    v9[v6[8]] = 5;
    v9[v6[9]] = 3;
    sub_100015704((uint64_t)v5, &qword_10036E4C8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  }
  return sub_10009F670;
}

void sub_10009F670(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E4C8, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

BOOL sub_10009F684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = sub_1000039AC(&qword_10036E4C8);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  sub_10000E660(v0 + *(int *)(v4 + 36), (uint64_t)v3, &qword_10036E4C8);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100015704((uint64_t)v3, &qword_10036E4C8);
  return v6;
}

uint64_t sub_10009F738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
  sub_100015704(v1, &qword_10036E4C8);
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_10009F794(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149FA4();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10009F7CC@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10010E36C(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10009F7F0@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10010E36C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F818@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(a1 + v2[6], 1, 1, v4);
  *(_BYTE *)(a1 + v2[7]) = 19;
  v5(a1 + v2[8], 1, 1, v4);
  v6 = a1 + v2[9];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_10009F8E8()
{
  return 19;
}

uint64_t sub_10009F8F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, a1);
}

_UNKNOWN **sub_10009F8FC()
{
  return &off_100354268;
}

void sub_10009F908(_QWORD *a1@<X8>)
{
  *a1 = &off_100354268;
}

uint64_t sub_10009F918@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_10009F93C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000DFA8C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_10009FABC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10009FC24;
}

void sub_10009FC24(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_10009F93C, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_10009FC38()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10009FC5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000DFA8C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_10009FD8C()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_10009FDA0(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass, (void (*)(uint64_t))sub_1000DFA8C, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_10009FDC4(int a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _BYTE v19[24];

  v9 = v5;
  v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v5 + v11);
    v13 = a3(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    a4(v15);
    v16 = *(_QWORD *)(v9 + v11);
    *(_QWORD *)(v9 + v11) = v14;
    swift_release(v16);
  }
  v17 = *(_QWORD *)(v9 + v11) + *a5;
  result = swift_beginAccess(v17, v19, 1, 0);
  *(_DWORD *)v17 = a1;
  *(_BYTE *)(v17 + 4) = 0;
  return result;
}

void (*sub_10009FE88(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_10009FF14;
}

void sub_10009FF14(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass, (void (*)(uint64_t))sub_1000DFA8C, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

BOOL sub_10009FF30()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_10009FF44()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass, (void (*)(uint64_t))sub_1000DFA8C, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_10009FF68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[24];

  v3 = sub_1000039AC(&qword_10036E4D0);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess(v6, v15, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E4D0);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v10(a1 + v7[6], 1, 1, v9);
  *(_BYTE *)(a1 + v7[7]) = 19;
  v10(a1 + v7[8], 1, 1, v9);
  v11 = a1 + v7[9];
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return sub_100015704((uint64_t)v5, &qword_10036E4D0);
}

uint64_t sub_1000A010C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E4D0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000DFA8C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E4D0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E4D0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A028C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E4D0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E4D0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v13(v11, 1, 1, v12);
    v13(&v9[v6[6]], 1, 1, v12);
    v9[v6[7]] = 19;
    v13(&v9[v6[8]], 1, 1, v12);
    v14 = &v9[v6[9]];
    v15 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    sub_100015704((uint64_t)v5, &qword_10036E4D0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  }
  return sub_1000A0458;
}

void sub_1000A0458(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000A010C, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

BOOL sub_1000A046C()
{
  return sub_10001CFF4(&qword_10036E4D0, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t sub_1000A0490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E4D0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000DFA8C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E4D0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000A05C0@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &qword_100394340, &qword_100394348, (uint64_t)sub_1000DF9D4, a1);
}

uint64_t sub_1000A05E4()
{
  return sub_100036594(&qword_100394340, &qword_100394348, (uint64_t)sub_1000DF9D4);
}

uint64_t sub_1000A0600()
{
  return sub_1000A060C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A060C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 3)
    return 0;
  else
    return v2;
}

uint64_t sub_1000A0638(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000A0664(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A06B0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 20)) != 3;
}

uint64_t sub_1000A06D8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 3;
  return result;
}

float sub_1000A06FC()
{
  return sub_100027688(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0708(float a1)
{
  return sub_1000276CC(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000A0714(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A076C()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0778()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A0784()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0790(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000A079C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A07F4()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0800()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A080C()
{
  return sub_10002CC70(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0818(float a1)
{
  return sub_10002CCB4(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000A0824(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A087C()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0888()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A0894()
{
  return sub_100033534(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A08A0(float a1)
{
  return sub_100033578(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000A08AC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 36);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A0904()
{
  return sub_10002822C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0910()
{
  return sub_100028268(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A091C()
{
  return sub_1000A0928(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A0928(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 40);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t sub_1000A0960(float a1)
{
  return sub_1000A096C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t sub_1000A096C(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 40);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000A09A4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 40);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A09FC()
{
  return sub_1000336EC(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0A08()
{
  return sub_100033728(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A0A14()
{
  return sub_1000B3A28(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0A20(float a1)
{
  return sub_1000B3A6C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000A0A2C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 44);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A0A84()
{
  return sub_100033824(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0A90()
{
  return sub_100033860(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A0A9C()
{
  return sub_1000B3B20(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0AA8(float a1)
{
  return sub_1000B3B64(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000A0AB4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 48);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A0B0C()
{
  return sub_1000B3C00(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A0B18()
{
  return sub_1000B3C3C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000A0B24()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t sub_1000A0B58(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v4 = v1 + *(int *)(result + 52);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000A0B8C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A0BE4()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52) + 4) & 1) == 0;
}

uint64_t sub_1000A0C10()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v2 = v0 + *(int *)(result + 52);
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_1000A0C3C()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56));
  if (v1 == 8)
    return 0;
  else
    return v1;
}

uint64_t sub_1000A0C64(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*sub_1000A0C90(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A0CDC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56)) != 8;
}

uint64_t sub_1000A0D04()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(_BYTE *)(v0 + *(int *)(result + 56)) = 8;
  return result;
}

float sub_1000A0D28()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t sub_1000A0D5C(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v4 = v1 + *(int *)(result + 60);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000A0D90(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A0DE8()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60) + 4) & 1) == 0;
}

uint64_t sub_1000A0E14()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v2 = v0 + *(int *)(result + 60);
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_1000A0E40(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149F60();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000A0E7C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149F1C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_1000A0EB4@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10010E3B8(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000A0ED8@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10010E3B8(*a1);
  *a2 = result;
  return result;
}

int *sub_1000A0F00@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(_BYTE *)(a1 + result[5]) = 3;
  v3 = a1 + result[6];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[10];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + result[11];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + result[12];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + result[13];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + result[14]) = 8;
  v11 = a1 + result[15];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_1000A0FD4()
{
  return 8;
}

_UNKNOWN **sub_1000A0FDC()
{
  return &off_1003542A0;
}

void sub_1000A0FE8(_QWORD *a1@<X8>)
{
  *a1 = &off_1003542C8;
}

_UNKNOWN **sub_1000A0FF8()
{
  return &off_1003542F0;
}

void sub_1000A1004(_QWORD *a1@<X8>)
{
  *a1 = &off_1003542F0;
}

uint64_t sub_1000A1014@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, a1);
}

uint64_t sub_1000A1020(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A103C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000A118C()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A11A8()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A11C4()
{
  return sub_10002DF3C(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t sub_1000A11D0(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t (*sub_1000A11DC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A122C()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t sub_1000A1238()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t sub_1000A1244@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = sub_1000039AC(&qword_10036E4D8);
  __chkstk_darwin(v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10036E4D8);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 3;
  v8 = a1 + v7[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[8];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[10];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[11];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v7[12];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v7[13];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  *(_BYTE *)(a1 + v7[14]) = 8;
  v16 = a1 + v7[15];
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036E4D8);
}

uint64_t sub_1000A13CC(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &qword_10036E4D8, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

void (*sub_1000A13E8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E4D8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E4D8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 3;
    v11 = &v9[v6[6]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[7]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[8]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[9]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[10]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[11]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v17 = &v9[v6[12]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    v18 = &v9[v6[13]];
    *(_DWORD *)v18 = 0;
    v18[4] = 1;
    v9[v6[14]] = 8;
    v19 = &v9[v6[15]];
    *(_DWORD *)v19 = 0;
    v19[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E4D8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  }
  return sub_1000A15B0;
}

void sub_1000A15B0(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E4D8, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

BOOL sub_1000A15C4()
{
  return sub_10002D31C(&qword_10036E4D8, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A15E0()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &qword_10036E4D8, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000A15FC@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E588(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t sub_1000A1610@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t sub_1000A161C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_Timer, a1);
}

uint64_t sub_1000A1628(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_Timer, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A1644(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Timer(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000A1794()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A17B0()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_Timer, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A17CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA974(type metadata accessor for CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000A17E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t sub_1000A17EC(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A1808(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000A1958()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A1974()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_1000A1990()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A199C(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000A19A8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A1A00()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1A0C()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

double sub_1000A1A18()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1A24(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000A1A30(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A1A88()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1A94()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

float sub_1000A1AA0()
{
  return sub_10002CC70(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1AAC(float a1)
{
  return sub_10002CCB4(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000A1AB8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A1B10()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1B1C()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

float sub_1000A1B28()
{
  return sub_100033534(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1B34(float a1)
{
  return sub_100033578(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000A1B40(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 36);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A1B98()
{
  return sub_10002822C(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1BA4()
{
  return sub_100028268(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

float sub_1000A1BB0()
{
  return sub_1000A0928(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1BBC(float a1)
{
  return sub_1000A096C(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000A1BC8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 40);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A1C20()
{
  return sub_1000336EC(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1C2C()
{
  return sub_100033728(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1C38()
{
  return sub_1000A6D84(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1C44(int a1)
{
  return sub_1000A6DC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t (*sub_1000A1C50(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A1CA0()
{
  return sub_100033824(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1CAC()
{
  return sub_100033860(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000A1CB8@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + v2[7];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1 + v2[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v2[9];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v2[10];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v2[11];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_1000A1D7C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t sub_1000A1D88(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A1DA4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000A1EF4()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A1F10()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_1000A1F2C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A1F38(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A1F44(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A1F9C()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A1FA8()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A1FB4()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A1FC0(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A1FCC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A2024()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2030()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A203C()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2048(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A2054(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A20AC()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A20B8()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A20C4()
{
  return sub_10002A164(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A20D0(double a1)
{
  return sub_10002A1A8(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A20DC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A2134()
{
  return sub_10002A244(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2140()
{
  return sub_10002A280(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A214C()
{
  return sub_1000B4238(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2158(double a1)
{
  return sub_1000B427C(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A2164(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A21BC()
{
  return sub_1000B4318(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A21C8()
{
  return sub_1000B4354(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A21D4()
{
  return sub_1000B4390(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A21E0(double a1)
{
  return sub_1000B43D4(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A21EC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A2244()
{
  return sub_1000B4470(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2250()
{
  return sub_1000B44AC(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A225C()
{
  return sub_1000B8248(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A2268(double a1)
{
  return sub_1000B828C(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000A2274(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 48);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A22CC()
{
  return sub_1000B8328(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A22D8()
{
  return sub_1000B8364(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000A22E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t sub_1000A2318(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v4 = v1 + *(int *)(result + 52);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000A234C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A23A4()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52) + 8) & 1) == 0;
}

uint64_t sub_1000A23D0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v2 = v0 + *(int *)(result + 52);
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

double sub_1000A23FC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t sub_1000A2430(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v4 = v1 + *(int *)(result + 56);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000A2464(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A24BC()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56) + 8) & 1) == 0;
}

uint64_t sub_1000A24E8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v2 = v0 + *(int *)(result + 56);
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_1000A2514()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60)) & 1;
}

uint64_t sub_1000A2538(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*sub_1000A2564(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A25AC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60)) != 2;
}

uint64_t sub_1000A25D4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(_BYTE *)(v0 + *(int *)(result + 60)) = 2;
  return result;
}

uint64_t sub_1000A25F8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64)) & 1;
}

uint64_t sub_1000A261C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(_BYTE *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*sub_1000A2648(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A2690()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64)) != 2;
}

uint64_t sub_1000A26B8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(_BYTE *)(v0 + *(int *)(result + 64)) = 2;
  return result;
}

uint64_t sub_1000A26DC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68)) & 1;
}

uint64_t sub_1000A2700(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(_BYTE *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*sub_1000A272C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A2774()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68)) != 2;
}

uint64_t sub_1000A279C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(_BYTE *)(v0 + *(int *)(result + 68)) = 2;
  return result;
}

uint64_t sub_1000A27C0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72)) & 1;
}

uint64_t sub_1000A27E4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(_BYTE *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*sub_1000A2810(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A2858()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72)) != 2;
}

uint64_t sub_1000A2880()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(_BYTE *)(v0 + *(int *)(result + 72)) = 2;
  return result;
}

uint64_t sub_1000A28A4@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + v2[7];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1 + v2[8];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v2[9];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v2[10];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v2[11];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v2[12];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1 + v2[13];
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = a1 + v2[14];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  *(_BYTE *)(a1 + v2[15]) = 2;
  *(_BYTE *)(a1 + v2[16]) = 2;
  *(_BYTE *)(a1 + v2[17]) = 2;
  *(_BYTE *)(a1 + v2[18]) = 2;
  return result;
}

uint64_t sub_1000A29BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000A29E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000E3768(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A2B60(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000A2CC8;
}

void sub_1000A2CC8(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000A29E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000A2CDC()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A2D00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000E3768(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000A2E30()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000A2E44(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass, (void (*)(uint64_t))sub_1000E3768, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*sub_1000A2E68(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000A2EF4;
}

void sub_1000A2EF4(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass, (void (*)(uint64_t))sub_1000E3768, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

BOOL sub_1000A2F10()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000A2F24()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass, (void (*)(uint64_t))sub_1000E3768, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000A2F48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v3 = sub_1000039AC(&qword_10036E4E0);
  __chkstk_darwin(v3);
  v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess(v6, v21, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E4E0);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[7];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[8];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1 + v7[9];
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = a1 + v7[10];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = a1 + v7[11];
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = a1 + v7[12];
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = a1 + v7[13];
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = a1 + v7[14];
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  *(_BYTE *)(a1 + v7[15]) = 2;
  *(_BYTE *)(a1 + v7[16]) = 2;
  *(_BYTE *)(a1 + v7[17]) = 2;
  *(_BYTE *)(a1 + v7[18]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036E4E0);
}

uint64_t sub_1000A3138(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E4E0);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000E3768(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E4E0);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E4E0);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A32B8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E4E0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E4E0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[7]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = &v9[v6[8]];
    *(_QWORD *)v15 = 0;
    v15[8] = 1;
    v16 = &v9[v6[9]];
    *(_QWORD *)v16 = 0;
    v16[8] = 1;
    v17 = &v9[v6[10]];
    *(_QWORD *)v17 = 0;
    v17[8] = 1;
    v18 = &v9[v6[11]];
    *(_QWORD *)v18 = 0;
    v18[8] = 1;
    v19 = &v9[v6[12]];
    *(_QWORD *)v19 = 0;
    v19[8] = 1;
    v20 = &v9[v6[13]];
    *(_QWORD *)v20 = 0;
    v20[8] = 1;
    v21 = &v9[v6[14]];
    *(_QWORD *)v21 = 0;
    v21[8] = 1;
    v9[v6[15]] = 2;
    v9[v6[16]] = 2;
    v9[v6[17]] = 2;
    v9[v6[18]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036E4E0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  }
  return sub_1000A34D0;
}

void sub_1000A34D0(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000A3138, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

BOOL sub_1000A34E4()
{
  return sub_10001CFF4(&qword_10036E4E0, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000A3508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E4E0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000E3768(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E4E0);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000A3638@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &qword_100394390, &qword_100394398, (uint64_t)sub_1000E36B0, a1);
}

uint64_t sub_1000A365C()
{
  return sub_100036594(&qword_100394390, &qword_100394398, (uint64_t)sub_1000E36B0);
}

uint64_t sub_1000A3678@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t sub_1000A3684(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A36A0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000A37F0()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A380C()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_1000A3828()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3834(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*sub_1000A3840(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A3898()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A38A4()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

double sub_1000A38B0()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A38BC(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*sub_1000A38C8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A3920()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A392C()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

double sub_1000A3938()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3944(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*sub_1000A3950(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A39A8()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A39B4()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A39C0()
{
  return sub_10001B080(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A39CC(char a1)
{
  return sub_10001B0B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t (*sub_1000A39D8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A3A20()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 36)) != 2;
}

uint64_t sub_1000A3A48()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000A3A6C()
{
  return sub_1000AAEE0(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3A78(char a1)
{
  return sub_1000AAF14(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t (*sub_1000A3A84(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A3ACC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 40)) != 2;
}

uint64_t sub_1000A3AF4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

uint64_t sub_1000A3B18()
{
  return sub_1000A3B24(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3B24(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 44)) & 1;
}

uint64_t sub_1000A3B4C(char a1)
{
  return sub_1000A3B58(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3B58(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_1000A3B84(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A3BCC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 44)) != 2;
}

uint64_t sub_1000A3BF4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000A3C18()
{
  return sub_1000A3C24(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3C24(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 48)) & 1;
}

uint64_t sub_1000A3C4C(char a1)
{
  return sub_1000A3C58(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A3C58(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_1000A3C84(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A3CCC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 48)) != 2;
}

uint64_t sub_1000A3CF4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_1000A3D18@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + v2[7];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1 + v2[8];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a1 + v2[9]) = 2;
  *(_BYTE *)(a1 + v2[10]) = 2;
  *(_BYTE *)(a1 + v2[11]) = 2;
  *(_BYTE *)(a1 + v2[12]) = 2;
  return result;
}

uint64_t sub_1000A3DD0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, a1);
}

uint64_t sub_1000A3DDC(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A3DF8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000A3F48()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A3F64()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A3F80()
{
  return sub_10002DF3C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t sub_1000A3F8C(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t (*sub_1000A3F98(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A3FE8()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t sub_1000A3FF4()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t sub_1000A4000@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_1000039AC(&qword_10036E4E8);
  __chkstk_darwin(v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10036E4E8);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[7];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[8];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  *(_BYTE *)(a1 + v7[9]) = 2;
  *(_BYTE *)(a1 + v7[10]) = 2;
  *(_BYTE *)(a1 + v7[11]) = 2;
  *(_BYTE *)(a1 + v7[12]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036E4E8);
}

uint64_t sub_1000A4168(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &qword_10036E4E8, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

void (*sub_1000A4184(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E4E8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E4E8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[7]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = &v9[v6[8]];
    *(_QWORD *)v15 = 0;
    v15[8] = 1;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036E4E8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  }
  return sub_1000A4324;
}

void sub_1000A4324(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E4E8, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

BOOL sub_1000A4338()
{
  return sub_10002D31C(&qword_10036E4E8, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A4354()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &qword_10036E4E8, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000A4370@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E588(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t sub_1000A4384@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t sub_1000A4390@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000A43B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010E490(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A4538(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000A46A0;
}

void sub_1000A46A0(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000A43B4, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000A46B4()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A46D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010E490(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_1000A480C()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

uint64_t sub_1000A4820(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg, a1);
}

void (*sub_1000A4844(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000A48D4;
}

void sub_1000A48D4(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

BOOL sub_1000A48F0()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

uint64_t sub_1000A4904()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

double sub_1000A4928()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

uint64_t sub_1000A493C(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg, a1);
}

void (*sub_1000A4960(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000A49F0;
}

void sub_1000A49F0(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

BOOL sub_1000A4A0C()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

uint64_t sub_1000A4A20()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

double sub_1000A4A44()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

uint64_t sub_1000A4A58(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM, a1);
}

void (*sub_1000A4A7C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000A4B0C;
}

void sub_1000A4B0C(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

BOOL sub_1000A4B28()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

uint64_t sub_1000A4B3C()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

double sub_1000A4B60()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

uint64_t sub_1000A4B74(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM, a1);
}

void (*sub_1000A4B98(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000A4C28;
}

void sub_1000A4C28(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

BOOL sub_1000A4C44()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

uint64_t sub_1000A4C58()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

double sub_1000A4C7C()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

uint64_t sub_1000A4C90(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM, a1);
}

void (*sub_1000A4CB4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000A4D44;
}

void sub_1000A4D44(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

BOOL sub_1000A4D60()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

uint64_t sub_1000A4D74()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

uint64_t sub_1000A4D98()
{
  return sub_10008D9F4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t sub_1000A4DAC(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

void (*sub_1000A4DD0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000A4E58;
}

void sub_1000A4E58(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

BOOL sub_1000A4E74()
{
  return sub_10008DB30(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t sub_1000A4E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010E490(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 3;
  return result;
}

double sub_1000A4F34()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

uint64_t sub_1000A4F48(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg, a1);
}

void (*sub_1000A4F6C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000A4FFC;
}

void sub_1000A4FFC(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

BOOL sub_1000A5018()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

uint64_t sub_1000A502C()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

double sub_1000A5050()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

uint64_t sub_1000A5064(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg, a1);
}

void (*sub_1000A5088(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000A5118;
}

void sub_1000A5118(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

BOOL sub_1000A5134()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

uint64_t sub_1000A5148()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

double sub_1000A516C()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

uint64_t sub_1000A5180(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM, a1);
}

void (*sub_1000A51A4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000A5234;
}

void sub_1000A5234(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

BOOL sub_1000A5250()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

uint64_t sub_1000A5264()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

uint64_t sub_1000A5288()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

uint64_t sub_1000A529C(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

void (*sub_1000A52C0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A5344;
}

void sub_1000A5344(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

BOOL sub_1000A5360()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

uint64_t sub_1000A5374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010E490(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

double sub_1000A5420()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

uint64_t sub_1000A5434(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg, a1);
}

void (*sub_1000A5458(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000A54E8;
}

void sub_1000A54E8(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

BOOL sub_1000A5504()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

uint64_t sub_1000A5518()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

double sub_1000A553C()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

uint64_t sub_1000A5550(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg, a1);
}

void (*sub_1000A5574(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000A5604;
}

void sub_1000A5604(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

BOOL sub_1000A5620()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

uint64_t sub_1000A5634()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

double sub_1000A5658()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

uint64_t sub_1000A566C(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM, a1);
}

void (*sub_1000A5690(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000A5720;
}

void sub_1000A5720(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

BOOL sub_1000A573C()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

uint64_t sub_1000A5750()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

double sub_1000A5774()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

uint64_t sub_1000A5788(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM, a1);
}

void (*sub_1000A57AC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000A583C;
}

void sub_1000A583C(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

BOOL sub_1000A5858()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

uint64_t sub_1000A586C()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10010E490, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

uint64_t sub_1000A5890@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &qword_1003943B8, &qword_1003943C0, (uint64_t)sub_1000E5934, a1);
}

uint64_t sub_1000A58B4()
{
  return sub_100036594(&qword_1003943B8, &qword_1003943C0, (uint64_t)sub_1000E5934);
}

uint64_t sub_1000A58D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, a1);
}

uint64_t sub_1000A58DC(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A58F8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000A5A48()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A5A64()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A5A80()
{
  return sub_10002DF3C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t sub_1000A5A8C(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t (*sub_1000A5A98(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A5AE8()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t sub_1000A5AF4()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t sub_1000A5B00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036E4F0);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10036E4F0);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_1003943B8 != -1)
    swift_once(&qword_1003943B8, sub_1000E5934);
  v9 = qword_1003943C0;
  *(_QWORD *)(a1 + v8) = qword_1003943C0;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_10036E4F0);
}

uint64_t sub_1000A5C18(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &qword_10036E4F0, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

void (*sub_1000A5C34(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E4F0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E4F0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_1003943B8 != -1)
      swift_once(&qword_1003943B8, sub_1000E5934);
    v12 = qword_1003943C0;
    *(_QWORD *)&v9[v11] = qword_1003943C0;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_10036E4F0);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  }
  return sub_1000A5D8C;
}

void sub_1000A5D8C(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E4F0, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

BOOL sub_1000A5DA0()
{
  return sub_10002D31C(&qword_10036E4F0, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t sub_1000A5DBC()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &qword_10036E4F0, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t sub_1000A5DD8@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E588(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a1);
}

uint64_t sub_1000A5DEC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a1);
}

uint64_t sub_1000A5DF8()
{
  return sub_100027F38(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5E04(uint64_t a1)
{
  return sub_100027F78(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t (*sub_1000A5E10(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A5E64()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5E70()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000A5E7C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5E88(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*sub_1000A5E94(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A5EEC()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5EF8()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000A5F04()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5F10(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*sub_1000A5F1C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A5F74()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5F80()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000A5F8C()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A5F98(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*sub_1000A5FA4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A5FFC()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A6008()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000A6014()
{
  return sub_10002A164(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A6020(double a1)
{
  return sub_10002A1A8(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*sub_1000A602C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A6084()
{
  return sub_10002A244(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000A6090()
{
  return sub_10002A280(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

int *sub_1000A609C@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + result[9];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_1000A6118@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0C4(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t sub_1000A6124(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A6140(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000A6290()
{
  return sub_1000198C8(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A62AC()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A62C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8688(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t sub_1000A62D4(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A62F0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000A6440()
{
  return sub_10002D31C(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A645C()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A6478()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32));
  if (v1 == 7)
    return 0;
  else
    return v1;
}

uint64_t sub_1000A64A0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000A64CC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A6518()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32)) != 7;
}

uint64_t sub_1000A6540()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 7;
  return result;
}

uint64_t sub_1000A6564()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36));
  if (v1 == 7)
    return 0;
  else
    return v1;
}

uint64_t sub_1000A658C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_1000A65B8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A6604()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36)) != 7;
}

uint64_t sub_1000A662C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 7;
  return result;
}

uint64_t sub_1000A6650@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t sub_1000A665C(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t (*sub_1000A6668())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000A6690(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149ED8();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000A66C8@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  *a1 = &_swiftEmptyArrayStorage;
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + v2[6];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v5)((char *)a1 + v2[7], 1, 1, v4);
  *((_BYTE *)a1 + v2[8]) = 7;
  *((_BYTE *)a1 + v2[9]) = 7;
  return result;
}

_UNKNOWN **sub_1000A6774()
{
  return &off_100354318;
}

void sub_1000A6780(_QWORD *a1@<X8>)
{
  *a1 = &off_100354318;
}

uint64_t sub_1000A6790@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8688(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t sub_1000A679C(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A67B8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000A6908()
{
  return sub_10002D31C(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A6924()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A6940@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A694C(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t sub_1000A694C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  sub_10000E660(v2 + *(int *)(v8 + 32), (uint64_t)v7, &qword_10036E458);
  v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return sub_100003E08((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  UnknownStorage.init()();
  v10 = a2 + v9[5];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a2 + v9[6];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v9[7];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  return sub_100015704((uint64_t)v7, &qword_10036E458);
}

uint64_t sub_1000A6A68(uint64_t a1)
{
  return sub_100034398(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A6A84(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000A6BD4()
{
  return sub_10002E3A0(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A6BF0()
{
  return sub_10002E478(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A6C0C()
{
  return sub_1000B4FE0(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6C18(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t (*sub_1000A6C24(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A6C74()
{
  return sub_10002822C(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6C80()
{
  return sub_100028268(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6C8C()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                                   + 40));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t sub_1000A6CB4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1000A6CE0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 40);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A6D2C()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 40)) != 5;
}

uint64_t sub_1000A6D54()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 5;
  return result;
}

uint64_t sub_1000A6D78()
{
  return sub_1000A6D84(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6D84(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 44));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t sub_1000A6DB8(int a1)
{
  return sub_1000A6DC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6DC4(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 44);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000A6DF8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A6E48()
{
  return sub_100033824(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6E54()
{
  return sub_100033860(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6E60()
{
  return sub_1000A3C24(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A6E6C(char a1)
{
  return sub_1000A3C58(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t (*sub_1000A6E78(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A6EC0()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 48)) != 2;
}

uint64_t sub_1000A6EE8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_1000A6F0C()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 52)) & 1;
}

uint64_t sub_1000A6F30(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = a1 & 1;
  result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = v2;
  return result;
}

uint64_t (*sub_1000A6F5C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 52);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A6FA4()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 52)) != 2;
}

uint64_t sub_1000A6FCC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(_BYTE *)(v0 + *(int *)(result + 52)) = 2;
  return result;
}

uint64_t sub_1000A6FF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A6FFC(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t sub_1000A6FFC@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 24);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000A7048(uint64_t a1)
{
  return sub_1000A7054(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000A7054(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 24);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_1000A709C())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000A70C4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149E94();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000A70FC(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (a1)
    return v1;
  else
    return 0;
}

uint64_t sub_1000A7114(char a1)
{
  return a1 & 1;
}

BOOL sub_1000A711C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000A7134(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149E50();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000A716C@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

_QWORD *sub_1000A7188@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_1000A71A8@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char *v7;
  char *v8;

  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + v2[7];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v5)((char *)a1 + v2[8], 1, 1, v4);
  v7 = (char *)a1 + v2[9];
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  *((_BYTE *)a1 + v2[10]) = 5;
  v8 = (char *)a1 + v2[11];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  *((_BYTE *)a1 + v2[12]) = 2;
  *((_BYTE *)a1 + v2[13]) = 2;
  return result;
}

_UNKNOWN **sub_1000A7284()
{
  return &off_100354340;
}

void sub_1000A7290(_QWORD *a1@<X8>)
{
  *a1 = &off_100354368;
}

_UNKNOWN **sub_1000A72A0()
{
  return &off_100354390;
}

void sub_1000A72AC(_QWORD *a1@<X8>)
{
  *a1 = &off_1003543B8;
}

uint64_t sub_1000A72BC()
{
  return sub_1000BB87C(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000A72C8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000A72F4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A7340()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 20)) != 5;
}

uint64_t sub_1000A7368()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 5;
  return result;
}

uint64_t sub_1000A738C()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t sub_1000A73B4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000A73E0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A742C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24)) != 5;
}

uint64_t sub_1000A7454()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t sub_1000A7478()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000A7484(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t (*sub_1000A7490(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A74D8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 28)) != 2;
}

uint64_t sub_1000A7500()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000A7524()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000A7530(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t (*sub_1000A753C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A7584()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 32)) != 2;
}

uint64_t sub_1000A75AC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_1000A75D0@<X0>(uint64_t a1@<X8>)
{
  int *result;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(_BYTE *)(a1 + result[5]) = 5;
  *(_BYTE *)(a1 + result[6]) = 5;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  return result;
}

double sub_1000A7620()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 20);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return -1.0;
  return result;
}

uint64_t sub_1000A7654(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_Battery, a1);
}

uint64_t (*sub_1000A7660(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = -1.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000A76B8()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A76C4()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A76D0()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A76DC(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*sub_1000A76E8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A7730()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 24)) != 2;
}

uint64_t sub_1000A7758()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000A777C()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A7788(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*sub_1000A7794(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A77DC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 28)) != 2;
}

uint64_t sub_1000A7804()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000A7828()
{
  return sub_1000A7834(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A7834(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 32));
  if (v2 == 5)
    return 0;
  else
    return v2;
}

uint64_t sub_1000A7860(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000A788C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A78D8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 32)) != 5;
}

uint64_t sub_1000A7900()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 5;
  return result;
}

uint64_t sub_1000A7924()
{
  return sub_10001B080(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A7930(char a1)
{
  return sub_10001B0B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*sub_1000A793C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A7984()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 36)) != 2;
}

uint64_t sub_1000A79AC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000A79D0()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 40));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t sub_1000A7A00(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v4 = v1 + *(int *)(result + 40);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000A7A34(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A7A84()
{
  return sub_1000336EC(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A7A90()
{
  return sub_100033728(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

int *sub_1000A7A9C@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 5;
  *(_BYTE *)(a1 + result[9]) = 2;
  v4 = a1 + result[10];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  return result;
}

uint64_t sub_1000A7B10@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000A7B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010EB54(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A7CB8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000A7E20;
}

void sub_1000A7E20(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000A7B34, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000A7E34()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A7E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010EB54(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000A7F8C()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000A7FA0(int a1)
{
  return sub_10008D18C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*sub_1000A7FC4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000A8050;
}

void sub_1000A8050(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

BOOL sub_1000A806C()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000A8080()
{
  return sub_10008D428(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000A80A4()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess(v1, v3, 0, 0);
  if (*v1 == 20)
    return 0;
  else
    return *v1;
}

uint64_t sub_1000A8100(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
}

void (*sub_1000A8124(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 20)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000A81AC;
}

void sub_1000A81AC(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
}

BOOL sub_1000A81C8()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess(v1, v3, 0, 0);
  return *v1 != 20;
}

uint64_t sub_1000A8224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010EB54(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 20;
  return result;
}

uint64_t sub_1000A82D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _BYTE v10[24];

  v3 = sub_1000039AC(&qword_10036E4F8);
  __chkstk_darwin(v3);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess(v6, v10, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E4F8);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 5;
  *(_BYTE *)(a1 + v7[6]) = 5;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036E4F8);
}

uint64_t sub_1000A83FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E4F8);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010EB54(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E4F8);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E4F8);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A8580(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E4F8);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E4F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v9[v6[6]] = 5;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036E4F8);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  }
  return sub_1000A86DC;
}

void sub_1000A86DC(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000A83FC, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

BOOL sub_1000A86F0()
{
  return sub_10001CFF4(&qword_10036E4F8, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000A8714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E4F8);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010EB54(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E4F8);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000A8848@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036E500);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E500);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a1 + v7[6]) = 2;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 5;
  *(_BYTE *)(a1 + v7[9]) = 2;
  v9 = a1 + v7[10];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036E500);
}

uint64_t sub_1000A8998(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E500);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010EB54(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E500);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E500);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000A8B1C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E500);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E500);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 5;
    v9[v6[9]] = 2;
    v12 = &v9[v6[10]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E500);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  }
  return sub_1000A8C9C;
}

void sub_1000A8C9C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000A8998, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

BOOL sub_1000A8CB0()
{
  return sub_10001CFF4(&qword_10036E500, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000A8CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E500);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010EB54(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E500);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000A8E08()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

uint64_t sub_1000A8E1C(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

void (*sub_1000A8E40(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A8EC4;
}

void sub_1000A8EC4(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

BOOL sub_1000A8EE0()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

uint64_t sub_1000A8EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010EB54(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000A8FA0()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

uint64_t sub_1000A8FB4(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

void (*sub_1000A8FD8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A905C;
}

void sub_1000A905C(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

BOOL sub_1000A9078()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

uint64_t sub_1000A908C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010EB54(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000A9138()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

uint64_t sub_1000A914C(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

void (*sub_1000A9170(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A91F4;
}

void sub_1000A91F4(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

BOOL sub_1000A9210()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

uint64_t sub_1000A9224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010EB54(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000A92D0()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

uint64_t sub_1000A92E4(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

void (*sub_1000A9308(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A938C;
}

void sub_1000A938C(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

BOOL sub_1000A93A8()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

uint64_t sub_1000A93BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010EB54(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000A9468()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

uint64_t sub_1000A947C(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

void (*sub_1000A94A0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A9524;
}

void sub_1000A9524(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

BOOL sub_1000A9540()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

uint64_t sub_1000A9554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010EB54(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000A9600()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

uint64_t sub_1000A9614(int a1)
{
  return sub_10008D18C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

void (*sub_1000A9638(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000A96C4;
}

void sub_1000A96C4(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

BOOL sub_1000A96E0()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

uint64_t sub_1000A96F4()
{
  return sub_10008D428(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

uint64_t sub_1000A9718()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

uint64_t sub_1000A972C(int a1)
{
  return sub_10008D18C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

void (*sub_1000A9750(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000A97DC;
}

void sub_1000A97DC(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

BOOL sub_1000A97F8()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

uint64_t sub_1000A980C()
{
  return sub_10008D428(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

uint64_t sub_1000A9830()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

uint64_t sub_1000A9844(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

void (*sub_1000A9868(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000A98EC;
}

void sub_1000A98EC(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10010EB54, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

BOOL sub_1000A9908()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

uint64_t sub_1000A991C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010EB54(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000A99CC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149E0C();
  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_1000A9A04@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10010F17C(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000A9A28@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10010F17C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A9A50@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &qword_100394418, &qword_100394420, (uint64_t)sub_1000EA8F0, a1);
}

uint64_t sub_1000A9A74()
{
  return sub_100036594(&qword_100394418, &qword_100394420, (uint64_t)sub_1000EA8F0);
}

_UNKNOWN **sub_1000A9A90()
{
  return &off_1003543E0;
}

void sub_1000A9A9C(_QWORD *a1@<X8>)
{
  *a1 = &off_1003543E0;
}

uint64_t sub_1000A9AAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, a1);
}

uint64_t sub_1000A9AB8(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000A9AD4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000A9C24()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A9C40()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000A9C5C()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24));
  if (v1 == 8)
    return 0;
  else
    return v1;
}

uint64_t sub_1000A9C84(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000A9CB0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A9CFC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24)) != 8;
}

uint64_t sub_1000A9D24()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 8;
  return result;
}

uint64_t sub_1000A9D48()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28));
  if (v1 == 8)
    return 0;
  else
    return v1;
}

uint64_t sub_1000A9D70(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000A9D9C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000A9DE8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28)) != 8;
}

uint64_t sub_1000A9E10()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 8;
  return result;
}

uint64_t sub_1000A9E34()
{
  return sub_1000A9E40(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_1000A9E40(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 32));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t sub_1000A9E74(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_1000A9E80(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 32);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000A9EB4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000A9F04()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_1000A9F10()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_1000A9F1C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149DC8();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000A9F54@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10010F1A0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A9F78@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10010F1A0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A9FA0@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(a1 + v2[6]) = 8;
  *(_BYTE *)(a1 + v2[7]) = 8;
  v6 = a1 + v2[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

_UNKNOWN **sub_1000AA028()
{
  return &off_100354418;
}

void sub_1000AA034(_QWORD *a1@<X8>)
{
  *a1 = &off_100354418;
}

uint64_t sub_1000AA044()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20));
  if (v1 == 8)
    return 0;
  else
    return v1;
}

uint64_t sub_1000AA06C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000AA098(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000AA0E4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20)) != 8;
}

uint64_t sub_1000AA10C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 8;
  return result;
}

uint64_t sub_1000AA130()
{
  return sub_1000B7A54(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t sub_1000AA13C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000AA168(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000AA1B4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 24)) != 4;
}

uint64_t sub_1000AA1DC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_1000AA200@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA214(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, 8, 4, a1);
}

uint64_t sub_1000AA214@<X0>(uint64_t (*a1)(_QWORD)@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;

  UnknownStorage.init()();
  result = a1(0);
  *(_BYTE *)(a4 + *(int *)(result + 20)) = a2;
  *(_BYTE *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t sub_1000AA260@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t sub_1000AA26C(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000AA288(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000AA3D8()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AA3F4()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float sub_1000AA410()
{
  return sub_100027688(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA41C(float a1)
{
  return sub_1000276CC(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*sub_1000AA428(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000AA480()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA48C()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

float sub_1000AA498()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA4A4(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*sub_1000AA4B0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000AA508()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA514()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

float sub_1000AA520()
{
  return sub_10002CC70(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA52C(float a1)
{
  return sub_10002CCB4(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*sub_1000AA538(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000AA590()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA59C()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000AA5A8@<X0>(uint64_t a1@<X8>)
{
  return sub_10008AA90(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t sub_1000AA5B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0C4(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t sub_1000AA5C0(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000AA5DC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000AA72C()
{
  return sub_1000198C8(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AA748()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AA764@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t sub_1000AA770(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t (*sub_1000AA77C())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000AA7A4@<X0>(_QWORD *a1@<X8>)
{
  return sub_10008AD24(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t sub_1000AA7B0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_Reset, a1);
}

uint64_t sub_1000AA7BC(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_Reset, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000AA7D8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Reset(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000AA928()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AA944()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_Reset, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AA960@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA974(type metadata accessor for CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000AA974@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v6 = a3 + *(int *)(a1(0) + 20);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

double sub_1000AA9D4()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AA9E0(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*sub_1000AA9EC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000AAA44()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AAA50()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

double sub_1000AAA5C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AAA68(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*sub_1000AAA74(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000AAACC()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AAAD8()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

double sub_1000AAAE4()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AAAF0(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*sub_1000AAAFC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000AAB54()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AAB60()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

int *sub_1000AAB6C@<X0>(uint64_t a1@<X8>)
{
  return sub_10002EB04(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t sub_1000AAB78()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AAB84(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AAB90(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000AABD8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 20)) != 2;
}

uint64_t sub_1000AAC00()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_1000AAC24()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AAC30(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AAC3C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000AAC84()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 24)) != 2;
}

uint64_t sub_1000AACAC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000AACD0()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AACDC(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AACE8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000AAD30()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 28)) != 2;
}

uint64_t sub_1000AAD58()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000AAD7C()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AAD88(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AAD94(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000AADDC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 32)) != 2;
}

uint64_t sub_1000AAE04()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_1000AAE28()
{
  return sub_10001B080(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AAE34(char a1)
{
  return sub_10001B0B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AAE40(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000AAE88()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 36)) != 2;
}

uint64_t sub_1000AAEB0()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000AAED4()
{
  return sub_1000AAEE0(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AAEE0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 40)) & 1;
}

uint64_t sub_1000AAF08(char a1)
{
  return sub_1000AAF14(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AAF14(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1000AAF40(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000AAF88()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 40)) != 2;
}

uint64_t sub_1000AAFB0()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

uint64_t sub_1000AAFD4()
{
  return sub_1000A3B24(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AAFE0(char a1)
{
  return sub_1000A3B58(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AAFEC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000AB034()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 44)) != 2;
}

uint64_t sub_1000AB05C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000AB080()
{
  return sub_1000A3C24(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AB08C(char a1)
{
  return sub_1000A3C58(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000AB098(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000AB0E0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 48)) != 2;
}

uint64_t sub_1000AB108()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

int *sub_1000AB12C@<X0>(uint64_t a1@<X8>)
{
  int *result;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  *(_BYTE *)(a1 + result[9]) = 2;
  *(_BYTE *)(a1 + result[10]) = 2;
  *(_BYTE *)(a1 + result[11]) = 2;
  *(_BYTE *)(a1 + result[12]) = 2;
  return result;
}

uint64_t sub_1000AB198@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000AB1BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000EFA28(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000AB33C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000AB4A4;
}

void sub_1000AB4A4(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000AB1BC, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000AB4B8()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AB4DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000EFA28(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000AB60C@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000AB630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000EFA28(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000AB7B0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000AB918;
}

void sub_1000AB918(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000AB630, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000AB92C()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AB950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000EFA28(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000ABA80@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000ABAA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000EFA28(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000ABC24(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000ABD8C;
}

void sub_1000ABD8C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000ABAA4, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000ABDA0()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000ABDC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000EFA28(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000ABEF4()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

uint64_t sub_1000ABF08(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

void (*sub_1000ABF2C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ABFB8;
}

void sub_1000ABFB8(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

BOOL sub_1000ABFD4()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

uint64_t sub_1000ABFE8()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

double sub_1000AC00C()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

uint64_t sub_1000AC020(double a1)
{
  return sub_1000AC044(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM, a1);
}

uint64_t sub_1000AC044(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4, double a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _BYTE v19[24];

  v9 = v5;
  v11 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v5 + v11);
    v13 = a2(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    a3(v15);
    v16 = *(_QWORD *)(v9 + v11);
    *(_QWORD *)(v9 + v11) = v14;
    swift_release(v16);
  }
  v17 = *(_QWORD *)(v9 + v11) + *a4;
  result = swift_beginAccess(v17, v19, 1, 0);
  *(double *)v17 = a5;
  *(_BYTE *)(v17 + 8) = 0;
  return result;
}

void (*sub_1000AC10C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000AC19C;
}

void sub_1000AC19C(uint64_t *a1, char a2)
{
  sub_1000AC1B8(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

void sub_1000AC1B8(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v13 = *(int *)(v9 + 88);
    v14 = *(_QWORD *)(v9 + 80);
    v15 = *(_QWORD *)(v14 + v13);
    v16 = a3(0);
    v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v18 = swift_retain(v15);
    a4(v18);
    v19 = *(_QWORD *)(v14 + v13);
    *(_QWORD *)(v14 + v13) = v17;
    swift_release(v19);
  }
LABEL_4:
  v20 = *(_QWORD *)(*(_QWORD *)(v9 + 80) + *(int *)(v9 + 88)) + *a5;
  swift_beginAccess(v20, v12, 1, 0);
  *(_QWORD *)v20 = v10;
  *(_BYTE *)(v20 + 8) = 0;
  free((void *)v9);
}

BOOL sub_1000AC2A4()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

uint64_t sub_1000AC2B8()
{
  return sub_100024EAC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

double sub_1000AC2DC()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

uint64_t sub_1000AC2F0(double a1)
{
  return sub_1000AC044(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM, a1);
}

void (*sub_1000AC314(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000AC3A4;
}

void sub_1000AC3A4(uint64_t *a1, char a2)
{
  sub_1000AC1B8(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

BOOL sub_1000AC3C0()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

uint64_t sub_1000AC3D4()
{
  return sub_100024EAC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

uint64_t sub_1000AC3F8()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

uint64_t sub_1000AC40C(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

void (*sub_1000AC430(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000AC4BC;
}

void sub_1000AC4BC(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

BOOL sub_1000AC4D8()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

uint64_t sub_1000AC4EC()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

uint64_t sub_1000AC510()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

uint64_t sub_1000AC524(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

void (*sub_1000AC548(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000AC5D4;
}

void sub_1000AC5D4(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

BOOL sub_1000AC5F0()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

uint64_t sub_1000AC604()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

double sub_1000AC628()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

uint64_t sub_1000AC63C(double a1)
{
  return sub_1000AC044(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm, a1);
}

void (*sub_1000AC660(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000AC6F0;
}

void sub_1000AC6F0(uint64_t *a1, char a2)
{
  sub_1000AC1B8(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

BOOL sub_1000AC70C()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

uint64_t sub_1000AC720()
{
  return sub_100024EAC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

double sub_1000AC744()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

uint64_t sub_1000AC758(double a1)
{
  return sub_1000AC044(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence, a1);
}

void (*sub_1000AC77C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000AC80C;
}

void sub_1000AC80C(uint64_t *a1, char a2)
{
  sub_1000AC1B8(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

BOOL sub_1000AC828()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

uint64_t sub_1000AC83C()
{
  return sub_100024EAC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

double sub_1000AC860()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

uint64_t sub_1000AC874(double a1)
{
  return sub_1000AC044(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime, a1);
}

void (*sub_1000AC898(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000AC928;
}

void sub_1000AC928(uint64_t *a1, char a2)
{
  sub_1000AC1B8(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

BOOL sub_1000AC944()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

uint64_t sub_1000AC958()
{
  return sub_100024EAC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

uint64_t sub_1000AC97C()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

uint64_t sub_1000AC990(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

void (*sub_1000AC9B4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ACA40;
}

void sub_1000ACA40(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

BOOL sub_1000ACA5C()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

uint64_t sub_1000ACA70()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

uint64_t sub_1000ACA94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v1 = (uint64_t *)(*(_QWORD *)(v0
                             + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess(v1, v5, 0, 0);
  v2 = v1[1];
  if (v2)
    v3 = *v1;
  else
    v3 = 0;
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_1000ACB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[24];

  v3 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_1000EFA28(v10);
    v11 = *(_QWORD *)(v3 + v6);
    *(_QWORD *)(v3 + v6) = v9;
    swift_release(v11);
  }
  v12 = (_QWORD *)(*(_QWORD *)(v3 + v6)
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess(v12, v15, 1, 0);
  v13 = v12[1];
  *v12 = a1;
  v12[1] = a2;
  return swift_bridgeObjectRelease(v13);
}

void (*sub_1000ACBC8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = v5[1];
  if (v6)
  {
    v7 = *v5;
    v8 = v5[1];
  }
  else
  {
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  v3[9] = v7;
  v3[10] = v8;
  swift_bridgeObjectRetain(v6);
  return sub_1000ACC6C;
}

void sub_1000ACC6C(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(int *)(*a1 + 96);
  v5 = *(_QWORD *)(*a1 + 80);
  v6 = *(_QWORD *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(*a1 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v6 + v4)) & 1) == 0)
    {
      v7 = *(int *)(v2 + 96);
      v8 = *(_QWORD *)(v2 + 88);
      v9 = *(_QWORD *)(v8 + v7);
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
      v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      v12 = swift_retain(v9);
      sub_1000EFA28(v12);
      v13 = *(_QWORD *)(v8 + v7);
      *(_QWORD *)(v8 + v7) = v11;
      swift_release(v13);
    }
    v14 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96))
                   + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
    swift_beginAccess(v14, v2 + 24, 1, 0);
    v15 = v14[1];
    *v14 = v3;
    v14[1] = v5;
    swift_bridgeObjectRelease(v15);
    v16 = *(_QWORD *)(v2 + 80);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v6 + v4)) & 1) == 0)
    {
      v17 = *(int *)(v2 + 96);
      v18 = *(_QWORD *)(v2 + 88);
      v19 = *(_QWORD *)(v18 + v17);
      v20 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
      v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      v22 = swift_retain(v19);
      sub_1000EFA28(v22);
      v23 = *(_QWORD *)(v18 + v17);
      *(_QWORD *)(v18 + v17) = v21;
      swift_release(v23);
    }
    v24 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96))
                   + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
    swift_beginAccess(v24, v2 + 48, 1, 0);
    v16 = v24[1];
    *v24 = v3;
    v24[1] = v5;
  }
  swift_bridgeObjectRelease(v16);
  free((void *)v2);
}

BOOL sub_1000ACDD8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID;
  swift_beginAccess(v1, v3, 0, 0);
  return *(_QWORD *)(v1 + 8) != 0;
}

uint64_t sub_1000ACE34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000EFA28(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_QWORD *)(*(_QWORD *)(v1 + v2)
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess(v8, v11, 1, 0);
  v9 = v8[1];
  *v8 = 0;
  v8[1] = 0;
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_1000ACEE0()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t sub_1000ACEF4(char a1)
{
  return sub_1000ACF18(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t sub_1000ACF18(char a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t result;
  _BYTE v19[24];

  v9 = v5;
  v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v5 + v11);
    v13 = a3(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    a4(v15);
    v16 = *(_QWORD *)(v9 + v11);
    *(_QWORD *)(v9 + v11) = v14;
    swift_release(v16);
  }
  v17 = (_BYTE *)(*(_QWORD *)(v9 + v11) + *a5);
  result = swift_beginAccess(v17, v19, 1, 0);
  *v17 = a1 & 1;
  return result;
}

void (*sub_1000ACFDC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000AD060;
}

void sub_1000AD060(uint64_t *a1, char a2)
{
  sub_1000AD07C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

void sub_1000AD07C(uint64_t *a1, char a2, uint64_t (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;

  v9 = *a1;
  v10 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v12 = v9 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = v9 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v13 = *(int *)(v9 + 80);
    v14 = *(_QWORD *)(v9 + 72);
    v15 = *(_QWORD *)(v14 + v13);
    v16 = a3(0);
    v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v18 = swift_retain(v15);
    a4(v18);
    v19 = *(_QWORD *)(v14 + v13);
    *(_QWORD *)(v14 + v13) = v17;
    swift_release(v19);
  }
LABEL_4:
  v20 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess(v20, v12, 1, 0);
  *v20 = v10;
  free((void *)v9);
}

BOOL sub_1000AD160()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t sub_1000AD174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000EFA28(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000AD21C()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

uint64_t sub_1000AD230(char a1)
{
  return sub_1000ACF18(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

void (*sub_1000AD254(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000AD2D8;
}

void sub_1000AD2D8(uint64_t *a1, char a2)
{
  sub_1000AD07C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

BOOL sub_1000AD2F4()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

uint64_t sub_1000AD308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000EFA28(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000AD3B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E508, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t sub_1000AD3D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E508);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000EFA28(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E508);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E508);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000AD554(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E508);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E508);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E508);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  }
  return sub_1000AD6BC;
}

void sub_1000AD6BC(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000AD3D4, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

BOOL sub_1000AD6D0()
{
  return sub_10001CFF4(&qword_10036E508, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000AD6F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E508);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000EFA28(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E508);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000AD824()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

uint64_t sub_1000AD838(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

void (*sub_1000AD85C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000AD8E8;
}

void sub_1000AD8E8(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

BOOL sub_1000AD904()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

uint64_t sub_1000AD918()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

uint64_t sub_1000AD93C()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

uint64_t sub_1000AD950(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

void (*sub_1000AD974(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ADA00;
}

void sub_1000ADA00(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

BOOL sub_1000ADA1C()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

uint64_t sub_1000ADA30()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

uint64_t sub_1000ADA54()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

uint64_t sub_1000ADA68(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

void (*sub_1000ADA8C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ADB18;
}

void sub_1000ADB18(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

BOOL sub_1000ADB34()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

uint64_t sub_1000ADB48()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

uint64_t sub_1000ADB6C()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

uint64_t sub_1000ADB80(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

void (*sub_1000ADBA4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ADC30;
}

void sub_1000ADC30(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

BOOL sub_1000ADC4C()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

uint64_t sub_1000ADC60()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

uint64_t sub_1000ADC84()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

uint64_t sub_1000ADC98(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

void (*sub_1000ADCBC(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ADD48;
}

void sub_1000ADD48(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

BOOL sub_1000ADD64()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

uint64_t sub_1000ADD78()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

uint64_t sub_1000ADD9C()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

uint64_t sub_1000ADDB0(int a1)
{
  return sub_10009FDC4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

void (*sub_1000ADDD4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000ADE60;
}

void sub_1000ADE60(uint64_t *a1, char a2)
{
  sub_100023898(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

BOOL sub_1000ADE7C()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

uint64_t sub_1000ADE90()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

uint64_t sub_1000ADEB4()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess(v1, v3, 0, 0);
  if (*v1 == 6)
    return 0;
  else
    return *v1;
}

uint64_t sub_1000ADF10(char a1)
{
  return sub_100023104(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
}

void (*sub_1000ADF34(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 6)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000ADFBC;
}

void sub_1000ADFBC(uint64_t *a1, char a2)
{
  sub_100023268(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_1000EFA28, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
}

BOOL sub_1000ADFD8()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess(v1, v3, 0, 0);
  return *v1 != 6;
}

uint64_t sub_1000AE034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000EFA28(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 6;
  return result;
}

uint64_t sub_1000AE0DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _BYTE v10[24];

  v3 = sub_1000039AC(&qword_10036E510);
  __chkstk_darwin(v3);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess(v6, v10, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E510);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  *(_BYTE *)(a1 + v7[6]) = 2;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  *(_BYTE *)(a1 + v7[9]) = 2;
  *(_BYTE *)(a1 + v7[10]) = 2;
  *(_BYTE *)(a1 + v7[11]) = 2;
  *(_BYTE *)(a1 + v7[12]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036E510);
}

uint64_t sub_1000AE224(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E510);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000EFA28(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E510);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E510);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000AE3A4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E510);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E510);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036E510);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  }
  return sub_1000AE51C;
}

void sub_1000AE51C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000AE224, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

BOOL sub_1000AE530()
{
  return sub_10001CFF4(&qword_10036E510, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000AE554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E510);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000EFA28(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E510);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000AE684(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149D84();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000AE6BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_100394478, &qword_100394480, (uint64_t)sub_1000EF7A8, a1);
}

uint64_t sub_1000AE6E0()
{
  return sub_100036594(&qword_100394478, &qword_100394480, (uint64_t)sub_1000EF7A8);
}

_UNKNOWN **sub_1000AE6FC()
{
  return &off_100354440;
}

void sub_1000AE708(_QWORD *a1@<X8>)
{
  *a1 = &off_100354440;
}

uint64_t sub_1000AE718@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, a1);
}

uint64_t sub_1000AE724(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000AE740(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000AE890()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AE8AC()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000AE8C8()
{
  return sub_10002DF3C(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t sub_1000AE8D4(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t (*sub_1000AE8E0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000AE930()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t sub_1000AE93C()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t sub_1000AE948@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036E518);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10036E518);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_100394478 != -1)
    swift_once(&qword_100394478, sub_1000EF7A8);
  v9 = qword_100394480;
  *(_QWORD *)(a1 + v8) = qword_100394480;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_10036E518);
}

uint64_t sub_1000AEA60(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &qword_10036E518, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

void (*sub_1000AEA7C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E518);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E518);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_100394478 != -1)
      swift_once(&qword_100394478, sub_1000EF7A8);
    v12 = qword_100394480;
    *(_QWORD *)&v9[v11] = qword_100394480;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_10036E518);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  }
  return sub_1000AEBD4;
}

void sub_1000AEBD4(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E518, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

BOOL sub_1000AEBE8()
{
  return sub_10002D31C(&qword_10036E518, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t sub_1000AEC04()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &qword_10036E518, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t sub_1000AEC20@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E588(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a1);
}

uint64_t sub_1000AEC34@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a1);
}

float sub_1000AEC40()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 20);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t sub_1000AEC74(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v4 = v1 + *(int *)(result + 20);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000AECA8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 20);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000AED00()
{
  return sub_100019258(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AED0C()
{
  return sub_100019294(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

float sub_1000AED18()
{
  return sub_100027688(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AED24(float a1)
{
  return sub_1000276CC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, a1);
}

uint64_t (*sub_1000AED30(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000AED88()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AED94()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

float sub_1000AEDA0()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AEDAC(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, a1);
}

uint64_t (*sub_1000AEDB8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000AEE10()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AEE1C()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

int *sub_1000AEE28@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

double sub_1000AEE84()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AEE90(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*sub_1000AEE9C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000AEEF4()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AEF00()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

double sub_1000AEF0C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AEF18(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*sub_1000AEF24(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000AEF7C()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AEF88()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

double sub_1000AEF94()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AEFA0(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*sub_1000AEFAC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000AF004()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AF010()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

double sub_1000AF01C()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AF028(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*sub_1000AF034(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000AF08C()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000AF098()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

int *sub_1000AF0A4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF0B0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

int *sub_1000AF0B0@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)a1(0);
  v5 = a2 + result[5];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + result[6];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + result[7];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a2 + result[8];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  return result;
}

uint64_t sub_1000AF120@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B21BC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, a1);
}

uint64_t sub_1000AF134(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E520);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000F477C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E520);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E520);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000AF2B4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E520);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E520);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E520);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return sub_1000AF41C;
}

void sub_1000AF41C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000AF134, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

BOOL sub_1000AF430()
{
  return sub_10001CFF4(&qword_10036E520, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AF454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000F477C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E520);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000AF584@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B21BC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, a1);
}

uint64_t sub_1000AF598(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E520);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000F477C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E520);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E520);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000AF718(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E520);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E520);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E520);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return sub_1000AF880;
}

void sub_1000AF880(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000AF598, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

BOOL sub_1000AF894()
{
  return sub_10001CFF4(&qword_10036E520, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000AF8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000F477C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E520);
  swift_endAccess(v16);
  return swift_release(v11);
}

float sub_1000AF9E8()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

uint64_t sub_1000AF9FC(float a1)
{
  return sub_1000AFAFC(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading, a1);
}

void (*sub_1000AFA08(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000AFA98;
}

void sub_1000AFA98(uint64_t *a1, char a2)
{
  sub_1000AFC54(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

BOOL sub_1000AFAA4()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

uint64_t sub_1000AFAB8()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_1000F477C, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

float sub_1000AFADC()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

uint64_t sub_1000AFAF0(float a1)
{
  return sub_1000AFAFC(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading, a1);
}

uint64_t sub_1000AFAFC(_QWORD *a1, float a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[24];

  v4 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + v6)) & 1) == 0)
  {
    v7 = *(_QWORD *)(v2 + v6);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v10 = swift_retain(v7);
    sub_1000F477C(v10);
    v11 = *(_QWORD *)(v4 + v6);
    *(_QWORD *)(v4 + v6) = v9;
    swift_release(v11);
  }
  v12 = *(_QWORD *)(v4 + v6) + *a1;
  result = swift_beginAccess(v12, v14, 1, 0);
  *(float *)v12 = a2;
  *(_BYTE *)(v12 + 4) = 0;
  return result;
}

void (*sub_1000AFBB8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000AFC48;
}

void sub_1000AFC48(uint64_t *a1, char a2)
{
  sub_1000AFC54(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

void sub_1000AFC54(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v9 = *(int *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 72);
    v11 = *(_QWORD *)(v10 + v9);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000F477C(v14);
    v15 = *(_QWORD *)(v10 + v9);
    *(_QWORD *)(v10 + v9) = v13;
    swift_release(v15);
  }
LABEL_4:
  v16 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess(v16, v8, 1, 0);
  *(_DWORD *)v16 = v6;
  *(_BYTE *)(v16 + 4) = 0;
  free((void *)v5);
}

BOOL sub_1000AFD34()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

uint64_t sub_1000AFD48()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_1000F477C, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

float sub_1000AFD6C()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

uint64_t sub_1000AFD80(float a1)
{
  return sub_1000AFAFC(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy, a1);
}

void (*sub_1000AFD8C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000AFE1C;
}

void sub_1000AFE1C(uint64_t *a1, char a2)
{
  sub_1000AFC54(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

BOOL sub_1000AFE28()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

uint64_t sub_1000AFE3C()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_1000F477C, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

uint64_t sub_1000AFE60()
{
  return sub_1000AFE74(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

uint64_t sub_1000AFE74(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _BYTE v5[24];

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0, 0);
  if (*v3 == 8)
    return 0;
  else
    return *v3;
}

uint64_t sub_1000AFED4(char a1)
{
  return sub_100023104(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_1000F477C, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

void (*sub_1000AFEF8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 8)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000AFF80;
}

void sub_1000AFF80(uint64_t *a1, char a2)
{
  sub_100023268(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_1000F477C, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

BOOL sub_1000AFF9C()
{
  return sub_1000AFFB0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

BOOL sub_1000AFFB0(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _BYTE v5[24];

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess(v3, v5, 0, 0);
  return *v3 != 8;
}

uint64_t sub_1000B0010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000F477C(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 8;
  return result;
}

uint64_t sub_1000B00B8()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

uint64_t sub_1000B00CC(char a1)
{
  return sub_1000ACF18(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_1000F477C, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

void (*sub_1000B00F0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B0174;
}

void sub_1000B0174(uint64_t *a1, char a2)
{
  sub_1000AD07C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_1000F477C, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

BOOL sub_1000B0190()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

uint64_t sub_1000B01A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_1000F477C(v6);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

float sub_1000B024C()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

uint64_t sub_1000B0260(float a1)
{
  return sub_1000AFAFC(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude, a1);
}

void (*sub_1000B026C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000B02FC;
}

void sub_1000B02FC(uint64_t *a1, char a2)
{
  sub_1000AFC54(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

BOOL sub_1000B0308()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

uint64_t sub_1000B031C()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_1000F477C, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

float sub_1000B0340()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

uint64_t sub_1000B0354(float a1)
{
  return sub_1000AFAFC(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination, a1);
}

void (*sub_1000B0360(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000B03F0;
}

void sub_1000B03F0(uint64_t *a1, char a2)
{
  sub_1000AFC54(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

BOOL sub_1000B03FC()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

uint64_t sub_1000B0410()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_1000F477C, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

float sub_1000B0434()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

uint64_t sub_1000B0448(float a1)
{
  return sub_1000AFAFC(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal, a1);
}

void (*sub_1000B0454(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000B04E4;
}

void sub_1000B04E4(uint64_t *a1, char a2)
{
  sub_1000AFC54(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

BOOL sub_1000B04F0()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

uint64_t sub_1000B0504()
{
  return sub_100022EB0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_1000F477C, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

uint64_t sub_1000B0528@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B1318(&qword_10036E528, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t sub_1000B054C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E528);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_1000F477C(v14);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E528);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E528);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B06CC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E528);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E528);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E528);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  }
  return sub_1000B0844;
}

void sub_1000B0844(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000B054C, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

BOOL sub_1000B0858()
{
  return sub_10001CFF4(&qword_10036E528, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000B087C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E528);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_1000F477C(v9);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E528);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B09AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &qword_1003944B0, &qword_1003944B8, (uint64_t)sub_1000F4618, a1);
}

uint64_t sub_1000B09D0()
{
  return sub_100036594(&qword_1003944B0, &qword_1003944B8, (uint64_t)sub_1000F4618);
}

uint64_t sub_1000B09EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t sub_1000B09F8(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B0A14(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000B0B64()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B0B80()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B0B9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036E530);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10036E530);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_1003944B0 != -1)
    swift_once(&qword_1003944B0, sub_1000F4618);
  v9 = qword_1003944B8;
  *(_QWORD *)(a1 + v8) = qword_1003944B8;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_10036E530);
}

uint64_t sub_1000B0CB4(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &qword_10036E530, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

void (*sub_1000B0CD0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E530);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E530);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_1003944B0 != -1)
      swift_once(&qword_1003944B0, sub_1000F4618);
    v12 = qword_1003944B8;
    *(_QWORD *)&v9[v11] = qword_1003944B8;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_10036E530);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  }
  return sub_1000B0E28;
}

void sub_1000B0E28(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E530, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

BOOL sub_1000B0E3C()
{
  return sub_1000198C8(&qword_10036E530, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t sub_1000B0E58()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &qword_10036E530, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

float sub_1000B0E74()
{
  return sub_100020FA8(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000B0E80(float a1)
{
  return sub_100020FEC(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t (*sub_1000B0E8C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B0EE4()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000B0EF0()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

float sub_1000B0EFC()
{
  return sub_10002CC70(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000B0F08(float a1)
{
  return sub_10002CCB4(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t (*sub_1000B0F14(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B0F6C()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000B0F78()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000B0F84()
{
  return sub_10001B080(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000B0F90(char a1)
{
  return sub_10001B0B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t (*sub_1000B0F9C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B0FE4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 36)) != 2;
}

uint64_t sub_1000B100C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000B1030@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = a1 + v2[7];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v2[8];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_BYTE *)(a1 + v2[9]) = 2;
  return result;
}

uint64_t sub_1000B10EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, a1);
}

uint64_t sub_1000B10F8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0C4(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t sub_1000B1104(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_Compass, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B1120(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Compass(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000B1270()
{
  return sub_1000198C8(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B128C()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_Compass, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B12A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t sub_1000B12B4(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t (*sub_1000B12C0())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B12E8@<X0>(_QWORD *a1@<X8>)
{
  return sub_10008AD24(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t sub_1000B12F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B1318(&qword_10036E528, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t sub_1000B1318@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v22[24];

  v11 = sub_1000039AC(a1);
  __chkstk_darwin(v11);
  v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = *(_QWORD *)(v5 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess(v14, v22, 0, 0);
  sub_10000E660(v14, (uint64_t)v13, a1);
  v15 = (int *)a4(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v15 - 1) + 48))(v13, 1, v15) != 1)
    return sub_100003E08((uint64_t)v13, a5, a4);
  UnknownStorage.init()();
  v16 = a5 + v15[5];
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = a5 + v15[6];
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = a5 + v15[7];
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = a5 + v15[8];
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  return sub_100015704((uint64_t)v13, a1);
}

uint64_t sub_1000B1468(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E528);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010F308(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E528);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E528);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B15EC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E528);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E528);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E528);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  }
  return sub_1000B1764;
}

void sub_1000B1764(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000B1468, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

BOOL sub_1000B1778()
{
  return sub_10001CFF4(&qword_10036E528, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000B179C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E528);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010F308(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E528);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B18D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B21BC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, a1);
}

uint64_t sub_1000B18E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E520);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010F308(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E520);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E520);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B1A68(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E520);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E520);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E520);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return sub_1000B1BD0;
}

void sub_1000B1BD0(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000B18E4, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

BOOL sub_1000B1BE4()
{
  return sub_10001CFF4(&qword_10036E520, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000B1C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010F308(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E520);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B1D3C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B21BC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, a1);
}

uint64_t sub_1000B1D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E520);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010F308(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E520);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E520);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B1ED4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E520);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E520);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E520);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return sub_1000B203C;
}

void sub_1000B203C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000B1D50, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

BOOL sub_1000B2050()
{
  return sub_10001CFF4(&qword_10036E520, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000B2074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010F308(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E520);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B21A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B21BC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, a1);
}

uint64_t sub_1000B21BC@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v7 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v7);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *(_QWORD *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess(v10, v17, 0, 0);
  sub_10000E660(v10, (uint64_t)v9, &qword_10036E520);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v11 - 1) + 48))(v9, 1, v11) != 1)
    return sub_100003E08((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  UnknownStorage.init()();
  v12 = a3 + v11[5];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a3 + v11[6];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a3 + v11[7];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  return sub_100015704((uint64_t)v9, &qword_10036E520);
}

uint64_t sub_1000B2300(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E520);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010F308(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E520);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E520);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B2484(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E520);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E520);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E520);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return sub_1000B25EC;
}

void sub_1000B25EC(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000B2300, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

BOOL sub_1000B2600()
{
  return sub_10001CFF4(&qword_10036E520, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000B2624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010F308(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E520);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B2758()
{
  return sub_1000AFE74(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

uint64_t sub_1000B276C(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10010F308, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

void (*sub_1000B2790(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 8)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000B2818;
}

void sub_1000B2818(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10010F308, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

BOOL sub_1000B2834()
{
  return sub_1000AFFB0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

uint64_t sub_1000B2848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010F308(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 8;
  return result;
}

uint64_t sub_1000B28F4()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

uint64_t sub_1000B2908(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10010F308, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

void (*sub_1000B292C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B29B0;
}

void sub_1000B29B0(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10010F308, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

BOOL sub_1000B29CC()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

uint64_t sub_1000B29E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010F308(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000B2A8C()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

uint64_t sub_1000B2AA0(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10010F308, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

void (*sub_1000B2AC4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B2B48;
}

void sub_1000B2B48(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10010F308, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

BOOL sub_1000B2B64()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

uint64_t sub_1000B2B78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010F308(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000B2C24()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

uint64_t sub_1000B2C38(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10010F308, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

void (*sub_1000B2C5C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B2CE0;
}

void sub_1000B2CE0(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10010F308, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

BOOL sub_1000B2CFC()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

uint64_t sub_1000B2D10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010F308(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

float sub_1000B2DBC()
{
  return sub_100023698(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

uint64_t sub_1000B2DD0(float a1)
{
  return sub_1000B2DF4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10010F308, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading, a1);
}

uint64_t sub_1000B2DF4(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4, float a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _BYTE v19[24];

  v9 = v5;
  v11 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + v11)) & 1) == 0)
  {
    v12 = *(_QWORD *)(v5 + v11);
    v13 = a2(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = swift_retain(v12);
    a3(v15);
    swift_release(v12);
    v16 = *(_QWORD *)(v9 + v11);
    *(_QWORD *)(v9 + v11) = v14;
    swift_release(v16);
  }
  v17 = *(_QWORD *)(v9 + v11) + *a4;
  result = swift_beginAccess(v17, v19, 1, 0);
  *(float *)v17 = a5;
  *(_BYTE *)(v17 + 4) = 0;
  return result;
}

void (*sub_1000B2EC8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000B2F58;
}

void sub_1000B2F58(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10010F308, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

BOOL sub_1000B2F74()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

uint64_t sub_1000B2F88()
{
  return sub_10008D428(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10010F308, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

uint64_t sub_1000B2FAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &qword_1003944D8, &qword_1003944E0, (uint64_t)sub_1000F766C, a1);
}

uint64_t sub_1000B2FD0()
{
  return sub_100036594(&qword_1003944D8, &qword_1003944E0, (uint64_t)sub_1000F766C);
}

uint64_t sub_1000B2FEC()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0) + 20));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t sub_1000B301C(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v4 = v1 + *(int *)(result + 20);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B3050(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B30A0()
{
  return sub_100019258(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t sub_1000B30AC()
{
  return sub_100019294(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t sub_1000B30B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  UnknownStorage.init()();
  result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000B30F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t sub_1000B3100(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B311C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000B326C()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B3288()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B32A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036E538);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10036E538);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (qword_1003944D8 != -1)
    swift_once(&qword_1003944D8, sub_1000F766C);
  v9 = qword_1003944E0;
  *(_QWORD *)(a1 + v8) = qword_1003944E0;
  swift_retain(v9);
  return sub_100015704((uint64_t)v5, &qword_10036E538);
}

uint64_t sub_1000B33BC(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10036E538, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

void (*sub_1000B33D8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E538);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E538);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (qword_1003944D8 != -1)
      swift_once(&qword_1003944D8, sub_1000F766C);
    v12 = qword_1003944E0;
    *(_QWORD *)&v9[v11] = qword_1003944E0;
    swift_retain(v12);
    sub_100015704((uint64_t)v5, &qword_10036E538);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  }
  return sub_1000B3530;
}

void sub_1000B3530(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E538, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

BOOL sub_1000B3544()
{
  return sub_1000198C8(&qword_10036E538, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t sub_1000B3560()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10036E538, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t sub_1000B357C()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000B3588(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t (*sub_1000B3594(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B35DC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 28)) != 2;
}

uint64_t sub_1000B3604()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000B3628()
{
  return sub_1000A9E40(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000B3634(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t (*sub_1000B3640(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B3690()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000B369C()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000B36A8()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t sub_1000B36D0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_1000B36FC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B3748()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36)) != 5;
}

uint64_t sub_1000B3770()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 5;
  return result;
}

uint64_t sub_1000B3794@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = sub_1000039AC(&qword_10036E540);
  __chkstk_darwin(v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  sub_10000E660(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_10036E540);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036E540);
}

uint64_t sub_1000B3884(uint64_t a1)
{
  return sub_1000B99EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10036E540, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

void (*sub_1000B38A0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E540);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E540);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  }
  return sub_1000B39D0;
}

void sub_1000B39D0(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E540, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

BOOL sub_1000B39E4()
{
  return sub_1000B9BC4(&qword_10036E540, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t sub_1000B3A00()
{
  return sub_1000B9C9C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10036E540, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

float sub_1000B3A1C()
{
  return sub_1000B3A28(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float sub_1000B3A28(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 44);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t sub_1000B3A60(float a1)
{
  return sub_1000B3A6C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t sub_1000B3A6C(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 44);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B3AA4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 44);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B3AFC()
{
  return sub_100033824(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000B3B08()
{
  return sub_100033860(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float sub_1000B3B14()
{
  return sub_1000B3B20(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float sub_1000B3B20(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 48);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t sub_1000B3B58(float a1)
{
  return sub_1000B3B64(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t sub_1000B3B64(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 48);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B3B9C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 48);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B3BF4()
{
  return sub_1000B3C00(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

BOOL sub_1000B3C00(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 48) + 4) & 1) == 0;
}

uint64_t sub_1000B3C30()
{
  return sub_1000B3C3C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000B3C3C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 48);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000B3C6C@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_BYTE *)(a1 + v2[7]) = 2;
  v7 = a1 + v2[8];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a1 + v2[9]) = 5;
  v8 = a1 + v2[10];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v11 = a1 + v2[11];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v2[12];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return result;
}

uint64_t sub_1000B3D70@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, a1);
}

uint64_t sub_1000B3D7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, a1);
}

uint64_t sub_1000B3D88@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0C4(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

uint64_t sub_1000B3D94(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B3DB0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000B3F00()
{
  return sub_1000198C8(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B3F1C()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B3F38@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

uint64_t sub_1000B3F44(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t (*sub_1000B3F50())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B3F78@<X0>(_QWORD *a1@<X8>)
{
  return sub_10008AD24(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

double sub_1000B3F84()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B3F90(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000B3F9C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B3FF4()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4000()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B400C()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4018(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000B4024(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B407C()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4088()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B4094()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B40A0(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000B40AC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B4104()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4110()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B411C()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4128(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000B4134(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B418C()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4198()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B41A4()
{
  return sub_10002A164(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B41B0(double a1)
{
  return sub_10002A1A8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000B41BC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B4214()
{
  return sub_10002A244(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4220()
{
  return sub_10002A280(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B422C()
{
  return sub_1000B4238(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B4238(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 40);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t sub_1000B4270(double a1)
{
  return sub_1000B427C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t sub_1000B427C(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 40);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B42B4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B430C()
{
  return sub_1000B4318(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

BOOL sub_1000B4318(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 40) + 8) & 1) == 0;
}

uint64_t sub_1000B4348()
{
  return sub_1000B4354(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4354(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 40);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double sub_1000B4384()
{
  return sub_1000B4390(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000B4390(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 44);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t sub_1000B43C8(double a1)
{
  return sub_1000B43D4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t sub_1000B43D4(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 44);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B440C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B4464()
{
  return sub_1000B4470(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

BOOL sub_1000B4470(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 44) + 8) & 1) == 0;
}

uint64_t sub_1000B44A0()
{
  return sub_1000B44AC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B44AC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 44);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_1000B44DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  sub_10000E660(v1 + *(int *)(v6 + 48), (uint64_t)v5, &qword_10036E458);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036E458);
}

uint64_t sub_1000B45EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
  sub_100015704(v3, &qword_10036E458);
  sub_100003E08(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*sub_1000B465C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000B47AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  sub_10000E660(v0 + *(int *)(v4 + 48), (uint64_t)v3, &qword_10036E458);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100015704((uint64_t)v3, &qword_10036E458);
  return v6;
}

uint64_t sub_1000B4860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
  sub_100015704(v1, &qword_10036E458);
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_1000B48B8@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v3 = a1 + v2[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + v2[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + v2[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + v2[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + v2[9];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1 + v2[10];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v2[11];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v2[12];
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t sub_1000B497C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = sub_1000039AC(&qword_10036E548);
  __chkstk_darwin(v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
  sub_10000E660(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_10036E548);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[9];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1 + v7[10];
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = a1 + v7[11];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = a1 + v7[12];
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  return sub_100015704((uint64_t)v5, &qword_10036E548);
}

uint64_t sub_1000B4AF8(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, &qword_10036E548, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

void (*sub_1000B4B14(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E548);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E548);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = &v9[v6[9]];
    *(_QWORD *)v15 = 0;
    v15[8] = 1;
    v16 = &v9[v6[10]];
    *(_QWORD *)v16 = 0;
    v16[8] = 1;
    v17 = &v9[v6[11]];
    *(_QWORD *)v17 = 0;
    v17[8] = 1;
    v18 = &v9[v6[12]];
    v19 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
    sub_100015704((uint64_t)v5, &qword_10036E548);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  }
  return sub_1000B4CD0;
}

void sub_1000B4CD0(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E548, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

BOOL sub_1000B4CE4()
{
  return sub_100031310(&qword_10036E548, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4D00()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, &qword_10036E548, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000B4D1C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA974(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t sub_1000B4D30@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t sub_1000B4D3C()
{
  return sub_100027F38(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4D48(uint64_t a1)
{
  return sub_100027F78(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000B4D54(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B4DA8()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4DB4()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4DC0()
{
  return sub_10009E7A8(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4DCC(uint64_t a1, uint64_t a2)
{
  return sub_10009E808(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000B4DD8(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B34;
}

BOOL sub_1000B4E40()
{
  return sub_10009E8C0(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4E4C()
{
  return sub_10009E8FC(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4E58()
{
  return sub_1000B8DB4(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4E64(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000B4E70(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B4EC0()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4ECC()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4ED8()
{
  return sub_1000B4EE4(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4EE4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 32));
  if (v2 == 4)
    return 0;
  else
    return v2;
}

uint64_t sub_1000B4F10(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000B4F3C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B4F88()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 32)) != 4;
}

uint64_t sub_1000B4FB0()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000B4FD4()
{
  return sub_1000B4FE0(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B4FE0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 36));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t sub_1000B5014(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B5020(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 36);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B5054(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B50A4()
{
  return sub_10002822C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B50B0()
{
  return sub_100028268(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

float sub_1000B50BC()
{
  return sub_1000A0928(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B50C8(float a1)
{
  return sub_1000A096C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, a1);
}

uint64_t (*sub_1000B50D4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 40);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B512C()
{
  return sub_1000336EC(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B5138()
{
  return sub_100033728(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B5144()
{
  return sub_1000A3B24(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B5150(char a1)
{
  return sub_1000A3B58(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000B515C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B51A4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 44)) != 2;
}

uint64_t sub_1000B51CC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000B51F0()
{
  return sub_1000A3C24(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B51FC(char a1)
{
  return sub_1000A3C58(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000B5208(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B5250()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 48)) != 2;
}

uint64_t sub_1000B5278()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(_BYTE *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_1000B529C()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t sub_1000B52C4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_1000B52F0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B533C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52)) != 4;
}

uint64_t sub_1000B5364()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(_BYTE *)(v0 + *(int *)(result + 52)) = 4;
  return result;
}

uint64_t sub_1000B5388()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t sub_1000B53B8(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v4 = v1 + *(int *)(result + 56);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B53EC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B543C()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56) + 4) & 1) == 0;
}

uint64_t sub_1000B5468()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v2 = v0 + *(int *)(result + 56);
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return result;
}

int *sub_1000B5494@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = (_QWORD *)(a1 + result[6]);
  *v4 = 0;
  v4[1] = 0;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + result[8]) = 4;
  v6 = a1 + result[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[10];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a1 + result[11]) = 2;
  *(_BYTE *)(a1 + result[12]) = 2;
  *(_BYTE *)(a1 + result[13]) = 4;
  v8 = a1 + result[14];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_1000B5544()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t sub_1000B5550(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t (*sub_1000B555C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B55A4()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 20)) != 2;
}

uint64_t sub_1000B55CC()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_1000B55F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = sub_1000039AC(&qword_10036E550);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10036E550);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = (_QWORD *)(a1 + v7[6]);
  *v9 = 0;
  v9[1] = 0;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + v7[8]) = 4;
  v11 = a1 + v7[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[10];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  *(_BYTE *)(a1 + v7[11]) = 2;
  *(_BYTE *)(a1 + v7[12]) = 2;
  *(_BYTE *)(a1 + v7[13]) = 4;
  v13 = a1 + v7[14];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036E550);
}

uint64_t sub_1000B5754(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, &qword_10036E550, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

void (*sub_1000B5770(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E550);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E550);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *v12 = 0;
    v12[1] = 0;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v9[v6[8]] = 4;
    v14 = &v9[v6[9]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[10]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    v9[v6[13]] = 4;
    v16 = &v9[v6[14]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E550);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  }
  return sub_1000B5914;
}

void sub_1000B5914(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E550, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

BOOL sub_1000B5928()
{
  return sub_1000198C8(&qword_10036E550, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B5944()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, &qword_10036E550, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000B5960@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  UnknownStorage.init()();
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  *(_BYTE *)(a1 + *(int *)(v2 + 20)) = 2;
  v3 = a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t sub_1000B59BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, a1);
}

uint64_t sub_1000B59C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0C4(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t sub_1000B59D4(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B59F0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000B5B40()
{
  return sub_1000198C8(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B5B5C()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B5B78@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t sub_1000B5B84(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t (*sub_1000B5B90())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B5BB8@<X0>(_QWORD *a1@<X8>)
{
  return sub_10008AD24(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t sub_1000B5BC4@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000B5BE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010F86C(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B5D6C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B5ED4;
}

void sub_1000B5ED4(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000B5BE8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000B5EE8()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B5F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010F86C(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B6040()
{
  return sub_10008D104(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000B6054(int a1)
{
  return sub_10008D18C(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*sub_1000B6078(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000B6104;
}

void sub_1000B6104(uint64_t *a1, char a2)
{
  sub_10008D2FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

BOOL sub_1000B6120()
{
  return sub_100022E2C(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000B6134()
{
  return sub_10008D428(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000B6158()
{
  return sub_1000B62F0(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

uint64_t sub_1000B6164(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

void (*sub_1000B6188(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 15)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000B6210;
}

void sub_1000B6210(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

BOOL sub_1000B622C()
{
  return sub_1000B6420(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

uint64_t sub_1000B6238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010F86C(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 15;
  return result;
}

uint64_t sub_1000B62E4()
{
  return sub_1000B62F0(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

uint64_t sub_1000B62F0(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _BYTE v4[24];

  v2 = (unsigned __int8 *)(*(_QWORD *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0)
                                              + 20))
                         + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  if (*v2 == 15)
    return 0;
  else
    return *v2;
}

uint64_t sub_1000B634C(char a1)
{
  return sub_10008D52C(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

void (*sub_1000B6370(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *v5;
  if (v6 == 15)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000B63F8;
}

void sub_1000B63F8(uint64_t *a1, char a2)
{
  sub_10008D694(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

BOOL sub_1000B6414()
{
  return sub_1000B6420(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

BOOL sub_1000B6420(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _BYTE v4[24];

  v2 = (unsigned __int8 *)(*(_QWORD *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0)
                                              + 20))
                         + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  return *v2 != 15;
}

uint64_t sub_1000B647C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010F86C(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 15;
  return result;
}

uint64_t sub_1000B6528()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

uint64_t sub_1000B653C(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

void (*sub_1000B6560(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B65E4;
}

void sub_1000B65E4(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

BOOL sub_1000B6600()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

uint64_t sub_1000B6614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010F86C(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000B66C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036E558);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E558);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 2;
  v8 = a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_100015704((uint64_t)v5, &qword_10036E558);
}

uint64_t sub_1000B67FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E558);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010F86C(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E558);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E558);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B6980(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E558);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E558);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 2;
    v11 = &v9[*(int *)(v6 + 24)];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_100015704((uint64_t)v5, &qword_10036E558);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  }
  return sub_1000B6AEC;
}

void sub_1000B6AEC(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000B67FC, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

BOOL sub_1000B6B00()
{
  return sub_10001CFF4(&qword_10036E558, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t sub_1000B6B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E558);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010F86C(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E558);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B6C58@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v12[24];

  v3 = sub_1000039AC(&qword_10036E560);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E560);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v8 = (char *)a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_100015704((uint64_t)v5, &qword_10036E560);
}

uint64_t sub_1000B6D98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E560);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010F86C(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E560);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E560);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000B6F1C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E560);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E560);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_100015704((uint64_t)v5, &qword_10036E560);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  }
  return sub_1000B708C;
}

void sub_1000B708C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000B6D98, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

BOOL sub_1000B70A0()
{
  return sub_10001CFF4(&qword_10036E560, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t sub_1000B70C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E560);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010F86C(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E560);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000B71F8()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

uint64_t sub_1000B720C(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

void (*sub_1000B7230(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B72B4;
}

void sub_1000B72B4(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

BOOL sub_1000B72D0()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

uint64_t sub_1000B72E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010F86C(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000B7390()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

uint64_t sub_1000B73A4(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

void (*sub_1000B73C8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B744C;
}

void sub_1000B744C(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

BOOL sub_1000B7468()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

uint64_t sub_1000B747C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010F86C(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000B7528()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

uint64_t sub_1000B753C(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

void (*sub_1000B7560(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B75E4;
}

void sub_1000B75E4(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

BOOL sub_1000B7600()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

uint64_t sub_1000B7614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010F86C(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000B76C0()
{
  return sub_100091180(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

uint64_t sub_1000B76D4(char a1)
{
  return sub_100091200(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

void (*sub_1000B76F8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess(v5, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return sub_1000B777C;
}

void sub_1000B777C(uint64_t *a1, char a2)
{
  sub_100091368(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10010F86C, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

BOOL sub_1000B7798()
{
  return sub_100091468(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

uint64_t sub_1000B77AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = swift_retain(v3);
    sub_10010F86C(v6);
    swift_release(v3);
    v7 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v7);
  }
  v8 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  result = swift_beginAccess(v8, v10, 1, 0);
  *v8 = 2;
  return result;
}

uint64_t sub_1000B7858@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &qword_100394530, &qword_100394538, (uint64_t)sub_1000FD508, a1);
}

uint64_t sub_1000B787C()
{
  return sub_100036594(&qword_100394530, &qword_100394538, (uint64_t)sub_1000FD508);
}

uint64_t sub_1000B7898@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, a1);
}

uint64_t sub_1000B78A4(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B78C0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000B7A10()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B7A2C()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B7A48()
{
  return sub_1000B7A54(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000B7A54(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 24));
  if (v2 == 4)
    return 0;
  else
    return v2;
}

uint64_t sub_1000B7A80(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000B7AAC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B7AF8()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 24)) != 4;
}

uint64_t sub_1000B7B20()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

double sub_1000B7B44()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000B7B50(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, a1);
}

uint64_t (*sub_1000B7B5C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B7BB4()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000B7BC0()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000B7BCC()
{
  return sub_1000B4EE4(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000B7BD8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000B7C04(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B7C50()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 32)) != 4;
}

uint64_t sub_1000B7C78()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000B7C9C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149D40();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B7CD4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149CFC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B7D0C@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(a1 + v2[6]) = 4;
  v6 = a1 + v2[7];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a1 + v2[8]) = 4;
  return result;
}

_UNKNOWN **sub_1000B7D94()
{
  return &off_100354468;
}

void sub_1000B7DA0(_QWORD *a1@<X8>)
{
  *a1 = &off_100354490;
}

_UNKNOWN **sub_1000B7DB0()
{
  return &off_1003544B8;
}

void sub_1000B7DBC(_QWORD *a1@<X8>)
{
  *a1 = &off_1003544E0;
}

double sub_1000B7DCC()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B7DD8(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t (*sub_1000B7DE4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B7E3C()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B7E48()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

double sub_1000B7E54()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B7E60(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t (*sub_1000B7E6C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B7EC4()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B7ED0()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B7EDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10008E6C0(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

double sub_1000B7EE8()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B7EF4(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000B7F00(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B7F58()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B7F64()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000B7F70()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B7F7C(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000B7F88(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B7FE0()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B7FEC()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B7FF8()
{
  return sub_10001A90C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8004(char a1)
{
  return sub_10001A940(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t (*sub_1000B8010(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B8058()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 32)) != 2;
}

uint64_t sub_1000B8080()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

double sub_1000B80A4()
{
  return sub_10002A164(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B80B0(double a1)
{
  return sub_10002A1A8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000B80BC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B8114()
{
  return sub_10002A244(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8120()
{
  return sub_10002A280(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000B812C()
{
  return sub_1000B4238(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8138(double a1)
{
  return sub_1000B427C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000B8144(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B819C()
{
  return sub_1000B4318(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B81A8()
{
  return sub_1000B4354(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000B81B4()
{
  return sub_1000B4390(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B81C0(double a1)
{
  return sub_1000B43D4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000B81CC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B8224()
{
  return sub_1000B4470(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8230()
{
  return sub_1000B44AC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000B823C()
{
  return sub_1000B8248(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000B8248(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 48);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t sub_1000B8280(double a1)
{
  return sub_1000B828C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t sub_1000B828C(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 48);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B82C4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 48);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B831C()
{
  return sub_1000B8328(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

BOOL sub_1000B8328(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 48) + 8) & 1) == 0;
}

uint64_t sub_1000B8358()
{
  return sub_1000B8364(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000B8364(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 48);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_1000B8394@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t sub_1000B83A0(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t (*sub_1000B83AC())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B83D4@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;

  *a1 = &_swiftEmptyArrayStorage;
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  result = UnknownStorage.init()();
  v4 = (char *)a1 + v2[6];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = (char *)a1 + v2[7];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  *((_BYTE *)a1 + v2[8]) = 2;
  v6 = (char *)a1 + v2[9];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = (char *)a1 + v2[10];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = (char *)a1 + v2[11];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = (char *)a1 + v2[12];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  return result;
}

uint64_t sub_1000B8484()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 24));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t sub_1000B84B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  v4 = v1 + *(int *)(result + 24);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B84E8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B853C()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000B8548()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000B8554()
{
  return sub_1000B969C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000B8560(uint64_t a1)
{
  return sub_1000B96DC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t (*sub_1000B856C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B85C0()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000B85CC()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000B85D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, a1);
}

uint64_t sub_1000B85E4(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t (*sub_1000B85F0())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B8618@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char *v4;
  char *v5;

  *a1 = &_swiftEmptyArrayStorage;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  result = UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(v2 + 24);
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = (char *)a1 + *(int *)(v2 + 28);
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  return result;
}

uint64_t sub_1000B867C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8688(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, a1);
}

uint64_t sub_1000B8688@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  sub_10000E660(v2 + *(int *)(v8 + 28), (uint64_t)v7, &qword_10036E458);
  v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return sub_100003E08((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  UnknownStorage.init()();
  v10 = a2 + v9[5];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a2 + v9[6];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v9[7];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  return sub_100015704((uint64_t)v7, &qword_10036E458);
}

uint64_t sub_1000B87A4(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B87C0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000B8910()
{
  return sub_10002D31C(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B892C()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B8948@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036E568);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  sub_10000E660(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_10036E568);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  return sub_100015704((uint64_t)v5, &qword_10036E568);
}

uint64_t sub_1000B8A48(uint64_t a1)
{
  return sub_100034398(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &qword_10036E568, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

void (*sub_1000B8A64(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E568);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E568);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E568);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  }
  return sub_1000B8BA4;
}

void sub_1000B8BA4(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E568, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

BOOL sub_1000B8BB8()
{
  return sub_10002E3A0(&qword_10036E568, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B8BD4()
{
  return sub_10002E478(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &qword_10036E568, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000B8BF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A6FFC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, a1);
}

uint64_t sub_1000B8BFC(uint64_t a1)
{
  return sub_1000A7054(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t (*sub_1000B8C08())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B8C30@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 28);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = (char *)a1 + *(int *)(v2 + 32);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t sub_1000B8CCC@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t sub_1000B8CD8()
{
  return sub_1000B7A54(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8CE4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000B8D10(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B8D5C()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0)
                           + 24)) != 4;
}

uint64_t sub_1000B8D84()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_1000B8DA8()
{
  return sub_1000B8DB4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8DB4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 28));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t sub_1000B8DE8(int a1)
{
  return sub_1000B8DF4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8DF4(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 28);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B8E28(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B8E78()
{
  return sub_100020B70(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8E84()
{
  return sub_100020BAC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8E90()
{
  return sub_1000A9E40(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8E9C(int a1)
{
  return sub_1000A9E80(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*sub_1000B8EA8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B8EF8()
{
  return sub_1000278D8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8F04()
{
  return sub_100027914(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8F10()
{
  return sub_1000B4FE0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8F1C(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*sub_1000B8F28(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B8F78()
{
  return sub_10002822C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8F84()
{
  return sub_100028268(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000B8F90@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, a1);
}

uint64_t sub_1000B8F9C(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*sub_1000B8FA8())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B8FD0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149CB8();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B9008@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;

  *a1 = &_swiftEmptyArrayStorage;
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  result = UnknownStorage.init()();
  *((_BYTE *)a1 + v2[6]) = 4;
  v4 = (char *)a1 + v2[7];
  *(_DWORD *)v4 = 0;
  v4[4] = 1;
  v5 = (char *)a1 + v2[8];
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  v6 = (char *)a1 + v2[9];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  return result;
}

_UNKNOWN **sub_1000B9088()
{
  return &off_100354508;
}

void sub_1000B9094(_QWORD *a1@<X8>)
{
  *a1 = &off_100354530;
}

double sub_1000B90A4()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B90B0(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*sub_1000B90BC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B9114()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9120()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

double sub_1000B912C()
{
  return sub_100027B84(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9138(double a1)
{
  return sub_100027BC8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*sub_1000B9144(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B919C()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B91A8()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

double sub_1000B91B4()
{
  return sub_100027CDC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B91C0(double a1)
{
  return sub_100027D20(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*sub_1000B91CC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B9224()
{
  return sub_100027DBC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9230()
{
  return sub_100027DF8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

double sub_1000B923C()
{
  return sub_10002A164(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9248(double a1)
{
  return sub_10002A1A8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*sub_1000B9254(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B92AC()
{
  return sub_10002A244(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B92B8()
{
  return sub_10002A280(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B92C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t sub_1000B92D0(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t (*sub_1000B92DC())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B9304@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  *a1 = &_swiftEmptyArrayStorage;
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  result = UnknownStorage.init()();
  v4 = (char *)a1 + v2[6];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = (char *)a1 + v2[7];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  v6 = (char *)a1 + v2[8];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = (char *)a1 + v2[9];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  return result;
}

uint64_t sub_1000B9388@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v13;

  v3 = sub_1000039AC(&qword_10036E570);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  sub_10000E660(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10036E570);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v8 = (char *)a1 + v7[6];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = (char *)a1 + v7[7];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = (char *)a1 + v7[8];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  v11 = (char *)a1 + v7[9];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  return sub_100015704((uint64_t)v5, &qword_10036E570);
}

uint64_t sub_1000B94B8(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &qword_10036E570, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

void (*sub_1000B94D4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E570);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E570);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    v11 = (char *)v9 + v6[6];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = (char *)v9 + v6[7];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = (char *)v9 + v6[8];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = (char *)v9 + v6[9];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E570);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  }
  return sub_1000B9644;
}

void sub_1000B9644(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E570, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

BOOL sub_1000B9658()
{
  return sub_1000198C8(&qword_10036E570, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9674()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &qword_10036E570, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000B9690()
{
  return sub_1000B969C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B969C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 28));
  if (v2[8])
    return 0;
  else
    return *(_QWORD *)v2;
}

uint64_t sub_1000B96D0(uint64_t a1)
{
  return sub_1000B96DC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B96DC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 28);
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B9710(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B9764()
{
  return sub_100027C64(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B9770()
{
  return sub_100027CA0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B977C()
{
  return sub_1000B4EE4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B9788(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000B97B4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B9800()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 32)) != 4;
}

uint64_t sub_1000B9828()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000B984C()
{
  return sub_1000B4FE0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B9858(int a1)
{
  return sub_1000B5020(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t (*sub_1000B9864(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000B98B4()
{
  return sub_10002822C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B98C0()
{
  return sub_100028268(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B98CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = sub_1000039AC(&qword_10036E578);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  sub_10000E660(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_10036E578);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 2;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036E578);
}

uint64_t sub_1000B99BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA214(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, 2, 2, a1);
}

uint64_t sub_1000B99D0(uint64_t a1)
{
  return sub_1000B99EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &qword_10036E578, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1000B99EC(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 40);
  sub_100015704(v8, a3);
  sub_100003E08(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*sub_1000B9A64(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E578);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E578);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 2;
    v9[*(int *)(v6 + 24)] = 2;
    sub_100015704((uint64_t)v5, &qword_10036E578);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  }
  return sub_1000B9B94;
}

void sub_1000B9B94(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E578, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

BOOL sub_1000B9BA8()
{
  return sub_1000B9BC4(&qword_10036E578, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

BOOL sub_1000B9BC4(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = sub_1000039AC(a1);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  sub_10000E660(v3 + *(int *)(v10 + 40), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_100015704((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000B9C80()
{
  return sub_1000B9C9C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &qword_10036E578, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1000B9C9C(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 40);
  sub_100015704(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_1000B9D04()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0
               + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 44));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t sub_1000B9D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  v4 = v1 + *(int *)(result + 44);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B9D68(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000B9DBC()
{
  return sub_1000B4470(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B9DC8()
{
  return sub_1000B44AC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000B9DD4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, a1);
}

uint64_t sub_1000B9DE0(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t (*sub_1000B9DEC())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B9E14(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149C74();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B9E4C()
{
  return sub_10001A638(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1000B9E58(char a1)
{
  return sub_10001A66C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t (*sub_1000B9E64(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B9EAC()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                           + 20)) != 2;
}

uint64_t sub_1000B9ED4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_1000B9EF8()
{
  return sub_10001A738(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1000B9F04(char a1)
{
  return sub_10001A76C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t (*sub_1000B9F10(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000B9F58()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                           + 24)) != 2;
}

uint64_t sub_1000B9F80()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000B9FA4@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  char *v10;

  *a1 = &_swiftEmptyArrayStorage;
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + v2[6];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = (char *)a1 + v2[7];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  *((_BYTE *)a1 + v2[8]) = 4;
  v6 = (char *)a1 + v2[9];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = (char *)a1 + v2[10];
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v10 = (char *)a1 + v2[11];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  return result;
}

uint64_t sub_1000BA084@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t sub_1000BA090@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, a1);
}

_UNKNOWN **sub_1000BA09C()
{
  return &off_100354558;
}

void sub_1000BA0A8(_QWORD *a1@<X8>)
{
  *a1 = &off_100354580;
}

uint64_t sub_1000BA0B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0C4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, a1);
}

uint64_t sub_1000BA0C4@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  sub_10000E660(v2 + *(int *)(v8 + 24), (uint64_t)v7, &qword_10036E458);
  v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return sub_100003E08((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  UnknownStorage.init()();
  v10 = a2 + v9[5];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a2 + v9[6];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v9[7];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  return sub_100015704((uint64_t)v7, &qword_10036E458);
}

uint64_t sub_1000BA1E0(uint64_t a1)
{
  return sub_100030888(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000BA1FC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000BA34C()
{
  return sub_1000198C8(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BA368()
{
  return sub_1000199A0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BA384()
{
  return sub_10001A838(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t sub_1000BA390(char a1)
{
  return sub_1000052EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t (*sub_1000BA39C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BA3E4()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28)) != 2;
}

uint64_t sub_1000BA40C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000BA430@<X0>(uint64_t a1@<X8>)
{
  return sub_1000053C4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, a1);
}

uint64_t sub_1000BA43C(uint64_t a1)
{
  return sub_10000541C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t (*sub_1000BA448())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000BA470@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;

  *a1 = &_swiftEmptyArrayStorage;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *((_BYTE *)a1 + *(int *)(v2 + 28)) = 2;
  return result;
}

uint64_t sub_1000BA4F0()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t sub_1000BA518(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000BA544(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BA590()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20)) != 4;
}

uint64_t sub_1000BA5B8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 4;
  return result;
}

uint64_t sub_1000BA5DC()
{
  return sub_1000B7A54(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_1000BA5E8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000BA614(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BA660()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 24)) != 4;
}

uint64_t sub_1000BA688()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_1000BA6AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149C30();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000BA6E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AA214(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, 4, 4, a1);
}

_UNKNOWN **sub_1000BA6F8()
{
  return &off_1003545A8;
}

void sub_1000BA704(_QWORD *a1@<X8>)
{
  *a1 = &off_1003545D0;
}

uint64_t sub_1000BA714@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_WristState, a1);
}

uint64_t sub_1000BA720(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000BA73C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000BA88C()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BA8A8()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_WristState, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BA8C4()
{
  return sub_1000B7A54(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BA8D0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000BA8FC(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BA948()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 24)) != 4;
}

uint64_t sub_1000BA970()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_1000BA994()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t sub_1000BA9BC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000BA9E8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BAA34()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28)) != 4;
}

uint64_t sub_1000BAA5C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 4;
  return result;
}

uint64_t sub_1000BAA80()
{
  return sub_1000B4EE4(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BAA8C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000BAAB8(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BAB04()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 32)) != 4;
}

uint64_t sub_1000BAB2C()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000BAB50()
{
  return sub_10001B080(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BAB5C(char a1)
{
  return sub_10001B0B4(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*sub_1000BAB68(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BABB0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 36)) != 2;
}

uint64_t sub_1000BABD8()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(_BYTE *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000BABFC()
{
  return sub_1000AAEE0(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BAC08(char a1)
{
  return sub_1000AAF14(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*sub_1000BAC14(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BAC5C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 40)) != 2;
}

uint64_t sub_1000BAC84()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

uint64_t sub_1000BACA8()
{
  return sub_1000A3B24(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BACB4(char a1)
{
  return sub_1000A3B58(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*sub_1000BACC0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BAD08()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 44)) != 2;
}

uint64_t sub_1000BAD30()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000BAD54(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149BEC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000BAD8C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149BA8();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000BADC4@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(a1 + v2[6]) = 4;
  *(_BYTE *)(a1 + v2[7]) = 4;
  *(_BYTE *)(a1 + v2[8]) = 4;
  *(_BYTE *)(a1 + v2[9]) = 2;
  *(_BYTE *)(a1 + v2[10]) = 2;
  *(_BYTE *)(a1 + v2[11]) = 2;
  return result;
}

_UNKNOWN **sub_1000BAE5C()
{
  return &off_1003545F8;
}

void sub_1000BAE68(_QWORD *a1@<X8>)
{
  *a1 = &off_100354620;
}

_UNKNOWN **sub_1000BAE78()
{
  return &off_100354648;
}

void sub_1000BAE84(_QWORD *a1@<X8>)
{
  *a1 = &off_100354670;
}

uint64_t sub_1000BAE94@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BAEA0(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, a1);
}

uint64_t sub_1000BAEA0@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  sub_10000E660(v2 + *(int *)(v8 + 20), (uint64_t)v7, &qword_10036E458);
  v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return sub_100003E08((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  UnknownStorage.init()();
  v10 = a2 + v9[5];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a2 + v9[6];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v9[7];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  return sub_100015704((uint64_t)v7, &qword_10036E458);
}

uint64_t sub_1000BAFBC(uint64_t a1)
{
  return sub_100033E58(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000BAFD8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_10008A344;
}

BOOL sub_1000BB128()
{
  return sub_100031310(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BB144()
{
  return sub_1000313E8(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BB160()
{
  return sub_10002DF3C(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t sub_1000BB16C(int a1)
{
  return sub_10002DF7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t (*sub_1000BB178(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000BB1C8()
{
  return sub_100027768(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t sub_1000BB1D4()
{
  return sub_1000277A4(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t sub_1000BB1E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = sub_1000039AC(&qword_10036E580);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  sub_10000E660(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10036E580);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 4;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 4;
  return sub_100015704((uint64_t)v5, &qword_10036E580);
}

uint64_t sub_1000BB2D0(uint64_t a1)
{
  return sub_100030BCC(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10036E580, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

void (*sub_1000BB2EC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E580);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E580);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 4;
    v9[*(int *)(v6 + 24)] = 4;
    sub_100015704((uint64_t)v5, &qword_10036E580);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  }
  return sub_1000BB41C;
}

void sub_1000BB41C(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E580, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

BOOL sub_1000BB430()
{
  return sub_10002D31C(&qword_10036E580, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_1000BB44C()
{
  return sub_10002D3F4(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10036E580, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_1000BB468@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_1000039AC(&qword_10036E588);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  sub_10000E660(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_10036E588);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_BYTE *)(a1 + v7[6]) = 4;
  *(_BYTE *)(a1 + v7[7]) = 4;
  *(_BYTE *)(a1 + v7[8]) = 4;
  *(_BYTE *)(a1 + v7[9]) = 2;
  *(_BYTE *)(a1 + v7[10]) = 2;
  *(_BYTE *)(a1 + v7[11]) = 2;
  return sub_100015704((uint64_t)v5, &qword_10036E588);
}

uint64_t sub_1000BB5A8(uint64_t a1)
{
  return sub_100034398(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10036E588, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

void (*sub_1000BB5C4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_1000039AC(&qword_10036E588);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_10000E660(v1 + v10, (uint64_t)v5, &qword_10036E588);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v9[v6[6]] = 4;
    v9[v6[7]] = 4;
    v9[v6[8]] = 4;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    sub_100015704((uint64_t)v5, &qword_10036E588);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  }
  return sub_1000BB744;
}

void sub_1000BB744(uint64_t a1, char a2)
{
  sub_100007B94(a1, a2, &qword_10036E588, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

BOOL sub_1000BB758()
{
  return sub_10002E3A0(&qword_10036E588, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BB774()
{
  return sub_10002E478(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10036E588, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000BB790@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + v2[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1 + v2[8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t sub_1000BB858@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, a1);
}

uint64_t sub_1000BB864@<X0>(uint64_t a1@<X8>)
{
  return sub_100004CB8(type metadata accessor for CLP_LogEntry_PrivateData_WristState, a1);
}

uint64_t sub_1000BB870()
{
  return sub_1000BB87C(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t sub_1000BB87C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 5)
    return 0;
  else
    return v2;
}

uint64_t sub_1000BB8A8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000BB8D4(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BB920()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 20)) != 5;
}

uint64_t sub_1000BB948()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(_BYTE *)(v0 + *(int *)(result + 20)) = 5;
  return result;
}

uint64_t sub_1000BB96C()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24));
  if (v1 == 3)
    return 0;
  else
    return v1;
}

uint64_t sub_1000BB994(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000BB9C0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BBA0C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24)) != 3;
}

uint64_t sub_1000BBA34()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(_BYTE *)(v0 + *(int *)(result + 24)) = 3;
  return result;
}

uint64_t sub_1000BBA58()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28));
  v2 = v1[1];
  if (v2)
    v3 = *v1;
  else
    v3 = 0;
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_1000BBAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1000BBAEC(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B34;
}

BOOL sub_1000BBB54()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28) + 8) != 0;
}

uint64_t sub_1000BBB80()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28));
  result = swift_bridgeObjectRelease(v1[1]);
  *v1 = 0;
  v1[1] = 0;
  return result;
}

uint64_t sub_1000BBBB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32));
  v2 = v1[1];
  if (v2)
    v3 = *v1;
  else
    v3 = 0;
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_1000BBC04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1000BBC48(uint64_t a1))(uint64_t *, char)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v5);
  return sub_100096B34;
}

uint64_t sub_1000BBCB0(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = a1[1];
  v3 = (_QWORD *)(a1[2] + *((int *)a1 + 6));
  v4 = *a1;
  v5 = v3[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(a1[1]);
    swift_bridgeObjectRelease(v5);
    *v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease(v2);
  }
  else
  {
    result = swift_bridgeObjectRelease(v3[1]);
    *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

BOOL sub_1000BBD1C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32) + 8) != 0;
}

uint64_t sub_1000BBD48()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32));
  result = swift_bridgeObjectRelease(v1[1]);
  *v1 = 0;
  v1[1] = 0;
  return result;
}

uint64_t sub_1000BBD7C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149B64();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000BBDB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149B20();
  return Enum.hash(into:)(a1, a2, v4);
}

int *sub_1000BBDEC@<X0>(uint64_t a1@<X8>)
{
  int *result;
  _QWORD *v3;
  _QWORD *v4;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(_BYTE *)(a1 + result[5]) = 5;
  *(_BYTE *)(a1 + result[6]) = 3;
  v3 = (_QWORD *)(a1 + result[7]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(a1 + result[8]);
  *v4 = 0;
  v4[1] = 0;
  return result;
}

_UNKNOWN **sub_1000BBE44()
{
  return &off_100354698;
}

void sub_1000BBE50(_QWORD *a1@<X8>)
{
  *a1 = &off_1003546C0;
}

_UNKNOWN **sub_1000BBE60()
{
  return &off_1003546E8;
}

void sub_1000BBE6C(_QWORD *a1@<X8>)
{
  *a1 = &off_100354710;
}

uint64_t sub_1000BBE7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000BBEA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010FF18(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000BC024(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000BC18C;
}

void sub_1000BC18C(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000BBEA0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000BC1A0()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BC1C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010FF18(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000BC2F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000BC31C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010FF18(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000BC4A0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000BC608;
}

void sub_1000BC608(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000BC31C, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000BC61C()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BC640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010FF18(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000BC774@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000BC798(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010FF18(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000BC91C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000BCA84;
}

void sub_1000BCA84(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000BC798, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000BCA98()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BCABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010FF18(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000BCBF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100034834(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000BCC14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010FF18(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E458);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E458);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000BCD98(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E458);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E458);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000BCF00;
}

void sub_1000BCF00(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000BCC14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000BCF14()
{
  return sub_10001CFF4(&qword_10036E458, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000BCF38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010FF18(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E458);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000BD06C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE v12[24];

  v3 = sub_1000039AC(&qword_10036E590);
  __chkstk_darwin(v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10000E660(v6, (uint64_t)v5, &qword_10036E590);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return sub_100003E08((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 5;
  *(_BYTE *)(a1 + v7[6]) = 3;
  v8 = (_QWORD *)(a1 + v7[7]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(a1 + v7[8]);
  *v9 = 0;
  v9[1] = 0;
  return sub_100015704((uint64_t)v5, &qword_10036E590);
}

uint64_t sub_1000BD1A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E590);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010FF18(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E590);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E590);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000BD324(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E590);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E590);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v9[v6[6]] = 3;
    v11 = &v9[v6[7]];
    *v11 = 0;
    v11[1] = 0;
    v12 = &v9[v6[8]];
    *v12 = 0;
    v12[1] = 0;
    sub_100015704((uint64_t)v5, &qword_10036E590);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  }
  return sub_1000BD488;
}

void sub_1000BD488(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000BD1A0, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

BOOL sub_1000BD49C()
{
  return sub_10001CFF4(&qword_10036E590, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t sub_1000BD4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E590);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010FF18(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E590);
  swift_endAccess(v16);
  return swift_release(v11);
}

uint64_t sub_1000BD5F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD618(&qword_10036E460, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t sub_1000BD618@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v20[24];

  v11 = sub_1000039AC(a1);
  __chkstk_darwin(v11);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = *(_QWORD *)(v5 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess(v14, v20, 0, 0);
  sub_10000E660(v14, (uint64_t)v13, a1);
  v15 = a4(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15) != 1)
    return sub_100003E08((uint64_t)v13, a5, a4);
  UnknownStorage.init()();
  v16 = a5 + *(int *)(v15 + 20);
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = a5 + *(int *)(v15 + 24);
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  return sub_100015704((uint64_t)v13, a1);
}

uint64_t sub_1000BD748(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10036E460);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v10)) & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + v10);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = swift_retain(v11);
    sub_10010FF18(v14);
    swift_release(v11);
    v15 = *(_QWORD *)(v2 + v10);
    *(_QWORD *)(v2 + v10) = v13;
    swift_release(v15);
  }
  v16 = *(_QWORD *)(v2 + v10);
  sub_100003E08(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  sub_10000E530((uint64_t)v9, (uint64_t)v7, &qword_10036E460);
  v18 = v16
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v16+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, v21, 33, 0);
  swift_retain(v16);
  sub_10000E574((uint64_t)v7, v18, &qword_10036E460);
  swift_endAccess(v21);
  return swift_release(v16);
}

void (*sub_1000BD8CC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1000039AC(&qword_10036E460);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v10, v3, 0, 0);
  sub_10000E660(v10, (uint64_t)v5, &qword_10036E460);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    sub_100015704((uint64_t)v5, &qword_10036E460);
  }
  else
  {
    sub_100003E08((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return sub_1000BDA24;
}

void sub_1000BDA24(uint64_t a1, char a2)
{
  sub_10001CF3C(a1, a2, (void (*)(void *))sub_1000BD748, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL sub_1000BDA38()
{
  return sub_10001CFF4(&qword_10036E460, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000BDA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v5)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + v5);
    v7 = type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = swift_retain(v6);
    sub_10010FF18(v9);
    swift_release(v6);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v1 + v5);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = v11
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v11+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, v16, 33, 0);
  swift_retain(v11);
  sub_10000E574((uint64_t)v4, v13, &qword_10036E460);
  swift_endAccess(v16);
  return swift_release(v11);
}

double sub_1000BDB90()
{
  return sub_10002AA48(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

uint64_t sub_1000BDBA4(double a1)
{
  return sub_10008BCE8(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass, (void (*)(uint64_t))sub_10010FF18, OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM, a1);
}

void (*sub_1000BDBC8(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  swift_beginAccess(v5, v3, 0, 0);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000BDC58;
}

void sub_1000BDC58(uint64_t *a1, char a2)
{
  sub_10008BE68(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass, (void (*)(uint64_t))sub_10010FF18, OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

BOOL sub_1000BDC74()
{
  return sub_100024E28(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

uint64_t sub_1000BDC88()
{
  return sub_10008BF94(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass, (void (*)(uint64_t))sub_10010FF18, OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

uint64_t sub_1000BDCAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &qword_100394608, &qword_100394610, (uint64_t)sub_100106F38, a1);
}

uint64_t sub_1000BDCD0()
{
  return sub_100036594(&qword_100394608, &qword_100394610, (uint64_t)sub_100106F38);
}

double sub_1000BDCEC()
{
  return sub_10001FBC0(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDCF8(double a1)
{
  return sub_10001FC04(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*sub_1000BDD04(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000BDD5C()
{
  return sub_10001FCA0(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDD68()
{
  return sub_10001FCDC(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

double sub_1000BDD74()
{
  return sub_10001FD18(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDD80(double a1)
{
  return sub_10001FD5C(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*sub_1000BDD8C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000BDDE4()
{
  return sub_1000050AC(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDDF0()
{
  return sub_1000050E8(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDDFC()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28));
  if (v1 == 3)
    return 0;
  else
    return v1;
}

uint64_t sub_1000BDE24(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000BDE50(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BDE9C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28)) != 3;
}

uint64_t sub_1000BDEC4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(_BYTE *)(v0 + *(int *)(result + 28)) = 3;
  return result;
}

uint64_t sub_1000BDEE8()
{
  return sub_1000B4EE4(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDEF4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000BDF20(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BDF6C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 32)) != 4;
}

uint64_t sub_1000BDF94()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(_BYTE *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

double sub_1000BDFB8()
{
  return sub_10002A164(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BDFC4(double a1)
{
  return sub_10002A1A8(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*sub_1000BDFD0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return sub_100003420;
}

BOOL sub_1000BE028()
{
  return sub_10002A244(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BE034()
{
  return sub_10002A280(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BE040()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t sub_1000BE068(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1000BE094(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BE0E0()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40)) != 4;
}

uint64_t sub_1000BE108()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(_BYTE *)(v0 + *(int *)(result + 40)) = 4;
  return result;
}

uint64_t sub_1000BE12C()
{
  return sub_1000A3B24(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BE138(char a1)
{
  return sub_1000A3B58(a1, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t (*sub_1000BE144(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_100004330;
}

BOOL sub_1000BE18C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 44)) != 2;
}

uint64_t sub_1000BE1B4()
{
  uint64_t v0;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(_BYTE *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

float sub_1000BE1D8()
{
  return sub_1000B3B20(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BE1E4(float a1)
{
  return sub_1000B3B64(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*sub_1000BE1F0(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 48);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_100003530;
}

BOOL sub_1000BE248()
{
  return sub_1000B3C00(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000BE254()
{
  return sub_1000B3C3C(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

int *sub_1000BE260@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_BYTE *)(a1 + result[7]) = 3;
  *(_BYTE *)(a1 + result[8]) = 4;
  v5 = a1 + result[9];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_BYTE *)(a1 + result[10]) = 4;
  *(_BYTE *)(a1 + result[11]) = 2;
  v6 = a1 + result[12];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

double sub_1000BE2F8()
{
  return sub_1000BE304(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

double sub_1000BE304(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 16, v4, 0, 0);
  result = *(double *)(v2 + 16);
  if (*(_BYTE *)(v2 + 24))
    return 0.0;
  return result;
}

uint64_t sub_1000BE360(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 16, v11, 1, 0);
  *(double *)(v9 + 16) = a1;
  *(_BYTE *)(v9 + 24) = 0;
  return result;
}

void (*sub_1000BE400(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0, 0);
  v6 = *(double *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000BE484;
}

void sub_1000BE484(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 16, v6, 1, 0);
  *(_QWORD *)(v13 + 16) = v4;
  *(_BYTE *)(v13 + 24) = 0;
  free((void *)v3);
}

BOOL sub_1000BE550()
{
  return sub_1000BE55C(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL sub_1000BE55C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 16, v4, 0, 0);
  return (*(_BYTE *)(v2 + 24) & 1) == 0;
}

uint64_t sub_1000BE5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 16, v9, 1, 0);
  *(_QWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 24) = 1;
  return result;
}

double sub_1000BE648()
{
  return sub_10009B568(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t sub_1000BE654(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 32, v11, 1, 0);
  *(double *)(v9 + 32) = a1;
  *(_BYTE *)(v9 + 40) = 0;
  return result;
}

void (*sub_1000BE6F4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0, 0);
  v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return sub_1000BE778;
}

void sub_1000BE778(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 80)
                                                                                            + *(int *)(*a1 + 88)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 88);
    v8 = *(_QWORD *)(v3 + 80);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess(v13 + 32, v6, 1, 0);
  *(_QWORD *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  free((void *)v3);
}

BOOL sub_1000BE844()
{
  return sub_10009B7D0(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t sub_1000BE850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 32, v9, 1, 0);
  *(_QWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 40) = 1;
  return result;
}

float sub_1000BE8E8()
{
  uint64_t v0;
  uint64_t v1;
  float result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 44, v3, 0, 0);
  result = *(float *)(v1 + 44);
  if (*(_BYTE *)(v1 + 48))
    return 0.0;
  return result;
}

uint64_t sub_1000BE940(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 44, v11, 1, 0);
  *(float *)(v9 + 44) = a1;
  *(_BYTE *)(v9 + 48) = 0;
  return result;
}

void (*sub_1000BE9E0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 44, v3, 0, 0);
  v6 = *(float *)(v5 + 44);
  if (*(_BYTE *)(v5 + 48))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000BEA64;
}

void sub_1000BEA64(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 44, v6, 1, 0);
  *(_DWORD *)(v13 + 44) = v4;
  *(_BYTE *)(v13 + 48) = 0;
  free((void *)v3);
}

BOOL sub_1000BEB30()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 44, v3, 0, 0);
  return (*(_BYTE *)(v1 + 48) & 1) == 0;
}

uint64_t sub_1000BEB80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 44, v9, 1, 0);
  *(_DWORD *)(v7 + 44) = 0;
  *(_BYTE *)(v7 + 48) = 1;
  return result;
}

float sub_1000BEC18()
{
  uint64_t v0;
  uint64_t v1;
  float result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 52, v3, 0, 0);
  result = *(float *)(v1 + 52);
  if (*(_BYTE *)(v1 + 56))
    return 0.0;
  return result;
}

uint64_t sub_1000BEC70(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 52, v11, 1, 0);
  *(float *)(v9 + 52) = a1;
  *(_BYTE *)(v9 + 56) = 0;
  return result;
}

void (*sub_1000BED10(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 52, v3, 0, 0);
  v6 = *(float *)(v5 + 52);
  if (*(_BYTE *)(v5 + 56))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000BED94;
}

void sub_1000BED94(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 52, v6, 1, 0);
  *(_DWORD *)(v13 + 52) = v4;
  *(_BYTE *)(v13 + 56) = 0;
  free((void *)v3);
}

BOOL sub_1000BEE60()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 52, v3, 0, 0);
  return (*(_BYTE *)(v1 + 56) & 1) == 0;
}

uint64_t sub_1000BEEB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 52, v9, 1, 0);
  *(_DWORD *)(v7 + 52) = 0;
  *(_BYTE *)(v7 + 56) = 1;
  return result;
}

float sub_1000BEF48()
{
  uint64_t v0;
  uint64_t v1;
  float result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 60, v3, 0, 0);
  result = *(float *)(v1 + 60);
  if (*(_BYTE *)(v1 + 64))
    return 0.0;
  return result;
}

uint64_t sub_1000BEFA0(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 60, v11, 1, 0);
  *(float *)(v9 + 60) = a1;
  *(_BYTE *)(v9 + 64) = 0;
  return result;
}

void (*sub_1000BF040(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 60, v3, 0, 0);
  v6 = *(float *)(v5 + 60);
  if (*(_BYTE *)(v5 + 64))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000BF0C4;
}

void sub_1000BF0C4(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 60, v6, 1, 0);
  *(_DWORD *)(v13 + 60) = v4;
  *(_BYTE *)(v13 + 64) = 0;
  free((void *)v3);
}

BOOL sub_1000BF190()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 60, v3, 0, 0);
  return (*(_BYTE *)(v1 + 64) & 1) == 0;
}

uint64_t sub_1000BF1E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 60, v9, 1, 0);
  *(_DWORD *)(v7 + 60) = 0;
  *(_BYTE *)(v7 + 64) = 1;
  return result;
}

float sub_1000BF278()
{
  uint64_t v0;
  uint64_t v1;
  float result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 68, v3, 0, 0);
  result = *(float *)(v1 + 68);
  if (*(_BYTE *)(v1 + 72))
    return 0.0;
  return result;
}

uint64_t sub_1000BF2D0(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 68, v11, 1, 0);
  *(float *)(v9 + 68) = a1;
  *(_BYTE *)(v9 + 72) = 0;
  return result;
}

void (*sub_1000BF370(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 68, v3, 0, 0);
  v6 = *(float *)(v5 + 68);
  if (*(_BYTE *)(v5 + 72))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000BF3F4;
}

void sub_1000BF3F4(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 68, v6, 1, 0);
  *(_DWORD *)(v13 + 68) = v4;
  *(_BYTE *)(v13 + 72) = 0;
  free((void *)v3);
}

BOOL sub_1000BF4C0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 68, v3, 0, 0);
  return (*(_BYTE *)(v1 + 72) & 1) == 0;
}

uint64_t sub_1000BF510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 68, v9, 1, 0);
  *(_DWORD *)(v7 + 68) = 0;
  *(_BYTE *)(v7 + 72) = 1;
  return result;
}

float sub_1000BF5A8()
{
  uint64_t v0;
  uint64_t v1;
  float result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 76, v3, 0, 0);
  result = *(float *)(v1 + 76);
  if (*(_BYTE *)(v1 + 80))
    return 0.0;
  return result;
}

uint64_t sub_1000BF600(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 76, v11, 1, 0);
  *(float *)(v9 + 76) = a1;
  *(_BYTE *)(v9 + 80) = 0;
  return result;
}

void (*sub_1000BF6A0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 76, v3, 0, 0);
  v6 = *(float *)(v5 + 76);
  if (*(_BYTE *)(v5 + 80))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000BF724;
}

void sub_1000BF724(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 76, v6, 1, 0);
  *(_DWORD *)(v13 + 76) = v4;
  *(_BYTE *)(v13 + 80) = 0;
  free((void *)v3);
}

BOOL sub_1000BF7F0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 76, v3, 0, 0);
  return (*(_BYTE *)(v1 + 80) & 1) == 0;
}

uint64_t sub_1000BF840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 76, v9, 1, 0);
  *(_DWORD *)(v7 + 76) = 0;
  *(_BYTE *)(v7 + 80) = 1;
  return result;
}

float sub_1000BF8D8()
{
  uint64_t v0;
  uint64_t v1;
  float result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 84, v3, 0, 0);
  result = *(float *)(v1 + 84);
  if (*(_BYTE *)(v1 + 88))
    return 0.0;
  return result;
}

uint64_t sub_1000BF930(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 84, v11, 1, 0);
  *(float *)(v9 + 84) = a1;
  *(_BYTE *)(v9 + 88) = 0;
  return result;
}

void (*sub_1000BF9D0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 84, v3, 0, 0);
  v6 = *(float *)(v5 + 84);
  if (*(_BYTE *)(v5 + 88))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000BFA54;
}

void sub_1000BFA54(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 84, v6, 1, 0);
  *(_DWORD *)(v13 + 84) = v4;
  *(_BYTE *)(v13 + 88) = 0;
  free((void *)v3);
}

BOOL sub_1000BFB20()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 84, v3, 0, 0);
  return (*(_BYTE *)(v1 + 88) & 1) == 0;
}

uint64_t sub_1000BFB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 84, v9, 1, 0);
  *(_DWORD *)(v7 + 84) = 0;
  *(_BYTE *)(v7 + 88) = 1;
  return result;
}

float sub_1000BFC08()
{
  return sub_1000BFC14(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float sub_1000BFC14(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 92, v4, 0, 0);
  result = *(float *)(v2 + 92);
  if (*(_BYTE *)(v2 + 96))
    return 0.0;
  return result;
}

uint64_t sub_1000BFC70(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 92, v11, 1, 0);
  *(float *)(v9 + 92) = a1;
  *(_BYTE *)(v9 + 96) = 0;
  return result;
}

void (*sub_1000BFD10(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 92, v3, 0, 0);
  v6 = *(float *)(v5 + 92);
  if (*(_BYTE *)(v5 + 96))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000BFD94;
}

void sub_1000BFD94(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 92, v6, 1, 0);
  *(_DWORD *)(v13 + 92) = v4;
  *(_BYTE *)(v13 + 96) = 0;
  free((void *)v3);
}

BOOL sub_1000BFE60()
{
  return sub_1000BFE6C(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL sub_1000BFE6C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 92, v4, 0, 0);
  return (*(_BYTE *)(v2 + 96) & 1) == 0;
}

uint64_t sub_1000BFEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 92, v9, 1, 0);
  *(_DWORD *)(v7 + 92) = 0;
  *(_BYTE *)(v7 + 96) = 1;
  return result;
}

float sub_1000BFF58()
{
  return sub_1000BFF64(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float sub_1000BFF64(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 100, v4, 0, 0);
  result = *(float *)(v2 + 100);
  if (*(_BYTE *)(v2 + 104))
    return 0.0;
  return result;
}

uint64_t sub_1000BFFC0(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 100, v11, 1, 0);
  *(float *)(v9 + 100) = a1;
  *(_BYTE *)(v9 + 104) = 0;
  return result;
}

void (*sub_1000C0060(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 100, v3, 0, 0);
  v6 = *(float *)(v5 + 100);
  if (*(_BYTE *)(v5 + 104))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000C00E4;
}

void sub_1000C00E4(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 100, v6, 1, 0);
  *(_DWORD *)(v13 + 100) = v4;
  *(_BYTE *)(v13 + 104) = 0;
  free((void *)v3);
}

BOOL sub_1000C01B0()
{
  return sub_1000C01BC(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL sub_1000C01BC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 100, v4, 0, 0);
  return (*(_BYTE *)(v2 + 104) & 1) == 0;
}

uint64_t sub_1000C0210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 100, v9, 1, 0);
  *(_DWORD *)(v7 + 100) = 0;
  *(_BYTE *)(v7 + 104) = 1;
  return result;
}

float sub_1000C02A8()
{
  return sub_1000C02B4(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float sub_1000C02B4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 108, v4, 0, 0);
  result = *(float *)(v2 + 108);
  if (*(_BYTE *)(v2 + 112))
    return 0.0;
  return result;
}

uint64_t sub_1000C0310(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 108, v11, 1, 0);
  *(float *)(v9 + 108) = a1;
  *(_BYTE *)(v9 + 112) = 0;
  return result;
}

void (*sub_1000C03B0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 108, v3, 0, 0);
  v6 = *(float *)(v5 + 108);
  if (*(_BYTE *)(v5 + 112))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000C0434;
}

void sub_1000C0434(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 108, v6, 1, 0);
  *(_DWORD *)(v13 + 108) = v4;
  *(_BYTE *)(v13 + 112) = 0;
  free((void *)v3);
}

BOOL sub_1000C0500()
{
  return sub_1000C050C(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL sub_1000C050C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess(v2 + 108, v4, 0, 0);
  return (*(_BYTE *)(v2 + 112) & 1) == 0;
}

uint64_t sub_1000C0560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 108, v9, 1, 0);
  *(_DWORD *)(v7 + 108) = 0;
  *(_BYTE *)(v7 + 112) = 1;
  return result;
}

float sub_1000C05F8()
{
  uint64_t v0;
  uint64_t v1;
  float result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 116, v3, 0, 0);
  result = *(float *)(v1 + 116);
  if (*(_BYTE *)(v1 + 120))
    return 0.0;
  return result;
}

uint64_t sub_1000C0650(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 116, v11, 1, 0);
  *(float *)(v9 + 116) = a1;
  *(_BYTE *)(v9 + 120) = 0;
  return result;
}

void (*sub_1000C06F0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 116, v3, 0, 0);
  v6 = *(float *)(v5 + 116);
  if (*(_BYTE *)(v5 + 120))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000C0774;
}

void sub_1000C0774(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 116, v6, 1, 0);
  *(_DWORD *)(v13 + 116) = v4;
  *(_BYTE *)(v13 + 120) = 0;
  free((void *)v3);
}

BOOL sub_1000C0840()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 116, v3, 0, 0);
  return (*(_BYTE *)(v1 + 120) & 1) == 0;
}

uint64_t sub_1000C0890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 116, v9, 1, 0);
  *(_DWORD *)(v7 + 116) = 0;
  *(_BYTE *)(v7 + 120) = 1;
  return result;
}

float sub_1000C0928()
{
  uint64_t v0;
  uint64_t v1;
  float result;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 124, v3, 0, 0);
  result = *(float *)(v1 + 124);
  if (*(_BYTE *)(v1 + 128))
    return 0.0;
  return result;
}

uint64_t sub_1000C0980(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 124, v11, 1, 0);
  *(float *)(v9 + 124) = a1;
  *(_BYTE *)(v9 + 128) = 0;
  return result;
}

void (*sub_1000C0A20(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 124, v3, 0, 0);
  v6 = *(float *)(v5 + 124);
  if (*(_BYTE *)(v5 + 128))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return sub_1000C0AA4;
}

void sub_1000C0AA4(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess(v13 + 124, v6, 1, 0);
  *(_DWORD *)(v13 + 124) = v4;
  *(_BYTE *)(v13 + 128) = 0;
  free((void *)v3);
}

BOOL sub_1000C0B70()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 124, v3, 0, 0);
  return (*(_BYTE *)(v1 + 128) & 1) == 0;
}

uint64_t sub_1000C0BC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 124, v9, 1, 0);
  *(_DWORD *)(v7 + 124) = 0;
  *(_BYTE *)(v7 + 128) = 1;
  return result;
}

uint64_t sub_1000C0C58()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 129, v3, 0, 0);
  if (*(_BYTE *)(v1 + 129) == 3)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 129);
}

uint64_t sub_1000C0CA8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 129, v11, 1, 0);
  *(_BYTE *)(v9 + 129) = a1;
  return result;
}

void (*sub_1000C0D44(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 129, v3, 0, 0);
  v6 = *(unsigned __int8 *)(v5 + 129);
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return sub_1000C0DC0;
}

void sub_1000C0DC0(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 129);
  swift_beginAccess(v13, v6, 1, 0);
  *v13 = v4;
  free((void *)v3);
}

BOOL sub_1000C0E8C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 129, v3, 0, 0);
  return *(_BYTE *)(v1 + 129) != 3;
}

uint64_t sub_1000C0EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 129, v9, 1, 0);
  *(_BYTE *)(v7 + 129) = 3;
  return result;
}

uint64_t sub_1000C0F70()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 130, v3, 0, 0);
  return *(_BYTE *)(v1 + 130) & 1;
}

uint64_t sub_1000C0FBC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 130, v11, 1, 0);
  *(_BYTE *)(v9 + 130) = a1 & 1;
  return result;
}

void (*sub_1000C105C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 130, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 130) & 1;
  return sub_1000C10D4;
}

void sub_1000C10D4(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v13 + 130, v6, 1, 0);
  *(_BYTE *)(v13 + 130) = v4;
  free((void *)v3);
}

BOOL sub_1000C1198()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 130, v3, 0, 0);
  return *(_BYTE *)(v1 + 130) != 2;
}

uint64_t sub_1000C11E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 130, v9, 1, 0);
  *(_BYTE *)(v7 + 130) = 2;
  return result;
}

uint64_t sub_1000C127C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 131, v3, 0, 0);
  return *(_BYTE *)(v1 + 131) & 1;
}

uint64_t sub_1000C12C8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 131, v11, 1, 0);
  *(_BYTE *)(v9 + 131) = a1 & 1;
  return result;
}

void (*sub_1000C1368(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 131, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 131) & 1;
  return sub_1000C13E0;
}

void sub_1000C13E0(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v13 + 131, v6, 1, 0);
  *(_BYTE *)(v13 + 131) = v4;
  free((void *)v3);
}

BOOL sub_1000C14A4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 131, v3, 0, 0);
  return *(_BYTE *)(v1 + 131) != 2;
}

uint64_t sub_1000C14F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 131, v9, 1, 0);
  *(_BYTE *)(v7 + 131) = 2;
  return result;
}

uint64_t sub_1000C1588()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 132, v3, 0, 0);
  return *(_BYTE *)(v1 + 132) & 1;
}

uint64_t sub_1000C15D4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v4)) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v7 = swift_allocObject(v6, 133, 7);
    sub_10011041C(v5);
    v8 = *(_QWORD *)(v2 + v4);
    *(_QWORD *)(v2 + v4) = v7;
    swift_release(v8);
  }
  v9 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess(v9 + 132, v11, 1, 0);
  *(_BYTE *)(v9 + 132) = a1 & 1;
  return result;
}

void (*sub_1000C1674(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess(v5 + 132, v3, 0, 0);
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 132) & 1;
  return sub_1000C16EC;
}

void sub_1000C16EC(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(*(_QWORD *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 72);
    v9 = *(_QWORD *)(v8 + v7);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v11 = swift_allocObject(v10, 133, 7);
    sub_10011041C(v9);
    v12 = *(_QWORD *)(v8 + v7);
    *(_QWORD *)(v8 + v7) = v11;
    swift_release(v12);
  }
LABEL_4:
  v13 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess(v13 + 132, v6, 1, 0);
  *(_BYTE *)(v13 + 132) = v4;
  free((void *)v3);
}

BOOL sub_1000C17B0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess(v1 + 132, v3, 0, 0);
  return *(_BYTE *)(v1 + 132) != 2;
}

uint64_t sub_1000C1800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + v2)) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v5 = swift_allocObject(v4, 133, 7);
    sub_10011041C(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    swift_release(v6);
  }
  v7 = *(_QWORD *)(v1 + v2);
  result = swift_beginAccess(v7 + 132, v9, 1, 0);
  *(_BYTE *)(v7 + 132) = 2;
  return result;
}

uint64_t sub_1000C1894(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100149ADC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000C18CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100023FF4(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, &qword_100394628, &qword_100394630, (uint64_t)sub_100109D64, a1);
}

uint64_t sub_1000C18F0()
{
  return sub_100036594(&qword_100394628, &qword_100394630, (uint64_t)sub_100109D64);
}

_UNKNOWN **sub_1000C190C()
{
  return &off_100354738;
}

void sub_1000C1918(_QWORD *a1@<X8>)
{
  *a1 = &off_100354760;
}

uint64_t sub_1000C1928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383578);
  sub_10000E6A4(v0, (uint64_t)qword_100383578);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "CLRF_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "CLRF_WGS84";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "CLRF_CHINA_SHIFTED";
  *(_QWORD *)(v14 + 8) = 18;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C1AB8()
{
  return sub_100008BD0(&qword_1003940C0, (uint64_t)qword_100383578, (uint64_t)sub_1000C1928);
}

uint64_t sub_1000C1AD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003940C0, (uint64_t)qword_100383578, (uint64_t)sub_1000C1928, a1);
}

uint64_t sub_1000C1AF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003940C0, (uint64_t)qword_100383578, (uint64_t)sub_1000C1928, a1);
}

uint64_t sub_1000C1B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v37;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383590);
  sub_10000E6A4(v0, (uint64_t)qword_100383590);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v37 = swift_allocObject(v1, v6 + 14 * v4, v5 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_1002C4100;
  v7 = v37 + v6;
  v8 = v37 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v37 + v6) = 0;
  *(_QWORD *)v8 = "LT_UNKNOWN";
  *(_QWORD *)(v8 + 8) = 10;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "LT_GPS";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "LT_NMEA";
  *((_QWORD *)v14 + 1) = 7;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "LT_ACCESSORY";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "LT_WIFI";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "LT_SKYHOOK_OBSOLETE";
  *((_QWORD *)v20 + 1) = 19;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "LT_CELL";
  *((_QWORD *)v22 + 1) = 7;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 7;
  *(_QWORD *)v24 = "LT_LAC";
  *((_QWORD *)v24 + 1) = 6;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 8;
  *(_QWORD *)v25 = "LT_MCC";
  *(_QWORD *)(v25 + 8) = 6;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 9;
  *(_QWORD *)v27 = "LT_GPS_COARSE";
  *((_QWORD *)v27 + 1) = 13;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 10;
  *(_QWORD *)v29 = "LT_PIPELINE";
  *((_QWORD *)v29 + 1) = 11;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v7 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 11;
  *(_QWORD *)v31 = "LT_WIFI2";
  *((_QWORD *)v31 + 1) = 8;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v7 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 12;
  *(_QWORD *)v33 = "LT_COMPENSATED";
  *((_QWORD *)v33 + 1) = 14;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v7 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 13;
  *(_QWORD *)v35 = "LT_LOIOVERRIDE";
  *((_QWORD *)v35 + 1) = 14;
  v35[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v37);
}

uint64_t sub_1000C1EC4()
{
  return sub_100008BD0(&qword_1003940C8, (uint64_t)qword_100383590, (uint64_t)sub_1000C1B0C);
}

uint64_t sub_1000C1EE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003940C8, (uint64_t)qword_100383590, (uint64_t)sub_1000C1B0C, a1);
}

uint64_t sub_1000C1EFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003940C8, (uint64_t)qword_100383590, (uint64_t)sub_1000C1B0C, a1);
}

uint64_t sub_1000C1F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003835A8);
  sub_10000E6A4(v0, (uint64_t)qword_1003835A8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3140;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v8 = "CLIENT_SATELLITE_CONSTELLATION_UNKNOWN";
  *(_QWORD *)(v8 + 8) = 38;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6 + v4) = 1;
  *(_QWORD *)v12 = "CLIENT_SATELLITE_CONSTELLATION_GPS";
  *(_QWORD *)(v12 + 8) = 34;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "CLIENT_SATELLITE_CONSTELLATION_GLONASS";
  *((_QWORD *)v14 + 1) = 38;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "CLIENT_SATELLITE_CONSTELLATION_BEIDOU";
  *((_QWORD *)v16 + 1) = 37;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "CLIENT_SATELLITE_CONSTELLATION_GALILEO";
  *((_QWORD *)v18 + 1) = 38;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "CLIENT_SATELLITE_CONSTELLATION_QZSS";
  *((_QWORD *)v20 + 1) = 35;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "CLIENT_SATELLITE_CONSTELLATION_NAVIC";
  *((_QWORD *)v22 + 1) = 36;
  v22[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C217C()
{
  return sub_100008BD0(&qword_1003940D0, (uint64_t)qword_1003835A8, (uint64_t)sub_1000C1F18);
}

uint64_t sub_1000C2198@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003940D0, (uint64_t)qword_1003835A8, (uint64_t)sub_1000C1F18, a1);
}

uint64_t sub_1000C21B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003940D0, (uint64_t)qword_1003835A8, (uint64_t)sub_1000C1F18, a1);
}

uint64_t sub_1000C21D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003835C0);
  sub_10000E6A4(v0, (uint64_t)qword_1003835C0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "BATCHED_LOCATION_FIX_TYPE_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 33;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "BATCHED_LOCATION_FIX_TYPE_SCALED_INTERPOLATED";
  *(_QWORD *)(v13 + 8) = 45;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "BATCHED_LOCATION_FIX_TYPE_MAP_MATCHED_INTERPOLATED";
  *((_QWORD *)v15 + 1) = 50;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "BATCHED_LOCATION_FIX_TYPE_MAP_MATCHED_GNSS_FIX";
  *((_QWORD *)v17 + 1) = 46;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 4;
  *(_QWORD *)v18 = "BATCHED_LOCATION_FIX_TYPE_GNSS_FIX";
  *(_QWORD *)(v18 + 8) = 34;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C23D0()
{
  return sub_100008BD0(&qword_1003940D8, (uint64_t)qword_1003835C0, (uint64_t)sub_1000C21D0);
}

uint64_t sub_1000C23EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003940D8, (uint64_t)qword_1003835C0, (uint64_t)sub_1000C21D0, a1);
}

uint64_t sub_1000C2408@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003940D8, (uint64_t)qword_1003835C0, (uint64_t)sub_1000C21D0, a1);
}

uint64_t sub_1000C2424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003835D8);
  sub_10000E6A4(v0, (uint64_t)qword_1003835D8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "GNSS_MODE_OF_OPERATION_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 30;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "GNSS_MODE_OF_OPERATION_1HZ";
  *((_QWORD *)v13 + 1) = 26;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "GNSS_MODE_OF_OPERATION_RHYTHMIC";
  *(_QWORD *)(v14 + 8) = 31;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C25B4()
{
  return sub_100008BD0(&qword_1003940E0, (uint64_t)qword_1003835D8, (uint64_t)sub_1000C2424);
}

uint64_t sub_1000C25D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003940E0, (uint64_t)qword_1003835D8, (uint64_t)sub_1000C2424, a1);
}

uint64_t sub_1000C25EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003940E0, (uint64_t)qword_1003835D8, (uint64_t)sub_1000C2424, a1);
}

uint64_t sub_1000C2608()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003835F0);
  sub_10000E6A4(v0, (uint64_t)qword_1003835F0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 35;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_INVALID";
  *(_QWORD *)(v13 + 8) = 35;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_NON_WAKING";
  *((_QWORD *)v15 + 1) = 38;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_WAKING";
  *((_QWORD *)v17 + 1) = 34;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 4;
  *(_QWORD *)v18 = "RHYTHMIC_GNSS_PROACTIVE_NON_WAKING";
  *(_QWORD *)(v18 + 8) = 34;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C2808()
{
  return sub_100008BD0(&qword_1003940E8, (uint64_t)qword_1003835F0, (uint64_t)sub_1000C2608);
}

uint64_t sub_1000C2824@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003940E8, (uint64_t)qword_1003835F0, (uint64_t)sub_1000C2608, a1);
}

uint64_t sub_1000C2840@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003940E8, (uint64_t)qword_1003835F0, (uint64_t)sub_1000C2608, a1);
}

uint64_t sub_1000C285C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383608);
  sub_10000E6A4(v0, (uint64_t)qword_100383608);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "BATCH_MODE_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "BATCH_MODE_DISABLE_ON_WAKE";
  *((_QWORD *)v13 + 1) = 26;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "BATCH_MODE_ALLOW_DARK_WAKE";
  *(_QWORD *)(v14 + 8) = 26;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C29E8()
{
  return sub_100008BD0(&qword_1003940F0, (uint64_t)qword_100383608, (uint64_t)sub_1000C285C);
}

uint64_t sub_1000C2A04@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003940F0, (uint64_t)qword_100383608, (uint64_t)sub_1000C285C, a1);
}

uint64_t sub_1000C2A20@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003940F0, (uint64_t)qword_100383608, (uint64_t)sub_1000C285C, a1);
}

uint64_t sub_1000C2A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383620);
  sub_10000E6A4(v0, (uint64_t)qword_100383620);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "OPERATING_MODE_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 22;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "OPERATING_MODE_NORMAL";
  *(_QWORD *)(v13 + 8) = 21;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "OPERATING_MODE_TIME";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "OPERATING_MODE_SKIP_DEBOUNCE";
  *((_QWORD *)v17 + 1) = 28;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C2BF8()
{
  return sub_100008BD0(&qword_1003940F8, (uint64_t)qword_100383620, (uint64_t)sub_1000C2A3C);
}

uint64_t sub_1000C2C14@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003940F8, (uint64_t)qword_100383620, (uint64_t)sub_1000C2A3C, a1);
}

uint64_t sub_1000C2C30@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003940F8, (uint64_t)qword_100383620, (uint64_t)sub_1000C2A3C, a1);
}

uint64_t sub_1000C2C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383638);
  sub_10000E6A4(v0, (uint64_t)qword_100383638);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "PIPELINE_OPERATING_MODE_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 31;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "PIPELINE_OPERATING_MODE_INDOOR";
  *((_QWORD *)v13 + 1) = 30;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "PIPELINE_OPERATING_MODE_REGIONAL";
  *(_QWORD *)(v14 + 8) = 32;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C2DDC()
{
  return sub_100008BD0(&qword_100394100, (uint64_t)qword_100383638, (uint64_t)sub_1000C2C4C);
}

uint64_t sub_1000C2DF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394100, (uint64_t)qword_100383638, (uint64_t)sub_1000C2C4C, a1);
}

uint64_t sub_1000C2E14@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394100, (uint64_t)qword_100383638, (uint64_t)sub_1000C2C4C, a1);
}

uint64_t sub_1000C2E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  _QWORD *v122;
  char *v123;
  _QWORD *v124;
  char *v125;
  _QWORD *v126;
  char *v127;
  _QWORD *v128;
  char *v129;
  _QWORD *v130;
  char *v131;
  _QWORD *v132;
  char *v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  _QWORD *v137;
  char *v138;
  _QWORD *v139;
  char *v140;
  _QWORD *v141;
  char *v142;
  _QWORD *v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  _QWORD *v147;
  char *v148;
  uint64_t v150;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383650);
  sub_10000E6A4(v0, (uint64_t)qword_100383650);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v150 = swift_allocObject(v1, v6 + 72 * v4, v5 | 7);
  *(_OWORD *)(v150 + 16) = xmmword_1002CAAF0;
  v7 = v150 + v6;
  v8 = v150 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v150 + v6) = 0;
  *(_QWORD *)v8 = "DM_UNKNOWN";
  *(_QWORD *)(v8 + 8) = 10;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v150 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "DM_FROZEN";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v150 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "DM_STATIC";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v150 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "DM_MOVING";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v150 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "DM_WALKING";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v150 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "DM_DRIVING";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v150 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "DM_CYCLING";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v150 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 7;
  *(_QWORD *)v24 = "DM_SEMI_STATIONARY";
  *((_QWORD *)v24 + 1) = 18;
  v24[16] = 2;
  v11();
  v25 = v150 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 8;
  *(_QWORD *)v25 = "DM_RUNNING";
  *(_QWORD *)(v25 + 8) = 10;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v150 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 9;
  *(_QWORD *)v27 = "DM_MOVING_COARSE";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v150 + v6 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 10;
  *(_QWORD *)v29 = "DM_IN_VEHICLE_FROZEN";
  *((_QWORD *)v29 + 1) = 20;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v150 + v6 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 11;
  *(_QWORD *)v31 = "DM_IN_VEHICLE_STATIC";
  *((_QWORD *)v31 + 1) = 20;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v150 + v6 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 41;
  *(_QWORD *)v33 = "DM_WALKING_SLOW";
  *((_QWORD *)v33 + 1) = 15;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v150 + v6 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 52;
  *(_QWORD *)v35 = "DM_VEHICULAR_IN_HAND";
  *((_QWORD *)v35 + 1) = 20;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v150 + v6 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 56;
  *(_QWORD *)v37 = "DM_DRIVING_OTHER";
  *((_QWORD *)v37 + 1) = 16;
  v37[16] = 2;
  v11();
  v38 = (_QWORD *)(v150 + v6 + 15 * v4);
  v39 = (char *)v38 + *(int *)(v2 + 48);
  *v38 = 61;
  *(_QWORD *)v39 = "DM_MACHINE_WORKOUT";
  *((_QWORD *)v39 + 1) = 18;
  v39[16] = 2;
  v11();
  v40 = v150 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 16 * v4) = 62;
  *(_QWORD *)v40 = "DM_WORKOUT";
  *(_QWORD *)(v40 + 8) = 10;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  v41 = (_QWORD *)(v150 + v6 + 17 * v4);
  v42 = (char *)v41 + *(int *)(v2 + 48);
  *v41 = 63;
  *(_QWORD *)v42 = "DM_MULTI_SPORT_TRANSITION";
  *((_QWORD *)v42 + 1) = 25;
  v42[16] = 2;
  v11();
  v43 = (_QWORD *)(v150 + v6 + 18 * v4);
  v44 = (char *)v43 + *(int *)(v2 + 48);
  *v43 = 64;
  *(_QWORD *)v44 = "DM_INDOOR_SOCCER";
  *((_QWORD *)v44 + 1) = 16;
  v44[16] = 2;
  v11();
  v45 = (_QWORD *)(v150 + v6 + 19 * v4);
  v46 = (char *)v45 + *(int *)(v2 + 48);
  *v45 = 65;
  *(_QWORD *)v46 = "DM_AUSTRALIAN_FOOTBALL";
  *((_QWORD *)v46 + 1) = 22;
  v46[16] = 2;
  v11();
  v47 = (_QWORD *)(v150 + v6 + 20 * v4);
  v48 = (char *)v47 + *(int *)(v2 + 48);
  *v47 = 66;
  *(_QWORD *)v48 = "DM_PICKLEBALL";
  *((_QWORD *)v48 + 1) = 13;
  v48[16] = 2;
  v11();
  v49 = (_QWORD *)(v150 + v6 + 21 * v4);
  v50 = (char *)v49 + *(int *)(v2 + 48);
  *v49 = 100;
  *(_QWORD *)v50 = "DM_CYCLING_LEG";
  *((_QWORD *)v50 + 1) = 14;
  v50[16] = 2;
  v11();
  v51 = (_QWORD *)(v150 + v6 + 22 * v4);
  v52 = (char *)v51 + *(int *)(v2 + 48);
  *v51 = 2010;
  *(_QWORD *)v52 = "DM_STATIONARY_CYCLING";
  *((_QWORD *)v52 + 1) = 21;
  v52[16] = 2;
  v11();
  v53 = (_QWORD *)(v150 + v6 + 23 * v4);
  v54 = (char *)v53 + *(int *)(v2 + 48);
  *v53 = 2020;
  *(_QWORD *)v54 = "DM_CALISTHENICS";
  *((_QWORD *)v54 + 1) = 15;
  v54[16] = 2;
  v11();
  v55 = (_QWORD *)(v150 + v6 + 24 * v4);
  v56 = (char *)v55 + *(int *)(v2 + 48);
  *v55 = 2022;
  *(_QWORD *)v56 = "DM_FUNCTIONAL_STRENGTH";
  *((_QWORD *)v56 + 1) = 22;
  v56[16] = 2;
  v11();
  v57 = (_QWORD *)(v150 + v6 + 25 * v4);
  v58 = (char *)v57 + *(int *)(v2 + 48);
  *v57 = 2024;
  *(_QWORD *)v58 = "DM_CORE_TRAINING";
  *((_QWORD *)v58 + 1) = 16;
  v58[16] = 2;
  v11();
  v59 = (_QWORD *)(v150 + v6 + 26 * v4);
  v60 = (char *)v59 + *(int *)(v2 + 48);
  *v59 = 2048;
  *(_QWORD *)v60 = "DM_ELLIPTICAL";
  *((_QWORD *)v60 + 1) = 13;
  v60[16] = 2;
  v11();
  v61 = (_QWORD *)(v150 + v6 + 27 * v4);
  v62 = (char *)v61 + *(int *)(v2 + 48);
  *v61 = 2061;
  *(_QWORD *)v62 = "DM_CROSS_TRAINING";
  *((_QWORD *)v62 + 1) = 17;
  v62[16] = 2;
  v11();
  v63 = (_QWORD *)(v150 + v6 + 28 * v4);
  v64 = (char *)v63 + *(int *)(v2 + 48);
  *v63 = 2065;
  *(_QWORD *)v64 = "DM_STAIR_CLIMBING";
  *((_QWORD *)v64 + 1) = 17;
  v64[16] = 2;
  v11();
  v65 = (_QWORD *)(v150 + v6 + 29 * v4);
  v66 = (char *)v65 + *(int *)(v2 + 48);
  *v65 = 2068;
  *(_QWORD *)v66 = "DM_JUMP_ROPE";
  *((_QWORD *)v66 + 1) = 12;
  v66[16] = 2;
  v11();
  v67 = (_QWORD *)(v150 + v6 + 30 * v4);
  v68 = (char *)v67 + *(int *)(v2 + 48);
  *v67 = 2071;
  *(_QWORD *)v68 = "DM_ROWING";
  *((_QWORD *)v68 + 1) = 9;
  v68[16] = 2;
  v11();
  v69 = (_QWORD *)(v150 + v6 + 31 * v4);
  v70 = (char *)v69 + *(int *)(v2 + 48);
  *v69 = 2101;
  *(_QWORD *)v70 = "DM_COOL_DOWN";
  *((_QWORD *)v70 + 1) = 12;
  v70[16] = 2;
  v11();
  v71 = v150 + v6 + 32 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 32 * v4) = 2105;
  *(_QWORD *)v71 = "DM_PILATES";
  *(_QWORD *)(v71 + 8) = 10;
  *(_BYTE *)(v71 + 16) = 2;
  v11();
  v72 = (_QWORD *)(v150 + v6 + 33 * v4);
  v73 = (char *)v72 + *(int *)(v2 + 48);
  *v72 = 2150;
  *(_QWORD *)v73 = "DM_YOGA";
  *((_QWORD *)v73 + 1) = 7;
  v73[16] = 2;
  v11();
  v74 = (_QWORD *)(v150 + v6 + 34 * v4);
  v75 = (char *)v74 + *(int *)(v2 + 48);
  *v74 = 3015;
  *(_QWORD *)v75 = "DM_DANCING";
  *((_QWORD *)v75 + 1) = 10;
  v75[16] = 2;
  v11();
  v76 = (_QWORD *)(v150 + v6 + 35 * v4);
  v77 = (char *)v76 + *(int *)(v2 + 48);
  *v76 = 3016;
  *(_QWORD *)v77 = "DM_STEP_TRAINING";
  *((_QWORD *)v77 + 1) = 16;
  v77[16] = 2;
  v11();
  v78 = (_QWORD *)(v150 + v6 + 36 * v4);
  v79 = (char *)v78 + *(int *)(v2 + 48);
  *v78 = 11805;
  *(_QWORD *)v79 = "DM_PUSHING_WHEELCHAIR";
  *((_QWORD *)v79 + 1) = 21;
  v79[16] = 2;
  v11();
  v80 = (_QWORD *)(v150 + v6 + 37 * v4);
  v81 = (char *)v80 + *(int *)(v2 + 48);
  *v80 = 12150;
  *(_QWORD *)v81 = "DM_INDOOR_RUNNING";
  *((_QWORD *)v81 + 1) = 17;
  v81[16] = 2;
  v11();
  v82 = (_QWORD *)(v150 + v6 + 38 * v4);
  v83 = (char *)v82 + *(int *)(v2 + 48);
  *v82 = 15030;
  *(_QWORD *)v83 = "DM_BADMINTON";
  *((_QWORD *)v83 + 1) = 12;
  v83[16] = 2;
  v11();
  v84 = (_QWORD *)(v150 + v6 + 39 * v4);
  v85 = (char *)v84 + *(int *)(v2 + 48);
  *v84 = 15055;
  *(_QWORD *)v85 = "DM_BASKETBALL";
  *((_QWORD *)v85 + 1) = 13;
  v85[16] = 2;
  v11();
  v86 = (_QWORD *)(v150 + v6 + 40 * v4);
  v87 = (char *)v86 + *(int *)(v2 + 48);
  *v86 = 15100;
  *(_QWORD *)v87 = "DM_BOXING";
  *((_QWORD *)v87 + 1) = 9;
  v87[16] = 2;
  v11();
  v88 = (_QWORD *)(v150 + v6 + 41 * v4);
  v89 = (char *)v88 + *(int *)(v2 + 48);
  *v88 = 15110;
  *(_QWORD *)v89 = "DM_KICKBOXING";
  *((_QWORD *)v89 + 1) = 13;
  v89[16] = 2;
  v11();
  v90 = (_QWORD *)(v150 + v6 + 42 * v4);
  v91 = (char *)v90 + *(int *)(v2 + 48);
  *v90 = 15150;
  *(_QWORD *)v91 = "DM_CRICKET";
  *((_QWORD *)v91 + 1) = 10;
  v91[16] = 2;
  v11();
  v92 = (_QWORD *)(v150 + v6 + 43 * v4);
  v93 = (char *)v92 + *(int *)(v2 + 48);
  *v92 = 15230;
  *(_QWORD *)v93 = "DM_AMERICAN_FOOTBALL";
  *((_QWORD *)v93 + 1) = 20;
  v93[16] = 2;
  v11();
  v94 = (_QWORD *)(v150 + v6 + 44 * v4);
  v95 = (char *)v94 + *(int *)(v2 + 48);
  *v94 = 15240;
  *(_QWORD *)v95 = "DM_DISC_SPORTS";
  *((_QWORD *)v95 + 1) = 14;
  v95[16] = 2;
  v11();
  v96 = (_QWORD *)(v150 + v6 + 45 * v4);
  v97 = (char *)v96 + *(int *)(v2 + 48);
  *v96 = 15255;
  *(_QWORD *)v97 = "DM_GOLFING";
  *((_QWORD *)v97 + 1) = 10;
  v97[16] = 2;
  v11();
  v98 = (_QWORD *)(v150 + v6 + 46 * v4);
  v99 = (char *)v98 + *(int *)(v2 + 48);
  *v98 = 15330;
  *(_QWORD *)v99 = "DM_HANDBALL";
  *((_QWORD *)v99 + 1) = 11;
  v99[16] = 2;
  v11();
  v100 = (_QWORD *)(v150 + v6 + 47 * v4);
  v101 = (char *)v100 + *(int *)(v2 + 48);
  *v100 = 15350;
  *(_QWORD *)v101 = "DM_OUTDOOR_HOCKEY";
  *((_QWORD *)v101 + 1) = 17;
  v101[16] = 2;
  v11();
  v102 = (_QWORD *)(v150 + v6 + 48 * v4);
  v103 = (char *)v102 + *(int *)(v2 + 48);
  *v102 = 15360;
  *(_QWORD *)v103 = "DM_INDOOR_HOCKEY";
  *((_QWORD *)v103 + 1) = 16;
  v103[16] = 2;
  v11();
  v104 = (_QWORD *)(v150 + v6 + 49 * v4);
  v105 = (char *)v104 + *(int *)(v2 + 48);
  *v104 = 15460;
  *(_QWORD *)v105 = "DM_LACROSSE";
  *((_QWORD *)v105 + 1) = 11;
  v105[16] = 2;
  v11();
  v106 = (_QWORD *)(v150 + v6 + 50 * v4);
  v107 = (char *)v106 + *(int *)(v2 + 48);
  *v106 = 15562;
  *(_QWORD *)v107 = "DM_RUGBY";
  *((_QWORD *)v107 + 1) = 8;
  v107[16] = 2;
  v11();
  v108 = (_QWORD *)(v150 + v6 + 51 * v4);
  v109 = (char *)v108 + *(int *)(v2 + 48);
  *v108 = 15592;
  *(_QWORD *)v109 = "DM_OUTDOOR_SKATING_SPORTS";
  *((_QWORD *)v109 + 1) = 25;
  v109[16] = 2;
  v11();
  v110 = (_QWORD *)(v150 + v6 + 52 * v4);
  v111 = (char *)v110 + *(int *)(v2 + 48);
  *v110 = 15610;
  *(_QWORD *)v111 = "DM_OUTDOOR_SOCCER";
  *((_QWORD *)v111 + 1) = 17;
  v111[16] = 2;
  v11();
  v112 = (_QWORD *)(v150 + v6 + 53 * v4);
  v113 = (char *)v112 + *(int *)(v2 + 48);
  *v112 = 15620;
  *(_QWORD *)v113 = "DM_SOFTBALL";
  *((_QWORD *)v113 + 1) = 11;
  v113[16] = 2;
  v11();
  v114 = (_QWORD *)(v150 + v6 + 54 * v4);
  v115 = (char *)v114 + *(int *)(v2 + 48);
  *v114 = 15652;
  *(_QWORD *)v115 = "DM_SQUASH";
  *((_QWORD *)v115 + 1) = 9;
  v115[16] = 2;
  v11();
  v116 = (_QWORD *)(v150 + v6 + 55 * v4);
  v117 = (char *)v116 + *(int *)(v2 + 48);
  *v116 = 15660;
  *(_QWORD *)v117 = "DM_TABLE_TENNIS";
  *((_QWORD *)v117 + 1) = 15;
  v117[16] = 2;
  v11();
  v118 = (_QWORD *)(v150 + v6 + 56 * v4);
  v119 = (char *)v118 + *(int *)(v2 + 48);
  *v118 = 15670;
  *(_QWORD *)v119 = "DM_TAI_CHI";
  *((_QWORD *)v119 + 1) = 10;
  v119[16] = 2;
  v11();
  v120 = (_QWORD *)(v150 + v6 + 57 * v4);
  v121 = (char *)v120 + *(int *)(v2 + 48);
  *v120 = 15675;
  *(_QWORD *)v121 = "DM_TENNIS";
  *((_QWORD *)v121 + 1) = 9;
  v121[16] = 2;
  v11();
  v122 = (_QWORD *)(v150 + v6 + 58 * v4);
  v123 = (char *)v122 + *(int *)(v2 + 48);
  *v122 = 15710;
  *(_QWORD *)v123 = "DM_VOLLEYBALL";
  *((_QWORD *)v123 + 1) = 13;
  v123[16] = 2;
  v11();
  v124 = (_QWORD *)(v150 + v6 + 59 * v4);
  v125 = (char *)v124 + *(int *)(v2 + 48);
  *v124 = 15733;
  *(_QWORD *)v125 = "DM_TRACK_AND_FIELD";
  *((_QWORD *)v125 + 1) = 18;
  v125[16] = 2;
  v11();
  v126 = (_QWORD *)(v150 + v6 + 60 * v4);
  v127 = (char *)v126 + *(int *)(v2 + 48);
  *v126 = 17150;
  *(_QWORD *)v127 = "DM_INDOOR_WALKING";
  *((_QWORD *)v127 + 1) = 17;
  v127[16] = 2;
  v11();
  v128 = (_QWORD *)(v150 + v6 + 61 * v4);
  v129 = (char *)v128 + *(int *)(v2 + 48);
  *v128 = 18070;
  *(_QWORD *)v129 = "DM_OUTDOOR_ROWING";
  *((_QWORD *)v129 + 1) = 17;
  v129[16] = 2;
  v11();
  v130 = (_QWORD *)(v150 + v6 + 62 * v4);
  v131 = (char *)v130 + *(int *)(v2 + 48);
  *v130 = 18200;
  *(_QWORD *)v131 = "DM_SCUBA_DIVING";
  *((_QWORD *)v131 + 1) = 15;
  v131[16] = 2;
  v11();
  v132 = (_QWORD *)(v150 + v6 + 63 * v4);
  v133 = (char *)v132 + *(int *)(v2 + 48);
  *v132 = 18225;
  *(_QWORD *)v133 = "DM_PADDLE_SPORTS";
  *((_QWORD *)v133 + 1) = 16;
  v133[16] = 2;
  v11();
  v134 = v150 + v6 + (v4 << 6) + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + (v4 << 6)) = 18240;
  *(_QWORD *)v134 = "DM_SWIMMING";
  *(_QWORD *)(v134 + 8) = 11;
  *(_BYTE *)(v134 + 16) = 2;
  v11();
  v135 = (_QWORD *)(v150 + v6 + 65 * v4);
  v136 = (char *)v135 + *(int *)(v2 + 48);
  *v135 = 19030;
  *(_QWORD *)v136 = "DM_INDOOR_SKATING_SPORTS";
  *((_QWORD *)v136 + 1) = 24;
  v136[16] = 2;
  v11();
  v137 = (_QWORD *)(v150 + v6 + 66 * v4);
  v138 = (char *)v137 + *(int *)(v2 + 48);
  *v137 = 19090;
  *(_QWORD *)v138 = "DM_CROSS_COUNTRY_SKIING";
  *((_QWORD *)v138 + 1) = 23;
  v138[16] = 2;
  v11();
  v139 = (_QWORD *)(v150 + v6 + 67 * v4);
  v140 = (char *)v139 + *(int *)(v2 + 48);
  *v139 = 19150;
  *(_QWORD *)v140 = "DM_DOWNHILL_SKIING";
  *((_QWORD *)v140 + 1) = 18;
  v140[16] = 2;
  v11();
  v141 = (_QWORD *)(v150 + v6 + 68 * v4);
  v142 = (char *)v141 + *(int *)(v2 + 48);
  *v141 = 19160;
  *(_QWORD *)v142 = "DM_SNOWBOARDING";
  *((_QWORD *)v142 + 1) = 15;
  v142[16] = 2;
  v11();
  v143 = (_QWORD *)(v150 + v6 + 69 * v4);
  v144 = (char *)v143 + *(int *)(v2 + 48);
  *v143 = 90603;
  *(_QWORD *)v144 = "DM_OUTDOOR_WHEELCHAIR";
  *((_QWORD *)v144 + 1) = 21;
  v144[16] = 2;
  v11();
  v145 = (_QWORD *)(v150 + v6 + 70 * v4);
  v146 = (char *)v145 + *(int *)(v2 + 48);
  *v145 = 515621;
  *(_QWORD *)v146 = "DM_BASEBALL";
  *((_QWORD *)v146 + 1) = 11;
  v146[16] = 2;
  v11();
  v147 = (_QWORD *)(v150 + v6 + 71 * v4);
  v148 = (char *)v147 + *(int *)(v2 + 48);
  *v147 = 515652;
  *(_QWORD *)v148 = "DM_RACQUETBALL";
  *((_QWORD *)v148 + 1) = 14;
  v148[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v150);
}

uint64_t sub_1000C3E84()
{
  return sub_100008BD0(&qword_100394108, (uint64_t)qword_100383650, (uint64_t)sub_1000C2E30);
}

uint64_t sub_1000C3EA0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394108, (uint64_t)qword_100383650, (uint64_t)sub_1000C2E30, a1);
}

uint64_t sub_1000C3EBC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394108, (uint64_t)qword_100383650, (uint64_t)sub_1000C2E30, a1);
}

uint64_t sub_1000C3ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383668);
  sub_10000E6A4(v0, (uint64_t)qword_100383668);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "RT_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "RT_UNAVAILABLE";
  *(_QWORD *)(v13 + 8) = 14;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "RT_SMALL";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "RT_LARGE";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 1001;
  *(_QWORD *)v18 = "RT_UNACHIEVABLE";
  *(_QWORD *)(v18 + 8) = 15;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C40DC()
{
  return sub_100008BD0(&qword_100394110, (uint64_t)qword_100383668, (uint64_t)sub_1000C3ED8);
}

uint64_t sub_1000C40F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394110, (uint64_t)qword_100383668, (uint64_t)sub_1000C3ED8, a1);
}

uint64_t sub_1000C4114@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394110, (uint64_t)qword_100383668, (uint64_t)sub_1000C3ED8, a1);
}

uint64_t sub_1000C4130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383680);
  sub_10000E6A4(v0, (uint64_t)qword_100383680);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "BC_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "BC_NONE";
  *(_QWORD *)(v13 + 8) = 7;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "BC_USB";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "BC_EXTERNAL";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 4;
  *(_QWORD *)v18 = "BC_ARCAS";
  *(_QWORD *)(v18 + 8) = 8;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C4330()
{
  return sub_100008BD0(&qword_100394118, (uint64_t)qword_100383680, (uint64_t)sub_1000C4130);
}

uint64_t sub_1000C434C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394118, (uint64_t)qword_100383680, (uint64_t)sub_1000C4130, a1);
}

uint64_t sub_1000C4368@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394118, (uint64_t)qword_100383680, (uint64_t)sub_1000C4130, a1);
}

uint64_t sub_1000C4384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383698);
  sub_10000E6A4(v0, (uint64_t)qword_100383698);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "SE_FIDELITY_LEVEL_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 25;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "SE_FIDELITY_LEVEL_UNAVAILABLE";
  *(_QWORD *)(v13 + 8) = 29;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "SE_FIDELITY_LEVEL_COARSE";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "SE_FIDELITY_LEVEL_HIGH_RESOLUTION";
  *((_QWORD *)v17 + 1) = 33;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C4540()
{
  return sub_100008BD0(&qword_100394120, (uint64_t)qword_100383698, (uint64_t)sub_1000C4384);
}

uint64_t sub_1000C455C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394120, (uint64_t)qword_100383698, (uint64_t)sub_1000C4384, a1);
}

uint64_t sub_1000C4578@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394120, (uint64_t)qword_100383698, (uint64_t)sub_1000C4384, a1);
}

uint64_t sub_1000C4594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003836B0);
  sub_10000E6A4(v0, (uint64_t)qword_1003836B0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40B0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = -1;
  *(_QWORD *)v9 = "CC_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 0;
  *(_QWORD *)v13 = "CC_UNRELIABLE";
  *(_QWORD *)(v13 + 8) = 13;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 1;
  *(_QWORD *)v15 = "CC_2DWEAK";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 2;
  *(_QWORD *)v17 = "CC_2DSTRONG";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 3;
  *(_QWORD *)v19 = "CC_3DWEAK";
  *((_QWORD *)v19 + 1) = 9;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 4;
  *(_QWORD *)v21 = "CC_3D";
  *((_QWORD *)v21 + 1) = 5;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 5;
  *(_QWORD *)v23 = "CC_3DSTRONG";
  *((_QWORD *)v23 + 1) = 11;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 6;
  *(_QWORD *)v25 = "CC_MAX";
  *((_QWORD *)v25 + 1) = 6;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C4834()
{
  return sub_100008BD0(&qword_100394128, (uint64_t)qword_1003836B0, (uint64_t)sub_1000C4594);
}

uint64_t sub_1000C4850@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394128, (uint64_t)qword_1003836B0, (uint64_t)sub_1000C4594, a1);
}

uint64_t sub_1000C486C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394128, (uint64_t)qword_1003836B0, (uint64_t)sub_1000C4594, a1);
}

uint64_t sub_1000C4888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003836C8);
  sub_10000E6A4(v0, (uint64_t)qword_1003836C8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "FM_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "FM_DEFAULT";
  *(_QWORD *)(v13 + 8) = 10;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "FM_NAVIGATION";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "FM_SWIM";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 4;
  *(_QWORD *)v18 = "FM_GAMING";
  *(_QWORD *)(v18 + 8) = 9;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C4A8C()
{
  return sub_100008BD0(&qword_100394130, (uint64_t)qword_1003836C8, (uint64_t)sub_1000C4888);
}

uint64_t sub_1000C4AA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394130, (uint64_t)qword_1003836C8, (uint64_t)sub_1000C4888, a1);
}

uint64_t sub_1000C4AC4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394130, (uint64_t)qword_1003836C8, (uint64_t)sub_1000C4888, a1);
}

uint64_t sub_1000C4AE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003836E0);
  sub_10000E6A4(v0, (uint64_t)qword_1003836E0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "AP_MODE_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 15;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "AP_MODE_IBSS";
  *(_QWORD *)(v13 + 8) = 12;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "AP_MODE_INFRA";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "AP_MODE_ANY";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C4C9C()
{
  return sub_100008BD0(&qword_100394138, (uint64_t)qword_1003836E0, (uint64_t)sub_1000C4AE0);
}

uint64_t sub_1000C4CB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394138, (uint64_t)qword_1003836E0, (uint64_t)sub_1000C4AE0, a1);
}

uint64_t sub_1000C4CD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394138, (uint64_t)qword_1003836E0, (uint64_t)sub_1000C4AE0, a1);
}

uint64_t sub_1000C4CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003836F8);
  sub_10000E6A4(v0, (uint64_t)qword_1003836F8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 16;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "BAND_2GHz";
  *(_QWORD *)(v13 + 8) = 9;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "BAND_5GHz";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "BAND_6GHz";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C4EAC()
{
  return sub_100008BD0(&qword_100394140, (uint64_t)qword_1003836F8, (uint64_t)sub_1000C4CF0);
}

uint64_t sub_1000C4EC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394140, (uint64_t)qword_1003836F8, (uint64_t)sub_1000C4CF0, a1);
}

uint64_t sub_1000C4EE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394140, (uint64_t)qword_1003836F8, (uint64_t)sub_1000C4CF0, a1);
}

uint64_t sub_1000C4F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v39;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383710);
  sub_10000E6A4(v0, (uint64_t)qword_100383710);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v39 = swift_allocObject(v1, v6 - v4 + 16 * v4, v5 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_1002CAB00;
  v7 = v39 + v6;
  v8 = v39 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v39 + v6) = 0;
  *(_QWORD *)v8 = "WS_UNKNOWN";
  *(_QWORD *)(v8 + 8) = 10;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v39 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "WS_HARVEST_2_GHZ_SET1";
  *(_QWORD *)(v12 + 8) = 21;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v39 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "WS_HARVEST_2_GHZ_SET2";
  *((_QWORD *)v14 + 1) = 21;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v39 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "WS_HARVEST_5_GHZ_SET1";
  *((_QWORD *)v16 + 1) = 21;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v39 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "WS_HARVEST_5_GHZ_SET2";
  *((_QWORD *)v18 + 1) = 21;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v39 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "WS_HARVEST_5_GHZ_SET3";
  *((_QWORD *)v20 + 1) = 21;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v39 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "WS_CACHED";
  *((_QWORD *)v22 + 1) = 9;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v39 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 7;
  *(_QWORD *)v24 = "WS_LOW_PRIORITY";
  *((_QWORD *)v24 + 1) = 15;
  v24[16] = 2;
  v11();
  v25 = v39 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 8;
  *(_QWORD *)v25 = "WS_CHANNEL";
  *(_QWORD *)(v25 + 8) = 10;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v39 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 9;
  *(_QWORD *)v27 = "WS_FAST";
  *((_QWORD *)v27 + 1) = 7;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v39 + v6 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 10;
  *(_QWORD *)v29 = "WS_STAGE1";
  *((_QWORD *)v29 + 1) = 9;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v39 + v6 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 11;
  *(_QWORD *)v31 = "WS_STAGE2";
  *((_QWORD *)v31 + 1) = 9;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v39 + v6 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 12;
  *(_QWORD *)v33 = "WS_NORMAL";
  *((_QWORD *)v33 + 1) = 9;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v39 + v6 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 13;
  *(_QWORD *)v35 = "WS_CUSTOM_SCAN_PARAMETERS";
  *((_QWORD *)v35 + 1) = 25;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v39 + v6 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 14;
  *(_QWORD *)v37 = "WS_5GHZ_STAGE1";
  *((_QWORD *)v37 + 1) = 14;
  v37[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v39);
}

uint64_t sub_1000C52EC()
{
  return sub_100008BD0(&qword_100394148, (uint64_t)qword_100383710, (uint64_t)sub_1000C4F00);
}

uint64_t sub_1000C5308@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394148, (uint64_t)qword_100383710, (uint64_t)sub_1000C4F00, a1);
}

uint64_t sub_1000C5324@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394148, (uint64_t)qword_100383710, (uint64_t)sub_1000C4F00, a1);
}

uint64_t sub_1000C5340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v39;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383728);
  sub_10000E6A4(v0, (uint64_t)qword_100383728);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v39 = swift_allocObject(v1, v6 - v4 + 16 * v4, v5 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_1002CAB00;
  v7 = v39 + v6;
  v8 = v39 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v39 + v6) = 0;
  *(_QWORD *)v8 = "WN_UNKNOWN";
  *(_QWORD *)(v8 + 8) = 10;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v39 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "WN_AVAILABLE";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v39 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "WN_POWER";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v39 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "WN_SCAN_READY";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v39 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "WN_SCAN";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v39 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "WN_SCAN_ERROR";
  *((_QWORD *)v20 + 1) = 13;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v39 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "WN_SCAN_ERROR_BUSY";
  *((_QWORD *)v22 + 1) = 18;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v39 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 7;
  *(_QWORD *)v24 = "WN_LINK_STATUS";
  *((_QWORD *)v24 + 1) = 14;
  v24[16] = 2;
  v11();
  v25 = v39 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 8;
  *(_QWORD *)v25 = "WN_ROAM";
  *(_QWORD *)(v25 + 8) = 7;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v39 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 9;
  *(_QWORD *)v27 = "WN_BACKGROUND_ENTRY";
  *((_QWORD *)v27 + 1) = 19;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v39 + v6 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 10;
  *(_QWORD *)v29 = "WN_BACKGROUND_EXIT";
  *((_QWORD *)v29 + 1) = 18;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v39 + v6 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 11;
  *(_QWORD *)v31 = "WN_TRACKING_AVAILABLE";
  *((_QWORD *)v31 + 1) = 21;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v39 + v6 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 12;
  *(_QWORD *)v33 = "WN_WOW";
  *((_QWORD *)v33 + 1) = 6;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v39 + v6 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 13;
  *(_QWORD *)v35 = "WN_SCAN_CACHE";
  *((_QWORD *)v35 + 1) = 13;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v39 + v6 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 14;
  *(_QWORD *)v37 = "WN_PEER_RANGING";
  *((_QWORD *)v37 + 1) = 15;
  v37[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v39);
}

uint64_t sub_1000C5744()
{
  return sub_100008BD0(&qword_100394150, (uint64_t)qword_100383728, (uint64_t)sub_1000C5340);
}

uint64_t sub_1000C5760@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394150, (uint64_t)qword_100383728, (uint64_t)sub_1000C5340, a1);
}

uint64_t sub_1000C577C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394150, (uint64_t)qword_100383728, (uint64_t)sub_1000C5340, a1);
}

uint64_t sub_1000C5798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383740);
  sub_10000E6A4(v0, (uint64_t)qword_100383740);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "LOCATION_SERVICES_ENABLED_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 33;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "LOCATION_SERVICES_ENABLED_NO";
  *(_QWORD *)(v13 + 8) = 28;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "LOCATION_SERVICES_ENABLED_YES";
  *((_QWORD *)v15 + 1) = 29;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "LOCATION_SERVICES_ENABLED_UNAVAILABLE";
  *((_QWORD *)v17 + 1) = 37;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C5954()
{
  return sub_100008BD0(&qword_100394158, (uint64_t)qword_100383740, (uint64_t)sub_1000C5798);
}

uint64_t sub_1000C5970@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394158, (uint64_t)qword_100383740, (uint64_t)sub_1000C5798, a1);
}

uint64_t sub_1000C598C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394158, (uint64_t)qword_100383740, (uint64_t)sub_1000C5798, a1);
}

uint64_t sub_1000C59A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383758);
  sub_10000E6A4(v0, (uint64_t)qword_100383758);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "DATA_AVAILABILITY_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 25;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "DATA_AVAILABILITY_UNAVAILABLE";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "DATA_AVAILABILITY_AVAILABLE";
  *(_QWORD *)(v14 + 8) = 27;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C5B38()
{
  return sub_100008BD0(&qword_100394160, (uint64_t)qword_100383758, (uint64_t)sub_1000C59A8);
}

uint64_t sub_1000C5B54@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394160, (uint64_t)qword_100383758, (uint64_t)sub_1000C59A8, a1);
}

uint64_t sub_1000C5B70@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394160, (uint64_t)qword_100383758, (uint64_t)sub_1000C59A8, a1);
}

uint64_t sub_1000C5B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383770);
  sub_10000E6A4(v0, (uint64_t)qword_100383770);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "INDOOR_OUTDOOR_TYPE_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 27;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "INDOOR_OUTDOOR_TYPE_INDOOR";
  *((_QWORD *)v13 + 1) = 26;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "INDOOR_OUTDOOR_TYPE_OUTDOOR";
  *(_QWORD *)(v14 + 8) = 27;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C5D1C()
{
  return sub_100008BD0(&qword_100394168, (uint64_t)qword_100383770, (uint64_t)sub_1000C5B8C);
}

uint64_t sub_1000C5D38@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394168, (uint64_t)qword_100383770, (uint64_t)sub_1000C5B8C, a1);
}

uint64_t sub_1000C5D54@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394168, (uint64_t)qword_100383770, (uint64_t)sub_1000C5B8C, a1);
}

uint64_t sub_1000C5D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383788);
  sub_10000E6A4(v0, (uint64_t)qword_100383788);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "INDOOR_OUTDOOR_CONFIDENCE_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 33;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "INDOOR_OUTDOOR_CONFIDENCE_LOW";
  *(_QWORD *)(v13 + 8) = 29;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "INDOOR_OUTDOOR_CONFIDENCE_MEDIUM";
  *((_QWORD *)v15 + 1) = 32;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "INDOOR_OUTDOOR_CONFIDENCE_HIGH";
  *((_QWORD *)v17 + 1) = 30;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C5F2C()
{
  return sub_100008BD0(&qword_100394170, (uint64_t)qword_100383788, (uint64_t)sub_1000C5D70);
}

uint64_t sub_1000C5F48@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394170, (uint64_t)qword_100383788, (uint64_t)sub_1000C5D70, a1);
}

uint64_t sub_1000C5F64@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394170, (uint64_t)qword_100383788, (uint64_t)sub_1000C5D70, a1);
}

void *sub_1000C5F80()
{
  return &unk_100353118;
}

unint64_t sub_1000C5F8C()
{
  return 0xD000000000000022;
}

uint64_t sub_1000C5FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003837A0);
  sub_10000E6A4(v0, (uint64_t)qword_1003837A0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "cf_absolute_time_s";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "mach_absolute_time_s";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "mach_continuous_time_s";
  *(_QWORD *)(v14 + 8) = 22;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C613C()
{
  return sub_100008BD0(&qword_100394178, (uint64_t)qword_1003837A0, (uint64_t)sub_1000C5FA8);
}

uint64_t sub_1000C6158@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394178, (uint64_t)qword_1003837A0, (uint64_t)sub_1000C5FA8, a1);
}

uint64_t sub_1000C6174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D4338(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000C6190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A7A0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000C61AC(uint64_t a1, uint64_t a2)
{
  return sub_1000656F0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp) & 1;
}

Swift::Int sub_1000C61CC()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, &qword_10036E598, (uint64_t)&unk_1002CF6A8);
}

uint64_t sub_1000C61E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375150, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF620);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C6238@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394178, (uint64_t)qword_1003837A0, (uint64_t)sub_1000C5FA8, a1);
}

uint64_t sub_1000C6254(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C6294(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C62E8()
{
  return &unk_100353128;
}

unint64_t sub_1000C62F4()
{
  return 0xD000000000000024;
}

uint64_t sub_1000C6310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003837B8);
  sub_10000E6A4(v0, (uint64_t)qword_1003837B8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "applicable_time";
  *(_QWORD *)(v9 + 8) = 15;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "x_mps2";
  *(_QWORD *)(v13 + 8) = 6;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "y_mps2";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "z_mps2";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C64D0()
{
  return sub_100008BD0(&qword_100394180, (uint64_t)qword_1003837B8, (uint64_t)sub_1000C6310);
}

uint64_t sub_1000C64EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394180, (uint64_t)qword_1003837B8, (uint64_t)sub_1000C6310, a1);
}

uint64_t sub_1000C6508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EDAF0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_1000C6524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C6E78(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_1000C6540(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return sub_10011C9CC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample) & 1;
}

Swift::Int sub_1000C6560()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &qword_10036E5A0, (uint64_t)&unk_1002CF810);
}

uint64_t sub_1000C6580(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375148, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&unk_1002CF788);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C65D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394180, (uint64_t)qword_1003837B8, (uint64_t)sub_1000C6310, a1);
}

uint64_t sub_1000C65EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E5A8, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&unk_1002CF710);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C662C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E5A8, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&unk_1002CF710);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C6680()
{
  return &unk_100353138;
}

unint64_t sub_1000C668C()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000C66A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003837D0);
  sub_10000E6A4(v0, (uint64_t)qword_1003837D0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "event_receipt_time";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "sample";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C6800()
{
  return sub_100008BD0(&qword_100394188, (uint64_t)qword_1003837D0, (uint64_t)sub_1000C66A8);
}

uint64_t sub_1000C681C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394188, (uint64_t)qword_1003837D0, (uint64_t)sub_1000C66A8, a1);
}

uint64_t sub_1000C6838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCC40(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &qword_10036E5A8, (uint64_t)&unk_1002CF710);
}

uint64_t sub_1000C686C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1000C6954(v3, a1, a2, a3);
  if (!v4)
  {
    v9 = *(_QWORD *)v3;
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0);
      v11 = sub_10000FD38(&qword_10036E5A8, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&unk_1002CF710);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2, v10, v11, a2, a3);
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000C6954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000C6AC8(uint64_t *a1, uint64_t *a2)
{
  return sub_100117738(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample) & 1;
}

Swift::Int sub_1000C6AF0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Accel, &qword_10036E5B0, (uint64_t)&unk_1002CF978);
}

uint64_t sub_1000C6B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C686C(a1, a2, a3);
}

uint64_t sub_1000C6B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375140, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&unk_1002CF8F0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C6B74@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394188, (uint64_t)qword_1003837D0, (uint64_t)sub_1000C66A8, a1);
}

uint64_t sub_1000C6B90(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F218, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&unk_1002CF878);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C6BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F218, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&unk_1002CF878);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C6C20()
{
  return &unk_100353148;
}

unint64_t sub_1000C6C2C()
{
  return 0xD000000000000023;
}

uint64_t sub_1000C6C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003837E8);
  sub_10000E6A4(v0, (uint64_t)qword_1003837E8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "applicable_time";
  *(_QWORD *)(v9 + 8) = 15;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "x_radps";
  *(_QWORD *)(v13 + 8) = 7;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "y_radps";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "z_radps";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C6E08()
{
  return sub_100008BD0(&qword_100394190, (uint64_t)qword_1003837E8, (uint64_t)sub_1000C6C48);
}

uint64_t sub_1000C6E24@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394190, (uint64_t)qword_1003837E8, (uint64_t)sub_1000C6C48, a1);
}

uint64_t sub_1000C6E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EDAF0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_1000C6E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C6E78(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_1000C6E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = v4;
  result = sub_100105B68(v7, a1, a2, a3, a4);
  if (!v5)
  {
    v12 = (int *)a4(0);
    v13 = v7 + v12[6];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2, a2, a3, *(float *)v13);
    v14 = v7 + v12[7];
    if ((*(_BYTE *)(v14 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v14);
    v15 = v7 + v12[8];
    if ((*(_BYTE *)(v15 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4, a2, a3, *(float *)v15);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000C6F94(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return sub_10011C9CC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample) & 1;
}

Swift::Int sub_1000C6FB4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &qword_10036E5B8, (uint64_t)&unk_1002CFAE0);
}

uint64_t sub_1000C6FD0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  v8 = a2 + a1[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a2 + v7;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a2 + a1[8];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_1000C7058(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375138, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&unk_1002CFA58);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C70A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394190, (uint64_t)qword_1003837E8, (uint64_t)sub_1000C6C48, a1);
}

uint64_t sub_1000C70C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E5C0, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&unk_1002CF9E0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C7104(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E5C0, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&unk_1002CF9E0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C7158()
{
  return &unk_100353158;
}

unint64_t sub_1000C7164()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1000C7180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383800);
  sub_10000E6A4(v0, (uint64_t)qword_100383800);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "event_receipt_time";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "sample";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C72D8()
{
  return sub_100008BD0(&qword_100394198, (uint64_t)qword_100383800, (uint64_t)sub_1000C7180);
}

uint64_t sub_1000C72F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394198, (uint64_t)qword_100383800, (uint64_t)sub_1000C7180, a1);
}

uint64_t sub_1000C7310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCC40(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &qword_10036E5C0, (uint64_t)&unk_1002CF9E0);
}

uint64_t sub_1000C7344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1000C742C(v3, a1, a2, a3);
  if (!v4)
  {
    v9 = *(_QWORD *)v3;
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0);
      v11 = sub_10000FD38(&qword_10036E5C0, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&unk_1002CF9E0);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2, v10, v11, a2, a3);
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000C742C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000C75A0(uint64_t *a1, uint64_t *a2)
{
  return sub_100117738(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample) & 1;
}

Swift::Int sub_1000C75C8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, &qword_10036E5C8, (uint64_t)&unk_1002CFC48);
}

uint64_t sub_1000C75E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t sub_1000C7644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C7344(a1, a2, a3);
}

uint64_t sub_1000C7658(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375130, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&unk_1002CFBC0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C76A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394198, (uint64_t)qword_100383800, (uint64_t)sub_1000C7180, a1);
}

uint64_t sub_1000C76C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F240, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&unk_1002CFB48);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C7704(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F240, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&unk_1002CFB48);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C7754()
{
  return &unk_100353168;
}

unint64_t sub_1000C7760()
{
  return 0xD000000000000023;
}

uint64_t sub_1000C777C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383818);
  sub_10000E6A4(v0, (uint64_t)qword_100383818);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "applicable_time";
  *(_QWORD *)(v9 + 8) = 15;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "pressure";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "temperature";
  *(_QWORD *)(v14 + 8) = 11;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C791C()
{
  return sub_100008BD0(&qword_1003941A0, (uint64_t)qword_100383818, (uint64_t)sub_1000C777C);
}

uint64_t sub_1000C7938@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003941A0, (uint64_t)qword_100383818, (uint64_t)sub_1000C777C, a1);
}

uint64_t sub_1000C7954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 24);
        goto LABEL_5;
      }
      if (result == 1)
      {
        v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 20);
        v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        v12 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
      }
LABEL_11:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 28);
LABEL_5:
    dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v9, a2, a3);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1000C7A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = sub_100105B68(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
  if (!v4)
  {
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
    v11 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v11 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2, a2, a3, *(float *)v11);
    v12 = v5 + *(int *)(v10 + 28);
    if ((*(_BYTE *)(v12 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v12);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000C7B7C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &qword_10036E5D0, (uint64_t)&unk_1002CFDB0);
}

uint64_t sub_1000C7B98@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  v8 = a2 + a1[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a2 + v7;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_1000C7C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C7954(a1, a2, a3);
}

uint64_t sub_1000C7C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C7A90(a1, a2, a3);
}

uint64_t sub_1000C7C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375128, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&unk_1002CFD28);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C7C88@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003941A0, (uint64_t)qword_100383818, (uint64_t)sub_1000C777C, a1);
}

uint64_t sub_1000C7CA4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E5D8, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&unk_1002CFCB0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C7CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E5D8, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&unk_1002CFCB0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C7D38()
{
  return &unk_100353178;
}

unint64_t sub_1000C7D44()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1000C7D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383830);
  sub_10000E6A4(v0, (uint64_t)qword_100383830);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "event_receipt_time";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "sample";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C7EB8()
{
  return sub_100008BD0(&qword_1003941A8, (uint64_t)qword_100383830, (uint64_t)sub_1000C7D60);
}

uint64_t sub_1000C7ED4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003941A8, (uint64_t)qword_100383830, (uint64_t)sub_1000C7D60, a1);
}

uint64_t sub_1000C7EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCC40(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &qword_10036E5D8, (uint64_t)&unk_1002CFCB0);
}

uint64_t sub_1000C7F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1000C800C(v3, a1, a2, a3);
  if (!v4)
  {
    v9 = *(_QWORD *)v3;
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
      v11 = sub_10000FD38(&qword_10036E5D8, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&unk_1002CFCB0);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2, v10, v11, a2, a3);
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000C800C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000C8180(uint64_t *a1, uint64_t *a2)
{
  return sub_1001188DC(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t (*)(char *, char *))sub_10011CE44) & 1;
}

Swift::Int sub_1000C81B0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Baro, &qword_10036E5E0, (uint64_t)&unk_1002CFF18);
}

uint64_t sub_1000C81CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C7F24(a1, a2, a3);
}

uint64_t sub_1000C81E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375120, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&unk_1002CFE90);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C8230@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003941A8, (uint64_t)qword_100383830, (uint64_t)sub_1000C7D60, a1);
}

uint64_t sub_1000C824C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F268, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&unk_1002CFE18);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C828C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F268, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&unk_1002CFE18);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C82DC()
{
  return &unk_100353188;
}

unint64_t sub_1000C82E8()
{
  return 0xD000000000000031;
}

uint64_t sub_1000C8304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383848);
  sub_10000E6A4(v0, (uint64_t)qword_100383848);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "latitude";
  *(_QWORD *)(v9 + 8) = 8;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "longitude";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000C8454()
{
  return sub_100008BD0(&qword_1003941B0, (uint64_t)qword_100383848, (uint64_t)sub_1000C8304);
}

uint64_t sub_1000C8470@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003941B0, (uint64_t)qword_100383848, (uint64_t)sub_1000C8304, a1);
}

uint64_t sub_1000C848C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB774(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000C84A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB840(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000C84C4(uint64_t a1, uint64_t a2)
{
  return sub_10011F460(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate) & 1;
}

Swift::Int sub_1000C84E4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, &qword_10036E5E8, (uint64_t)&unk_1002D0080);
}

uint64_t sub_1000C8504(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375118, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002CFFF8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000C8554@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003941B0, (uint64_t)qword_100383848, (uint64_t)sub_1000C8304, a1);
}

uint64_t sub_1000C8570(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F280, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002CFF80);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C85B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F280, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002CFF80);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000C8604()
{
  return &unk_100353198;
}

unint64_t sub_1000C8610()
{
  return 0xD000000000000027;
}

uint64_t sub_1000C862C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v52;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383860);
  sub_10000E6A4(v0, (uint64_t)qword_100383860);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v52 = swift_allocObject(v1, v6 + 22 * v4, v5 | 7);
  *(_OWORD *)(v52 + 16) = xmmword_1002CAB10;
  v7 = v52 + v6;
  v8 = v52 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v52 + v6) = 1;
  *(_QWORD *)v8 = "suitability";
  *(_QWORD *)(v8 + 8) = 11;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v52 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "coordinate";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v52 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "horizontal_accuracy";
  *((_QWORD *)v14 + 1) = 19;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v52 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "altitude";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v52 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "vertical_accuracy";
  *((_QWORD *)v18 + 1) = 17;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v52 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "speed";
  *((_QWORD *)v20 + 1) = 5;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v52 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "speed_accuracy";
  *((_QWORD *)v22 + 1) = 14;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v52 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "course";
  *((_QWORD *)v24 + 1) = 6;
  v24[16] = 2;
  v11();
  v25 = v52 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "course_accuracy";
  *(_QWORD *)(v25 + 8) = 15;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v52 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "timestamp";
  *((_QWORD *)v27 + 1) = 9;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v52 + v6 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "confidence";
  *((_QWORD *)v29 + 1) = 10;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v52 + v6 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "lifespan";
  *((_QWORD *)v31 + 1) = 8;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v52 + v6 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "type";
  *((_QWORD *)v33 + 1) = 4;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v52 + v6 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "raw_coordinate";
  *((_QWORD *)v35 + 1) = 14;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v52 + v6 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "raw_course";
  *((_QWORD *)v37 + 1) = 10;
  v37[16] = 2;
  v11();
  v38 = (_QWORD *)(v52 + v6 + 15 * v4);
  v39 = (char *)v38 + *(int *)(v2 + 48);
  *v38 = 16;
  *(_QWORD *)v39 = "floor";
  *((_QWORD *)v39 + 1) = 5;
  v39[16] = 2;
  v11();
  v40 = v52 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 16 * v4) = 17;
  *(_QWORD *)v40 = "integrity";
  *(_QWORD *)(v40 + 8) = 9;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  v41 = (_QWORD *)(v52 + v6 + 17 * v4);
  v42 = (char *)v41 + *(int *)(v2 + 48);
  *v41 = 18;
  *(_QWORD *)v42 = "reference_frame";
  *((_QWORD *)v42 + 1) = 15;
  v42[16] = 2;
  v11();
  v43 = (_QWORD *)(v52 + v6 + 18 * v4);
  v44 = (char *)v43 + *(int *)(v2 + 48);
  *v43 = 19;
  *(_QWORD *)v44 = "raw_reference_frame";
  *((_QWORD *)v44 + 1) = 19;
  v44[16] = 2;
  v11();
  v45 = (_QWORD *)(v52 + v6 + 19 * v4);
  v46 = (char *)v45 + *(int *)(v2 + 48);
  *v45 = 20;
  *(_QWORD *)v46 = "signal_environment_type";
  *((_QWORD *)v46 + 1) = 23;
  v46[16] = 2;
  v11();
  v47 = (_QWORD *)(v52 + v6 + 20 * v4);
  v48 = (char *)v47 + *(int *)(v2 + 48);
  *v47 = 21;
  *(_QWORD *)v48 = "ellipsoidal_altitude";
  *((_QWORD *)v48 + 1) = 20;
  v48[16] = 2;
  v11();
  v49 = (_QWORD *)(v52 + v6 + 21 * v4);
  v50 = (char *)v49 + *(int *)(v2 + 48);
  *v49 = 22;
  *(_QWORD *)v50 = "from_simulation_controller";
  *((_QWORD *)v50 + 1) = 26;
  v50[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v52);
}

uint64_t sub_1000C8BB8()
{
  return sub_100008BD0(&qword_1003941B8, (uint64_t)qword_100383860, (uint64_t)sub_1000C862C);
}

uint64_t sub_1000C8BD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003941B8, (uint64_t)qword_100383860, (uint64_t)sub_1000C862C, a1);
}

uint64_t sub_1000C8BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_BYTE *)(v1 + 16) = 4;
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 14;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)(v1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, 1, 1, v3);
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame) = 3;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType) = 8;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController) = 2;
  qword_1003941C8 = v1;
  return result;
}

uint64_t sub_1000C8DF4()
{
  return sub_1000DA028(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, &qword_10036E460, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, &qword_10036E460);
}

uint64_t sub_1000C8E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  ValueMetadata *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  ValueMetadata *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  ValueMetadata *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];
  uint64_t v43;

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10010C234(v13);
    swift_release(v10);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    v43 = v15 + 16;
    v19 = &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v20 = v43;
          swift_beginAccess(v43, v42, 33, 0);
          v21 = sub_10014A428();
          v22 = v20;
          v23 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
          goto LABEL_30;
        case 2:
          v24 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, v42, 33, 0);
          v25 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          v26 = sub_10000FD38(&qword_10036F280, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002CFF80);
          v27 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v25, v26, a2, a3);
          goto LABEL_33;
        case 3:
          v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
          goto LABEL_32;
        case 4:
          v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
          goto LABEL_32;
        case 5:
          v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
          goto LABEL_32;
        case 6:
          v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
          goto LABEL_32;
        case 7:
          v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
          goto LABEL_32;
        case 8:
          v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
          goto LABEL_32;
        case 9:
          v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
          goto LABEL_32;
        case 10:
          v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
          goto LABEL_32;
        case 11:
          v29 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
          goto LABEL_24;
        case 12:
          v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
          goto LABEL_32;
        case 13:
          v30 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type, v42, 33, 0);
          v21 = sub_10014A9BC();
          v22 = v30;
          v23 = &type metadata for CLP_LogEntry_PrivateData_LocationType;
          goto LABEL_30;
        case 14:
          v31 = v19;
          v32 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, v42, 33, 0);
          v33 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          v34 = sub_10000FD38(&qword_10036F280, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002CFF80);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v32, v33, v34, a2, a3);
          swift_endAccess(v42);
          v19 = v31;
          break;
        case 15:
          v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
          goto LABEL_32;
        case 16:
          v29 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
LABEL_24:
          v35 = v15 + v29;
          swift_beginAccess(v15 + v29, v42, 33, 0);
          v27 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v35, a2, a3);
          goto LABEL_33;
        case 17:
          v36 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity, v42, 33, 0);
          v21 = sub_10014A3E4();
          v22 = v36;
          v23 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
          goto LABEL_30;
        case 18:
          v37 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame;
          goto LABEL_28;
        case 19:
          v37 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame;
LABEL_28:
          v38 = v15 + v37;
          swift_beginAccess(v15 + v37, v42, 33, 0);
          v21 = sub_10014AA00();
          v22 = v38;
          v23 = v19;
          goto LABEL_30;
        case 20:
          v39 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType, v42, 33, 0);
          v21 = sub_100149DC8();
          v22 = v39;
          v23 = &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
LABEL_30:
          v27 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v22, v23, v21, a2, a3);
          goto LABEL_33;
        case 21:
          v28 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
LABEL_32:
          v40 = v15 + v28;
          swift_beginAccess(v15 + v28, v42, 33, 0);
          v27 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v40, a2, a3);
          goto LABEL_33;
        case 22:
          v41 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController, v42, 33, 0);
          v27 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v41, a2, a3);
LABEL_33:
          v5 = v27;
          swift_endAccess(v42);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_1000C92A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  _BYTE *v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];
  _BYTE v42[24];
  _BYTE v43[24];
  _BYTE v44[24];
  _BYTE v45[24];
  _BYTE v46[24];
  _BYTE v47[24];
  _BYTE v48[24];
  _BYTE v49[24];
  _BYTE v50[24];
  _BYTE v51[24];
  _BYTE v52[24];
  _BYTE v53[24];
  _BYTE v54[24];
  _BYTE v55[24];
  _BYTE v56[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, &v37, 0, 0);
  if (*(_BYTE *)(v9 + 16) != 4)
  {
    v56[0] = *(_BYTE *)(v9 + 16);
    v10 = sub_10014A428();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v56, 1, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType, v10, a2, a3);
  }
  if (v4)
    return swift_release(v9);
  sub_1000C99A8(v9, a1, a2, a3);
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy, v38, 0, 0);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v12);
  v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude, v39, 0, 0);
  if ((*(_BYTE *)(v13 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v13);
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy, v56, 0, 0);
  if ((*(_BYTE *)(v14 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5, a2, a3, *(double *)v14);
  v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed, v55, 0, 0);
  if ((*(_BYTE *)(v15 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(6, a2, a3, *(double *)v15);
  v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy, v54, 0, 0);
  if ((*(_BYTE *)(v16 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7, a2, a3, *(double *)v16);
  v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course, v53, 0, 0);
  if ((*(_BYTE *)(v17 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(8, a2, a3, *(double *)v17);
  v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy, v52, 0, 0);
  if ((*(_BYTE *)(v18 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(9, a2, a3, *(double *)v18);
  v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, v51, 0, 0);
  if ((*(_BYTE *)(v19 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(10, a2, a3, *(double *)v19);
  v20 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence, v50, 0, 0);
  if ((v20[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v20, 11, a2, a3);
  v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan, v49, 0, 0);
  if ((*(_BYTE *)(v21 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(12, a2, a3, *(double *)v21);
  v22 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type, v48, 0, 0);
  if (*v22 != 14)
  {
    v47[0] = *v22;
    v23 = sub_10014A9BC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v47, 13, &type metadata for CLP_LogEntry_PrivateData_LocationType, v23, a2, a3);
  }
  sub_1000C9B34(v9, a1, a2, a3);
  v24 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse, v47, 0, 0);
  if ((*(_BYTE *)(v24 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(15, a2, a3, *(double *)v24);
  v25 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor, v46, 0, 0);
  if ((v25[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v25, 16, a2, a3);
  v26 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity, v45, 0, 0);
  if (*v26 != 5)
  {
    v44[0] = *v26;
    v27 = sub_10014A3E4();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v44, 17, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType, v27, a2, a3);
  }
  v28 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame, v44, 0, 0);
  if (*v28 != 3)
  {
    v43[0] = *v28;
    v29 = sub_10014AA00();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v43, 18, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType, v29, a2, a3);
  }
  v30 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame, v43, 0, 0);
  if (*v30 != 3)
  {
    v42[0] = *v30;
    v31 = sub_10014AA00();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v42, 19, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType, v31, a2, a3);
  }
  v32 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType, v42, 0, 0);
  if (*v32 != 8)
  {
    v41[0] = *v32;
    v33 = sub_100149DC8();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v41, 20, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType, v33, a2, a3);
  }
  v34 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude, v41, 0, 0);
  if ((*(_BYTE *)(v34 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(21, a2, a3, *(double *)v34);
  v35 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController, v40, 0, 0);
  v36 = *v35;
  if (v36 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v36 & 1, 22, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000C99A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E460);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v15 = sub_10000FD38(&qword_10036F280, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002CFF80);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000C9B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E460);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v15 = sub_10000FD38(&qword_10036F280, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002CFF80);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 14, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000C9CC0(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, sub_1000C9CE8) & 1;
}

uint64_t sub_1000C9CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  double v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unsigned __int8 *v92;
  int v93;
  unsigned __int8 *v94;
  int v95;
  unsigned __int8 *v96;
  int v97;
  unsigned __int8 *v98;
  int v99;
  unsigned __int8 *v100;
  int v101;
  unsigned __int8 *v102;
  int v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  unsigned __int8 *v107;
  int v108;
  unsigned __int8 *v109;
  int v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE v156[24];
  _BYTE v157[24];
  _BYTE v158[24];
  _BYTE v159[24];
  _BYTE v160[24];
  _BYTE v161[32];

  v117 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v4 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v6 = (char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_1000039AC(&qword_100375328);
  v7 = __chkstk_darwin(v116);
  v9 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v111 - v10;
  v12 = sub_1000039AC(&qword_10036E460);
  v13 = __chkstk_darwin(v12);
  v114 = (uint64_t)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v115 = (uint64_t)&v111 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v111 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v111 - v20;
  swift_beginAccess(a1 + 16, v161, 0, 0);
  v22 = *(char *)(a1 + 16);
  swift_beginAccess(a2 + 16, v160, 0, 0);
  v23 = *(char *)(a2 + 16);
  if (v22 == 4)
  {
    if ((_DWORD)v23 != 4)
      return 0;
  }
  else if ((_DWORD)v23 == 4 || qword_1002D9178[v22] != qword_1002D9178[v23])
  {
    return 0;
  }
  v112 = v9;
  v113 = v6;
  v24 = a2;
  v25 = a1;
  v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v26, v159, 0, 0);
  sub_10000E660(v26, (uint64_t)v21, &qword_10036E460);
  v27 = a2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess(v27, v158, 0, 0);
  v28 = (uint64_t)&v11[*(int *)(v116 + 48)];
  sub_10000E660((uint64_t)v21, (uint64_t)v11, &qword_10036E460);
  sub_10000E660(v27, v28, &qword_10036E460);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  v30 = v117;
  if (v29((uint64_t)v11, 1, v117) == 1)
  {
    swift_retain(v25);
    swift_retain(v24);
    sub_100015704((uint64_t)v21, &qword_10036E460);
    if (v29(v28, 1, v30) == 1)
    {
      sub_100015704((uint64_t)v11, &qword_10036E460);
      goto LABEL_14;
    }
LABEL_11:
    sub_100015704((uint64_t)v11, &qword_100375328);
    goto LABEL_57;
  }
  sub_10000E660((uint64_t)v11, (uint64_t)v19, &qword_10036E460);
  if (v29(v28, 1, v30) == 1)
  {
    swift_retain(v25);
    swift_retain(v24);
    sub_100015704((uint64_t)v21, &qword_10036E460);
    sub_100004030((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    goto LABEL_11;
  }
  v31 = v28;
  v32 = (uint64_t)v113;
  sub_100003E08(v31, (uint64_t)v113, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  swift_retain(v25);
  swift_retain(v24);
  v33 = sub_10011F460((uint64_t)v19, v32, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100004030(v32, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100015704((uint64_t)v21, &qword_10036E460);
  sub_100004030((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100015704((uint64_t)v11, &qword_10036E460);
  if ((v33 & 1) == 0)
    goto LABEL_57;
LABEL_14:
  v34 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy, v157, 0, 0);
  v35 = *(double *)v34;
  LOBYTE(v34) = *(_BYTE *)(v34 + 8);
  v36 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess(v24+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy, v156, 0, 0);
  v37 = v24;
  if ((v34 & 1) != 0)
  {
    if ((*(_BYTE *)(v36 + 8) & 1) == 0)
      goto LABEL_57;
  }
  else if ((*(_BYTE *)(v36 + 8) & 1) != 0 || v35 != *(double *)v36)
  {
    goto LABEL_57;
  }
  v38 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude, &v155, 0, 0);
  v39 = *(double *)v38;
  LOBYTE(v38) = *(_BYTE *)(v38 + 8);
  v40 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess(v24+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude, &v154, 0, 0);
  if ((v38 & 1) != 0)
  {
    if ((*(_BYTE *)(v40 + 8) & 1) == 0)
      goto LABEL_57;
  }
  else if ((*(_BYTE *)(v40 + 8) & 1) != 0 || v39 != *(double *)v40)
  {
    goto LABEL_57;
  }
  v41 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy, &v153, 0, 0);
  v42 = *(double *)v41;
  LOBYTE(v41) = *(_BYTE *)(v41 + 8);
  v43 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess(v24+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy, &v152, 0, 0);
  if ((v41 & 1) != 0)
  {
    if ((*(_BYTE *)(v43 + 8) & 1) == 0)
      goto LABEL_57;
  }
  else if ((*(_BYTE *)(v43 + 8) & 1) != 0 || v42 != *(double *)v43)
  {
    goto LABEL_57;
  }
  v44 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed, &v151, 0, 0);
  v45 = *(double *)v44;
  LOBYTE(v44) = *(_BYTE *)(v44 + 8);
  v46 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess(v24+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed, &v150, 0, 0);
  if ((v44 & 1) != 0)
  {
    if ((*(_BYTE *)(v46 + 8) & 1) == 0)
      goto LABEL_57;
  }
  else if ((*(_BYTE *)(v46 + 8) & 1) != 0 || v45 != *(double *)v46)
  {
    goto LABEL_57;
  }
  v47 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy, &v149, 0, 0);
  v48 = *(double *)v47;
  LOBYTE(v47) = *(_BYTE *)(v47 + 8);
  v49 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess(v24+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy, &v148, 0, 0);
  if ((v47 & 1) != 0)
  {
    if ((*(_BYTE *)(v49 + 8) & 1) == 0)
      goto LABEL_57;
  }
  else if ((*(_BYTE *)(v49 + 8) & 1) != 0 || v48 != *(double *)v49)
  {
    goto LABEL_57;
  }
  v50 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course, &v147, 0, 0);
  v51 = *(double *)v50;
  LOBYTE(v50) = *(_BYTE *)(v50 + 8);
  v52 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess(v24+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course, &v146, 0, 0);
  if ((v50 & 1) != 0)
  {
    if ((*(_BYTE *)(v52 + 8) & 1) == 0)
      goto LABEL_57;
  }
  else if ((*(_BYTE *)(v52 + 8) & 1) != 0 || v51 != *(double *)v52)
  {
    goto LABEL_57;
  }
  v53 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy, &v145, 0, 0);
  v54 = *(double *)v53;
  LOBYTE(v53) = *(_BYTE *)(v53 + 8);
  v55 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess(v24+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy, &v144, 0, 0);
  if ((v53 & 1) != 0)
  {
    if ((*(_BYTE *)(v55 + 8) & 1) == 0)
      goto LABEL_57;
  }
  else if ((*(_BYTE *)(v55 + 8) & 1) != 0 || v54 != *(double *)v55)
  {
    goto LABEL_57;
  }
  v56 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &v143, 0, 0);
  v57 = *(double *)v56;
  LOBYTE(v56) = *(_BYTE *)(v56 + 8);
  v58 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v24+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &v142, 0, 0);
  if ((v56 & 1) != 0)
  {
    if ((*(_BYTE *)(v58 + 8) & 1) != 0)
      goto LABEL_54;
LABEL_57:
    swift_release(v25);
    v65 = v24;
LABEL_58:
    swift_release(v65);
    return 0;
  }
  if ((*(_BYTE *)(v58 + 8) & 1) != 0 || v57 != *(double *)v58)
    goto LABEL_57;
LABEL_54:
  v59 = v25;
  v60 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence, &v141, 0, 0);
  v61 = v37;
  v62 = *(_DWORD *)v60;
  LOBYTE(v60) = *(_BYTE *)(v60 + 4);
  v63 = v61;
  v64 = v61
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess(v61+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence, &v140, 0, 0);
  if ((v60 & 1) != 0)
  {
    if ((*(_BYTE *)(v64 + 4) & 1) == 0)
      goto LABEL_78;
  }
  else if ((*(_BYTE *)(v64 + 4) & 1) != 0 || v62 != *(_DWORD *)v64)
  {
    goto LABEL_78;
  }
  v67 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan, &v139, 0, 0);
  v68 = *(double *)v67;
  LOBYTE(v67) = *(_BYTE *)(v67 + 8);
  v69 = v63
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess(v63+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan, &v138, 0, 0);
  if ((v67 & 1) != 0)
  {
    if ((*(_BYTE *)(v69 + 8) & 1) == 0)
      goto LABEL_78;
  }
  else if ((*(_BYTE *)(v69 + 8) & 1) != 0 || v68 != *(double *)v69)
  {
    goto LABEL_78;
  }
  v70 = (unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type, &v137, 0, 0);
  v71 = *v70;
  v72 = (unsigned __int8 *)(v63
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(v63+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type, &v136, 0, 0);
  v73 = *v72;
  if (v71 == 14)
  {
    if (v73 != 14)
      goto LABEL_78;
  }
  else if (v73 == 14 || v71 != v73)
  {
    goto LABEL_78;
  }
  v74 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess(v25+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, &v135, 0, 0);
  v75 = v115;
  sub_10000E660(v74, v115, &qword_10036E460);
  v76 = v63
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess(v63+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, &v134, 0, 0);
  v77 = (uint64_t)v112;
  v78 = (uint64_t)&v112[*(int *)(v116 + 48)];
  sub_10000E660(v75, (uint64_t)v112, &qword_10036E460);
  sub_10000E660(v76, v78, &qword_10036E460);
  if (v29(v77, 1, v117) == 1)
  {
    sub_100015704(v115, &qword_10036E460);
    if (v29(v78, 1, v117) == 1)
    {
      sub_100015704((uint64_t)v112, &qword_10036E460);
      goto LABEL_80;
    }
LABEL_77:
    sub_100015704((uint64_t)v112, &qword_100375328);
    goto LABEL_78;
  }
  sub_10000E660((uint64_t)v112, v114, &qword_10036E460);
  if (v29(v78, 1, v117) == 1)
  {
    sub_100015704(v115, &qword_10036E460);
    sub_100004030(v114, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    goto LABEL_77;
  }
  v79 = (uint64_t)v113;
  sub_100003E08(v78, (uint64_t)v113, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v80 = v114;
  v81 = sub_10011F460(v114, v79, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100004030(v79, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100015704(v115, &qword_10036E460);
  sub_100004030(v80, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100015704((uint64_t)v112, &qword_10036E460);
  if ((v81 & 1) == 0)
    goto LABEL_78;
LABEL_80:
  v82 = v59
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess(v59+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse, &v133, 0, 0);
  v83 = *(double *)v82;
  LOBYTE(v82) = *(_BYTE *)(v82 + 8);
  v84 = v63
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess(v63+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse, &v132, 0, 0);
  if ((v82 & 1) != 0)
  {
    if ((*(_BYTE *)(v84 + 8) & 1) == 0)
      goto LABEL_78;
  }
  else if ((*(_BYTE *)(v84 + 8) & 1) != 0 || v83 != *(double *)v84)
  {
    goto LABEL_78;
  }
  v85 = v59
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess(v59+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor, &v131, 0, 0);
  v86 = *(_DWORD *)v85;
  LOBYTE(v85) = *(_BYTE *)(v85 + 4);
  v87 = v63
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess(v63+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor, &v130, 0, 0);
  if ((v85 & 1) != 0)
  {
    if ((*(_BYTE *)(v87 + 4) & 1) == 0)
      goto LABEL_78;
  }
  else if ((*(_BYTE *)(v87 + 4) & 1) != 0 || v86 != *(_DWORD *)v87)
  {
    goto LABEL_78;
  }
  v88 = (char *)(v59
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess(v59+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity, &v129, 0, 0);
  v89 = *v88;
  v90 = (char *)(v63
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess(v63+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity, &v128, 0, 0);
  v91 = *v90;
  if (v89 == 5)
  {
    if ((_DWORD)v91 != 5)
      goto LABEL_78;
  }
  else if ((_DWORD)v91 == 5 || qword_1002D9198[v89] != qword_1002D9198[v91])
  {
    goto LABEL_78;
  }
  v92 = (unsigned __int8 *)(v59
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess(v59+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame, &v127, 0, 0);
  v93 = *v92;
  v94 = (unsigned __int8 *)(v63
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess(v63+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame, &v126, 0, 0);
  v95 = *v94;
  if (v93 == 3)
  {
    if (v95 != 3)
      goto LABEL_78;
  }
  else if (v95 == 3 || v93 != v95)
  {
    goto LABEL_78;
  }
  v96 = (unsigned __int8 *)(v59
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess(v59+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame, &v125, 0, 0);
  v97 = *v96;
  v98 = (unsigned __int8 *)(v63
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess(v63+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame, &v124, 0, 0);
  v99 = *v98;
  if (v97 == 3)
  {
    if (v99 != 3)
      goto LABEL_78;
  }
  else if (v99 == 3 || v97 != v99)
  {
    goto LABEL_78;
  }
  v100 = (unsigned __int8 *)(v59
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess(v59+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType, &v123, 0, 0);
  v101 = *v100;
  v102 = (unsigned __int8 *)(v63
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess(v63+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType, &v122, 0, 0);
  v103 = *v102;
  if (v101 == 8)
  {
    if (v103 != 8)
      goto LABEL_78;
  }
  else if (v103 == 8 || v101 != v103)
  {
    goto LABEL_78;
  }
  v104 = v59
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess(v59+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude, &v121, 0, 0);
  v105 = *(double *)v104;
  LOBYTE(v104) = *(_BYTE *)(v104 + 8);
  v106 = v63
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess(v63+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude, &v120, 0, 0);
  if ((v104 & 1) != 0)
  {
    if ((*(_BYTE *)(v106 + 8) & 1) != 0)
      goto LABEL_115;
LABEL_78:
    swift_release(v59);
    v65 = v63;
    goto LABEL_58;
  }
  if ((*(_BYTE *)(v106 + 8) & 1) != 0 || v105 != *(double *)v106)
    goto LABEL_78;
LABEL_115:
  v107 = (unsigned __int8 *)(v59
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess(v59+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController, &v119, 0, 0);
  v108 = *v107;
  swift_release(v59);
  v109 = (unsigned __int8 *)(v63
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess(v63+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController, &v118, 0, 0);
  v110 = *v109;
  swift_release(v63);
  if (v108 == 2)
  {
    if (v110 != 2)
      return 0;
  }
  else if (v110 == 2 || ((((v110 & 1) == 0) ^ v108) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

Swift::Int sub_1000CAA44()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &qword_10036E5F0, (uint64_t)&unk_1002D01E8);
}

uint64_t sub_1000CAA60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_1003941C0, &qword_1003941C8, (uint64_t)sub_1000C8BF0, a2);
}

uint64_t sub_1000CAA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C8E14(a1, a2, a3);
}

uint64_t sub_1000CAA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C92A8(a1, a2, a3);
}

uint64_t sub_1000CAAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375110, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&unk_1002D0160);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000CAAF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003941B8, (uint64_t)qword_100383860, (uint64_t)sub_1000C862C, a1);
}

uint64_t sub_1000CAB10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E650, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&unk_1002D00E8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CAB50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E650, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&unk_1002D00E8);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000CABA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383878);
  sub_10000E6A4(v0, (uint64_t)qword_100383878);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "ST_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "ST_ROUTE_GUIDANCE";
  *(_QWORD *)(v13 + 8) = 17;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "ST_OTHER";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 0xFFFFLL;
  *(_QWORD *)v17 = "ST_ANY";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000CAD60()
{
  return sub_100008BD0(&qword_1003941D0, (uint64_t)qword_100383878, (uint64_t)sub_1000CABA4);
}

uint64_t sub_1000CAD7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003941D0, (uint64_t)qword_100383878, (uint64_t)sub_1000CABA4, a1);
}

uint64_t sub_1000CAD98@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003941D0, (uint64_t)qword_100383878, (uint64_t)sub_1000CABA4, a1);
}

uint64_t sub_1000CADB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383890);
  sub_10000E6A4(v0, (uint64_t)qword_100383890);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = -1;
  *(_QWORD *)v9 = "LI_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 0;
  *(_QWORD *)v13 = "LI_NONE";
  *(_QWORD *)(v13 + 8) = 7;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 25;
  *(_QWORD *)v15 = "LI_LOW";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 50;
  *(_QWORD *)v17 = "LI_MEDIUM";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 75;
  *(_QWORD *)v18 = "LI_HIGH";
  *(_QWORD *)(v18 + 8) = 7;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000CAFB8()
{
  return sub_100008BD0(&qword_1003941D8, (uint64_t)qword_100383890, (uint64_t)sub_1000CADB4);
}

uint64_t sub_1000CAFD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003941D8, (uint64_t)qword_100383890, (uint64_t)sub_1000CADB4, a1);
}

uint64_t sub_1000CAFF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003941D8, (uint64_t)qword_100383890, (uint64_t)sub_1000CADB4, a1);
}

void *sub_1000CB00C()
{
  return &unk_1003531A8;
}

unint64_t sub_1000CB018()
{
  return 0xD000000000000027;
}

uint64_t sub_1000CB034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003838A8);
  sub_10000E6A4(v0, (uint64_t)qword_1003838A8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "raw_unmodified_course";
  *(_QWORD *)(v9 + 8) = 21;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "raw_unmodified_course_unc";
  *(_QWORD *)(v13 + 8) = 25;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "is_static";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "is_mounted";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000CB1F4()
{
  return sub_100008BD0(&qword_1003941E0, (uint64_t)qword_1003838A8, (uint64_t)sub_1000CB034);
}

uint64_t sub_1000CB210@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003941E0, (uint64_t)qword_1003838A8, (uint64_t)sub_1000CB034, a1);
}

uint64_t sub_1000CB22C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 20);
          goto LABEL_5;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 24);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 3:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 28);
          goto LABEL_11;
        case 4:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 32);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v10, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000CB338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v11);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3, a2, a3);
    v14 = *(unsigned __int8 *)(v5 + v10[8]);
    if (v14 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 4, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000CB468()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, &qword_10036E5F8, (uint64_t)&unk_1002D03A0);
}

uint64_t sub_1000CB484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB22C(a1, a2, a3);
}

uint64_t sub_1000CB498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB338(a1, a2, a3);
}

uint64_t sub_1000CB4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375108, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&unk_1002D0318);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000CB4FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003941E0, (uint64_t)qword_1003838A8, (uint64_t)sub_1000CB034, a1);
}

uint64_t sub_1000CB518(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F2A8, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&unk_1002D02A0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CB558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F2A8, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&unk_1002D02A0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000CB5A8()
{
  return &unk_1003531B8;
}

unint64_t sub_1000CB5B4()
{
  return 0xD000000000000027;
}

uint64_t sub_1000CB5D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003838C0);
  sub_10000E6A4(v0, (uint64_t)qword_1003838C0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "value";
  *(_QWORD *)(v9 + 8) = 5;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "std";
  *((_QWORD *)v13 + 1) = 3;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000CB720()
{
  return sub_100008BD0(&qword_1003941E8, (uint64_t)qword_1003838C0, (uint64_t)sub_1000CB5D0);
}

uint64_t sub_1000CB73C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003941E8, (uint64_t)qword_1003838C0, (uint64_t)sub_1000CB5D0, a1);
}

uint64_t sub_1000CB758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB774(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000CB774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t result;
  char v13;

  v9 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    if (v5 || (v13 & 1) != 0)
      break;
    if (result == 2)
    {
      v11 = *(int *)(a4(0) + 24);
LABEL_3:
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v4 + v11, a2, a3);
      goto LABEL_4;
    }
    if (result == 1)
    {
      v11 = *(int *)(a4(0) + 20);
      goto LABEL_3;
    }
LABEL_4:
    v5 = 0;
    v9 = a2;
  }
  return result;
}

uint64_t sub_1000CB824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB840(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000CB840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v4;
  result = a4(0);
  v11 = result;
  v12 = v6 + *(int *)(result + 20);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v12);
  if (!v5)
  {
    v13 = v6 + *(int *)(v11 + 24);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v13);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000CB908(uint64_t a1, uint64_t a2)
{
  return sub_10011F460(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample) & 1;
}

Swift::Int sub_1000CB928()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, &qword_10036E600, (uint64_t)&unk_1002D0508);
}

uint64_t sub_1000CB944(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375100, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&unk_1002D0480);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000CB994@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003941E8, (uint64_t)qword_1003838C0, (uint64_t)sub_1000CB5D0, a1);
}

uint64_t sub_1000CB9B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F2C0, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&unk_1002D0408);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CB9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F2C0, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&unk_1002D0408);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000CBA40()
{
  return &unk_1003531C8;
}

unint64_t sub_1000CBA4C()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_1000CBA68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003838D8);
  sub_10000E6A4(v0, (uint64_t)qword_1003838D8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40B0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "constellation";
  *(_QWORD *)(v9 + 8) = 13;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "sat_id";
  *(_QWORD *)(v13 + 8) = 6;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "elevation_deg";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "azimuth_deg";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "l1_cn0";
  *((_QWORD *)v19 + 1) = 6;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "l5_cn0";
  *((_QWORD *)v21 + 1) = 6;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "is_tracked";
  *((_QWORD *)v23 + 1) = 10;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 8;
  *(_QWORD *)v25 = "is_phase_tracked";
  *((_QWORD *)v25 + 1) = 16;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000CBD18()
{
  return sub_100008BD0(&qword_1003941F0, (uint64_t)qword_1003838D8, (uint64_t)sub_1000CBA68);
}

uint64_t sub_1000CBD34@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003941F0, (uint64_t)qword_1003838D8, (uint64_t)sub_1000CBA68, a1);
}

uint64_t sub_1000CBD50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20);
          v10 = sub_10014A978();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v9, &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation, v10, a2, a3);
          break;
        case 2:
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v11 + 24), a2, a3);
          break;
        case 3:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 28);
          goto LABEL_11;
        case 4:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 32);
          goto LABEL_11;
        case 5:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 36);
          goto LABEL_11;
        case 6:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 40);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v12, a2, a3);
          break;
        case 7:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 44);
          goto LABEL_14;
        case 8:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 48);
LABEL_14:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v13, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000CBEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 7)
  {
    v15 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v11 = sub_10014A978();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 1, &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation, v11, a2, a3);
  }
  if (!v4)
  {
    v12 = (unsigned int *)(v5 + v10[6]);
    if ((v12[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v12, 2, a2, a3);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4, a2, a3, *(float *)v14);
    sub_1000E11CC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    sub_1000E1240(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    sub_1000E4E8C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    sub_1000E4F00(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000CC0DC()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, &qword_10036E608, (uint64_t)&unk_1002D0670);
}

uint64_t sub_1000CC0F8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 7;
  v6 = a2 + v5;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1[8];
  v8 = a2 + a1[7];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a2 + v7;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1[10];
  v11 = a2 + a1[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a2 + v10;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v13) = 2;
  return result;
}

uint64_t sub_1000CC180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CBD50(a1, a2, a3);
}

uint64_t sub_1000CC194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CBEF0(a1, a2, a3);
}

uint64_t sub_1000CC1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003750F8, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&unk_1002D05E8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000CC1F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003941F0, (uint64_t)qword_1003838D8, (uint64_t)sub_1000CBA68, a1);
}

uint64_t sub_1000CC214(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F2D8, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&unk_1002D0570);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CC254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F2D8, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&unk_1002D0570);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000CC2A4()
{
  return &unk_1003531D8;
}

unint64_t sub_1000CC2B0()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_1000CC2CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  char *v117;
  uint64_t v119;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003838F0);
  sub_10000E6A4(v0, (uint64_t)qword_1003838F0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v119 = swift_allocObject(v1, v6 + 56 * v4, v5 | 7);
  *(_OWORD *)(v119 + 16) = xmmword_1002CAB20;
  v7 = v119 + v6;
  v8 = v119 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v119 + v6) = 1;
  *(_QWORD *)v8 = "odometer";
  *(_QWORD *)(v8 + 8) = 8;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "delta_distance";
  *(_QWORD *)(v12 + 8) = 14;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "delta_distance_accuracy";
  *((_QWORD *)v14 + 1) = 23;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "timestamp_gps";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "mach_time";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "horz_unc_semi_maj";
  *((_QWORD *)v20 + 1) = 17;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "horz_unc_semi_min";
  *((_QWORD *)v22 + 1) = 17;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "horz_unc_semi_maj_az";
  *((_QWORD *)v24 + 1) = 20;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "is_fitness_match";
  *(_QWORD *)(v25 + 8) = 16;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "match_quality";
  *((_QWORD *)v27 + 1) = 13;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "match_coordinate";
  *((_QWORD *)v29 + 1) = 16;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v7 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "match_course";
  *((_QWORD *)v31 + 1) = 12;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v7 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "match_form_of_way";
  *((_QWORD *)v33 + 1) = 17;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v7 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "match_road_class";
  *((_QWORD *)v35 + 1) = 16;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v7 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "match_shifted";
  *((_QWORD *)v37 + 1) = 13;
  v37[16] = 2;
  v11();
  v38 = (_QWORD *)(v7 + 15 * v4);
  v39 = (char *)v38 + *(int *)(v2 + 48);
  *v38 = 16;
  *(_QWORD *)v39 = "pressure";
  *((_QWORD *)v39 + 1) = 8;
  v39[16] = 2;
  v11();
  v40 = v7 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 16 * v4) = 17;
  *(_QWORD *)v40 = "undulation_model";
  *(_QWORD *)(v40 + 8) = 16;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  v41 = (_QWORD *)(v7 + 17 * v4);
  v42 = (char *)v41 + *(int *)(v2 + 48);
  *v41 = 18;
  *(_QWORD *)v42 = "undulation";
  *((_QWORD *)v42 + 1) = 10;
  v42[16] = 2;
  v11();
  v43 = (_QWORD *)(v7 + 18 * v4);
  v44 = (char *)v43 + *(int *)(v2 + 48);
  *v43 = 19;
  *(_QWORD *)v44 = "special_coordinate";
  *((_QWORD *)v44 + 1) = 18;
  v44[16] = 2;
  v11();
  v45 = (_QWORD *)(v7 + 19 * v4);
  v46 = (char *)v45 + *(int *)(v2 + 48);
  *v45 = 20;
  *(_QWORD *)v46 = "special_horizontal_accuracy";
  *((_QWORD *)v46 + 1) = 27;
  v46[16] = 2;
  v11();
  v47 = (_QWORD *)(v7 + 20 * v4);
  v48 = (char *)v47 + *(int *)(v2 + 48);
  *v47 = 21;
  *(_QWORD *)v48 = "mach_continuous_time";
  *((_QWORD *)v48 + 1) = 20;
  v48[16] = 2;
  v11();
  v49 = (_QWORD *)(v7 + 21 * v4);
  v50 = (char *)v49 + *(int *)(v2 + 48);
  *v49 = 22;
  *(_QWORD *)v50 = "origin_device";
  *((_QWORD *)v50 + 1) = 13;
  v50[16] = 2;
  v11();
  v51 = (_QWORD *)(v7 + 22 * v4);
  v52 = (char *)v51 + *(int *)(v2 + 48);
  *v51 = 23;
  *(_QWORD *)v52 = "is_matcher_propagated_coordinates";
  *((_QWORD *)v52 + 1) = 33;
  v52[16] = 2;
  v11();
  v53 = (_QWORD *)(v7 + 23 * v4);
  v54 = (char *)v53 + *(int *)(v2 + 48);
  *v53 = 24;
  *(_QWORD *)v54 = "map_matcher_data";
  *((_QWORD *)v54 + 1) = 16;
  v54[16] = 2;
  v11();
  v55 = (_QWORD *)(v7 + 24 * v4);
  v56 = (char *)v55 + *(int *)(v2 + 48);
  *v55 = 25;
  *(_QWORD *)v56 = "slope";
  *((_QWORD *)v56 + 1) = 5;
  v56[16] = 2;
  v11();
  v57 = (_QWORD *)(v7 + 25 * v4);
  v58 = (char *)v57 + *(int *)(v2 + 48);
  *v57 = 26;
  *(_QWORD *)v58 = "max_abs_slope";
  *((_QWORD *)v58 + 1) = 13;
  v58[16] = 2;
  v11();
  v59 = (_QWORD *)(v7 + 26 * v4);
  v60 = (char *)v59 + *(int *)(v2 + 48);
  *v59 = 27;
  *(_QWORD *)v60 = "ground_altitude";
  *((_QWORD *)v60 + 1) = 15;
  v60[16] = 2;
  v11();
  v61 = (_QWORD *)(v7 + 27 * v4);
  v62 = (char *)v61 + *(int *)(v2 + 48);
  *v61 = 28;
  *(_QWORD *)v62 = "ground_altitude_uncertainty";
  *((_QWORD *)v62 + 1) = 27;
  v62[16] = 2;
  v11();
  v63 = (_QWORD *)(v7 + 28 * v4);
  v64 = (char *)v63 + *(int *)(v2 + 48);
  *v63 = 29;
  *(_QWORD *)v64 = "smoothed_gps_altitude";
  *((_QWORD *)v64 + 1) = 21;
  v64[16] = 2;
  v11();
  v65 = (_QWORD *)(v7 + 29 * v4);
  v66 = (char *)v65 + *(int *)(v2 + 48);
  *v65 = 30;
  *(_QWORD *)v66 = "smoothed_gps_altitude_uncertainty";
  *((_QWORD *)v66 + 1) = 33;
  v66[16] = 2;
  v11();
  v67 = (_QWORD *)(v7 + 30 * v4);
  v68 = (char *)v67 + *(int *)(v2 + 48);
  *v67 = 31;
  *(_QWORD *)v68 = "is_simulated_or_spoofed";
  *((_QWORD *)v68 + 1) = 23;
  v68[16] = 2;
  v11();
  v69 = (_QWORD *)(v7 + 31 * v4);
  v70 = (char *)v69 + *(int *)(v2 + 48);
  *v69 = 32;
  *(_QWORD *)v70 = "raw_horizontal_accuracy";
  *((_QWORD *)v70 + 1) = 23;
  v70[16] = 2;
  v11();
  v71 = v7 + 32 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 32 * v4) = 33;
  *(_QWORD *)v71 = "raw_course_accuracy";
  *(_QWORD *)(v71 + 8) = 19;
  *(_BYTE *)(v71 + 16) = 2;
  v11();
  v72 = (_QWORD *)(v7 + 33 * v4);
  v73 = (char *)v72 + *(int *)(v2 + 48);
  *v72 = 34;
  *(_QWORD *)v73 = "is_coordinate_fused";
  *((_QWORD *)v73 + 1) = 19;
  v73[16] = 2;
  v11();
  v74 = (_QWORD *)(v7 + 34 * v4);
  v75 = (char *)v74 + *(int *)(v2 + 48);
  *v74 = 35;
  *(_QWORD *)v75 = "fused_coordinate";
  *((_QWORD *)v75 + 1) = 16;
  v75[16] = 2;
  v11();
  v76 = (_QWORD *)(v7 + 35 * v4);
  v77 = (char *)v76 + *(int *)(v2 + 48);
  *v76 = 36;
  *(_QWORD *)v77 = "fused_horizontal_accuracy";
  *((_QWORD *)v77 + 1) = 25;
  v77[16] = 2;
  v11();
  v78 = (_QWORD *)(v7 + 36 * v4);
  v79 = (char *)v78 + *(int *)(v2 + 48);
  *v78 = 37;
  *(_QWORD *)v79 = "fused_reference_frame";
  *((_QWORD *)v79 + 1) = 21;
  v79[16] = 2;
  v11();
  v80 = (_QWORD *)(v7 + 37 * v4);
  v81 = (char *)v80 + *(int *)(v2 + 48);
  *v80 = 38;
  *(_QWORD *)v81 = "fused_course";
  *((_QWORD *)v81 + 1) = 12;
  v81[16] = 2;
  v11();
  v82 = (_QWORD *)(v7 + 38 * v4);
  v83 = (char *)v82 + *(int *)(v2 + 48);
  *v82 = 39;
  *(_QWORD *)v83 = "fused_course_accuracy";
  *((_QWORD *)v83 + 1) = 21;
  v83[16] = 2;
  v11();
  v84 = (_QWORD *)(v7 + 39 * v4);
  v85 = (char *)v84 + *(int *)(v2 + 48);
  *v84 = 40;
  *(_QWORD *)v85 = "estimated_worst_case_error";
  *((_QWORD *)v85 + 1) = 26;
  v85[16] = 2;
  v11();
  v86 = (_QWORD *)(v7 + 40 * v4);
  v87 = (char *)v86 + *(int *)(v2 + 48);
  *v86 = 41;
  *(_QWORD *)v87 = "pre_fusing_altitude";
  *((_QWORD *)v87 + 1) = 19;
  v87[16] = 2;
  v11();
  v88 = (_QWORD *)(v7 + 41 * v4);
  v89 = (char *)v88 + *(int *)(v2 + 48);
  *v88 = 42;
  *(_QWORD *)v89 = "pre_fusing_vertical_accuracy";
  *((_QWORD *)v89 + 1) = 28;
  v89[16] = 2;
  v11();
  v90 = (_QWORD *)(v7 + 42 * v4);
  v91 = (char *)v90 + *(int *)(v2 + 48);
  *v90 = 43;
  *(_QWORD *)v91 = "is_coordinate_fused_with_vl";
  *((_QWORD *)v91 + 1) = 27;
  v91[16] = 2;
  v11();
  v92 = (_QWORD *)(v7 + 43 * v4);
  v93 = (char *)v92 + *(int *)(v2 + 48);
  *v92 = 44;
  *(_QWORD *)v93 = "fused_altitude";
  *((_QWORD *)v93 + 1) = 14;
  v93[16] = 2;
  v11();
  v94 = (_QWORD *)(v7 + 44 * v4);
  v95 = (char *)v94 + *(int *)(v2 + 48);
  *v94 = 45;
  *(_QWORD *)v95 = "fused_vertical_accuracy";
  *((_QWORD *)v95 + 1) = 23;
  v95[16] = 2;
  v11();
  v96 = (_QWORD *)(v7 + 45 * v4);
  v97 = (char *)v96 + *(int *)(v2 + 48);
  *v96 = 46;
  *(_QWORD *)v97 = "satellite_visibility_report";
  *((_QWORD *)v97 + 1) = 27;
  v97[16] = 2;
  v11();
  v98 = (_QWORD *)(v7 + 46 * v4);
  v99 = (char *)v98 + *(int *)(v2 + 48);
  *v98 = 47;
  *(_QWORD *)v99 = "gnss_content";
  *((_QWORD *)v99 + 1) = 12;
  v99[16] = 2;
  v11();
  v100 = (_QWORD *)(v7 + 47 * v4);
  v101 = (char *)v100 + *(int *)(v2 + 48);
  *v100 = 48;
  *(_QWORD *)v101 = "raw_altitude";
  *((_QWORD *)v101 + 1) = 12;
  v101[16] = 2;
  v11();
  v102 = (_QWORD *)(v7 + 48 * v4);
  v103 = (char *)v102 + *(int *)(v2 + 48);
  *v102 = 49;
  *(_QWORD *)v103 = "estimated_position_context_state";
  *((_QWORD *)v103 + 1) = 32;
  v103[16] = 2;
  v11();
  v104 = (_QWORD *)(v7 + 49 * v4);
  v105 = (char *)v104 + *(int *)(v2 + 48);
  *v104 = 50;
  *(_QWORD *)v105 = "estimated_position_context_state_probability_indoor";
  *((_QWORD *)v105 + 1) = 51;
  v105[16] = 2;
  v11();
  v106 = (_QWORD *)(v7 + 50 * v4);
  v107 = (char *)v106 + *(int *)(v2 + 48);
  *v106 = 51;
  *(_QWORD *)v107 = "estimated_position_context_state_probability_outdoor";
  *((_QWORD *)v107 + 1) = 52;
  v107[16] = 2;
  v11();
  v108 = (_QWORD *)(v7 + 51 * v4);
  v109 = (char *)v108 + *(int *)(v2 + 48);
  *v108 = 52;
  *(_QWORD *)v109 = "map_matcher_type";
  *((_QWORD *)v109 + 1) = 16;
  v109[16] = 2;
  v11();
  v110 = (_QWORD *)(v7 + 52 * v4);
  v111 = (char *)v110 + *(int *)(v2 + 48);
  *v110 = 53;
  *(_QWORD *)v111 = "is_route_hints_triggered_map_matching";
  *((_QWORD *)v111 + 1) = 37;
  v111[16] = 2;
  v11();
  v112 = (_QWORD *)(v7 + 53 * v4);
  v113 = (char *)v112 + *(int *)(v2 + 48);
  *v112 = 54;
  *(_QWORD *)v113 = "loi_location_source_accuracy";
  *((_QWORD *)v113 + 1) = 28;
  v113[16] = 2;
  v11();
  v114 = (_QWORD *)(v7 + 54 * v4);
  v115 = (char *)v114 + *(int *)(v2 + 48);
  *v114 = 55;
  *(_QWORD *)v115 = "batched_location_fix_type";
  *((_QWORD *)v115 + 1) = 25;
  v115[16] = 2;
  v11();
  v116 = (_QWORD *)(v7 + 55 * v4);
  v117 = (char *)v116 + *(int *)(v2 + 48);
  *v116 = 56;
  *(_QWORD *)v117 = "is_wifi_fix_with_associated_ap";
  *((_QWORD *)v117 + 1) = 30;
  v117[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v119);
}

uint64_t sub_1000CCF4C()
{
  return sub_100008BD0(&qword_1003941F8, (uint64_t)qword_1003838F0, (uint64_t)sub_1000CC2CC);
}

uint64_t sub_1000CCF68@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003941F8, (uint64_t)qword_1003838F0, (uint64_t)sub_1000CC2CC, a1);
}

uint64_t sub_1000CCF84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 56) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  *(_BYTE *)(v1 + 72) = 1;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 1;
  *(_DWORD *)(v1 + 92) = 0;
  *(_BYTE *)(v1 + 96) = 1;
  *(_DWORD *)(v1 + 100) = 0;
  *(_BYTE *)(v1 + 104) = 1;
  *(_DWORD *)(v1 + 108) = 0;
  *(_WORD *)(v1 + 113) = 1026;
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  *(_BYTE *)(v1 + 112) = 1;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted) = 2;
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel) = 4;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v4(v1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, 1, 1, v3);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice) = 3;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates) = 2;
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed) = 2;
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  *(_QWORD *)v22 = 0;
  *(_BYTE *)(v22 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused) = 2;
  v4(v1+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, 1, 1, v3);
  v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v23 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame) = 3;
  v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 1;
  v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  *(_QWORD *)v25 = 0;
  *(_BYTE *)(v25 + 8) = 1;
  v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  *(_QWORD *)v26 = 0;
  *(_BYTE *)(v26 + 8) = 1;
  v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 1;
  v28 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  *(_QWORD *)v28 = 0;
  *(_BYTE *)(v28 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl) = 2;
  v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  *(_QWORD *)v29 = 0;
  *(_BYTE *)(v29 + 8) = 1;
  v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 1;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport) = &_swiftEmptyArrayStorage;
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent) = 3;
  v32 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState) = 3;
  v34 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  *(_QWORD *)v34 = 0;
  *(_BYTE *)(v34 + 8) = 1;
  v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  *(_QWORD *)v35 = 0;
  *(_BYTE *)(v35 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType) = 4;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy) = 3;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType) = 5;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp) = 2;
  qword_100394208 = v1;
  return result;
}

uint64_t sub_1000CD3D4()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, &qword_10036E460);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, &qword_10036E468);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, &qword_10036E460);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, &qword_10036E470);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, &qword_10036E460);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport));
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, &qword_10036E478);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000CD498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  ValueMetadata *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  unint64_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[24];
  uint64_t v42;

  v5 = v3;
  v8 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v8)) & 1) == 0)
  {
    v9 = *(_QWORD *)(v3 + v8);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v12 = swift_retain(v9);
    sub_10010CBEC(v12);
    swift_release(v9);
    v13 = *(_QWORD *)(v5 + v8);
    *(_QWORD *)(v5 + v8) = v11;
    swift_release(v13);
  }
  v14 = *(_QWORD *)(v5 + v8);
  swift_retain(v14);
  v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v17 = v4;
  if (!v4)
  {
    v42 = v14 + 114;
    while ((v16 & 1) == 0)
    {
      switch(v15)
      {
        case 1:
          swift_beginAccess(v14 + 16, v41, 33, 0);
          v19 = v14 + 16;
          goto LABEL_65;
        case 2:
          v20 = v14 + 32;
          goto LABEL_64;
        case 3:
          v20 = v14 + 48;
          goto LABEL_64;
        case 4:
          v20 = v14 + 64;
          goto LABEL_64;
        case 5:
          v20 = v14 + 80;
          goto LABEL_64;
        case 6:
          v21 = v14 + 92;
          goto LABEL_27;
        case 7:
          v21 = v14 + 100;
          goto LABEL_27;
        case 8:
          v21 = v14 + 108;
          goto LABEL_27;
        case 9:
          v22 = v14 + 113;
          goto LABEL_73;
        case 10:
          v23 = v42;
          swift_beginAccess(v42, v41, 33, 0);
          v24 = sub_10014A3A0();
          v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
          goto LABEL_70;
        case 11:
          v26 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
          goto LABEL_45;
        case 12:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
          goto LABEL_63;
        case 13:
          v28 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
          goto LABEL_22;
        case 14:
          v28 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
LABEL_22:
          v29 = v14 + v28;
          swift_beginAccess(v14 + v28, v41, 33, 0);
          v30 = v17;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v29, a2, a3);
          goto LABEL_74;
        case 15:
          v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted;
          goto LABEL_72;
        case 16:
          v32 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, v41, 33, 0);
          v33 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
          v34 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample;
          v35 = &qword_10036F2C0;
          v36 = &unk_1002D0408;
          goto LABEL_59;
        case 17:
          v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel, v41, 33, 0);
          v24 = sub_10014A35C();
          v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
          goto LABEL_70;
        case 18:
          v21 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
LABEL_27:
          swift_beginAccess(v21, v41, 33, 0);
          v30 = v17;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v21, a2, a3);
          goto LABEL_74;
        case 19:
          v26 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
          goto LABEL_45;
        case 20:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
          goto LABEL_63;
        case 21:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
          goto LABEL_63;
        case 22:
          v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice, v41, 33, 0);
          v24 = sub_10014A318();
          v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
          goto LABEL_70;
        case 23:
          v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates;
          goto LABEL_72;
        case 24:
          v32 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, v41, 33, 0);
          v33 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
          v34 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData;
          v35 = &qword_10036F2A8;
          v36 = &unk_1002D02A0;
          goto LABEL_59;
        case 25:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
          goto LABEL_63;
        case 26:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
          goto LABEL_63;
        case 27:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
          goto LABEL_63;
        case 28:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
          goto LABEL_63;
        case 29:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
          goto LABEL_63;
        case 30:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
          goto LABEL_63;
        case 31:
          v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed;
          goto LABEL_72;
        case 32:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
          goto LABEL_63;
        case 33:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
          goto LABEL_63;
        case 34:
          v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused;
          goto LABEL_72;
        case 35:
          v26 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
LABEL_45:
          v32 = v14 + v26;
          swift_beginAccess(v14 + v26, v41, 33, 0);
          v33 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          v34 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          v35 = &qword_10036F280;
          v36 = &unk_1002CFF80;
          goto LABEL_59;
        case 36:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
          goto LABEL_63;
        case 37:
          v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame, v41, 33, 0);
          v24 = sub_10014AA00();
          v25 = &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
          goto LABEL_70;
        case 38:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
          goto LABEL_63;
        case 39:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
          goto LABEL_63;
        case 40:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
          goto LABEL_63;
        case 41:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
          goto LABEL_63;
        case 42:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
          goto LABEL_63;
        case 43:
          v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl;
          goto LABEL_72;
        case 44:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
          goto LABEL_63;
        case 45:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
          goto LABEL_63;
        case 46:
          v37 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport, v41, 33, 0);
          v38 = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          v39 = sub_10000FD38(&qword_10036F2D8, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&unk_1002D0570);
          v30 = v17;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v37, v38, v39, a2, a3);
          goto LABEL_74;
        case 47:
          v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent, v41, 33, 0);
          v24 = sub_10014A2D4();
          v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
          goto LABEL_70;
        case 48:
          v32 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, v41, 33, 0);
          v33 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
          v34 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo;
          v35 = (unint64_t *)&unk_10036F300;
          v36 = &unk_1002D0958;
LABEL_59:
          v40 = sub_10000FD38(v35, v34, (uint64_t)v36);
          v30 = v17;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v32, v33, v40, a2, a3);
          goto LABEL_74;
        case 49:
          v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState, v41, 33, 0);
          v24 = sub_10014A290();
          v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
          goto LABEL_70;
        case 50:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
          goto LABEL_63;
        case 51:
          v27 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
LABEL_63:
          v20 = v14 + v27;
LABEL_64:
          swift_beginAccess(v20, v41, 33, 0);
          v19 = v20;
LABEL_65:
          v30 = v17;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v19, a2, a3);
          goto LABEL_74;
        case 52:
          v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType, v41, 33, 0);
          v24 = sub_10014A24C();
          v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
          goto LABEL_70;
        case 53:
          v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching;
          goto LABEL_72;
        case 54:
          v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy, v41, 33, 0);
          v24 = sub_10014A208();
          v25 = &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
          goto LABEL_70;
        case 55:
          v23 = v14
              + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType;
          swift_beginAccess(v14+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType, v41, 33, 0);
          v24 = sub_10014A934();
          v25 = &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType;
LABEL_70:
          v30 = v17;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v23, v25, v24, a2, a3);
          goto LABEL_74;
        case 56:
          v31 = OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp;
LABEL_72:
          v22 = v14 + v31;
LABEL_73:
          swift_beginAccess(v22, v41, 33, 0);
          v30 = v17;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v22, a2, a3);
LABEL_74:
          v17 = v30;
          swift_endAccess(v41);
          break;
        default:
          break;
      }
      v15 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v14);
}

uint64_t sub_1000CDC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  int v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  _BYTE *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  unint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  unint64_t v62;
  unsigned __int8 *v63;
  int v64;
  _BYTE *v65;
  unint64_t v66;
  _BYTE *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  int v70;
  uint64_t v72;
  _BYTE v73[24];
  _BYTE v74[24];
  _BYTE v75[24];
  _BYTE v76[24];
  _BYTE v77[24];
  _BYTE v78[24];
  _BYTE v79[24];
  _BYTE v80[24];
  _BYTE v81[24];
  _BYTE v82[24];
  _BYTE v83[24];
  _BYTE v84[24];
  _BYTE v85[24];
  _BYTE v86[24];
  _BYTE v87[24];
  _BYTE v88[24];
  _BYTE v89[24];
  _BYTE v90[24];
  _BYTE v91[24];
  _BYTE v92[24];
  _BYTE v93[24];
  _BYTE v94[24];
  _BYTE v95[24];
  _BYTE v96[24];
  _BYTE v97[24];
  _BYTE v98[24];
  _BYTE v99[24];
  _BYTE v100[24];
  _BYTE v101[24];
  _BYTE v102[24];
  _BYTE v103[24];
  _BYTE v104[24];
  _BYTE v105[24];
  _BYTE v106[24];
  _BYTE v107[24];
  _BYTE v108[24];
  _BYTE v109[24];
  _BYTE v110[24];
  _BYTE v111[24];
  _BYTE v112[24];
  _BYTE v113[24];
  _BYTE v114[24];
  _BYTE v115[24];
  _BYTE v116[24];
  _BYTE v117[24];
  _BYTE v118[24];
  _BYTE v119[24];
  _BYTE v120[24];
  _BYTE v121[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v73, 0, 0);
  if ((*(_BYTE *)(v9 + 24) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)(v9 + 16));
  if (v4)
    return swift_release(v9);
  swift_beginAccess(v9 + 32, v74, 0, 0);
  if ((*(_BYTE *)(v9 + 40) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)(v9 + 32));
  swift_beginAccess(v9 + 48, v75, 0, 0);
  if ((*(_BYTE *)(v9 + 56) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)(v9 + 48));
  swift_beginAccess(v9 + 64, v76, 0, 0);
  if ((*(_BYTE *)(v9 + 72) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)(v9 + 64));
  swift_beginAccess(v9 + 80, v121, 0, 0);
  if ((*(_BYTE *)(v9 + 88) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5, a2, a3, *(double *)(v9 + 80));
  swift_beginAccess(v9 + 92, v120, 0, 0);
  if ((*(_BYTE *)(v9 + 96) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(6, a2, a3, *(float *)(v9 + 92));
  swift_beginAccess(v9 + 100, v119, 0, 0);
  if ((*(_BYTE *)(v9 + 104) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(7, a2, a3, *(float *)(v9 + 100));
  swift_beginAccess(v9 + 108, v118, 0, 0);
  if ((*(_BYTE *)(v9 + 112) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(8, a2, a3, *(float *)(v9 + 108));
  swift_beginAccess(v9 + 113, v117, 0, 0);
  v10 = *(unsigned __int8 *)(v9 + 113);
  if (v10 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v10 & 1, 9, a2, a3);
  swift_beginAccess(v9 + 114, v116, 0, 0);
  if (*(_BYTE *)(v9 + 114) != 4)
  {
    v115[0] = *(_BYTE *)(v9 + 114);
    v11 = sub_10014A3A0();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v115, 10, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType, v11, a2, a3);
  }
  sub_1000CECBC(v9, a1, a2, a3);
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse, v115, 0, 0);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(12, a2, a3, *(double *)v12);
  v13 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay, v114, 0, 0);
  if ((v13[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v13, 13, a2, a3);
  v14 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass, v113, 0, 0);
  if ((v14[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v14, 14, a2, a3);
  v15 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted, v112, 0, 0);
  v16 = *v15;
  if (v16 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v16 & 1, 15, a2, a3);
  sub_1000CEE48(v9, a1, a2, a3);
  v17 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel, v111, 0, 0);
  if (*v17 != 4)
  {
    v110[0] = *v17;
    v18 = sub_10014A35C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v110, 17, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType, v18, a2, a3);
  }
  v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation, v110, 0, 0);
  if ((*(_BYTE *)(v19 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(18, a2, a3, *(float *)v19);
  sub_1000CEFD4(v9, a1, a2, a3);
  v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy, v109, 0, 0);
  if ((*(_BYTE *)(v20 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(20, a2, a3, *(double *)v20);
  v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime, v108, 0, 0);
  if ((*(_BYTE *)(v21 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(21, a2, a3, *(double *)v21);
  v22 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice, v107, 0, 0);
  if (*v22 != 3)
  {
    v106[0] = *v22;
    v23 = sub_10014A318();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v106, 22, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType, v23, a2, a3);
  }
  v24 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates, v106, 0, 0);
  v25 = *v24;
  if (v25 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v25 & 1, 23, a2, a3);
  sub_1000CF160(v9, a1, a2, a3);
  v26 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope, v105, 0, 0);
  if ((*(_BYTE *)(v26 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(25, a2, a3, *(double *)v26);
  v27 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope, v104, 0, 0);
  if ((*(_BYTE *)(v27 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(26, a2, a3, *(double *)v27);
  v28 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude, v103, 0, 0);
  if ((*(_BYTE *)(v28 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(27, a2, a3, *(double *)v28);
  v29 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty, v102, 0, 0);
  if ((*(_BYTE *)(v29 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(28, a2, a3, *(double *)v29);
  v30 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude, v101, 0, 0);
  if ((*(_BYTE *)(v30 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(29, a2, a3, *(double *)v30);
  v31 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty, v100, 0, 0);
  if ((*(_BYTE *)(v31 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(30, a2, a3, *(double *)v31);
  v32 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed, v99, 0, 0);
  v33 = *v32;
  if (v33 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v33 & 1, 31, a2, a3);
  v34 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy, v98, 0, 0);
  if ((*(_BYTE *)(v34 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(32, a2, a3, *(double *)v34);
  v35 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy, v97, 0, 0);
  if ((*(_BYTE *)(v35 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(33, a2, a3, *(double *)v35);
  v36 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused, v96, 0, 0);
  v37 = *v36;
  if (v37 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v37 & 1, 34, a2, a3);
  sub_1000CF2EC(v9, a1, a2, a3);
  v38 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy, v95, 0, 0);
  if ((*(_BYTE *)(v38 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(36, a2, a3, *(double *)v38);
  v39 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame, v94, 0, 0);
  if (*v39 != 3)
  {
    v93[0] = *v39;
    v40 = sub_10014AA00();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v93, 37, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType, v40, a2, a3);
  }
  v41 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse, v93, 0, 0);
  if ((*(_BYTE *)(v41 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(38, a2, a3, *(double *)v41);
  v42 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy, v92, 0, 0);
  if ((*(_BYTE *)(v42 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(39, a2, a3, *(double *)v42);
  v43 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError, v91, 0, 0);
  if ((*(_BYTE *)(v43 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(40, a2, a3, *(double *)v43);
  v44 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude, v90, 0, 0);
  if ((*(_BYTE *)(v44 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(41, a2, a3, *(double *)v44);
  v45 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy, v89, 0, 0);
  if ((*(_BYTE *)(v45 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(42, a2, a3, *(double *)v45);
  v46 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl, v88, 0, 0);
  v47 = *v46;
  if (v47 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v47 & 1, 43, a2, a3);
  v48 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude, v87, 0, 0);
  if ((*(_BYTE *)(v48 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(44, a2, a3, *(double *)v48);
  v49 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy, v86, 0, 0);
  if ((*(_BYTE *)(v49 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(45, a2, a3, *(double *)v49);
  v50 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport, &v72, 0, 0);
  v51 = *v50;
  if (*(_QWORD *)(v51 + 16))
  {
    v52 = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
    v53 = sub_10000FD38(&qword_10036F2D8, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&unk_1002D0570);
    v54 = swift_bridgeObjectRetain(v51);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v54, 46, v52, v53, a2, a3);
    swift_bridgeObjectRelease(v51);
  }
  v55 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent, v85, 0, 0);
  if (*v55 != 3)
  {
    v84[0] = *v55;
    v56 = sub_10014A2D4();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v84, 47, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent, v56, a2, a3);
  }
  sub_1000CF478(v9, a1, a2, a3);
  v57 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState, v84, 0, 0);
  if (*v57 != 3)
  {
    v83[0] = *v57;
    v58 = sub_10014A290();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v83, 49, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType, v58, a2, a3);
  }
  v59 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor, v83, 0, 0);
  if ((*(_BYTE *)(v59 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(50, a2, a3, *(double *)v59);
  v60 = v9
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor, v82, 0, 0);
  if ((*(_BYTE *)(v60 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(51, a2, a3, *(double *)v60);
  v61 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType, v81, 0, 0);
  if (*v61 != 4)
  {
    v80[0] = *v61;
    v62 = sub_10014A24C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v80, 52, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType, v62, a2, a3);
  }
  v63 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching, v80, 0, 0);
  v64 = *v63;
  if (v64 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v64 & 1, 53, a2, a3);
  v65 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy, v79, 0, 0);
  if (*v65 != 3)
  {
    v78[0] = *v65;
    v66 = sub_10014A208();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v78, 54, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy, v66, a2, a3);
  }
  v67 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType, v78, 0, 0);
  if (*v67 != 5)
  {
    v77[0] = *v67;
    v68 = sub_10014A934();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v77, 55, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType, v68, a2, a3);
  }
  v69 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp, v77, 0, 0);
  v70 = *v69;
  if (v70 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v70 & 1, 56, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000CECBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E460);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v15 = sub_10000FD38(&qword_10036F280, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002CFF80);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 11, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000CEE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E468);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E468);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E468);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  v15 = sub_10000FD38(&qword_10036F2C0, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&unk_1002D0408);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 16, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000CEFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E460);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v15 = sub_10000FD38(&qword_10036F280, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002CFF80);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 19, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000CF160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E470);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E470);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E470);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  v15 = sub_10000FD38(&qword_10036F2A8, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&unk_1002D02A0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 24, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_1000CF2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E460);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E460);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v15 = sub_10000FD38(&qword_10036F280, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&unk_1002CFF80);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 35, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000CF478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E478);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E478);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E478);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  v15 = sub_10000FD38(&qword_10036F300, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&unk_1002D0958);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 48, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000CF604(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, sub_1000CF62C) & 1;
}

uint64_t sub_1000CF62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  double v46;
  char v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double *v51;
  char v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double *v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double *v61;
  char v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  double *v66;
  char v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  float *v71;
  char v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  float *v76;
  char v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  float *v81;
  char v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t result;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  char v104;
  uint64_t v105;
  int *v106;
  int v107;
  char v108;
  uint64_t v109;
  int *v110;
  int v111;
  char v112;
  uint64_t v113;
  unsigned __int8 *v114;
  int v115;
  unsigned __int8 *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  unsigned __int8 *v129;
  int v130;
  unsigned __int8 *v131;
  int v132;
  uint64_t v133;
  float v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  double v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  char v151;
  uint64_t v152;
  unsigned __int8 *v153;
  int v154;
  unsigned __int8 *v155;
  int v156;
  unsigned __int8 *v157;
  int v158;
  unsigned __int8 *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int (*v166)(uint64_t, uint64_t, uint64_t);
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  double v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  double v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  double v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  double v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  double v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  double v191;
  char v192;
  uint64_t v193;
  unsigned __int8 *v194;
  int v195;
  unsigned __int8 *v196;
  int v197;
  uint64_t v198;
  double v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  double v203;
  char v204;
  uint64_t v205;
  unsigned __int8 *v206;
  int v207;
  unsigned __int8 *v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  double v219;
  char v220;
  uint64_t v221;
  unsigned __int8 *v222;
  int v223;
  unsigned __int8 *v224;
  int v225;
  uint64_t v226;
  double v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  double v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  double v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  double v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  double v243;
  char v244;
  uint64_t v245;
  unsigned __int8 *v246;
  int v247;
  unsigned __int8 *v248;
  int v249;
  uint64_t v250;
  double v251;
  char v252;
  uint64_t v253;
  uint64_t v254;
  double v255;
  char v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  char v262;
  unsigned __int8 *v263;
  int v264;
  unsigned __int8 *v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int (*v272)(uint64_t, uint64_t, uint64_t);
  uint64_t v273;
  uint64_t v274;
  char v275;
  unsigned __int8 *v276;
  int v277;
  unsigned __int8 *v278;
  int v279;
  uint64_t v280;
  double v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  double v285;
  char v286;
  uint64_t v287;
  unsigned __int8 *v288;
  int v289;
  unsigned __int8 *v290;
  int v291;
  unsigned __int8 *v292;
  int v293;
  unsigned __int8 *v294;
  int v295;
  unsigned __int8 *v296;
  int v297;
  unsigned __int8 *v298;
  int v299;
  unsigned __int8 *v300;
  int v301;
  unsigned __int8 *v302;
  int v303;
  uint64_t v304;
  unsigned __int8 *v305;
  int v306;
  uint64_t v307;
  unsigned __int8 *v308;
  int v309;
  uint64_t v310;
  unsigned int (*v311)(uint64_t, uint64_t, uint64_t);
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _BYTE v449[24];
  _BYTE v450[24];
  _BYTE v451[24];
  _BYTE v452[24];
  _BYTE v453[24];
  _BYTE v454[32];

  v327 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  v324 = *(_QWORD *)(v327 - 8);
  __chkstk_darwin(v327);
  v328 = (uint64_t)&v310 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v323 = sub_1000039AC(&qword_100375418);
  __chkstk_darwin(v323);
  v329 = (uint64_t)&v310 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036E478);
  v7 = __chkstk_darwin(v6);
  v326 = (uint64_t)&v310 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v325 = (uint64_t)&v310 - v9;
  v317 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  v314 = *(_QWORD *)(v317 - 8);
  __chkstk_darwin(v317);
  v318 = (uint64_t)&v310 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v313 = sub_1000039AC(&qword_100375420);
  __chkstk_darwin(v313);
  v319 = (uint64_t)&v310 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_10036E470);
  v13 = __chkstk_darwin(v12);
  v316 = (uint64_t)&v310 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v315 = (uint64_t)&v310 - v15;
  v336 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  v16 = *(_QWORD *)(v336 - 8);
  __chkstk_darwin(v336);
  v333 = (uint64_t)&v310 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_100375428);
  __chkstk_darwin(v18);
  v337 = (uint64_t)&v310 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000039AC(&qword_10036E468);
  v21 = __chkstk_darwin(v20);
  v334 = (uint64_t)&v310 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v335 = (uint64_t)&v310 - v23;
  v340 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v24 = *(_QWORD *)(v340 - 8);
  __chkstk_darwin(v340);
  v338 = (uint64_t)&v310 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v339 = sub_1000039AC(&qword_100375328);
  v26 = __chkstk_darwin(v339);
  v322 = (uint64_t)&v310 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v332 = (uint64_t)&v310 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v310 - v30;
  v32 = sub_1000039AC(&qword_10036E460);
  v33 = __chkstk_darwin(v32);
  v321 = (uint64_t)&v310 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v320 = (uint64_t)&v310 - v36;
  v37 = __chkstk_darwin(v35);
  v330 = (uint64_t)&v310 - v38;
  v39 = __chkstk_darwin(v37);
  v331 = (uint64_t)&v310 - v40;
  v41 = __chkstk_darwin(v39);
  v43 = (char *)&v310 - v42;
  __chkstk_darwin(v41);
  v45 = (char *)&v310 - v44;
  swift_beginAccess(a1 + 16, v454, 0, 0);
  v46 = *(double *)(a1 + 16);
  v342 = a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 24);
  swift_beginAccess(a2 + 16, v453, 0, 0);
  v341 = a2;
  v47 = *(_BYTE *)(a2 + 24);
  if ((a1 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (v46 != *(double *)(a2 + 16))
      v47 = 1;
    if ((v47 & 1) != 0)
      return 0;
  }
  v48 = v342;
  swift_beginAccess(v342 + 32, v452, 0, 0);
  v49 = *(double *)(v48 + 32);
  LOBYTE(v48) = *(_BYTE *)(v48 + 40);
  v50 = v341;
  v51 = (double *)(v341 + 32);
  swift_beginAccess(v341 + 32, v451, 0, 0);
  v52 = *(_BYTE *)(v50 + 40);
  if ((v48 & 1) != 0)
  {
    if (!*(_BYTE *)(v50 + 40))
      return 0;
  }
  else
  {
    if (v49 != *v51)
      v52 = 1;
    if ((v52 & 1) != 0)
      return 0;
  }
  v53 = v342;
  swift_beginAccess(v342 + 48, v450, 0, 0);
  v54 = *(double *)(v53 + 48);
  LOBYTE(v53) = *(_BYTE *)(v53 + 56);
  v55 = v341;
  v56 = (double *)(v341 + 48);
  swift_beginAccess(v341 + 48, v449, 0, 0);
  v57 = *(_BYTE *)(v55 + 56);
  if ((v53 & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 56))
      return 0;
  }
  else
  {
    if (v54 != *v56)
      v57 = 1;
    if ((v57 & 1) != 0)
      return 0;
  }
  v58 = v342;
  swift_beginAccess(v342 + 64, &v448, 0, 0);
  v59 = *(double *)(v58 + 64);
  LOBYTE(v58) = *(_BYTE *)(v58 + 72);
  v60 = v341;
  v61 = (double *)(v341 + 64);
  swift_beginAccess(v341 + 64, &v447, 0, 0);
  v62 = *(_BYTE *)(v60 + 72);
  if ((v58 & 1) != 0)
  {
    if (!*(_BYTE *)(v60 + 72))
      return 0;
  }
  else
  {
    if (v59 != *v61)
      v62 = 1;
    if ((v62 & 1) != 0)
      return 0;
  }
  v63 = v342;
  swift_beginAccess(v342 + 80, &v446, 0, 0);
  v64 = *(double *)(v63 + 80);
  LOBYTE(v63) = *(_BYTE *)(v63 + 88);
  v65 = v341;
  v66 = (double *)(v341 + 80);
  swift_beginAccess(v341 + 80, &v445, 0, 0);
  v67 = *(_BYTE *)(v65 + 88);
  if ((v63 & 1) != 0)
  {
    if (!*(_BYTE *)(v65 + 88))
      return 0;
  }
  else
  {
    if (v64 != *v66)
      v67 = 1;
    if ((v67 & 1) != 0)
      return 0;
  }
  v68 = v342;
  swift_beginAccess(v342 + 92, &v444, 0, 0);
  v69 = *(float *)(v68 + 92);
  LOBYTE(v68) = *(_BYTE *)(v68 + 96);
  v70 = v341;
  v71 = (float *)(v341 + 92);
  swift_beginAccess(v341 + 92, &v443, 0, 0);
  v72 = *(_BYTE *)(v70 + 96);
  if ((v68 & 1) != 0)
  {
    if (!*(_BYTE *)(v70 + 96))
      return 0;
  }
  else
  {
    if (v69 != *v71)
      v72 = 1;
    if ((v72 & 1) != 0)
      return 0;
  }
  v73 = v342;
  swift_beginAccess(v342 + 100, &v442, 0, 0);
  v74 = *(float *)(v73 + 100);
  LOBYTE(v73) = *(_BYTE *)(v73 + 104);
  v75 = v341;
  v76 = (float *)(v341 + 100);
  swift_beginAccess(v341 + 100, &v441, 0, 0);
  v77 = *(_BYTE *)(v75 + 104);
  if ((v73 & 1) != 0)
  {
    if (!*(_BYTE *)(v75 + 104))
      return 0;
  }
  else
  {
    if (v74 != *v76)
      v77 = 1;
    if ((v77 & 1) != 0)
      return 0;
  }
  v78 = v342;
  swift_beginAccess(v342 + 108, &v440, 0, 0);
  v79 = *(float *)(v78 + 108);
  LOBYTE(v78) = *(_BYTE *)(v78 + 112);
  v80 = v341;
  v81 = (float *)(v341 + 108);
  swift_beginAccess(v341 + 108, &v439, 0, 0);
  v82 = *(_BYTE *)(v80 + 112);
  if ((v78 & 1) != 0)
  {
    if (!*(_BYTE *)(v80 + 112))
      return 0;
  }
  else
  {
    if (v79 != *v81)
      v82 = 1;
    if ((v82 & 1) != 0)
      return 0;
  }
  v83 = v342;
  swift_beginAccess(v342 + 113, &v438, 0, 0);
  v84 = *(unsigned __int8 *)(v83 + 113);
  v85 = v341;
  swift_beginAccess(v341 + 113, &v437, 0, 0);
  v86 = *(unsigned __int8 *)(v85 + 113);
  if (v84 == 2)
  {
    if (v86 != 2)
      return 0;
  }
  else if (v86 == 2 || ((((v86 & 1) == 0) ^ v84) & 1) == 0)
  {
    return 0;
  }
  v87 = v342;
  swift_beginAccess(v342 + 114, &v436, 0, 0);
  v88 = *(unsigned __int8 *)(v87 + 114);
  v89 = v341;
  swift_beginAccess(v341 + 114, &v435, 0, 0);
  v90 = *(unsigned __int8 *)(v89 + 114);
  if (v88 == 4)
  {
    if (v90 != 4)
      return 0;
LABEL_59:
    v92 = v342
        + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
    swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, &v434, 0, 0);
    sub_10000E660(v92, (uint64_t)v45, &qword_10036E460);
    v93 = v341;
    v94 = v341
        + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
    swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, &v433, 0, 0);
    v95 = (uint64_t)&v31[*(int *)(v339 + 48)];
    sub_10000E660((uint64_t)v45, (uint64_t)v31, &qword_10036E460);
    v312 = v95;
    sub_10000E660(v94, v95, &qword_10036E460);
    v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    v97 = v340;
    if (v96((uint64_t)v31, 1, v340) == 1)
    {
      v98 = v342;
      swift_retain(v342);
      swift_retain(v93);
      sub_100015704((uint64_t)v45, &qword_10036E460);
      if (v96(v312, 1, v97) == 1)
      {
        v311 = v96;
        sub_100015704((uint64_t)v31, &qword_10036E460);
        goto LABEL_67;
      }
    }
    else
    {
      sub_10000E660((uint64_t)v31, (uint64_t)v43, &qword_10036E460);
      v99 = v312;
      if (v96(v312, 1, v97) != 1)
      {
        v311 = v96;
        v101 = v338;
        sub_100003E08(v99, v338, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        v98 = v342;
        swift_retain(v342);
        v93 = v341;
        swift_retain(v341);
        LODWORD(v312) = sub_10011F460((uint64_t)v43, v101, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        sub_100004030(v101, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        sub_100015704((uint64_t)v45, &qword_10036E460);
        sub_100004030((uint64_t)v43, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        sub_100015704((uint64_t)v31, &qword_10036E460);
        if ((v312 & 1) != 0)
        {
LABEL_67:
          v102 = v98
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
          swift_beginAccess(v98+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse, &v432, 0, 0);
          v103 = *(double *)v102;
          v104 = *(_BYTE *)(v102 + 8);
          v105 = v93
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
          swift_beginAccess(v93+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse, &v431, 0, 0);
          if ((v104 & 1) != 0)
          {
            if ((*(_BYTE *)(v105 + 8) & 1) == 0)
              goto LABEL_94;
          }
          else if ((*(_BYTE *)(v105 + 8) & 1) != 0 || v103 != *(double *)v105)
          {
            goto LABEL_94;
          }
          v106 = (int *)(v342
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay, &v430, 0, 0);
          v107 = *v106;
          v108 = *((_BYTE *)v106 + 4);
          v109 = v341
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay, &v429, 0, 0);
          if ((v108 & 1) != 0)
          {
            if ((*(_BYTE *)(v109 + 4) & 1) == 0)
              goto LABEL_94;
          }
          else if ((*(_BYTE *)(v109 + 4) & 1) != 0 || v107 != *(_DWORD *)v109)
          {
            goto LABEL_94;
          }
          v110 = (int *)(v342
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass, &v428, 0, 0);
          v111 = *v110;
          v112 = *((_BYTE *)v110 + 4);
          v113 = v341
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass, &v427, 0, 0);
          if ((v112 & 1) != 0)
          {
            if ((*(_BYTE *)(v113 + 4) & 1) == 0)
              goto LABEL_94;
          }
          else if ((*(_BYTE *)(v113 + 4) & 1) != 0 || v111 != *(_DWORD *)v113)
          {
            goto LABEL_94;
          }
          v114 = (unsigned __int8 *)(v342
                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted, &v426, 0, 0);
          v115 = *v114;
          v116 = (unsigned __int8 *)(v341
                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted, &v425, 0, 0);
          v117 = *v116;
          if (v115 == 2)
          {
            if (v117 != 2)
              goto LABEL_94;
          }
          else if (v117 == 2 || ((((v117 & 1) == 0) ^ v115) & 1) == 0)
          {
            goto LABEL_94;
          }
          v118 = v342
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, &v424, 0, 0);
          v119 = v335;
          sub_10000E660(v118, v335, &qword_10036E468);
          v120 = v341
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, &v423, 0, 0);
          v121 = v337;
          v122 = v337 + *(int *)(v18 + 48);
          sub_10000E660(v119, v337, &qword_10036E468);
          sub_10000E660(v120, v122, &qword_10036E468);
          v123 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
          if (v123(v121, 1, v336) == 1)
          {
            sub_100015704(v335, &qword_10036E468);
            if (v123(v122, 1, v336) == 1)
            {
              sub_100015704(v337, &qword_10036E468);
              goto LABEL_99;
            }
          }
          else
          {
            sub_10000E660(v337, v334, &qword_10036E468);
            if (v123(v122, 1, v336) != 1)
            {
              v126 = v333;
              sub_100003E08(v122, v333, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
              v127 = v334;
              v128 = sub_10011F460(v334, v126, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
              sub_100004030(v126, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
              sub_100015704(v335, &qword_10036E468);
              sub_100004030(v127, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
              sub_100015704(v337, &qword_10036E468);
              if ((v128 & 1) == 0)
                goto LABEL_94;
LABEL_99:
              v129 = (unsigned __int8 *)(v342
                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
              swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel, &v422, 0, 0);
              v130 = *v129;
              v131 = (unsigned __int8 *)(v341
                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
              swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel, &v421, 0, 0);
              v132 = *v131;
              if (v130 == 4)
              {
                if (v132 != 4)
                  goto LABEL_94;
              }
              else if (v132 == 4 || v130 != v132)
              {
                goto LABEL_94;
              }
              v133 = v342
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
              swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation, &v420, 0, 0);
              v134 = *(float *)v133;
              v135 = *(_BYTE *)(v133 + 4);
              v136 = v341
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
              swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation, &v419, 0, 0);
              if ((v135 & 1) != 0)
              {
                if ((*(_BYTE *)(v136 + 4) & 1) == 0)
                  goto LABEL_94;
              }
              else if ((*(_BYTE *)(v136 + 4) & 1) != 0 || v134 != *(float *)v136)
              {
                goto LABEL_94;
              }
              v137 = v342
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
              swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, &v418, 0, 0);
              v138 = v331;
              sub_10000E660(v137, v331, &qword_10036E460);
              v139 = v341
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
              swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, &v417, 0, 0);
              v140 = v332;
              v141 = v332 + *(int *)(v339 + 48);
              sub_10000E660(v138, v332, &qword_10036E460);
              sub_10000E660(v139, v141, &qword_10036E460);
              if (v311(v140, 1, v340) == 1)
              {
                sub_100015704(v331, &qword_10036E460);
                if (v311(v141, 1, v340) == 1)
                {
                  sub_100015704(v332, &qword_10036E460);
                  goto LABEL_116;
                }
              }
              else
              {
                sub_10000E660(v332, v330, &qword_10036E460);
                if (v311(v141, 1, v340) != 1)
                {
                  v142 = v338;
                  sub_100003E08(v141, v338, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                  v143 = v330;
                  v144 = sub_10011F460(v330, v142, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                  sub_100004030(v142, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                  sub_100015704(v331, &qword_10036E460);
                  sub_100004030(v143, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                  sub_100015704(v332, &qword_10036E460);
                  if ((v144 & 1) == 0)
                    goto LABEL_94;
LABEL_116:
                  v145 = v342
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
                  swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy, &v416, 0, 0);
                  v146 = *(double *)v145;
                  v147 = *(_BYTE *)(v145 + 8);
                  v148 = v341
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
                  swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy, &v415, 0, 0);
                  if ((v147 & 1) != 0)
                  {
                    if ((*(_BYTE *)(v148 + 8) & 1) == 0)
                      goto LABEL_94;
                  }
                  else if ((*(_BYTE *)(v148 + 8) & 1) != 0 || v146 != *(double *)v148)
                  {
                    goto LABEL_94;
                  }
                  v149 = v342
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
                  swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime, &v414, 0, 0);
                  v150 = *(double *)v149;
                  v151 = *(_BYTE *)(v149 + 8);
                  v152 = v341
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
                  swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime, &v413, 0, 0);
                  if ((v151 & 1) != 0)
                  {
                    if ((*(_BYTE *)(v152 + 8) & 1) == 0)
                      goto LABEL_94;
                  }
                  else if ((*(_BYTE *)(v152 + 8) & 1) != 0 || v150 != *(double *)v152)
                  {
                    goto LABEL_94;
                  }
                  v153 = (unsigned __int8 *)(v342
                                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
                  swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice, &v412, 0, 0);
                  v154 = *v153;
                  v155 = (unsigned __int8 *)(v341
                                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
                  swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice, &v411, 0, 0);
                  v156 = *v155;
                  if (v154 == 3)
                  {
                    if (v156 != 3)
                      goto LABEL_94;
                  }
                  else if (v156 == 3 || v154 != v156)
                  {
                    goto LABEL_94;
                  }
                  v157 = (unsigned __int8 *)(v342
                                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
                  swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates, &v410, 0, 0);
                  v158 = *v157;
                  v159 = (unsigned __int8 *)(v341
                                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
                  swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates, &v409, 0, 0);
                  v160 = *v159;
                  if (v158 == 2)
                  {
                    if (v160 != 2)
                      goto LABEL_94;
                  }
                  else if (v160 == 2 || ((((v160 & 1) == 0) ^ v158) & 1) == 0)
                  {
                    goto LABEL_94;
                  }
                  v161 = v342
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
                  swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, &v408, 0, 0);
                  v162 = v315;
                  sub_10000E660(v161, v315, &qword_10036E470);
                  v163 = v341
                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
                  swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, &v407, 0, 0);
                  v164 = v319;
                  v165 = v319 + *(int *)(v313 + 48);
                  sub_10000E660(v162, v319, &qword_10036E470);
                  sub_10000E660(v163, v165, &qword_10036E470);
                  v166 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v314 + 48);
                  if (v166(v164, 1, v317) == 1)
                  {
                    sub_100015704(v315, &qword_10036E470);
                    if (v166(v165, 1, v317) == 1)
                    {
                      sub_100015704(v319, &qword_10036E470);
                      goto LABEL_143;
                    }
                  }
                  else
                  {
                    sub_10000E660(v319, v316, &qword_10036E470);
                    if (v166(v165, 1, v317) != 1)
                    {
                      v167 = v318;
                      sub_100003E08(v165, v318, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                      v168 = v316;
                      v169 = sub_10011F9D4(v316, v167);
                      sub_100004030(v167, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                      sub_100015704(v315, &qword_10036E470);
                      sub_100004030(v168, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                      sub_100015704(v319, &qword_10036E470);
                      if ((v169 & 1) == 0)
                        goto LABEL_94;
LABEL_143:
                      v170 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
                      swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope, &v406, 0, 0);
                      v171 = *(double *)v170;
                      v172 = *(_BYTE *)(v170 + 8);
                      v173 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
                      swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope, &v405, 0, 0);
                      if ((v172 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v173 + 8) & 1) == 0)
                          goto LABEL_94;
                      }
                      else if ((*(_BYTE *)(v173 + 8) & 1) != 0 || v171 != *(double *)v173)
                      {
                        goto LABEL_94;
                      }
                      v174 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
                      swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope, &v404, 0, 0);
                      v175 = *(double *)v174;
                      v176 = *(_BYTE *)(v174 + 8);
                      v177 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
                      swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope, &v403, 0, 0);
                      if ((v176 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v177 + 8) & 1) == 0)
                          goto LABEL_94;
                      }
                      else if ((*(_BYTE *)(v177 + 8) & 1) != 0 || v175 != *(double *)v177)
                      {
                        goto LABEL_94;
                      }
                      v178 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
                      swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude, &v402, 0, 0);
                      v179 = *(double *)v178;
                      v180 = *(_BYTE *)(v178 + 8);
                      v181 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
                      swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude, &v401, 0, 0);
                      if ((v180 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v181 + 8) & 1) == 0)
                          goto LABEL_94;
                      }
                      else if ((*(_BYTE *)(v181 + 8) & 1) != 0 || v179 != *(double *)v181)
                      {
                        goto LABEL_94;
                      }
                      v182 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
                      swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty, &v400, 0, 0);
                      v183 = *(double *)v182;
                      v184 = *(_BYTE *)(v182 + 8);
                      v185 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
                      swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty, &v399, 0, 0);
                      if ((v184 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v185 + 8) & 1) == 0)
                          goto LABEL_94;
                      }
                      else if ((*(_BYTE *)(v185 + 8) & 1) != 0 || v183 != *(double *)v185)
                      {
                        goto LABEL_94;
                      }
                      v186 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
                      swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude, &v398, 0, 0);
                      v187 = *(double *)v186;
                      v188 = *(_BYTE *)(v186 + 8);
                      v189 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
                      swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude, &v397, 0, 0);
                      if ((v188 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v189 + 8) & 1) == 0)
                          goto LABEL_94;
                      }
                      else if ((*(_BYTE *)(v189 + 8) & 1) != 0 || v187 != *(double *)v189)
                      {
                        goto LABEL_94;
                      }
                      v190 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
                      swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty, &v396, 0, 0);
                      v191 = *(double *)v190;
                      v192 = *(_BYTE *)(v190 + 8);
                      v193 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
                      swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty, &v395, 0, 0);
                      if ((v192 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v193 + 8) & 1) == 0)
                          goto LABEL_94;
                      }
                      else if ((*(_BYTE *)(v193 + 8) & 1) != 0 || v191 != *(double *)v193)
                      {
                        goto LABEL_94;
                      }
                      v194 = (unsigned __int8 *)(v342
                                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
                      swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed, &v394, 0, 0);
                      v195 = *v194;
                      v196 = (unsigned __int8 *)(v341
                                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
                      swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed, &v393, 0, 0);
                      v197 = *v196;
                      if (v195 == 2)
                      {
                        if (v197 != 2)
                          goto LABEL_94;
                      }
                      else if (v197 == 2 || ((((v197 & 1) == 0) ^ v195) & 1) == 0)
                      {
                        goto LABEL_94;
                      }
                      v198 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
                      swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy, &v392, 0, 0);
                      v199 = *(double *)v198;
                      v200 = *(_BYTE *)(v198 + 8);
                      v201 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
                      swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy, &v391, 0, 0);
                      if ((v200 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v201 + 8) & 1) == 0)
                          goto LABEL_94;
                      }
                      else if ((*(_BYTE *)(v201 + 8) & 1) != 0 || v199 != *(double *)v201)
                      {
                        goto LABEL_94;
                      }
                      v202 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
                      swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy, &v390, 0, 0);
                      v203 = *(double *)v202;
                      v204 = *(_BYTE *)(v202 + 8);
                      v205 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
                      swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy, &v389, 0, 0);
                      if ((v204 & 1) != 0)
                      {
                        if ((*(_BYTE *)(v205 + 8) & 1) == 0)
                          goto LABEL_94;
                      }
                      else if ((*(_BYTE *)(v205 + 8) & 1) != 0 || v203 != *(double *)v205)
                      {
                        goto LABEL_94;
                      }
                      v206 = (unsigned __int8 *)(v342
                                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
                      swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused, &v388, 0, 0);
                      v207 = *v206;
                      v208 = (unsigned __int8 *)(v341
                                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
                      swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused, &v387, 0, 0);
                      v209 = *v208;
                      if (v207 == 2)
                      {
                        if (v209 != 2)
                          goto LABEL_94;
                      }
                      else if (v209 == 2 || ((((v209 & 1) == 0) ^ v207) & 1) == 0)
                      {
                        goto LABEL_94;
                      }
                      v210 = v342
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
                      swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, &v386, 0, 0);
                      v211 = v320;
                      sub_10000E660(v210, v320, &qword_10036E460);
                      v212 = v341
                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
                      swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, &v385, 0, 0);
                      v213 = v322;
                      v214 = v322 + *(int *)(v339 + 48);
                      sub_10000E660(v211, v322, &qword_10036E460);
                      sub_10000E660(v212, v214, &qword_10036E460);
                      if (v311(v213, 1, v340) == 1)
                      {
                        sub_100015704(v320, &qword_10036E460);
                        if (v311(v214, 1, v340) == 1)
                        {
                          sub_100015704(v322, &qword_10036E460);
LABEL_200:
                          v218 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy, &v384, 0, 0);
                          v219 = *(double *)v218;
                          v220 = *(_BYTE *)(v218 + 8);
                          v221 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy, &v383, 0, 0);
                          if ((v220 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v221 + 8) & 1) == 0)
                              goto LABEL_94;
                          }
                          else if ((*(_BYTE *)(v221 + 8) & 1) != 0 || v219 != *(double *)v221)
                          {
                            goto LABEL_94;
                          }
                          v222 = (unsigned __int8 *)(v342
                                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame, &v382, 0, 0);
                          v223 = *v222;
                          v224 = (unsigned __int8 *)(v341
                                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame, &v381, 0, 0);
                          v225 = *v224;
                          if (v223 == 3)
                          {
                            if (v225 != 3)
                              goto LABEL_94;
                          }
                          else if (v225 == 3 || v223 != v225)
                          {
                            goto LABEL_94;
                          }
                          v226 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse, &v380, 0, 0);
                          v227 = *(double *)v226;
                          v228 = *(_BYTE *)(v226 + 8);
                          v229 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse, &v379, 0, 0);
                          if ((v228 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v229 + 8) & 1) == 0)
                              goto LABEL_94;
                          }
                          else if ((*(_BYTE *)(v229 + 8) & 1) != 0 || v227 != *(double *)v229)
                          {
                            goto LABEL_94;
                          }
                          v230 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy, &v378, 0, 0);
                          v231 = *(double *)v230;
                          v232 = *(_BYTE *)(v230 + 8);
                          v233 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy, &v377, 0, 0);
                          if ((v232 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v233 + 8) & 1) == 0)
                              goto LABEL_94;
                          }
                          else if ((*(_BYTE *)(v233 + 8) & 1) != 0 || v231 != *(double *)v233)
                          {
                            goto LABEL_94;
                          }
                          v234 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError, &v376, 0, 0);
                          v235 = *(double *)v234;
                          v236 = *(_BYTE *)(v234 + 8);
                          v237 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError, &v375, 0, 0);
                          if ((v236 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v237 + 8) & 1) == 0)
                              goto LABEL_94;
                          }
                          else if ((*(_BYTE *)(v237 + 8) & 1) != 0 || v235 != *(double *)v237)
                          {
                            goto LABEL_94;
                          }
                          v238 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude, &v374, 0, 0);
                          v239 = *(double *)v238;
                          v240 = *(_BYTE *)(v238 + 8);
                          v241 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude, &v373, 0, 0);
                          if ((v240 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v241 + 8) & 1) == 0)
                              goto LABEL_94;
                          }
                          else if ((*(_BYTE *)(v241 + 8) & 1) != 0 || v239 != *(double *)v241)
                          {
                            goto LABEL_94;
                          }
                          v242 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy, &v372, 0, 0);
                          v243 = *(double *)v242;
                          v244 = *(_BYTE *)(v242 + 8);
                          v245 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy, &v371, 0, 0);
                          if ((v244 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v245 + 8) & 1) == 0)
                              goto LABEL_94;
                          }
                          else if ((*(_BYTE *)(v245 + 8) & 1) != 0 || v243 != *(double *)v245)
                          {
                            goto LABEL_94;
                          }
                          v246 = (unsigned __int8 *)(v342
                                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl, &v370, 0, 0);
                          v247 = *v246;
                          v248 = (unsigned __int8 *)(v341
                                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl, &v369, 0, 0);
                          v249 = *v248;
                          if (v247 == 2)
                          {
                            if (v249 != 2)
                              goto LABEL_94;
                          }
                          else if (v249 == 2 || ((((v249 & 1) == 0) ^ v247) & 1) == 0)
                          {
                            goto LABEL_94;
                          }
                          v250 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude, &v368, 0, 0);
                          v251 = *(double *)v250;
                          v252 = *(_BYTE *)(v250 + 8);
                          v253 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude, &v367, 0, 0);
                          if ((v252 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v253 + 8) & 1) == 0)
                              goto LABEL_94;
                          }
                          else if ((*(_BYTE *)(v253 + 8) & 1) != 0 || v251 != *(double *)v253)
                          {
                            goto LABEL_94;
                          }
                          v254 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy, &v366, 0, 0);
                          v255 = *(double *)v254;
                          v256 = *(_BYTE *)(v254 + 8);
                          v257 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy, &v365, 0, 0);
                          if ((v256 & 1) != 0)
                          {
                            if ((*(_BYTE *)(v257 + 8) & 1) == 0)
                              goto LABEL_94;
                          }
                          else if ((*(_BYTE *)(v257 + 8) & 1) != 0 || v255 != *(double *)v257)
                          {
                            goto LABEL_94;
                          }
                          v258 = (uint64_t *)(v342
                                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport, &v364, 0, 0);
                          v259 = *v258;
                          v260 = (uint64_t *)(v341
                                           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport, &v363, 0, 0);
                          v261 = *v260;
                          swift_bridgeObjectRetain(v259);
                          swift_bridgeObjectRetain(v261);
                          v262 = sub_10010B2D8(v259, v261, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t (*)(char *, char *))sub_1001146C0);
                          swift_bridgeObjectRelease(v259);
                          swift_bridgeObjectRelease(v261);
                          if ((v262 & 1) == 0)
                            goto LABEL_94;
                          v263 = (unsigned __int8 *)(v342
                                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent, &v362, 0, 0);
                          v264 = *v263;
                          v265 = (unsigned __int8 *)(v341
                                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent, &v361, 0, 0);
                          v266 = *v265;
                          if (v264 == 3)
                          {
                            if (v266 != 3)
                              goto LABEL_94;
                          }
                          else if (v266 == 3 || v264 != v266)
                          {
                            goto LABEL_94;
                          }
                          v267 = v342
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
                          swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, &v360, 0, 0);
                          v268 = v325;
                          sub_10000E660(v267, v325, &qword_10036E478);
                          v269 = v341
                               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
                          swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, &v359, 0, 0);
                          v270 = v329;
                          v271 = v329 + *(int *)(v323 + 48);
                          sub_10000E660(v268, v329, &qword_10036E478);
                          sub_10000E660(v269, v271, &qword_10036E478);
                          v272 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v324 + 48);
                          if (v272(v270, 1, v327) == 1)
                          {
                            sub_100015704(v325, &qword_10036E478);
                            if (v272(v271, 1, v327) == 1)
                            {
                              sub_100015704(v329, &qword_10036E478);
LABEL_263:
                              v276 = (unsigned __int8 *)(v342
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
                              swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState, &v358, 0, 0);
                              v277 = *v276;
                              v278 = (unsigned __int8 *)(v341
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
                              swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState, &v357, 0, 0);
                              v279 = *v278;
                              if (v277 == 3)
                              {
                                if (v279 != 3)
                                  goto LABEL_94;
                              }
                              else if (v279 == 3 || v277 != v279)
                              {
                                goto LABEL_94;
                              }
                              v280 = v342
                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
                              swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor, &v356, 0, 0);
                              v281 = *(double *)v280;
                              v282 = *(_BYTE *)(v280 + 8);
                              v283 = v341
                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
                              swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor, &v355, 0, 0);
                              if ((v282 & 1) != 0)
                              {
                                if ((*(_BYTE *)(v283 + 8) & 1) == 0)
                                  goto LABEL_94;
                              }
                              else if ((*(_BYTE *)(v283 + 8) & 1) != 0 || v281 != *(double *)v283)
                              {
                                goto LABEL_94;
                              }
                              v284 = v342
                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
                              swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor, &v354, 0, 0);
                              v285 = *(double *)v284;
                              v286 = *(_BYTE *)(v284 + 8);
                              v287 = v341
                                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
                              swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor, &v353, 0, 0);
                              if ((v286 & 1) != 0)
                              {
                                if ((*(_BYTE *)(v287 + 8) & 1) == 0)
                                  goto LABEL_94;
                              }
                              else if ((*(_BYTE *)(v287 + 8) & 1) != 0 || v285 != *(double *)v287)
                              {
                                goto LABEL_94;
                              }
                              v288 = (unsigned __int8 *)(v342
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
                              swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType, &v352, 0, 0);
                              v289 = *v288;
                              v290 = (unsigned __int8 *)(v341
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
                              swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType, &v351, 0, 0);
                              v291 = *v290;
                              if (v289 == 4)
                              {
                                if (v291 != 4)
                                  goto LABEL_94;
                              }
                              else if (v291 == 4 || v289 != v291)
                              {
                                goto LABEL_94;
                              }
                              v292 = (unsigned __int8 *)(v342
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
                              swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching, &v350, 0, 0);
                              v293 = *v292;
                              v294 = (unsigned __int8 *)(v341
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
                              swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching, &v349, 0, 0);
                              v295 = *v294;
                              if (v293 == 2)
                              {
                                if (v295 != 2)
                                  goto LABEL_94;
                              }
                              else if (v295 == 2 || ((((v295 & 1) == 0) ^ v293) & 1) == 0)
                              {
                                goto LABEL_94;
                              }
                              v296 = (unsigned __int8 *)(v342
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
                              swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy, &v348, 0, 0);
                              v297 = *v296;
                              v298 = (unsigned __int8 *)(v341
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
                              swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy, &v347, 0, 0);
                              v299 = *v298;
                              if (v297 == 3)
                              {
                                if (v299 != 3)
                                  goto LABEL_94;
                              }
                              else if (v299 == 3 || v297 != v299)
                              {
                                goto LABEL_94;
                              }
                              v300 = (unsigned __int8 *)(v342
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
                              swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType, &v346, 0, 0);
                              v301 = *v300;
                              v302 = (unsigned __int8 *)(v341
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
                              swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType, &v345, 0, 0);
                              v303 = *v302;
                              if (v301 != 5)
                              {
                                if (v303 == 5 || v301 != v303)
                                  goto LABEL_94;
LABEL_298:
                                v304 = v342;
                                v305 = (unsigned __int8 *)(v342
                                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
                                swift_beginAccess(v342+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp, &v344, 0, 0);
                                v306 = *v305;
                                swift_release(v304);
                                v307 = v341;
                                v308 = (unsigned __int8 *)(v341
                                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
                                swift_beginAccess(v341+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp, &v343, 0, 0);
                                v309 = *v308;
                                swift_release(v307);
                                if (v306 == 2)
                                {
                                  if (v309 != 2)
                                    return 0;
                                }
                                else if (v309 == 2 || ((((v309 & 1) == 0) ^ v306) & 1) == 0)
                                {
                                  return 0;
                                }
                                return 1;
                              }
                              if (v303 == 5)
                                goto LABEL_298;
LABEL_94:
                              swift_release(v342);
                              v100 = v341;
                              goto LABEL_95;
                            }
                          }
                          else
                          {
                            sub_10000E660(v329, v326, &qword_10036E478);
                            if (v272(v271, 1, v327) != 1)
                            {
                              v273 = v328;
                              sub_100003E08(v271, v328, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                              v274 = v326;
                              v275 = sub_10011F5E0(v326, v273);
                              sub_100004030(v273, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                              sub_100015704(v325, &qword_10036E478);
                              sub_100004030(v274, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                              sub_100015704(v329, &qword_10036E478);
                              if ((v275 & 1) == 0)
                                goto LABEL_94;
                              goto LABEL_263;
                            }
                            sub_100015704(v325, &qword_10036E478);
                            sub_100004030(v326, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                          }
                          v124 = &qword_100375418;
                          v125 = v329;
LABEL_93:
                          sub_100015704(v125, v124);
                          goto LABEL_94;
                        }
                      }
                      else
                      {
                        sub_10000E660(v322, v321, &qword_10036E460);
                        if (v311(v214, 1, v340) != 1)
                        {
                          v215 = v338;
                          sub_100003E08(v214, v338, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                          v216 = v321;
                          v217 = sub_10011F460(v321, v215, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                          sub_100004030(v215, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                          sub_100015704(v320, &qword_10036E460);
                          sub_100004030(v216, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                          sub_100015704(v322, &qword_10036E460);
                          if ((v217 & 1) == 0)
                            goto LABEL_94;
                          goto LABEL_200;
                        }
                        sub_100015704(v320, &qword_10036E460);
                        sub_100004030(v321, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                      }
                      v124 = &qword_100375328;
                      v125 = v322;
                      goto LABEL_93;
                    }
                    sub_100015704(v315, &qword_10036E470);
                    sub_100004030(v316, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                  }
                  v124 = &qword_100375420;
                  v125 = v319;
                  goto LABEL_93;
                }
                sub_100015704(v331, &qword_10036E460);
                sub_100004030(v330, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
              }
              v124 = &qword_100375328;
              v125 = v332;
              goto LABEL_93;
            }
            sub_100015704(v335, &qword_10036E468);
            sub_100004030(v334, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
          }
          v124 = &qword_100375428;
          v125 = v337;
          goto LABEL_93;
        }
LABEL_65:
        swift_release(v98);
        v100 = v93;
LABEL_95:
        swift_release(v100);
        return 0;
      }
      v98 = v342;
      swift_retain(v342);
      v93 = v341;
      swift_retain(v341);
      sub_100015704((uint64_t)v45, &qword_10036E460);
      sub_100004030((uint64_t)v43, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    }
    sub_100015704((uint64_t)v31, &qword_100375328);
    goto LABEL_65;
  }
  result = 0;
  if (v90 != 4 && v88 == v90)
    goto LABEL_59;
  return result;
}

Swift::Int sub_1000D1A80()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &qword_10036E610, (uint64_t)&unk_1002D07D8);
}

uint64_t sub_1000D1A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100394200, &qword_100394208, (uint64_t)sub_1000CCF84, a2);
}

uint64_t sub_1000D1AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CD498(a1, a2, a3);
}

uint64_t sub_1000D1ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CDC60(a1, a2, a3);
}

uint64_t sub_1000D1AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003750F0, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&unk_1002D0750);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D1B30@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003941F8, (uint64_t)qword_1003838F0, (uint64_t)sub_1000CC2CC, a1);
}

uint64_t sub_1000D1B4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E658, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&unk_1002D06D8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D1B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E658, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&unk_1002D06D8);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000D1BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383908);
  sub_10000E6A4(v0, (uint64_t)qword_100383908);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "MQ_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "MQ_NONE";
  *(_QWORD *)(v13 + 8) = 7;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "MQ_STRONG";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "MQ_AMBIGUOUS";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D1D98()
{
  return sub_100008BD0(&qword_100394210, (uint64_t)qword_100383908, (uint64_t)sub_1000D1BDC);
}

uint64_t sub_1000D1DB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394210, (uint64_t)qword_100383908, (uint64_t)sub_1000D1BDC, a1);
}

uint64_t sub_1000D1DD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394210, (uint64_t)qword_100383908, (uint64_t)sub_1000D1BDC, a1);
}

uint64_t sub_1000D1DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383920);
  sub_10000E6A4(v0, (uint64_t)qword_100383920);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = -1;
  *(_QWORD *)v9 = "UM_INVALID";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 0;
  *(_QWORD *)v13 = "UM_UNKNOWN";
  *(_QWORD *)(v13 + 8) = 10;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 1;
  *(_QWORD *)v15 = "UM_DMA";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 2;
  *(_QWORD *)v17 = "UM_EGM08";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D1FAC()
{
  return sub_100008BD0(&qword_100394218, (uint64_t)qword_100383920, (uint64_t)sub_1000D1DEC);
}

uint64_t sub_1000D1FC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394218, (uint64_t)qword_100383920, (uint64_t)sub_1000D1DEC, a1);
}

uint64_t sub_1000D1FE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394218, (uint64_t)qword_100383920, (uint64_t)sub_1000D1DEC, a1);
}

uint64_t sub_1000D2000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383938);
  sub_10000E6A4(v0, (uint64_t)qword_100383938);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "OD_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "OD_LOCAL";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "OD_REMOTE";
  *(_QWORD *)(v14 + 8) = 9;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D2190()
{
  return sub_100008BD0(&qword_100394220, (uint64_t)qword_100383938, (uint64_t)sub_1000D2000);
}

uint64_t sub_1000D21AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394220, (uint64_t)qword_100383938, (uint64_t)sub_1000D2000, a1);
}

uint64_t sub_1000D21C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394220, (uint64_t)qword_100383938, (uint64_t)sub_1000D2000, a1);
}

uint64_t sub_1000D21E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383950);
  sub_10000E6A4(v0, (uint64_t)qword_100383950);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "GNSS_CONTENT_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 20;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "GNSS_CONTENT_NONE";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "GNSS_CONTENT_PRESENT";
  *(_QWORD *)(v14 + 8) = 20;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D2374()
{
  return sub_100008BD0(&qword_100394228, (uint64_t)qword_100383950, (uint64_t)sub_1000D21E4);
}

uint64_t sub_1000D2390@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394228, (uint64_t)qword_100383950, (uint64_t)sub_1000D21E4, a1);
}

uint64_t sub_1000D23AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394228, (uint64_t)qword_100383950, (uint64_t)sub_1000D21E4, a1);
}

uint64_t sub_1000D23C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383968);
  sub_10000E6A4(v0, (uint64_t)qword_100383968);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "PC_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "PC_INDOOR";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "PC_OUTDOOR";
  *(_QWORD *)(v14 + 8) = 10;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D2558()
{
  return sub_100008BD0(&qword_100394230, (uint64_t)qword_100383968, (uint64_t)sub_1000D23C8);
}

uint64_t sub_1000D2574@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394230, (uint64_t)qword_100383968, (uint64_t)sub_1000D23C8, a1);
}

uint64_t sub_1000D2590@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394230, (uint64_t)qword_100383968, (uint64_t)sub_1000D23C8, a1);
}

uint64_t sub_1000D25AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383980);
  sub_10000E6A4(v0, (uint64_t)qword_100383980);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "MM_TYPE_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 15;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "MM_TYPE_VEHICLE";
  *(_QWORD *)(v13 + 8) = 15;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "MM_TYPE_PEDESTRIAN";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "MM_TYPE_BICYCLE";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D2768()
{
  return sub_100008BD0(&qword_100394238, (uint64_t)qword_100383980, (uint64_t)sub_1000D25AC);
}

uint64_t sub_1000D2784@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394238, (uint64_t)qword_100383980, (uint64_t)sub_1000D25AC, a1);
}

uint64_t sub_1000D27A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394238, (uint64_t)qword_100383980, (uint64_t)sub_1000D25AC, a1);
}

uint64_t sub_1000D27BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383998);
  sub_10000E6A4(v0, (uint64_t)qword_100383998);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "LOI_LOCATION_SOURCE_ACCURACY_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 36;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "LOI_LOCATION_SOURCE_ACCURACY_LOW";
  *((_QWORD *)v13 + 1) = 32;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "LOI_LOCATION_SOURCE_ACCURACY_HIGH";
  *(_QWORD *)(v14 + 8) = 33;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D294C()
{
  return sub_100008BD0(&qword_100394240, (uint64_t)qword_100383998, (uint64_t)sub_1000D27BC);
}

uint64_t sub_1000D2968@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394240, (uint64_t)qword_100383998, (uint64_t)sub_1000D27BC, a1);
}

uint64_t sub_1000D2984@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394240, (uint64_t)qword_100383998, (uint64_t)sub_1000D27BC, a1);
}

void sub_1000D29A0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x64757469746C412ELL;
  v0._object = (void *)0xED00006F666E4965;
  String.append(_:)(v0);
  qword_1003839B0 = 0xD00000000000002ELL;
  *(_QWORD *)algn_1003839B8 = 0x80000001002F4530;
}

uint64_t *sub_1000D2A14()
{
  if (qword_100394248 != -1)
    swift_once(&qword_100394248, sub_1000D29A0);
  return &qword_1003839B0;
}

uint64_t sub_1000D2A54()
{
  return sub_100103668(&qword_100394248, &qword_1003839B0, algn_1003839B8, (uint64_t)sub_1000D29A0);
}

uint64_t sub_1000D2A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003839C0);
  sub_10000E6A4(v0, (uint64_t)qword_1003839C0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v8 = "altitude";
  *(_QWORD *)(v8 + 8) = 8;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6 + v4) = 2;
  *(_QWORD *)v12 = "vertical_accuracy";
  *(_QWORD *)(v12 + 8) = 17;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "undulation";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "undulation_model";
  *((_QWORD *)v16 + 1) = 16;
  v16[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D2C48()
{
  return sub_100008BD0(&qword_100394250, (uint64_t)qword_1003839C0, (uint64_t)sub_1000D2A74);
}

uint64_t sub_1000D2C64@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394250, (uint64_t)qword_1003839C0, (uint64_t)sub_1000D2A74, a1);
}

uint64_t sub_1000D2C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 20);
          goto LABEL_5;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 24);
          goto LABEL_5;
        case 3:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 28);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 4:
          v10 = v3
              + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 32);
          v11 = sub_10014A35C();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v10, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType, v11, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000D2DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v11);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v13);
    if (*(_BYTE *)(v5 + v10[8]) != 4)
    {
      v15 = *(_BYTE *)(v5 + v10[8]);
      v14 = sub_10014A35C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 4, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType, v14, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000D2EF8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, &qword_10036E618, (uint64_t)&unk_1002D0A58);
}

uint64_t sub_1000D2F14@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a2 + v8) = 4;
  return result;
}

uint64_t sub_1000D2F70(uint64_t a1, uint64_t a2)
{
  return sub_100103A00(a1, a2, &qword_100394248, &qword_1003839B0, algn_1003839B8, (uint64_t)sub_1000D29A0);
}

uint64_t sub_1000D2F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D2C80(a1, a2, a3);
}

uint64_t sub_1000D2FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D2DAC(a1, a2, a3);
}

uint64_t sub_1000D2FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003750E8, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&unk_1002D09D0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D3008@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394250, (uint64_t)qword_1003839C0, (uint64_t)sub_1000D2A74, a1);
}

uint64_t sub_1000D3024(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F300, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&unk_1002D0958);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D3064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F300, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&unk_1002D0958);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D30B4()
{
  return &unk_1003531E8;
}

unint64_t sub_1000D30C0()
{
  return 0xD000000000000029;
}

uint64_t sub_1000D30DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003839D8);
  sub_10000E6A4(v0, (uint64_t)qword_1003839D8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "location_type";
  *(_QWORD *)(v9 + 8) = 13;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "active";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D3234()
{
  return sub_100008BD0(&qword_100394258, (uint64_t)qword_1003839D8, (uint64_t)sub_1000D30DC);
}

uint64_t sub_1000D3250@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394258, (uint64_t)qword_1003839D8, (uint64_t)sub_1000D30DC, a1);
}

uint64_t sub_1000D326C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        v9 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v9 + 24), a2, a3);
      }
      else if (result == 1)
      {
        v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20);
        v11 = sub_10014A9BC();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v10, &type metadata for CLP_LogEntry_PrivateData_LocationType, v11, a2, a3);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000D3364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  v10 = result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 14)
  {
    v13 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v11 = sub_10014A9BC();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v13, 1, &type metadata for CLP_LogEntry_PrivateData_LocationType, v11, a2, a3);
  }
  if (!v4)
  {
    v12 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 24));
    if (v12 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000D344C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, &qword_10036E620, (uint64_t)&unk_1002D0BC0);
}

uint64_t sub_1000D3468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001046DC(a1, 14, 2, a2);
}

uint64_t sub_1000D3474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D326C(a1, a2, a3);
}

uint64_t sub_1000D3488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D3364(a1, a2, a3);
}

uint64_t sub_1000D349C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003750E0, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&unk_1002D0B38);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D34EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394258, (uint64_t)qword_1003839D8, (uint64_t)sub_1000D30DC, a1);
}

uint64_t sub_1000D3508(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F318, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&unk_1002D0AC0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D3548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F318, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&unk_1002D0AC0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D3598()
{
  return &unk_1003531F8;
}

unint64_t sub_1000D35A4()
{
  return 0xD000000000000025;
}

uint64_t sub_1000D35C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003839F0);
  sub_10000E6A4(v0, (uint64_t)qword_1003839F0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v8 = "timestamp";
  *(_QWORD *)(v8 + 8) = 9;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6 + v4) = 2;
  *(_QWORD *)v12 = "speed";
  *(_QWORD *)(v12 + 8) = 5;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "mach_continuous_time";
  *((_QWORD *)v14 + 1) = 20;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "mach_absolute_time";
  *((_QWORD *)v16 + 1) = 18;
  v16[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D378C()
{
  return sub_100008BD0(&qword_100394260, (uint64_t)qword_1003839F0, (uint64_t)sub_1000D35C0);
}

uint64_t sub_1000D37A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394260, (uint64_t)qword_1003839F0, (uint64_t)sub_1000D35C0, a1);
}

uint64_t sub_1000D37C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3EFC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000D37E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F4010(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000D37FC(uint64_t a1, uint64_t a2)
{
  return sub_10011E028(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed) & 1;
}

Swift::Int sub_1000D381C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, &qword_10036E628, (uint64_t)&unk_1002D0D28);
}

uint64_t sub_1000D383C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003750D8, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&unk_1002D0CA0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D388C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394260, (uint64_t)qword_1003839F0, (uint64_t)sub_1000D35C0, a1);
}

uint64_t sub_1000D38A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F330, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&unk_1002D0C28);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D38E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F330, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&unk_1002D0C28);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D3938()
{
  return &unk_100353208;
}

unint64_t sub_1000D3944()
{
  return 0xD000000000000027;
}

uint64_t sub_1000D3960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383A08);
  sub_10000E6A4(v0, (uint64_t)qword_100383A08);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "timestamp";
  *(_QWORD *)(v9 + 8) = 9;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "true_heading";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D3AB8()
{
  return sub_100008BD0(&qword_100394268, (uint64_t)qword_100383A08, (uint64_t)sub_1000D3960);
}

uint64_t sub_1000D3AD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394268, (uint64_t)qword_100383A08, (uint64_t)sub_1000D3960, a1);
}

uint64_t sub_1000D3AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB774(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000D3B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB840(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000D3B28(uint64_t a1, uint64_t a2)
{
  return sub_10011F460(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading) & 1;
}

Swift::Int sub_1000D3B48()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, &qword_10036E630, (uint64_t)&unk_1002D0E90);
}

uint64_t sub_1000D3B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003750D0, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&unk_1002D0E08);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D3BB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394268, (uint64_t)qword_100383A08, (uint64_t)sub_1000D3960, a1);
}

uint64_t sub_1000D3BD0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F348, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&unk_1002D0D90);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D3C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F348, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&unk_1002D0D90);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D3C60()
{
  return &unk_100353218;
}

unint64_t sub_1000D3C6C()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000D3C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383A20);
  sub_10000E6A4(v0, (uint64_t)qword_100383A20);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "when";
  *(_QWORD *)(v9 + 8) = 4;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "where";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D3DD8()
{
  return sub_100008BD0(&qword_100394270, (uint64_t)qword_100383A20, (uint64_t)sub_1000D3C88);
}

uint64_t sub_1000D3DF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394270, (uint64_t)qword_100383A20, (uint64_t)sub_1000D3C88, a1);
}

uint64_t sub_1000D3E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    if (result == 2)
    {
      v9 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
      dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + *(int *)(v9 + 24), a2, a3);
    }
    else if (result == 1)
    {
      v12 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v12 + 20), a2, a3);
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_1000D3EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  v10 = result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v11);
  if (!v4)
  {
    v12 = (_QWORD *)(v5 + *(int *)(v10 + 24));
    v13 = v12[1];
    if (v13)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v12, v13, 2, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000D3FA8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, &qword_10036E638, (uint64_t)&unk_1002D0FF8);
}

uint64_t sub_1000D3FC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 24);
  v6 = a2 + *(int *)(a1 + 20);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  return result;
}

uint64_t sub_1000D4004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D3E10(a1, a2, a3);
}

uint64_t sub_1000D4018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D3EDC(a1, a2, a3);
}

uint64_t sub_1000D402C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003750C8, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&unk_1002D0F70);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D407C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394270, (uint64_t)qword_100383A20, (uint64_t)sub_1000D3C88, a1);
}

uint64_t sub_1000D4098(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F360, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&unk_1002D0EF8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D40D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F360, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&unk_1002D0EF8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D4128()
{
  return &unk_100353228;
}

unint64_t sub_1000D4134()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_1000D4150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383A38);
  sub_10000E6A4(v0, (uint64_t)qword_100383A38);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "timestamp";
  *(_QWORD *)(v9 + 8) = 9;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "speed";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "uncertainty";
  *(_QWORD *)(v14 + 8) = 11;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D42E4()
{
  return sub_100008BD0(&qword_100394278, (uint64_t)qword_100383A38, (uint64_t)sub_1000D4150);
}

uint64_t sub_1000D4300@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394278, (uint64_t)qword_100383A38, (uint64_t)sub_1000D4150, a1);
}

uint64_t sub_1000D431C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D4338(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000D4338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t result;
  char v13;

  v9 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    if (v5 || (v13 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        v11 = *(int *)(a4(0) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v4 + v11, a2, a3);
        break;
      case 2:
        v11 = *(int *)(a4(0) + 24);
        goto LABEL_3;
      case 1:
        v11 = *(int *)(a4(0) + 20);
        goto LABEL_3;
    }
    v5 = 0;
    v9 = a2;
  }
  return result;
}

uint64_t sub_1000D4400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A7A0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000D441C(uint64_t a1, uint64_t a2)
{
  return sub_1000656F0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed) & 1;
}

Swift::Int sub_1000D443C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, &qword_10036E640, (uint64_t)&unk_1002D1160);
}

uint64_t sub_1000D4458(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003750C0, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&unk_1002D10D8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D44A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394278, (uint64_t)qword_100383A38, (uint64_t)sub_1000D4150, a1);
}

uint64_t sub_1000D44C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F378, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&unk_1002D1060);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D4504(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F378, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&unk_1002D1060);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D4554()
{
  return &unk_100353238;
}

unint64_t sub_1000D4560()
{
  return 0xD000000000000021;
}

uint64_t sub_1000D457C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383A50);
  sub_10000E6A4(v0, (uint64_t)qword_100383A50);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v35 = swift_allocObject(v1, v6 + 13 * v4, v5 | 7);
  *(_OWORD *)(v35 + 16) = xmmword_1002C40C0;
  v7 = v35 + v6;
  v8 = v35 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v35 + v6) = 1;
  *(_QWORD *)v8 = "event_receipt_time";
  *(_QWORD *)(v8 + 8) = 18;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "client";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "location";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "location_private";
  *((_QWORD *)v16 + 1) = 16;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "status";
  *((_QWORD *)v18 + 1) = 6;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "active";
  *((_QWORD *)v20 + 1) = 6;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "odometer";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "signal_quality";
  *((_QWORD *)v24 + 1) = 14;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "vehicle_speed";
  *(_QWORD *)(v25 + 8) = 13;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "vehicle_heading";
  *((_QWORD *)v27 + 1) = 15;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "xtra_file_available";
  *((_QWORD *)v29 + 1) = 19;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v7 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "motion_detected";
  *((_QWORD *)v31 + 1) = 15;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v7 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "location_derived_speed";
  *((_QWORD *)v33 + 1) = 22;
  v33[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v35);
}

uint64_t sub_1000D4920()
{
  return sub_100008BD0(&qword_100394280, (uint64_t)qword_100383A50, (uint64_t)sub_1000D457C);
}

uint64_t sub_1000D493C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394280, (uint64_t)qword_100383A50, (uint64_t)sub_1000D457C, a1);
}

uint64_t sub_1000D4958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active) = 2;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality) = 3;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  v15 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected) = 3;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  v19 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  qword_100394290 = v1;
  return result;
}

uint64_t sub_1000D4B70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t *v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[24];
  uint64_t v87;
  uint64_t v88;
  _BYTE v89[24];
  _BYTE v90[24];
  _BYTE v91[24];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE v98[24];
  _BYTE v99[24];
  _BYTE v100[24];
  _BYTE v101[24];
  _BYTE v102[24];
  _BYTE v103[24];
  _BYTE v104[32];

  v3 = sub_1000039AC(&qword_10036E4B0);
  __chkstk_darwin(v3);
  v85 = (uint64_t)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036E4A8);
  __chkstk_darwin(v5);
  v84 = (uint64_t)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036E4A0);
  __chkstk_darwin(v7);
  v83 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000039AC(&qword_10036E498);
  __chkstk_darwin(v9);
  v82 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10036E490);
  __chkstk_darwin(v11);
  v79 = (uint64_t)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000039AC(&qword_10036E488);
  __chkstk_darwin(v13);
  v76 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000039AC(&qword_10036E480);
  __chkstk_darwin(v15);
  v72 = (uint64_t)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v17);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v21 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v22 = 0;
  *(_BYTE *)(v22 + 4) = 1;
  v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  v70 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  v71 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  v28 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v29 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  *v29 = 2;
  v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 1;
  v73 = v29;
  v74 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  *v74 = 3;
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  v32 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  v34 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  v36 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  v80 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected) = 3;
  v37 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  v81 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  v38 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
  v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v104, 0, 0);
  sub_10000E660(v39, (uint64_t)v19, &qword_10036E458);
  swift_beginAccess(v20, v103, 33, 0);
  sub_10000E574((uint64_t)v19, v20, &qword_10036E458);
  swift_endAccess(v103);
  v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v103, 0, 0);
  LODWORD(v39) = *(_DWORD *)v40;
  LOBYTE(v40) = *(_BYTE *)(v40 + 4);
  swift_beginAccess(v22, v102, 1, 0);
  *(_DWORD *)v22 = v39;
  *(_BYTE *)(v22 + 4) = v40;
  v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, v101, 0, 0);
  v42 = v72;
  sub_10000E660(v41, v72, &qword_10036E480);
  swift_beginAccess(v23, v100, 33, 0);
  sub_10000E574(v42, v23, &qword_10036E480);
  swift_endAccess(v100);
  v43 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, v100, 0, 0);
  v44 = v76;
  sub_10000E660(v43, v76, &qword_10036E488);
  v45 = v70;
  swift_beginAccess(v70, v99, 33, 0);
  sub_10000E574(v44, v45, &qword_10036E488);
  swift_endAccess(v99);
  v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, v99, 0, 0);
  v47 = v79;
  sub_10000E660(v46, v79, &qword_10036E490);
  v48 = v71;
  swift_beginAccess(v71, v98, 33, 0);
  sub_10000E574(v47, v48, &qword_10036E490);
  swift_endAccess(v98);
  v49 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active, v98, 0, 0);
  LOBYTE(v49) = *v49;
  v50 = v73;
  swift_beginAccess(v73, &v97, 1, 0);
  *v50 = (_BYTE)v49;
  v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer, &v96, 0, 0);
  v52 = *v51;
  LOBYTE(v51) = *((_BYTE *)v51 + 8);
  swift_beginAccess(v30, &v95, 1, 0);
  *(_QWORD *)v30 = v52;
  *(_BYTE *)(v30 + 8) = (_BYTE)v51;
  v53 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality, &v94, 0, 0);
  LOBYTE(v53) = *v53;
  v54 = v74;
  swift_beginAccess(v74, &v93, 1, 0);
  *v54 = (_BYTE)v53;
  v55 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, &v92, 0, 0);
  v56 = v82;
  sub_10000E660(v55, v82, &qword_10036E498);
  v57 = v75;
  swift_beginAccess(v75, v91, 33, 0);
  sub_10000E574(v56, v57, &qword_10036E498);
  swift_endAccess(v91);
  v58 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, v91, 0, 0);
  v59 = v83;
  sub_10000E660(v58, v83, &qword_10036E4A0);
  v60 = v77;
  swift_beginAccess(v77, v90, 33, 0);
  sub_10000E574(v59, v60, &qword_10036E4A0);
  swift_endAccess(v90);
  v61 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, v90, 0, 0);
  v62 = v84;
  sub_10000E660(v61, v84, &qword_10036E4A8);
  v63 = v78;
  swift_beginAccess(v78, v89, 33, 0);
  sub_10000E574(v62, v63, &qword_10036E4A8);
  swift_endAccess(v89);
  v64 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected, v89, 0, 0);
  LOBYTE(v64) = *v64;
  v65 = v80;
  swift_beginAccess(v80, &v88, 1, 0);
  *v65 = (_BYTE)v64;
  v66 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, &v87, 0, 0);
  v67 = v85;
  sub_10000E660(v66, v85, &qword_10036E4B0);
  swift_release(a1);
  v68 = v81;
  swift_beginAccess(v81, v86, 33, 0);
  sub_10000E574(v67, v68, &qword_10036E4B0);
  swift_endAccess(v86);
  return v1;
}

uint64_t sub_1000D543C()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &qword_10036E458);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, &qword_10036E480);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, &qword_10036E488);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, &qword_10036E490);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, &qword_10036E498);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, &qword_10036E4A0);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, &qword_10036E4A8);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, &qword_10036E4B0);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D551C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  ValueMetadata *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_1000D4B70(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v21 = (unint64_t *)&qword_10036E1E0;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v23 = &unk_1002CF5A8;
          goto LABEL_21;
        case 2:
          v24 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v34, 33, 0);
          v25 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v24, a2, a3);
          goto LABEL_22;
        case 3:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
          v21 = &qword_10036E650;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation;
          v23 = &unk_1002D00E8;
          goto LABEL_21;
        case 4:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
          v21 = &qword_10036E658;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate;
          v23 = &unk_1002D06D8;
          goto LABEL_21;
        case 5:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
          v21 = &qword_10036F318;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus;
          v23 = &unk_1002D0AC0;
          goto LABEL_21;
        case 6:
          v26 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active, v34, 33, 0);
          v25 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v26, a2, a3);
          goto LABEL_22;
        case 7:
          v27 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer, v34, 33, 0);
          v25 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v27, a2, a3);
          goto LABEL_22;
        case 8:
          v28 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality, v34, 33, 0);
          v29 = sub_10014A1C4();
          v30 = v28;
          v31 = &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType;
          goto LABEL_19;
        case 9:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
          v21 = &qword_10036F330;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed;
          v23 = &unk_1002D0C28;
          goto LABEL_21;
        case 10:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
          v21 = &qword_10036F348;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading;
          v23 = &unk_1002D0D90;
          goto LABEL_21;
        case 11:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
          v21 = &qword_10036F360;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable;
          v23 = &unk_1002D0EF8;
          goto LABEL_21;
        case 12:
          v32 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected, v34, 33, 0);
          v29 = sub_10014A180();
          v30 = v32;
          v31 = &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType;
LABEL_19:
          v25 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v30, v31, v29, a2, a3);
          goto LABEL_22;
        case 13:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
          v21 = &qword_10036F378;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed;
          v23 = &unk_1002D1060;
LABEL_21:
          v33 = sub_10000FD38(v21, v22, (uint64_t)v23);
          v25 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v33, a2, a3);
LABEL_22:
          v5 = v25;
          swift_endAccess(v34);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_1000D59E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];
  char v25;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20));
  v10 = swift_retain(v9);
  sub_1000D5D18(v10, a1, a2, a3);
  if (v4)
    return swift_release(v9);
  v11 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v20, 0, 0);
  if ((v11[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v11, 2, a2, a3);
  sub_1000D5EA4(v9, a1, a2, a3);
  sub_1000D6030(v9, a1, a2, a3);
  sub_1000D61BC(v9, a1, a2, a3);
  v13 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active, v24, 0, 0);
  v14 = *v13;
  if (v14 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 6, a2, a3);
  v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer, v23, 0, 0);
  if ((*(_BYTE *)(v15 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7, a2, a3, *(double *)v15);
  v16 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality, v22, 0, 0);
  if (*v16 != 3)
  {
    v21[0] = *v16;
    v17 = sub_10014A1C4();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v21, 8, &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType, v17, a2, a3);
  }
  sub_1000D6348(v9, a1, a2, a3);
  sub_1000D64D4(v9, a1, a2, a3);
  sub_1000D6660(v9, a1, a2, a3);
  v18 = (char *)(v9
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected, v21, 0, 0);
  if (*v18 != 3)
  {
    v25 = *v18;
    v19 = sub_10014A180();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v25, 12, &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType, v19, a2, a3);
  }
  sub_1000D67EC(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000D5D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D5EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E480);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E480);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E480);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  v15 = sub_10000FD38(&qword_10036E650, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&unk_1002D00E8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t sub_1000D6030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E488);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E488);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E488);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  v15 = sub_10000FD38(&qword_10036E658, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&unk_1002D06D8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000D61BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E490);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E490);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E490);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  v15 = sub_10000FD38(&qword_10036F318, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&unk_1002D0AC0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t sub_1000D6348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E498);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E498);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E498);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  v15 = sub_10000FD38(&qword_10036F330, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&unk_1002D0C28);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 9, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000D64D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E4A0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E4A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E4A0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  v15 = sub_10000FD38(&qword_10036F348, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&unk_1002D0D90);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 10, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000D6660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E4A8);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E4A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E4A8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  v15 = sub_10000FD38(&qword_10036F360, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&unk_1002D0EF8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 11, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_1000D67EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E4B0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E4B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E4B0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  v15 = sub_10000FD38(&qword_10036F378, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&unk_1002D1060);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 13, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000D6978(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t (*)(uint64_t, uint64_t))sub_1000D69A0) & 1;
}

BOOL sub_1000D69A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  char v74;
  int *v75;
  int v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int (*v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  unsigned __int8 *v121;
  int v122;
  unsigned __int8 *v123;
  int v124;
  uint64_t v125;
  double v126;
  char v127;
  uint64_t v128;
  unsigned __int8 *v129;
  int v130;
  unsigned __int8 *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int (*v139)(uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int (*v160)(uint64_t, uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  char v163;
  unsigned __int8 *v164;
  int v165;
  unsigned __int8 *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int (*v173)(uint64_t, uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char v250[24];
  char v251[24];
  char v252[24];
  char v253[24];
  char v254[24];
  char v255[32];

  v229 = a2;
  v184 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  v181 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v178 = (uint64_t)&v177 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_1000039AC(&qword_100375430);
  __chkstk_darwin(v180);
  v185 = (uint64_t)&v177 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036E4B0);
  v6 = __chkstk_darwin(v5);
  v179 = (uint64_t)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v183 = (uint64_t)&v177 - v8;
  v193 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  v189 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v182 = (uint64_t)&v177 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_1000039AC(&qword_100375438);
  __chkstk_darwin(v188);
  v194 = (uint64_t)&v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10036E4A8);
  v12 = __chkstk_darwin(v11);
  v187 = (uint64_t)&v177 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v192 = (uint64_t)&v177 - v14;
  v15 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  v196 = *(_QWORD *)(v15 - 8);
  v197 = v15;
  __chkstk_darwin(v15);
  v186 = (uint64_t)&v177 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_1000039AC(&qword_100375440);
  __chkstk_darwin(v195);
  v199 = (char *)&v177 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_10036E4A0);
  v19 = __chkstk_darwin(v18);
  v190 = (uint64_t)&v177 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v198 = (char *)&v177 - v21;
  v203 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  v201 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203);
  v191 = (uint64_t)&v177 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_1000039AC(&qword_100375448);
  __chkstk_darwin(v200);
  v204 = (uint64_t)&v177 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000039AC(&qword_10036E498);
  v25 = __chkstk_darwin(v24);
  v202 = (uint64_t)&v177 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v205 = (uint64_t)&v177 - v27;
  v28 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  v209 = *(_QWORD *)(v28 - 8);
  v210 = v28;
  __chkstk_darwin(v28);
  v206 = (uint64_t)&v177 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = sub_1000039AC(&qword_100375450);
  __chkstk_darwin(v208);
  v211 = (uint64_t)&v177 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1000039AC(&qword_10036E490);
  v32 = __chkstk_darwin(v31);
  v227 = (char *)&v177 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v213 = (uint64_t)&v177 - v34;
  v35 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  v216 = *(_QWORD *)(v35 - 8);
  v217 = v35;
  __chkstk_darwin(v35);
  v207 = (uint64_t)&v177 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = sub_1000039AC(&qword_100375458);
  __chkstk_darwin(v215);
  v218 = (uint64_t)&v177 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1000039AC(&qword_10036E488);
  v39 = __chkstk_darwin(v38);
  v212 = (uint64_t)&v177 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v223 = (uint64_t)&v177 - v41;
  v42 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  v220 = *(_QWORD *)(v42 - 8);
  v221 = v42;
  __chkstk_darwin(v42);
  v214 = (uint64_t)&v177 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = sub_1000039AC(&qword_100375460);
  __chkstk_darwin(v219);
  v222 = (uint64_t)&v177 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1000039AC(&qword_10036E480);
  v46 = __chkstk_darwin(v45);
  v226 = (char *)&v177 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v225 = (char *)&v177 - v48;
  v49 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v50 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v224 = (uint64_t)&v177 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v52);
  v54 = (char *)&v177 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_1000039AC(&qword_10036E458);
  v56 = __chkstk_darwin(v55);
  v228 = (uint64_t)&v177 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56);
  v59 = (char *)&v177 - v58;
  v60 = a1;
  v61 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v61, v255, 0, 0);
  sub_10000E660(v61, (uint64_t)v59, &qword_10036E458);
  v62 = v229;
  v63 = v229
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v229+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v254, 0, 0);
  v64 = (uint64_t)&v54[*(int *)(v52 + 48)];
  sub_10000E660((uint64_t)v59, (uint64_t)v54, &qword_10036E458);
  sub_10000E660(v63, v64, &qword_10036E458);
  v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  if (v65((uint64_t)v54, 1, v49) == 1)
  {
    swift_retain(v60);
    swift_retain(v62);
    sub_100015704((uint64_t)v59, &qword_10036E458);
    v66 = v65(v64, 1, v49);
    v67 = v60;
    if (v66 == 1)
    {
      sub_100015704((uint64_t)v54, &qword_10036E458);
      goto LABEL_11;
    }
LABEL_6:
    v69 = &qword_100375338;
    v70 = (uint64_t)v54;
LABEL_7:
    sub_100015704(v70, v69);
    goto LABEL_8;
  }
  v68 = v60;
  sub_10000E660((uint64_t)v54, v228, &qword_10036E458);
  if (v65(v64, 1, v49) == 1)
  {
    v67 = v60;
    swift_retain(v60);
    swift_retain(v62);
    sub_100015704((uint64_t)v59, &qword_10036E458);
    sub_100004030(v228, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v72 = v224;
  sub_100003E08(v64, v224, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v67 = v68;
  swift_retain(v68);
  swift_retain(v62);
  v73 = v228;
  v74 = sub_1000656F0(v228, v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v59, &qword_10036E458);
  sub_100004030(v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v54, &qword_10036E458);
  if ((v74 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v75 = (int *)(v67
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v253, 0, 0);
  v76 = *v75;
  v77 = *((_BYTE *)v75 + 4);
  v78 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v62+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v252, 0, 0);
  if ((v77 & 1) != 0)
  {
    v79 = (uint64_t)v226;
    v80 = (uint64_t)v227;
    v81 = (uint64_t)v225;
    if ((*(_BYTE *)(v78 + 4) & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v79 = (uint64_t)v226;
    v80 = (uint64_t)v227;
    v81 = (uint64_t)v225;
    if ((*(_BYTE *)(v78 + 4) & 1) != 0 || v76 != *(_DWORD *)v78)
      goto LABEL_8;
  }
  v82 = v67
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, v251, 0, 0);
  sub_10000E660(v82, v81, &qword_10036E480);
  v83 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess(v62+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, v250, 0, 0);
  v84 = v222;
  v85 = v222 + *(int *)(v219 + 48);
  sub_10000E660(v81, v222, &qword_10036E480);
  v86 = v83;
  v87 = v84;
  sub_10000E660(v86, v85, &qword_10036E480);
  v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v220 + 48);
  v89 = v84;
  v90 = v221;
  if (v88(v89, 1, v221) == 1)
  {
    sub_100015704(v81, &qword_10036E480);
    v91 = v88(v85, 1, v90);
    v92 = v223;
    if (v91 == 1)
    {
      sub_100015704(v87, &qword_10036E480);
      goto LABEL_23;
    }
LABEL_21:
    v69 = &qword_100375460;
LABEL_36:
    v70 = v87;
    goto LABEL_7;
  }
  sub_10000E660(v87, v79, &qword_10036E480);
  v93 = v88(v85, 1, v90);
  v92 = v223;
  if (v93 == 1)
  {
    sub_100015704(v81, &qword_10036E480);
    sub_100004030(v79, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
    goto LABEL_21;
  }
  v94 = v79;
  v95 = v214;
  sub_100003E08(v85, v214, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  v96 = sub_100065A60(v94, v95, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, sub_1000C9CE8);
  sub_100004030(v95, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  sub_100015704(v81, &qword_10036E480);
  v97 = v94;
  v80 = (uint64_t)v227;
  sub_100004030(v97, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  sub_100015704(v87, &qword_10036E480);
  if ((v96 & 1) == 0)
    goto LABEL_8;
LABEL_23:
  v98 = v67
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, &v249, 0, 0);
  sub_10000E660(v98, v92, &qword_10036E488);
  v99 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess(v62+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, &v248, 0, 0);
  v100 = v92;
  v101 = v218;
  v102 = v218 + *(int *)(v215 + 48);
  sub_10000E660(v100, v218, &qword_10036E488);
  v103 = v99;
  v87 = v101;
  sub_10000E660(v103, v102, &qword_10036E488);
  v104 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48);
  v105 = v101;
  v106 = v217;
  if (v104(v105, 1, v217) == 1)
  {
    sub_100015704(v100, &qword_10036E488);
    if (v104(v102, 1, v106) == 1)
    {
      sub_100015704(v87, &qword_10036E488);
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  v107 = v212;
  sub_10000E660(v87, v212, &qword_10036E488);
  if (v104(v102, 1, v106) == 1)
  {
    sub_100015704(v223, &qword_10036E488);
    sub_100004030(v107, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
LABEL_28:
    v69 = &qword_100375458;
    goto LABEL_36;
  }
  v108 = v207;
  sub_100003E08(v102, v207, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  v109 = sub_100065A60(v107, v108, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, sub_1000CF62C);
  sub_100004030(v108, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  sub_100015704(v223, &qword_10036E488);
  sub_100004030(v107, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  sub_100015704(v87, &qword_10036E488);
  if ((v109 & 1) == 0)
    goto LABEL_8;
LABEL_30:
  v110 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, &v247, 0, 0);
  v111 = v213;
  sub_10000E660(v110, v213, &qword_10036E490);
  v112 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess(v62+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, &v246, 0, 0);
  v113 = v211;
  v114 = v211 + *(int *)(v208 + 48);
  sub_10000E660(v111, v211, &qword_10036E490);
  v115 = v112;
  v87 = v113;
  sub_10000E660(v115, v114, &qword_10036E490);
  v116 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
  v117 = v113;
  v118 = v210;
  if (v116(v117, 1, v210) == 1)
  {
    sub_100015704(v111, &qword_10036E490);
    if (v116(v114, 1, v118) == 1)
    {
      sub_100015704(v87, &qword_10036E490);
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  sub_10000E660(v87, v80, &qword_10036E490);
  if (v116(v114, 1, v118) == 1)
  {
    sub_100015704(v213, &qword_10036E490);
    sub_100004030(v80, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
LABEL_35:
    v69 = &qword_100375450;
    goto LABEL_36;
  }
  v119 = v206;
  sub_100003E08(v114, v206, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  v120 = sub_100115398(v80, v119);
  sub_100004030(v119, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  sub_100015704(v213, &qword_10036E490);
  sub_100004030(v80, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  sub_100015704(v87, &qword_10036E490);
  if ((v120 & 1) == 0)
    goto LABEL_8;
LABEL_38:
  v121 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active, &v245, 0, 0);
  v122 = *v121;
  v123 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess(v62+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active, &v244, 0, 0);
  v124 = *v123;
  if (v122 == 2)
  {
    if (v124 != 2)
      goto LABEL_8;
  }
  else if (v124 == 2 || ((((v124 & 1) == 0) ^ v122) & 1) == 0)
  {
    goto LABEL_8;
  }
  v125 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer, &v243, 0, 0);
  v126 = *(double *)v125;
  v127 = *(_BYTE *)(v125 + 8);
  v128 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess(v62+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer, &v242, 0, 0);
  if ((v127 & 1) != 0)
  {
    if ((*(_BYTE *)(v128 + 8) & 1) == 0)
      goto LABEL_8;
  }
  else if ((*(_BYTE *)(v128 + 8) & 1) != 0 || v126 != *(double *)v128)
  {
    goto LABEL_8;
  }
  v129 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality, &v241, 0, 0);
  v130 = *v129;
  v131 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess(v62+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality, &v240, 0, 0);
  v132 = *v131;
  if (v130 == 3)
  {
    if (v132 != 3)
      goto LABEL_8;
  }
  else if (v132 == 3 || v130 != v132)
  {
    goto LABEL_8;
  }
  v133 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, &v239, 0, 0);
  v134 = v205;
  sub_10000E660(v133, v205, &qword_10036E498);
  v135 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess(v62+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, &v238, 0, 0);
  v136 = v204;
  v137 = v204 + *(int *)(v200 + 48);
  sub_10000E660(v134, v204, &qword_10036E498);
  v138 = v135;
  v87 = v136;
  sub_10000E660(v138, v137, &qword_10036E498);
  v139 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v201 + 48);
  v140 = v136;
  v141 = v203;
  if (v139(v140, 1, v203) == 1)
  {
    sub_100015704(v134, &qword_10036E498);
    if (v139(v137, 1, v141) == 1)
    {
      sub_100015704(v87, &qword_10036E498);
      v143 = (uint64_t)v198;
      v142 = (uint64_t)v199;
      goto LABEL_60;
    }
    goto LABEL_58;
  }
  sub_10000E660(v87, v202, &qword_10036E498);
  if (v139(v137, 1, v141) == 1)
  {
    sub_100015704(v205, &qword_10036E498);
    sub_100004030(v202, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
LABEL_58:
    v69 = &qword_100375448;
    goto LABEL_36;
  }
  v144 = v191;
  sub_100003E08(v137, v191, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  v145 = v202;
  v146 = sub_10011E028(v202, v144, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  sub_100004030(v144, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  sub_100015704(v205, &qword_10036E498);
  sub_100004030(v145, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  sub_100015704(v87, &qword_10036E498);
  v143 = (uint64_t)v198;
  v142 = (uint64_t)v199;
  if ((v146 & 1) == 0)
    goto LABEL_8;
LABEL_60:
  v147 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, &v237, 0, 0);
  sub_10000E660(v147, v143, &qword_10036E4A0);
  v148 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess(v62+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, &v236, 0, 0);
  v149 = v142 + *(int *)(v195 + 48);
  sub_10000E660(v143, v142, &qword_10036E4A0);
  sub_10000E660(v148, v149, &qword_10036E4A0);
  v150 = v197;
  v151 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v196 + 48);
  if (v151(v142, 1, v197) == 1)
  {
    sub_100015704(v143, &qword_10036E4A0);
    if (v151(v149, 1, v150) == 1)
    {
      sub_100015704(v142, &qword_10036E4A0);
      goto LABEL_67;
    }
    goto LABEL_65;
  }
  v152 = v190;
  sub_10000E660(v142, v190, &qword_10036E4A0);
  if (v151(v149, 1, v150) == 1)
  {
    sub_100015704(v143, &qword_10036E4A0);
    sub_100004030(v152, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
LABEL_65:
    v69 = &qword_100375440;
    v70 = v142;
    goto LABEL_7;
  }
  v153 = v186;
  sub_100003E08(v149, v186, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  v154 = sub_10011F460(v152, v153, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  sub_100004030(v153, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  sub_100015704(v143, &qword_10036E4A0);
  sub_100004030(v152, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  sub_100015704(v142, &qword_10036E4A0);
  if ((v154 & 1) == 0)
    goto LABEL_8;
LABEL_67:
  v155 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, &v235, 0, 0);
  v156 = v192;
  sub_10000E660(v155, v192, &qword_10036E4A8);
  v157 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess(v62+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, &v234, 0, 0);
  v158 = v194;
  v159 = v194 + *(int *)(v188 + 48);
  sub_10000E660(v156, v194, &qword_10036E4A8);
  sub_10000E660(v157, v159, &qword_10036E4A8);
  v160 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48);
  if (v160(v158, 1, v193) == 1)
  {
    sub_100015704(v192, &qword_10036E4A8);
    if (v160(v159, 1, v193) == 1)
    {
      sub_100015704(v194, &qword_10036E4A8);
      goto LABEL_74;
    }
    goto LABEL_72;
  }
  sub_10000E660(v194, v187, &qword_10036E4A8);
  if (v160(v159, 1, v193) == 1)
  {
    sub_100015704(v192, &qword_10036E4A8);
    sub_100004030(v187, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
LABEL_72:
    v69 = &qword_100375438;
    v70 = v194;
    goto LABEL_7;
  }
  v161 = v182;
  sub_100003E08(v159, v182, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  v162 = v187;
  v163 = sub_100114978(v187, v161);
  sub_100004030(v161, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  sub_100015704(v192, &qword_10036E4A8);
  sub_100004030(v162, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  sub_100015704(v194, &qword_10036E4A8);
  if ((v163 & 1) == 0)
    goto LABEL_8;
LABEL_74:
  v164 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected, &v233, 0, 0);
  v165 = *v164;
  v166 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess(v62+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected, &v232, 0, 0);
  v167 = *v166;
  if (v165 == 3)
  {
    if (v167 == 3)
      goto LABEL_79;
LABEL_8:
    swift_release(v67);
    swift_release(v62);
    return 0;
  }
  if (v167 == 3 || v165 != v167)
    goto LABEL_8;
LABEL_79:
  v168 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess(v67+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, &v231, 0, 0);
  v169 = v183;
  sub_10000E660(v168, v183, &qword_10036E4B0);
  v170 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess(v62+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, &v230, 0, 0);
  v171 = v185;
  v172 = v185 + *(int *)(v180 + 48);
  sub_10000E660(v169, v185, &qword_10036E4B0);
  sub_10000E660(v170, v172, &qword_10036E4B0);
  v173 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48);
  if (v173(v171, 1, v184) == 1)
  {
    swift_release(v67);
    swift_release(v62);
    sub_100015704(v183, &qword_10036E4B0);
    if (v173(v172, 1, v184) == 1)
    {
      sub_100015704(v185, &qword_10036E4B0);
      return 1;
    }
LABEL_84:
    sub_100015704(v185, &qword_100375430);
    return 0;
  }
  sub_10000E660(v185, v179, &qword_10036E4B0);
  if (v173(v172, 1, v184) == 1)
  {
    swift_release(v67);
    swift_release(v62);
    sub_100015704(v183, &qword_10036E4B0);
    sub_100004030(v179, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
    goto LABEL_84;
  }
  v174 = v178;
  sub_100003E08(v172, v178, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  v175 = v179;
  v176 = sub_1000656F0(v179, v174, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  swift_release(v67);
  swift_release(v62);
  sub_100004030(v174, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  sub_100015704(v183, &qword_10036E4B0);
  sub_100004030(v175, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  sub_100015704(v185, &qword_10036E4B0);
  return (v176 & 1) != 0;
}

Swift::Int sub_1000D810C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Location, &qword_10036E648, (uint64_t)&unk_1002D12C8);
}

uint64_t sub_1000D8128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100394288, &qword_100394290, (uint64_t)sub_1000D4958, a2);
}

uint64_t sub_1000D8144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D551C(a1, a2, a3);
}

uint64_t sub_1000D8158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D59E8(a1, a2, a3);
}

uint64_t sub_1000D816C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003750B8, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&unk_1002D1240);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D81BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394280, (uint64_t)qword_100383A50, (uint64_t)sub_1000D457C, a1);
}

uint64_t sub_1000D81D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F390, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&unk_1002D11C8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D8218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F390, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&unk_1002D11C8);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000D8268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383A68);
  sub_10000E6A4(v0, (uint64_t)qword_100383A68);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "SQ_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "SQ_POOR";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "SQ_GOOD";
  *(_QWORD *)(v14 + 8) = 7;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D83F4()
{
  return sub_100008BD0(&qword_100394298, (uint64_t)qword_100383A68, (uint64_t)sub_1000D8268);
}

uint64_t sub_1000D8410@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394298, (uint64_t)qword_100383A68, (uint64_t)sub_1000D8268, a1);
}

uint64_t sub_1000D842C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394298, (uint64_t)qword_100383A68, (uint64_t)sub_1000D8268, a1);
}

uint64_t sub_1000D8448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383A80);
  sub_10000E6A4(v0, (uint64_t)qword_100383A80);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "MD_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "MD_YES";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "MD_NO";
  *(_QWORD *)(v14 + 8) = 5;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D85D8()
{
  return sub_100008BD0(&qword_1003942A0, (uint64_t)qword_100383A80, (uint64_t)sub_1000D8448);
}

uint64_t sub_1000D85F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003942A0, (uint64_t)qword_100383A80, (uint64_t)sub_1000D8448, a1);
}

uint64_t sub_1000D8610@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003942A0, (uint64_t)qword_100383A80, (uint64_t)sub_1000D8448, a1);
}

void *sub_1000D862C()
{
  return &unk_100353248;
}

unint64_t sub_1000D8638()
{
  return 0xD000000000000029;
}

uint64_t sub_1000D8654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383A98);
  sub_10000E6A4(v0, (uint64_t)qword_100383A98);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "locations";
  *(_QWORD *)(v9 + 8) = 9;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "locations_private";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D87AC()
{
  return sub_100008BD0(&qword_1003942A8, (uint64_t)qword_100383A98, (uint64_t)sub_1000D8654);
}

uint64_t sub_1000D87C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003942A8, (uint64_t)qword_100383A98, (uint64_t)sub_1000D8654, a1);
}

uint64_t sub_1000D87E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
        v10 = sub_10000FD38(&qword_10036E650, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&unk_1002D00E8);
        v11 = v3;
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
    v10 = sub_10000FD38(&qword_10036E658, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&unk_1002D06D8);
    v11 = v3 + 8;
LABEL_5:
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v11, v9, v10, a2, a3);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1000D8900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *v3;
  if (!*(_QWORD *)(*v3 + 16)
    || (v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0),
        v10 = sub_10000FD38(&qword_10036E650, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&unk_1002D00E8), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v8, 1, v9, v10, a2, a3), !v4))
  {
    v12 = v3[1];
    if (!*(_QWORD *)(v12 + 16)
      || (v13 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0),
          v14 = sub_10000FD38(&qword_10036E658, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&unk_1002D06D8), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v12, 2, v13, v14, a2, a3), !v4))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }
  return result;
}

Swift::Int sub_1000D8A34()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, &qword_10036E660, (uint64_t)&unk_1002D1480);
}

uint64_t sub_1000D8A50@<X0>(_QWORD *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t (*sub_1000D8A80())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000D8A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D87E4(a1, a2, a3);
}

uint64_t sub_1000D8AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D8900(a1, a2, a3);
}

uint64_t sub_1000D8ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003750B0, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&unk_1002D13F8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D8B0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003942A8, (uint64_t)qword_100383A98, (uint64_t)sub_1000D8654, a1);
}

uint64_t sub_1000D8B28(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F3A8, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&unk_1002D1380);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D8B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F3A8, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&unk_1002D1380);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D8BB8()
{
  return &unk_100353258;
}

unint64_t sub_1000D8BC4()
{
  return 0xD000000000000031;
}

uint64_t sub_1000D8BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383AB0);
  sub_10000E6A4(v0, (uint64_t)qword_100383AB0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "gnss_mode_of_operation";
  *(_QWORD *)(v9 + 8) = 22;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "active_gnss_session";
  *(_QWORD *)(v13 + 8) = 19;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "rhythmic_mode";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "current_modes_of_operation";
  *((_QWORD *)v17 + 1) = 26;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "has_subscribed_rhythmic_client";
  *(_QWORD *)(v18 + 8) = 30;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000D8DE4()
{
  return sub_100008BD0(&qword_1003942B0, (uint64_t)qword_100383AB0, (uint64_t)sub_1000D8BE0);
}

uint64_t sub_1000D8E00@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003942B0, (uint64_t)qword_100383AB0, (uint64_t)sub_1000D8BE0, a1);
}

uint64_t sub_1000D8E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  ValueMetadata *v15;
  uint64_t v16;
  uint64_t v17;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 20);
          v13 = sub_10014A8F0();
          v14 = v12;
          v15 = &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation;
          goto LABEL_13;
        case 2:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 24);
          goto LABEL_5;
        case 3:
          v16 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 28);
          v13 = sub_10014A8AC();
          v14 = v16;
          v15 = &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
LABEL_13:
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v14, v15, v13, a2, a3);
          goto LABEL_6;
        case 4:
          v17 = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v17 + 32), a2, a3);
          goto LABEL_6;
        case 5:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 36);
LABEL_5:
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v10, a2, a3);
LABEL_6:
          v9 = v11;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000D8F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int *v14;
  int v15;
  char v16;
  char v17;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 3)
  {
    v16 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v11 = sub_10014A8F0();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v16, 1, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation, v11, a2, a3);
  }
  if (!v4)
  {
    v12 = *(unsigned __int8 *)(v5 + v10[6]);
    if (v12 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2, a2, a3);
    if (*(_BYTE *)(v5 + v10[7]) != 5)
    {
      v17 = *(_BYTE *)(v5 + v10[7]);
      v13 = sub_10014A8AC();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v17, 3, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode, v13, a2, a3);
    }
    v14 = (unsigned int *)(v5 + v10[8]);
    if ((v14[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v14, 4, a2, a3);
    v15 = *(unsigned __int8 *)(v5 + v10[9]);
    if (v15 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 5, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000D9114()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, &qword_10036E668, (uint64_t)&unk_1002D15E8);
}

uint64_t sub_1000D9130@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 3;
  *(_BYTE *)(a2 + v5) = 2;
  v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 5;
  v7 = a2 + v6;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_1000D918C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D8E1C(a1, a2, a3);
}

uint64_t sub_1000D91A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D8F84(a1, a2, a3);
}

uint64_t sub_1000D91B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003750A8, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&unk_1002D1560);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D9204@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003942B0, (uint64_t)qword_100383AB0, (uint64_t)sub_1000D8BE0, a1);
}

uint64_t sub_1000D9220(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F3C0, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&unk_1002D14E8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D9260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F3C0, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&unk_1002D14E8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D92B0()
{
  return &unk_100353268;
}

unint64_t sub_1000D92BC()
{
  return 0xD000000000000031;
}

uint64_t sub_1000D92D8(uint64_t a1)
{
  return sub_1000FB324(a1, qword_100383AC8, (uint64_t)"allow_streaming", 15, (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t sub_1000D92F8()
{
  return sub_100008BD0(&qword_1003942B8, (uint64_t)qword_100383AC8, (uint64_t)sub_1000D92D8);
}

uint64_t sub_1000D9314@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003942B8, (uint64_t)qword_100383AC8, (uint64_t)sub_1000D92D8, a1);
}

uint64_t sub_1000D9330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t result;
  char v10;
  uint64_t v11;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0)
      break;
    if (result == 1)
    {
      v11 = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v11 + 20), a2, a3);
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_1000D93C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
  v10 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v10 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v10 & 1, 1, a2, a3);
  if (!v4)
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  return result;
}

Swift::Int sub_1000D945C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, &qword_10036E670, (uint64_t)&unk_1002D1750);
}

uint64_t sub_1000D9478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = UnknownStorage.init()();
  *(_BYTE *)(a2 + *(int *)(a1 + 20)) = 2;
  return result;
}

uint64_t sub_1000D94A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D9330(a1, a2, a3);
}

uint64_t sub_1000D94BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D93C4(a1, a2, a3);
}

uint64_t sub_1000D94D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003750A0, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&unk_1002D16C8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D9520@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003942B8, (uint64_t)qword_100383AC8, (uint64_t)sub_1000D92D8, a1);
}

uint64_t sub_1000D953C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F3D8, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&unk_1002D1650);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D957C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F3D8, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&unk_1002D1650);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000D95CC()
{
  return &unk_100353278;
}

unint64_t sub_1000D95D8()
{
  return 0xD000000000000027;
}

uint64_t sub_1000D95F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v39;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383AE0);
  sub_10000E6A4(v0, (uint64_t)qword_100383AE0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v39 = swift_allocObject(v1, v6 - v4 + 16 * v4, v5 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_1002CAB00;
  v7 = v39 + v6;
  v8 = v39 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v39 + v6) = 1;
  *(_QWORD *)v8 = "type";
  *(_QWORD *)(v8 + 8) = 4;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v39 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "confidence";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v39 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "mounted_state";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v39 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "mounted_confidence";
  *((_QWORD *)v16 + 1) = 18;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v39 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "is_standing";
  *((_QWORD *)v18 + 1) = 11;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v39 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "tilt";
  *((_QWORD *)v20 + 1) = 4;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v39 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "timestamp_DEPRECATED";
  *((_QWORD *)v22 + 1) = 20;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v39 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "is_vehicle_connected";
  *((_QWORD *)v24 + 1) = 20;
  v24[16] = 2;
  v11();
  v25 = v39 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "exit_state";
  *(_QWORD *)(v25 + 8) = 10;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v39 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "est_exit_time";
  *((_QWORD *)v27 + 1) = 13;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v39 + v6 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "start_time_DEPRECATED";
  *((_QWORD *)v29 + 1) = 21;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v39 + v6 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "raw_type";
  *((_QWORD *)v31 + 1) = 8;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v39 + v6 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "raw_confidence";
  *((_QWORD *)v33 + 1) = 14;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v39 + v6 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "timestamp";
  *((_QWORD *)v35 + 1) = 9;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v39 + v6 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "start_time";
  *((_QWORD *)v37 + 1) = 10;
  v37[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v39);
}

uint64_t sub_1000D9A08()
{
  return sub_100008BD0(&qword_1003942C0, (uint64_t)qword_100383AE0, (uint64_t)sub_1000D95F4);
}

uint64_t sub_1000D9A24@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003942C0, (uint64_t)qword_100383AE0, (uint64_t)sub_1000D95F4, a1);
}

uint64_t sub_1000D9A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_DWORD *)(v1 + 16) = 67306568;
  *(_BYTE *)(v1 + 20) = 2;
  *(_DWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 28) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_WORD *)(v1 + 41) = 1026;
  *(_QWORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 56) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  *(_BYTE *)(v1 + 72) = 1;
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(_WORD *)(v1 + 73) = 1096;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)(v1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, 1, 1, v3);
  qword_1003942D0 = v1;
  return result;
}

uint64_t sub_1000D9B18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  int v8;
  uint64_t v9;
  char v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[24];
  _BYTE v36[24];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  _BYTE v58[24];
  _BYTE v59[24];
  _BYTE v60[24];
  _BYTE v61[24];
  _BYTE v62[24];
  _BYTE v63[32];

  v3 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v3);
  v34 = (uint64_t)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v1 + 17;
  *(_DWORD *)(v1 + 16) = 67306568;
  v24 = v1 + 18;
  v25 = v1 + 19;
  *(_BYTE *)(v1 + 20) = 2;
  *(_DWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 28) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 41) = 1026;
  *(_BYTE *)(v1 + 40) = 1;
  v26 = (_BYTE *)(v1 + 41);
  v27 = v1 + 42;
  *(_QWORD *)(v1 + 48) = 0;
  v28 = (_QWORD *)(v1 + 48);
  *(_BYTE *)(v1 + 56) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  v29 = (_QWORD *)(v1 + 64);
  *(_BYTE *)(v1 + 72) = 1;
  *(_WORD *)(v1 + 73) = 1096;
  v30 = (_BYTE *)(v1 + 73);
  v31 = v1 + 74;
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *(void (**)(void))(*(_QWORD *)(v6 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, v6);
  v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  v7();
  swift_beginAccess(a1 + 16, v63, 0, 0);
  LOBYTE(v7) = *(_BYTE *)(a1 + 16);
  swift_beginAccess(v1 + 16, v62, 1, 0);
  *(_BYTE *)(v1 + 16) = (_BYTE)v7;
  swift_beginAccess(a1 + 17, v61, 0, 0);
  LOBYTE(v7) = *(_BYTE *)(a1 + 17);
  swift_beginAccess(v23, v60, 1, 0);
  *(_BYTE *)(v1 + 17) = (_BYTE)v7;
  swift_beginAccess(a1 + 18, v59, 0, 0);
  LOBYTE(v7) = *(_BYTE *)(a1 + 18);
  swift_beginAccess(v24, v58, 1, 0);
  *(_BYTE *)(v1 + 18) = (_BYTE)v7;
  swift_beginAccess(a1 + 19, v57, 0, 0);
  LOBYTE(v7) = *(_BYTE *)(a1 + 19);
  swift_beginAccess(v25, &v56, 1, 0);
  *(_BYTE *)(v1 + 19) = (_BYTE)v7;
  swift_beginAccess(a1 + 20, &v55, 0, 0);
  LOBYTE(v7) = *(_BYTE *)(a1 + 20);
  swift_beginAccess(v1 + 20, &v54, 1, 0);
  *(_BYTE *)(v1 + 20) = (_BYTE)v7;
  swift_beginAccess(a1 + 24, &v53, 0, 0);
  v8 = *(_DWORD *)(a1 + 24);
  LOBYTE(v7) = *(_BYTE *)(a1 + 28);
  swift_beginAccess(v1 + 24, &v52, 1, 0);
  *(_DWORD *)(v1 + 24) = v8;
  *(_BYTE *)(v1 + 28) = (_BYTE)v7;
  swift_beginAccess(a1 + 32, &v51, 0, 0);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  swift_beginAccess(v1 + 32, &v50, 1, 0);
  *(_QWORD *)(v1 + 32) = v9;
  *(_BYTE *)(v1 + 40) = v10;
  swift_beginAccess(a1 + 41, &v49, 0, 0);
  LOBYTE(v9) = *(_BYTE *)(a1 + 41);
  v11 = v26;
  swift_beginAccess(v26, &v48, 1, 0);
  *v11 = v9;
  swift_beginAccess(a1 + 42, &v47, 0, 0);
  LOBYTE(v11) = *(_BYTE *)(a1 + 42);
  swift_beginAccess(v27, &v46, 1, 0);
  *(_BYTE *)(v1 + 42) = (_BYTE)v11;
  swift_beginAccess(a1 + 48, &v45, 0, 0);
  v12 = *(_QWORD *)(a1 + 48);
  LOBYTE(v9) = *(_BYTE *)(a1 + 56);
  v13 = v28;
  swift_beginAccess(v28, &v44, 1, 0);
  *v13 = v12;
  *(_BYTE *)(v1 + 56) = v9;
  swift_beginAccess(a1 + 64, &v43, 0, 0);
  v14 = *(_QWORD *)(a1 + 64);
  LOBYTE(v9) = *(_BYTE *)(a1 + 72);
  v15 = v29;
  swift_beginAccess(v29, &v42, 1, 0);
  *v15 = v14;
  *(_BYTE *)(v1 + 72) = v9;
  swift_beginAccess(a1 + 73, &v41, 0, 0);
  LOBYTE(v14) = *(_BYTE *)(a1 + 73);
  v16 = v30;
  swift_beginAccess(v30, &v40, 1, 0);
  *v16 = v14;
  swift_beginAccess(a1 + 74, &v39, 0, 0);
  LOBYTE(v14) = *(_BYTE *)(a1 + 74);
  swift_beginAccess(v31, &v38, 1, 0);
  *(_BYTE *)(v1 + 74) = v14;
  v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &v37, 0, 0);
  v18 = v34;
  sub_10000E660(v17, v34, &qword_10036E458);
  v19 = v32;
  swift_beginAccess(v32, v36, 33, 0);
  sub_10000E574(v18, v19, &qword_10036E458);
  swift_endAccess(v36);
  v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, v36, 0, 0);
  sub_10000E660(v20, v18, &qword_10036E458);
  swift_release(a1);
  v21 = v33;
  swift_beginAccess(v33, v35, 33, 0);
  sub_10000E574(v18, v21, &qword_10036E458);
  swift_endAccess(v35);
  return v1;
}

uint64_t sub_1000DA008()
{
  return sub_1000DA028(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &qword_10036E458, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, &qword_10036E458);
}

uint64_t sub_1000DA028(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;

  sub_100015704(v4 + *a1, a2);
  sub_100015704(v4 + *a3, a4);
  return swift_deallocClassInstance(v4, *(unsigned int *)(*(_QWORD *)v4 + 48), *(unsigned __int16 *)(*(_QWORD *)v4 + 52));
}

uint64_t sub_1000DA07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  ValueMetadata *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  ValueMetadata *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  ValueMetadata *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[24];
  uint64_t v37;

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_1000D9B18(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    v37 = v15 + 74;
    v35 = v15 + 24;
    v19 = &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v20 = v15 + 16;
          goto LABEL_22;
        case 2:
          v21 = v15 + 17;
          goto LABEL_24;
        case 3:
          swift_beginAccess(v15 + 18, v36, 33, 0);
          v22 = sub_10014A13C();
          v23 = v15 + 18;
          v24 = &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
          goto LABEL_25;
        case 4:
          v21 = v15 + 19;
          goto LABEL_24;
        case 5:
          v25 = v15 + 20;
          goto LABEL_16;
        case 6:
          swift_beginAccess(v35, v36, 33, 0);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v35, a2, a3);
          goto LABEL_26;
        case 7:
          v27 = v15 + 32;
          goto LABEL_20;
        case 8:
          v25 = v15 + 41;
LABEL_16:
          swift_beginAccess(v25, v36, 33, 0);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v25, a2, a3);
          goto LABEL_26;
        case 9:
          swift_beginAccess(v15 + 42, v36, 33, 0);
          v22 = sub_10014A0B4();
          v23 = v15 + 42;
          v24 = &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
          goto LABEL_25;
        case 10:
          v27 = v15 + 48;
          goto LABEL_20;
        case 11:
          v27 = v15 + 64;
LABEL_20:
          swift_beginAccess(v27, v36, 33, 0);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v27, a2, a3);
          goto LABEL_26;
        case 12:
          v20 = v15 + 73;
LABEL_22:
          swift_beginAccess(v20, v36, 33, 0);
          v22 = sub_10014A79C();
          v23 = v20;
          v24 = &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType;
          goto LABEL_25;
        case 13:
          v21 = v37;
LABEL_24:
          swift_beginAccess(v21, v36, 33, 0);
          v22 = sub_10014A0F8();
          v23 = v21;
          v24 = v19;
LABEL_25:
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v23, v24, v22, a2, a3);
          goto LABEL_26;
        case 14:
          v28 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, v36, 33, 0);
          v29 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v30 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v28, v29, v30, a2, a3);
LABEL_26:
          v5 = v26;
          swift_endAccess(v36);
          break;
        case 15:
          v31 = v19;
          v32 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, v36, 33, 0);
          v33 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v34 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v32, v33, v34, a2, a3);
          swift_endAccess(v36);
          v19 = v31;
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_1000DA4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[31];
  char v24;
  _BYTE v25[24];
  _BYTE v26[24];
  _BYTE v27[24];
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, &v20, 0, 0);
  if (*(_BYTE *)(v9 + 16) != 72)
  {
    v33[0] = *(_BYTE *)(v9 + 16);
    v10 = sub_10014A79C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v33, 1, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType, v10, a2, a3);
  }
  if (v4)
    return swift_release(v9);
  swift_beginAccess(v9 + 17, v21, 0, 0);
  if (*(_BYTE *)(v9 + 17) != 4)
  {
    v33[0] = *(_BYTE *)(v9 + 17);
    v12 = sub_10014A0F8();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v33, 2, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType, v12, a2, a3);
  }
  swift_beginAccess(v9 + 18, v22, 0, 0);
  if (*(_BYTE *)(v9 + 18) != 3)
  {
    v33[0] = *(_BYTE *)(v9 + 18);
    v13 = sub_10014A13C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v33, 3, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType, v13, a2, a3);
  }
  swift_beginAccess(v9 + 19, v23, 0, 0);
  if (*(_BYTE *)(v9 + 19) != 4)
  {
    v33[0] = *(_BYTE *)(v9 + 19);
    v14 = sub_10014A0F8();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v33, 4, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType, v14, a2, a3);
  }
  swift_beginAccess(v9 + 20, v33, 0, 0);
  v15 = *(unsigned __int8 *)(v9 + 20);
  if (v15 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 5, a2, a3);
  swift_beginAccess(v9 + 24, v32, 0, 0);
  if ((*(_BYTE *)(v9 + 28) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(6, a2, a3, *(float *)(v9 + 24));
  swift_beginAccess(v9 + 32, v31, 0, 0);
  if ((*(_BYTE *)(v9 + 40) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7, a2, a3, *(double *)(v9 + 32));
  swift_beginAccess(v9 + 41, v30, 0, 0);
  v16 = *(unsigned __int8 *)(v9 + 41);
  if (v16 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v16 & 1, 8, a2, a3);
  swift_beginAccess(v9 + 42, v29, 0, 0);
  if (*(_BYTE *)(v9 + 42) != 4)
  {
    v28[0] = *(_BYTE *)(v9 + 42);
    v17 = sub_10014A0B4();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v28, 9, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType, v17, a2, a3);
  }
  swift_beginAccess(v9 + 48, v28, 0, 0);
  if ((*(_BYTE *)(v9 + 56) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(10, a2, a3, *(double *)(v9 + 48));
  swift_beginAccess(v9 + 64, v27, 0, 0);
  if ((*(_BYTE *)(v9 + 72) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(11, a2, a3, *(double *)(v9 + 64));
  swift_beginAccess(v9 + 73, v26, 0, 0);
  if (*(_BYTE *)(v9 + 73) != 72)
  {
    v25[0] = *(_BYTE *)(v9 + 73);
    v18 = sub_10014A79C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v25, 12, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType, v18, a2, a3);
  }
  swift_beginAccess(v9 + 74, v25, 0, 0);
  if (*(_BYTE *)(v9 + 74) != 4)
  {
    v24 = *(_BYTE *)(v9 + 74);
    v19 = sub_10014A0F8();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v24, 13, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType, v19, a2, a3);
  }
  sub_1000DA948(v9, a1, a2, a3);
  sub_1000DAAD4(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000DA948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 14, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DAAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 15, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DAC60(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t (*)(uint64_t, uint64_t))sub_1000DAC88) & 1;
}

BOOL sub_1000DAC88(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _BOOL8 result;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  float v33;
  char v34;
  char v35;
  double v36;
  char v37;
  char v38;
  int v39;
  int v40;
  int v41;
  int v42;
  double v43;
  char v44;
  char v45;
  double v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[24];
  _BYTE v95[24];
  _BYTE v96[24];
  _BYTE v97[24];
  _BYTE v98[24];
  _BYTE v99[32];

  v69 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v4 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v66 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_100375338);
  v7 = __chkstk_darwin(v6);
  v68 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v65 - v9;
  v11 = sub_1000039AC(&qword_10036E458);
  v12 = __chkstk_darwin(v11);
  v67 = (uint64_t)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v65 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v65 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v65 - v20;
  swift_beginAccess(a1 + 16, v99, 0, 0);
  v22 = *(char *)(a1 + 16);
  swift_beginAccess(a2 + 16, v98, 0, 0);
  v23 = (char)a2[16];
  if (v22 == 72)
  {
    if ((_DWORD)v23 != 72)
      return 0;
  }
  else if ((_DWORD)v23 == 72 || qword_1002D91C0[v22] != qword_1002D91C0[v23])
  {
    return 0;
  }
  swift_beginAccess(a1 + 17, v97, 0, 0);
  v24 = *(unsigned __int8 *)(a1 + 17);
  swift_beginAccess(a2 + 17, v96, 0, 0);
  v25 = a2[17];
  if (v24 == 4)
  {
    if (v25 != 4)
      return 0;
  }
  else
  {
    result = 0;
    if (v25 == 4 || v24 != v25)
      return result;
  }
  swift_beginAccess(a1 + 18, v95, 0, 0);
  v27 = *(unsigned __int8 *)(a1 + 18);
  swift_beginAccess(a2 + 18, v94, 0, 0);
  v28 = a2[18];
  if (v27 == 3)
  {
    if (v28 != 3)
      return 0;
  }
  else
  {
    result = 0;
    if (v28 == 3 || v27 != v28)
      return result;
  }
  swift_beginAccess(a1 + 19, &v93, 0, 0);
  v29 = *(unsigned __int8 *)(a1 + 19);
  swift_beginAccess(a2 + 19, &v92, 0, 0);
  v30 = a2[19];
  if (v29 == 4)
  {
    if (v30 != 4)
      return 0;
  }
  else
  {
    result = 0;
    if (v30 == 4 || v29 != v30)
      return result;
  }
  swift_beginAccess(a1 + 20, &v91, 0, 0);
  v31 = *(unsigned __int8 *)(a1 + 20);
  swift_beginAccess(a2 + 20, &v90, 0, 0);
  v32 = a2[20];
  if (v31 == 2)
  {
    if (v32 != 2)
      return 0;
  }
  else if (v32 == 2 || ((((v32 & 1) == 0) ^ v31) & 1) == 0)
  {
    return 0;
  }
  swift_beginAccess(a1 + 24, &v89, 0, 0);
  v33 = *(float *)(a1 + 24);
  v34 = *(_BYTE *)(a1 + 28);
  v65 = (uint64_t)(a2 + 24);
  swift_beginAccess(a2 + 24, &v88, 0, 0);
  v35 = a2[28];
  if ((v34 & 1) != 0)
  {
    if (!a2[28])
      return 0;
  }
  else
  {
    if (v33 != *(float *)v65)
      v35 = 1;
    if ((v35 & 1) != 0)
      return 0;
  }
  swift_beginAccess(a1 + 32, &v87, 0, 0);
  v36 = *(double *)(a1 + 32);
  v37 = *(_BYTE *)(a1 + 40);
  v65 = (uint64_t)(a2 + 32);
  swift_beginAccess(a2 + 32, &v86, 0, 0);
  v38 = a2[40];
  if ((v37 & 1) != 0)
  {
    if (!a2[40])
      return 0;
  }
  else
  {
    if (v36 != *(double *)v65)
      v38 = 1;
    if ((v38 & 1) != 0)
      return 0;
  }
  swift_beginAccess(a1 + 41, &v85, 0, 0);
  v39 = *(unsigned __int8 *)(a1 + 41);
  swift_beginAccess(a2 + 41, &v84, 0, 0);
  v40 = a2[41];
  if (v39 == 2)
  {
    if (v40 != 2)
      return 0;
  }
  else if (v40 == 2 || ((((v40 & 1) == 0) ^ v39) & 1) == 0)
  {
    return 0;
  }
  swift_beginAccess(a1 + 42, &v83, 0, 0);
  v41 = *(unsigned __int8 *)(a1 + 42);
  swift_beginAccess(a2 + 42, &v82, 0, 0);
  v42 = a2[42];
  if (v41 == 4)
  {
    if (v42 != 4)
      return 0;
  }
  else
  {
    result = 0;
    if (v42 == 4 || v41 != v42)
      return result;
  }
  swift_beginAccess(a1 + 48, &v81, 0, 0);
  v43 = *(double *)(a1 + 48);
  v44 = *(_BYTE *)(a1 + 56);
  v65 = (uint64_t)(a2 + 48);
  swift_beginAccess(a2 + 48, &v80, 0, 0);
  v45 = a2[56];
  if ((v44 & 1) != 0)
  {
    if (!a2[56])
      return 0;
  }
  else
  {
    if (v43 != *(double *)v65)
      v45 = 1;
    if ((v45 & 1) != 0)
      return 0;
  }
  swift_beginAccess(a1 + 64, &v79, 0, 0);
  v46 = *(double *)(a1 + 64);
  v47 = *(_BYTE *)(a1 + 72);
  v65 = (uint64_t)(a2 + 64);
  swift_beginAccess(a2 + 64, &v78, 0, 0);
  v48 = a2[72];
  if ((v47 & 1) != 0)
  {
    if (!a2[72])
      return 0;
  }
  else
  {
    if (v46 != *(double *)v65)
      v48 = 1;
    if ((v48 & 1) != 0)
      return 0;
  }
  swift_beginAccess(a1 + 73, &v77, 0, 0);
  v49 = *(char *)(a1 + 73);
  swift_beginAccess(a2 + 73, &v76, 0, 0);
  v50 = (char)a2[73];
  if (v49 == 72)
  {
    if ((_DWORD)v50 != 72)
      return 0;
  }
  else if ((_DWORD)v50 == 72 || qword_1002D91C0[v49] != qword_1002D91C0[v50])
  {
    return 0;
  }
  swift_beginAccess(a1 + 74, &v75, 0, 0);
  v51 = *(unsigned __int8 *)(a1 + 74);
  swift_beginAccess(a2 + 74, &v74, 0, 0);
  v52 = a2[74];
  if (v51 == 4)
  {
    if (v52 != 4)
      return 0;
LABEL_70:
    v53 = a1
        + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
    swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &v73, 0, 0);
    sub_10000E660(v53, (uint64_t)v21, &qword_10036E458);
    v65 = (uint64_t)&a2[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp];
    swift_beginAccess(&a2[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp], &v72, 0, 0);
    v54 = (uint64_t)&v10[*(int *)(v6 + 48)];
    sub_10000E660((uint64_t)v21, (uint64_t)v10, &qword_10036E458);
    v55 = v65;
    v65 = v54;
    sub_10000E660(v55, v54, &qword_10036E458);
    v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    if (v56((uint64_t)v10, 1, v69) == 1)
    {
      swift_retain(a1);
      swift_retain(a2);
      sub_100015704((uint64_t)v21, &qword_10036E458);
      if (v56(v65, 1, v69) == 1)
      {
        sub_100015704((uint64_t)v10, &qword_10036E458);
LABEL_78:
        v58 = a1
            + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
        swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, &v71, 0, 0);
        sub_10000E660(v58, (uint64_t)v16, &qword_10036E458);
        v59 = (uint64_t)&a2[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime];
        swift_beginAccess(&a2[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime], &v70, 0, 0);
        v60 = v68;
        v61 = v68 + *(int *)(v6 + 48);
        sub_10000E660((uint64_t)v16, v68, &qword_10036E458);
        sub_10000E660(v59, v61, &qword_10036E458);
        if (v56(v60, 1, v69) == 1)
        {
          swift_release(a1);
          swift_release(a2);
          sub_100015704((uint64_t)v16, &qword_10036E458);
          if (v56(v61, 1, v69) == 1)
          {
            sub_100015704(v68, &qword_10036E458);
            return 1;
          }
          goto LABEL_83;
        }
        sub_10000E660(v68, v67, &qword_10036E458);
        if (v56(v61, 1, v69) == 1)
        {
          swift_release(a1);
          swift_release(a2);
          sub_100015704((uint64_t)v16, &qword_10036E458);
          sub_100004030(v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_83:
          sub_100015704(v68, &qword_100375338);
          return 0;
        }
        v62 = v66;
        sub_100003E08(v61, v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        v63 = v67;
        v64 = sub_1000656F0(v67, v62, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        swift_release(a1);
        swift_release(a2);
        sub_100004030(v62, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100015704((uint64_t)v16, &qword_10036E458);
        sub_100004030(v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100015704(v68, &qword_10036E458);
        return (v64 & 1) != 0;
      }
    }
    else
    {
      sub_10000E660((uint64_t)v10, (uint64_t)v19, &qword_10036E458);
      if (v56(v65, 1, v69) != 1)
      {
        v57 = v66;
        sub_100003E08(v65, v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        swift_retain(a1);
        swift_retain(a2);
        LODWORD(v65) = sub_1000656F0((uint64_t)v19, v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100004030(v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100015704((uint64_t)v21, &qword_10036E458);
        sub_100004030((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_100015704((uint64_t)v10, &qword_10036E458);
        if ((v65 & 1) != 0)
          goto LABEL_78;
LABEL_76:
        swift_release(a1);
        swift_release(a2);
        return 0;
      }
      swift_retain(a1);
      swift_retain(a2);
      sub_100015704((uint64_t)v21, &qword_10036E458);
      sub_100004030((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }
    sub_100015704((uint64_t)v10, &qword_100375338);
    goto LABEL_76;
  }
  result = 0;
  if (v52 != 4 && v51 == v52)
    goto LABEL_70;
  return result;
}

Swift::Int sub_1000DB668()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_10036E678, (uint64_t)&unk_1002D18B8);
}

uint64_t sub_1000DB684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_1003942C8, &qword_1003942D0, (uint64_t)sub_1000D9A40, a2);
}

uint64_t sub_1000DB6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA07C(a1, a2, a3);
}

uint64_t sub_1000DB6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA4A4(a1, a2, a3);
}

uint64_t sub_1000DB6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375098, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&unk_1002D1830);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DB718@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003942C0, (uint64_t)qword_100383AE0, (uint64_t)sub_1000D95F4, a1);
}

uint64_t sub_1000DB734(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F3F0, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&unk_1002D17B8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DB774(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F3F0, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&unk_1002D17B8);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000DB7C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383AF8);
  sub_10000E6A4(v0, (uint64_t)qword_100383AF8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "MO_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "MO_NOT_MOUNTED";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "MO_MOUNTED";
  *(_QWORD *)(v14 + 8) = 10;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DB958()
{
  return sub_100008BD0(&qword_1003942D8, (uint64_t)qword_100383AF8, (uint64_t)sub_1000DB7C8);
}

uint64_t sub_1000DB974@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003942D8, (uint64_t)qword_100383AF8, (uint64_t)sub_1000DB7C8, a1);
}

uint64_t sub_1000DB990@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003942D8, (uint64_t)qword_100383AF8, (uint64_t)sub_1000DB7C8, a1);
}

uint64_t sub_1000DB9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383B10);
  sub_10000E6A4(v0, (uint64_t)qword_100383B10);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "C_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 9;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "C_LOW";
  *(_QWORD *)(v13 + 8) = 5;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "C_MEDIUM";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "C_HIGH";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DBB68()
{
  return sub_100008BD0(&qword_1003942E0, (uint64_t)qword_100383B10, (uint64_t)sub_1000DB9AC);
}

uint64_t sub_1000DBB84@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003942E0, (uint64_t)qword_100383B10, (uint64_t)sub_1000DB9AC, a1);
}

uint64_t sub_1000DBBA0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003942E0, (uint64_t)qword_100383B10, (uint64_t)sub_1000DB9AC, a1);
}

uint64_t sub_1000DBBBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383B28);
  sub_10000E6A4(v0, (uint64_t)qword_100383B28);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "VE_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "VE_NO_DETECTION";
  *(_QWORD *)(v13 + 8) = 15;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "VE_PREHEAT";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "VE_DETECTED";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DBD7C()
{
  return sub_100008BD0(&qword_1003942E8, (uint64_t)qword_100383B28, (uint64_t)sub_1000DBBBC);
}

uint64_t sub_1000DBD98@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003942E8, (uint64_t)qword_100383B28, (uint64_t)sub_1000DBBBC, a1);
}

uint64_t sub_1000DBDB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003942E8, (uint64_t)qword_100383B28, (uint64_t)sub_1000DBBBC, a1);
}

void *sub_1000DBDD0()
{
  return &unk_100353288;
}

unint64_t sub_1000DBDDC()
{
  return 0xD000000000000024;
}

uint64_t sub_1000DBDF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383B40);
  sub_10000E6A4(v0, (uint64_t)qword_100383B40);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "event_receipt_time";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "client";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "activity";
  *(_QWORD *)(v14 + 8) = 8;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DBF98()
{
  return sub_100008BD0(&qword_1003942F0, (uint64_t)qword_100383B40, (uint64_t)sub_1000DBDF8);
}

uint64_t sub_1000DBFB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003942F0, (uint64_t)qword_100383B40, (uint64_t)sub_1000DBDF8, a1);
}

uint64_t sub_1000DBFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3348(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_10036F3F0, (uint64_t)&unk_1002D17B8);
}

uint64_t sub_1000DC004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DCBA0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000DC028);
}

uint64_t sub_1000DC028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E4B8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036E4B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E4B8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  v15 = sub_10000FD38(&qword_10036F3F0, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&unk_1002D17B8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

Swift::Int sub_1000DC1A0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &qword_10036E680, (uint64_t)&unk_1002D1A98);
}

uint64_t sub_1000DC1BC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DCE20(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a2);
}

uint64_t sub_1000DC1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375090, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&unk_1002D1A10);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DC218@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003942F0, (uint64_t)qword_100383B40, (uint64_t)sub_1000DBDF8, a1);
}

uint64_t sub_1000DC234(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F408, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&unk_1002D1998);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DC274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F408, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&unk_1002D1998);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000DC2C4()
{
  return &unk_100353298;
}

unint64_t sub_1000DC2D0()
{
  return 0xD000000000000026;
}

uint64_t sub_1000DC2EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383B58);
  sub_10000E6A4(v0, (uint64_t)qword_100383B58);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "activity_type";
  *(_QWORD *)(v9 + 8) = 13;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "start_time_DEPRECATED";
  *(_QWORD *)(v13 + 8) = 21;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "start_time";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "predicted_workout_type";
  *((_QWORD *)v17 + 1) = 22;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DC4AC()
{
  return sub_100008BD0(&qword_1003942F8, (uint64_t)qword_100383B58, (uint64_t)sub_1000DC2EC);
}

uint64_t sub_1000DC4C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003942F8, (uint64_t)qword_100383B58, (uint64_t)sub_1000DC2EC, a1);
}

uint64_t sub_1000DC4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20);
          goto LABEL_5;
        case 2:
          v14 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v14 + 24), a2, a3);
          goto LABEL_6;
        case 3:
          v15 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 28);
          v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v17 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v15, v16, v17, a2, a3);
          goto LABEL_6;
        case 4:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32);
LABEL_5:
          v11 = v3 + v10;
          v12 = sub_10014A79C();
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType, v12, a2, a3);
LABEL_6:
          v9 = v13;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000DC654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v10 = result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 72)
  {
    v14 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v11 = sub_10014A79C();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v14, 1, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType, v11, a2, a3);
  }
  if (!v4)
  {
    v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    sub_1000DC79C(v5, a1, a2, a3);
    if (*(_BYTE *)(v5 + *(int *)(v10 + 32)) != 72)
    {
      v15 = *(_BYTE *)(v5 + *(int *)(v10 + 32));
      v13 = sub_10014A79C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 4, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType, v13, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000DC79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_1000DC914()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &qword_10036E688, (uint64_t)&unk_1002D1C00);
}

uint64_t sub_1000DC930@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  UnknownStorage.init()();
  v4 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 72;
  v5 = a2 + v4;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + a1[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_BYTE *)(a2 + a1[8]) = 72;
  return result;
}

uint64_t sub_1000DC9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DC4E4(a1, a2, a3);
}

uint64_t sub_1000DC9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DC654(a1, a2, a3);
}

uint64_t sub_1000DC9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375088, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&unk_1002D1B78);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DCA24@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003942F8, (uint64_t)qword_100383B58, (uint64_t)sub_1000DC2EC, a1);
}

uint64_t sub_1000DCA40(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F420, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&unk_1002D1B00);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DCA80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F420, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&unk_1002D1B00);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000DCAD0()
{
  return &unk_1003532A8;
}

unint64_t sub_1000DCADC()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_1000DCAF8(uint64_t a1)
{
  return sub_1000F3144(a1, qword_100383B70, (uint64_t)"workout_update", 14);
}

uint64_t sub_1000DCB10()
{
  return sub_100008BD0(&qword_100394300, (uint64_t)qword_100383B70, (uint64_t)sub_1000DCAF8);
}

uint64_t sub_1000DCB2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394300, (uint64_t)qword_100383B70, (uint64_t)sub_1000DCAF8, a1);
}

uint64_t sub_1000DCB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3348(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &qword_10036F420, (uint64_t)&unk_1002D1B00);
}

uint64_t sub_1000DCB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DCBA0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000DCC80);
}

uint64_t sub_1000DCBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t result;
  unsigned int *v14;

  v9 = v5;
  result = sub_100105B68(v9, a1, a2, a3, a4);
  if (!v6)
  {
    v14 = (unsigned int *)(v9 + *(int *)(a4(0) + 24));
    if ((v14[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v14, 2, a2, a3);
    a5(v9, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000DCC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E4C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036E4C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E4C0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  v15 = sub_10000FD38(&qword_10036F420, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&unk_1002D1B00);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

Swift::Int sub_1000DCDF8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &qword_10036E690, (uint64_t)&unk_1002D1D68);
}

uint64_t sub_1000DCE14@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DCE20(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a2);
}

uint64_t sub_1000DCE20@<X0>(int *a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v6 = a3 + a1[5];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1[7];
  v9 = a3 + a1[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a3 + v8;
  v11 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t sub_1000DCEBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375080, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&unk_1002D1CE0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DCF0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394300, (uint64_t)qword_100383B70, (uint64_t)sub_1000DCAF8, a1);
}

uint64_t sub_1000DCF28(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F438, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&unk_1002D1C68);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DCF68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F438, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&unk_1002D1C68);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000DCFB8()
{
  return &unk_1003532B8;
}

unint64_t sub_1000DCFC4()
{
  return 0xD000000000000028;
}

uint64_t sub_1000DCFE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383B88);
  sub_10000E6A4(v0, (uint64_t)qword_100383B88);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "session_id";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "overview_id";
  *(_QWORD *)(v13 + 8) = 11;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "workout_type";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "workout_location_type";
  *((_QWORD *)v17 + 1) = 21;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "workout_mode";
  *(_QWORD *)(v18 + 8) = 12;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DD1E4()
{
  return sub_100008BD0(&qword_100394308, (uint64_t)qword_100383B88, (uint64_t)sub_1000DCFE0);
}

uint64_t sub_1000DD200@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394308, (uint64_t)qword_100383B88, (uint64_t)sub_1000DCFE0, a1);
}

uint64_t sub_1000DD21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  ValueMetadata *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20);
          goto LABEL_10;
        case 2:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 24);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + v13, a2, a3);
          break;
        case 3:
          v14 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28);
          v10 = sub_10014A070();
          v11 = v14;
          v12 = &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
          goto LABEL_5;
        case 4:
          v15 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 32);
          v10 = sub_10014A02C();
          v11 = v15;
          v12 = &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
          goto LABEL_5;
        case 5:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36);
          v10 = sub_100149FE8();
          v11 = v9;
          v12 = &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000DD394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  char v20;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v10 = (int *)result;
  v11 = (_QWORD *)(v5 + *(int *)(result + 20));
  v12 = v11[1];
  if (v12)
    result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v11, v12, 1, a2, a3);
  if (!v4)
  {
    v13 = (_QWORD *)(v5 + v10[6]);
    v14 = v13[1];
    if (v14)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v13, v14, 2, a2, a3);
    if (*(_BYTE *)(v5 + v10[7]) != 67)
    {
      v18 = *(_BYTE *)(v5 + v10[7]);
      v15 = sub_10014A070();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v18, 3, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType, v15, a2, a3);
    }
    if (*(_BYTE *)(v5 + v10[8]) != 5)
    {
      v19 = *(_BYTE *)(v5 + v10[8]);
      v16 = sub_10014A02C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v19, 4, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType, v16, a2, a3);
    }
    if (*(_BYTE *)(v5 + v10[9]) != 3)
    {
      v20 = *(_BYTE *)(v5 + v10[9]);
      v17 = sub_100149FE8();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v20, 5, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode, v17, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000DD538()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, &qword_10036E698, (uint64_t)&unk_1002D1ED0);
}

uint64_t sub_1000DD554@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = (_QWORD *)(a2 + a1[5]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  v8 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 67;
  *(_BYTE *)(a2 + v8) = 5;
  *(_BYTE *)(a2 + a1[9]) = 3;
  return result;
}

uint64_t sub_1000DD5AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DD21C(a1, a2, a3);
}

uint64_t sub_1000DD5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DD394(a1, a2, a3);
}

uint64_t sub_1000DD5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375078, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&unk_1002D1E48);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DD624@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394308, (uint64_t)qword_100383B88, (uint64_t)sub_1000DCFE0, a1);
}

uint64_t sub_1000DD640(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F450, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&unk_1002D1DD0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DD680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F450, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&unk_1002D1DD0);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000DD6D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  _QWORD *v122;
  char *v123;
  _QWORD *v124;
  char *v125;
  _QWORD *v126;
  char *v127;
  _QWORD *v128;
  char *v129;
  _QWORD *v130;
  char *v131;
  _QWORD *v132;
  char *v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  _QWORD *v137;
  char *v138;
  uint64_t v140;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383BA0);
  sub_10000E6A4(v0, (uint64_t)qword_100383BA0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v140 = swift_allocObject(v1, v6 + 67 * v4, v5 | 7);
  *(_OWORD *)(v140 + 16) = xmmword_1002CAB30;
  v7 = v140 + v6;
  v8 = v140 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v140 + v6) = 0;
  *(_QWORD *)v8 = "WT_PROTOBUF_DEFAULT";
  *(_QWORD *)(v8 + 8) = 19;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v140 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "WT_NoWorkout";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v140 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "WT_Walking";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v140 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "WT_Running";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v140 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "WT_Cycling";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v140 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "WT_OutdoorCycling";
  *((_QWORD *)v20 + 1) = 17;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v140 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "WT_IndoorCycling";
  *((_QWORD *)v22 + 1) = 16;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v140 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 7;
  *(_QWORD *)v24 = "WT_Yoga";
  *((_QWORD *)v24 + 1) = 7;
  v24[16] = 2;
  v11();
  v25 = v140 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 8;
  *(_QWORD *)v25 = "WT_Dancing";
  *(_QWORD *)(v25 + 8) = 10;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v140 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 9;
  *(_QWORD *)v27 = "WT_CrossTraining";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v140 + v6 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 10;
  *(_QWORD *)v29 = "WT_Elliptical";
  *((_QWORD *)v29 + 1) = 13;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v140 + v6 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 11;
  *(_QWORD *)v31 = "WT_Climbing";
  *((_QWORD *)v31 + 1) = 11;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v140 + v6 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 12;
  *(_QWORD *)v33 = "WT_StairClimbing";
  *((_QWORD *)v33 + 1) = 16;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v140 + v6 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 13;
  *(_QWORD *)v35 = "WT_Rowing";
  *((_QWORD *)v35 + 1) = 9;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v140 + v6 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 14;
  *(_QWORD *)v37 = "WT_ResistanceTraining";
  *((_QWORD *)v37 + 1) = 21;
  v37[16] = 2;
  v11();
  v38 = (_QWORD *)(v140 + v6 + 15 * v4);
  v39 = (char *)v38 + *(int *)(v2 + 48);
  *v38 = 15;
  *(_QWORD *)v39 = "WT_GenericWorkout";
  *((_QWORD *)v39 + 1) = 17;
  v39[16] = 2;
  v11();
  v40 = v140 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 16 * v4) = 16;
  *(_QWORD *)v40 = "WT_OutdoorWalking";
  *(_QWORD *)(v40 + 8) = 17;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  v41 = (_QWORD *)(v140 + v6 + 17 * v4);
  v42 = (char *)v41 + *(int *)(v2 + 48);
  *v41 = 17;
  *(_QWORD *)v42 = "WT_IndoorWalking";
  *((_QWORD *)v42 + 1) = 16;
  v42[16] = 2;
  v11();
  v43 = (_QWORD *)(v140 + v6 + 18 * v4);
  v44 = (char *)v43 + *(int *)(v2 + 48);
  *v43 = 18;
  *(_QWORD *)v44 = "WT_OutdoorRunning";
  *((_QWORD *)v44 + 1) = 17;
  v44[16] = 2;
  v11();
  v45 = (_QWORD *)(v140 + v6 + 19 * v4);
  v46 = (char *)v45 + *(int *)(v2 + 48);
  *v45 = 19;
  *(_QWORD *)v46 = "WT_IndoorRunning";
  *((_QWORD *)v46 + 1) = 16;
  v46[16] = 2;
  v11();
  v47 = (_QWORD *)(v140 + v6 + 20 * v4);
  v48 = (char *)v47 + *(int *)(v2 + 48);
  *v47 = 20;
  *(_QWORD *)v48 = "WT_Swimming";
  *((_QWORD *)v48 + 1) = 11;
  v48[16] = 2;
  v11();
  v49 = (_QWORD *)(v140 + v6 + 21 * v4);
  v50 = (char *)v49 + *(int *)(v2 + 48);
  *v49 = 21;
  *(_QWORD *)v50 = "WT_OutdoorWheelchairWalk";
  *((_QWORD *)v50 + 1) = 24;
  v50[16] = 2;
  v11();
  v51 = (_QWORD *)(v140 + v6 + 22 * v4);
  v52 = (char *)v51 + *(int *)(v2 + 48);
  *v51 = 22;
  *(_QWORD *)v52 = "WT_OutdoorWheelchairRun";
  *((_QWORD *)v52 + 1) = 23;
  v52[16] = 2;
  v11();
  v53 = (_QWORD *)(v140 + v6 + 23 * v4);
  v54 = (char *)v53 + *(int *)(v2 + 48);
  *v53 = 23;
  *(_QWORD *)v54 = "WT_Calisthenics";
  *((_QWORD *)v54 + 1) = 15;
  v54[16] = 2;
  v11();
  v55 = (_QWORD *)(v140 + v6 + 24 * v4);
  v56 = (char *)v55 + *(int *)(v2 + 48);
  *v55 = 24;
  *(_QWORD *)v56 = "WT_DownhillSkiing";
  *((_QWORD *)v56 + 1) = 17;
  v56[16] = 2;
  v11();
  v57 = (_QWORD *)(v140 + v6 + 25 * v4);
  v58 = (char *)v57 + *(int *)(v2 + 48);
  *v57 = 25;
  *(_QWORD *)v58 = "WT_Hiking";
  *((_QWORD *)v58 + 1) = 9;
  v58[16] = 2;
  v11();
  v59 = (_QWORD *)(v140 + v6 + 26 * v4);
  v60 = (char *)v59 + *(int *)(v2 + 48);
  *v59 = 26;
  *(_QWORD *)v60 = "WT_UndeterminedWorkout";
  *((_QWORD *)v60 + 1) = 22;
  v60[16] = 2;
  v11();
  v61 = (_QWORD *)(v140 + v6 + 27 * v4);
  v62 = (char *)v61 + *(int *)(v2 + 48);
  *v61 = 27;
  *(_QWORD *)v62 = "WT_Unknown";
  *((_QWORD *)v62 + 1) = 10;
  v62[16] = 2;
  v11();
  v63 = (_QWORD *)(v140 + v6 + 28 * v4);
  v64 = (char *)v63 + *(int *)(v2 + 48);
  *v63 = 28;
  *(_QWORD *)v64 = "WT_Golfing";
  *((_QWORD *)v64 + 1) = 10;
  v64[16] = 2;
  v11();
  v65 = (_QWORD *)(v140 + v6 + 29 * v4);
  v66 = (char *)v65 + *(int *)(v2 + 48);
  *v65 = 29;
  *(_QWORD *)v66 = "WT_FunctionalStrength";
  *((_QWORD *)v66 + 1) = 21;
  v66[16] = 2;
  v11();
  v67 = (_QWORD *)(v140 + v6 + 30 * v4);
  v68 = (char *)v67 + *(int *)(v2 + 48);
  *v67 = 30;
  *(_QWORD *)v68 = "WT_CoolDown";
  *((_QWORD *)v68 + 1) = 11;
  v68[16] = 2;
  v11();
  v69 = (_QWORD *)(v140 + v6 + 31 * v4);
  v70 = (char *)v69 + *(int *)(v2 + 48);
  *v69 = 31;
  *(_QWORD *)v70 = "WT_CoreTraining";
  *((_QWORD *)v70 + 1) = 15;
  v70[16] = 2;
  v11();
  v71 = v140 + v6 + 32 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 32 * v4) = 32;
  *(_QWORD *)v71 = "WT_TaiChi";
  *(_QWORD *)(v71 + 8) = 9;
  *(_BYTE *)(v71 + 16) = 2;
  v11();
  v72 = (_QWORD *)(v140 + v6 + 33 * v4);
  v73 = (char *)v72 + *(int *)(v2 + 48);
  *v72 = 33;
  *(_QWORD *)v73 = "WT_Pilates";
  *((_QWORD *)v73 + 1) = 10;
  v73[16] = 2;
  v11();
  v74 = (_QWORD *)(v140 + v6 + 34 * v4);
  v75 = (char *)v74 + *(int *)(v2 + 48);
  *v74 = 34;
  *(_QWORD *)v75 = "WT_MultiSportTransition";
  *((_QWORD *)v75 + 1) = 23;
  v75[16] = 2;
  v11();
  v76 = (_QWORD *)(v140 + v6 + 35 * v4);
  v77 = (char *)v76 + *(int *)(v2 + 48);
  *v76 = 35;
  *(_QWORD *)v77 = "WT_Kickboxing";
  *((_QWORD *)v77 + 1) = 13;
  v77[16] = 2;
  v11();
  v78 = (_QWORD *)(v140 + v6 + 36 * v4);
  v79 = (char *)v78 + *(int *)(v2 + 48);
  *v78 = 36;
  *(_QWORD *)v79 = "WT_OutdoorRowing";
  *((_QWORD *)v79 + 1) = 16;
  v79[16] = 2;
  v11();
  v80 = (_QWORD *)(v140 + v6 + 37 * v4);
  v81 = (char *)v80 + *(int *)(v2 + 48);
  *v80 = 37;
  *(_QWORD *)v81 = "WT_CrossCountrySkiing";
  *((_QWORD *)v81 + 1) = 21;
  v81[16] = 2;
  v11();
  v82 = (_QWORD *)(v140 + v6 + 38 * v4);
  v83 = (char *)v82 + *(int *)(v2 + 48);
  *v82 = 38;
  *(_QWORD *)v83 = "WT_Snowboarding";
  *((_QWORD *)v83 + 1) = 15;
  v83[16] = 2;
  v11();
  v84 = (_QWORD *)(v140 + v6 + 39 * v4);
  v85 = (char *)v84 + *(int *)(v2 + 48);
  *v84 = 39;
  *(_QWORD *)v85 = "WT_PaddleSports";
  *((_QWORD *)v85 + 1) = 15;
  v85[16] = 2;
  v11();
  v86 = (_QWORD *)(v140 + v6 + 40 * v4);
  v87 = (char *)v86 + *(int *)(v2 + 48);
  *v86 = 40;
  *(_QWORD *)v87 = "WT_OutdoorSoccer";
  *((_QWORD *)v87 + 1) = 16;
  v87[16] = 2;
  v11();
  v88 = (_QWORD *)(v140 + v6 + 41 * v4);
  v89 = (char *)v88 + *(int *)(v2 + 48);
  *v88 = 41;
  *(_QWORD *)v89 = "WT_IndoorSoccer";
  *((_QWORD *)v89 + 1) = 15;
  v89[16] = 2;
  v11();
  v90 = (_QWORD *)(v140 + v6 + 42 * v4);
  v91 = (char *)v90 + *(int *)(v2 + 48);
  *v90 = 42;
  *(_QWORD *)v91 = "WT_AustralianFootball";
  *((_QWORD *)v91 + 1) = 21;
  v91[16] = 2;
  v11();
  v92 = (_QWORD *)(v140 + v6 + 43 * v4);
  v93 = (char *)v92 + *(int *)(v2 + 48);
  *v92 = 43;
  *(_QWORD *)v93 = "WT_AmericanFootball";
  *((_QWORD *)v93 + 1) = 19;
  v93[16] = 2;
  v11();
  v94 = (_QWORD *)(v140 + v6 + 44 * v4);
  v95 = (char *)v94 + *(int *)(v2 + 48);
  *v94 = 44;
  *(_QWORD *)v95 = "WT_DiscSports";
  *((_QWORD *)v95 + 1) = 13;
  v95[16] = 2;
  v11();
  v96 = (_QWORD *)(v140 + v6 + 45 * v4);
  v97 = (char *)v96 + *(int *)(v2 + 48);
  *v96 = 45;
  *(_QWORD *)v97 = "WT_Rugby";
  *((_QWORD *)v97 + 1) = 8;
  v97[16] = 2;
  v11();
  v98 = (_QWORD *)(v140 + v6 + 46 * v4);
  v99 = (char *)v98 + *(int *)(v2 + 48);
  *v98 = 46;
  *(_QWORD *)v99 = "WT_Lacrosse";
  *((_QWORD *)v99 + 1) = 11;
  v99[16] = 2;
  v11();
  v100 = (_QWORD *)(v140 + v6 + 47 * v4);
  v101 = (char *)v100 + *(int *)(v2 + 48);
  *v100 = 47;
  *(_QWORD *)v101 = "WT_OutdoorSkatingSports";
  *((_QWORD *)v101 + 1) = 23;
  v101[16] = 2;
  v11();
  v102 = (_QWORD *)(v140 + v6 + 48 * v4);
  v103 = (char *)v102 + *(int *)(v2 + 48);
  *v102 = 48;
  *(_QWORD *)v103 = "WT_IndoorSkatingSports";
  *((_QWORD *)v103 + 1) = 22;
  v103[16] = 2;
  v11();
  v104 = (_QWORD *)(v140 + v6 + 49 * v4);
  v105 = (char *)v104 + *(int *)(v2 + 48);
  *v104 = 49;
  *(_QWORD *)v105 = "WT_IndoorHockey";
  *((_QWORD *)v105 + 1) = 15;
  v105[16] = 2;
  v11();
  v106 = (_QWORD *)(v140 + v6 + 50 * v4);
  v107 = (char *)v106 + *(int *)(v2 + 48);
  *v106 = 50;
  *(_QWORD *)v107 = "WT_OutdoorHockey";
  *((_QWORD *)v107 + 1) = 16;
  v107[16] = 2;
  v11();
  v108 = (_QWORD *)(v140 + v6 + 51 * v4);
  v109 = (char *)v108 + *(int *)(v2 + 48);
  *v108 = 51;
  *(_QWORD *)v109 = "WT_Basketball";
  *((_QWORD *)v109 + 1) = 13;
  v109[16] = 2;
  v11();
  v110 = (_QWORD *)(v140 + v6 + 52 * v4);
  v111 = (char *)v110 + *(int *)(v2 + 48);
  *v110 = 52;
  *(_QWORD *)v111 = "WT_Tennis";
  *((_QWORD *)v111 + 1) = 9;
  v111[16] = 2;
  v11();
  v112 = (_QWORD *)(v140 + v6 + 53 * v4);
  v113 = (char *)v112 + *(int *)(v2 + 48);
  *v112 = 53;
  *(_QWORD *)v113 = "WT_Badminton";
  *((_QWORD *)v113 + 1) = 12;
  v113[16] = 2;
  v11();
  v114 = (_QWORD *)(v140 + v6 + 54 * v4);
  v115 = (char *)v114 + *(int *)(v2 + 48);
  *v114 = 54;
  *(_QWORD *)v115 = "WT_Racquetball";
  *((_QWORD *)v115 + 1) = 14;
  v115[16] = 2;
  v11();
  v116 = (_QWORD *)(v140 + v6 + 55 * v4);
  v117 = (char *)v116 + *(int *)(v2 + 48);
  *v116 = 55;
  *(_QWORD *)v117 = "WT_Pickleball";
  *((_QWORD *)v117 + 1) = 13;
  v117[16] = 2;
  v11();
  v118 = (_QWORD *)(v140 + v6 + 56 * v4);
  v119 = (char *)v118 + *(int *)(v2 + 48);
  *v118 = 56;
  *(_QWORD *)v119 = "WT_Volleyball";
  *((_QWORD *)v119 + 1) = 13;
  v119[16] = 2;
  v11();
  v120 = (_QWORD *)(v140 + v6 + 57 * v4);
  v121 = (char *)v120 + *(int *)(v2 + 48);
  *v120 = 57;
  *(_QWORD *)v121 = "WT_Squash";
  *((_QWORD *)v121 + 1) = 9;
  v121[16] = 2;
  v11();
  v122 = (_QWORD *)(v140 + v6 + 58 * v4);
  v123 = (char *)v122 + *(int *)(v2 + 48);
  *v122 = 58;
  *(_QWORD *)v123 = "WT_Handball";
  *((_QWORD *)v123 + 1) = 11;
  v123[16] = 2;
  v11();
  v124 = (_QWORD *)(v140 + v6 + 59 * v4);
  v125 = (char *)v124 + *(int *)(v2 + 48);
  *v124 = 59;
  *(_QWORD *)v125 = "WT_TrackAndField";
  *((_QWORD *)v125 + 1) = 16;
  v125[16] = 2;
  v11();
  v126 = (_QWORD *)(v140 + v6 + 60 * v4);
  v127 = (char *)v126 + *(int *)(v2 + 48);
  *v126 = 60;
  *(_QWORD *)v127 = "WT_Softball";
  *((_QWORD *)v127 + 1) = 11;
  v127[16] = 2;
  v11();
  v128 = (_QWORD *)(v140 + v6 + 61 * v4);
  v129 = (char *)v128 + *(int *)(v2 + 48);
  *v128 = 61;
  *(_QWORD *)v129 = "WT_Baseball";
  *((_QWORD *)v129 + 1) = 11;
  v129[16] = 2;
  v11();
  v130 = (_QWORD *)(v140 + v6 + 62 * v4);
  v131 = (char *)v130 + *(int *)(v2 + 48);
  *v130 = 62;
  *(_QWORD *)v131 = "WT_Cricket";
  *((_QWORD *)v131 + 1) = 10;
  v131[16] = 2;
  v11();
  v132 = (_QWORD *)(v140 + v6 + 63 * v4);
  v133 = (char *)v132 + *(int *)(v2 + 48);
  *v132 = 63;
  *(_QWORD *)v133 = "WT_TableTennis";
  *((_QWORD *)v133 + 1) = 14;
  v133[16] = 2;
  v11();
  v134 = v140 + v6 + (v4 << 6) + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + (v4 << 6)) = 64;
  *(_QWORD *)v134 = "WT_JumpRope";
  *(_QWORD *)(v134 + 8) = 11;
  *(_BYTE *)(v134 + 16) = 2;
  v11();
  v135 = (_QWORD *)(v140 + v6 + 65 * v4);
  v136 = (char *)v135 + *(int *)(v2 + 48);
  *v135 = 65;
  *(_QWORD *)v136 = "WT_Boxing";
  *((_QWORD *)v136 + 1) = 9;
  v136[16] = 2;
  v11();
  v137 = (_QWORD *)(v140 + v6 + 66 * v4);
  v138 = (char *)v137 + *(int *)(v2 + 48);
  *v137 = 66;
  *(_QWORD *)v138 = "WT_StepTraining";
  *((_QWORD *)v138 + 1) = 15;
  v138[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v140);
}

uint64_t sub_1000DE540()
{
  return sub_100008BD0(&qword_100394310, (uint64_t)qword_100383BA0, (uint64_t)sub_1000DD6D4);
}

uint64_t sub_1000DE55C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394310, (uint64_t)qword_100383BA0, (uint64_t)sub_1000DD6D4, a1);
}

uint64_t sub_1000DE578@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394310, (uint64_t)qword_100383BA0, (uint64_t)sub_1000DD6D4, a1);
}

uint64_t sub_1000DE594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383BB8);
  sub_10000E6A4(v0, (uint64_t)qword_100383BB8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "WLT_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 20;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "WLT_Unknown";
  *(_QWORD *)(v13 + 8) = 11;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "WLT_Indoor";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "WLT_Outdoor";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 4;
  *(_QWORD *)v18 = "WLT_Tbd";
  *(_QWORD *)(v18 + 8) = 7;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DE794()
{
  return sub_100008BD0(&qword_100394318, (uint64_t)qword_100383BB8, (uint64_t)sub_1000DE594);
}

uint64_t sub_1000DE7B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394318, (uint64_t)qword_100383BB8, (uint64_t)sub_1000DE594, a1);
}

uint64_t sub_1000DE7CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394318, (uint64_t)qword_100383BB8, (uint64_t)sub_1000DE594, a1);
}

uint64_t sub_1000DE7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383BD0);
  sub_10000E6A4(v0, (uint64_t)qword_100383BD0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "WM_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 19;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "WM_NORMAL";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "WM_TYPE_2";
  *(_QWORD *)(v14 + 8) = 9;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DE974()
{
  return sub_100008BD0(&qword_100394320, (uint64_t)qword_100383BD0, (uint64_t)sub_1000DE7E8);
}

uint64_t sub_1000DE990@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394320, (uint64_t)qword_100383BD0, (uint64_t)sub_1000DE7E8, a1);
}

uint64_t sub_1000DE9AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394320, (uint64_t)qword_100383BD0, (uint64_t)sub_1000DE7E8, a1);
}

void *sub_1000DE9C8()
{
  return &unk_1003532C8;
}

unint64_t sub_1000DE9D4()
{
  return 0xD000000000000025;
}

uint64_t sub_1000DE9F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383BE8);
  sub_10000E6A4(v0, (uint64_t)qword_100383BE8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "start_time";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "end_time";
  *(_QWORD *)(v13 + 8) = 8;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "event_type";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "event_time";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "workout_settings";
  *(_QWORD *)(v18 + 8) = 16;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DEBF4()
{
  return sub_100008BD0(&qword_100394328, (uint64_t)qword_100383BE8, (uint64_t)sub_1000DE9F0);
}

uint64_t sub_1000DEC10@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394328, (uint64_t)qword_100383BE8, (uint64_t)sub_1000DE9F0, a1);
}

uint64_t sub_1000DEC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v18 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 20);
          v19 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          v16 = v18;
          v17 = v19;
          goto LABEL_7;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 24);
          goto LABEL_5;
        case 3:
          v20 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28);
          v21 = sub_100149FA4();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v20, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType, v21, a2, a3);
          break;
        case 4:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 32);
LABEL_5:
          v10 = v3 + v9;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v12 = (unint64_t *)&qword_10036E1E0;
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v14 = &unk_1002CF5A8;
          goto LABEL_6;
        case 5:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          v12 = &qword_10036F450;
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings;
          v14 = &unk_1002D1DD0;
LABEL_6:
          v15 = sub_10000FD38(v12, v13, (uint64_t)v14);
          v16 = v10;
          v17 = v11;
LABEL_7:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v16, v17, v15, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000DEDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v5 = v3;
  result = sub_100105B68(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  if (!v4)
  {
    sub_1000DEF30(v5, a1, a2, a3);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
    if (*(_BYTE *)(v5 + *(int *)(v10 + 28)) != 19)
    {
      v12 = *(_BYTE *)(v5 + *(int *)(v10 + 28));
      v11 = sub_100149FA4();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v12, 3, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType, v11, a2, a3);
    }
    sub_1000E8DF0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, 4);
    sub_1000DF0A4(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000DEF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DF0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E4C8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  sub_10000E660(a1 + *(int *)(v13 + 36), (uint64_t)v8, &qword_10036E4C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E4C8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  v15 = sub_10000FD38(&qword_10036F450, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&unk_1002D1DD0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

Swift::Int sub_1000DF21C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10036E6A0, (uint64_t)&unk_1002D20B0);
}

uint64_t sub_1000DF238@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(a2 + a1[6], 1, 1, v5);
  v7 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 19;
  v6(a2 + v7, 1, 1, v5);
  v8 = a2 + a1[9];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t sub_1000DF2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DEC2C(a1, a2, a3);
}

uint64_t sub_1000DF310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DEDFC(a1, a2, a3);
}

uint64_t sub_1000DF324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375070, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&unk_1002D2028);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DF374@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394328, (uint64_t)qword_100383BE8, (uint64_t)sub_1000DE9F0, a1);
}

uint64_t sub_1000DF390(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F468, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&unk_1002D1FB0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DF3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F468, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&unk_1002D1FB0);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000DF420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  _QWORD *v44;
  char *v45;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383C00);
  sub_10000E6A4(v0, (uint64_t)qword_100383C00);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 19 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002CAB40;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "ET_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 19;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "ET_WorkoutDidStart";
  *(_QWORD *)(v13 + 8) = 18;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "ET_WorkoutDidStop";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "ET_WorkoutWillPause";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 4;
  *(_QWORD *)v19 = "ET_WorkoutWillResume";
  *((_QWORD *)v19 + 1) = 20;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 5;
  *(_QWORD *)v21 = "ET_WorkoutSuggestedStop";
  *((_QWORD *)v21 + 1) = 23;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 6;
  *(_QWORD *)v23 = "ET_WorkoutPredictionStartDidMute";
  *((_QWORD *)v23 + 1) = 32;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 7;
  *(_QWORD *)v25 = "ET_WorkoutLocationUpdate";
  *((_QWORD *)v25 + 1) = 24;
  v25[16] = 2;
  v12();
  v26 = v8 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 8 * v4) = 8;
  *(_QWORD *)v26 = "ET_WorkoutPredictedWorkoutDetected";
  *(_QWORD *)(v26 + 8) = 34;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  v27 = (_QWORD *)(v8 + 9 * v4);
  v28 = (char *)v27 + *(int *)(v2 + 48);
  *v27 = 9;
  *(_QWORD *)v28 = "ET_WorkoutPredictedWorkoutLabelUpdate";
  *((_QWORD *)v28 + 1) = 37;
  v28[16] = 2;
  v12();
  v29 = (_QWORD *)(v8 + 10 * v4);
  v30 = (char *)v29 + *(int *)(v2 + 48);
  *v29 = 10;
  *(_QWORD *)v30 = "ET_WorkoutPredictedWorkoutEnded";
  *((_QWORD *)v30 + 1) = 31;
  v30[16] = 2;
  v12();
  v31 = (_QWORD *)(v8 + 11 * v4);
  v32 = (char *)v31 + *(int *)(v2 + 48);
  *v31 = 11;
  *(_QWORD *)v32 = "ET_WorkoutShouldAlertUserForPredictedWorkout";
  *((_QWORD *)v32 + 1) = 44;
  v32[16] = 2;
  v12();
  v33 = (_QWORD *)(v8 + 12 * v4);
  v34 = (char *)v33 + *(int *)(v2 + 48);
  *v33 = 12;
  *(_QWORD *)v34 = "ET_WorkoutRetractStopAlert";
  *((_QWORD *)v34 + 1) = 26;
  v34[16] = 2;
  v12();
  v35 = (_QWORD *)(v8 + 13 * v4);
  v36 = (char *)v35 + *(int *)(v2 + 48);
  *v35 = 13;
  *(_QWORD *)v36 = "ET_WorkoutSessionDidBegin";
  *((_QWORD *)v36 + 1) = 25;
  v36[16] = 2;
  v12();
  v37 = (_QWORD *)(v8 + 14 * v4);
  v38 = (char *)v37 + *(int *)(v2 + 48);
  *v37 = 14;
  *(_QWORD *)v38 = "ET_WorkoutSessionDidSetCurrentWorkoutType";
  *((_QWORD *)v38 + 1) = 41;
  v38[16] = 2;
  v12();
  v39 = (_QWORD *)(v8 + 15 * v4);
  v40 = (char *)v39 + *(int *)(v2 + 48);
  *v39 = 15;
  *(_QWORD *)v40 = "ET_WorkoutSessionDidEnd";
  *((_QWORD *)v40 + 1) = 23;
  v40[16] = 2;
  v12();
  v41 = v8 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 16 * v4) = 16;
  *(_QWORD *)v41 = "ET_WorkoutSessionDidManuallyPause";
  *(_QWORD *)(v41 + 8) = 33;
  *(_BYTE *)(v41 + 16) = 2;
  v12();
  v42 = (_QWORD *)(v8 + 17 * v4);
  v43 = (char *)v42 + *(int *)(v2 + 48);
  *v42 = 17;
  *(_QWORD *)v43 = "ET_WorkoutSessionDidManuallyResume";
  *((_QWORD *)v43 + 1) = 34;
  v43[16] = 2;
  v12();
  v44 = (_QWORD *)(v8 + 18 * v4);
  v45 = (char *)v44 + *(int *)(v2 + 48);
  *v44 = 18;
  *(_QWORD *)v45 = "ET_WorkoutSessionDetectedChangeInWorkoutType";
  *((_QWORD *)v45 + 1) = 44;
  v45[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000DF908()
{
  return sub_100008BD0(&qword_100394330, (uint64_t)qword_100383C00, (uint64_t)sub_1000DF420);
}

uint64_t sub_1000DF924@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394330, (uint64_t)qword_100383C00, (uint64_t)sub_1000DF420, a1);
}

uint64_t sub_1000DF940@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394330, (uint64_t)qword_100383C00, (uint64_t)sub_1000DF420, a1);
}

void *sub_1000DF95C()
{
  return &unk_1003532D8;
}

unint64_t sub_1000DF968()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_1000DF984(uint64_t a1)
{
  return sub_1000F3144(a1, qword_100383C18, (uint64_t)"workout_event", 13);
}

uint64_t sub_1000DF99C()
{
  return sub_100008BD0(&qword_100394338, (uint64_t)qword_100383C18, (uint64_t)sub_1000DF984);
}

uint64_t sub_1000DF9B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394338, (uint64_t)qword_100383C18, (uint64_t)sub_1000DF984, a1);
}

uint64_t sub_1000DF9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  qword_100394348 = v1;
  return result;
}

uint64_t sub_1000DFA8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];

  v3 = sub_1000039AC(&qword_10036E4D0);
  __chkstk_darwin(v3);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v24, 0, 0);
  sub_10000E660(v14, (uint64_t)v8, &qword_10036E458);
  swift_beginAccess(v9, v23, 33, 0);
  sub_10000E574((uint64_t)v8, v9, &qword_10036E458);
  swift_endAccess(v23);
  v15 = (int *)(a1
              + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v23, 0, 0);
  v16 = *v15;
  LOBYTE(v15) = *((_BYTE *)v15 + 4);
  swift_beginAccess(v11, v22, 1, 0);
  *(_DWORD *)v11 = v16;
  *(_BYTE *)(v11 + 4) = (_BYTE)v15;
  v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, v21, 0, 0);
  sub_10000E660(v17, (uint64_t)v5, &qword_10036E4D0);
  swift_release(a1);
  swift_beginAccess(v12, v20, 33, 0);
  sub_10000E574((uint64_t)v5, v12, &qword_10036E4D0);
  swift_endAccess(v20);
  return v1;
}

uint64_t sub_1000DFCC4()
{
  return sub_1000DA028(&OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &qword_10036E458, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, &qword_10036E4D0);
}

uint64_t sub_1000DFCE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_1000DFA8C(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v17 & 1) != 0)
        return swift_release(v15);
      if (v16 == 3)
      {
        v19 = v15
            + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
        swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, v27, 33, 0);
        v20 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
        v21 = &qword_10036F468;
        v22 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent;
        v23 = &unk_1002D1FB0;
        goto LABEL_7;
      }
      if (v16 == 2)
        break;
      if (v16 == 1)
      {
        v19 = v15
            + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
        swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v27, 33, 0);
        v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        v21 = (unint64_t *)&qword_10036E1E0;
        v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        v23 = &unk_1002CF5A8;
LABEL_7:
        v24 = sub_10000FD38(v21, v22, (uint64_t)v23);
        v25 = v5;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v24, a2, a3);
LABEL_8:
        v5 = v25;
        swift_endAccess(v27);
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v26 = v15
        + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
    swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v27, 33, 0);
    v25 = v5;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v26, a2, a3);
    goto LABEL_8;
  }
  return swift_release(v15);
}

uint64_t sub_1000DFF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E3C10(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000DFF34, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E00C0);
}

uint64_t sub_1000DFF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E00C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E4D0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E4D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E4D0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  v15 = sub_10000FD38(&qword_10036F468, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&unk_1002D1FB0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t sub_1000E024C(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t (*)(uint64_t, uint64_t))sub_1000E0274) & 1;
}

BOOL sub_1000E0274(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v30;
  int *v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[24];
  _BYTE v57[24];
  _BYTE v58[24];
  _BYTE v59[24];
  _BYTE v60[24];
  _BYTE v61[32];

  v55 = a2;
  v50 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  v49 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v47 = (uint64_t)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_1000039AC(&qword_1003753F8);
  __chkstk_darwin(v48);
  v51 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036E4D0);
  v6 = __chkstk_darwin(v5);
  v53 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v52 = (char *)&v47 - v8;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000039AC(&qword_10036E458);
  v17 = __chkstk_darwin(v16);
  v54 = (uint64_t)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v47 - v19;
  v21 = a1;
  v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v22, v61, 0, 0);
  sub_10000E660(v22, (uint64_t)v20, &qword_10036E458);
  v23 = v55;
  v24 = v55
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v55+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v60, 0, 0);
  v25 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_10000E660((uint64_t)v20, (uint64_t)v15, &qword_10036E458);
  sub_10000E660(v24, v25, &qword_10036E458);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v26((uint64_t)v15, 1, v9) == 1)
  {
    swift_retain(v21);
    swift_retain(v23);
    sub_100015704((uint64_t)v20, &qword_10036E458);
    v27 = v21;
    if (v26(v25, 1, v9) == 1)
    {
      sub_100015704((uint64_t)v15, &qword_10036E458);
      goto LABEL_11;
    }
LABEL_6:
    sub_100015704((uint64_t)v15, &qword_100375338);
    goto LABEL_7;
  }
  v27 = v21;
  v28 = v54;
  sub_10000E660((uint64_t)v15, v54, &qword_10036E458);
  if (v26(v25, 1, v9) == 1)
  {
    swift_retain(v27);
    swift_retain(v23);
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100004030(v28, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v25, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain(v27);
  swift_retain(v23);
  v30 = sub_1000656F0(v28, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  sub_100004030(v28, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v15, &qword_10036E458);
  if ((v30 & 1) == 0)
    goto LABEL_7;
LABEL_11:
  v31 = (int *)(v27
              + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v59, 0, 0);
  v32 = *v31;
  v33 = *((_BYTE *)v31 + 4);
  v34 = v23
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v23+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v58, 0, 0);
  if ((v33 & 1) == 0)
  {
    v35 = (uint64_t)v53;
    v36 = (uint64_t)v52;
    if ((*(_BYTE *)(v34 + 4) & 1) == 0 && v32 == *(_DWORD *)v34)
      goto LABEL_16;
LABEL_7:
    swift_release(v27);
    swift_release(v23);
    return 0;
  }
  v35 = (uint64_t)v53;
  v36 = (uint64_t)v52;
  if ((*(_BYTE *)(v34 + 4) & 1) == 0)
    goto LABEL_7;
LABEL_16:
  v37 = v27
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, v57, 0, 0);
  sub_10000E660(v37, v36, &qword_10036E4D0);
  v38 = v23
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess(v23+ OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, v56, 0, 0);
  v39 = v51;
  v40 = v51 + *(int *)(v48 + 48);
  sub_10000E660(v36, v51, &qword_10036E4D0);
  v41 = v38;
  v42 = v39;
  sub_10000E660(v41, v40, &qword_10036E4D0);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  v44 = v50;
  if (v43(v42, 1, v50) == 1)
  {
    swift_release(v27);
    swift_release(v23);
    sub_100015704(v36, &qword_10036E4D0);
    if (v43(v40, 1, v44) == 1)
    {
      sub_100015704(v42, &qword_10036E4D0);
      return 1;
    }
    goto LABEL_21;
  }
  sub_10000E660(v42, v35, &qword_10036E4D0);
  if (v43(v40, 1, v44) == 1)
  {
    swift_release(v27);
    swift_release(v23);
    sub_100015704(v36, &qword_10036E4D0);
    sub_100004030(v35, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
LABEL_21:
    sub_100015704(v42, &qword_1003753F8);
    return 0;
  }
  v45 = v47;
  sub_100003E08(v40, v47, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  v46 = sub_1001169D0(v35, v45);
  swift_release(v27);
  swift_release(v23);
  sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  sub_100015704(v36, &qword_10036E4D0);
  sub_100004030(v35, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  sub_100015704(v42, &qword_10036E4D0);
  return (v46 & 1) != 0;
}

Swift::Int sub_1000E08E0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &qword_10036E6A8, (uint64_t)&unk_1002D2240);
}

uint64_t sub_1000E08FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100394340, &qword_100394348, (uint64_t)sub_1000DF9D4, a2);
}

uint64_t sub_1000E0918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DFCE8(a1, a2, a3);
}

uint64_t sub_1000E092C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375068, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&unk_1002D21B8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E097C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394338, (uint64_t)qword_100383C18, (uint64_t)sub_1000DF984, a1);
}

uint64_t sub_1000E0998(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F480, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&unk_1002D2140);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E09D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F480, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&unk_1002D2140);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E0A28()
{
  return &unk_1003532E8;
}

unint64_t sub_1000E0A34()
{
  return 0xD000000000000024;
}

uint64_t sub_1000E0A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v31;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383C30);
  sub_10000E6A4(v0, (uint64_t)qword_100383C30);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v31 = swift_allocObject(v1, v6 + 11 * v4, v5 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_1002C40E0;
  v7 = v31 + v6;
  v8 = v31 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v31 + v6) = 1;
  *(_QWORD *)v8 = "gender";
  *(_QWORD *)(v8 + 8) = 6;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v31 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "height_m";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v31 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "weight_kg";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v31 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "vo2max";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v31 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "age";
  *((_QWORD *)v18 + 1) = 3;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v31 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "hrmin";
  *((_QWORD *)v20 + 1) = 5;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v31 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "hrmax";
  *((_QWORD *)v22 + 1) = 5;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v31 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "hronset";
  *((_QWORD *)v24 + 1) = 7;
  v24[16] = 2;
  v11();
  v25 = v31 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "pal";
  *(_QWORD *)(v25 + 8) = 3;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v31 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "condition";
  *((_QWORD *)v27 + 1) = 9;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v31 + v6 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "run_vo2max";
  *((_QWORD *)v29 + 1) = 10;
  v29[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v31);
}

uint64_t sub_1000E0D90()
{
  return sub_100008BD0(&qword_100394350, (uint64_t)qword_100383C30, (uint64_t)sub_1000E0A50);
}

uint64_t sub_1000E0DAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394350, (uint64_t)qword_100383C30, (uint64_t)sub_1000E0A50, a1);
}

uint64_t sub_1000E0DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  ValueMetadata *v12;
  uint64_t v13;
  uint64_t v14;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 20);
          v10 = sub_100149F60();
          v11 = v9;
          v12 = &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
          goto LABEL_15;
        case 2:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 24);
          goto LABEL_17;
        case 3:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 28);
          goto LABEL_17;
        case 4:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 32);
          goto LABEL_17;
        case 5:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 36);
          goto LABEL_17;
        case 6:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 40);
          goto LABEL_17;
        case 7:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 44);
          goto LABEL_17;
        case 8:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 48);
          goto LABEL_17;
        case 9:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52);
          goto LABEL_17;
        case 10:
          v14 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56);
          v10 = sub_100149F1C();
          v11 = v14;
          v12 = &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
LABEL_15:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
          break;
        case 11:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60);
LABEL_17:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v13, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000E0F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 3)
  {
    v15 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v11 = sub_100149F60();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 1, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType, v11, a2, a3);
  }
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2, a2, a3, *(float *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4, a2, a3, *(float *)v14);
    sub_1000E11CC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    sub_1000E1240(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    sub_1000F9EFC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    sub_1000F9F70(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    sub_1000E12B4(v5, a1, a2, a3);
    sub_1000E1328(v5, a1, a2, a3);
    sub_1000E13B0(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000E11CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v9;

  result = a5(0);
  v9 = a1 + *(int *)(result + 36);
  if ((*(_BYTE *)(v9 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(5, a3, a4, *(float *)v9);
  return result;
}

uint64_t sub_1000E1240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v9;

  result = a5(0);
  v9 = a1 + *(int *)(result + 40);
  if ((*(_BYTE *)(v9 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(6, a3, a4, *(float *)v9);
  return result;
}

uint64_t sub_1000E12B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v8 = a1 + *(int *)(result + 52);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(9, a3, a4, *(float *)v8);
  return result;
}

uint64_t sub_1000E1328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v8;
  char v9;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 56)) != 8)
  {
    v9 = *(_BYTE *)(a1 + *(int *)(result + 56));
    v8 = sub_100149F1C();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v9, 10, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType, v8, a3, a4);
  }
  return result;
}

uint64_t sub_1000E13B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v8 = a1 + *(int *)(result + 60);
  if ((*(_BYTE *)(v8 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(11, a3, a4, *(float *)v8);
  return result;
}

Swift::Int sub_1000E1428()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, &qword_10036E6B0, (uint64_t)&unk_1002D23A8);
}

uint64_t sub_1000E1444@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 3;
  v6 = a2 + v5;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1[8];
  v8 = a2 + a1[7];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a2 + v7;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1[10];
  v11 = a2 + a1[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a2 + v10;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1[12];
  v14 = a2 + a1[11];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a2 + v13;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a1[14];
  v17 = a2 + a1[13];
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  *(_BYTE *)(a2 + v16) = 8;
  v18 = a2 + a1[15];
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  return result;
}

uint64_t sub_1000E1500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E0DC8(a1, a2, a3);
}

uint64_t sub_1000E1514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E0F84(a1, a2, a3);
}

uint64_t sub_1000E1528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375060, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&unk_1002D2320);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E1578@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394350, (uint64_t)qword_100383C30, (uint64_t)sub_1000E0A50, a1);
}

uint64_t sub_1000E1594(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F498, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&unk_1002D22A8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E15D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F498, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&unk_1002D22A8);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000E1624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383C48);
  sub_10000E6A4(v0, (uint64_t)qword_100383C48);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "NG_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "NG_MALE";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 2;
  *(_QWORD *)v14 = "NG_FEMALE";
  *(_QWORD *)(v14 + 8) = 9;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E17B4()
{
  return sub_100008BD0(&qword_100394358, (uint64_t)qword_100383C48, (uint64_t)sub_1000E1624);
}

uint64_t sub_1000E17D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394358, (uint64_t)qword_100383C48, (uint64_t)sub_1000E1624, a1);
}

uint64_t sub_1000E17EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394358, (uint64_t)qword_100383C48, (uint64_t)sub_1000E1624, a1);
}

uint64_t sub_1000E1808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383C60);
  sub_10000E6A4(v0, (uint64_t)qword_100383C60);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40B0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "UC_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "UC_ABLE_BODIED";
  *(_QWORD *)(v13 + 8) = 14;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "UC_AMPUTATION";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "UC_SPINA_BIFIDA";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 4;
  *(_QWORD *)v19 = "UC_SPINAL_CORD_INJURY_HIGH";
  *((_QWORD *)v19 + 1) = 26;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 5;
  *(_QWORD *)v21 = "UC_SPINAL_CORD_INJURY_MID";
  *((_QWORD *)v21 + 1) = 25;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 6;
  *(_QWORD *)v23 = "UC_SPINAL_CORD_INJURY_LOW";
  *((_QWORD *)v23 + 1) = 25;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 7;
  *(_QWORD *)v25 = "UC_OTHER";
  *((_QWORD *)v25 + 1) = 8;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E1AA8()
{
  return sub_100008BD0(&qword_100394360, (uint64_t)qword_100383C60, (uint64_t)sub_1000E1808);
}

uint64_t sub_1000E1AC4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394360, (uint64_t)qword_100383C60, (uint64_t)sub_1000E1808, a1);
}

uint64_t sub_1000E1AE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394360, (uint64_t)qword_100383C60, (uint64_t)sub_1000E1808, a1);
}

void *sub_1000E1AFC()
{
  return &unk_1003532F8;
}

unint64_t sub_1000E1B08()
{
  return 0xD000000000000024;
}

uint64_t sub_1000E1B24(uint64_t a1)
{
  return sub_1000F3144(a1, qword_100383C78, (uint64_t)"body_metrics", 12);
}

uint64_t sub_1000E1B3C()
{
  return sub_100008BD0(&qword_100394368, (uint64_t)qword_100383C78, (uint64_t)sub_1000E1B24);
}

uint64_t sub_1000E1B58@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394368, (uint64_t)qword_100383C78, (uint64_t)sub_1000E1B24, a1);
}

uint64_t sub_1000E1B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3348(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, &qword_10036F498, (uint64_t)&unk_1002D22A8);
}

uint64_t sub_1000E1BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DCBA0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E1BCC);
}

uint64_t sub_1000E1BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E4D8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036E4D8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E4D8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  v15 = sub_10000FD38(&qword_10036F498, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&unk_1002D22A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Int sub_1000E1D44()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &qword_10036E6B8, (uint64_t)&unk_1002D2560);
}

uint64_t sub_1000E1D60@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DCE20(a1, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a2);
}

uint64_t sub_1000E1D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375058, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&unk_1002D24D8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E1DBC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394368, (uint64_t)qword_100383C78, (uint64_t)sub_1000E1B24, a1);
}

uint64_t sub_1000E1DD8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F4B0, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&unk_1002D2460);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E1E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F4B0, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&unk_1002D2460);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E1E68()
{
  return &unk_100353308;
}

unint64_t sub_1000E1E74()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000E1E90(uint64_t a1)
{
  return sub_1000FB324(a1, qword_100383C90, (uint64_t)"event_receipt_time", 18, (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t sub_1000E1EB0()
{
  return sub_100008BD0(&qword_100394370, (uint64_t)qword_100383C90, (uint64_t)sub_1000E1E90);
}

uint64_t sub_1000E1ECC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394370, (uint64_t)qword_100383C90, (uint64_t)sub_1000E1E90, a1);
}

uint64_t sub_1000E1EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FB498(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (unint64_t *)&qword_10036E1E0, (uint64_t)&unk_1002CF5A8);
}

uint64_t sub_1000E1F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EE404(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t sub_1000E1F38(uint64_t a1, uint64_t a2)
{
  return sub_10011C5F4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Timer) & 1;
}

Swift::Int sub_1000E1F58()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Timer, &qword_10036E6C0, (uint64_t)&unk_1002D26C8);
}

uint64_t sub_1000E1F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000EE498(a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a2);
}

uint64_t sub_1000E1F80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375050, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&unk_1002D2640);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E1FD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394370, (uint64_t)qword_100383C90, (uint64_t)sub_1000E1E90, a1);
}

uint64_t sub_1000E1FEC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F4C8, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&unk_1002D25C8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E202C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F4C8, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&unk_1002D25C8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E207C()
{
  return &unk_100353318;
}

unint64_t sub_1000E2088()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_1000E20A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383CA8);
  sub_10000E6A4(v0, (uint64_t)qword_100383CA8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3140;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v8 = "applicable_time";
  *(_QWORD *)(v8 + 8) = 15;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6 + v4) = 2;
  *(_QWORD *)v12 = "ground_altitude_above_wgs84_m";
  *(_QWORD *)(v12 + 8) = 29;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "ground_altitude_above_wgs84_unc_m";
  *((_QWORD *)v14 + 1) = 33;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "undulation_m";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "slope_in_direction_of_travel";
  *((_QWORD *)v18 + 1) = 28;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "max_abs_slope";
  *((_QWORD *)v20 + 1) = 13;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "client";
  *((_QWORD *)v22 + 1) = 6;
  v22[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E2310()
{
  return sub_100008BD0(&qword_100394378, (uint64_t)qword_100383CA8, (uint64_t)sub_1000E20A4);
}

uint64_t sub_1000E232C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394378, (uint64_t)qword_100383CA8, (uint64_t)sub_1000E20A4, a1);
}

uint64_t sub_1000E2348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 20);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v11 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
          break;
        case 2:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 24);
          goto LABEL_8;
        case 3:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 28);
LABEL_8:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v12, a2, a3);
          break;
        case 4:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 32);
          goto LABEL_12;
        case 5:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 36);
          goto LABEL_12;
        case 6:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 40);
LABEL_12:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v13, a2, a3);
          break;
        case 7:
          v14 = type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v14 + 44), a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000E2500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v3;
  result = sub_100105B68(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
  if (!v4)
  {
    v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
    v11 = v5 + v10[6];
    if ((*(_BYTE *)(v11 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v11);
    v12 = v5 + v10[7];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v12);
    v13 = v5 + v10[8];
    if ((*(_BYTE *)(v13 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4, a2, a3, *(float *)v13);
    sub_1000E11CC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    sub_1000E1240(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    sub_1000E8F6C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, 7);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000E269C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, &qword_10036E6C8, (uint64_t)&unk_1002D2830);
}

uint64_t sub_1000E26B8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  v8 = a2 + a1[6];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a2 + v7;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1[9];
  v11 = a2 + a1[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a2 + v10;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1[11];
  v14 = a2 + a1[10];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a2 + v13;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_1000E2768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2348(a1, a2, a3);
}

uint64_t sub_1000E277C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2500(a1, a2, a3);
}

uint64_t sub_1000E2790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375048, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&unk_1002D27A8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E27E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394378, (uint64_t)qword_100383CA8, (uint64_t)sub_1000E20A4, a1);
}

uint64_t sub_1000E27FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F4E0, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&unk_1002D2730);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E283C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F4E0, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&unk_1002D2730);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E288C()
{
  return &unk_100353328;
}

unint64_t sub_1000E2898()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000E28B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v37;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383CC0);
  sub_10000E6A4(v0, (uint64_t)qword_100383CC0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v37 = swift_allocObject(v1, v6 + 14 * v4, v5 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_1002C4100;
  v7 = v37 + v6;
  v8 = v37 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v37 + v6) = 1;
  *(_QWORD *)v8 = "applicable_time";
  *(_QWORD *)(v8 + 8) = 15;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "latitude_deg";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "longitude_deg";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "course_deg";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "course_unc_deg";
  *((_QWORD *)v18 + 1) = 14;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "road_width_m";
  *((_QWORD *)v20 + 1) = 12;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "start_latitude_deg";
  *((_QWORD *)v22 + 1) = 18;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "start_longitude_deg";
  *((_QWORD *)v24 + 1) = 19;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "road_length_m";
  *(_QWORD *)(v25 + 8) = 13;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "speed_mps";
  *((_QWORD *)v27 + 1) = 9;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "is_one_way";
  *((_QWORD *)v29 + 1) = 10;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v7 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "is_rail_way";
  *((_QWORD *)v31 + 1) = 11;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v7 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "is_tunnel";
  *((_QWORD *)v33 + 1) = 9;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v7 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "is_bridge";
  *((_QWORD *)v35 + 1) = 9;
  v35[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v37);
}

uint64_t sub_1000E2C80()
{
  return sub_100008BD0(&qword_100394380, (uint64_t)qword_100383CC0, (uint64_t)sub_1000E28B4);
}

uint64_t sub_1000E2C9C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394380, (uint64_t)qword_100383CC0, (uint64_t)sub_1000E28B4, a1);
}

uint64_t sub_1000E2CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 20);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v11 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
          break;
        case 2:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 24);
          goto LABEL_15;
        case 3:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 28);
          goto LABEL_15;
        case 4:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 32);
          goto LABEL_15;
        case 5:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 36);
          goto LABEL_15;
        case 6:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 40);
          goto LABEL_15;
        case 7:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 44);
          goto LABEL_15;
        case 8:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 48);
          goto LABEL_15;
        case 9:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52);
          goto LABEL_15;
        case 10:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56);
LABEL_15:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v12, a2, a3);
          break;
        case 11:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60);
          goto LABEL_20;
        case 12:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64);
          goto LABEL_20;
        case 13:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68);
          goto LABEL_20;
        case 14:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72);
LABEL_20:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v13, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000E2EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v3;
  result = sub_100105B68(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  if (!v4)
  {
    v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
    v11 = v5 + v10[6];
    if ((*(_BYTE *)(v11 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v11);
    v12 = v5 + v10[7];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v12);
    v13 = v5 + v10[8];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v13);
    sub_1000FAE14(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    sub_1000FAE88(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    sub_1000FAEFC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    sub_100100414(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    sub_1000E3140(v5, a1, a2, a3);
    sub_1000E31B4(v5, a1, a2, a3);
    sub_1000E3228(v5, a1, a2, a3);
    sub_1000E329C(v5, a1, a2, a3);
    sub_1000E3310(v5, a1, a2, a3);
    sub_1000E3384(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000E3140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v8 = a1 + *(int *)(result + 52);
  if ((*(_BYTE *)(v8 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(9, a3, a4, *(double *)v8);
  return result;
}

uint64_t sub_1000E31B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v8 = a1 + *(int *)(result + 56);
  if ((*(_BYTE *)(v8 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(10, a3, a4, *(double *)v8);
  return result;
}

uint64_t sub_1000E3228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 60));
  if (v8 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 11, a3, a4);
  return result;
}

uint64_t sub_1000E329C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 64));
  if (v8 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 12, a3, a4);
  return result;
}

uint64_t sub_1000E3310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 68));
  if (v8 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 13, a3, a4);
  return result;
}

uint64_t sub_1000E3384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 72));
  if (v8 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 14, a3, a4);
  return result;
}

Swift::Int sub_1000E33FC()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, &qword_10036E6D0, (uint64_t)&unk_1002D2998);
}

uint64_t sub_1000E3418@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  v8 = a2 + a1[6];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a2 + v7;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1[9];
  v11 = a2 + a1[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v10;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1[11];
  v14 = a2 + a1[10];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = a2 + v13;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = a1[13];
  v17 = a2 + a1[12];
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = a2 + v16;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = a1[15];
  v20 = a2 + a1[14];
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  *(_BYTE *)(a2 + v19) = 2;
  v21 = a1[17];
  *(_BYTE *)(a2 + a1[16]) = 2;
  *(_BYTE *)(a2 + v21) = 2;
  *(_BYTE *)(a2 + a1[18]) = 2;
  return result;
}

uint64_t sub_1000E3510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2CB8(a1, a2, a3);
}

uint64_t sub_1000E3524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2EC4(a1, a2, a3);
}

uint64_t sub_1000E3538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375040, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&unk_1002D2910);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E3588@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394380, (uint64_t)qword_100383CC0, (uint64_t)sub_1000E28B4, a1);
}

uint64_t sub_1000E35A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F4F8, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&unk_1002D2898);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E35E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F4F8, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&unk_1002D2898);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E3638()
{
  return &unk_100353338;
}

unint64_t sub_1000E3644()
{
  return 0xD000000000000022;
}

uint64_t sub_1000E3660(uint64_t a1)
{
  return sub_1000F3144(a1, qword_100383CD8, (uint64_t)"dot_data", 8);
}

uint64_t sub_1000E3678()
{
  return sub_100008BD0(&qword_100394388, (uint64_t)qword_100383CD8, (uint64_t)sub_1000E3660);
}

uint64_t sub_1000E3694@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394388, (uint64_t)qword_100383CD8, (uint64_t)sub_1000E3660, a1);
}

uint64_t sub_1000E36B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  qword_100394398 = v1;
  return result;
}

uint64_t sub_1000E3768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];

  v3 = sub_1000039AC(&qword_10036E4E0);
  __chkstk_darwin(v3);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v24, 0, 0);
  sub_10000E660(v14, (uint64_t)v8, &qword_10036E458);
  swift_beginAccess(v9, v23, 33, 0);
  sub_10000E574((uint64_t)v8, v9, &qword_10036E458);
  swift_endAccess(v23);
  v15 = (int *)(a1
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v23, 0, 0);
  v16 = *v15;
  LOBYTE(v15) = *((_BYTE *)v15 + 4);
  swift_beginAccess(v11, v22, 1, 0);
  *(_DWORD *)v11 = v16;
  *(_BYTE *)(v11 + 4) = (_BYTE)v15;
  v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, v21, 0, 0);
  sub_10000E660(v17, (uint64_t)v5, &qword_10036E4E0);
  swift_release(a1);
  swift_beginAccess(v12, v20, 33, 0);
  sub_10000E574((uint64_t)v5, v12, &qword_10036E4E0);
  swift_endAccess(v20);
  return v1;
}

uint64_t sub_1000E39A0()
{
  return sub_1000DA028(&OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &qword_10036E458, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, &qword_10036E4E0);
}

uint64_t sub_1000E39C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_1000E3768(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v17 & 1) != 0)
        return swift_release(v15);
      if (v16 == 3)
      {
        v19 = v15
            + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
        swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, v27, 33, 0);
        v20 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
        v21 = &qword_10036F4F8;
        v22 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel;
        v23 = &unk_1002D2898;
        goto LABEL_7;
      }
      if (v16 == 2)
        break;
      if (v16 == 1)
      {
        v19 = v15
            + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
        swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v27, 33, 0);
        v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        v21 = (unint64_t *)&qword_10036E1E0;
        v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        v23 = &unk_1002CF5A8;
LABEL_7:
        v24 = sub_10000FD38(v21, v22, (uint64_t)v23);
        v25 = v5;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v24, a2, a3);
LABEL_8:
        v5 = v25;
        swift_endAccess(v27);
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v26 = v15
        + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
    swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v27, 33, 0);
    v25 = v5;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v26, a2, a3);
    goto LABEL_8;
  }
  return swift_release(v15);
}

uint64_t sub_1000E3BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E3C10(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E3D3C, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E3EC8);
}

uint64_t sub_1000E3C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t), _QWORD *a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  _BYTE v20[24];

  v12 = v7;
  v16 = *(_QWORD *)(v12 + *(int *)(a4(0) + 20));
  v17 = swift_retain(v16);
  a5(v17, a1, a2, a3);
  if (v8)
    return swift_release(v16);
  v18 = (unsigned int *)(v16 + *a6);
  swift_beginAccess(v18, v20, 0, 0);
  if ((v18[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v18, 2, a2, a3);
  a7(v16, a1, a2, a3);
  swift_release(v16);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E3D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E3EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E4E0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E4E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E4E0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  v15 = sub_10000FD38(&qword_10036F4F8, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&unk_1002D2898);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000E4054(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t (*)(uint64_t, uint64_t))sub_1000E407C) & 1;
}

BOOL sub_1000E407C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v30;
  int *v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[24];
  _BYTE v57[24];
  _BYTE v58[24];
  _BYTE v59[24];
  _BYTE v60[24];
  _BYTE v61[32];

  v55 = a2;
  v50 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v49 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v47 = (uint64_t)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_1000039AC(&qword_1003753E8);
  __chkstk_darwin(v48);
  v51 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036E4E0);
  v6 = __chkstk_darwin(v5);
  v53 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v52 = (char *)&v47 - v8;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000039AC(&qword_10036E458);
  v17 = __chkstk_darwin(v16);
  v54 = (uint64_t)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v47 - v19;
  v21 = a1;
  v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v22, v61, 0, 0);
  sub_10000E660(v22, (uint64_t)v20, &qword_10036E458);
  v23 = v55;
  v24 = v55
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v55+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v60, 0, 0);
  v25 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_10000E660((uint64_t)v20, (uint64_t)v15, &qword_10036E458);
  sub_10000E660(v24, v25, &qword_10036E458);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v26((uint64_t)v15, 1, v9) == 1)
  {
    swift_retain(v21);
    swift_retain(v23);
    sub_100015704((uint64_t)v20, &qword_10036E458);
    v27 = v21;
    if (v26(v25, 1, v9) == 1)
    {
      sub_100015704((uint64_t)v15, &qword_10036E458);
      goto LABEL_11;
    }
LABEL_6:
    sub_100015704((uint64_t)v15, &qword_100375338);
    goto LABEL_7;
  }
  v27 = v21;
  v28 = v54;
  sub_10000E660((uint64_t)v15, v54, &qword_10036E458);
  if (v26(v25, 1, v9) == 1)
  {
    swift_retain(v27);
    swift_retain(v23);
    sub_100015704((uint64_t)v20, &qword_10036E458);
    sub_100004030(v28, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_100003E08(v25, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain(v27);
  swift_retain(v23);
  v30 = sub_1000656F0(v28, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v20, &qword_10036E458);
  sub_100004030(v28, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v15, &qword_10036E458);
  if ((v30 & 1) == 0)
    goto LABEL_7;
LABEL_11:
  v31 = (int *)(v27
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v59, 0, 0);
  v32 = *v31;
  v33 = *((_BYTE *)v31 + 4);
  v34 = v23
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v23+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v58, 0, 0);
  if ((v33 & 1) == 0)
  {
    v35 = (uint64_t)v53;
    v36 = (uint64_t)v52;
    if ((*(_BYTE *)(v34 + 4) & 1) == 0 && v32 == *(_DWORD *)v34)
      goto LABEL_16;
LABEL_7:
    swift_release(v27);
    swift_release(v23);
    return 0;
  }
  v35 = (uint64_t)v53;
  v36 = (uint64_t)v52;
  if ((*(_BYTE *)(v34 + 4) & 1) == 0)
    goto LABEL_7;
LABEL_16:
  v37 = v27
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess(v27+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, v57, 0, 0);
  sub_10000E660(v37, v36, &qword_10036E4E0);
  v38 = v23
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess(v23+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, v56, 0, 0);
  v39 = v51;
  v40 = v51 + *(int *)(v48 + 48);
  sub_10000E660(v36, v51, &qword_10036E4E0);
  v41 = v38;
  v42 = v39;
  sub_10000E660(v41, v40, &qword_10036E4E0);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  v44 = v50;
  if (v43(v42, 1, v50) == 1)
  {
    swift_release(v27);
    swift_release(v23);
    sub_100015704(v36, &qword_10036E4E0);
    if (v43(v40, 1, v44) == 1)
    {
      sub_100015704(v42, &qword_10036E4E0);
      return 1;
    }
    goto LABEL_21;
  }
  sub_10000E660(v42, v35, &qword_10036E4E0);
  if (v43(v40, 1, v44) == 1)
  {
    swift_release(v27);
    swift_release(v23);
    sub_100015704(v36, &qword_10036E4E0);
    sub_100004030(v35, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
LABEL_21:
    sub_100015704(v42, &qword_1003753E8);
    return 0;
  }
  v45 = v47;
  sub_100003E08(v40, v47, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  v46 = sub_10011B438(v35, v45);
  swift_release(v27);
  swift_release(v23);
  sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  sub_100015704(v36, &qword_10036E4E0);
  sub_100004030(v35, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  sub_100015704(v42, &qword_10036E4E0);
  return (v46 & 1) != 0;
}

Swift::Int sub_1000E46E8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &qword_10036E6D8, (uint64_t)&unk_1002D2B00);
}

uint64_t sub_1000E4704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100394390, &qword_100394398, (uint64_t)sub_1000E36B0, a2);
}

uint64_t sub_1000E4720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E39C4(a1, a2, a3);
}

uint64_t sub_1000E4734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375038, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&unk_1002D2A78);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E4784@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394388, (uint64_t)qword_100383CD8, (uint64_t)sub_1000E3660, a1);
}

uint64_t sub_1000E47A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F510, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&unk_1002D2A00);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E47E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F510, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&unk_1002D2A00);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E4830()
{
  return &unk_100353348;
}

unint64_t sub_1000E483C()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1000E4858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383CF0);
  sub_10000E6A4(v0, (uint64_t)qword_100383CF0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40B0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "applicable_time";
  *(_QWORD *)(v9 + 8) = 15;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "search_point_latitude_deg";
  *(_QWORD *)(v13 + 8) = 25;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "search_point_longitude_deg";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "search_radius_m";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "is_close_to_tunnel";
  *((_QWORD *)v19 + 1) = 18;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "is_close_to_bridge";
  *((_QWORD *)v21 + 1) = 18;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "is_tunnel";
  *((_QWORD *)v23 + 1) = 9;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 8;
  *(_QWORD *)v25 = "is_bridge";
  *((_QWORD *)v25 + 1) = 9;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E4AFC()
{
  return sub_100008BD0(&qword_1003943A0, (uint64_t)qword_100383CF0, (uint64_t)sub_1000E4858);
}

uint64_t sub_1000E4B18@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003943A0, (uint64_t)qword_100383CF0, (uint64_t)sub_1000E4858, a1);
}

uint64_t sub_1000E4B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 20);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v12 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
          goto LABEL_15;
        case 2:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 24);
          goto LABEL_9;
        case 3:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 28);
          goto LABEL_9;
        case 4:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 32);
LABEL_9:
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v14, a2, a3);
          goto LABEL_15;
        case 5:
          v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 36);
          goto LABEL_14;
        case 6:
          v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 40);
          goto LABEL_14;
        case 7:
          v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 44);
          goto LABEL_14;
        case 8:
          v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 48);
LABEL_14:
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v15, a2, a3);
LABEL_15:
          v9 = v13;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000E4CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v3;
  result = sub_100105B68(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  if (!v4)
  {
    v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
    v11 = v5 + v10[6];
    if ((*(_BYTE *)(v11 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v11);
    v12 = v5 + v10[7];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v12);
    v13 = v5 + v10[8];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v13);
    sub_1000EA258(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    sub_1000EEF58(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    sub_1000E4E8C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    sub_1000E4F00(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000E4E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  int v9;

  result = a5(0);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(result + 44));
  if (v9 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v9 & 1, 7, a3, a4);
  return result;
}

uint64_t sub_1000E4F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  int v9;

  result = a5(0);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(result + 48));
  if (v9 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v9 & 1, 8, a3, a4);
  return result;
}

Swift::Int sub_1000E4F78()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &qword_10036E6E0, (uint64_t)&unk_1002D2C68);
}

uint64_t sub_1000E4F94@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  v8 = a2 + a1[6];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a2 + v7;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1[9];
  v11 = a2 + a1[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  *(_BYTE *)(a2 + v10) = 2;
  v12 = a1[11];
  *(_BYTE *)(a2 + a1[10]) = 2;
  *(_BYTE *)(a2 + v12) = 2;
  *(_BYTE *)(a2 + a1[12]) = 2;
  return result;
}

uint64_t sub_1000E5038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E4B34(a1, a2, a3);
}

uint64_t sub_1000E504C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E4CD0(a1, a2, a3);
}

uint64_t sub_1000E5060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375030, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&unk_1002D2BE0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E50B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003943A0, (uint64_t)qword_100383CF0, (uint64_t)sub_1000E4858, a1);
}

uint64_t sub_1000E50CC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F528, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&unk_1002D2B68);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E510C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F528, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&unk_1002D2B68);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E515C()
{
  return &unk_100353358;
}

unint64_t sub_1000E5168()
{
  return 0xD000000000000031;
}

uint64_t sub_1000E5184(uint64_t a1)
{
  return sub_1000F3144(a1, qword_100383D08, (uint64_t)"tunnel_bridge_data", 18);
}

uint64_t sub_1000E519C()
{
  return sub_100008BD0(&qword_1003943A8, (uint64_t)qword_100383D08, (uint64_t)sub_1000E5184);
}

uint64_t sub_1000E51B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003943A8, (uint64_t)qword_100383D08, (uint64_t)sub_1000E5184, a1);
}

uint64_t sub_1000E51D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3348(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &qword_10036F528, (uint64_t)&unk_1002D2B68);
}

uint64_t sub_1000E5208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DCBA0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E522C);
}

uint64_t sub_1000E522C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E4E8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036E4E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E4E8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  v15 = sub_10000FD38(&qword_10036F528, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&unk_1002D2B68);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Int sub_1000E53A4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &qword_10036E6E8, (uint64_t)&unk_1002D2DD0);
}

uint64_t sub_1000E53C0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DCE20(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a2);
}

uint64_t sub_1000E53CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375028, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&unk_1002D2D48);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E541C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003943A8, (uint64_t)qword_100383D08, (uint64_t)sub_1000E5184, a1);
}

uint64_t sub_1000E5438(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F540, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&unk_1002D2CD0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E5478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F540, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&unk_1002D2CD0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E54C8()
{
  return &unk_100353368;
}

unint64_t sub_1000E54D4()
{
  return 0xD000000000000031;
}

uint64_t sub_1000E54F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v39;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383D20);
  sub_10000E6A4(v0, (uint64_t)qword_100383D20);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v39 = swift_allocObject(v1, v6 - v4 + 16 * v4, v5 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_1002CAB00;
  v7 = v39 + v6;
  v8 = v39 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v39 + v6) = 1;
  *(_QWORD *)v8 = "applicable_time";
  *(_QWORD *)(v8 + 8) = 15;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "latitude_deg";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "longitude_deg";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "horizontal_unc_m";
  *((_QWORD *)v16 + 1) = 16;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "altitude_m";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "vertical_unc_m";
  *((_QWORD *)v20 + 1) = 14;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "reference_frame";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "course_at_exit_deg";
  *((_QWORD *)v24 + 1) = 18;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "course_at_exit_unc_deg";
  *(_QWORD *)(v25 + 8) = 22;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "tunnel_width_at_exit_m";
  *((_QWORD *)v27 + 1) = 22;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "is_tunnel_curved";
  *((_QWORD *)v29 + 1) = 16;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v7 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "start_latitude_deg";
  *((_QWORD *)v31 + 1) = 18;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v7 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "start_longitude_deg";
  *((_QWORD *)v33 + 1) = 19;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v7 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "tunnel_length_m";
  *((_QWORD *)v35 + 1) = 15;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v7 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "end_point_distance_from_current_solution_m";
  *((_QWORD *)v37 + 1) = 42;
  v37[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v39);
}

uint64_t sub_1000E58FC()
{
  return sub_100008BD0(&qword_1003943B0, (uint64_t)qword_100383D20, (uint64_t)sub_1000E54F0);
}

uint64_t sub_1000E5918@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003943B0, (uint64_t)qword_100383D20, (uint64_t)sub_1000E54F0, a1);
}

uint64_t sub_1000E5934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved) = 2;
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  qword_1003943C0 = v1;
  return result;
}

uint64_t sub_1000E5AB8()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, &qword_10036E458);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000E5AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10010E490(v13);
    swift_release(v10);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    v19 = &unk_100394000;
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v20 = v19;
          v21 = v15
              + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, v30, 33, 0);
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v23 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v21, v22, v23, a2, a3);
          swift_endAccess(v30);
          v19 = v20;
          break;
        case 2:
          v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
          goto LABEL_23;
        case 3:
          v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
          goto LABEL_23;
        case 4:
          v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
          goto LABEL_23;
        case 5:
          v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
          goto LABEL_23;
        case 6:
          v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
          goto LABEL_23;
        case 7:
          v25 = v15
              + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame, v30, 33, 0);
          v26 = sub_10014AA00();
          v27 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v25, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType, v26, a2, a3);
          goto LABEL_24;
        case 8:
          v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
          goto LABEL_23;
        case 9:
          v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
          goto LABEL_23;
        case 10:
          v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
          goto LABEL_23;
        case 11:
          v28 = v15
              + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved, v30, 33, 0);
          v27 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v28, a2, a3);
          goto LABEL_24;
        case 12:
          v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
          goto LABEL_23;
        case 13:
          v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
          goto LABEL_23;
        case 14:
          v24 = OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
          goto LABEL_23;
        case 15:
          v24 = v19[302];
LABEL_23:
          v29 = v15 + v24;
          swift_beginAccess(v15 + v24, v30, 33, 0);
          v27 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v29, a2, a3);
LABEL_24:
          v5 = v27;
          swift_endAccess(v30);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_1000E5DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20));
  v10 = swift_retain(v9);
  sub_1000E62B0(v10, a1, a2, a3);
  if (v4)
    return swift_release(v9);
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg, &v28, 0, 0);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
  v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg, v29, 0, 0);
  if ((*(_BYTE *)(v13 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v13);
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM, v30, 0, 0);
  if ((*(_BYTE *)(v14 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v14);
  v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM, v41, 0, 0);
  if ((*(_BYTE *)(v15 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5, a2, a3, *(double *)v15);
  v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM, v40, 0, 0);
  if ((*(_BYTE *)(v16 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(6, a2, a3, *(double *)v16);
  v17 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame, v39, 0, 0);
  if (*v17 != 3)
  {
    v38[0] = *v17;
    v18 = sub_10014AA00();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v38, 7, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType, v18, a2, a3);
  }
  v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg, v38, 0, 0);
  if ((*(_BYTE *)(v19 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(8, a2, a3, *(double *)v19);
  v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg, v37, 0, 0);
  if ((*(_BYTE *)(v20 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(9, a2, a3, *(double *)v20);
  v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM, v36, 0, 0);
  if ((*(_BYTE *)(v21 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(10, a2, a3, *(double *)v21);
  v22 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved, v35, 0, 0);
  v23 = *v22;
  if (v23 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v23 & 1, 11, a2, a3);
  v24 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg, v34, 0, 0);
  if ((*(_BYTE *)(v24 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(12, a2, a3, *(double *)v24);
  v25 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg, v33, 0, 0);
  if ((*(_BYTE *)(v25 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(13, a2, a3, *(double *)v25);
  v26 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM, v32, 0, 0);
  if ((*(_BYTE *)(v26 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(14, a2, a3, *(double *)v26);
  v27 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM, v31, 0, 0);
  if ((*(_BYTE *)(v27 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(15, a2, a3, *(double *)v27);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E62B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E643C(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, sub_1000E6464) & 1;
}

uint64_t sub_1000E6464(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  char v68;
  uint64_t v69;
  double v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE v100[24];
  _BYTE v101[24];
  _BYTE v102[24];
  _BYTE v103[24];
  _BYTE v104[24];
  _BYTE v105[32];

  v75 = a2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v73 = (uint64_t)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v6);
  v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000039AC(&qword_10036E458);
  v10 = __chkstk_darwin(v9);
  v74 = (uint64_t)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v73 - v12;
  v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, v105, 0, 0);
  sub_10000E660(v14, (uint64_t)v13, &qword_10036E458);
  v15 = v75;
  v16 = v75
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess(v75+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, v104, 0, 0);
  v17 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10000E660((uint64_t)v13, (uint64_t)v8, &qword_10036E458);
  sub_10000E660(v16, v17, &qword_10036E458);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18((uint64_t)v8, 1, v3) == 1)
  {
    swift_retain(a1);
    swift_retain(v15);
    sub_100015704((uint64_t)v13, &qword_10036E458);
    v19 = v18(v17, 1, v3);
    v20 = a1;
    if (v19 == 1)
    {
      sub_100015704((uint64_t)v8, &qword_10036E458);
      goto LABEL_10;
    }
LABEL_6:
    sub_100015704((uint64_t)v8, &qword_100375338);
    goto LABEL_7;
  }
  v21 = v74;
  sub_10000E660((uint64_t)v8, v74, &qword_10036E458);
  if (v18(v17, 1, v3) == 1)
  {
    v20 = a1;
    swift_retain(a1);
    swift_retain(v15);
    sub_100015704((uint64_t)v13, &qword_10036E458);
    sub_100004030(v21, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v23 = v73;
  sub_100003E08(v17, v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v20 = a1;
  swift_retain(a1);
  swift_retain(v15);
  v24 = sub_1000656F0(v21, v23, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v23, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v13, &qword_10036E458);
  sub_100004030(v21, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v8, &qword_10036E458);
  if ((v24 & 1) == 0)
    goto LABEL_7;
LABEL_10:
  v25 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg, v103, 0, 0);
  v26 = *(double *)v25;
  LOBYTE(v25) = *(_BYTE *)(v25 + 8);
  v27 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg, v102, 0, 0);
  if ((v25 & 1) != 0)
  {
    if ((*(_BYTE *)(v27 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v27 + 8) & 1) != 0 || v26 != *(double *)v27)
  {
    goto LABEL_7;
  }
  v28 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg, v101, 0, 0);
  v29 = *(double *)v28;
  LOBYTE(v28) = *(_BYTE *)(v28 + 8);
  v30 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg, v100, 0, 0);
  if ((v28 & 1) != 0)
  {
    if ((*(_BYTE *)(v30 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v30 + 8) & 1) != 0 || v29 != *(double *)v30)
  {
    goto LABEL_7;
  }
  v31 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM, &v99, 0, 0);
  v32 = *(double *)v31;
  LOBYTE(v31) = *(_BYTE *)(v31 + 8);
  v33 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM, &v98, 0, 0);
  if ((v31 & 1) != 0)
  {
    if ((*(_BYTE *)(v33 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v33 + 8) & 1) != 0 || v32 != *(double *)v33)
  {
    goto LABEL_7;
  }
  v34 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM, &v97, 0, 0);
  v35 = *(double *)v34;
  LOBYTE(v34) = *(_BYTE *)(v34 + 8);
  v36 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM, &v96, 0, 0);
  if ((v34 & 1) != 0)
  {
    if ((*(_BYTE *)(v36 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v36 + 8) & 1) != 0 || v35 != *(double *)v36)
  {
    goto LABEL_7;
  }
  v37 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM, &v95, 0, 0);
  v38 = *(double *)v37;
  LOBYTE(v37) = *(_BYTE *)(v37 + 8);
  v39 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM, &v94, 0, 0);
  if ((v37 & 1) != 0)
  {
    if ((*(_BYTE *)(v39 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v39 + 8) & 1) != 0 || v38 != *(double *)v39)
  {
    goto LABEL_7;
  }
  v40 = (unsigned __int8 *)(v20
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame, &v93, 0, 0);
  v41 = *v40;
  v42 = (unsigned __int8 *)(v15
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame, &v92, 0, 0);
  v43 = *v42;
  if (v41 == 3)
  {
    if (v43 != 3)
      goto LABEL_7;
  }
  else if (v43 == 3 || v41 != v43)
  {
    goto LABEL_7;
  }
  v44 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg, &v91, 0, 0);
  v45 = *(double *)v44;
  LOBYTE(v44) = *(_BYTE *)(v44 + 8);
  v46 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg, &v90, 0, 0);
  if ((v44 & 1) != 0)
  {
    if ((*(_BYTE *)(v46 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v46 + 8) & 1) != 0 || v45 != *(double *)v46)
  {
    goto LABEL_7;
  }
  v47 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg, &v89, 0, 0);
  v48 = *(double *)v47;
  LOBYTE(v47) = *(_BYTE *)(v47 + 8);
  v49 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg, &v88, 0, 0);
  if ((v47 & 1) != 0)
  {
    if ((*(_BYTE *)(v49 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v49 + 8) & 1) != 0 || v48 != *(double *)v49)
  {
    goto LABEL_7;
  }
  v50 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM, &v87, 0, 0);
  v51 = *(double *)v50;
  LOBYTE(v50) = *(_BYTE *)(v50 + 8);
  v52 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM, &v86, 0, 0);
  if ((v50 & 1) != 0)
  {
    if ((*(_BYTE *)(v52 + 8) & 1) != 0)
      goto LABEL_55;
LABEL_7:
    swift_release(v20);
    swift_release(v15);
    return 0;
  }
  if ((*(_BYTE *)(v52 + 8) & 1) != 0 || v51 != *(double *)v52)
    goto LABEL_7;
LABEL_55:
  v53 = (unsigned __int8 *)(v20
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved, &v85, 0, 0);
  v54 = *v53;
  v55 = (unsigned __int8 *)(v15
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved, &v84, 0, 0);
  v56 = *v55;
  if (v54 == 2)
  {
    if (v56 != 2)
      goto LABEL_7;
  }
  else if (v56 == 2 || ((((v56 & 1) == 0) ^ v54) & 1) == 0)
  {
    goto LABEL_7;
  }
  v57 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg, &v83, 0, 0);
  v58 = *(double *)v57;
  LOBYTE(v57) = *(_BYTE *)(v57 + 8);
  v59 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg, &v82, 0, 0);
  if ((v57 & 1) != 0)
  {
    if ((*(_BYTE *)(v59 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v59 + 8) & 1) != 0 || v58 != *(double *)v59)
  {
    goto LABEL_7;
  }
  v60 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg, &v81, 0, 0);
  v61 = *(double *)v60;
  LOBYTE(v60) = *(_BYTE *)(v60 + 8);
  v62 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg, &v80, 0, 0);
  if ((v60 & 1) != 0)
  {
    if ((*(_BYTE *)(v62 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v62 + 8) & 1) != 0 || v61 != *(double *)v62)
  {
    goto LABEL_7;
  }
  v63 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM, &v79, 0, 0);
  v64 = *(double *)v63;
  LOBYTE(v63) = *(_BYTE *)(v63 + 8);
  v65 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM, &v78, 0, 0);
  if ((v63 & 1) != 0)
  {
    if ((*(_BYTE *)(v65 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v65 + 8) & 1) != 0 || v64 != *(double *)v65)
  {
    goto LABEL_7;
  }
  v66 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess(v20+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM, &v77, 0, 0);
  v67 = *(double *)v66;
  v68 = *(_BYTE *)(v66 + 8);
  swift_release(v20);
  v69 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM, &v76, 0, 0);
  v70 = *(double *)v69;
  v71 = *(unsigned __int8 *)(v69 + 8);
  swift_release(v15);
  if ((v68 & 1) != 0)
  {
    if (!v71)
      return 0;
  }
  else
  {
    if (v67 == v70)
      v72 = v71;
    else
      v72 = 1;
    if ((v72 & 1) != 0)
      return 0;
  }
  return 1;
}

Swift::Int sub_1000E6D38()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &qword_10036E6F0, (uint64_t)&unk_1002D2F38);
}

uint64_t sub_1000E6D54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_1003943B8, &qword_1003943C0, (uint64_t)sub_1000E5934, a2);
}

uint64_t sub_1000E6D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E5AF0(a1, a2, a3);
}

uint64_t sub_1000E6D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E5DF0(a1, a2, a3);
}

uint64_t sub_1000E6D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375020, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&unk_1002D2EB0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E6DE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003943B0, (uint64_t)qword_100383D20, (uint64_t)sub_1000E54F0, a1);
}

uint64_t sub_1000E6E04(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F558, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&unk_1002D2E38);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E6E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F558, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&unk_1002D2E38);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E6E98()
{
  return &unk_100353378;
}

unint64_t sub_1000E6EA4()
{
  return 0xD000000000000027;
}

uint64_t sub_1000E6EC0(uint64_t a1)
{
  return sub_1000F3144(a1, qword_100383D38, (uint64_t)"tunnel_end_point_data", 21);
}

uint64_t sub_1000E6ED8()
{
  return sub_100008BD0(&qword_1003943C8, (uint64_t)qword_100383D38, (uint64_t)sub_1000E6EC0);
}

uint64_t sub_1000E6EF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003943C8, (uint64_t)qword_100383D38, (uint64_t)sub_1000E6EC0, a1);
}

uint64_t sub_1000E6F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3348(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &qword_10036F558, (uint64_t)&unk_1002D2E38);
}

uint64_t sub_1000E6F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DCBA0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E6F68);
}

uint64_t sub_1000E6F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E4F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036E4F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E4F0);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  v15 = sub_10000FD38(&qword_10036F558, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&unk_1002D2E38);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

Swift::Int sub_1000E70E0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &qword_10036E6F8, (uint64_t)&unk_1002D30A0);
}

uint64_t sub_1000E70FC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DCE20(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a2);
}

uint64_t sub_1000E7108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375018, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&unk_1002D3018);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E7158@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003943C8, (uint64_t)qword_100383D38, (uint64_t)sub_1000E6EC0, a1);
}

uint64_t sub_1000E7174(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F570, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&unk_1002D2FA0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E71B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F570, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&unk_1002D2FA0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E7204()
{
  return &unk_100353388;
}

unint64_t sub_1000E7210()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000E722C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383D50);
  sub_10000E6A4(v0, (uint64_t)qword_100383D50);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "road_id";
  *(_QWORD *)(v9 + 8) = 7;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "start_latitude_deg";
  *(_QWORD *)(v13 + 8) = 18;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "start_longitude_deg";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "end_latitude_deg";
  *((_QWORD *)v17 + 1) = 16;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "end_longitude_deg";
  *(_QWORD *)(v18 + 8) = 17;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E7430()
{
  return sub_100008BD0(&qword_1003943D0, (uint64_t)qword_100383D50, (uint64_t)sub_1000E722C);
}

uint64_t sub_1000E744C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003943D0, (uint64_t)qword_100383D50, (uint64_t)sub_1000E722C, a1);
}

uint64_t sub_1000E7468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + *(int *)(v10 + 20), a2, a3);
          break;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 24);
          goto LABEL_5;
        case 3:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 28);
          goto LABEL_5;
        case 4:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 32);
          goto LABEL_5;
        case 5:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 36);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000E7580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v14);
    v15 = v5 + v10[9];
    if ((*(_BYTE *)(v15 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5, a2, a3, *(double *)v15);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000E76E0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, &qword_10036E700, (uint64_t)&unk_1002D3208);
}

uint64_t sub_1000E76FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E7468(a1, a2, a3);
}

uint64_t sub_1000E7710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E7580(a1, a2, a3);
}

uint64_t sub_1000E7724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375010, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&unk_1002D3180);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E7774@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003943D0, (uint64_t)qword_100383D50, (uint64_t)sub_1000E722C, a1);
}

uint64_t sub_1000E7790(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E708, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&unk_1002D3108);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E77D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E708, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&unk_1002D3108);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E7820()
{
  return &unk_100353398;
}

unint64_t sub_1000E782C()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_1000E7848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383D68);
  sub_10000E6A4(v0, (uint64_t)qword_100383D68);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "event_receipt_time";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "applicable_time";
  *(_QWORD *)(v13 + 8) = 15;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "route_type";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "step_type";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "route_hint_data";
  *(_QWORD *)(v18 + 8) = 15;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E7A4C()
{
  return sub_100008BD0(&qword_1003943D8, (uint64_t)qword_100383D68, (uint64_t)sub_1000E7848);
}

uint64_t sub_1000E7A68@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003943D8, (uint64_t)qword_100383D68, (uint64_t)sub_1000E7848, a1);
}

uint64_t sub_1000E7A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 24);
          goto LABEL_12;
        case 2:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 28);
LABEL_12:
          v15 = v3 + v14;
          v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v17 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v15, v16, v17, a2, a3);
          goto LABEL_6;
        case 3:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32);
          goto LABEL_5;
        case 4:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36);
LABEL_5:
          v11 = v3 + v10;
          v12 = sub_100149ED8();
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType, v12, a2, a3);
          goto LABEL_6;
        case 5:
          v18 = type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
          v19 = sub_10000FD38(&qword_10036E708, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&unk_1002D3108);
          v13 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v18, v19, a2, a3);
LABEL_6:
          v9 = v13;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000E7C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  result = sub_1000E7DD0(v3, a1, a2, a3);
  if (!v4)
  {
    sub_1000E7F44(v3, a1, a2, a3);
    v9 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
    v10 = v9;
    if (*(_BYTE *)(v3 + *(int *)(v9 + 32)) != 7)
    {
      v16 = *(_BYTE *)(v3 + *(int *)(v9 + 32));
      v11 = sub_100149ED8();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v16, 3, &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType, v11, a2, a3);
    }
    if (*(_BYTE *)(v3 + *(int *)(v10 + 36)) != 7)
    {
      v17 = *(_BYTE *)(v3 + *(int *)(v10 + 36));
      v12 = sub_100149ED8();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v17, 4, &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType, v12, a2, a3);
    }
    v13 = *(_QWORD *)v3;
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v14 = type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
      v15 = sub_10000FD38(&qword_10036E708, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&unk_1002D3108);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v13, 5, v14, v15, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000E7DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E7F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_1000E80BC()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &qword_10036E710, (uint64_t)&unk_1002D3370);
}

uint64_t sub_1000E80D8@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v8;

  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v4 = (char *)a2 + a1[6];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v6)((char *)a2 + a1[7], 1, 1, v5);
  v8 = a1[9];
  *((_BYTE *)a2 + a1[8]) = 7;
  *((_BYTE *)a2 + v8) = 7;
  return result;
}

uint64_t sub_1000E8178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E7A84(a1, a2, a3);
}

uint64_t sub_1000E818C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E7C28(a1, a2, a3);
}

uint64_t sub_1000E81A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375008, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&unk_1002D32E8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E81F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003943D8, (uint64_t)qword_100383D68, (uint64_t)sub_1000E7848, a1);
}

uint64_t sub_1000E820C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F598, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&unk_1002D3270);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E824C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F598, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&unk_1002D3270);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000E829C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383D80);
  sub_10000E6A4(v0, (uint64_t)qword_100383D80);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3140;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v8 = "RT_UNKNOWN";
  *(_QWORD *)(v8 + 8) = 10;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6 + v4) = 1;
  *(_QWORD *)v12 = "RT_PEDESTRIAN";
  *(_QWORD *)(v12 + 8) = 13;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "RT_VEHICLE";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "RT_TRANSIT";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "RT_BICYCLE";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "RT_FERRY";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "RT_RIDESHARE";
  *((_QWORD *)v22 + 1) = 12;
  v22[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E84FC()
{
  return sub_100008BD0(&qword_1003943E0, (uint64_t)qword_100383D80, (uint64_t)sub_1000E829C);
}

uint64_t sub_1000E8518@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003943E0, (uint64_t)qword_100383D80, (uint64_t)sub_1000E829C, a1);
}

uint64_t sub_1000E8534@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003943E0, (uint64_t)qword_100383D80, (uint64_t)sub_1000E829C, a1);
}

void *sub_1000E8550()
{
  return &unk_1003533A8;
}

unint64_t sub_1000E855C()
{
  return 0xD00000000000003ALL;
}

uint64_t sub_1000E8578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383D98);
  sub_10000E6A4(v0, (uint64_t)qword_100383D98);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v27 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1002C3130;
  v7 = v27 + v6;
  v8 = v27 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v27 + v6) = 1;
  *(_QWORD *)v8 = "event_receipt_time";
  *(_QWORD *)(v8 + 8) = 18;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "applicable_time";
  *(_QWORD *)(v12 + 8) = 15;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "client";
  *((_QWORD *)v14 + 1) = 6;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "transmission_state";
  *((_QWORD *)v16 + 1) = 18;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "sample_count";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "time_offset_sec";
  *((_QWORD *)v20 + 1) = 15;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "speed_mps";
  *((_QWORD *)v22 + 1) = 9;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "slip_detected";
  *((_QWORD *)v24 + 1) = 13;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "sensor_type";
  *(_QWORD *)(v25 + 8) = 11;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v27);
}

uint64_t sub_1000E8854()
{
  return sub_100008BD0(&qword_1003943E8, (uint64_t)qword_100383D98, (uint64_t)sub_1000E8578);
}

uint64_t sub_1000E8870@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003943E8, (uint64_t)qword_100383D98, (uint64_t)sub_1000E8578, a1);
}

uint64_t sub_1000E888C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  ValueMetadata *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 28);
          goto LABEL_7;
        case 2:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 32);
LABEL_7:
          v11 = v3 + v10;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v13 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          v14 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v11, v12, v13, a2, a3);
          goto LABEL_18;
        case 3:
          v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 36);
          goto LABEL_11;
        case 4:
          v16 = v3
              + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 40);
          v17 = sub_100149E94();
          v18 = v16;
          v19 = &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
          goto LABEL_17;
        case 5:
          v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 44);
LABEL_11:
          v14 = v9;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + v15, a2, a3);
          goto LABEL_18;
        case 6:
          v20 = v3;
          goto LABEL_14;
        case 7:
          v20 = v3 + 8;
LABEL_14:
          v14 = v9;
          dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)(v20, a2, a3);
          goto LABEL_18;
        case 8:
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          v14 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v21 + 48), a2, a3);
          goto LABEL_18;
        case 9:
          v22 = v3
              + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 52);
          v17 = sub_100149E50();
          v18 = v22;
          v19 = &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
LABEL_17:
          v14 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v18, v19, v17, a2, a3);
LABEL_18:
          v9 = v14;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000E8A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  char v13;

  result = sub_1000E8C7C((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    sub_1000E8DF0((uint64_t)v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, 2);
    v9 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
    v10 = v9;
    v11 = (unsigned int *)((char *)v3 + *(int *)(v9 + 36));
    if ((v11[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v11, 3, a2, a3);
    if (*((_BYTE *)v3 + *(int *)(v10 + 40)) != 5)
    {
      v13 = *((_BYTE *)v3 + *(int *)(v10 + 40));
      v12 = sub_100149E94();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v13, 4, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType, v12, a2, a3);
    }
    sub_1000E8F6C((uint64_t)v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, 5);
    if (*(_QWORD *)(*v3 + 16))
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    if (*(_QWORD *)(v3[1] + 16))
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    sub_1000E4F00((uint64_t)v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
    sub_1000E8FE8((uint64_t)v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000E8C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E8DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v18 = a6;
  v19 = a3;
  v20 = a4;
  v8 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a5(0);
  sub_10000E660(a1 + *(int *)(v15 + 32), (uint64_t)v10, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return sub_100015704((uint64_t)v10, &qword_10036E458);
  sub_100003E08((uint64_t)v10, (uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v17 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, v18, v11, v17, v19, v20);
  return sub_100004030((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E8F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t result;
  unsigned int *v11;

  result = a5(0);
  v11 = (unsigned int *)(a1 + *(int *)(result + 44));
  if ((v11[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v11, a6, a3, a4);
  return result;
}

uint64_t sub_1000E8FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  unint64_t v9;
  char v10;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 52));
  if (v8 != 2)
  {
    v10 = v8 & 1;
    v9 = sub_100149E50();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v10, 9, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType, v9, a3, a4);
  }
  return result;
}

Swift::Int sub_1000E9078()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &qword_10036E718, (uint64_t)&unk_1002D3500);
}

uint64_t sub_1000E9094@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v4 = (char *)a2 + a1[7];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v6)((char *)a2 + a1[8], 1, 1, v5);
  v8 = a1[10];
  v9 = (char *)a2 + a1[9];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  *((_BYTE *)a2 + v8) = 5;
  v10 = a1[12];
  v11 = (char *)a2 + a1[11];
  *(_DWORD *)v11 = 0;
  v11[4] = 1;
  *((_BYTE *)a2 + v10) = 2;
  *((_BYTE *)a2 + a1[13]) = 2;
  return result;
}

uint64_t sub_1000E9160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E888C(a1, a2, a3);
}

uint64_t sub_1000E9174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E8A78(a1, a2, a3);
}

uint64_t sub_1000E9188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100375000, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&unk_1002D3478);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E91D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003943E8, (uint64_t)qword_100383D98, (uint64_t)sub_1000E8578, a1);
}

uint64_t sub_1000E91F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F5B0, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&unk_1002D3400);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E9234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F5B0, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&unk_1002D3400);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000E9284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383DB0);
  sub_10000E6A4(v0, (uint64_t)qword_100383DB0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "TS_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "TS_PARK";
  *(_QWORD *)(v13 + 8) = 7;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v7 + v6 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "TS_REVERSE";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v7 + v6 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "TS_DRIVE";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v12();
  v18 = v7 + v6 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 4;
  *(_QWORD *)v18 = "TS_NEUTRAL";
  *(_QWORD *)(v18 + 8) = 10;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E9484()
{
  return sub_100008BD0(&qword_1003943F0, (uint64_t)qword_100383DB0, (uint64_t)sub_1000E9284);
}

uint64_t sub_1000E94A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003943F0, (uint64_t)qword_100383DB0, (uint64_t)sub_1000E9284, a1);
}

uint64_t sub_1000E94BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003943F0, (uint64_t)qword_100383DB0, (uint64_t)sub_1000E9284, a1);
}

uint64_t sub_1000E94D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383DC8);
  sub_10000E6A4(v0, (uint64_t)qword_100383DC8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 0;
  *(_QWORD *)v9 = "ST_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 1;
  *(_QWORD *)v13 = "ST_COMBINED";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E9628()
{
  return sub_100008BD0(&qword_1003943F8, (uint64_t)qword_100383DC8, (uint64_t)sub_1000E94D8);
}

uint64_t sub_1000E9644@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003943F8, (uint64_t)qword_100383DC8, (uint64_t)sub_1000E94D8, a1);
}

uint64_t sub_1000E9660@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003943F8, (uint64_t)qword_100383DC8, (uint64_t)sub_1000E94D8, a1);
}

void *sub_1000E967C()
{
  return &unk_1003533B8;
}

unint64_t sub_1000E9688()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000E96A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383DE0);
  sub_10000E6A4(v0, (uint64_t)qword_100383DE0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v8 = "previous";
  *(_QWORD *)(v8 + 8) = 8;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6 + v4) = 2;
  *(_QWORD *)v12 = "current";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "about_to_sleep";
  *((_QWORD *)v14 + 1) = 14;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "recently_woke";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E9870()
{
  return sub_100008BD0(&qword_100394400, (uint64_t)qword_100383DE0, (uint64_t)sub_1000E96A4);
}

uint64_t sub_1000E988C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394400, (uint64_t)qword_100383DE0, (uint64_t)sub_1000E96A4, a1);
}

uint64_t sub_1000E98A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 20);
          goto LABEL_5;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24);
LABEL_5:
          v10 = v3 + v9;
          v11 = sub_10014A758();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v10, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType, v11, a2, a3);
          break;
        case 3:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 28);
          goto LABEL_11;
        case 4:
          v12 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 32);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v12, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000E99D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  char v15;
  char v16;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 5)
  {
    v15 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v11 = sub_10014A758();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 1, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType, v11, a2, a3);
  }
  if (!v4)
  {
    if (*(_BYTE *)(v5 + v10[6]) != 5)
    {
      v16 = *(_BYTE *)(v5 + v10[6]);
      v12 = sub_10014A758();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v16, 2, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType, v12, a2, a3);
    }
    v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3, a2, a3);
    v14 = *(unsigned __int8 *)(v5 + v10[8]);
    if (v14 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 4, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000E9B34()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, &qword_10036E720, (uint64_t)&unk_1002D36B8);
}

uint64_t sub_1000E9B50@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 5;
  *(_BYTE *)(a2 + v5) = 5;
  v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  return result;
}

uint64_t sub_1000E9B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E98A8(a1, a2, a3);
}

uint64_t sub_1000E9BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E99D4(a1, a2, a3);
}

uint64_t sub_1000E9BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374FF8, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&unk_1002D3630);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E9C0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394400, (uint64_t)qword_100383DE0, (uint64_t)sub_1000E96A4, a1);
}

uint64_t sub_1000E9C28(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F5C8, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&unk_1002D35B8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E9C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F5C8, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&unk_1002D35B8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E9CBC()
{
  return &unk_1003533C8;
}

unint64_t sub_1000E9CC8()
{
  return 0xD000000000000020;
}

uint64_t sub_1000E9CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383DF8);
  sub_10000E6A4(v0, (uint64_t)qword_100383DF8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C30F0;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v8 = "level";
  *(_QWORD *)(v8 + 8) = 5;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6 + v4) = 2;
  *(_QWORD *)v12 = "charged";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "connected";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "charger_type";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "was_connected";
  *((_QWORD *)v18 + 1) = 13;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "charger_family";
  *((_QWORD *)v20 + 1) = 14;
  v20[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E9F28()
{
  return sub_100008BD0(&qword_100394408, (uint64_t)qword_100383DF8, (uint64_t)sub_1000E9CE4);
}

uint64_t sub_1000E9F44@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394408, (uint64_t)qword_100383DF8, (uint64_t)sub_1000E9CE4, a1);
}

uint64_t sub_1000E9F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v12 + 20), a2, a3);
          goto LABEL_6;
        case 2:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 24);
          goto LABEL_5;
        case 3:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 28);
          goto LABEL_5;
        case 4:
          v13 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 32);
          v14 = sub_10014A714();
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v13, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType, v14, a2, a3);
          goto LABEL_6;
        case 5:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 36);
LABEL_5:
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v10, a2, a3);
          goto LABEL_6;
        case 6:
          v15 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v15 + 40), a2, a3);
LABEL_6:
          v9 = v11;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000EA0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  char v15;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v11);
  if (!v4)
  {
    v12 = *(unsigned __int8 *)(v5 + v10[6]);
    if (v12 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2, a2, a3);
    v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3, a2, a3);
    if (*(_BYTE *)(v5 + v10[8]) != 5)
    {
      v15 = *(_BYTE *)(v5 + v10[8]);
      v14 = sub_10014A714();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 4, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType, v14, a2, a3);
    }
    sub_1000EA258(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
    sub_1000EA2CC(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000EA258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  int v9;

  result = a5(0);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(result + 36));
  if (v9 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v9 & 1, 5, a3, a4);
  return result;
}

uint64_t sub_1000EA2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 40));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v8, 6, a3, a4);
  return result;
}

Swift::Int sub_1000EA344()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Battery, &qword_10036E728, (uint64_t)&unk_1002D3820);
}

uint64_t sub_1000EA360@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a2 + v5) = 2;
  v7 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v7) = 5;
  v8 = a1[10];
  *(_BYTE *)(a2 + a1[9]) = 2;
  v9 = a2 + v8;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_1000EA3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E9F60(a1, a2, a3);
}

uint64_t sub_1000EA3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EA0C8(a1, a2, a3);
}

uint64_t sub_1000EA3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374FF0, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&unk_1002D3798);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EA43C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394408, (uint64_t)qword_100383DF8, (uint64_t)sub_1000E9CE4, a1);
}

uint64_t sub_1000EA458(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F5E0, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&unk_1002D3720);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EA498(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F5E0, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&unk_1002D3720);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EA4E8()
{
  return &unk_1003533D8;
}

unint64_t sub_1000EA4F4()
{
  return 0xD000000000000025;
}

uint64_t sub_1000EA510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383E10);
  sub_10000E6A4(v0, (uint64_t)qword_100383E10);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v35 = swift_allocObject(v1, v6 + 13 * v4, v5 | 7);
  *(_OWORD *)(v35 + 16) = xmmword_1002C40C0;
  v7 = v35 + v6;
  v8 = v35 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v35 + v6) = 1;
  *(_QWORD *)v8 = "event_receipt_time";
  *(_QWORD *)(v8 + 8) = 18;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "client";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "notification_data";
  *((_QWORD *)v14 + 1) = 17;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "reachability";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "battery";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "airplane_mode";
  *((_QWORD *)v20 + 1) = 13;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "display_on";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "lock_screen";
  *((_QWORD *)v24 + 1) = 11;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "is_battery_saver_mode_enabled";
  *(_QWORD *)(v25 + 8) = 29;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "push_service_connected";
  *((_QWORD *)v27 + 1) = 22;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "wireless_modem_clients";
  *((_QWORD *)v29 + 1) = 22;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v7 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "thermal_level";
  *((_QWORD *)v31 + 1) = 13;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v7 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "restricted_mode";
  *((_QWORD *)v33 + 1) = 15;
  v33[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v35);
}

uint64_t sub_1000EA8B8()
{
  return sub_100008BD0(&qword_100394410, (uint64_t)qword_100383E10, (uint64_t)sub_1000EA510);
}

uint64_t sub_1000EA8D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394410, (uint64_t)qword_100383E10, (uint64_t)sub_1000EA510, a1);
}

uint64_t sub_1000EA8F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData) = 20;
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected) = 2;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode) = 2;
  qword_100394420 = v1;
  return result;
}

uint64_t sub_1000EAA5C()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &qword_10036E458);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, &qword_10036E4F8);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, &qword_10036E500);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000EAAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10010EB54(v13);
    swift_release(v10);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v32, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v21 = (unint64_t *)&qword_10036E1E0;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v23 = &unk_1002CF5A8;
          goto LABEL_12;
        case 2:
          v24 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
          goto LABEL_20;
        case 3:
          v25 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData, v32, 33, 0);
          v26 = sub_100149E0C();
          v27 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v25, &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType, v26, a2, a3);
          goto LABEL_23;
        case 4:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, v32, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
          v21 = &qword_10036F5C8;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState;
          v23 = &unk_1002D35B8;
          goto LABEL_12;
        case 5:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, v32, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          v21 = &qword_10036F5E0;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_Battery;
          v23 = &unk_1002D3720;
LABEL_12:
          v28 = sub_10000FD38(v21, v22, (uint64_t)v23);
          v27 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v28, a2, a3);
          goto LABEL_23;
        case 6:
          v29 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode;
          goto LABEL_22;
        case 7:
          v29 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn;
          goto LABEL_22;
        case 8:
          v29 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen;
          goto LABEL_22;
        case 9:
          v29 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled;
          goto LABEL_22;
        case 10:
          v29 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected;
          goto LABEL_22;
        case 11:
          v24 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
          goto LABEL_20;
        case 12:
          v24 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
LABEL_20:
          v30 = v15 + v24;
          swift_beginAccess(v15 + v24, v32, 33, 0);
          v27 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v30, a2, a3);
          goto LABEL_23;
        case 13:
          v29 = OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode;
LABEL_22:
          v31 = v15 + v29;
          swift_beginAccess(v15 + v29, v32, 33, 0);
          v27 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v31, a2, a3);
LABEL_23:
          v5 = v27;
          swift_endAccess(v32);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_1000EAE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];
  _BYTE v37[24];
  _BYTE v38[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20));
  v10 = swift_retain(v9);
  sub_1000EB200(v10, a1, a2, a3);
  if (v4)
    return swift_release(v9);
  v12 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, &v29, 0, 0);
  if ((v12[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v12, 2, a2, a3);
  v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData, v30, 0, 0);
  if (*v13 != 20)
  {
    v38[0] = *v13;
    v14 = sub_100149E0C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v38, 3, &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType, v14, a2, a3);
  }
  sub_1000EB38C(v9, a1, a2, a3);
  sub_1000EB518(v9, a1, a2, a3);
  v15 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode, v38, 0, 0);
  v16 = *v15;
  if (v16 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v16 & 1, 6, a2, a3);
  v17 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn, v37, 0, 0);
  v18 = *v17;
  if (v18 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v18 & 1, 7, a2, a3);
  v19 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen, v36, 0, 0);
  v20 = *v19;
  if (v20 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v20 & 1, 8, a2, a3);
  v21 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled, v35, 0, 0);
  v22 = *v21;
  if (v22 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v22 & 1, 9, a2, a3);
  v23 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected, v34, 0, 0);
  v24 = *v23;
  if (v24 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v24 & 1, 10, a2, a3);
  v25 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients, v33, 0, 0);
  if ((v25[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v25, 11, a2, a3);
  v26 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel, v32, 0, 0);
  if ((v26[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v26, 12, a2, a3);
  v27 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode, v31, 0, 0);
  v28 = *v27;
  if (v28 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v28 & 1, 13, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000EB200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000EB38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E4F8);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E4F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E4F8);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  v15 = sub_10000FD38(&qword_10036F5C8, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&unk_1002D35B8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000EB518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E500);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E500);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E500);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  v15 = sub_10000FD38(&qword_10036F5E0, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&unk_1002D3720);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000EB6A4(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, sub_1000EB6CC) & 1;
}

uint64_t sub_1000EB6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  char v42;
  int *v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  unsigned __int8 *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unsigned __int8 *v76;
  int v77;
  unsigned __int8 *v78;
  int v79;
  unsigned __int8 *v80;
  int v81;
  unsigned __int8 *v82;
  int v83;
  unsigned __int8 *v84;
  int v85;
  unsigned __int8 *v86;
  int v87;
  unsigned __int8 *v88;
  int v89;
  unsigned __int8 *v90;
  int v91;
  unsigned __int8 *v92;
  int v93;
  unsigned __int8 *v94;
  int v95;
  int *v96;
  int v97;
  char v98;
  uint64_t v99;
  int *v100;
  int v101;
  char v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  unsigned __int8 *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144[24];
  char v145[24];
  char v146[24];
  char v147[24];
  char v148[24];
  char v149[24];
  char v150[32];

  v124 = a2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v111 = *(_QWORD *)(v3 - 8);
  v112 = v3;
  __chkstk_darwin(v3);
  v108 = (uint64_t)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_1000039AC(&qword_1003753C8);
  __chkstk_darwin(v110);
  v113 = (uint64_t)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036E500);
  v7 = __chkstk_darwin(v6);
  v121 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v114 = (uint64_t)&v108 - v9;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  v116 = *(_QWORD *)(v10 - 8);
  v117 = v10;
  __chkstk_darwin(v10);
  v109 = (uint64_t)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_1000039AC(&qword_1003753D0);
  __chkstk_darwin(v115);
  v118 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000039AC(&qword_10036E4F8);
  v14 = __chkstk_darwin(v13);
  v120 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v122 = (uint64_t)&v108 - v16;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v119 = (uint64_t)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v20);
  v22 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000039AC(&qword_10036E458);
  v24 = __chkstk_darwin(v23);
  v123 = (uint64_t)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v108 - v26;
  v28 = a1;
  v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v29, v150, 0, 0);
  sub_10000E660(v29, (uint64_t)v27, &qword_10036E458);
  v30 = v124;
  v31 = v124
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v124+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v149, 0, 0);
  v32 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_10000E660((uint64_t)v27, (uint64_t)v22, &qword_10036E458);
  sub_10000E660(v31, v32, &qword_10036E458);
  v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v33((uint64_t)v22, 1, v17) == 1)
  {
    swift_retain(v28);
    swift_retain(v30);
    sub_100015704((uint64_t)v27, &qword_10036E458);
    v34 = v33(v32, 1, v17);
    v35 = v30;
    v36 = v28;
    if (v34 == 1)
    {
      sub_100015704((uint64_t)v22, &qword_10036E458);
      goto LABEL_11;
    }
LABEL_6:
    v38 = &qword_100375338;
    v39 = (uint64_t)v22;
LABEL_7:
    sub_100015704(v39, v38);
    goto LABEL_8;
  }
  v36 = v28;
  v37 = v123;
  sub_10000E660((uint64_t)v22, v123, &qword_10036E458);
  if (v33(v32, 1, v17) == 1)
  {
    swift_retain(v28);
    v35 = v30;
    swift_retain(v30);
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100004030(v37, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v41 = v119;
  sub_100003E08(v32, v119, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain(v36);
  v35 = v30;
  swift_retain(v30);
  v42 = sub_1000656F0(v37, v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v27, &qword_10036E458);
  sub_100004030(v37, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  if ((v42 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v43 = (int *)(v36
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess(v36+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v148, 0, 0);
  v44 = *v43;
  v45 = *((_BYTE *)v43 + 4);
  v46 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v35+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v147, 0, 0);
  if ((v45 & 1) != 0)
  {
    v48 = (uint64_t)v120;
    v47 = (uint64_t)v121;
    v49 = v122;
    if ((*(_BYTE *)(v46 + 4) & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v48 = (uint64_t)v120;
    v47 = (uint64_t)v121;
    v49 = v122;
    if ((*(_BYTE *)(v46 + 4) & 1) != 0 || v44 != *(_DWORD *)v46)
      goto LABEL_8;
  }
  v50 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess(v36+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData, v146, 0, 0);
  v51 = *v50;
  v52 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess(v35+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData, v145, 0, 0);
  v53 = *v52;
  if (v51 == 20)
  {
    if (v53 != 20)
      goto LABEL_8;
  }
  else if (v53 == 20 || v51 != v53)
  {
    goto LABEL_8;
  }
  v54 = v36
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess(v36+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, v144, 0, 0);
  sub_10000E660(v54, v49, &qword_10036E4F8);
  v55 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess(v35+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, &v143, 0, 0);
  v56 = v118;
  v57 = v118 + *(int *)(v115 + 48);
  sub_10000E660(v49, v118, &qword_10036E4F8);
  v58 = v55;
  v59 = v56;
  sub_10000E660(v58, v57, &qword_10036E4F8);
  v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  v61 = v56;
  v62 = v117;
  if (v60(v61, 1, v117) == 1)
  {
    sub_100015704(v49, &qword_10036E4F8);
    if (v60(v57, 1, v62) == 1)
    {
      sub_100015704(v59, &qword_10036E4F8);
      goto LABEL_28;
    }
LABEL_26:
    v38 = &qword_1003753D0;
LABEL_34:
    v39 = v59;
    goto LABEL_7;
  }
  sub_10000E660(v59, v48, &qword_10036E4F8);
  if (v60(v57, 1, v62) == 1)
  {
    sub_100015704(v122, &qword_10036E4F8);
    sub_100004030(v48, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
    goto LABEL_26;
  }
  v63 = v109;
  sub_100003E08(v57, v109, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  v64 = sub_100117B34(v48, v63);
  sub_100004030(v63, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  sub_100015704(v122, &qword_10036E4F8);
  sub_100004030(v48, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  sub_100015704(v59, &qword_10036E4F8);
  if ((v64 & 1) == 0)
    goto LABEL_8;
LABEL_28:
  v65 = v36
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess(v36+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, &v142, 0, 0);
  v66 = v114;
  sub_10000E660(v65, v114, &qword_10036E500);
  v67 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess(v35+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, &v141, 0, 0);
  v68 = v113;
  v69 = v113 + *(int *)(v110 + 48);
  sub_10000E660(v66, v113, &qword_10036E500);
  v70 = v67;
  v59 = v68;
  sub_10000E660(v70, v69, &qword_10036E500);
  v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
  v72 = v68;
  v73 = v112;
  if (v71(v72, 1, v112) == 1)
  {
    sub_100015704(v66, &qword_10036E500);
    if (v71(v69, 1, v73) == 1)
    {
      sub_100015704(v59, &qword_10036E500);
      goto LABEL_36;
    }
    goto LABEL_33;
  }
  sub_10000E660(v59, v47, &qword_10036E500);
  if (v71(v69, 1, v73) == 1)
  {
    sub_100015704(v114, &qword_10036E500);
    sub_100004030(v47, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
LABEL_33:
    v38 = &qword_1003753C8;
    goto LABEL_34;
  }
  v74 = v108;
  sub_100003E08(v69, v108, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  v75 = sub_10011C3A4(v47, v74);
  sub_100004030(v74, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  sub_100015704(v114, &qword_10036E500);
  sub_100004030(v47, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  sub_100015704(v59, &qword_10036E500);
  if ((v75 & 1) == 0)
    goto LABEL_8;
LABEL_36:
  v76 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess(v36+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode, &v140, 0, 0);
  v77 = *v76;
  v78 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess(v35+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode, &v139, 0, 0);
  v79 = *v78;
  if (v77 == 2)
  {
    if (v79 != 2)
      goto LABEL_8;
  }
  else if (v79 == 2 || ((((v79 & 1) == 0) ^ v77) & 1) == 0)
  {
    goto LABEL_8;
  }
  v80 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess(v36+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn, &v138, 0, 0);
  v81 = *v80;
  v82 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess(v35+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn, &v137, 0, 0);
  v83 = *v82;
  if (v81 == 2)
  {
    if (v83 != 2)
      goto LABEL_8;
  }
  else if (v83 == 2 || ((((v83 & 1) == 0) ^ v81) & 1) == 0)
  {
    goto LABEL_8;
  }
  v84 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess(v36+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen, &v136, 0, 0);
  v85 = *v84;
  v86 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess(v35+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen, &v135, 0, 0);
  v87 = *v86;
  if (v85 == 2)
  {
    if (v87 != 2)
      goto LABEL_8;
  }
  else if (v87 == 2 || ((((v87 & 1) == 0) ^ v85) & 1) == 0)
  {
    goto LABEL_8;
  }
  v88 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess(v36+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled, &v134, 0, 0);
  v89 = *v88;
  v90 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess(v35+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled, &v133, 0, 0);
  v91 = *v90;
  if (v89 == 2)
  {
    if (v91 != 2)
      goto LABEL_8;
  }
  else if (v91 == 2 || ((((v91 & 1) == 0) ^ v89) & 1) == 0)
  {
    goto LABEL_8;
  }
  v92 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess(v36+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected, &v132, 0, 0);
  v93 = *v92;
  v94 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess(v35+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected, &v131, 0, 0);
  v95 = *v94;
  if (v93 == 2)
  {
    if (v95 == 2)
      goto LABEL_61;
LABEL_8:
    swift_release(v36);
    swift_release(v35);
    return 0;
  }
  if (v95 == 2 || ((((v95 & 1) == 0) ^ v93) & 1) == 0)
    goto LABEL_8;
LABEL_61:
  v96 = (int *)(v36
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
  swift_beginAccess(v36+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients, &v130, 0, 0);
  v97 = *v96;
  v98 = *((_BYTE *)v96 + 4);
  v99 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess(v35+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients, &v129, 0, 0);
  if ((v98 & 1) != 0)
  {
    if ((*(_BYTE *)(v99 + 4) & 1) == 0)
      goto LABEL_8;
  }
  else if ((*(_BYTE *)(v99 + 4) & 1) != 0 || v97 != *(_DWORD *)v99)
  {
    goto LABEL_8;
  }
  v100 = (int *)(v36
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
  swift_beginAccess(v36+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel, &v128, 0, 0);
  v101 = *v100;
  v102 = *((_BYTE *)v100 + 4);
  v103 = v35
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess(v35+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel, &v127, 0, 0);
  if ((v102 & 1) != 0)
  {
    if ((*(_BYTE *)(v103 + 4) & 1) == 0)
      goto LABEL_8;
  }
  else if ((*(_BYTE *)(v103 + 4) & 1) != 0 || v101 != *(_DWORD *)v103)
  {
    goto LABEL_8;
  }
  v104 = (unsigned __int8 *)(v36
                           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess(v36+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode, &v126, 0, 0);
  v105 = *v104;
  swift_release(v36);
  v106 = (unsigned __int8 *)(v35
                           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess(v35+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode, &v125, 0, 0);
  v107 = *v106;
  swift_release(v35);
  if (v105 == 2)
  {
    if (v107 != 2)
      return 0;
  }
  else if (v107 == 2 || ((((v107 & 1) == 0) ^ v105) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

Swift::Int sub_1000EC368()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &qword_10036E730, (uint64_t)&unk_1002D3988);
}

uint64_t sub_1000EC384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100394418, &qword_100394420, (uint64_t)sub_1000EA8F0, a2);
}

uint64_t sub_1000EC3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EAAC4(a1, a2, a3);
}

uint64_t sub_1000EC3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EAE0C(a1, a2, a3);
}

uint64_t sub_1000EC3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374FE8, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&unk_1002D3900);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EC418@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394410, (uint64_t)qword_100383E10, (uint64_t)sub_1000EA510, a1);
}

uint64_t sub_1000EC434(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F5F8, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&unk_1002D3888);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EC474(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F5F8, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&unk_1002D3888);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000EC4C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v48;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383E28);
  sub_10000E6A4(v0, (uint64_t)qword_100383E28);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v48 = swift_allocObject(v1, v6 + 20 * v4, v5 | 7);
  *(_OWORD *)(v48 + 16) = xmmword_1002CAB50;
  v7 = v48 + v6;
  v8 = v48 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v48 + v6) = 0;
  *(_QWORD *)v8 = "NT_UNKNOWN";
  *(_QWORD *)(v8 + 8) = 10;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v48 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 1;
  *(_QWORD *)v12 = "NT_INIT";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v48 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "NT_SHUTDOWN";
  *((_QWORD *)v14 + 1) = 11;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v48 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "NT_SLEEP";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v48 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "NT_WAKE";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v48 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "NT_LINGER";
  *((_QWORD *)v20 + 1) = 9;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v48 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "NT_PENALTY_FREE";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v48 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 7;
  *(_QWORD *)v24 = "NT_REACHABILITY";
  *((_QWORD *)v24 + 1) = 15;
  v24[16] = 2;
  v11();
  v25 = v48 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 8;
  *(_QWORD *)v25 = "NT_BATTERY";
  *(_QWORD *)(v25 + 8) = 10;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v48 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 9;
  *(_QWORD *)v27 = "NT_AIRPLANE_MODE";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v48 + v6 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 10;
  *(_QWORD *)v29 = "NT_MIGRATION";
  *((_QWORD *)v29 + 1) = 12;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v48 + v6 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 11;
  *(_QWORD *)v31 = "NT_DISPLAY";
  *((_QWORD *)v31 + 1) = 10;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v48 + v6 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 12;
  *(_QWORD *)v33 = "NT_LOCKSCREEN";
  *((_QWORD *)v33 + 1) = 13;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v48 + v6 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 13;
  *(_QWORD *)v35 = "NT_PUSH_SERVICE";
  *((_QWORD *)v35 + 1) = 15;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v48 + v6 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 14;
  *(_QWORD *)v37 = "NT_WIRELESS_MODEM";
  *((_QWORD *)v37 + 1) = 17;
  v37[16] = 2;
  v11();
  v38 = (_QWORD *)(v48 + v6 + 15 * v4);
  v39 = (char *)v38 + *(int *)(v2 + 48);
  *v38 = 15;
  *(_QWORD *)v39 = "NT_THERMAL";
  *((_QWORD *)v39 + 1) = 10;
  v39[16] = 2;
  v11();
  v40 = v48 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 16 * v4) = 16;
  *(_QWORD *)v40 = "NT_RESTRICTED_POWER_MODE";
  *(_QWORD *)(v40 + 8) = 24;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  v41 = (_QWORD *)(v48 + v6 + 17 * v4);
  v42 = (char *)v41 + *(int *)(v2 + 48);
  *v41 = 17;
  *(_QWORD *)v42 = "NT_BATTERY_SAVER_MODE";
  *((_QWORD *)v42 + 1) = 21;
  v42[16] = 2;
  v11();
  v43 = (_QWORD *)(v48 + v6 + 18 * v4);
  v44 = (char *)v43 + *(int *)(v2 + 48);
  *v43 = 18;
  *(_QWORD *)v44 = "NT_METRIC_HEARTBEAT";
  *((_QWORD *)v44 + 1) = 19;
  v44[16] = 2;
  v11();
  v45 = (_QWORD *)(v48 + v6 + 19 * v4);
  v46 = (char *)v45 + *(int *)(v2 + 48);
  *v45 = 19;
  *(_QWORD *)v46 = "NT_BOOT_AFTER_UNCLEAN_SHUTDOWN";
  *((_QWORD *)v46 + 1) = 30;
  v46[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v48);
}

uint64_t sub_1000EC9D0()
{
  return sub_100008BD0(&qword_100394428, (uint64_t)qword_100383E28, (uint64_t)sub_1000EC4C4);
}

uint64_t sub_1000EC9EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394428, (uint64_t)qword_100383E28, (uint64_t)sub_1000EC4C4, a1);
}

uint64_t sub_1000ECA08@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394428, (uint64_t)qword_100383E28, (uint64_t)sub_1000EC4C4, a1);
}

void *sub_1000ECA24()
{
  return &unk_1003533E8;
}

unint64_t sub_1000ECA30()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000ECA4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383E40);
  sub_10000E6A4(v0, (uint64_t)qword_100383E40);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v8 = "applicable_time";
  *(_QWORD *)(v8 + 8) = 15;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6 + v4) = 2;
  *(_QWORD *)v12 = "coarse_signal_environment";
  *(_QWORD *)(v12 + 8) = 25;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "high_resolution_signal_environment";
  *((_QWORD *)v14 + 1) = 34;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "client";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000ECC14()
{
  return sub_100008BD0(&qword_100394430, (uint64_t)qword_100383E40, (uint64_t)sub_1000ECA4C);
}

uint64_t sub_1000ECC30@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394430, (uint64_t)qword_100383E40, (uint64_t)sub_1000ECA4C, a1);
}

uint64_t sub_1000ECC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 20);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v12 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
          goto LABEL_5;
        case 2:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24);
          goto LABEL_11;
        case 3:
          v14 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28);
LABEL_11:
          v15 = v3 + v14;
          v16 = sub_100149DC8();
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v15, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType, v16, a2, a3);
          goto LABEL_5;
        case 4:
          v17 = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v17 + 32), a2, a3);
LABEL_5:
          v9 = v13;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000ECDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  char v15;
  char v16;

  v5 = v3;
  result = sub_100105B68(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
  if (!v4)
  {
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
    v11 = v10;
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 8)
    {
      v15 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      v12 = sub_100149DC8();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 2, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType, v12, a2, a3);
    }
    if (*(_BYTE *)(v5 + *(int *)(v11 + 28)) != 8)
    {
      v16 = *(_BYTE *)(v5 + *(int *)(v11 + 28));
      v13 = sub_100149DC8();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v16, 3, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType, v13, a2, a3);
    }
    v14 = (unsigned int *)(v5 + *(int *)(v11 + 32));
    if ((v14[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v14, 4, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000ECF0C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, &qword_10036E738, (uint64_t)&unk_1002D3B18);
}

uint64_t sub_1000ECF28@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  *(_BYTE *)(a2 + a1[6]) = 8;
  *(_BYTE *)(a2 + v7) = 8;
  v8 = a2 + a1[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_1000ECFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ECC4C(a1, a2, a3);
}

uint64_t sub_1000ECFB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ECDBC(a1, a2, a3);
}

uint64_t sub_1000ECFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374FE0, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&unk_1002D3A90);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000ED01C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394430, (uint64_t)qword_100383E40, (uint64_t)sub_1000ECA4C, a1);
}

uint64_t sub_1000ED038(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F610, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&unk_1002D3A18);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000ED078(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F610, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&unk_1002D3A18);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000ED0C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383E58);
  sub_10000E6A4(v0, (uint64_t)qword_100383E58);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40B0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = -1;
  *(_QWORD *)v9 = "SE_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 0;
  *(_QWORD *)v13 = "SE_UNAVAILABLE";
  *(_QWORD *)(v13 + 8) = 14;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 1;
  *(_QWORD *)v15 = "SE_RURAL";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 2;
  *(_QWORD *)v17 = "SE_URBAN";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 3;
  *(_QWORD *)v19 = "SE_DENSE_URBAN";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 4;
  *(_QWORD *)v21 = "SE_DENSE_URBAN_CANYON";
  *((_QWORD *)v21 + 1) = 21;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 5;
  *(_QWORD *)v23 = "SE_MARINE";
  *((_QWORD *)v23 + 1) = 9;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 6;
  *(_QWORD *)v25 = "SE_FOLIAGE";
  *((_QWORD *)v25 + 1) = 10;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000ED370()
{
  return sub_100008BD0(&qword_100394438, (uint64_t)qword_100383E58, (uint64_t)sub_1000ED0C8);
}

uint64_t sub_1000ED38C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394438, (uint64_t)qword_100383E58, (uint64_t)sub_1000ED0C8, a1);
}

uint64_t sub_1000ED3A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394438, (uint64_t)qword_100383E58, (uint64_t)sub_1000ED0C8, a1);
}

void *sub_1000ED3C4()
{
  return &unk_1003533F8;
}

unint64_t sub_1000ED3D0()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_1000ED3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383E70);
  sub_10000E6A4(v0, (uint64_t)qword_100383E70);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "type";
  *(_QWORD *)(v9 + 8) = 4;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "fidelity_level";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000ED544()
{
  return sub_100008BD0(&qword_100394440, (uint64_t)qword_100383E70, (uint64_t)sub_1000ED3EC);
}

uint64_t sub_1000ED560@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394440, (uint64_t)qword_100383E70, (uint64_t)sub_1000ED3EC, a1);
}

uint64_t sub_1000ED57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  ValueMetadata *v12;
  uint64_t v13;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        v13 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20);
        v10 = sub_100149DC8();
        v11 = v13;
        v12 = &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 24);
    v10 = sub_10014A6D0();
    v11 = v9;
    v12 = &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
LABEL_5:
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1000ED670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  v10 = result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 8)
  {
    v13 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v11 = sub_100149DC8();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v13, 1, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType, v11, a2, a3);
  }
  if (!v4)
  {
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 4)
    {
      v14 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      v12 = sub_10014A6D0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v14, 2, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel, v12, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000ED76C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, &qword_10036E740, (uint64_t)&unk_1002D3CA8);
}

uint64_t sub_1000ED788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001046DC(a1, 8, 4, a2);
}

uint64_t sub_1000ED794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ED57C(a1, a2, a3);
}

uint64_t sub_1000ED7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ED670(a1, a2, a3);
}

uint64_t sub_1000ED7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374FD8, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&unk_1002D3C20);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000ED80C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394440, (uint64_t)qword_100383E70, (uint64_t)sub_1000ED3EC, a1);
}

uint64_t sub_1000ED828(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F628, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&unk_1002D3BA8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000ED868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F628, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&unk_1002D3BA8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000ED8B8()
{
  return &unk_100353408;
}

unint64_t sub_1000ED8C4()
{
  return 0xD000000000000022;
}

uint64_t sub_1000ED8E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383E88);
  sub_10000E6A4(v0, (uint64_t)qword_100383E88);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "applicable_time";
  *(_QWORD *)(v9 + 8) = 15;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "x_uT";
  *(_QWORD *)(v13 + 8) = 4;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "y_uT";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "z_uT";
  *((_QWORD *)v17 + 1) = 4;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000EDA9C()
{
  return sub_100008BD0(&qword_100394448, (uint64_t)qword_100383E88, (uint64_t)sub_1000ED8E0);
}

uint64_t sub_1000EDAB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394448, (uint64_t)qword_100383E88, (uint64_t)sub_1000ED8E0, a1);
}

uint64_t sub_1000EDAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EDAF0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000EDAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v4 + *(int *)(a4(0) + 20);
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v14 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v12, v13, v14, a2, a3);
          break;
        case 2:
          v11 = *(int *)(a4(0) + 24);
          goto LABEL_5;
        case 3:
          v11 = *(int *)(a4(0) + 28);
          goto LABEL_5;
        case 4:
          v11 = *(int *)(a4(0) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v4 + v11, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000EDC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C6E78(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000EDC60(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return sub_10011C9CC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MagSample) & 1;
}

Swift::Int sub_1000EDC80()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &qword_10036E748, (uint64_t)&unk_1002D3E10);
}

uint64_t sub_1000EDC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374FD0, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&unk_1002D3D88);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EDCEC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394448, (uint64_t)qword_100383E88, (uint64_t)sub_1000ED8E0, a1);
}

uint64_t sub_1000EDD08(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E750, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&unk_1002D3D10);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EDD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E750, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&unk_1002D3D10);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EDD98()
{
  return &unk_100353418;
}

unint64_t sub_1000EDDA4()
{
  return 0xD000000000000025;
}

uint64_t sub_1000EDDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383EA0);
  sub_10000E6A4(v0, (uint64_t)qword_100383EA0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "event_receipt_time";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "sample";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000EDF18()
{
  return sub_100008BD0(&qword_100394450, (uint64_t)qword_100383EA0, (uint64_t)sub_1000EDDC0);
}

uint64_t sub_1000EDF34@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394450, (uint64_t)qword_100383EA0, (uint64_t)sub_1000EDDC0, a1);
}

uint64_t sub_1000EDF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCC40(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &qword_10036E750, (uint64_t)&unk_1002D3D10);
}

uint64_t sub_1000EDF84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1000EE06C(v3, a1, a2, a3);
  if (!v4)
  {
    v9 = *(_QWORD *)v3;
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0);
      v11 = sub_10000FD38(&qword_10036E750, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&unk_1002D3D10);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2, v10, v11, a2, a3);
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000EE06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000EE1E0(uint64_t *a1, uint64_t *a2)
{
  return sub_100117738(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_MagSample) & 1;
}

Swift::Int sub_1000EE208()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, &qword_10036E758, (uint64_t)&unk_1002D3F78);
}

uint64_t sub_1000EE224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EDF84(a1, a2, a3);
}

uint64_t sub_1000EE238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374FC8, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&unk_1002D3EF0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EE288@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394450, (uint64_t)qword_100383EA0, (uint64_t)sub_1000EDDC0, a1);
}

uint64_t sub_1000EE2A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F650, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&unk_1002D3E78);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EE2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F650, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&unk_1002D3E78);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EE334()
{
  return &unk_100353428;
}

unint64_t sub_1000EE340()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000EE35C(uint64_t a1)
{
  return sub_1000FB324(a1, qword_100383EB8, (uint64_t)"event_receipt_time", 18, (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t sub_1000EE37C()
{
  return sub_100008BD0(&qword_100394458, (uint64_t)qword_100383EB8, (uint64_t)sub_1000EE35C);
}

uint64_t sub_1000EE398@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394458, (uint64_t)qword_100383EB8, (uint64_t)sub_1000EE35C, a1);
}

uint64_t sub_1000EE3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FB498(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (unint64_t *)&qword_10036E1E0, (uint64_t)&unk_1002CF5A8);
}

uint64_t sub_1000EE3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EE404(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t sub_1000EE404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  result = sub_100105B68(v4, a1, a2, a3, a4);
  if (!v5)
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  return result;
}

uint64_t sub_1000EE45C(uint64_t a1, uint64_t a2)
{
  return sub_10011C5F4(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Reset) & 1;
}

Swift::Int sub_1000EE47C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Reset, &qword_10036E760, (uint64_t)&unk_1002D40E0);
}

uint64_t sub_1000EE498@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v6 = a3 + *(int *)(a1 + 20);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_1000EE4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374FC0, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&unk_1002D4058);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EE540@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394458, (uint64_t)qword_100383EB8, (uint64_t)sub_1000EE35C, a1);
}

uint64_t sub_1000EE55C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F668, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&unk_1002D3FE0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EE59C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F668, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&unk_1002D3FE0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EE5EC()
{
  return &unk_100353438;
}

unint64_t sub_1000EE5F8()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000EE614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383ED0);
  sub_10000E6A4(v0, (uint64_t)qword_100383ED0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "calibrated";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "lower_bound";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "upper_bound";
  *(_QWORD *)(v14 + 8) = 11;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000EE7B0()
{
  return sub_100008BD0(&qword_100394460, (uint64_t)qword_100383ED0, (uint64_t)sub_1000EE614);
}

uint64_t sub_1000EE7CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394460, (uint64_t)qword_100383ED0, (uint64_t)sub_1000EE614, a1);
}

uint64_t sub_1000EE7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D4338(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000EE804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005A7A0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000EE820(uint64_t a1, uint64_t a2)
{
  return sub_1000656F0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace) & 1;
}

Swift::Int sub_1000EE840()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, &qword_10036E768, (uint64_t)&unk_1002D4248);
}

uint64_t sub_1000EE85C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374FB8, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&unk_1002D41C0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EE8AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394460, (uint64_t)qword_100383ED0, (uint64_t)sub_1000EE614, a1);
}

uint64_t sub_1000EE8C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F680, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&unk_1002D4148);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EE908(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F680, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&unk_1002D4148);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EE95C()
{
  return &unk_100353448;
}

unint64_t sub_1000EE968()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1000EE984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383EE8);
  sub_10000E6A4(v0, (uint64_t)qword_100383EE8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40B0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "accel_pose_x_high";
  *(_QWORD *)(v9 + 8) = 17;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "accel_var_xyz_low";
  *(_QWORD *)(v13 + 8) = 17;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "gyro_num_samples_sufficient";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "gyro_var_x_high";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "consecutive_requirement";
  *((_QWORD *)v19 + 1) = 23;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "is_vehicular_low_confidence";
  *((_QWORD *)v21 + 1) = 27;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "is_vehicular_high_confidence";
  *((_QWORD *)v23 + 1) = 28;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 8;
  *(_QWORD *)v25 = "consistent_steps_protection";
  *((_QWORD *)v25 + 1) = 27;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000EEC28()
{
  return sub_100008BD0(&qword_100394468, (uint64_t)qword_100383EE8, (uint64_t)sub_1000EE984);
}

uint64_t sub_1000EEC44@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394468, (uint64_t)qword_100383EE8, (uint64_t)sub_1000EE984, a1);
}

uint64_t sub_1000EEC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 20);
          goto LABEL_13;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 24);
          goto LABEL_13;
        case 3:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 28);
          goto LABEL_13;
        case 4:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 32);
          goto LABEL_13;
        case 5:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 36);
          goto LABEL_13;
        case 6:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 40);
          goto LABEL_13;
        case 7:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 44);
          goto LABEL_13;
        case 8:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 48);
LABEL_13:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000EED8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  v10 = (int *)result;
  v11 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v11 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1, a2, a3);
  if (!v4)
  {
    v12 = *(unsigned __int8 *)(v5 + v10[6]);
    if (v12 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2, a2, a3);
    v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3, a2, a3);
    v14 = *(unsigned __int8 *)(v5 + v10[8]);
    if (v14 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 4, a2, a3);
    sub_1000EA258(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    sub_1000EEF58(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    sub_1000E4E8C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    sub_1000E4F00(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000EEF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  int v9;

  result = a5(0);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(result + 40));
  if (v9 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v9 & 1, 6, a3, a4);
  return result;
}

Swift::Int sub_1000EEFD0()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, &qword_10036E770, (uint64_t)&unk_1002D43B0);
}

uint64_t sub_1000EEFEC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  v7 = a1[10];
  *(_BYTE *)(a2 + a1[9]) = 2;
  *(_BYTE *)(a2 + v7) = 2;
  v8 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v8) = 2;
  return result;
}

uint64_t sub_1000EF044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EEC60(a1, a2, a3);
}

uint64_t sub_1000EF058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EED8C(a1, a2, a3);
}

uint64_t sub_1000EF06C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374FB0, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&unk_1002D4328);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EF0BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394468, (uint64_t)qword_100383EE8, (uint64_t)sub_1000EE984, a1);
}

uint64_t sub_1000EF0D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F698, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&unk_1002D42B0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EF118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F698, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&unk_1002D42B0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EF168()
{
  return &unk_100353458;
}

unint64_t sub_1000EF174()
{
  return 0xD000000000000027;
}

uint64_t sub_1000EF190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v56;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383F00);
  sub_10000E6A4(v0, (uint64_t)qword_100383F00);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v56 = swift_allocObject(v1, v6 + 24 * v4, v5 | 7);
  *(_OWORD *)(v56 + 16) = xmmword_1002CAB60;
  v7 = v56 + v6;
  v8 = v56 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v56 + v6) = 1;
  *(_QWORD *)v8 = "timestamp";
  *(_QWORD *)(v8 + 8) = 9;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v56 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "start_time";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v56 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "first_step_time";
  *((_QWORD *)v14 + 1) = 15;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v56 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "count";
  *((_QWORD *)v16 + 1) = 5;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v56 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "distance_m";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v56 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "raw_distance_m";
  *((_QWORD *)v20 + 1) = 14;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v56 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "floors_ascended";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v56 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "floors_descended";
  *((_QWORD *)v24 + 1) = 16;
  v24[16] = 2;
  v11();
  v25 = v56 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "current_pace_spm";
  *(_QWORD *)(v25 + 8) = 16;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v56 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "current_cadence";
  *((_QWORD *)v27 + 1) = 15;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v56 + v6 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "active_time";
  *((_QWORD *)v29 + 1) = 11;
  v29[16] = 2;
  v11();
  v30 = (_QWORD *)(v56 + v6 + 11 * v4);
  v31 = (char *)v30 + *(int *)(v2 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "record_id";
  *((_QWORD *)v31 + 1) = 9;
  v31[16] = 2;
  v11();
  v32 = (_QWORD *)(v56 + v6 + 12 * v4);
  v33 = (char *)v32 + *(int *)(v2 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "source_id";
  *((_QWORD *)v33 + 1) = 9;
  v33[16] = 2;
  v11();
  v34 = (_QWORD *)(v56 + v6 + 13 * v4);
  v35 = (char *)v34 + *(int *)(v2 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "is_odometer_distance";
  *((_QWORD *)v35 + 1) = 20;
  v35[16] = 2;
  v11();
  v36 = (_QWORD *)(v56 + v6 + 14 * v4);
  v37 = (char *)v36 + *(int *)(v2 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "is_odometer_pace";
  *((_QWORD *)v37 + 1) = 16;
  v37[16] = 2;
  v11();
  v38 = (_QWORD *)(v56 + v6 + 15 * v4);
  v39 = (char *)v38 + *(int *)(v2 + 48);
  *v38 = 16;
  *(_QWORD *)v39 = "accelerometer_pace";
  *((_QWORD *)v39 + 1) = 18;
  v39[16] = 2;
  v11();
  v40 = v56 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 16 * v4) = 17;
  *(_QWORD *)v40 = "push_count";
  *(_QWORD *)(v40 + 8) = 10;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  v41 = (_QWORD *)(v56 + v6 + 17 * v4);
  v42 = (char *)v41 + *(int *)(v2 + 48);
  *v41 = 18;
  *(_QWORD *)v42 = "workout_type";
  *((_QWORD *)v42 + 1) = 12;
  v42[16] = 2;
  v11();
  v43 = (_QWORD *)(v56 + v6 + 18 * v4);
  v44 = (char *)v43 + *(int *)(v2 + 48);
  *v43 = 19;
  *(_QWORD *)v44 = "pedometer_arm_constrainted_state";
  *((_QWORD *)v44 + 1) = 32;
  v44[16] = 2;
  v11();
  v45 = (_QWORD *)(v56 + v6 + 19 * v4);
  v46 = (char *)v45 + *(int *)(v2 + 48);
  *v45 = 20;
  *(_QWORD *)v46 = "elevation_ascended_cm";
  *((_QWORD *)v46 + 1) = 21;
  v46[16] = 2;
  v11();
  v47 = (_QWORD *)(v56 + v6 + 20 * v4);
  v48 = (char *)v47 + *(int *)(v2 + 48);
  *v47 = 21;
  *(_QWORD *)v48 = "elevation_descended_cm";
  *((_QWORD *)v48 + 1) = 22;
  v48[16] = 2;
  v11();
  v49 = (_QWORD *)(v56 + v6 + 21 * v4);
  v50 = (char *)v49 + *(int *)(v2 + 48);
  *v49 = 22;
  *(_QWORD *)v50 = "false_steps_suppressed";
  *((_QWORD *)v50 + 1) = 22;
  v50[16] = 2;
  v11();
  v51 = (_QWORD *)(v56 + v6 + 22 * v4);
  v52 = (char *)v51 + *(int *)(v2 + 48);
  *v51 = 23;
  *(_QWORD *)v52 = "distance_source";
  *((_QWORD *)v52 + 1) = 15;
  v52[16] = 2;
  v11();
  v53 = (_QWORD *)(v56 + v6 + 23 * v4);
  v54 = (char *)v53 + *(int *)(v2 + 48);
  *v53 = 24;
  *(_QWORD *)v54 = "false_step_detector_state";
  *((_QWORD *)v54 + 1) = 25;
  v54[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v56);
}

uint64_t sub_1000EF770()
{
  return sub_100008BD0(&qword_100394470, (uint64_t)qword_100383F00, (uint64_t)sub_1000EF190);
}

uint64_t sub_1000EF78C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394470, (uint64_t)qword_100383F00, (uint64_t)sub_1000EF190, a1);
}

uint64_t sub_1000EF7A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(v1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, 1, 1, v3);
  v4(v1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, 1, 1, v3);
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  *v14 = 0;
  v14[1] = 0;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace) = 2;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  *(_DWORD *)v20 = 0;
  *(_BYTE *)(v20 + 4) = 1;
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  *(_DWORD *)v21 = 0;
  *(_BYTE *)(v21 + 4) = 1;
  v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  *(_DWORD *)v22 = 0;
  *(_BYTE *)(v22 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource) = 6;
  v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  qword_100394480 = v1;
  return result;
}

uint64_t sub_1000EFA28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE v112[24];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE v127[24];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE v149[24];
  _BYTE v150[24];
  _BYTE v151[24];
  _BYTE v152[24];
  _BYTE v153[24];
  _BYTE v154[24];
  _BYTE v155[32];

  v3 = sub_1000039AC(&qword_10036E510);
  __chkstk_darwin(v3);
  v111 = (uint64_t)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036E508);
  __chkstk_darwin(v5);
  v109 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v7);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  v90 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v10, 1, 1, v11);
  v91 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  v12();
  v92 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  v12();
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  v93 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  v94 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  v95 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  v96 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  v97 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  *(_DWORD *)v21 = 0;
  *(_BYTE *)(v21 + 4) = 1;
  v22 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  v98 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  *v22 = 0;
  v22[1] = 0;
  v99 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance) = 2;
  v23 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  *v23 = 2;
  v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  v100 = v23;
  v101 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  v25 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  v102 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  *(_DWORD *)v26 = 0;
  *(_BYTE *)(v26 + 4) = 1;
  v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  v103 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  *(_DWORD *)v27 = 0;
  *(_BYTE *)(v27 + 4) = 1;
  v28 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  v104 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  *(_DWORD *)v28 = 0;
  *(_BYTE *)(v28 + 4) = 1;
  v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  v105 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  *(_DWORD *)v29 = 0;
  *(_BYTE *)(v29 + 4) = 1;
  v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  v106 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  *(_DWORD *)v30 = 0;
  *(_BYTE *)(v30 + 4) = 1;
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  v107 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  *(_DWORD *)v31 = 0;
  *(_BYTE *)(v31 + 4) = 1;
  v108 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource) = 6;
  v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  v110 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  v33 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, v155, 0, 0);
  sub_10000E660(v34, (uint64_t)v9, &qword_10036E458);
  v35 = v90;
  swift_beginAccess(v90, v154, 33, 0);
  sub_10000E574((uint64_t)v9, v35, &qword_10036E458);
  swift_endAccess(v154);
  v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, v154, 0, 0);
  sub_10000E660(v36, (uint64_t)v9, &qword_10036E458);
  v37 = v91;
  swift_beginAccess(v91, v153, 33, 0);
  sub_10000E574((uint64_t)v9, v37, &qword_10036E458);
  swift_endAccess(v153);
  v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, v153, 0, 0);
  sub_10000E660(v38, (uint64_t)v9, &qword_10036E458);
  v39 = v92;
  swift_beginAccess(v92, v152, 33, 0);
  sub_10000E574((uint64_t)v9, v39, &qword_10036E458);
  swift_endAccess(v152);
  v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count, v152, 0, 0);
  LODWORD(v37) = *(_DWORD *)v40;
  LOBYTE(v40) = *(_BYTE *)(v40 + 4);
  swift_beginAccess(v13, v151, 1, 0);
  *(_DWORD *)v13 = v37;
  *(_BYTE *)(v13 + 4) = v40;
  v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM, v150, 0, 0);
  v42 = *v41;
  LOBYTE(v41) = *((_BYTE *)v41 + 8);
  swift_beginAccess(v14, v149, 1, 0);
  *(_QWORD *)v14 = v42;
  *(_BYTE *)(v14 + 8) = (_BYTE)v41;
  v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM, &v148, 0, 0);
  v44 = *v43;
  LOBYTE(v43) = *((_BYTE *)v43 + 8);
  swift_beginAccess(v15, &v147, 1, 0);
  *(_QWORD *)v15 = v44;
  *(_BYTE *)(v15 + 8) = (_BYTE)v43;
  v45 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended, &v146, 0, 0);
  LODWORD(v44) = *(_DWORD *)v45;
  LOBYTE(v45) = *(_BYTE *)(v45 + 4);
  swift_beginAccess(v16, &v145, 1, 0);
  *(_DWORD *)v16 = v44;
  *(_BYTE *)(v16 + 4) = v45;
  v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended, &v144, 0, 0);
  LODWORD(v44) = *(_DWORD *)v46;
  LOBYTE(v46) = *(_BYTE *)(v46 + 4);
  v47 = v93;
  swift_beginAccess(v93, &v143, 1, 0);
  *(_DWORD *)v47 = v44;
  *(_BYTE *)(v47 + 4) = v46;
  v48 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm, &v142, 0, 0);
  v49 = *v48;
  LOBYTE(v48) = *((_BYTE *)v48 + 8);
  v50 = v94;
  swift_beginAccess(v94, &v141, 1, 0);
  *(_QWORD *)v50 = v49;
  *(_BYTE *)(v50 + 8) = (_BYTE)v48;
  v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence, &v140, 0, 0);
  v52 = *v51;
  LOBYTE(v51) = *((_BYTE *)v51 + 8);
  v53 = v95;
  swift_beginAccess(v95, &v139, 1, 0);
  *(_QWORD *)v53 = v52;
  *(_BYTE *)(v53 + 8) = (_BYTE)v51;
  v54 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime, &v138, 0, 0);
  v55 = *v54;
  LOBYTE(v54) = *((_BYTE *)v54 + 8);
  v56 = v96;
  swift_beginAccess(v96, &v137, 1, 0);
  *(_QWORD *)v56 = v55;
  *(_BYTE *)(v56 + 8) = (_BYTE)v54;
  v57 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID, &v136, 0, 0);
  LODWORD(v55) = *(_DWORD *)v57;
  LOBYTE(v57) = *(_BYTE *)(v57 + 4);
  v58 = v97;
  swift_beginAccess(v97, &v135, 1, 0);
  *(_DWORD *)v58 = v55;
  *(_BYTE *)(v58 + 4) = v57;
  v59 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID, &v134, 0, 0);
  v61 = *v59;
  v60 = v59[1];
  v62 = v98;
  swift_beginAccess(v98, &v133, 1, 0);
  v63 = v62[1];
  *v62 = v61;
  v62[1] = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v63);
  v64 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance, &v132, 0, 0);
  LOBYTE(v64) = *v64;
  v65 = v99;
  swift_beginAccess(v99, &v131, 1, 0);
  *v65 = (_BYTE)v64;
  v66 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace, &v130, 0, 0);
  LOBYTE(v66) = *v66;
  v67 = v100;
  swift_beginAccess(v100, &v129, 1, 0);
  *v67 = (_BYTE)v66;
  v68 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, &v128, 0, 0);
  v69 = v109;
  sub_10000E660(v68, v109, &qword_10036E508);
  v70 = v101;
  swift_beginAccess(v101, v127, 33, 0);
  sub_10000E574(v69, v70, &qword_10036E508);
  swift_endAccess(v127);
  v71 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount, v127, 0, 0);
  LODWORD(v69) = *(_DWORD *)v71;
  LOBYTE(v71) = *(_BYTE *)(v71 + 4);
  v72 = v102;
  swift_beginAccess(v102, &v126, 1, 0);
  *(_DWORD *)v72 = v69;
  *(_BYTE *)(v72 + 4) = v71;
  v73 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType, &v125, 0, 0);
  LODWORD(v69) = *(_DWORD *)v73;
  LOBYTE(v73) = *(_BYTE *)(v73 + 4);
  v74 = v103;
  swift_beginAccess(v103, &v124, 1, 0);
  *(_DWORD *)v74 = v69;
  *(_BYTE *)(v74 + 4) = v73;
  v75 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState, &v123, 0, 0);
  LODWORD(v69) = *(_DWORD *)v75;
  LOBYTE(v75) = *(_BYTE *)(v75 + 4);
  v76 = v104;
  swift_beginAccess(v104, &v122, 1, 0);
  *(_DWORD *)v76 = v69;
  *(_BYTE *)(v76 + 4) = v75;
  v77 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm, &v121, 0, 0);
  LODWORD(v69) = *(_DWORD *)v77;
  LOBYTE(v77) = *(_BYTE *)(v77 + 4);
  v78 = v105;
  swift_beginAccess(v105, &v120, 1, 0);
  *(_DWORD *)v78 = v69;
  *(_BYTE *)(v78 + 4) = v77;
  v79 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm, &v119, 0, 0);
  LODWORD(v69) = *(_DWORD *)v79;
  LOBYTE(v79) = *(_BYTE *)(v79 + 4);
  v80 = v106;
  swift_beginAccess(v106, &v118, 1, 0);
  *(_DWORD *)v80 = v69;
  *(_BYTE *)(v80 + 4) = v79;
  v81 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed, &v117, 0, 0);
  LODWORD(v69) = *(_DWORD *)v81;
  LOBYTE(v81) = *(_BYTE *)(v81 + 4);
  v82 = v107;
  swift_beginAccess(v107, &v116, 1, 0);
  *(_DWORD *)v82 = v69;
  *(_BYTE *)(v82 + 4) = v81;
  v83 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource, &v115, 0, 0);
  LOBYTE(v83) = *v83;
  v84 = v108;
  swift_beginAccess(v108, &v114, 1, 0);
  *v84 = (_BYTE)v83;
  v85 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, &v113, 0, 0);
  v86 = v111;
  sub_10000E660(v85, v111, &qword_10036E510);
  swift_release(a1);
  v87 = v110;
  swift_beginAccess(v110, v112, 33, 0);
  sub_10000E574(v86, v87, &qword_10036E510);
  swift_endAccess(v112);
  return v1;
}

uint64_t sub_1000F0504()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &qword_10036E458);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, &qword_10036E458);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, &qword_10036E458);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID
                                      + 8));
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, &qword_10036E508);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, &qword_10036E510);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000F05B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t (*v23)(uint64_t);
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE v37[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_1000EFA28(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
          goto LABEL_10;
        case 2:
          v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
          goto LABEL_10;
        case 3:
          v19 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
LABEL_10:
          v20 = v15 + v19;
          swift_beginAccess(v15 + v19, v37, 33, 0);
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v22 = (unint64_t *)&qword_10036E1E0;
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v24 = &unk_1002CF5A8;
          goto LABEL_35;
        case 4:
          v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
          goto LABEL_32;
        case 5:
          v26 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
          goto LABEL_19;
        case 6:
          v26 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
          goto LABEL_19;
        case 7:
          v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
          goto LABEL_32;
        case 8:
          v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
          goto LABEL_32;
        case 9:
          v26 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
          goto LABEL_19;
        case 10:
          v26 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
          goto LABEL_19;
        case 11:
          v26 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
LABEL_19:
          v27 = v15 + v26;
          swift_beginAccess(v15 + v26, v37, 33, 0);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v27, a2, a3);
          goto LABEL_36;
        case 12:
          v29 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID, v37, 33, 0);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v29, a2, a3);
          goto LABEL_36;
        case 13:
          v30 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID, v37, 33, 0);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v30, a2, a3);
          goto LABEL_36;
        case 14:
          v31 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance;
          goto LABEL_24;
        case 15:
          v31 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace;
LABEL_24:
          v32 = v15 + v31;
          swift_beginAccess(v15 + v31, v37, 33, 0);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v32, a2, a3);
          goto LABEL_36;
        case 16:
          v20 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, v37, 33, 0);
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
          v22 = &qword_10036F680;
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace;
          v24 = &unk_1002D4148;
          goto LABEL_35;
        case 17:
          v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
          goto LABEL_32;
        case 18:
          v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
          goto LABEL_32;
        case 19:
          v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
          goto LABEL_32;
        case 20:
          v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
          goto LABEL_32;
        case 21:
          v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
          goto LABEL_32;
        case 22:
          v25 = OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
LABEL_32:
          v33 = v15 + v25;
          swift_beginAccess(v15 + v25, v37, 33, 0);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v33, a2, a3);
          goto LABEL_36;
        case 23:
          v34 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource, v37, 33, 0);
          v35 = sub_100149D84();
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v34, &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType, v35, a2, a3);
          goto LABEL_36;
        case 24:
          v20 = v15
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, v37, 33, 0);
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
          v22 = &qword_10036F698;
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState;
          v24 = &unk_1002D42B0;
LABEL_35:
          v36 = sub_10000FD38(v22, v23, (uint64_t)v24);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v20, v21, v36, a2, a3);
LABEL_36:
          v5 = v28;
          swift_endAccess(v37);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_1000F0A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  char *v34;
  unint64_t v35;
  _BYTE v36[24];
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];
  _BYTE v42[24];
  _BYTE v43[24];
  _BYTE v44[24];
  _BYTE v45[24];
  _BYTE v46[24];
  _BYTE v47[24];
  _BYTE v48[24];
  _BYTE v49[24];
  _BYTE v50[24];
  _BYTE v51[24];
  _BYTE v52[24];
  _BYTE v53[24];
  _BYTE v54[24];
  char v55;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20));
  v10 = swift_retain(v9);
  sub_1000F10D8(v10, a1, a2, a3);
  if (v4)
    return swift_release(v9);
  sub_1000F1264(v9, a1, a2, a3);
  sub_1000F13F0(v9, a1, a2, a3);
  v12 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count, v36, 0, 0);
  if ((v12[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v12, 4, a2, a3);
  v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM, v54, 0, 0);
  if ((*(_BYTE *)(v13 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5, a2, a3, *(double *)v13);
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM, v53, 0, 0);
  if ((*(_BYTE *)(v14 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(6, a2, a3, *(double *)v14);
  v15 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended, v52, 0, 0);
  if ((v15[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v15, 7, a2, a3);
  v16 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended, v51, 0, 0);
  if ((v16[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v16, 8, a2, a3);
  v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm, v50, 0, 0);
  if ((*(_BYTE *)(v17 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(9, a2, a3, *(double *)v17);
  v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence, v49, 0, 0);
  if ((*(_BYTE *)(v18 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(10, a2, a3, *(double *)v18);
  v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime, v48, 0, 0);
  if ((*(_BYTE *)(v19 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(11, a2, a3, *(double *)v19);
  v20 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID, v47, 0, 0);
  if ((v20[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v20, 12, a2, a3);
  v21 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID, v46, 0, 0);
  v22 = v21[1];
  if (v22)
  {
    v23 = *v21;
    swift_bridgeObjectRetain(v21[1]);
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v23, v22, 13, a2, a3);
    swift_bridgeObjectRelease(v22);
  }
  v24 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance, v45, 0, 0);
  v25 = *v24;
  if (v25 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v25 & 1, 14, a2, a3);
  v26 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace, v44, 0, 0);
  v27 = *v26;
  if (v27 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v27 & 1, 15, a2, a3);
  sub_1000F157C(v9, a1, a2, a3);
  v28 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount, v43, 0, 0);
  if ((v28[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v28, 17, a2, a3);
  v29 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType, v42, 0, 0);
  if ((v29[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v29, 18, a2, a3);
  v30 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState, v41, 0, 0);
  if ((v30[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v30, 19, a2, a3);
  v31 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm, v40, 0, 0);
  if ((v31[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v31, 20, a2, a3);
  v32 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm, v39, 0, 0);
  if ((v32[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v32, 21, a2, a3);
  v33 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed, v38, 0, 0);
  if ((v33[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v33, 22, a2, a3);
  v34 = (char *)(v9
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource, v37, 0, 0);
  if (*v34 != 6)
  {
    v55 = *v34;
    v35 = sub_100149D84();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v55, 23, &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType, v35, a2, a3);
  }
  sub_1000F1708(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F10D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F1264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F13F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F157C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E508);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E508);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E508);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  v15 = sub_10000FD38(&qword_10036F680, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&unk_1002D4148);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 16, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000F1708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E510);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E510);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E510);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  v15 = sub_10000FD38(&qword_10036F698, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&unk_1002D42B0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 24, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000F1894(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t (*)(uint64_t, uint64_t))sub_1000F18BC) & 1;
}

BOOL sub_1000F18BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  char v70;
  int *v71;
  int v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  char v81;
  uint64_t v82;
  int *v83;
  int v84;
  char v85;
  uint64_t v86;
  int *v87;
  int v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  int v105;
  char v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unsigned __int8 *v113;
  int v114;
  unsigned __int8 *v115;
  int v116;
  unsigned __int8 *v117;
  int v118;
  unsigned __int8 *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  char v129;
  int *v130;
  int v131;
  char v132;
  uint64_t v133;
  int *v134;
  int v135;
  char v136;
  uint64_t v137;
  int *v138;
  int v139;
  char v140;
  uint64_t v141;
  int *v142;
  int v143;
  char v144;
  uint64_t v145;
  int *v146;
  int v147;
  char v148;
  uint64_t v149;
  int *v150;
  int v151;
  char v152;
  uint64_t v153;
  unsigned __int8 *v154;
  int v155;
  unsigned __int8 *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int (*v163)(uint64_t, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  char v166;
  unsigned int (*v167)(uint64_t, uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234[24];
  char v235[24];
  char v236[24];
  char v237[24];
  char v238[24];
  char v239[32];

  v172 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  v169 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v173 = (uint64_t)&v167 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_1000039AC(&qword_1003753B8);
  __chkstk_darwin(v168);
  v174 = (uint64_t)&v167 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036E510);
  v7 = __chkstk_darwin(v6);
  v171 = (uint64_t)&v167 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v170 = (uint64_t)&v167 - v9;
  v180 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  v178 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v175 = (uint64_t)&v167 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_1000039AC(&qword_1003753C0);
  __chkstk_darwin(v177);
  v181 = (uint64_t)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_10036E508);
  v13 = __chkstk_darwin(v12);
  v176 = (uint64_t)&v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v179 = (uint64_t)&v167 - v15;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v191 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v187 = (uint64_t)&v167 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_100375338);
  v19 = __chkstk_darwin(v18);
  v183 = (uint64_t)&v167 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v185 = (uint64_t)&v167 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v167 - v23;
  v25 = sub_1000039AC(&qword_10036E458);
  v26 = __chkstk_darwin(v25);
  v182 = (uint64_t)&v167 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v186 = (char *)&v167 - v29;
  v30 = __chkstk_darwin(v28);
  v184 = (uint64_t)&v167 - v31;
  v32 = __chkstk_darwin(v30);
  v190 = (uint64_t)&v167 - v33;
  v34 = __chkstk_darwin(v32);
  v188 = (uint64_t)&v167 - v35;
  __chkstk_darwin(v34);
  v37 = (char *)&v167 - v36;
  v38 = a1;
  v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(v39, v239, 0, 0);
  sub_10000E660(v39, (uint64_t)v37, &qword_10036E458);
  v40 = a2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess(a2+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, v238, 0, 0);
  v189 = v18;
  v41 = (uint64_t)&v24[*(int *)(v18 + 48)];
  sub_10000E660((uint64_t)v37, (uint64_t)v24, &qword_10036E458);
  sub_10000E660(v40, v41, &qword_10036E458);
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48);
  if (v42((uint64_t)v24, 1, v16) == 1)
  {
    swift_retain(v38);
    swift_retain(a2);
    sub_100015704((uint64_t)v37, &qword_10036E458);
    v43 = a2;
    if (v42(v41, 1, v16) == 1)
    {
      sub_100015704((uint64_t)v24, &qword_10036E458);
      goto LABEL_8;
    }
LABEL_6:
    v46 = (uint64_t)v24;
LABEL_21:
    sub_100015704(v46, &qword_100375338);
    goto LABEL_22;
  }
  v44 = v38;
  v43 = a2;
  v45 = v188;
  sub_10000E660((uint64_t)v24, v188, &qword_10036E458);
  v191 = v16;
  if (v42(v41, 1, v16) == 1)
  {
    swift_retain(v38);
    swift_retain(v43);
    sub_100015704((uint64_t)v37, &qword_10036E458);
    sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v47 = v187;
  v167 = v42;
  sub_100003E08(v41, v187, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain(v44);
  swift_retain(v43);
  v48 = sub_1000656F0(v45, v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v37, &qword_10036E458);
  v42 = v167;
  sub_100004030(v45, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v38 = v44;
  sub_100015704((uint64_t)v24, &qword_10036E458);
  v16 = v191;
  if ((v48 & 1) == 0)
    goto LABEL_22;
LABEL_8:
  v49 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, v237, 0, 0);
  v50 = v190;
  sub_10000E660(v49, v190, &qword_10036E458);
  v51 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, v236, 0, 0);
  v52 = v185;
  v53 = v185 + *(int *)(v189 + 48);
  sub_10000E660(v50, v185, &qword_10036E458);
  sub_10000E660(v51, v53, &qword_10036E458);
  if (v42(v52, 1, v16) == 1)
  {
    sub_100015704(v50, &qword_10036E458);
    v54 = v42(v53, 1, v16);
    v55 = (uint64_t)v186;
    if (v54 == 1)
    {
      sub_100015704(v52, &qword_10036E458);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  v56 = v184;
  sub_10000E660(v52, v184, &qword_10036E458);
  v57 = v42(v53, 1, v16);
  v55 = (uint64_t)v186;
  if (v57 == 1)
  {
    sub_100015704(v190, &qword_10036E458);
    sub_100004030(v56, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    v46 = v52;
    goto LABEL_21;
  }
  v191 = v43;
  v58 = v52;
  v59 = v187;
  sub_100003E08(v53, v187, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v60 = sub_1000656F0(v56, v59, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v59, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v190, &qword_10036E458);
  sub_100004030(v56, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v61 = v58;
  v43 = v191;
  sub_100015704(v61, &qword_10036E458);
  if ((v60 & 1) == 0)
    goto LABEL_22;
LABEL_15:
  v62 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, v235, 0, 0);
  sub_10000E660(v62, v55, &qword_10036E458);
  v63 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, v234, 0, 0);
  v64 = v183;
  v65 = v183 + *(int *)(v189 + 48);
  sub_10000E660(v55, v183, &qword_10036E458);
  sub_10000E660(v63, v65, &qword_10036E458);
  if (v42(v64, 1, v16) == 1)
  {
    sub_100015704(v55, &qword_10036E458);
    if (v42(v65, 1, v16) == 1)
    {
      sub_100015704(v64, &qword_10036E458);
      goto LABEL_26;
    }
    goto LABEL_20;
  }
  v66 = v182;
  sub_10000E660(v64, v182, &qword_10036E458);
  if (v42(v65, 1, v16) == 1)
  {
    sub_100015704(v55, &qword_10036E458);
    sub_100004030(v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_20:
    v46 = v64;
    goto LABEL_21;
  }
  v69 = v187;
  sub_100003E08(v65, v187, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v70 = sub_1000656F0(v66, v69, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v69, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v55, &qword_10036E458);
  sub_100004030(v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704(v64, &qword_10036E458);
  if ((v70 & 1) == 0)
    goto LABEL_22;
LABEL_26:
  v71 = (int *)(v38
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count, &v233, 0, 0);
  v72 = *v71;
  v73 = *((_BYTE *)v71 + 4);
  v74 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count, &v232, 0, 0);
  if ((v73 & 1) != 0)
  {
    if ((*(_BYTE *)(v74 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v74 + 4) & 1) != 0 || v72 != *(_DWORD *)v74)
  {
    goto LABEL_22;
  }
  v75 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM, &v231, 0, 0);
  v76 = *(double *)v75;
  v77 = *(_BYTE *)(v75 + 8);
  v78 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM, &v230, 0, 0);
  if ((v77 & 1) != 0)
  {
    if ((*(_BYTE *)(v78 + 8) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v78 + 8) & 1) != 0 || v76 != *(double *)v78)
  {
    goto LABEL_22;
  }
  v79 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM, &v229, 0, 0);
  v80 = *(double *)v79;
  v81 = *(_BYTE *)(v79 + 8);
  v82 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM, &v228, 0, 0);
  if ((v81 & 1) != 0)
  {
    if ((*(_BYTE *)(v82 + 8) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v82 + 8) & 1) != 0 || v80 != *(double *)v82)
  {
    goto LABEL_22;
  }
  v83 = (int *)(v38
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended, &v227, 0, 0);
  v84 = *v83;
  v85 = *((_BYTE *)v83 + 4);
  v86 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended, &v226, 0, 0);
  if ((v85 & 1) != 0)
  {
    if ((*(_BYTE *)(v86 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v86 + 4) & 1) != 0 || v84 != *(_DWORD *)v86)
  {
    goto LABEL_22;
  }
  v87 = (int *)(v38
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended, &v225, 0, 0);
  v88 = *v87;
  v89 = *((_BYTE *)v87 + 4);
  v90 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended, &v224, 0, 0);
  if ((v89 & 1) != 0)
  {
    if ((*(_BYTE *)(v90 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v90 + 4) & 1) != 0 || v88 != *(_DWORD *)v90)
  {
    goto LABEL_22;
  }
  v91 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm, &v223, 0, 0);
  v92 = *(double *)v91;
  v93 = *(_BYTE *)(v91 + 8);
  v94 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm, &v222, 0, 0);
  if ((v93 & 1) != 0)
  {
    if ((*(_BYTE *)(v94 + 8) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v94 + 8) & 1) != 0 || v92 != *(double *)v94)
  {
    goto LABEL_22;
  }
  v95 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence, &v221, 0, 0);
  v96 = *(double *)v95;
  v97 = *(_BYTE *)(v95 + 8);
  v98 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence, &v220, 0, 0);
  if ((v97 & 1) != 0)
  {
    if ((*(_BYTE *)(v98 + 8) & 1) != 0)
      goto LABEL_61;
LABEL_22:
    swift_release(v38);
    v67 = v43;
LABEL_23:
    swift_release(v67);
    return 0;
  }
  if ((*(_BYTE *)(v98 + 8) & 1) != 0 || v96 != *(double *)v98)
    goto LABEL_22;
LABEL_61:
  v99 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime, &v219, 0, 0);
  v100 = *(double *)v99;
  v101 = *(_BYTE *)(v99 + 8);
  v102 = v43;
  v103 = v43
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime, &v218, 0, 0);
  if ((v101 & 1) != 0)
  {
    if ((*(_BYTE *)(v103 + 8) & 1) == 0)
      goto LABEL_94;
  }
  else if ((*(_BYTE *)(v103 + 8) & 1) != 0 || v100 != *(double *)v103)
  {
    goto LABEL_94;
  }
  v104 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID, &v217, 0, 0);
  v105 = *v104;
  v106 = *((_BYTE *)v104 + 4);
  v107 = v43
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID, &v216, 0, 0);
  if ((v106 & 1) != 0)
  {
    if ((*(_BYTE *)(v107 + 4) & 1) == 0)
      goto LABEL_94;
  }
  else if ((*(_BYTE *)(v107 + 4) & 1) != 0 || v105 != *(_DWORD *)v107)
  {
    goto LABEL_94;
  }
  v108 = (uint64_t *)(v38
                   + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID, &v215, 0, 0);
  v109 = *v108;
  v110 = v108[1];
  v111 = (_QWORD *)(v43
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID, &v214, 0, 0);
  v112 = v111[1];
  if (v110)
  {
    if (!v112 || (v109 != *v111 || v110 != v112) && (_stringCompareWithSmolCheck(_:_:expecting:)(v109, v110) & 1) == 0)
      goto LABEL_94;
  }
  else if (v112)
  {
    goto LABEL_94;
  }
  v113 = (unsigned __int8 *)(v38
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance, &v213, 0, 0);
  v114 = *v113;
  v115 = (unsigned __int8 *)(v43
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance, &v212, 0, 0);
  v116 = *v115;
  if (v114 == 2)
  {
    if (v116 != 2)
      goto LABEL_94;
  }
  else if (v116 == 2 || ((((v116 & 1) == 0) ^ v114) & 1) == 0)
  {
    goto LABEL_94;
  }
  v117 = (unsigned __int8 *)(v38
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace, &v211, 0, 0);
  v118 = *v117;
  v119 = (unsigned __int8 *)(v43
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess(v43+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace, &v210, 0, 0);
  v120 = *v119;
  if (v118 == 2)
  {
    if (v120 != 2)
      goto LABEL_94;
  }
  else if (v120 == 2 || ((((v120 & 1) == 0) ^ v118) & 1) == 0)
  {
    goto LABEL_94;
  }
  v121 = v38
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, &v209, 0, 0);
  v122 = v179;
  sub_10000E660(v121, v179, &qword_10036E508);
  v123 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess(v102+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, &v208, 0, 0);
  v124 = v181;
  v125 = v181 + *(int *)(v177 + 48);
  sub_10000E660(v122, v181, &qword_10036E508);
  sub_10000E660(v123, v125, &qword_10036E508);
  v126 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v178 + 48);
  if (v126(v124, 1, v180) == 1)
  {
    sub_100015704(v179, &qword_10036E508);
    if (v126(v125, 1, v180) == 1)
    {
      sub_100015704(v181, &qword_10036E508);
      goto LABEL_96;
    }
LABEL_93:
    sub_100015704(v181, &qword_1003753C0);
    goto LABEL_94;
  }
  sub_10000E660(v181, v176, &qword_10036E508);
  if (v126(v125, 1, v180) == 1)
  {
    sub_100015704(v179, &qword_10036E508);
    sub_100004030(v176, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
    goto LABEL_93;
  }
  v127 = v175;
  sub_100003E08(v125, v175, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  v128 = v176;
  v129 = sub_1000656F0(v176, v127, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  sub_100004030(v127, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  sub_100015704(v179, &qword_10036E508);
  sub_100004030(v128, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  sub_100015704(v181, &qword_10036E508);
  if ((v129 & 1) == 0)
    goto LABEL_94;
LABEL_96:
  v130 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount, &v207, 0, 0);
  v131 = *v130;
  v132 = *((_BYTE *)v130 + 4);
  v133 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess(v102+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount, &v206, 0, 0);
  if ((v132 & 1) != 0)
  {
    if ((*(_BYTE *)(v133 + 4) & 1) == 0)
      goto LABEL_94;
  }
  else if ((*(_BYTE *)(v133 + 4) & 1) != 0 || v131 != *(_DWORD *)v133)
  {
    goto LABEL_94;
  }
  v134 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType, &v205, 0, 0);
  v135 = *v134;
  v136 = *((_BYTE *)v134 + 4);
  v137 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess(v102+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType, &v204, 0, 0);
  if ((v136 & 1) != 0)
  {
    if ((*(_BYTE *)(v137 + 4) & 1) == 0)
      goto LABEL_94;
  }
  else if ((*(_BYTE *)(v137 + 4) & 1) != 0 || v135 != *(_DWORD *)v137)
  {
    goto LABEL_94;
  }
  v138 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState, &v203, 0, 0);
  v139 = *v138;
  v140 = *((_BYTE *)v138 + 4);
  v141 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess(v102+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState, &v202, 0, 0);
  if ((v140 & 1) != 0)
  {
    if ((*(_BYTE *)(v141 + 4) & 1) == 0)
      goto LABEL_94;
  }
  else if ((*(_BYTE *)(v141 + 4) & 1) != 0 || v139 != *(_DWORD *)v141)
  {
    goto LABEL_94;
  }
  v142 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm, &v201, 0, 0);
  v143 = *v142;
  v144 = *((_BYTE *)v142 + 4);
  v145 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess(v102+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm, &v200, 0, 0);
  if ((v144 & 1) != 0)
  {
    if ((*(_BYTE *)(v145 + 4) & 1) == 0)
      goto LABEL_94;
  }
  else if ((*(_BYTE *)(v145 + 4) & 1) != 0 || v143 != *(_DWORD *)v145)
  {
    goto LABEL_94;
  }
  v146 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm, &v199, 0, 0);
  v147 = *v146;
  v148 = *((_BYTE *)v146 + 4);
  v149 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess(v102+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm, &v198, 0, 0);
  if ((v148 & 1) != 0)
  {
    if ((*(_BYTE *)(v149 + 4) & 1) == 0)
      goto LABEL_94;
  }
  else if ((*(_BYTE *)(v149 + 4) & 1) != 0 || v147 != *(_DWORD *)v149)
  {
    goto LABEL_94;
  }
  v150 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed, &v197, 0, 0);
  v151 = *v150;
  v152 = *((_BYTE *)v150 + 4);
  v153 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess(v102+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed, &v196, 0, 0);
  if ((v152 & 1) != 0)
  {
    if ((*(_BYTE *)(v153 + 4) & 1) == 0)
      goto LABEL_94;
  }
  else if ((*(_BYTE *)(v153 + 4) & 1) != 0 || v151 != *(_DWORD *)v153)
  {
    goto LABEL_94;
  }
  v154 = (unsigned __int8 *)(v38
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource, &v195, 0, 0);
  v155 = *v154;
  v156 = (unsigned __int8 *)(v102
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess(v102+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource, &v194, 0, 0);
  v157 = *v156;
  if (v155 == 6)
  {
    if (v157 == 6)
      goto LABEL_131;
LABEL_94:
    swift_release(v38);
    v67 = v102;
    goto LABEL_23;
  }
  if (v157 == 6 || v155 != v157)
    goto LABEL_94;
LABEL_131:
  v158 = v38
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, &v193, 0, 0);
  v159 = v170;
  sub_10000E660(v158, v170, &qword_10036E510);
  v160 = v102
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess(v102+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, &v192, 0, 0);
  v161 = v174;
  v162 = v174 + *(int *)(v168 + 48);
  sub_10000E660(v159, v174, &qword_10036E510);
  sub_10000E660(v160, v162, &qword_10036E510);
  v163 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v169 + 48);
  if (v163(v161, 1, v172) == 1)
  {
    swift_release(v38);
    swift_release(v102);
    sub_100015704(v170, &qword_10036E510);
    if (v163(v162, 1, v172) == 1)
    {
      sub_100015704(v174, &qword_10036E510);
      return 1;
    }
LABEL_136:
    sub_100015704(v174, &qword_1003753B8);
    return 0;
  }
  sub_10000E660(v174, v171, &qword_10036E510);
  if (v163(v162, 1, v172) == 1)
  {
    swift_release(v38);
    swift_release(v102);
    sub_100015704(v170, &qword_10036E510);
    sub_100004030(v171, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    goto LABEL_136;
  }
  v164 = v173;
  sub_100003E08(v162, v173, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  v165 = v171;
  v166 = sub_100112E80(v171, v164);
  swift_release(v38);
  swift_release(v102);
  sub_100004030(v164, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  sub_100015704(v170, &qword_10036E510);
  sub_100004030(v165, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  sub_100015704(v174, &qword_10036E510);
  return (v166 & 1) != 0;
}

Swift::Int sub_1000F2D20()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_10036E778, (uint64_t)&unk_1002D4518);
}

uint64_t sub_1000F2D3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100394478, &qword_100394480, (uint64_t)sub_1000EF7A8, a2);
}

uint64_t sub_1000F2D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F05B4(a1, a2, a3);
}

uint64_t sub_1000F2D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F0A0C(a1, a2, a3);
}

uint64_t sub_1000F2D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374FA8, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&unk_1002D4490);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F2DD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394470, (uint64_t)qword_100383F00, (uint64_t)sub_1000EF190, a1);
}

uint64_t sub_1000F2DEC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F6B0, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&unk_1002D4418);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F2E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F6B0, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&unk_1002D4418);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000F2E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383F18);
  sub_10000E6A4(v0, (uint64_t)qword_100383F18);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C30F0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "DS_UNKNOWN";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "DS_GPS";
  *(_QWORD *)(v13 + 8) = 6;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "DS_ENERGY_BASED_CALIBRATED";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "DS_ENERGY_BASED_UNCALIBRATED";
  *((_QWORD *)v17 + 1) = 28;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 4;
  *(_QWORD *)v19 = "DS_CADENCE_BASED_CALIBRATED";
  *((_QWORD *)v19 + 1) = 27;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 5;
  *(_QWORD *)v21 = "DS_CADENCE_BASED_UNCALIBRATED";
  *((_QWORD *)v21 + 1) = 29;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000F30B0()
{
  return sub_100008BD0(&qword_100394488, (uint64_t)qword_100383F18, (uint64_t)sub_1000F2E7C);
}

uint64_t sub_1000F30CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394488, (uint64_t)qword_100383F18, (uint64_t)sub_1000F2E7C, a1);
}

uint64_t sub_1000F30E8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394488, (uint64_t)qword_100383F18, (uint64_t)sub_1000F2E7C, a1);
}

void *sub_1000F3104()
{
  return &unk_100353468;
}

unint64_t sub_1000F3110()
{
  return 0xD000000000000022;
}

uint64_t sub_1000F312C(uint64_t a1)
{
  return sub_1000F3144(a1, qword_100383F30, (uint64_t)"step_count_entry", 16);
}

uint64_t sub_1000F3144(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  char *v18;
  uint64_t v19;

  v5 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v5, a2);
  sub_10000E6A4(v5, (uint64_t)a2);
  v6 = sub_1000039AC(&qword_10036A618);
  v7 = sub_1000039AC(&qword_10036A620);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + 3 * v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1002C3120;
  v13 = (_QWORD *)(v12 + v11);
  v14 = v12 + v11 + *(int *)(v7 + 48);
  *v13 = 1;
  *(_QWORD *)v14 = "event_receipt_time";
  *(_QWORD *)(v14 + 8) = 18;
  *(_BYTE *)(v14 + 16) = 2;
  v15 = enum case for _NameMap.NameDescription.standard(_:);
  v16 = type metadata accessor for _NameMap.NameDescription(0);
  v17 = *(void (**)(void))(*(_QWORD *)(v16 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v17)(v14, v15, v16);
  v18 = (char *)v13 + v9 + *(int *)(v7 + 48);
  *(_QWORD *)((char *)v13 + v9) = 2;
  *(_QWORD *)v18 = "client";
  *((_QWORD *)v18 + 1) = 6;
  v18[16] = 2;
  v17();
  v19 = (uint64_t)v13 + 2 * v9 + *(int *)(v7 + 48);
  *(_QWORD *)((char *)v13 + 2 * v9) = 3;
  *(_QWORD *)v19 = a3;
  *(_QWORD *)(v19 + 8) = a4;
  *(_BYTE *)(v19 + 16) = 2;
  v17();
  return _NameMap.init(dictionaryLiteral:)(v12);
}

uint64_t sub_1000F32DC()
{
  return sub_100008BD0(&qword_100394490, (uint64_t)qword_100383F30, (uint64_t)sub_1000F312C);
}

uint64_t sub_1000F32F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394490, (uint64_t)qword_100383F30, (uint64_t)sub_1000F312C, a1);
}

uint64_t sub_1000F3314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3348(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_10036F6B0, (uint64_t)&unk_1002D4418);
}

uint64_t sub_1000F3348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v26;
  uint64_t v27;

  v11 = v7;
  v12 = a3;
  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v8)
  {
    v27 = a7;
    v23 = v12;
    while ((v15 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          v20 = v11;
          v26 = v11 + *(int *)(a4(0) + 28);
          v21 = a5(0);
          v22 = sub_10000FD38(a6, a5, a7);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v26, v21, v22, a2, v23);
          v11 = v20;
          v12 = v23;
          a7 = v27;
          break;
        case 2:
          v16 = a4(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v11 + *(int *)(v16 + 24), a2, v12);
          break;
        case 1:
          v17 = v11 + *(int *)(a4(0) + 20);
          v18 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v19 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v17, v18, v19, a2, v12);
          a7 = v27;
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, v12);
    }
  }
  return result;
}

uint64_t sub_1000F3518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DCBA0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000F353C);
}

uint64_t sub_1000F353C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E518);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036E518);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E518);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  v15 = sub_10000FD38(&qword_10036F6B0, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&unk_1002D4418);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

Swift::Int sub_1000F36B4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &qword_10036E780, (uint64_t)&unk_1002D46A8);
}

uint64_t sub_1000F36D0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DCE20(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a2);
}

uint64_t sub_1000F36DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374FA0, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&unk_1002D4620);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F372C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394490, (uint64_t)qword_100383F30, (uint64_t)sub_1000F312C, a1);
}

uint64_t sub_1000F3748(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F6C8, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&unk_1002D45A8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F3788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F6C8, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&unk_1002D45A8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F37D8()
{
  return &unk_100353478;
}

unint64_t sub_1000F37E4()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000F3800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383F48);
  sub_10000E6A4(v0, (uint64_t)qword_100383F48);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "x";
  *(_QWORD *)(v9 + 8) = 1;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "y";
  *((_QWORD *)v13 + 1) = 1;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "z";
  *(_QWORD *)(v14 + 8) = 1;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000F398C()
{
  return sub_100008BD0(&qword_100394498, (uint64_t)qword_100383F48, (uint64_t)sub_1000F3800);
}

uint64_t sub_1000F39A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394498, (uint64_t)qword_100383F48, (uint64_t)sub_1000F3800, a1);
}

uint64_t sub_1000F39C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v9, a2, a3);
        break;
      case 2:
        v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 24);
        goto LABEL_3;
      case 1:
        v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 20);
        goto LABEL_3;
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_1000F3A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v10 = result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(1, a2, a3, *(float *)v11);
  if (!v4)
  {
    v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2, a2, a3, *(float *)v12);
    v13 = v5 + *(int *)(v10 + 28);
    if ((*(_BYTE *)(v13 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v13);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000F3B84()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, &qword_10036E788, (uint64_t)&unk_1002D4810);
}

uint64_t sub_1000F3BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F39C4(a1, a2, a3);
}

uint64_t sub_1000F3BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3A88(a1, a2, a3);
}

uint64_t sub_1000F3BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F98, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&unk_1002D4788);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F3C18@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394498, (uint64_t)qword_100383F48, (uint64_t)sub_1000F3800, a1);
}

uint64_t sub_1000F3C34(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F6E0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&unk_1002D4710);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F3C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F6E0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&unk_1002D4710);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F3CC8()
{
  return &unk_100353488;
}

unint64_t sub_1000F3CD4()
{
  return 0xD000000000000030;
}

uint64_t sub_1000F3CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383F60);
  sub_10000E6A4(v0, (uint64_t)qword_100383F60);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "w";
  *(_QWORD *)(v9 + 8) = 1;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "x";
  *(_QWORD *)(v13 + 8) = 1;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "y";
  *((_QWORD *)v15 + 1) = 1;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "z";
  *((_QWORD *)v17 + 1) = 1;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000F3EA8()
{
  return sub_100008BD0(&qword_1003944A0, (uint64_t)qword_100383F60, (uint64_t)sub_1000F3CF0);
}

uint64_t sub_1000F3EC4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003944A0, (uint64_t)qword_100383F60, (uint64_t)sub_1000F3CF0, a1);
}

uint64_t sub_1000F3EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F3EFC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000F3EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v11 = *(int *)(a4(0) + 20);
          goto LABEL_5;
        case 2:
          v11 = *(int *)(a4(0) + 24);
          goto LABEL_5;
        case 3:
          v11 = *(int *)(a4(0) + 28);
          goto LABEL_5;
        case 4:
          v11 = *(int *)(a4(0) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v4 + v11, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000F3FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F4010(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000F4010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = v4;
  result = a4(0);
  v11 = (int *)result;
  v12 = v6 + *(int *)(result + 20);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v12);
  if (!v5)
  {
    v13 = v6 + v11[6];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v13);
    v14 = v6 + v11[7];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v14);
    v15 = v6 + v11[8];
    if ((*(_BYTE *)(v15 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v15);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000F413C(uint64_t a1, uint64_t a2)
{
  return sub_10011E028(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4) & 1;
}

Swift::Int sub_1000F415C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, &qword_10036E790, (uint64_t)&unk_1002D4978);
}

uint64_t sub_1000F4178(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F90, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&unk_1002D48F0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F41C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003944A0, (uint64_t)qword_100383F60, (uint64_t)sub_1000F3CF0, a1);
}

uint64_t sub_1000F41E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F6F8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&unk_1002D4878);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F4224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F6F8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&unk_1002D4878);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F4278()
{
  return &unk_100353498;
}

unint64_t sub_1000F4284()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000F42A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v31;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383F78);
  sub_10000E6A4(v0, (uint64_t)qword_100383F78);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v31 = swift_allocObject(v1, v6 + 11 * v4, v5 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_1002C40E0;
  v7 = v31 + v6;
  v8 = v31 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v31 + v6) = 1;
  *(_QWORD *)v8 = "magnetic_field";
  *(_QWORD *)(v8 + 8) = 14;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "unassisted_magnetic_field";
  *(_QWORD *)(v12 + 8) = 25;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "magnetic_heading";
  *((_QWORD *)v14 + 1) = 16;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "true_heading";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "accuracy";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "calibration_level";
  *((_QWORD *)v20 + 1) = 17;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "using_database_bias";
  *((_QWORD *)v22 + 1) = 19;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "magnitude";
  *((_QWORD *)v24 + 1) = 9;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "inclination";
  *(_QWORD *)(v25 + 8) = 11;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "horizontal";
  *((_QWORD *)v27 + 1) = 10;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "quaternion";
  *((_QWORD *)v29 + 1) = 10;
  v29[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v31);
}

uint64_t sub_1000F45E0()
{
  return sub_100008BD0(&qword_1003944A8, (uint64_t)qword_100383F78, (uint64_t)sub_1000F42A0);
}

uint64_t sub_1000F45FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003944A8, (uint64_t)qword_100383F78, (uint64_t)sub_1000F42A0, a1);
}

uint64_t sub_1000F4618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(v1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, 1, 1, v3);
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel) = 8;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias) = 2;
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  *(_DWORD *)v10 = 0;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  *(_BYTE *)(v10 + 4) = 1;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  qword_1003944B8 = v1;
  return result;
}

uint64_t sub_1000F477C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[24];
  _BYTE v61[24];
  _BYTE v62[24];
  _BYTE v63[24];
  _BYTE v64[24];
  _BYTE v65[24];
  _BYTE v66[32];

  v3 = sub_1000039AC(&qword_10036E528);
  __chkstk_darwin(v3);
  v46 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  v10(v1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, 1, 1, v9);
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v40 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel) = 8;
  v15 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  *v15 = 2;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  v41 = v15;
  v42 = v16;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  v44 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  v45 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  v20 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, v66, 0, 0);
  sub_10000E660(v21, (uint64_t)v7, &qword_10036E520);
  swift_beginAccess(v8, v65, 33, 0);
  sub_10000E574((uint64_t)v7, v8, &qword_10036E520);
  swift_endAccess(v65);
  v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, v65, 0, 0);
  sub_10000E660(v22, (uint64_t)v7, &qword_10036E520);
  swift_beginAccess(v11, v64, 33, 0);
  sub_10000E574((uint64_t)v7, v11, &qword_10036E520);
  swift_endAccess(v64);
  v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading, v64, 0, 0);
  LODWORD(v22) = *(_DWORD *)v23;
  LOBYTE(v23) = *(_BYTE *)(v23 + 4);
  swift_beginAccess(v12, v63, 1, 0);
  *(_DWORD *)v12 = v22;
  *(_BYTE *)(v12 + 4) = v23;
  v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading, v62, 0, 0);
  LODWORD(v23) = *(_DWORD *)v24;
  LOBYTE(v24) = *(_BYTE *)(v24 + 4);
  swift_beginAccess(v13, v61, 1, 0);
  *(_DWORD *)v13 = v23;
  *(_BYTE *)(v13 + 4) = v24;
  v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy, v60, 0, 0);
  LODWORD(v13) = *(_DWORD *)v25;
  LOBYTE(v25) = *(_BYTE *)(v25 + 4);
  swift_beginAccess(v14, &v59, 1, 0);
  *(_DWORD *)v14 = v13;
  *(_BYTE *)(v14 + 4) = v25;
  v26 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel, &v58, 0, 0);
  LOBYTE(v26) = *v26;
  v27 = v40;
  swift_beginAccess(v40, &v57, 1, 0);
  *v27 = (_BYTE)v26;
  v28 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias, &v56, 0, 0);
  LOBYTE(v28) = *v28;
  v29 = v41;
  swift_beginAccess(v41, &v55, 1, 0);
  *v29 = (_BYTE)v28;
  v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude, &v54, 0, 0);
  LODWORD(v29) = *(_DWORD *)v30;
  LOBYTE(v30) = *(_BYTE *)(v30 + 4);
  v31 = v42;
  swift_beginAccess(v42, &v53, 1, 0);
  *(_DWORD *)v31 = (_DWORD)v29;
  *(_BYTE *)(v31 + 4) = v30;
  v32 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination, &v52, 0, 0);
  LODWORD(v29) = *(_DWORD *)v32;
  LOBYTE(v32) = *(_BYTE *)(v32 + 4);
  v33 = v43;
  swift_beginAccess(v43, &v51, 1, 0);
  *(_DWORD *)v33 = (_DWORD)v29;
  *(_BYTE *)(v33 + 4) = v32;
  v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal, &v50, 0, 0);
  LODWORD(v29) = *(_DWORD *)v34;
  LOBYTE(v34) = *(_BYTE *)(v34 + 4);
  v35 = v44;
  swift_beginAccess(v44, &v49, 1, 0);
  *(_DWORD *)v35 = (_DWORD)v29;
  *(_BYTE *)(v35 + 4) = v34;
  v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, &v48, 0, 0);
  v37 = v46;
  sub_10000E660(v36, v46, &qword_10036E528);
  swift_release(a1);
  v38 = v45;
  swift_beginAccess(v45, v47, 33, 0);
  sub_10000E574(v37, v38, &qword_10036E528);
  swift_endAccess(v47);
  return v1;
}

uint64_t sub_1000F4CD0()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, &qword_10036E520);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, &qword_10036E520);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, &qword_10036E528);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000F4D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t (*v23)(uint64_t);
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_1000F477C(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v19 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
          goto LABEL_9;
        case 2:
          v19 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
LABEL_9:
          v20 = v15 + v19;
          swift_beginAccess(v15 + v19, v32, 33, 0);
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
          v22 = &qword_10036F6E0;
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3;
          v24 = &unk_1002D4710;
          goto LABEL_20;
        case 3:
          v25 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
          goto LABEL_18;
        case 4:
          v25 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
          goto LABEL_18;
        case 5:
          v25 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
          goto LABEL_18;
        case 6:
          v26 = v15
              + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel, v32, 33, 0);
          v27 = sub_10014A68C();
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v26, &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel, v27, a2, a3);
          goto LABEL_21;
        case 7:
          v29 = v15
              + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias, v32, 33, 0);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v29, a2, a3);
          goto LABEL_21;
        case 8:
          v25 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
          goto LABEL_18;
        case 9:
          v25 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
          goto LABEL_18;
        case 10:
          v25 = OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
LABEL_18:
          v30 = v15 + v25;
          swift_beginAccess(v15 + v25, v32, 33, 0);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v30, a2, a3);
          goto LABEL_21;
        case 11:
          v20 = v15
              + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, v32, 33, 0);
          v21 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
          v22 = &qword_10036F6F8;
          v23 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          v24 = &unk_1002D4878;
LABEL_20:
          v31 = sub_10000FD38(v22, v23, (uint64_t)v24);
          v28 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v20, v21, v31, a2, a3);
LABEL_21:
          v5 = v28;
          swift_endAccess(v32);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_1000F5030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE v24[24];
  _BYTE v25[24];
  _BYTE v26[24];
  _BYTE v27[24];
  _BYTE v28[24];
  _BYTE v29[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20));
  v10 = swift_retain(v9);
  sub_1000F5380(v10, a1, a2, a3);
  if (v4)
    return swift_release(v9);
  sub_1000F550C(v9, a1, a2, a3);
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading, &v22, 0, 0);
  if ((*(_BYTE *)(v12 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v12);
  v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading, v23, 0, 0);
  if ((*(_BYTE *)(v13 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4, a2, a3, *(float *)v13);
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy, v29, 0, 0);
  if ((*(_BYTE *)(v14 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(5, a2, a3, *(float *)v14);
  v15 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel, v28, 0, 0);
  if (*v15 != 8)
  {
    v27[0] = *v15;
    v16 = sub_10014A68C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v27, 6, &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel, v16, a2, a3);
  }
  v17 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias, v27, 0, 0);
  v18 = *v17;
  if (v18 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v18 & 1, 7, a2, a3);
  v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude, v26, 0, 0);
  if ((*(_BYTE *)(v19 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(8, a2, a3, *(float *)v19);
  v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination, v25, 0, 0);
  if ((*(_BYTE *)(v20 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(9, a2, a3, *(float *)v20);
  v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal, v24, 0, 0);
  if ((*(_BYTE *)(v21 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(10, a2, a3, *(float *)v21);
  sub_1000F5698(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F5380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E520);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E520);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v15 = sub_10000FD38(&qword_10036F6E0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&unk_1002D4710);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000F550C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E520);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E520);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v15 = sub_10000FD38(&qword_10036F6E0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&unk_1002D4710);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000F5698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E528);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E528);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E528);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  v15 = sub_10000FD38(&qword_10036F6F8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&unk_1002D4878);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 11, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000F5824(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t (*)(uint64_t, uint64_t))sub_1000F584C) & 1;
}

BOOL sub_1000F584C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  float v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  char v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  unsigned __int8 *v60;
  int v61;
  unsigned __int8 *v62;
  int v63;
  unsigned __int8 *v64;
  int v65;
  uint64_t v66;
  float v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120[24];
  char v121[24];
  char v122[24];
  char v123[24];
  char v124[24];
  char v125[32];

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  v93 = *(_QWORD *)(v4 - 8);
  v94 = v4;
  __chkstk_darwin(v4);
  v90 = (uint64_t)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_1000039AC(&qword_1003753A0);
  __chkstk_darwin(v92);
  v96 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036E528);
  v8 = __chkstk_darwin(v7);
  v91 = (uint64_t)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v95 = (uint64_t)&v89 - v10;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v103 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v98 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000039AC(&qword_100375398);
  v14 = __chkstk_darwin(v13);
  v100 = (uint64_t)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v89 - v16;
  v18 = sub_1000039AC(&qword_10036E520);
  v19 = __chkstk_darwin(v18);
  v97 = (uint64_t)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v102 = (uint64_t)&v89 - v22;
  v23 = __chkstk_darwin(v21);
  v101 = (uint64_t)&v89 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v89 - v25;
  v27 = a1;
  v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v28, v125, 0, 0);
  sub_10000E660(v28, (uint64_t)v26, &qword_10036E520);
  v29 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(a2+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, v124, 0, 0);
  v99 = v13;
  v30 = (uint64_t)&v17[*(int *)(v13 + 48)];
  sub_10000E660((uint64_t)v26, (uint64_t)v17, &qword_10036E520);
  v31 = v29;
  v32 = v11;
  sub_10000E660(v31, v30, &qword_10036E520);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  if (v33((uint64_t)v17, 1, v11) == 1)
  {
    swift_retain(v27);
    swift_retain(a2);
    sub_100015704((uint64_t)v26, &qword_10036E520);
    v34 = v27;
    if (v33(v30, 1, v11) == 1)
    {
      sub_100015704((uint64_t)v17, &qword_10036E520);
      goto LABEL_8;
    }
LABEL_6:
    sub_100015704((uint64_t)v17, &qword_100375398);
    goto LABEL_58;
  }
  v34 = v27;
  v35 = v101;
  sub_10000E660((uint64_t)v17, v101, &qword_10036E520);
  if (v33(v30, 1, v11) == 1)
  {
    swift_retain(v34);
    swift_retain(a2);
    sub_100015704((uint64_t)v26, &qword_10036E520);
    sub_100004030(v35, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_6;
  }
  v36 = v98;
  sub_100003E08(v30, v98, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  swift_retain(v34);
  swift_retain(a2);
  v37 = sub_10011BAC8(v35, v36);
  sub_100004030(v36, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015704((uint64_t)v26, &qword_10036E520);
  sub_100004030(v35, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015704((uint64_t)v17, &qword_10036E520);
  if ((v37 & 1) == 0)
    goto LABEL_58;
LABEL_8:
  v38 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, v123, 0, 0);
  v39 = v102;
  sub_10000E660(v38, v102, &qword_10036E520);
  v40 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess(a2+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, v122, 0, 0);
  v41 = v100;
  v42 = v100 + *(int *)(v99 + 48);
  sub_10000E660(v39, v100, &qword_10036E520);
  sub_10000E660(v40, v42, &qword_10036E520);
  if (v33(v41, 1, v32) == 1)
  {
    sub_100015704(v39, &qword_10036E520);
    if (v33(v42, 1, v32) == 1)
    {
      sub_100015704(v41, &qword_10036E520);
      goto LABEL_15;
    }
LABEL_13:
    sub_100015704(v41, &qword_100375398);
    goto LABEL_58;
  }
  v43 = v97;
  sub_10000E660(v41, v97, &qword_10036E520);
  if (v33(v42, 1, v32) == 1)
  {
    sub_100015704(v102, &qword_10036E520);
    sub_100004030(v43, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_13;
  }
  v44 = v98;
  sub_100003E08(v42, v98, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v45 = sub_10011BAC8(v43, v44);
  sub_100004030(v44, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015704(v102, &qword_10036E520);
  sub_100004030(v43, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015704(v41, &qword_10036E520);
  if ((v45 & 1) == 0)
    goto LABEL_58;
LABEL_15:
  v46 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading, v121, 0, 0);
  v47 = *(float *)v46;
  v48 = *(_BYTE *)(v46 + 4);
  v49 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess(a2+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading, v120, 0, 0);
  if ((v48 & 1) != 0)
  {
    if ((*(_BYTE *)(v49 + 4) & 1) == 0)
      goto LABEL_58;
  }
  else if ((*(_BYTE *)(v49 + 4) & 1) != 0 || v47 != *(float *)v49)
  {
    goto LABEL_58;
  }
  v50 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading, &v119, 0, 0);
  v51 = *(float *)v50;
  v52 = *(_BYTE *)(v50 + 4);
  v53 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess(a2+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading, &v118, 0, 0);
  if ((v52 & 1) != 0)
  {
    if ((*(_BYTE *)(v53 + 4) & 1) == 0)
      goto LABEL_58;
  }
  else if ((*(_BYTE *)(v53 + 4) & 1) != 0 || v51 != *(float *)v53)
  {
    goto LABEL_58;
  }
  v54 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy, &v117, 0, 0);
  v55 = *(float *)v54;
  v56 = *(_BYTE *)(v54 + 4);
  v57 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess(a2+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy, &v116, 0, 0);
  if ((v56 & 1) != 0)
  {
    if ((*(_BYTE *)(v57 + 4) & 1) == 0)
      goto LABEL_58;
  }
  else if ((*(_BYTE *)(v57 + 4) & 1) != 0 || v55 != *(float *)v57)
  {
    goto LABEL_58;
  }
  v58 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel, &v115, 0, 0);
  v59 = *v58;
  v60 = (unsigned __int8 *)(a2
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess(a2+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel, &v114, 0, 0);
  v61 = *v60;
  if (v59 == 8)
  {
    if (v61 != 8)
      goto LABEL_58;
  }
  else if (v61 == 8 || v59 != v61)
  {
    goto LABEL_58;
  }
  v62 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias, &v113, 0, 0);
  v63 = *v62;
  v64 = (unsigned __int8 *)(a2
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess(a2+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias, &v112, 0, 0);
  v65 = *v64;
  if (v63 == 2)
  {
    if (v65 != 2)
      goto LABEL_58;
  }
  else if (v65 == 2 || ((((v65 & 1) == 0) ^ v63) & 1) == 0)
  {
    goto LABEL_58;
  }
  v66 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude, &v111, 0, 0);
  v67 = *(float *)v66;
  v68 = *(_BYTE *)(v66 + 4);
  v69 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess(a2+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude, &v110, 0, 0);
  if ((v68 & 1) != 0)
  {
    if ((*(_BYTE *)(v69 + 4) & 1) == 0)
      goto LABEL_58;
  }
  else if ((*(_BYTE *)(v69 + 4) & 1) != 0 || v67 != *(float *)v69)
  {
    goto LABEL_58;
  }
  v70 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination, &v109, 0, 0);
  v71 = *(float *)v70;
  v72 = *(_BYTE *)(v70 + 4);
  v73 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess(a2+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination, &v108, 0, 0);
  if ((v72 & 1) != 0)
  {
    if ((*(_BYTE *)(v73 + 4) & 1) == 0)
      goto LABEL_58;
  }
  else if ((*(_BYTE *)(v73 + 4) & 1) != 0 || v71 != *(float *)v73)
  {
    goto LABEL_58;
  }
  v74 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal, &v107, 0, 0);
  v75 = *(float *)v74;
  v76 = *(_BYTE *)(v74 + 4);
  v77 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess(a2+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal, &v106, 0, 0);
  if ((v76 & 1) != 0)
  {
    if ((*(_BYTE *)(v77 + 4) & 1) != 0)
      goto LABEL_55;
LABEL_58:
    swift_release(v34);
    swift_release(a2);
    return 0;
  }
  if ((*(_BYTE *)(v77 + 4) & 1) != 0 || v75 != *(float *)v77)
    goto LABEL_58;
LABEL_55:
  v78 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, &v105, 0, 0);
  v79 = v95;
  sub_10000E660(v78, v95, &qword_10036E528);
  v80 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(a2+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, &v104, 0, 0);
  v81 = v96;
  v82 = v96 + *(int *)(v92 + 48);
  sub_10000E660(v79, v96, &qword_10036E528);
  sub_10000E660(v80, v82, &qword_10036E528);
  v83 = v94;
  v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  if (v84(v81, 1, v94) == 1)
  {
    swift_release(v34);
    swift_release(a2);
    sub_100015704(v95, &qword_10036E528);
    if (v84(v82, 1, v83) == 1)
    {
      sub_100015704(v96, &qword_10036E528);
      return 1;
    }
LABEL_62:
    sub_100015704(v96, &qword_1003753A0);
    return 0;
  }
  sub_10000E660(v96, v91, &qword_10036E528);
  if (v84(v82, 1, v83) == 1)
  {
    swift_release(v34);
    swift_release(a2);
    sub_100015704(v95, &qword_10036E528);
    sub_100004030(v91, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    goto LABEL_62;
  }
  v86 = v90;
  sub_100003E08(v82, v90, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  v87 = v91;
  v88 = sub_10011E028(v91, v86, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  swift_release(v34);
  swift_release(a2);
  sub_100004030(v86, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_100015704(v95, &qword_10036E528);
  sub_100004030(v87, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_100015704(v96, &qword_10036E528);
  return (v88 & 1) != 0;
}

Swift::Int sub_1000F6370()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &qword_10036E798, (uint64_t)&unk_1002D4AE0);
}

uint64_t sub_1000F638C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_1003944B0, &qword_1003944B8, (uint64_t)sub_1000F4618, a2);
}

uint64_t sub_1000F63A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F4D40(a1, a2, a3);
}

uint64_t sub_1000F63BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F5030(a1, a2, a3);
}

uint64_t sub_1000F63D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F88, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&unk_1002D4A58);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F6420@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003944A8, (uint64_t)qword_100383F78, (uint64_t)sub_1000F42A0, a1);
}

uint64_t sub_1000F643C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F710, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&unk_1002D49E0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F647C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F710, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&unk_1002D49E0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F64D0()
{
  return &unk_1003534A8;
}

unint64_t sub_1000F64DC()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000F64F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383F90);
  sub_10000E6A4(v0, (uint64_t)qword_100383F90);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "timestamp";
  *(_QWORD *)(v9 + 8) = 9;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "compass";
  *(_QWORD *)(v13 + 8) = 7;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "compass_cal_quality";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "gyro_magnitude";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "is_location_available";
  *(_QWORD *)(v18 + 8) = 21;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000F6708()
{
  return sub_100008BD0(&qword_1003944C0, (uint64_t)qword_100383F90, (uint64_t)sub_1000F64F8);
}

uint64_t sub_1000F6724@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003944C0, (uint64_t)qword_100383F90, (uint64_t)sub_1000F64F8, a1);
}

uint64_t sub_1000F6740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  uint64_t v18;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 20);
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v14 = (unint64_t *)&qword_10036E1E0;
          v15 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v16 = &unk_1002CF5A8;
          goto LABEL_12;
        case 2:
          v12 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 24);
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
          v14 = &qword_10036F710;
          v15 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass;
          v16 = &unk_1002D49E0;
LABEL_12:
          v17 = sub_10000FD38(v14, v15, (uint64_t)v16);
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v12, v13, v17, a2, a3);
          goto LABEL_6;
        case 3:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 28);
          goto LABEL_5;
        case 4:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 32);
LABEL_5:
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v10, a2, a3);
          goto LABEL_6;
        case 5:
          v18 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v18 + 36), a2, a3);
LABEL_6:
          v9 = v11;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000F68D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v5 = v3;
  result = sub_100105B68(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
  if (!v4)
  {
    sub_1000F6A10(v5, a1, a2, a3);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
    v11 = v10;
    v12 = v5 + *(int *)(v10 + 28);
    if ((*(_BYTE *)(v12 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3, a2, a3, *(float *)v12);
    v13 = v5 + *(int *)(v11 + 32);
    if ((*(_BYTE *)(v13 + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4, a2, a3, *(float *)v13);
    v14 = *(unsigned __int8 *)(v5 + *(int *)(v11 + 36));
    if (v14 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 5, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000F6A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E530);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E530);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E530);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  v15 = sub_10000FD38(&qword_10036F710, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&unk_1002D49E0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

Swift::Int sub_1000F6B88()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &qword_10036E7A0, (uint64_t)&unk_1002D4C48);
}

uint64_t sub_1000F6BA4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + a1[6];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = a1[8];
  v10 = a2 + a1[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a2 + v9;
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_1000F6C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F6740(a1, a2, a3);
}

uint64_t sub_1000F6C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F68D4(a1, a2, a3);
}

uint64_t sub_1000F6C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F80, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&unk_1002D4BC0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F6CCC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003944C0, (uint64_t)qword_100383F90, (uint64_t)sub_1000F64F8, a1);
}

uint64_t sub_1000F6CE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E7A8, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&unk_1002D4B48);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F6D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E7A8, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&unk_1002D4B48);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F6D7C()
{
  return &unk_1003534B8;
}

unint64_t sub_1000F6D88()
{
  return 0xD000000000000020;
}

uint64_t sub_1000F6DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383FA8);
  sub_10000E6A4(v0, (uint64_t)qword_100383FA8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "event_receipt_time";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "sample";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000F6EFC()
{
  return sub_100008BD0(&qword_1003944C8, (uint64_t)qword_100383FA8, (uint64_t)sub_1000F6DA4);
}

uint64_t sub_1000F6F18@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003944C8, (uint64_t)qword_100383FA8, (uint64_t)sub_1000F6DA4, a1);
}

uint64_t sub_1000F6F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCC40(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &qword_10036E7A8, (uint64_t)&unk_1002D4B48);
}

uint64_t sub_1000F6F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1000F7050(v3, a1, a2, a3);
  if (!v4)
  {
    v9 = *(_QWORD *)v3;
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
      v11 = sub_10000FD38(&qword_10036E7A8, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&unk_1002D4B48);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2, v10, v11, a2, a3);
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000F7050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F71C4(uint64_t *a1, uint64_t *a2)
{
  return sub_1001188DC(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t (*)(char *, char *))sub_10011BC78) & 1;
}

Swift::Int sub_1000F71F4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_Compass, &qword_10036E7B0, (uint64_t)&unk_1002D4DB0);
}

uint64_t sub_1000F7210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F6F68(a1, a2, a3);
}

uint64_t sub_1000F7224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F78, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&unk_1002D4D28);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F7274@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003944C8, (uint64_t)qword_100383FA8, (uint64_t)sub_1000F6DA4, a1);
}

uint64_t sub_1000F7290(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F738, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&unk_1002D4CB0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F72D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F738, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&unk_1002D4CB0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F7320()
{
  return &unk_1003534C8;
}

unint64_t sub_1000F732C()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1000F7348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383FC0);
  sub_10000E6A4(v0, (uint64_t)qword_100383FC0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3130;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "quaternion";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "user_acceleration";
  *(_QWORD *)(v13 + 8) = 17;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "rotation_rate";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "magnetic_field";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "magnetic_field_calibration_level";
  *((_QWORD *)v19 + 1) = 32;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "doing_yaw_correction";
  *((_QWORD *)v21 + 1) = 20;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "doing_bias_estimation";
  *((_QWORD *)v23 + 1) = 21;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 8;
  *(_QWORD *)v25 = "is_initialized";
  *((_QWORD *)v25 + 1) = 14;
  v25[16] = 2;
  v12();
  v26 = v8 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 8 * v4) = 9;
  *(_QWORD *)v26 = "heading";
  *(_QWORD *)(v26 + 8) = 7;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000F7634()
{
  return sub_100008BD0(&qword_1003944D0, (uint64_t)qword_100383FC0, (uint64_t)sub_1000F7348);
}

uint64_t sub_1000F7650@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003944D0, (uint64_t)qword_100383FC0, (uint64_t)sub_1000F7348, a1);
}

uint64_t sub_1000F766C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v8;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(v1+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, 1, 1, v5);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(v1+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, 1, 1, v5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel) = 8;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p) = 2;
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  qword_1003944E0 = v1;
  return result;
}

uint64_t sub_1000F77A0()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, &qword_10036E528);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, &qword_10036E520);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, &qword_10036E520);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, &qword_10036E520);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000F7824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10010F308(v13);
    swift_release(v10);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, v32, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
          v21 = &qword_10036F6F8;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          v23 = &unk_1002D4878;
          goto LABEL_12;
        case 2:
          v24 = OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
          goto LABEL_11;
        case 3:
          v24 = OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
          goto LABEL_11;
        case 4:
          v24 = OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
LABEL_11:
          v19 = v15 + v24;
          swift_beginAccess(v15 + v24, v32, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
          v21 = &qword_10036F6E0;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3;
          v23 = &unk_1002D4710;
LABEL_12:
          v25 = sub_10000FD38(v21, v22, (uint64_t)v23);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v25, a2, a3);
          goto LABEL_19;
        case 5:
          v27 = v15
              + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel, v32, 33, 0);
          v28 = sub_10014A68C();
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v27, &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel, v28, a2, a3);
          goto LABEL_19;
        case 6:
          v29 = OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection;
          goto LABEL_17;
        case 7:
          v29 = OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation;
          goto LABEL_17;
        case 8:
          v29 = OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p;
LABEL_17:
          v30 = v15 + v29;
          swift_beginAccess(v15 + v29, v32, 33, 0);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v30, a2, a3);
          goto LABEL_19;
        case 9:
          v31 = v15
              + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading, v32, 33, 0);
          v26 = v5;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v31, a2, a3);
LABEL_19:
          v5 = v26;
          swift_endAccess(v32);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_1000F7B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];
  _BYTE v25[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20));
  v10 = swift_retain(v9);
  sub_1000F7DA0(v10, a1, a2, a3);
  if (v4)
    return swift_release(v9);
  sub_1000F7F2C(v9, a1, a2, a3);
  sub_1000F80B8(v9, a1, a2, a3);
  sub_1000F8244(v9, a1, a2, a3);
  v12 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel, v25, 0, 0);
  if (*v12 != 8)
  {
    v24[0] = *v12;
    v13 = sub_10014A68C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v24, 5, &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel, v13, a2, a3);
  }
  v14 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection, v24, 0, 0);
  v15 = *v14;
  if (v15 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v15 & 1, 6, a2, a3);
  v16 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation, v23, 0, 0);
  v17 = *v16;
  if (v17 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v17 & 1, 7, a2, a3);
  v18 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p, v22, 0, 0);
  v19 = *v18;
  if (v19 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v19 & 1, 8, a2, a3);
  v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading, v21, 0, 0);
  if ((*(_BYTE *)(v20 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(9, a2, a3, *(float *)v20);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000F7DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E528);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E528);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E528);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  v15 = sub_10000FD38(&qword_10036F6F8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&unk_1002D4878);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000F7F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E520);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E520);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v15 = sub_10000FD38(&qword_10036F6E0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&unk_1002D4710);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000F80B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E520);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E520);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v15 = sub_10000FD38(&qword_10036F6E0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&unk_1002D4710);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000F8244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E520);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E520);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E520);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v15 = sub_10000FD38(&qword_10036F6E0, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&unk_1002D4710);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000F83D0(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, sub_1000F83F8) & 1;
}

uint64_t sub_1000F83F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unsigned __int8 *v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  unsigned __int8 *v85;
  int v86;
  unsigned __int8 *v87;
  int v88;
  unsigned __int8 *v89;
  int v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int8 *v93;
  int v94;
  unsigned __int8 *v95;
  int v96;
  uint64_t v97;
  float v98;
  char v99;
  uint64_t v100;
  float v101;
  int v102;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE v134[24];
  _BYTE v135[24];
  _BYTE v136[24];
  _BYTE v137[24];
  _BYTE v138[24];
  _BYTE v139[32];

  v121 = a2;
  v118 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v116 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v109 = (uint64_t)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_1000039AC(&qword_100375398);
  v4 = __chkstk_darwin(v120);
  v107 = (uint64_t)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v111 = (uint64_t)&v105 - v7;
  __chkstk_darwin(v6);
  v117 = (uint64_t)&v105 - v8;
  v9 = sub_1000039AC(&qword_10036E520);
  v10 = __chkstk_darwin(v9);
  v106 = (uint64_t)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v110 = (uint64_t)&v105 - v13;
  v14 = __chkstk_darwin(v12);
  v108 = (uint64_t)&v105 - v15;
  v16 = __chkstk_darwin(v14);
  v113 = (uint64_t)&v105 - v17;
  v18 = __chkstk_darwin(v16);
  v112 = (uint64_t)&v105 - v19;
  __chkstk_darwin(v18);
  v115 = (uint64_t)&v105 - v20;
  v21 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v114 = (uint64_t)&v105 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000039AC(&qword_1003753A0);
  __chkstk_darwin(v24);
  v26 = (char *)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1000039AC(&qword_10036E528);
  v28 = __chkstk_darwin(v27);
  v119 = (uint64_t)&v105 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)&v105 - v30;
  v32 = a1;
  v33 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v33, v139, 0, 0);
  sub_10000E660(v33, (uint64_t)v31, &qword_10036E528);
  v34 = v121;
  v35 = v121
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess(v121+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, v138, 0, 0);
  v36 = (uint64_t)&v26[*(int *)(v24 + 48)];
  sub_10000E660((uint64_t)v31, (uint64_t)v26, &qword_10036E528);
  sub_10000E660(v35, v36, &qword_10036E528);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v37((uint64_t)v26, 1, v21) == 1)
  {
    v38 = v32;
    swift_retain(v32);
    swift_retain(v34);
    sub_100015704((uint64_t)v31, &qword_10036E528);
    v39 = v37(v36, 1, v21);
    v40 = v34;
    if (v39 == 1)
    {
      sub_100015704((uint64_t)v26, &qword_10036E528);
      goto LABEL_8;
    }
LABEL_6:
    sub_100015704((uint64_t)v26, &qword_1003753A0);
    goto LABEL_52;
  }
  v38 = v32;
  v41 = v119;
  sub_10000E660((uint64_t)v26, v119, &qword_10036E528);
  if (v37(v36, 1, v21) == 1)
  {
    swift_retain(v38);
    v40 = v34;
    swift_retain(v34);
    sub_100015704((uint64_t)v31, &qword_10036E528);
    sub_100004030(v41, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    goto LABEL_6;
  }
  v42 = v114;
  sub_100003E08(v36, v114, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  swift_retain(v38);
  v40 = v34;
  swift_retain(v34);
  v43 = sub_10011E028(v41, v42, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_100004030(v42, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_100015704((uint64_t)v31, &qword_10036E528);
  sub_100004030(v41, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_100015704((uint64_t)v26, &qword_10036E528);
  if ((v43 & 1) == 0)
    goto LABEL_52;
LABEL_8:
  v44 = v38
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, v137, 0, 0);
  v45 = v44;
  v46 = v115;
  sub_10000E660(v45, v115, &qword_10036E520);
  v47 = v46;
  v48 = v40
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess(v40+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, v136, 0, 0);
  v49 = v117;
  v50 = v117 + *(int *)(v120 + 48);
  sub_10000E660(v47, v117, &qword_10036E520);
  sub_10000E660(v48, v50, &qword_10036E520);
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  v52 = v118;
  if (v51(v49, 1, v118) == 1)
  {
    sub_100015704(v47, &qword_10036E520);
    if (v51(v50, 1, v52) == 1)
    {
      sub_100015704(v49, &qword_10036E520);
      goto LABEL_15;
    }
LABEL_13:
    sub_100015704(v49, &qword_100375398);
    goto LABEL_52;
  }
  v53 = v112;
  sub_10000E660(v49, v112, &qword_10036E520);
  if (v51(v50, 1, v52) == 1)
  {
    sub_100015704(v47, &qword_10036E520);
    sub_100004030(v53, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_13;
  }
  v54 = v40;
  v55 = v47;
  v56 = v109;
  sub_100003E08(v50, v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v57 = sub_10011BAC8(v53, v56);
  sub_100004030(v56, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v58 = v55;
  v40 = v54;
  sub_100015704(v58, &qword_10036E520);
  sub_100004030(v53, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015704(v49, &qword_10036E520);
  if ((v57 & 1) == 0)
    goto LABEL_52;
LABEL_15:
  v59 = v38
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, v135, 0, 0);
  v60 = v113;
  sub_10000E660(v59, v113, &qword_10036E520);
  v61 = v40
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess(v40+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, v134, 0, 0);
  v62 = v111;
  v63 = v111 + *(int *)(v120 + 48);
  sub_10000E660(v60, v111, &qword_10036E520);
  v64 = v62;
  sub_10000E660(v61, v63, &qword_10036E520);
  if (v51(v62, 1, v52) == 1)
  {
    sub_100015704(v60, &qword_10036E520);
    v65 = v51(v63, 1, v52);
    v66 = v110;
    if (v65 == 1)
    {
      sub_100015704(v64, &qword_10036E520);
      goto LABEL_22;
    }
LABEL_20:
    sub_100015704(v64, &qword_100375398);
    goto LABEL_52;
  }
  v67 = v108;
  sub_10000E660(v62, v108, &qword_10036E520);
  v68 = v51(v63, 1, v52);
  v66 = v110;
  if (v68 == 1)
  {
    sub_100015704(v113, &qword_10036E520);
    sub_100004030(v67, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_20;
  }
  v69 = v67;
  v70 = v109;
  sub_100003E08(v63, v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v71 = sub_10011BAC8(v69, v70);
  sub_100004030(v70, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015704(v113, &qword_10036E520);
  sub_100004030(v69, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015704(v111, &qword_10036E520);
  if ((v71 & 1) == 0)
    goto LABEL_52;
LABEL_22:
  v72 = v38
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, &v133, 0, 0);
  sub_10000E660(v72, v66, &qword_10036E520);
  v73 = v40
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess(v40+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, &v132, 0, 0);
  v74 = v66;
  v75 = v107;
  v76 = v107 + *(int *)(v120 + 48);
  sub_10000E660(v74, v107, &qword_10036E520);
  sub_10000E660(v73, v76, &qword_10036E520);
  if (v51(v75, 1, v52) == 1)
  {
    sub_100015704(v74, &qword_10036E520);
    if (v51(v76, 1, v52) == 1)
    {
      sub_100015704(v75, &qword_10036E520);
      goto LABEL_29;
    }
LABEL_27:
    sub_100015704(v75, &qword_100375398);
    goto LABEL_52;
  }
  v77 = v106;
  sub_10000E660(v75, v106, &qword_10036E520);
  if (v51(v76, 1, v52) == 1)
  {
    sub_100015704(v110, &qword_10036E520);
    sub_100004030(v77, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_27;
  }
  v78 = v77;
  v79 = v109;
  sub_100003E08(v76, v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v80 = sub_10011BAC8(v78, v79);
  sub_100004030(v79, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015704(v110, &qword_10036E520);
  sub_100004030(v78, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100015704(v75, &qword_10036E520);
  if ((v80 & 1) == 0)
    goto LABEL_52;
LABEL_29:
  v81 = (unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel, &v131, 0, 0);
  v82 = *v81;
  v83 = (unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess(v40+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel, &v130, 0, 0);
  v84 = *v83;
  if (v82 == 8)
  {
    if (v84 != 8)
      goto LABEL_52;
  }
  else if (v84 == 8 || v82 != v84)
  {
    goto LABEL_52;
  }
  v85 = (unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection, &v129, 0, 0);
  v86 = *v85;
  v87 = (unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess(v40+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection, &v128, 0, 0);
  v88 = *v87;
  if (v86 == 2)
  {
    if (v88 != 2)
      goto LABEL_52;
  }
  else if (v88 == 2 || ((((v88 & 1) == 0) ^ v86) & 1) == 0)
  {
    goto LABEL_52;
  }
  v89 = (unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation, &v127, 0, 0);
  v90 = *v89;
  v91 = (unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess(v40+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation, &v126, 0, 0);
  v92 = *v91;
  if (v90 == 2)
  {
    if (v92 != 2)
      goto LABEL_52;
  }
  else if (v92 == 2 || ((((v92 & 1) == 0) ^ v90) & 1) == 0)
  {
    goto LABEL_52;
  }
  v93 = (unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p, &v125, 0, 0);
  v94 = *v93;
  v95 = (unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess(v40+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p, &v124, 0, 0);
  v96 = *v95;
  if (v94 == 2)
  {
    if (v96 == 2)
      goto LABEL_49;
LABEL_52:
    swift_release(v38);
    swift_release(v40);
    return 0;
  }
  if (v96 == 2 || ((((v96 & 1) == 0) ^ v94) & 1) == 0)
    goto LABEL_52;
LABEL_49:
  v97 = v38
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess(v38+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading, &v123, 0, 0);
  v98 = *(float *)v97;
  v99 = *(_BYTE *)(v97 + 4);
  swift_release(v38);
  v100 = v40
       + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess(v40+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading, &v122, 0, 0);
  v101 = *(float *)v100;
  v102 = *(unsigned __int8 *)(v100 + 4);
  swift_release(v40);
  if ((v99 & 1) != 0)
  {
    if (!v102)
      return 0;
  }
  else
  {
    if (v98 == v101)
      v104 = v102;
    else
      v104 = 1;
    if ((v104 & 1) != 0)
      return 0;
  }
  return 1;
}

Swift::Int sub_1000F901C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &qword_10036E7B8, (uint64_t)&unk_1002D4F18);
}

uint64_t sub_1000F9038@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_1003944D8, &qword_1003944E0, (uint64_t)sub_1000F766C, a2);
}

uint64_t sub_1000F9054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7824(a1, a2, a3);
}

uint64_t sub_1000F9068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F7B00(a1, a2, a3);
}

uint64_t sub_1000F907C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F70, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&unk_1002D4E90);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F90CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003944D0, (uint64_t)qword_100383FC0, (uint64_t)sub_1000F7348, a1);
}

uint64_t sub_1000F90E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F750, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&unk_1002D4E18);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F9128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F750, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&unk_1002D4E18);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F9178()
{
  return &unk_1003534D8;
}

unint64_t sub_1000F9184()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1000F91A0(uint64_t a1)
{
  return sub_1000FB324(a1, qword_100383FD8, (uint64_t)"bits", 4, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t sub_1000F91C0()
{
  return sub_100008BD0(&qword_1003944E8, (uint64_t)qword_100383FD8, (uint64_t)sub_1000F91A0);
}

uint64_t sub_1000F91DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003944E8, (uint64_t)qword_100383FD8, (uint64_t)sub_1000F91A0, a1);
}

uint64_t sub_1000F91F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t result;
  char v10;
  uint64_t v11;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0)
      break;
    if (result == 1)
    {
      v11 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
      dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v11 + 20), a2, a3);
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_1000F928C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned int *v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v10 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v10[1] & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v10, 1, a2, a3);
  if (!v4)
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  return result;
}

Swift::Int sub_1000F9324()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, &qword_10036E7C0, (uint64_t)&unk_1002D5080);
}

uint64_t sub_1000F9340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 20);
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

uint64_t sub_1000F9378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F91F8(a1, a2, a3);
}

uint64_t sub_1000F938C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F928C(a1, a2, a3);
}

uint64_t sub_1000F93A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F68, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&unk_1002D4FF8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000F93F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003944E8, (uint64_t)qword_100383FD8, (uint64_t)sub_1000F91A0, a1);
}

uint64_t sub_1000F940C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F768, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&unk_1002D4F80);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F944C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F768, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&unk_1002D4F80);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000F94A0()
{
  return &unk_1003534E8;
}

unint64_t sub_1000F94AC()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1000F94C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v26;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100383FF0);
  sub_10000E6A4(v0, (uint64_t)qword_100383FF0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v26 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v26 + 16) = xmmword_1002C40B0;
  v7 = v26 + v6;
  v8 = v26 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v26 + v6) = 1;
  *(_QWORD *)v8 = "timestamp";
  *(_QWORD *)(v8 + 8) = 9;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "device_motion";
  *(_QWORD *)(v12 + 8) = 13;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "fsync";
  *((_QWORD *)v14 + 1) = 5;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "client_id";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "mode";
  *((_QWORD *)v18 + 1) = 4;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "status";
  *((_QWORD *)v20 + 1) = 6;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "accuracy";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "vision_compass_bias";
  *((_QWORD *)v24 + 1) = 19;
  v24[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v26);
}

uint64_t sub_1000F9770()
{
  return sub_100008BD0(&qword_1003944F0, (uint64_t)qword_100383FF0, (uint64_t)sub_1000F94C8);
}

uint64_t sub_1000F978C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003944F0, (uint64_t)qword_100383FF0, (uint64_t)sub_1000F94C8, a1);
}

uint64_t sub_1000F97A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 20);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v11 = (unint64_t *)&qword_10036E1E0;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v13 = &unk_1002CF5A8;
          goto LABEL_11;
        case 2:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 24);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
          v11 = &qword_10036F750;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion;
          v13 = &unk_1002D4E18;
          goto LABEL_11;
        case 3:
          v14 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v14 + 28), a2, a3);
          break;
        case 4:
          v15 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v15 + 32), a2, a3);
          break;
        case 5:
          v16 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36);
          v17 = sub_10014A648();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v16, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode, v17, a2, a3);
          break;
        case 6:
          v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 40);
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
          v11 = &qword_10036F768;
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus;
          v13 = &unk_1002D4F80;
LABEL_11:
          v18 = sub_10000FD38(v11, v12, (uint64_t)v13);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v18, a2, a3);
          break;
        case 7:
          v19 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 44);
          goto LABEL_14;
        case 8:
          v19 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 48);
LABEL_14:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v19, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000F99F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;

  v5 = v3;
  result = sub_100105B68(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
  if (!v4)
  {
    sub_1000F9B8C(v5, a1, a2, a3);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
    v11 = v10;
    v12 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 28));
    if (v12 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 3, a2, a3);
    v13 = (unsigned int *)(v5 + *(int *)(v11 + 32));
    if ((v13[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v13, 4, a2, a3);
    sub_1000F9D00(v5, a1, a2, a3);
    sub_1000F9D88(v5, a1, a2, a3);
    sub_1000F9EFC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
    sub_1000F9F70(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000F9B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E538);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E538);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E538);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  v15 = sub_10000FD38(&qword_10036F750, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&unk_1002D4E18);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t sub_1000F9D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v8;
  char v9;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 36)) != 5)
  {
    v9 = *(_BYTE *)(a1 + *(int *)(result + 36));
    v8 = sub_10014A648();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v9, 5, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode, v8, a3, a4);
  }
  return result;
}

uint64_t sub_1000F9D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E540);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  sub_10000E660(a1 + *(int *)(v13 + 40), (uint64_t)v8, &qword_10036E540);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E540);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  v15 = sub_10000FD38(&qword_10036F768, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&unk_1002D4F80);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t sub_1000F9EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v9;

  result = a5(0);
  v9 = a1 + *(int *)(result + 44);
  if ((*(_BYTE *)(v9 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(7, a3, a4, *(float *)v9);
  return result;
}

uint64_t sub_1000F9F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v9;

  result = a5(0);
  v9 = a1 + *(int *)(result + 48);
  if ((*(_BYTE *)(v9 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(8, a3, a4, *(float *)v9);
  return result;
}

Swift::Int sub_1000F9FE8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10036E7C8, (uint64_t)&unk_1002D51E8);
}

uint64_t sub_1000FA004@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + a1[6];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  v9 = a2 + v8;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1[10];
  *(_BYTE *)(a2 + a1[9]) = 5;
  v11 = a2 + v10;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v14 = a1[12];
  v15 = a2 + a1[11];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a2 + v14;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  return result;
}

uint64_t sub_1000FA0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F97A8(a1, a2, a3);
}

uint64_t sub_1000FA108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F99F0(a1, a2, a3);
}

uint64_t sub_1000FA11C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F60, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&unk_1002D5160);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FA16C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003944F0, (uint64_t)qword_100383FF0, (uint64_t)sub_1000F94C8, a1);
}

uint64_t sub_1000FA188(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E7D0, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&unk_1002D50E8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FA1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E7D0, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&unk_1002D50E8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FA21C()
{
  return &unk_1003534F8;
}

unint64_t sub_1000FA228()
{
  return 0xD000000000000025;
}

uint64_t sub_1000FA244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384008);
  sub_10000E6A4(v0, (uint64_t)qword_100384008);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "event_receipt_time";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "sample";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FA39C()
{
  return sub_100008BD0(&qword_1003944F8, (uint64_t)qword_100384008, (uint64_t)sub_1000FA244);
}

uint64_t sub_1000FA3B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003944F8, (uint64_t)qword_100384008, (uint64_t)sub_1000FA244, a1);
}

uint64_t sub_1000FA3D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCC40(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10036E7D0, (uint64_t)&unk_1002D50E8);
}

uint64_t sub_1000FA408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1000FA4F0(v3, a1, a2, a3);
  if (!v4)
  {
    v9 = *(_QWORD *)v3;
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
      v11 = sub_10000FD38(&qword_10036E7D0, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&unk_1002D50E8);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2, v10, v11, a2, a3);
    }
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000FA4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000FA664(uint64_t *a1, uint64_t *a2)
{
  return sub_1001188DC(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t (*)(char *, char *))sub_100117E84) & 1;
}

Swift::Int sub_1000FA694()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, &qword_10036E7D8, (uint64_t)&unk_1002D5350);
}

uint64_t sub_1000FA6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FA408(a1, a2, a3);
}

uint64_t sub_1000FA6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F58, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&unk_1002D52C8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FA714@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003944F8, (uint64_t)qword_100384008, (uint64_t)sub_1000FA244, a1);
}

uint64_t sub_1000FA730(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F790, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&unk_1002D5250);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FA770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F790, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&unk_1002D5250);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FA7C0()
{
  return &unk_100353508;
}

unint64_t sub_1000FA7CC()
{
  return 0xD000000000000037;
}

uint64_t sub_1000FA7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384020);
  sub_10000E6A4(v0, (uint64_t)qword_100384020);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40B0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "x";
  *(_QWORD *)(v9 + 8) = 1;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "y";
  *(_QWORD *)(v13 + 8) = 1;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "z";
  *((_QWORD *)v15 + 1) = 1;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "magnitude";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "horizontal";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "declination";
  *((_QWORD *)v21 + 1) = 11;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "inclination";
  *((_QWORD *)v23 + 1) = 11;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 8;
  *(_QWORD *)v25 = "timestamp";
  *((_QWORD *)v25 + 1) = 9;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FAA88()
{
  return sub_100008BD0(&qword_100394500, (uint64_t)qword_100384020, (uint64_t)sub_1000FA7E8);
}

uint64_t sub_1000FAAA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394500, (uint64_t)qword_100384020, (uint64_t)sub_1000FA7E8, a1);
}

uint64_t sub_1000FAAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 20);
          goto LABEL_12;
        case 2:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 24);
          goto LABEL_12;
        case 3:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 28);
          goto LABEL_12;
        case 4:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 32);
          goto LABEL_12;
        case 5:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 36);
          goto LABEL_12;
        case 6:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 40);
          goto LABEL_12;
        case 7:
          v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 44);
LABEL_12:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v9, a2, a3);
          break;
        case 8:
          v10 = v3
              + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v12 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000FAC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v11);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v14);
    sub_1000FAE14(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    sub_1000FAE88(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    sub_1000FAEFC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    sub_1000FAF70(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000FAE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v9;

  result = a5(0);
  v9 = a1 + *(int *)(result + 36);
  if ((*(_BYTE *)(v9 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5, a3, a4, *(double *)v9);
  return result;
}

uint64_t sub_1000FAE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v9;

  result = a5(0);
  v9 = a1 + *(int *)(result + 40);
  if ((*(_BYTE *)(v9 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(6, a3, a4, *(double *)v9);
  return result;
}

uint64_t sub_1000FAEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v9;

  result = a5(0);
  v9 = a1 + *(int *)(result + 44);
  if ((*(_BYTE *)(v9 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(7, a3, a4, *(double *)v9);
  return result;
}

uint64_t sub_1000FAF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  sub_10000E660(a1 + *(int *)(v13 + 48), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 8, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_1000FB0E8()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, &qword_10036E7E0, (uint64_t)&unk_1002D54B8);
}

uint64_t sub_1000FB104@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + v4;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1[8];
  v8 = a2 + a1[7];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a2 + v7;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1[10];
  v11 = a2 + a1[9];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v10;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1[12];
  v14 = a2 + a1[11];
  *(_QWORD *)v14 = 0;
  v15 = a2 + v13;
  *(_BYTE *)(v14 + 8) = 1;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
}

uint64_t sub_1000FB1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FAAC0(a1, a2, a3);
}

uint64_t sub_1000FB1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FAC50(a1, a2, a3);
}

uint64_t sub_1000FB1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F50, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&unk_1002D5430);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FB22C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394500, (uint64_t)qword_100384020, (uint64_t)sub_1000FA7E8, a1);
}

uint64_t sub_1000FB248(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F7A8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&unk_1002D53B8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FB288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F7A8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&unk_1002D53B8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FB2DC()
{
  return &unk_100353518;
}

unint64_t sub_1000FB2E8()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_1000FB304(uint64_t a1)
{
  return sub_1000FB324(a1, qword_100384038, (uint64_t)"data", 4, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t sub_1000FB324(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v9, a2);
  sub_10000E6A4(v9, (uint64_t)a2);
  v10 = sub_1000039AC(&qword_10036A618);
  v11 = sub_1000039AC(&qword_10036A620);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1002CAB70;
  v17 = v16 + v15 + *(int *)(v11 + 48);
  *(_QWORD *)(v16 + v15) = 1;
  *(_QWORD *)v17 = a3;
  *(_QWORD *)(v17 + 8) = a4;
  *(_BYTE *)(v17 + 16) = 2;
  v18 = *a5;
  v19 = type metadata accessor for _NameMap.NameDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  return _NameMap.init(dictionaryLiteral:)(v16);
}

uint64_t sub_1000FB42C()
{
  return sub_100008BD0(&qword_100394508, (uint64_t)qword_100384038, (uint64_t)sub_1000FB304);
}

uint64_t sub_1000FB448@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394508, (uint64_t)qword_100384038, (uint64_t)sub_1000FB304, a1);
}

uint64_t sub_1000FB464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FB498(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, &qword_10036F7A8, (uint64_t)&unk_1002D53B8);
}

uint64_t sub_1000FB498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t i;
  uint64_t result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v12, i);
    if (v8 || (v15 & 1) != 0)
      break;
    if (result == 1)
    {
      v16 = v7 + *(int *)(a4(0) + 20);
      v17 = a5(0);
      v18 = sub_10000FD38(a6, a5, a7);
      dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v16, v17, v18, a2, a3);
    }
    v8 = 0;
    v12 = a2;
  }
  return result;
}

uint64_t sub_1000FB5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_1000FB5F8(v3, a1, a2, a3);
  if (!v4)
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  return result;
}

uint64_t sub_1000FB5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E548);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
  sub_10000E660(a1 + *(int *)(v13 + 20), (uint64_t)v8, &qword_10036E548);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E548);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  v15 = sub_10000FD38(&qword_10036F7A8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&unk_1002D53B8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Int sub_1000FB770()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, &qword_10036E7E8, (uint64_t)&unk_1002D5620);
}

uint64_t sub_1000FB78C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000EE498(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a2);
}

uint64_t sub_1000FB798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FB5A4(a1, a2, a3);
}

uint64_t sub_1000FB7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F48, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&unk_1002D5598);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FB7FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394508, (uint64_t)qword_100384038, (uint64_t)sub_1000FB304, a1);
}

uint64_t sub_1000FB818(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F7C0, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&unk_1002D5520);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FB858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F7C0, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&unk_1002D5520);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FB8A8()
{
  return &unk_100353528;
}

unint64_t sub_1000FB8B4()
{
  return 0xD000000000000028;
}

uint64_t sub_1000FB8D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v29;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384050);
  sub_10000E6A4(v0, (uint64_t)qword_100384050);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v29 = swift_allocObject(v1, v6 + 10 * v4, v5 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_1002C3110;
  v7 = v29 + v6;
  v8 = v29 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v29 + v6) = 1;
  *(_QWORD *)v8 = "mac";
  *(_QWORD *)(v8 + 8) = 3;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.same(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v29 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "ssid";
  *(_QWORD *)(v12 + 8) = 4;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v29 + v6 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "rssi_db";
  *((_QWORD *)v14 + 1) = 7;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v29 + v6 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "mode";
  *((_QWORD *)v16 + 1) = 4;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v29 + v6 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "channel";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v29 + v6 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "age_s";
  *((_QWORD *)v20 + 1) = 5;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v29 + v6 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "is_apple_personal_hotspot";
  *((_QWORD *)v22 + 1) = 25;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v29 + v6 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "is_moving";
  *((_QWORD *)v24 + 1) = 9;
  v24[16] = 2;
  v11();
  v25 = v29 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "band";
  *(_QWORD *)(v25 + 8) = 4;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v29 + v6 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "frequency_khz";
  *((_QWORD *)v27 + 1) = 13;
  v27[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v29);
}

uint64_t sub_1000FBBE0()
{
  return sub_100008BD0(&qword_100394510, (uint64_t)qword_100384050, (uint64_t)sub_1000FB8D0);
}

uint64_t sub_1000FBBFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394510, (uint64_t)qword_100384050, (uint64_t)sub_1000FB8D0, a1);
}

uint64_t sub_1000FBC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  ValueMetadata *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)(v3 + *(int *)(v9 + 20), a2, a3);
          break;
        case 2:
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + *(int *)(v10 + 24), a2, a3);
          break;
        case 3:
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularSInt32Field(value:)(v3 + *(int *)(v11 + 28), a2, a3);
          break;
        case 4:
          v12 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 32);
          v13 = sub_10014A604();
          v14 = v12;
          v15 = &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode;
          goto LABEL_15;
        case 5:
          v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 36);
          goto LABEL_17;
        case 6:
          v17 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + *(int *)(v17 + 40), a2, a3);
          break;
        case 7:
          v18 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 44);
          goto LABEL_13;
        case 8:
          v18 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 48);
LABEL_13:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v18, a2, a3);
          break;
        case 9:
          v19 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52);
          v13 = sub_10000FCF4();
          v14 = v19;
          v15 = &type metadata for CLP_LogEntry_PrivateData_WifiRfBand;
LABEL_15:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v14, v15, v13, a2, a3);
          break;
        case 10:
          v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56);
LABEL_17:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + v16, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000FBE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  char v16;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = (_QWORD *)(v5 + v10[6]);
    v13 = v12[1];
    if (v13)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v12, v13, 2, a2, a3);
    v14 = (unsigned int *)(v5 + v10[7]);
    if ((v14[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularSInt32Field(value:fieldNumber:)(*v14, 3, a2, a3);
    if (*(_BYTE *)(v5 + v10[8]) != 4)
    {
      v16 = *(_BYTE *)(v5 + v10[8]);
      v15 = sub_10014A604();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v16, 4, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode, v15, a2, a3);
    }
    sub_1000FC070(v5, a1, a2, a3);
    sub_1000E1240(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    sub_1000E4E8C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    sub_1000E4F00(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    sub_1000FC0E4(v5, a1, a2, a3);
    sub_1000FC16C(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000FC070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 36));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v8, 5, a3, a4);
  return result;
}

uint64_t sub_1000FC0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v8;
  char v9;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 52)) != 4)
  {
    v9 = *(_BYTE *)(a1 + *(int *)(result + 52));
    v8 = sub_10000FCF4();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v9, 9, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand, v8, a3, a4);
  }
  return result;
}

uint64_t sub_1000FC16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 56));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v8, 10, a3, a4);
  return result;
}

Swift::Int sub_1000FC1E4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, &qword_10036E7F0, (uint64_t)&unk_1002D5788);
}

uint64_t sub_1000FC200@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_BYTE *)(a2 + v8) = 4;
  v10 = a1[10];
  v11 = a2 + a1[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a2 + v10;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v13) = 2;
  v14 = a1[14];
  *(_BYTE *)(a2 + a1[13]) = 4;
  v15 = a2 + v14;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_1000FC298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FBC18(a1, a2, a3);
}

uint64_t sub_1000FC2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FBE50(a1, a2, a3);
}

uint64_t sub_1000FC2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F40, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&unk_1002D5700);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FC310@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394510, (uint64_t)qword_100384050, (uint64_t)sub_1000FB8D0, a1);
}

uint64_t sub_1000FC32C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E1B0, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&unk_1002D5688);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FC36C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E1B0, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&unk_1002D5688);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FC3C0()
{
  return &unk_100353538;
}

unint64_t sub_1000FC3CC()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_1000FC3E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384068);
  sub_10000E6A4(v0, (uint64_t)qword_100384068);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "is_associated";
  *(_QWORD *)(v9 + 8) = 13;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "ap";
  *((_QWORD *)v13 + 1) = 2;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FC53C()
{
  return sub_100008BD0(&qword_100394518, (uint64_t)qword_100384068, (uint64_t)sub_1000FC3E8);
}

uint64_t sub_1000FC558@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394518, (uint64_t)qword_100384068, (uint64_t)sub_1000FC3E8, a1);
}

uint64_t sub_1000FC574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        v9 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 24);
        v10 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
        v11 = sub_10000FD38(&qword_10036E1B0, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&unk_1002D5688);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
      }
      else if (result == 1)
      {
        v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v12 + 20), a2, a3);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000FC698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  v10 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v10 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v10 & 1, 1, a2, a3);
  if (!v4)
  {
    sub_1000FC74C(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000FC74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E550);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E550);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E550);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  v15 = sub_10000FD38(&qword_10036E1B0, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&unk_1002D5688);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

Swift::Int sub_1000FC8C4()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, &qword_10036E7F8, (uint64_t)&unk_1002D58F0);
}

uint64_t sub_1000FC8E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 24);
  *(_BYTE *)(a2 + *(int *)(a1 + 20)) = 2;
  v5 = a2 + v4;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t sub_1000FC934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FC574(a1, a2, a3);
}

uint64_t sub_1000FC948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FC698(a1, a2, a3);
}

uint64_t sub_1000FC95C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F38, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&unk_1002D5868);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FC9AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394518, (uint64_t)qword_100384068, (uint64_t)sub_1000FC3E8, a1);
}

uint64_t sub_1000FC9C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F7E8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&unk_1002D57F0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FCA08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F7E8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&unk_1002D57F0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FCA5C()
{
  return &unk_100353548;
}

unint64_t sub_1000FCA68()
{
  return 0xD000000000000027;
}

uint64_t sub_1000FCA84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384080);
  sub_10000E6A4(v0, (uint64_t)qword_100384080);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "scan_timestamp";
  *(_QWORD *)(v9 + 8) = 14;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "access_point";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FCBD4()
{
  return sub_100008BD0(&qword_100394520, (uint64_t)qword_100384080, (uint64_t)sub_1000FCA84);
}

uint64_t sub_1000FCBF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394520, (uint64_t)qword_100384080, (uint64_t)sub_1000FCA84, a1);
}

uint64_t sub_1000FCC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCC40(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, &qword_10036E1B0, (uint64_t)&unk_1002D5688);
}

uint64_t sub_1000FCC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v13 = v7;
  v14 = a3;
  v15 = a2;
  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v8)
  {
    v26 = v14;
    while ((v17 & 1) == 0)
    {
      if (result == 2)
      {
        v18 = a5(0);
        v19 = sub_10000FD38(a6, a5, a7);
        v20 = v18;
        v14 = v26;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v13, v20, v19, v15, v26);
      }
      else if (result == 1)
      {
        v21 = v13 + *(int *)(a4(0) + 24);
        v22 = v15;
        v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        v24 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
        v25 = v23;
        v15 = v22;
        v14 = v26;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v21, v25, v24, v15, v26);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(v15, v14);
    }
  }
  return result;
}

uint64_t sub_1000FCDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1000FCE98(v3, a1, a2, a3);
  if (!v4)
  {
    v9 = *(_QWORD *)v3;
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
      v11 = sub_10000FD38(&qword_10036E1B0, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&unk_1002D5688);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2, v10, v11, a2, a3);
    }
    type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000FCE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000FD00C(uint64_t *a1, uint64_t *a2)
{
  return sub_1001188DC(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t (*)(char *, char *))sub_100115678) & 1;
}

Swift::Int sub_1000FD03C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &qword_10036E800, (uint64_t)&unk_1002D5A58);
}

uint64_t sub_1000FD058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCDB0(a1, a2, a3);
}

uint64_t sub_1000FD06C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F30, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&unk_1002D59D0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FD0BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394520, (uint64_t)qword_100384080, (uint64_t)sub_1000FCA84, a1);
}

uint64_t sub_1000FD0D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E1B8, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&unk_1002D5958);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FD118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E1B8, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&unk_1002D5958);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FD168()
{
  return &unk_100353558;
}

unint64_t sub_1000FD174()
{
  return 0xD000000000000029;
}

uint64_t sub_1000FD190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v31;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384098);
  sub_10000E6A4(v0, (uint64_t)qword_100384098);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v31 = swift_allocObject(v1, v6 + 11 * v4, v5 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_1002C40E0;
  v7 = v31 + v6;
  v8 = v31 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v31 + v6) = 1;
  *(_QWORD *)v8 = "event_receipt_time";
  *(_QWORD *)(v8 + 8) = 18;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = enum case for _NameMap.NameDescription.standard(_:);
  v10 = type metadata accessor for _NameMap.NameDescription(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  v12 = v7 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v4) = 2;
  *(_QWORD *)v12 = "client";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  v13 = (_QWORD *)(v7 + 2 * v4);
  v14 = (char *)v13 + *(int *)(v2 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "type";
  *((_QWORD *)v14 + 1) = 4;
  v14[16] = 2;
  v11();
  v15 = (_QWORD *)(v7 + 3 * v4);
  v16 = (char *)v15 + *(int *)(v2 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "scan_type";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v11();
  v17 = (_QWORD *)(v7 + 4 * v4);
  v18 = (char *)v17 + *(int *)(v2 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "power";
  *((_QWORD *)v18 + 1) = 5;
  v18[16] = 2;
  v11();
  v19 = (_QWORD *)(v7 + 5 * v4);
  v20 = (char *)v19 + *(int *)(v2 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "associated_state";
  *((_QWORD *)v20 + 1) = 16;
  v20[16] = 2;
  v11();
  v21 = (_QWORD *)(v7 + 6 * v4);
  v22 = (char *)v21 + *(int *)(v2 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "scan";
  *((_QWORD *)v22 + 1) = 4;
  v22[16] = 2;
  v11();
  v23 = (_QWORD *)(v7 + 7 * v4);
  v24 = (char *)v23 + *(int *)(v2 + 48);
  *v23 = 8;
  *(_QWORD *)v24 = "simulated";
  *((_QWORD *)v24 + 1) = 9;
  v24[16] = 2;
  v11();
  v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + 8 * v4) = 9;
  *(_QWORD *)v25 = "available";
  *(_QWORD *)(v25 + 8) = 9;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  v26 = (_QWORD *)(v7 + 9 * v4);
  v27 = (char *)v26 + *(int *)(v2 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "is_involuntary_link_down";
  *((_QWORD *)v27 + 1) = 24;
  v27[16] = 2;
  v11();
  v28 = (_QWORD *)(v7 + 10 * v4);
  v29 = (char *)v28 + *(int *)(v2 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "is_ap_awake";
  *((_QWORD *)v29 + 1) = 11;
  v29[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v31);
}

uint64_t sub_1000FD4D0()
{
  return sub_100008BD0(&qword_100394528, (uint64_t)qword_100384098, (uint64_t)sub_1000FD190);
}

uint64_t sub_1000FD4EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394528, (uint64_t)qword_100384098, (uint64_t)sub_1000FD190, a1);
}

uint64_t sub_1000FD508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 15;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType) = 15;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power) = 2;
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown) = 2;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake) = 2;
  qword_100394538 = v1;
  return result;
}

uint64_t sub_1000FD64C()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &qword_10036E458);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, &qword_10036E558);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, &qword_10036E560);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000FD6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  ValueMetadata *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10010F86C(v13);
    swift_release(v10);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v21 = (unint64_t *)&qword_10036E1E0;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v23 = &unk_1002CF5A8;
          goto LABEL_15;
        case 2:
          v24 = v15
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v34, 33, 0);
          v25 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v24, a2, a3);
          goto LABEL_21;
        case 3:
          v26 = v15
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type, v34, 33, 0);
          v27 = sub_10014A57C();
          v28 = v26;
          v29 = &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType;
          goto LABEL_11;
        case 4:
          v30 = v15
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType, v34, 33, 0);
          v27 = sub_10014A5C0();
          v28 = v30;
          v29 = &type metadata for CLP_LogEntry_PrivateData_WifiScanType;
LABEL_11:
          v25 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v28, v29, v27, a2, a3);
          goto LABEL_21;
        case 5:
          v31 = OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power;
          goto LABEL_20;
        case 6:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
          v21 = &qword_10036F7E8;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState;
          v23 = &unk_1002D57F0;
          goto LABEL_15;
        case 7:
          v19 = v15
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, v34, 33, 0);
          v20 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
          v21 = &qword_10036E1B8;
          v22 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult;
          v23 = &unk_1002D5958;
LABEL_15:
          v32 = sub_10000FD38(v21, v22, (uint64_t)v23);
          v25 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v19, v20, v32, a2, a3);
          goto LABEL_21;
        case 8:
          v31 = OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated;
          goto LABEL_20;
        case 9:
          v31 = OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available;
          goto LABEL_20;
        case 10:
          v31 = OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown;
          goto LABEL_20;
        case 11:
          v31 = OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake;
LABEL_20:
          v33 = v15 + v31;
          swift_beginAccess(v15 + v31, v34, 33, 0);
          v25 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v33, a2, a3);
LABEL_21:
          v5 = v25;
          swift_endAccess(v34);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_1000FDA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20));
  v10 = swift_retain(v9);
  sub_1000FDD88(v10, a1, a2, a3);
  if (v4)
    return swift_release(v9);
  v12 = (unsigned int *)(v9
                       + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, &v27, 0, 0);
  if ((v12[1] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v12, 2, a2, a3);
  v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type, v28, 0, 0);
  if (*v13 != 15)
  {
    v34[0] = *v13;
    v14 = sub_10014A57C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v34, 3, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType, v14, a2, a3);
  }
  v15 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType, v29, 0, 0);
  if (*v15 != 15)
  {
    v34[0] = *v15;
    v16 = sub_10014A5C0();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(v34, 4, &type metadata for CLP_LogEntry_PrivateData_WifiScanType, v16, a2, a3);
  }
  v17 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power, v34, 0, 0);
  v18 = *v17;
  if (v18 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v18 & 1, 5, a2, a3);
  sub_1000FDF14(v9, a1, a2, a3);
  sub_1000FE0A0(v9, a1, a2, a3);
  v19 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated, v33, 0, 0);
  v20 = *v19;
  if (v20 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v20 & 1, 8, a2, a3);
  v21 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available, v32, 0, 0);
  v22 = *v21;
  if (v22 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v22 & 1, 9, a2, a3);
  v23 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown, v31, 0, 0);
  v24 = *v23;
  if (v24 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v24 & 1, 10, a2, a3);
  v25 = (unsigned __int8 *)(v9
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess(v9+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake, v30, 0, 0);
  v26 = *v25;
  if (v26 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v26 & 1, 11, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000FDD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000FDF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E558);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E558);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E558);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  v15 = sub_10000FD38(&qword_10036F7E8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&unk_1002D57F0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t sub_1000FE0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10036E560);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10036E560);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E560);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  v15 = sub_10000FD38(&qword_10036E1B8, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&unk_1002D5958);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 7, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t sub_1000FE22C(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t (*)(uint64_t, uint64_t))sub_1000FE254) & 1;
}

BOOL sub_1000FE254(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v39;
  char v40;
  int *v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t *v77;
  char v78;
  unsigned __int8 *v79;
  int v80;
  unsigned __int8 *v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  unsigned __int8 *v85;
  int v86;
  unsigned __int8 *v87;
  int v88;
  unsigned __int8 *v89;
  int v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int8 *v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127[24];
  char v128[24];
  char v129[24];
  char v130[24];
  char v131[24];
  char v132[24];
  char v133[32];

  v111 = a2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  v98 = *(_QWORD *)(v3 - 8);
  v99 = v3;
  __chkstk_darwin(v3);
  v95 = (uint64_t *)((char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v97 = sub_1000039AC(&qword_100375368);
  __chkstk_darwin(v97);
  v100 = (uint64_t)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036E560);
  v7 = __chkstk_darwin(v6);
  v109 = (uint64_t *)((char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v108 = (char *)&v95 - v9;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  v102 = *(_QWORD *)(v10 - 8);
  v103 = v10;
  __chkstk_darwin(v10);
  v96 = (uint64_t)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_1000039AC(&qword_100375370);
  __chkstk_darwin(v101);
  v104 = (uint64_t)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000039AC(&qword_10036E558);
  v14 = __chkstk_darwin(v13);
  v107 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v105 = (uint64_t)&v95 - v16;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v106 = (uint64_t)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000039AC(&qword_100375338);
  __chkstk_darwin(v20);
  v22 = (char *)&v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000039AC(&qword_10036E458);
  v24 = __chkstk_darwin(v23);
  v110 = (uint64_t)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v95 - v26;
  v28 = a1;
  v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v29, v133, 0, 0);
  sub_10000E660(v29, (uint64_t)v27, &qword_10036E458);
  v30 = v111;
  v31 = v111
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess(v111+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, v132, 0, 0);
  v32 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_10000E660((uint64_t)v27, (uint64_t)v22, &qword_10036E458);
  sub_10000E660(v31, v32, &qword_10036E458);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v33((uint64_t)v22, 1, v17) == 1)
  {
    swift_retain(v28);
    swift_retain(v30);
    sub_100015704((uint64_t)v27, &qword_10036E458);
    v34 = v28;
    if (v33(v32, 1, v17) == 1)
    {
      sub_100015704((uint64_t)v22, &qword_10036E458);
      goto LABEL_11;
    }
LABEL_6:
    v36 = &qword_100375338;
    v37 = (uint64_t)v22;
LABEL_7:
    sub_100015704(v37, v36);
    goto LABEL_8;
  }
  v34 = v28;
  v35 = v110;
  sub_10000E660((uint64_t)v22, v110, &qword_10036E458);
  if (v33(v32, 1, v17) == 1)
  {
    swift_retain(v34);
    swift_retain(v30);
    sub_100015704((uint64_t)v27, &qword_10036E458);
    sub_100004030(v35, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v39 = v106;
  sub_100003E08(v32, v106, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain(v34);
  swift_retain(v30);
  v40 = sub_1000656F0(v35, v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100004030(v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v27, &qword_10036E458);
  sub_100004030(v35, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100015704((uint64_t)v22, &qword_10036E458);
  if ((v40 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v41 = (int *)(v34
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v131, 0, 0);
  v42 = *v41;
  v43 = *((_BYTE *)v41 + 4);
  v44 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess(v30+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, v130, 0, 0);
  if ((v43 & 1) != 0)
  {
    v46 = (uint64_t)v108;
    v45 = v109;
    v47 = (uint64_t)v107;
    if ((*(_BYTE *)(v44 + 4) & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v46 = (uint64_t)v108;
    v45 = v109;
    v47 = (uint64_t)v107;
    if ((*(_BYTE *)(v44 + 4) & 1) != 0 || v42 != *(_DWORD *)v44)
      goto LABEL_8;
  }
  v48 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type, v129, 0, 0);
  v49 = *v48;
  v50 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess(v30+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type, v128, 0, 0);
  v51 = *v50;
  if (v49 == 15)
  {
    v52 = v105;
    if (v51 != 15)
      goto LABEL_8;
  }
  else
  {
    v52 = v105;
    if (v51 == 15 || v49 != v51)
      goto LABEL_8;
  }
  v53 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType, v127, 0, 0);
  v54 = *v53;
  v55 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess(v30+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType, &v126, 0, 0);
  v56 = *v55;
  if (v54 == 15)
  {
    if (v56 != 15)
      goto LABEL_8;
  }
  else if (v56 == 15 || v54 != v56)
  {
    goto LABEL_8;
  }
  v57 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power, &v125, 0, 0);
  v58 = *v57;
  v59 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess(v30+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power, &v124, 0, 0);
  v60 = *v59;
  if (v58 == 2)
  {
    if (v60 != 2)
      goto LABEL_8;
  }
  else if (v60 == 2 || ((((v60 & 1) == 0) ^ v58) & 1) == 0)
  {
    goto LABEL_8;
  }
  v61 = v34
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, &v123, 0, 0);
  sub_10000E660(v61, v52, &qword_10036E558);
  v62 = v52;
  v63 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess(v30+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, &v122, 0, 0);
  v64 = v104;
  v65 = v104 + *(int *)(v101 + 48);
  sub_10000E660(v62, v104, &qword_10036E558);
  sub_10000E660(v63, v65, &qword_10036E558);
  v66 = v103;
  v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
  if (v67(v64, 1, v103) == 1)
  {
    sub_100015704(v105, &qword_10036E558);
    if (v67(v65, 1, v66) == 1)
    {
      sub_100015704(v64, &qword_10036E558);
      goto LABEL_38;
    }
    goto LABEL_36;
  }
  sub_10000E660(v64, v47, &qword_10036E558);
  if (v67(v65, 1, v66) == 1)
  {
    sub_100015704(v105, &qword_10036E558);
    sub_100004030(v47, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
LABEL_36:
    v36 = &qword_100375370;
    v37 = v64;
    goto LABEL_7;
  }
  v68 = v96;
  sub_100003E08(v65, v96, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  v69 = sub_100114F78(v47, v68);
  sub_100004030(v68, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  sub_100015704(v105, &qword_10036E558);
  sub_100004030(v47, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  sub_100015704(v64, &qword_10036E558);
  if ((v69 & 1) == 0)
    goto LABEL_8;
LABEL_38:
  v70 = v34
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, &v121, 0, 0);
  sub_10000E660(v70, v46, &qword_10036E560);
  v71 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess(v30+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, &v120, 0, 0);
  v72 = v100;
  v73 = v100 + *(int *)(v97 + 48);
  sub_10000E660(v46, v100, &qword_10036E560);
  v74 = v72;
  sub_10000E660(v71, v73, &qword_10036E560);
  v75 = v99;
  v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  if (v76(v74, 1, v99) == 1)
  {
    sub_100015704(v46, &qword_10036E560);
    if (v76(v73, 1, v75) == 1)
    {
      sub_100015704(v74, &qword_10036E560);
      goto LABEL_45;
    }
    goto LABEL_43;
  }
  sub_10000E660(v74, (uint64_t)v45, &qword_10036E560);
  if (v76(v73, 1, v75) == 1)
  {
    sub_100015704(v46, &qword_10036E560);
    sub_100004030((uint64_t)v45, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
LABEL_43:
    v36 = &qword_100375368;
    v37 = v74;
    goto LABEL_7;
  }
  v77 = v95;
  sub_100003E08(v73, (uint64_t)v95, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  v78 = sub_1001188DC(v45, v77, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t (*)(char *, char *))sub_100115678);
  sub_100004030((uint64_t)v77, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  sub_100015704(v46, &qword_10036E560);
  sub_100004030((uint64_t)v45, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  sub_100015704(v74, &qword_10036E560);
  if ((v78 & 1) == 0)
    goto LABEL_8;
LABEL_45:
  v79 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated, &v119, 0, 0);
  v80 = *v79;
  v81 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess(v30+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated, &v118, 0, 0);
  v82 = *v81;
  if (v80 == 2)
  {
    if (v82 != 2)
      goto LABEL_8;
  }
  else if (v82 == 2 || ((((v82 & 1) == 0) ^ v80) & 1) == 0)
  {
    goto LABEL_8;
  }
  v83 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available, &v117, 0, 0);
  v84 = *v83;
  v85 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess(v30+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available, &v116, 0, 0);
  v86 = *v85;
  if (v84 == 2)
  {
    if (v86 != 2)
      goto LABEL_8;
  }
  else if (v86 == 2 || ((((v86 & 1) == 0) ^ v84) & 1) == 0)
  {
    goto LABEL_8;
  }
  v87 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown, &v115, 0, 0);
  v88 = *v87;
  v89 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess(v30+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown, &v114, 0, 0);
  v90 = *v89;
  if (v88 == 2)
  {
    if (v90 == 2)
      goto LABEL_60;
LABEL_8:
    swift_release(v34);
    swift_release(v30);
    return 0;
  }
  if (v90 == 2 || ((((v90 & 1) == 0) ^ v88) & 1) == 0)
    goto LABEL_8;
LABEL_60:
  v91 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess(v34+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake, &v113, 0, 0);
  v92 = *v91;
  swift_release(v34);
  v93 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess(v30+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake, &v112, 0, 0);
  v94 = *v93;
  swift_release(v30);
  if (v92 != 2)
    return v94 != 2 && ((((v94 & 1) == 0) ^ v92) & 1) != 0;
  return v94 == 2;
}

Swift::Int sub_1000FEE08()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &qword_10036E808, (uint64_t)&unk_1002D5BC0);
}

uint64_t sub_1000FEE24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_100394530, &qword_100394538, (uint64_t)sub_1000FD508, a2);
}

uint64_t sub_1000FEE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FD6B4(a1, a2, a3);
}

uint64_t sub_1000FEE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FDA10(a1, a2, a3);
}

uint64_t sub_1000FEE68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F28, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&unk_1002D5B38);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FEEB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394528, (uint64_t)qword_100384098, (uint64_t)sub_1000FD190, a1);
}

uint64_t sub_1000FEED4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_100369EA8, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&unk_1002D5AC0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FEF14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100369EA8, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&unk_1002D5AC0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FEF64()
{
  return &unk_100353568;
}

unint64_t sub_1000FEF70()
{
  return 0xD000000000000033;
}

uint64_t sub_1000FEF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003840B0);
  sub_10000E6A4(v0, (uint64_t)qword_1003840B0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "applicable_time";
  *(_QWORD *)(v9 + 8) = 15;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "state";
  *(_QWORD *)(v13 + 8) = 5;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "state_probability";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "measurement_source";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FF154()
{
  return sub_100008BD0(&qword_100394540, (uint64_t)qword_1003840B0, (uint64_t)sub_1000FEF8C);
}

uint64_t sub_1000FF170@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394540, (uint64_t)qword_1003840B0, (uint64_t)sub_1000FEF8C, a1);
}

uint64_t sub_1000FF18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  ValueMetadata *v17;
  uint64_t v18;
  uint64_t v19;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 20);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v12 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
          goto LABEL_5;
        case 2:
          v14 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 24);
          v15 = sub_100149D40();
          v16 = v14;
          v17 = &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
          goto LABEL_12;
        case 3:
          v18 = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v18 + 28), a2, a3);
          goto LABEL_5;
        case 4:
          v19 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 32);
          v15 = sub_100149CFC();
          v16 = v19;
          v17 = &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
LABEL_12:
          v13 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v16, v17, v15, a2, a3);
LABEL_5:
          v9 = v13;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1000FF314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;

  v5 = v3;
  result = sub_100105B68(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
  if (!v4)
  {
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
    v11 = v10;
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 4)
    {
      v15 = *(_BYTE *)(v5 + *(int *)(v10 + 24));
      v12 = sub_100149D40();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v15, 2, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability, v12, a2, a3);
    }
    v13 = v5 + *(int *)(v11 + 28);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v13);
    if (*(_BYTE *)(v5 + *(int *)(v11 + 32)) != 4)
    {
      v16 = *(_BYTE *)(v5 + *(int *)(v11 + 32));
      v14 = sub_100149CFC();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v16, 4, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource, v14, a2, a3);
    }
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1000FF464()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, &qword_10036E810, (uint64_t)&unk_1002D5D28);
}

uint64_t sub_1000FF480@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  *(_BYTE *)(a2 + a1[6]) = 4;
  v8 = a2 + v7;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a2 + a1[8]) = 4;
  return result;
}

uint64_t sub_1000FF4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FF18C(a1, a2, a3);
}

uint64_t sub_1000FF510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FF314(a1, a2, a3);
}

uint64_t sub_1000FF524(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F20, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&unk_1002D5CA0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FF574@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394540, (uint64_t)qword_1003840B0, (uint64_t)sub_1000FEF8C, a1);
}

uint64_t sub_1000FF590(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F818, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&unk_1002D5C28);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FF5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F818, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&unk_1002D5C28);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000FF620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003840C8);
  sub_10000E6A4(v0, (uint64_t)qword_1003840C8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "GA_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 19;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "GA_UNKNOWN";
  *(_QWORD *)(v13 + 8) = 10;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "GA_LOW";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "GA_HIGH";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FF7DC()
{
  return sub_100008BD0(&qword_100394548, (uint64_t)qword_1003840C8, (uint64_t)sub_1000FF620);
}

uint64_t sub_1000FF7F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394548, (uint64_t)qword_1003840C8, (uint64_t)sub_1000FF620, a1);
}

uint64_t sub_1000FF814@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394548, (uint64_t)qword_1003840C8, (uint64_t)sub_1000FF620, a1);
}

uint64_t sub_1000FF830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003840E0);
  sub_10000E6A4(v0, (uint64_t)qword_1003840E0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 0;
  *(_QWORD *)v9 = "MS_PROTOBUF_DEFAULT";
  *(_QWORD *)(v9 + 8) = 19;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 1;
  *(_QWORD *)v13 = "MS_AMBIENT_LIGHT";
  *(_QWORD *)(v13 + 8) = 16;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "MS_PROXIMITY";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "MS_FUSED_MULTIPLE";
  *((_QWORD *)v17 + 1) = 17;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FF9EC()
{
  return sub_100008BD0(&qword_100394550, (uint64_t)qword_1003840E0, (uint64_t)sub_1000FF830);
}

uint64_t sub_1000FFA08@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394550, (uint64_t)qword_1003840E0, (uint64_t)sub_1000FF830, a1);
}

uint64_t sub_1000FFA24@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394550, (uint64_t)qword_1003840E0, (uint64_t)sub_1000FF830, a1);
}

void *sub_1000FFA40()
{
  return &unk_100353578;
}

unint64_t sub_1000FFA4C()
{
  return 0xD000000000000030;
}

uint64_t sub_1000FFA68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003840F8);
  sub_10000E6A4(v0, (uint64_t)qword_1003840F8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "latitude_deg";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "longitude_deg";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000FFBB8()
{
  return sub_100008BD0(&qword_100394558, (uint64_t)qword_1003840F8, (uint64_t)sub_1000FFA68);
}

uint64_t sub_1000FFBD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394558, (uint64_t)qword_1003840F8, (uint64_t)sub_1000FFA68, a1);
}

uint64_t sub_1000FFBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB774(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000FFC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB840(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000FFC28(uint64_t a1, uint64_t a2)
{
  return sub_10011F460(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D) & 1;
}

Swift::Int sub_1000FFC48()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, &qword_10036E818, (uint64_t)&unk_1002D5EE0);
}

uint64_t sub_1000FFC64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F18, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5E58);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000FFCB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394558, (uint64_t)qword_1003840F8, (uint64_t)sub_1000FFA68, a1);
}

uint64_t sub_1000FFCD0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E820, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5DE0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FFD10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E820, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5DE0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000FFD60()
{
  return &unk_100353588;
}

unint64_t sub_1000FFD6C()
{
  return 0xD000000000000035;
}

uint64_t sub_1000FFD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384110);
  sub_10000E6A4(v0, (uint64_t)qword_100384110);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40B0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "coordinates";
  *(_QWORD *)(v9 + 8) = 11;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "base_height_above_ground_m";
  *(_QWORD *)(v13 + 8) = 26;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "height_above_base_m";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "has_terrain_elevation";
  *((_QWORD *)v17 + 1) = 21;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "terrain_elevation_m";
  *((_QWORD *)v19 + 1) = 19;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "min_base_height_m";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "max_base_height_m";
  *((_QWORD *)v23 + 1) = 17;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v8 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 8;
  *(_QWORD *)v25 = "top_height_m";
  *((_QWORD *)v25 + 1) = 12;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10010003C()
{
  return sub_100008BD0(&qword_100394560, (uint64_t)qword_100384110, (uint64_t)sub_1000FFD88);
}

uint64_t sub_100100058@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394560, (uint64_t)qword_100384110, (uint64_t)sub_1000FFD88, a1);
}

uint64_t sub_100100074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          v11 = sub_10000FD38(&qword_10036E820, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5DE0);
          v12 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v10, v11, a2, a3);
          goto LABEL_14;
        case 2:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 24);
          goto LABEL_13;
        case 3:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 28);
          goto LABEL_13;
        case 4:
          v14 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
          v12 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v14 + 32), a2, a3);
          goto LABEL_14;
        case 5:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 36);
          goto LABEL_13;
        case 6:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 40);
          goto LABEL_13;
        case 7:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 44);
          goto LABEL_13;
        case 8:
          v13 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 48);
LABEL_13:
          v12 = v9;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + v13, a2, a3);
LABEL_14:
          v9 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100100204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v5 = v3;
  v9 = *(_QWORD *)v5;
  if (!*(_QWORD *)(*(_QWORD *)v5 + 16)
    || (v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0),
        v11 = sub_10000FD38(&qword_10036E820, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5DE0), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 1, v10, v11, a2, a3), !v4))
  {
    result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
    v13 = (int *)result;
    v14 = v5 + *(int *)(result + 24);
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v14);
    if (!v4)
    {
      v15 = v5 + v13[7];
      if ((*(_BYTE *)(v15 + 8) & 1) == 0)
        dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v15);
      v16 = *(unsigned __int8 *)(v5 + v13[8]);
      if (v16 != 2)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v16 & 1, 4, a2, a3);
      v17 = v5 + v13[9];
      if ((*(_BYTE *)(v17 + 8) & 1) == 0)
        dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(5, a2, a3, *(double *)v17);
      sub_1000FAE88(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      sub_1000FAEFC(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      sub_100100414(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }
  return result;
}

uint64_t sub_100100414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v9;

  result = a5(0);
  v9 = a1 + *(int *)(result + 48);
  if ((*(_BYTE *)(v9 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(8, a3, a4, *(double *)v9);
  return result;
}

Swift::Int sub_10010048C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, &qword_10036E828, (uint64_t)&unk_1002D6048);
}

uint64_t sub_1001004A8@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  *a2 = &_swiftEmptyArrayStorage;
  result = UnknownStorage.init()();
  v5 = a1[7];
  v6 = (char *)a2 + a1[6];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = (char *)a2 + v5;
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = a1[9];
  *((_BYTE *)a2 + a1[8]) = 2;
  v9 = (char *)a2 + v8;
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = a1[11];
  v11 = (char *)a2 + a1[10];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = (char *)a2 + a1[12];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  return result;
}

uint64_t sub_100100544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100100074(a1, a2, a3);
}

uint64_t sub_100100558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100100204(a1, a2, a3);
}

uint64_t sub_10010056C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F10, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&unk_1002D5FC0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001005BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394560, (uint64_t)qword_100384110, (uint64_t)sub_1000FFD88, a1);
}

uint64_t sub_1001005D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E830, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&unk_1002D5F48);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100100618(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E830, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&unk_1002D5F48);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10010066C()
{
  return &unk_100353598;
}

unint64_t sub_100100678()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_100100694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384128);
  sub_10000E6A4(v0, (uint64_t)qword_100384128);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "sections";
  *(_QWORD *)(v9 + 8) = 8;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "building_hash";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "building_id";
  *(_QWORD *)(v14 + 8) = 11;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100100834()
{
  return sub_100008BD0(&qword_100394568, (uint64_t)qword_100384128, (uint64_t)sub_100100694);
}

uint64_t sub_100100850@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394568, (uint64_t)qword_100384128, (uint64_t)sub_100100694, a1);
}

uint64_t sub_10010086C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 24);
        goto LABEL_5;
      }
      if (result == 1)
      {
        v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
        v11 = sub_10000FD38(&qword_10036E830, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&unk_1002D5F48);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v10, v11, a2, a3);
      }
LABEL_11:
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
    v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 28);
LABEL_5:
    dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + v9, a2, a3);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_10010099C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *v3;
  if (!*(_QWORD *)(*v3 + 16)
    || (v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0),
        v10 = sub_10000FD38(&qword_10036E830, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&unk_1002D5F48), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v8, 1, v9, v10, a2, a3), !v4))
  {
    result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
    v12 = result;
    v13 = (uint64_t)v3 + *(int *)(result + 24);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v13, 2, a2, a3);
    if (!v4)
    {
      v14 = (uint64_t)v3 + *(int *)(v12 + 28);
      if ((*(_BYTE *)(v14 + 8) & 1) == 0)
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v14, 3, a2, a3);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }
  return result;
}

Swift::Int sub_100100ADC()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, &qword_10036E838, (uint64_t)&unk_1002D61B0);
}

uint64_t sub_100100AF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  char *v7;

  *a2 = &_swiftEmptyArrayStorage;
  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 28);
  v6 = (char *)a2 + *(int *)(a1 + 24);
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = (char *)a2 + v5;
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  return result;
}

uint64_t sub_100100B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010086C(a1, a2, a3);
}

uint64_t sub_100100B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010099C(a1, a2, a3);
}

uint64_t sub_100100B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F08, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&unk_1002D6128);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100100BC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394568, (uint64_t)qword_100384128, (uint64_t)sub_100100694, a1);
}

uint64_t sub_100100BE4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E840, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&unk_1002D60B0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100100C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E840, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&unk_1002D60B0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100100C74()
{
  return &unk_1003535A8;
}

unint64_t sub_100100C80()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_100100C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384140);
  sub_10000E6A4(v0, (uint64_t)qword_100384140);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "receipt_time";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "buildings";
  *(_QWORD *)(v13 + 8) = 9;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "building_hashes_in_previous_query_but_not_current_query";
  *((_QWORD *)v15 + 1) = 55;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "query_location_coordinate";
  *((_QWORD *)v17 + 1) = 25;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100100E64()
{
  return sub_100008BD0(&qword_100394570, (uint64_t)qword_100384140, (uint64_t)sub_100100C9C);
}

uint64_t sub_100100E80@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394570, (uint64_t)qword_100384140, (uint64_t)sub_100100C9C, a1);
}

uint64_t sub_100100E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0) + 28);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v12 = (unint64_t *)&qword_10036E1E0;
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v14 = &unk_1002CF5A8;
          goto LABEL_5;
        case 2:
          v17 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
          v18 = sub_10000FD38(&qword_10036E840, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&unk_1002D60B0);
          v16 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v17, v18, a2, a3);
          goto LABEL_6;
        case 3:
          v16 = v9;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)(v3 + 8, a2, a3);
          goto LABEL_6;
        case 4:
          v10 = v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0) + 32);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          v12 = &qword_10036E820;
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D;
          v14 = &unk_1002D5DE0;
LABEL_5:
          v15 = sub_10000FD38(v12, v13, (uint64_t)v14);
          v16 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v15, a2, a3);
LABEL_6:
          v9 = v16;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100101038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_100101170((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    v9 = *v3;
    if (*(_QWORD *)(*v3 + 16))
    {
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
      v11 = sub_10000FD38(&qword_10036E840, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&unk_1002D60B0);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 2, v10, v11, a2, a3);
    }
    if (*(_QWORD *)(v3[1] + 16))
      dispatch thunk of Visitor.visitRepeatedUInt64Field(value:fieldNumber:)();
    sub_1001012E4((uint64_t)v3, a1, a2, a3);
    type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100101170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E458);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_10036E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E458);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v15 = sub_10000FD38((unint64_t *)&qword_10036E1E0, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&unk_1002CF5A8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 1, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1001012E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10036E568);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  sub_10000E660(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_10036E568);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10036E568);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  v15 = sub_10000FD38(&qword_10036E820, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5DE0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

Swift::Int sub_10010145C()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &qword_10036E848, (uint64_t)&unk_1002D6318);
}

uint64_t sub_100101478@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (char *)a2 + *(int *)(a1 + 32);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_10010150C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10010154C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_10010158C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100100E9C(a1, a2, a3);
}

uint64_t sub_1001015A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100101038(a1, a2, a3);
}

uint64_t sub_1001015B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374F00, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&unk_1002D6290);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100101604@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394570, (uint64_t)qword_100384140, (uint64_t)sub_100100C9C, a1);
}

uint64_t sub_100101620(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036F860, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&unk_1002D6218);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100101660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036F860, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&unk_1002D6218);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1001016B0()
{
  return &unk_1003535B8;
}

unint64_t sub_1001016BC()
{
  return 0xD00000000000003BLL;
}

uint64_t sub_1001016D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100384158);
  sub_10000E6A4(v0, (uint64_t)qword_100384158);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "branch_coordinates";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "branch_type";
  *(_QWORD *)(v13 + 8) = 11;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "branch_number";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "branch_width_mm";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 5;
  *(_QWORD *)v18 = "branch_length_mm";
  *(_QWORD *)(v18 + 8) = 16;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1001018DC()
{
  return sub_100008BD0(&qword_100394578, (uint64_t)qword_100384158, (uint64_t)sub_1001016D8);
}

uint64_t sub_1001018F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_100394578, (uint64_t)qword_100384158, (uint64_t)sub_1001016D8, a1);
}

uint64_t sub_100101914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          v13 = sub_10000FD38(&qword_10036E820, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5DE0);
          v11 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v12, v13, a2, a3);
          goto LABEL_6;
        case 2:
          v14 = v3
              + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 24);
          v15 = sub_100149CB8();
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v14, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType, v15, a2, a3);
          goto LABEL_6;
        case 3:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 28);
          goto LABEL_5;
        case 4:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 32);
          goto LABEL_5;
        case 5:
          v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 36);
LABEL_5:
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + v10, a2, a3);
LABEL_6:
          v9 = v11;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100101A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int *v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  char v18;

  v5 = v3;
  v9 = *v5;
  if (!*(_QWORD *)(*v5 + 16)
    || (v10 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0),
        v11 = sub_10000FD38(&qword_10036E820, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&unk_1002D5DE0), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v9, 1, v10, v11, a2, a3), !v4))
  {
    result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
    v13 = (int *)result;
    if (*((_BYTE *)v5 + *(int *)(result + 24)) != 4)
    {
      v18 = *((_BYTE *)v5 + *(int *)(result + 24));
      v14 = sub_100149CB8();
      result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v18, 2, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType, v14, a2, a3);
    }
    if (!v4)
    {
      v15 = (unsigned int *)((char *)v5 + v13[7]);
      if ((v15[1] & 1) == 0)
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v15, 3, a2, a3);
      v16 = (unsigned int *)((char *)v5 + v13[8]);
      if ((v16[1] & 1) == 0)
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v16, 4, a2, a3);
      v17 = (unsigned int *)((char *)v5 + v13[9]);
      if ((v17[1] & 1) == 0)
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v17, 5, a2, a3);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }
  return result;
}

Swift::Int sub_100101C38()
{
  return sub_10000DF2C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, &qword_10036E850, (uint64_t)&unk_1002D6480);
}

uint64_t sub_100101C54@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;

  *a2 = &_swiftEmptyArrayStorage;
  result = UnknownStorage.init()();
  v5 = a1[7];
  *((_BYTE *)a2 + a1[6]) = 4;
  v6 = (char *)a2 + v5;
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = a1[9];
  v8 = (char *)a2 + a1[8];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  v9 = (char *)a2 + v7;
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  return result;
}

uint64_t sub_100101CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100101914(a1, a2, a3);
}

uint64_t sub_100101CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100101A88(a1, a2, a3);
}

uint64_t sub_100101CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100374EF8, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&unk_1002D63F8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100101D3C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_100394578, (uint64_t)qword_100384158, (uint64_t)sub_1001016D8, a1);
}

