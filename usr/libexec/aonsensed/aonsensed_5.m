uint64_t sub_10026AE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint(0);
  v10 = (int *)result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = v5 + v10[6];
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v12);
    v13 = v5 + v10[7];
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v13);
    v14 = v5 + v10[8];
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(4, a2, a3, *(double *)v14);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10026AF60()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint, &qword_10037D5F8, (uint64_t)&unk_1002EC500);
}

uint64_t sub_10026AF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026AD24(a1, a2, a3);
}

uint64_t sub_10026AF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026AE30(a1, a2, a3);
}

uint64_t sub_10026AFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100380210, type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint, (uint64_t)&unk_1002EC478);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026AFF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D07B0, (uint64_t)qword_100385540, (uint64_t)sub_10026AB20, a1);
}

uint64_t sub_10026B010(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037D968, type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint, (uint64_t)&unk_1002EC400);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026B050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037D968, type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint, (uint64_t)&unk_1002EC400);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10026B0A0()
{
  return &unk_10035A0D0;
}

unint64_t sub_10026B0AC()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10026B0C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100385558);
  sub_10000E6A4(v0, (uint64_t)qword_100385558);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "mach_continuous_time_ns";
  *(_QWORD *)(v9 + 8) = 23;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "vel_along_track";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "vel_along_track_uncertainty";
  *(_QWORD *)(v14 + 8) = 27;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10026B25C()
{
  return sub_100008BD0(&qword_1003D07B8, (uint64_t)qword_100385558, (uint64_t)sub_10026B0C8);
}

uint64_t sub_10026B278@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D07B8, (uint64_t)qword_100385558, (uint64_t)sub_10026B0C8, a1);
}

uint64_t sub_10026B294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100268C50(a1, a2, a3, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularDoubleField(value:));
}

uint64_t sub_10026B2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026B2D4(a1, a2, a3, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
}

uint64_t sub_10026B2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = v4;
  result = a4(0);
  v11 = result;
  v12 = v6 + *(int *)(result + 20);
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v12, 1, a2, a3);
  if (!v5)
  {
    v13 = v6 + *(int *)(v11 + 24);
    if ((*(_BYTE *)(v13 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(2, a2, a3, *(double *)v13);
    v14 = v6 + *(int *)(v11 + 28);
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(3, a2, a3, *(double *)v14);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10026B3CC(uint64_t a1, uint64_t a2)
{
  return sub_100276C74(a1, a2, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity) & 1;
}

Swift::Int sub_10026B3EC()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity, &qword_10037D600, (uint64_t)&unk_1002EC668);
}

uint64_t sub_10026B408(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100380208, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity, (uint64_t)&unk_1002EC5E0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026B458@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D07B8, (uint64_t)qword_100385558, (uint64_t)sub_10026B0C8, a1);
}

uint64_t sub_10026B474(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037D980, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity, (uint64_t)&unk_1002EC568);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026B4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037D980, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity, (uint64_t)&unk_1002EC568);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10026B504()
{
  return &unk_10035A0E0;
}

unint64_t sub_10026B510()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10026B52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100385570);
  sub_10000E6A4(v0, (uint64_t)qword_100385570);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "mach_continuous_time_ns";
  *(_QWORD *)(v9 + 8) = 23;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "thermal_risk_scale";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10026B67C()
{
  return sub_100008BD0(&qword_1003D07C0, (uint64_t)qword_100385570, (uint64_t)sub_10026B52C);
}

uint64_t sub_10026B698@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D07C0, (uint64_t)qword_100385570, (uint64_t)sub_10026B52C, a1);
}

uint64_t sub_10026B6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    if (result == 2)
    {
      v9 = type metadata accessor for Proto_Gpsd_SetThermalRiskState(0);
      dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v9 + 24), a2, a3);
    }
    else if (result == 1)
    {
      v12 = type metadata accessor for Proto_Gpsd_SetThermalRiskState(0);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v12 + 20), a2, a3);
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_10026B780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_SetThermalRiskState(0);
  v10 = result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = (unsigned int *)(v5 + *(int *)(v10 + 24));
    if ((v12[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v12, 2, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10026B84C()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_SetThermalRiskState, &qword_10037D608, (uint64_t)&unk_1002EC7D0);
}

uint64_t sub_10026B868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026B6B4(a1, a2, a3);
}

uint64_t sub_10026B87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026B780(a1, a2, a3);
}

uint64_t sub_10026B890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100380200, type metadata accessor for Proto_Gpsd_SetThermalRiskState, (uint64_t)&unk_1002EC748);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026B8E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D07C0, (uint64_t)qword_100385570, (uint64_t)sub_10026B52C, a1);
}

uint64_t sub_10026B8FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037D998, type metadata accessor for Proto_Gpsd_SetThermalRiskState, (uint64_t)&unk_1002EC6D0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026B93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037D998, type metadata accessor for Proto_Gpsd_SetThermalRiskState, (uint64_t)&unk_1002EC6D0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10026B98C()
{
  return &unk_10035A0F0;
}

unint64_t sub_10026B998()
{
  return 0xD000000000000021;
}

uint64_t sub_10026B9B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100385588);
  sub_10000E6A4(v0, (uint64_t)qword_100385588);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "is_enabled";
  *(_QWORD *)(v9 + 8) = 10;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "default_gps_week";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10026BB04()
{
  return sub_100008BD0(&qword_1003D07C8, (uint64_t)qword_100385588, (uint64_t)sub_10026B9B4);
}

uint64_t sub_10026BB20@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D07C8, (uint64_t)qword_100385588, (uint64_t)sub_10026B9B4, a1);
}

uint64_t sub_10026BB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    if (result == 2)
    {
      v9 = type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode(0);
      dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v9 + 24), a2, a3);
    }
    else if (result == 1)
    {
      v12 = type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v12 + 20), a2, a3);
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_10026BC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  int v11;
  unsigned int *v12;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode(0);
  v10 = result;
  v11 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v11 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1, a2, a3);
  if (!v4)
  {
    v12 = (unsigned int *)(v5 + *(int *)(v10 + 24));
    if ((v12[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v12, 2, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10026BCD4()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode, &qword_10037D610, (uint64_t)&unk_1002EC938);
}

uint64_t sub_10026BCF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 24);
  *(_BYTE *)(a2 + *(int *)(a1 + 20)) = 2;
  v6 = a2 + v5;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

uint64_t sub_10026BD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026BB3C(a1, a2, a3);
}

uint64_t sub_10026BD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026BC08(a1, a2, a3);
}

uint64_t sub_10026BD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003801F8, type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode, (uint64_t)&unk_1002EC8B0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026BDA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D07C8, (uint64_t)qword_100385588, (uint64_t)sub_10026B9B4, a1);
}

uint64_t sub_10026BDC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037D9B0, type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode, (uint64_t)&unk_1002EC838);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026BE04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037D9B0, type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode, (uint64_t)&unk_1002EC838);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10026BE54()
{
  return &unk_10035A100;
}

unint64_t sub_10026BE60()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_10026BE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003855A0);
  sub_10000E6A4(v0, (uint64_t)qword_1003855A0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "enable_flags";
  *(_QWORD *)(v9 + 8) = 12;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "disable_flags";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10026BFCC()
{
  return sub_100008BD0(&qword_1003D07D0, (uint64_t)qword_1003855A0, (uint64_t)sub_10026BE7C);
}

uint64_t sub_10026BFE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D07D0, (uint64_t)qword_1003855A0, (uint64_t)sub_10026BE7C, a1);
}

uint64_t sub_10026C004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002715D4(a1, a2, a3, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularUInt32Field(value:));
}

uint64_t sub_10026C028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002716D4(a1, a2, a3, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))&dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:));
}

uint64_t sub_10026C04C(uint64_t a1, uint64_t a2)
{
  return sub_1001D3C4C(a1, a2, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations) & 1;
}

Swift::Int sub_10026C06C()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations, &qword_10037D618, (uint64_t)&unk_1002ECAA0);
}

uint64_t sub_10026C088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003801F0, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations, (uint64_t)&unk_1002ECA18);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026C0D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D07D0, (uint64_t)qword_1003855A0, (uint64_t)sub_10026BE7C, a1);
}

uint64_t sub_10026C0F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037D9C8, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations, (uint64_t)&unk_1002EC9A0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026C134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037D9C8, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations, (uint64_t)&unk_1002EC9A0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10026C184()
{
  return &unk_10035A110;
}

unint64_t sub_10026C190()
{
  return 0xD000000000000020;
}

uint64_t sub_10026C1AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003855B8);
  sub_10000E6A4(v0, (uint64_t)qword_1003855B8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "enable_l1";
  *(_QWORD *)(v9 + 8) = 9;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "enable_l5";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10026C300()
{
  return sub_100008BD0(&qword_1003D07D8, (uint64_t)qword_1003855B8, (uint64_t)sub_10026C1AC);
}

uint64_t sub_10026C31C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D07D8, (uint64_t)qword_1003855B8, (uint64_t)sub_10026C1AC, a1);
}

uint64_t sub_10026C338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    if (result == 2)
    {
      v9 = *(int *)(type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable(0) + 24);
LABEL_3:
      dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v9, a2, a3);
      goto LABEL_4;
    }
    if (result == 1)
    {
      v9 = *(int *)(type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable(0) + 20);
      goto LABEL_3;
    }
LABEL_4:
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_10026C3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable(0);
  v10 = result;
  v11 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v11 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1, a2, a3);
  if (!v4)
  {
    v12 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 24));
    if (v12 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10026C4B0()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable, &qword_10037D620, (uint64_t)&unk_1002ECC08);
}

uint64_t sub_10026C4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026C338(a1, a2, a3);
}

uint64_t sub_10026C4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026C3E4(a1, a2, a3);
}

uint64_t sub_10026C4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003801E8, type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable, (uint64_t)&unk_1002ECB80);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026C544@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D07D8, (uint64_t)qword_1003855B8, (uint64_t)sub_10026C1AC, a1);
}

uint64_t sub_10026C560(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037D9E0, type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable, (uint64_t)&unk_1002ECB08);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026C5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037D9E0, type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable, (uint64_t)&unk_1002ECB08);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10026C5F0()
{
  return &unk_10035A120;
}

unint64_t sub_10026C5FC()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_10026C618(uint64_t a1)
{
  return sub_1000FB324(a1, qword_1003855D0, (uint64_t)"is_enabled", 10, (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t sub_10026C638()
{
  return sub_100008BD0(&qword_1003D07E0, (uint64_t)qword_1003855D0, (uint64_t)sub_10026C618);
}

uint64_t sub_10026C654@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D07E0, (uint64_t)qword_1003855D0, (uint64_t)sub_10026C618, a1);
}

uint64_t sub_10026C670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100272980(a1, a2, a3, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
}

uint64_t sub_10026C68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100272A34(a1, a2, a3, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
}

uint64_t sub_10026C6A8(uint64_t a1, uint64_t a2)
{
  return sub_100276B20(a1, a2, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling) & 1;
}

Swift::Int sub_10026C6C8()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_SetConfigDutyCycling, &qword_10037D628, (uint64_t)&unk_1002ECD70);
}

uint64_t sub_10026C6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003801E0, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling, (uint64_t)&unk_1002ECCE8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026C734@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D07E0, (uint64_t)qword_1003855D0, (uint64_t)sub_10026C618, a1);
}

uint64_t sub_10026C750(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037D9F8, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling, (uint64_t)&unk_1002ECC70);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026C790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037D9F8, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling, (uint64_t)&unk_1002ECC70);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10026C7E0()
{
  return &unk_10035A130;
}

unint64_t sub_10026C7EC()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10026C808(uint64_t a1)
{
  return sub_1000FB324(a1, qword_1003855E8, (uint64_t)"reason", 6, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t sub_10026C828()
{
  return sub_100008BD0(&qword_1003D07E8, (uint64_t)qword_1003855E8, (uint64_t)sub_10026C808);
}

uint64_t sub_10026C844@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D07E8, (uint64_t)qword_1003855E8, (uint64_t)sub_10026C808, a1);
}

uint64_t sub_10026C860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026C884(a1, a2, a3, type metadata accessor for Proto_Gpsd_TerminationImminent, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularStringField(value:));
}

uint64_t sub_10026C884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t i;
  uint64_t result;
  char v14;
  uint64_t v15;

  v11 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v11, i);
    if (v6 || (v14 & 1) != 0)
      break;
    if (result == 1)
    {
      v15 = a4(0);
      a5(v5 + *(int *)(v15 + 20), a2, a3);
    }
    v6 = 0;
    v11 = a2;
  }
  return result;
}

uint64_t sub_10026C928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026CB3C(a1, a2, a3, type metadata accessor for Proto_Gpsd_TerminationImminent);
}

uint64_t sub_10026C944(uint64_t a1, uint64_t a2)
{
  return sub_100277888(a1, a2, type metadata accessor for Proto_Gpsd_TerminationImminent) & 1;
}

Swift::Int sub_10026C964()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_TerminationImminent, &qword_10037D630, (uint64_t)&unk_1002ECED8);
}

uint64_t sub_10026C980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003801D8, type metadata accessor for Proto_Gpsd_TerminationImminent, (uint64_t)&unk_1002ECE50);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026C9D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D07E8, (uint64_t)qword_1003855E8, (uint64_t)sub_10026C808, a1);
}

uint64_t sub_10026C9EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DA10, type metadata accessor for Proto_Gpsd_TerminationImminent, (uint64_t)&unk_1002ECDD8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026CA2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DA10, type metadata accessor for Proto_Gpsd_TerminationImminent, (uint64_t)&unk_1002ECDD8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10026CA7C()
{
  return &unk_10035A140;
}

unint64_t sub_10026CA88()
{
  return 0xD000000000000016;
}

uint64_t sub_10026CAA4(uint64_t a1)
{
  return sub_1000FB324(a1, qword_100385600, (uint64_t)"reason", 6, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t sub_10026CAC4()
{
  return sub_100008BD0(&qword_1003D07F0, (uint64_t)qword_100385600, (uint64_t)sub_10026CAA4);
}

uint64_t sub_10026CAE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D07F0, (uint64_t)qword_100385600, (uint64_t)sub_10026CAA4, a1);
}

uint64_t sub_10026CAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026C884(a1, a2, a3, type metadata accessor for Proto_Gpsd_ExitMessage, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularStringField(value:));
}

uint64_t sub_10026CB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026CB3C(a1, a2, a3, type metadata accessor for Proto_Gpsd_ExitMessage);
}

uint64_t sub_10026CB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;

  v6 = v4;
  result = a4(0);
  v11 = (_QWORD *)(v6 + *(int *)(result + 20));
  v12 = v11[1];
  if (v12)
    result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v11, v12, 1, a2, a3);
  if (!v5)
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  return result;
}

uint64_t sub_10026CBD0(uint64_t a1, uint64_t a2)
{
  return sub_100277888(a1, a2, type metadata accessor for Proto_Gpsd_ExitMessage) & 1;
}

Swift::Int sub_10026CBF0()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_ExitMessage, &qword_10037D638, (uint64_t)&unk_1002ED040);
}

uint64_t sub_10026CC0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;

  result = UnknownStorage.init()();
  v5 = (_QWORD *)(a2 + *(int *)(a1 + 20));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t sub_10026CC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003801D0, type metadata accessor for Proto_Gpsd_ExitMessage, (uint64_t)&unk_1002ECFB8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026CC8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D07F0, (uint64_t)qword_100385600, (uint64_t)sub_10026CAA4, a1);
}

uint64_t sub_10026CCA8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DA28, type metadata accessor for Proto_Gpsd_ExitMessage, (uint64_t)&unk_1002ECF40);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026CCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DA28, type metadata accessor for Proto_Gpsd_ExitMessage, (uint64_t)&unk_1002ECF40);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10026CD38()
{
  return &unk_10035A150;
}

unint64_t sub_10026CD44()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_10026CD60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100385618);
  sub_10000E6A4(v0, (uint64_t)qword_100385618);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "recovery_point_vector";
  *(_QWORD *)(v9 + 8) = 21;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "recovery_status";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10026CEB0()
{
  return sub_100008BD0(&qword_1003D07F8, (uint64_t)qword_100385618, (uint64_t)sub_10026CD60);
}

uint64_t sub_10026CECC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D07F8, (uint64_t)qword_100385618, (uint64_t)sub_10026CD60, a1);
}

uint64_t sub_10026CEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        v9 = v3 + *(int *)(type metadata accessor for Proto_Gpsd_RecoveryStatistics(0) + 24);
        v10 = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
        v11 = sub_10000FD38(&qword_10037DA58, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus, (uint64_t)&unk_1002ED210);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
      }
      else if (result == 1)
      {
        v12 = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint(0);
        v13 = sub_10000FD38(&qword_10037D640, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint, (uint64_t)&unk_1002ED378);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v12, v13, a2, a3);
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10026D030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)v3;
  if (!*(_QWORD *)(*(_QWORD *)v3 + 16)
    || (v9 = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint(0),
        v10 = sub_10000FD38(&qword_10037D640, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint, (uint64_t)&unk_1002ED378), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v8, 1, v9, v10, a2, a3), !v4))
  {
    result = sub_10026D120(v3, a1, a2, a3);
    if (!v4)
    {
      type metadata accessor for Proto_Gpsd_RecoveryStatistics(0);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }
  return result;
}

uint64_t sub_10026D120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_10037D530);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_Gpsd_RecoveryStatistics(0);
  sub_10000E660(a1 + *(int *)(v13 + 24), (uint64_t)v8, &qword_10037D530);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10037D530);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
  v15 = sub_10000FD38(&qword_10037DA58, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus, (uint64_t)&unk_1002ED210);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 2, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
}

Swift::Int sub_10026D298()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_RecoveryStatistics, &qword_10037D648, (uint64_t)&unk_1002ED1A8);
}

uint64_t sub_10026D2B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t sub_10026D314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026CEE8(a1, a2, a3);
}

uint64_t sub_10026D328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026D030(a1, a2, a3);
}

uint64_t sub_10026D33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003801C8, type metadata accessor for Proto_Gpsd_RecoveryStatistics, (uint64_t)&unk_1002ED120);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026D38C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D07F8, (uint64_t)qword_100385618, (uint64_t)sub_10026CD60, a1);
}

uint64_t sub_10026D3A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DA40, type metadata accessor for Proto_Gpsd_RecoveryStatistics, (uint64_t)&unk_1002ED0A8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026D3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DA40, type metadata accessor for Proto_Gpsd_RecoveryStatistics, (uint64_t)&unk_1002ED0A8);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_10026D438()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x7265766F6365522ELL;
  v0._object = (void *)0xEF73757461745379;
  String.append(_:)(v0);
  qword_100385630 = 0xD00000000000001DLL;
  *(_QWORD *)algn_100385638 = 0x8000000100302B90;
}

uint64_t *sub_10026D4AC()
{
  if (qword_1003D0800 != -1)
    swift_once(&qword_1003D0800, sub_10026D438);
  return &qword_100385630;
}

uint64_t sub_10026D4EC()
{
  return sub_100103668(&qword_1003D0800, &qword_100385630, algn_100385638, (uint64_t)sub_10026D438);
}

uint64_t sub_10026D50C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100385640);
  sub_10000E6A4(v0, (uint64_t)qword_100385640);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "recovery_attempted";
  *(_QWORD *)(v9 + 8) = 18;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "num_recovery_attempts";
  *(_QWORD *)(v13 + 8) = 21;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "recovered";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "in_out_recovery";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10026D6D4()
{
  return sub_100008BD0(&qword_1003D0808, (uint64_t)qword_100385640, (uint64_t)sub_10026D50C);
}

uint64_t sub_10026D6F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D0808, (uint64_t)qword_100385640, (uint64_t)sub_10026D50C, a1);
}

uint64_t sub_10026D70C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0) + 20);
          goto LABEL_5;
        case 2:
          v10 = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v10 + 24), a2, a3);
          break;
        case 3:
          v9 = *(int *)(type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0) + 28);
          goto LABEL_5;
        case 4:
          v9 = *(int *)(type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_10026D818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  int v11;
  unsigned int *v12;
  int v13;
  int v14;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  v10 = (int *)result;
  v11 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v11 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1, a2, a3);
  if (!v4)
  {
    v12 = (unsigned int *)(v5 + v10[6]);
    if ((v12[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v12, 2, a2, a3);
    v13 = *(unsigned __int8 *)(v5 + v10[7]);
    if (v13 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3, a2, a3);
    v14 = *(unsigned __int8 *)(v5 + v10[8]);
    if (v14 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v14 & 1, 4, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10026D948()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus, &qword_10037D650, (uint64_t)&unk_1002ED310);
}

uint64_t sub_10026D964@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  v6 = a2 + v5;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v7) = 2;
  return result;
}

uint64_t sub_10026D9B0(uint64_t a1, uint64_t a2)
{
  return sub_100103A00(a1, a2, &qword_1003D0800, &qword_100385630, algn_100385638, (uint64_t)sub_10026D438);
}

uint64_t sub_10026D9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026D70C(a1, a2, a3);
}

uint64_t sub_10026D9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026D818(a1, a2, a3);
}

uint64_t sub_10026D9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003801C0, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus, (uint64_t)&unk_1002ED288);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026DA48@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D0808, (uint64_t)qword_100385640, (uint64_t)sub_10026D50C, a1);
}

uint64_t sub_10026DA64(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DA58, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus, (uint64_t)&unk_1002ED210);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026DAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DA58, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus, (uint64_t)&unk_1002ED210);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_10026DAF4()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x7265766F6365522ELL;
  v0._object = (void *)0xEE00746E696F5079;
  String.append(_:)(v0);
  qword_100385658 = 0xD00000000000001DLL;
  unk_100385660 = 0x8000000100302B90;
}

uint64_t *sub_10026DB68()
{
  if (qword_1003D0810 != -1)
    swift_once(&qword_1003D0810, sub_10026DAF4);
  return &qword_100385658;
}

uint64_t sub_10026DBA8()
{
  return sub_100103668(&qword_1003D0810, &qword_100385658, &qword_100385660, (uint64_t)sub_10026DAF4);
}

uint64_t sub_10026DBC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100385668);
  sub_10000E6A4(v0, (uint64_t)qword_100385668);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "file";
  *(_QWORD *)(v9 + 8) = 4;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "line_number";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "function";
  *(_QWORD *)(v14 + 8) = 8;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10026DD64()
{
  return sub_100008BD0(&qword_1003D0818, (uint64_t)qword_100385668, (uint64_t)sub_10026DBC8);
}

uint64_t sub_10026DD80@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D0818, (uint64_t)qword_100385668, (uint64_t)sub_10026DBC8, a1);
}

uint64_t sub_10026DD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        v9 = *(int *)(type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint(0) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + v9, a2, a3);
        break;
      case 2:
        v12 = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + *(int *)(v12 + 24), a2, a3);
        break;
      case 1:
        v9 = *(int *)(type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint(0) + 20);
        goto LABEL_3;
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_10026DE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  _QWORD *v14;
  uint64_t v15;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint(0);
  v10 = result;
  v11 = (_QWORD *)(v5 + *(int *)(result + 20));
  v12 = v11[1];
  if (v12)
    result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v11, v12, 1, a2, a3);
  if (!v4)
  {
    v13 = (unsigned int *)(v5 + *(int *)(v10 + 24));
    if ((v13[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v13, 2, a2, a3);
    v14 = (_QWORD *)(v5 + *(int *)(v10 + 28));
    v15 = v14[1];
    if (v15)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v14, v15, 3, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_10026DF7C()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint, &qword_10037D658, (uint64_t)&unk_1002ED478);
}

uint64_t sub_10026DF98@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = (_QWORD *)(a2 + a1[5]);
  *v6 = 0;
  v6[1] = 0;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = (_QWORD *)(a2 + a1[7]);
  *v8 = 0;
  v8[1] = 0;
  return result;
}

uint64_t sub_10026DFE4(uint64_t a1, uint64_t a2)
{
  return sub_100103A00(a1, a2, &qword_1003D0810, &qword_100385658, &qword_100385660, (uint64_t)sub_10026DAF4);
}

uint64_t sub_10026E004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026DD9C(a1, a2, a3);
}

uint64_t sub_10026E018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026DE80(a1, a2, a3);
}

uint64_t sub_10026E02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003801B8, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint, (uint64_t)&unk_1002ED3F0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026E07C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D0818, (uint64_t)qword_100385668, (uint64_t)sub_10026DBC8, a1);
}

uint64_t sub_10026E098(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037D640, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint, (uint64_t)&unk_1002ED378);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026E0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037D640, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint, (uint64_t)&unk_1002ED378);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10026E128()
{
  return &unk_10035A160;
}

unint64_t sub_10026E134()
{
  return 0xD000000000000019;
}

uint64_t sub_10026E150(uint64_t a1)
{
  return sub_1000FB324(a1, qword_100385680, (uint64_t)"info_type", 9, (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t sub_10026E170()
{
  return sub_100008BD0(&qword_1003D0820, (uint64_t)qword_100385680, (uint64_t)sub_10026E150);
}

uint64_t sub_10026E18C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D0820, (uint64_t)qword_100385680, (uint64_t)sub_10026E150, a1);
}

uint64_t sub_10026E1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026E1D4(a1, a2, a3, type metadata accessor for Proto_Gpsd_LtlInfoRequest, (uint64_t (*)(void))sub_1002845B4, (uint64_t)&type metadata for Proto_Gpsd_LtlInfoType);
}

uint64_t sub_10026E1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t i;
  uint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v13 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v13, i);
    if (v7 || (v16 & 1) != 0)
      break;
    if (result == 1)
    {
      v17 = v6 + *(int *)(a4(0) + 20);
      v18 = a5();
      dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v17, a6, v18, a2, a3);
    }
    v7 = 0;
    v13 = a2;
  }
  return result;
}

uint64_t sub_10026E294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v10;
  char v11;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_LtlInfoRequest(0);
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 5)
  {
    v11 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v10 = sub_1002845B4();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v11, 1, &type metadata for Proto_Gpsd_LtlInfoType, v10, a2, a3);
  }
  if (!v4)
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  return result;
}

Swift::Int sub_10026E340()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_LtlInfoRequest, &qword_10037D660, (uint64_t)&unk_1002ED5E0);
}

uint64_t sub_10026E35C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = UnknownStorage.init()();
  *(_BYTE *)(a2 + *(int *)(a1 + 20)) = 5;
  return result;
}

uint64_t sub_10026E38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026E294(a1, a2, a3);
}

uint64_t sub_10026E3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003801B0, type metadata accessor for Proto_Gpsd_LtlInfoRequest, (uint64_t)&unk_1002ED558);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10026E3F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D0820, (uint64_t)qword_100385680, (uint64_t)sub_10026E150, a1);
}

uint64_t sub_10026E40C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DA80, type metadata accessor for Proto_Gpsd_LtlInfoRequest, (uint64_t)&unk_1002ED4E0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10026E44C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DA80, type metadata accessor for Proto_Gpsd_LtlInfoRequest, (uint64_t)&unk_1002ED4E0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_10026E49C()
{
  return &unk_10035A170;
}

unint64_t sub_10026E4A8()
{
  return 0xD000000000000012;
}

uint64_t sub_10026E4C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100385698);
  sub_10000E6A4(v0, (uint64_t)qword_100385698);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3140;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "success";
  *(_QWORD *)(v9 + 8) = 7;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "error_code";
  *(_QWORD *)(v13 + 8) = 10;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "info_type";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "initial_params";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v8 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "lut_params";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v8 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "current_src_calib";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v8 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "rac_pmic_adcr_pre_cal";
  *((_QWORD *)v23 + 1) = 21;
  v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10026E73C()
{
  return sub_100008BD0(&qword_1003D0828, (uint64_t)qword_100385698, (uint64_t)sub_10026E4C4);
}

uint64_t sub_10026E758@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D0828, (uint64_t)qword_100385698, (uint64_t)sub_10026E4C4, a1);
}

uint64_t sub_10026E774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v0 = type metadata accessor for Proto_Gpsd_LtlInfo._StorageClass(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_BYTE *)(v1 + 16) = 2;
  *(_DWORD *)(v1 + 20) = 0;
  *(_WORD *)(v1 + 24) = 1281;
  v2 = v1
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams;
  v3 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams;
  v5 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib;
  v7 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal;
  v9 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  qword_1003D0838 = v1;
  return result;
}

uint64_t sub_10026E880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE v46[24];
  _BYTE v47[24];
  _BYTE v48[32];

  v2 = v1;
  v4 = sub_1000039AC(&qword_10037D550);
  __chkstk_darwin(v4);
  v37 = (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10037D548);
  __chkstk_darwin(v6);
  v36 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC(&qword_10037D540);
  __chkstk_darwin(v8);
  v35 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000039AC(&qword_10037D538);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v1 + 16) = 2;
  v13 = (_BYTE *)(v1 + 16);
  *(_DWORD *)(v1 + 20) = 0;
  v14 = (_DWORD *)(v1 + 20);
  *(_WORD *)(v2 + 24) = 1281;
  v33 = v2 + 25;
  v15 = v2
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams;
  v16 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v2
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams;
  v18 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v2
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib;
  v20 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = v2
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal;
  v34 = v2
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal;
  v22 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  swift_beginAccess(a1 + 16, v48, 0, 0);
  LOBYTE(v21) = *(_BYTE *)(a1 + 16);
  swift_beginAccess(v13, v47, 1, 0);
  *v13 = v21;
  swift_beginAccess(a1 + 20, v46, 0, 0);
  LODWORD(v13) = *(_DWORD *)(a1 + 20);
  LOBYTE(v21) = *(_BYTE *)(a1 + 24);
  swift_beginAccess(v14, v45, 1, 0);
  *v14 = (_DWORD)v13;
  *(_BYTE *)(v2 + 24) = v21;
  swift_beginAccess(a1 + 25, &v44, 0, 0);
  LOBYTE(v14) = *(_BYTE *)(a1 + 25);
  swift_beginAccess(v33, &v43, 1, 0);
  *(_BYTE *)(v2 + 25) = (_BYTE)v14;
  v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams, &v42, 0, 0);
  sub_10000E660(v23, (uint64_t)v12, &qword_10037D538);
  swift_beginAccess(v15, v41, 33, 0);
  sub_10000E574((uint64_t)v12, v15, &qword_10037D538);
  swift_endAccess(v41);
  v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams;
  swift_beginAccess(a1 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams, v41, 0, 0);
  v25 = v35;
  sub_10000E660(v24, v35, &qword_10037D540);
  swift_beginAccess(v17, v40, 33, 0);
  sub_10000E574(v25, v17, &qword_10037D540);
  swift_endAccess(v40);
  v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib, v40, 0, 0);
  v27 = v36;
  sub_10000E660(v26, v36, &qword_10037D548);
  swift_beginAccess(v19, v39, 33, 0);
  sub_10000E574(v27, v19, &qword_10037D548);
  swift_endAccess(v39);
  v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal;
  swift_beginAccess(a1+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal, v39, 0, 0);
  v29 = v37;
  sub_10000E660(v28, v37, &qword_10037D550);
  swift_release(a1);
  v30 = v34;
  swift_beginAccess(v34, v38, 33, 0);
  sub_10000E574(v29, v30, &qword_10037D550);
  swift_endAccess(v38);
  return v2;
}

uint64_t sub_10026ECE0()
{
  uint64_t v0;

  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams, &qword_10037D538);
  sub_100015704(v0 + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams, &qword_10037D540);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib, &qword_10037D548);
  sub_100015704(v0+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal[0], &qword_10037D550);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10026ED60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t (*v25)(uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  uint64_t v30;

  v5 = v4;
  v6 = v3;
  v9 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + v9)) & 1) == 0)
  {
    v10 = *(_QWORD *)(v3 + v9);
    v11 = type metadata accessor for Proto_Gpsd_LtlInfo._StorageClass(0);
    v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v13 = swift_retain(v10);
    sub_10026E880(v13);
    v14 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v6 + v9) = v12;
    swift_release(v14);
  }
  v15 = *(_QWORD *)(v6 + v9);
  swift_retain(v15);
  v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    v30 = v15 + 25;
    v28 = v15 + 20;
    while ((v17 & 1) == 0)
    {
      switch(v16)
      {
        case 1:
          swift_beginAccess(v15 + 16, v29, 33, 0);
          v19 = v5;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v15 + 16, a2, a3);
          goto LABEL_16;
        case 2:
          swift_beginAccess(v28, v29, 33, 0);
          v19 = v5;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v28, a2, a3);
          goto LABEL_16;
        case 3:
          v20 = v30;
          swift_beginAccess(v30, v29, 33, 0);
          v21 = sub_1002845B4();
          v19 = v5;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v20, &type metadata for Proto_Gpsd_LtlInfoType, v21, a2, a3);
          goto LABEL_16;
        case 4:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams, v29, 33, 0);
          v23 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
          v24 = (unint64_t *)&unk_10037DAF8;
          v25 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams;
          v26 = &unk_1002EDBE8;
          goto LABEL_15;
        case 5:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams, v29, 33, 0);
          v23 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(0);
          v24 = (unint64_t *)&unk_10037DAB0;
          v25 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams;
          v26 = &unk_1002ED7B0;
          goto LABEL_15;
        case 6:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib;
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib, v29, 33, 0);
          v23 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(0);
          v24 = (unint64_t *)&unk_10037DAC8;
          v25 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData;
          v26 = &unk_1002ED918;
          goto LABEL_15;
        case 7:
          v22 = v15
              + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal[0];
          swift_beginAccess(v15+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal[0], v29, 33, 0);
          v23 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData(0);
          v24 = (unint64_t *)&unk_10037DAE0;
          v25 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData;
          v26 = &unk_1002EDA80;
LABEL_15:
          v27 = sub_10000FD38(v24, v25, (uint64_t)v26);
          v19 = v5;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v22, v23, v27, a2, a3);
LABEL_16:
          v5 = v19;
          swift_endAccess(v29);
          break;
        default:
          break;
      }
      v16 = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return swift_release(v15);
}

uint64_t sub_10026F08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int v10;
  unint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  char v16;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo(0) + 20));
  swift_retain(v9);
  swift_beginAccess(v9 + 16, v13, 0, 0);
  v10 = *(unsigned __int8 *)(v9 + 16);
  if (v10 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v10 & 1, 1, a2, a3);
  if (v4)
    return swift_release(v9);
  swift_beginAccess(v9 + 20, v14, 0, 0);
  if ((*(_BYTE *)(v9 + 24) & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*(unsigned int *)(v9 + 20), 2, a2, a3);
  swift_beginAccess(v9 + 25, v15, 0, 0);
  if (*(_BYTE *)(v9 + 25) != 5)
  {
    v16 = *(_BYTE *)(v9 + 25);
    v12 = sub_1002845B4();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v16, 3, &type metadata for Proto_Gpsd_LtlInfoType, v12, a2, a3);
  }
  sub_10026F278(v9, a1, a2, a3);
  sub_10026F404(v9, a1, a2, a3);
  sub_10026F590(v9, a1, a2, a3);
  sub_10026F71C(v9, a1, a2, a3);
  swift_release(v9);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10026F278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10037D538);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10037D538);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10037D538);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams);
  v15 = sub_10000FD38(&qword_10037DAF8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams, (uint64_t)&unk_1002EDBE8);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams);
}

uint64_t sub_10026F404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10037D540);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10037D540);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10037D540);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams);
  v15 = sub_10000FD38(&qword_10037DAB0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams, (uint64_t)&unk_1002ED7B0);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams);
}

uint64_t sub_10026F590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10037D548);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib;
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10037D548);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10037D548);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
  v15 = sub_10000FD38(&qword_10037DAC8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData, (uint64_t)&unk_1002ED918);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
}

uint64_t sub_10026F71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;

  v18 = a4;
  v6 = sub_1000039AC(&qword_10037D550);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal[0];
  swift_beginAccess(v13, v17, 0, 0);
  sub_10000E660(v13, (uint64_t)v8, &qword_10037D550);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_10037D550);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
  v15 = sub_10000FD38(&qword_10037DAE0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData, (uint64_t)&unk_1002EDA80);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 7, v9, v15, a3, v18);
  return sub_100004030((uint64_t)v12, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
}

uint64_t sub_10026F8A8(uint64_t a1, uint64_t a2)
{
  return sub_100065A60(a1, a2, type metadata accessor for Proto_Gpsd_LtlInfo, (uint64_t (*)(uint64_t, uint64_t))sub_10026F8D0) & 1;
}

BOOL sub_10026F8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  _BOOL8 result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  int v73;
  uint64_t *v74;
  uint64_t *v75;
  int v76;
  uint64_t v77;
  uint64_t *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t);
  int v88;
  uint64_t v89;
  uint64_t *v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  char v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[24];
  char v133[24];
  char v134[24];
  char v135[24];
  char v136[24];
  char v137[24];
  char v138[32];

  v4 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData(0);
  v106 = *(_QWORD *)(v4 - 8);
  v107 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1000039AC(&qword_1003802E8);
  __chkstk_darwin(v105);
  v8 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000039AC(&qword_10037D550);
  v10 = __chkstk_darwin(v9);
  v103 = (uint64_t)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v108 = (uint64_t)&v100 - v12;
  v13 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(0);
  v111 = *(_QWORD *)(v13 - 8);
  v112 = v13;
  __chkstk_darwin(v13);
  v104 = (uint64_t *)((char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v110 = sub_1000039AC(&qword_1003802F0);
  __chkstk_darwin(v110);
  v113 = (uint64_t)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000039AC(&qword_10037D548);
  v17 = __chkstk_darwin(v16);
  v117 = (uint64_t *)((char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  v115 = (uint64_t)&v100 - v19;
  v20 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(0);
  v119 = *(_QWORD *)(v20 - 8);
  v120 = v20;
  __chkstk_darwin(v20);
  v109 = (uint64_t *)((char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v118 = sub_1000039AC(&qword_1003802F8);
  __chkstk_darwin(v118);
  v121 = (uint64_t)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000039AC(&qword_10037D540);
  v24 = __chkstk_darwin(v23);
  v114 = (uint64_t *)((char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v24);
  v123 = (uint64_t)&v100 - v26;
  v27 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v116 = (uint64_t)&v100 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1000039AC(&qword_100380300);
  __chkstk_darwin(v30);
  v124 = (uint64_t)&v100 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1000039AC(&qword_10037D538);
  v33 = __chkstk_darwin(v32);
  v122 = (uint64_t)&v100 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v36 = (char *)&v100 - v35;
  swift_beginAccess(a1 + 16, v138, 0, 0);
  v37 = *(unsigned __int8 *)(a1 + 16);
  swift_beginAccess(a2 + 16, v137, 0, 0);
  v38 = *(unsigned __int8 *)(a2 + 16);
  if (v37 == 2)
  {
    if (v38 != 2)
      return 0;
  }
  else if (v38 == 2 || ((((v38 & 1) == 0) ^ v37) & 1) == 0)
  {
    return 0;
  }
  v100 = v6;
  v101 = v8;
  swift_beginAccess(a1 + 20, v136, 0, 0);
  v39 = *(_DWORD *)(a1 + 20);
  v40 = a2;
  v102 = a1;
  v41 = *(_BYTE *)(a1 + 24);
  swift_beginAccess(v40 + 20, v135, 0, 0);
  v42 = *(_BYTE *)(v40 + 24);
  if ((v41 & 1) != 0)
  {
    if (!*(_BYTE *)(v40 + 24))
      return 0;
  }
  else
  {
    if (v39 != *(_DWORD *)(v40 + 20))
      v42 = 1;
    if ((v42 & 1) != 0)
      return 0;
  }
  v43 = v102;
  swift_beginAccess(v102 + 25, v134, 0, 0);
  v44 = *(unsigned __int8 *)(v43 + 25);
  v45 = v40;
  swift_beginAccess(v40 + 25, v133, 0, 0);
  v46 = *(unsigned __int8 *)(v40 + 25);
  if (v44 == 5)
  {
    if (v46 != 5)
      return 0;
LABEL_17:
    v48 = v102;
    v49 = v102
        + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams;
    swift_beginAccess(v102+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams, v132, 0, 0);
    sub_10000E660(v49, (uint64_t)v36, &qword_10037D538);
    v50 = v40
        + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams;
    swift_beginAccess(v40+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams, &v131, 0, 0);
    v51 = v124;
    v52 = v124 + *(int *)(v30 + 48);
    sub_10000E660((uint64_t)v36, v124, &qword_10037D538);
    v53 = v50;
    v54 = v51;
    sub_10000E660(v53, v52, &qword_10037D538);
    v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
    if (v55(v51, 1, v27) == 1)
    {
      swift_retain(v48);
      swift_retain(v40);
      sub_100015704((uint64_t)v36, &qword_10037D538);
      v56 = v55(v52, 1, v27);
      v57 = (uint64_t)v101;
      if (v56 == 1)
      {
        sub_100015704(v54, &qword_10037D538);
        v58 = (uint64_t)v100;
LABEL_24:
        v66 = v48
            + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams;
        swift_beginAccess(v48+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams, &v130, 0, 0);
        v67 = v123;
        sub_10000E660(v66, v123, &qword_10037D540);
        v68 = v45
            + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams;
        swift_beginAccess(v45+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams, &v129, 0, 0);
        v69 = v121;
        v70 = v121 + *(int *)(v118 + 48);
        sub_10000E660(v67, v121, &qword_10037D540);
        sub_10000E660(v68, v70, &qword_10037D540);
        v71 = v120;
        v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 48);
        if (v72(v69, 1, v120) == 1)
        {
          sub_100015704(v67, &qword_10037D540);
          v73 = v72(v70, 1, v71);
          v48 = v102;
          v74 = v117;
          if (v73 == 1)
          {
            sub_100015704(v69, &qword_10037D540);
LABEL_36:
            v80 = v48
                + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib;
            swift_beginAccess(v48+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib, &v128, 0, 0);
            v81 = v115;
            sub_10000E660(v80, v115, &qword_10037D548);
            v82 = v45
                + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib;
            swift_beginAccess(v45+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib, &v127, 0, 0);
            v83 = v113;
            v84 = v113 + *(int *)(v110 + 48);
            sub_10000E660(v81, v113, &qword_10037D548);
            v85 = v83;
            sub_10000E660(v82, v84, &qword_10037D548);
            v86 = v112;
            v87 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
            if (v87(v85, 1, v112) == 1)
            {
              sub_100015704(v81, &qword_10037D548);
              v88 = v87(v84, 1, v86);
              v89 = v102;
              if (v88 == 1)
              {
                sub_100015704(v85, &qword_10037D548);
LABEL_43:
                v92 = v89
                    + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal[0];
                swift_beginAccess(v89+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal[0], &v126, 0, 0);
                v93 = v108;
                sub_10000E660(v92, v108, &qword_10037D550);
                v94 = v45
                    + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal[0];
                swift_beginAccess(v45+ OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal[0], &v125, 0, 0);
                v95 = v57 + *(int *)(v105 + 48);
                sub_10000E660(v93, v57, &qword_10037D550);
                sub_10000E660(v94, v95, &qword_10037D550);
                v96 = v107;
                v97 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
                if (v97(v57, 1, v107) == 1)
                {
                  swift_release(v89);
                  swift_release(v45);
                  sub_100015704(v93, &qword_10037D550);
                  if (v97(v95, 1, v96) == 1)
                  {
                    sub_100015704(v57, &qword_10037D550);
                    return 1;
                  }
                  goto LABEL_48;
                }
                v98 = v103;
                sub_10000E660(v57, v103, &qword_10037D550);
                if (v97(v95, 1, v96) == 1)
                {
                  swift_release(v102);
                  swift_release(v45);
                  sub_100015704(v108, &qword_10037D550);
                  sub_100004030(v98, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
LABEL_48:
                  sub_100015704(v57, &qword_1003802E8);
                  return 0;
                }
                sub_100003E08(v95, v58, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
                v99 = sub_1001D3C4C(v98, v58, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
                swift_release(v102);
                swift_release(v45);
                sub_100004030(v58, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
                sub_100015704(v108, &qword_10037D550);
                sub_100004030(v98, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
                sub_100015704(v57, &qword_10037D550);
                return (v99 & 1) != 0;
              }
              goto LABEL_41;
            }
            sub_10000E660(v85, (uint64_t)v74, &qword_10037D548);
            if (v87(v84, 1, v86) == 1)
            {
              sub_100015704(v115, &qword_10037D548);
              sub_100004030((uint64_t)v74, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
              v89 = v102;
LABEL_41:
              sub_100015704(v85, &qword_1003802F0);
              v77 = v89;
              goto LABEL_32;
            }
            v90 = v104;
            sub_100003E08(v84, (uint64_t)v104, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
            v91 = sub_100278DD8(v74, v90);
            sub_100004030((uint64_t)v90, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
            sub_100015704(v115, &qword_10037D548);
            sub_100004030((uint64_t)v74, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
            sub_100015704(v85, &qword_10037D548);
            v89 = v102;
            if ((v91 & 1) != 0)
              goto LABEL_43;
            v77 = v102;
LABEL_32:
            swift_release(v77);
            swift_release(v45);
            return 0;
          }
          goto LABEL_29;
        }
        v75 = v114;
        sub_10000E660(v69, (uint64_t)v114, &qword_10037D540);
        v76 = v72(v70, 1, v71);
        v74 = v117;
        if (v76 == 1)
        {
          sub_100015704(v123, &qword_10037D540);
          sub_100004030((uint64_t)v75, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams);
          v48 = v102;
LABEL_29:
          v61 = &qword_1003802F8;
          v62 = v69;
          goto LABEL_30;
        }
        v78 = v109;
        sub_100003E08(v70, (uint64_t)v109, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams);
        v79 = sub_100278C2C(v75, v78);
        sub_100004030((uint64_t)v78, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams);
        sub_100015704(v123, &qword_10037D540);
        sub_100004030((uint64_t)v75, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams);
        sub_100015704(v69, &qword_10037D540);
        v48 = v102;
        if ((v79 & 1) != 0)
          goto LABEL_36;
LABEL_31:
        v77 = v48;
        goto LABEL_32;
      }
    }
    else
    {
      v59 = v122;
      sub_10000E660(v51, v122, &qword_10037D538);
      v60 = v55(v52, 1, v27);
      v57 = (uint64_t)v101;
      if (v60 != 1)
      {
        v63 = v59;
        v64 = v116;
        sub_100003E08(v52, v116, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams);
        swift_retain(v48);
        swift_retain(v45);
        v65 = sub_100278F70(v63, v64);
        sub_100004030(v64, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams);
        sub_100015704((uint64_t)v36, &qword_10037D538);
        sub_100004030(v63, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams);
        v58 = (uint64_t)v100;
        sub_100015704(v54, &qword_10037D538);
        if ((v65 & 1) == 0)
          goto LABEL_31;
        goto LABEL_24;
      }
      swift_retain(v48);
      swift_retain(v45);
      sub_100015704((uint64_t)v36, &qword_10037D538);
      sub_100004030(v59, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams);
    }
    v61 = &qword_100380300;
    v62 = v54;
LABEL_30:
    sub_100015704(v62, v61);
    goto LABEL_31;
  }
  result = 0;
  if (v46 != 5 && v44 == v46)
    goto LABEL_17;
  return result;
}

Swift::Int sub_100270508()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_LtlInfo, &qword_10037D668, (uint64_t)&unk_1002ED748);
}

uint64_t sub_100270524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005DD1C(a1, &qword_1003D0830, &qword_1003D0838, (uint64_t)sub_10026E774, a2);
}

uint64_t sub_100270540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026ED60(a1, a2, a3);
}

uint64_t sub_100270554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026F08C(a1, a2, a3);
}

uint64_t sub_100270568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003801A8, type metadata accessor for Proto_Gpsd_LtlInfo, (uint64_t)&unk_1002ED6C0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1002705B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D0828, (uint64_t)qword_100385698, (uint64_t)sub_10026E4C4, a1);
}

uint64_t sub_1002705D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DA98, type metadata accessor for Proto_Gpsd_LtlInfo, (uint64_t)&unk_1002ED648);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100270614(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DA98, type metadata accessor for Proto_Gpsd_LtlInfo, (uint64_t)&unk_1002ED648);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_100270664()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x5074754C6C744C2ELL;
  v0._object = (void *)0xED0000736D617261;
  String.append(_:)(v0);
  qword_1003856B0 = 0xD000000000000012;
  *(_QWORD *)algn_1003856B8 = 0x8000000100302BD0;
}

uint64_t *sub_1002706D8()
{
  if (qword_1003D0840 != -1)
    swift_once(&qword_1003D0840, sub_100270664);
  return &qword_1003856B0;
}

uint64_t sub_100270718()
{
  return sub_100103668(&qword_1003D0840, &qword_1003856B0, algn_1003856B8, (uint64_t)sub_100270664);
}

uint64_t sub_100270738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003856C0);
  sub_10000E6A4(v0, (uint64_t)qword_1003856C0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40D0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "ltl_update_count";
  *(_QWORD *)(v9 + 8) = 16;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "ltl_cleanup_count";
  *(_QWORD *)(v13 + 8) = 17;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "s_curve_val";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "s_curve_history";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1002708F8()
{
  return sub_100008BD0(&qword_1003D0848, (uint64_t)qword_1003856C0, (uint64_t)sub_100270738);
}

uint64_t sub_100270914@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D0848, (uint64_t)qword_1003856C0, (uint64_t)sub_100270738, a1);
}

uint64_t sub_100270930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v10 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(0) + 28);
          goto LABEL_5;
        case 2:
          v10 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(0) + 32);
LABEL_5:
          v11 = v9;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + v10, a2, a3);
          goto LABEL_6;
        case 3:
          v11 = v9;
          dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)(v3, a2, a3);
          goto LABEL_6;
        case 4:
          v11 = v9;
          dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)(v3 + 8, a2, a3);
LABEL_6:
          v9 = v11;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100270A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;

  result = type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(0);
  v9 = result;
  v10 = (unsigned int *)((char *)v3 + *(int *)(result + 28));
  if ((v10[1] & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v10, 1, a2, a3);
  if (!v4)
  {
    v11 = (unsigned int *)((char *)v3 + *(int *)(v9 + 32));
    if ((v11[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 2, a2, a3);
    if (*(_QWORD *)(*v3 + 16))
      dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)();
    v12 = v3[1];
    if (*(_QWORD *)(v12 + 16))
      dispatch thunk of Visitor.visitRepeatedUInt32Field(value:fieldNumber:)(v12, 4, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_100270B74()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams, &qword_10037D670, (uint64_t)&unk_1002ED8B0);
}

uint64_t sub_100270B90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  char *v7;

  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 32);
  v6 = (char *)a2 + *(int *)(a1 + 28);
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = (char *)a2 + v5;
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  return result;
}

uint64_t sub_100270BE8(uint64_t a1, uint64_t a2)
{
  return sub_100103A00(a1, a2, &qword_1003D0840, &qword_1003856B0, algn_1003856B8, (uint64_t)sub_100270664);
}

uint64_t sub_100270C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100270930(a1, a2, a3);
}

uint64_t sub_100270C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100270A38(a1, a2, a3);
}

uint64_t sub_100270C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_1003801A0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams, (uint64_t)&unk_1002ED828);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100270C80@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D0848, (uint64_t)qword_1003856C0, (uint64_t)sub_100270738, a1);
}

uint64_t sub_100270C9C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DAB0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams, (uint64_t)&unk_1002ED7B0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100270CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DAB0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams, (uint64_t)&unk_1002ED7B0);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_100270D2C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0xD000000000000017;
  v0._object = (void *)0x8000000100303730;
  String.append(_:)(v0);
  qword_1003856D8 = 0xD000000000000012;
  unk_1003856E0 = 0x8000000100302BD0;
}

uint64_t *sub_100270D98()
{
  if (qword_1003D0850 != -1)
    swift_once(&qword_1003D0850, sub_100270D2C);
  return &qword_1003856D8;
}

uint64_t sub_100270DD8()
{
  return sub_100103668(&qword_1003D0850, &qword_1003856D8, &qword_1003856E0, (uint64_t)sub_100270D2C);
}

uint64_t sub_100270DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003856E8);
  sub_10000E6A4(v0, (uint64_t)qword_1003856E8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "correction_factor";
  *(_QWORD *)(v9 + 8) = 17;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "prod_version";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "post_cal_version";
  *(_QWORD *)(v14 + 8) = 16;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100270F8C()
{
  return sub_100008BD0(&qword_1003D0858, (uint64_t)qword_1003856E8, (uint64_t)sub_100270DF8);
}

uint64_t sub_100270FA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D0858, (uint64_t)qword_1003856E8, (uint64_t)sub_100270DF8, a1);
}

uint64_t sub_100270FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        v9 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(0) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + v9, a2, a3);
        break;
      case 2:
        v9 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(0) + 24);
        goto LABEL_3;
      case 1:
        dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)(v3, a2, a3);
        break;
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_10027109C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;

  if (!*(_QWORD *)(*(_QWORD *)v3 + 16)
    || (result = dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)(), !v4))
  {
    result = type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(0);
    v9 = result;
    v10 = (unsigned int *)(v3 + *(int *)(result + 24));
    if ((v10[1] & 1) == 0)
      result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v10, 2, a2, a3);
    if (!v4)
    {
      v11 = (unsigned int *)(v3 + *(int *)(v9 + 28));
      if ((v11[1] & 1) == 0)
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v11, 3, a2, a3);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }
  return result;
}

Swift::Int sub_1002711A8()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData, &qword_10037D678, (uint64_t)&unk_1002EDA18);
}

uint64_t sub_1002711C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  char *v7;

  *a2 = &_swiftEmptyArrayStorage;
  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 28);
  v6 = (char *)a2 + *(int *)(a1 + 24);
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = (char *)a2 + v5;
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  return result;
}

uint64_t sub_10027121C(uint64_t a1, uint64_t a2)
{
  return sub_100103A00(a1, a2, &qword_1003D0850, &qword_1003856D8, &qword_1003856E0, (uint64_t)sub_100270D2C);
}

uint64_t sub_10027123C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100270FC4(a1, a2, a3);
}

uint64_t sub_100271250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027109C(a1, a2, a3);
}

uint64_t sub_100271264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100380198, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData, (uint64_t)&unk_1002ED990);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1002712B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D0858, (uint64_t)qword_1003856E8, (uint64_t)sub_100270DF8, a1);
}

uint64_t sub_1002712D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DAC8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData, (uint64_t)&unk_1002ED918);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100271310(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DAC8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData, (uint64_t)&unk_1002ED918);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_100271360()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0xD000000000000018;
  v0._object = (void *)0x80000001003036D0;
  String.append(_:)(v0);
  qword_100385700 = 0xD000000000000012;
  *(_QWORD *)algn_100385708 = 0x8000000100302BD0;
}

uint64_t *sub_1002713C8()
{
  if (qword_1003D0860 != -1)
    swift_once(&qword_1003D0860, sub_100271360);
  return &qword_100385700;
}

uint64_t sub_100271408()
{
  return sub_100103668(&qword_1003D0860, &qword_100385700, algn_100385708, (uint64_t)sub_100271360);
}

uint64_t sub_100271428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100385710);
  sub_10000E6A4(v0, (uint64_t)qword_100385710);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3150;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "adc_gain";
  *(_QWORD *)(v9 + 8) = 8;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "adc_offset";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100271578()
{
  return sub_100008BD0(&qword_1003D0868, (uint64_t)qword_100385710, (uint64_t)sub_100271428);
}

uint64_t sub_100271594@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D0868, (uint64_t)qword_100385710, (uint64_t)sub_100271428, a1);
}

uint64_t sub_1002715B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002715D4(a1, a2, a3, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularInt32Field(value:));
}

uint64_t sub_1002715D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t result;
  char v15;
  uint64_t v16;

  v11 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v11, i);
    if (v6 || (v15 & 1) != 0)
      break;
    if (result == 2)
    {
      v13 = a4(0);
      dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v5 + *(int *)(v13 + 24), a2, a3);
    }
    else if (result == 1)
    {
      v16 = a4(0);
      a5(v5 + *(int *)(v16 + 20), a2, a3);
    }
    v6 = 0;
    v11 = a2;
  }
  return result;
}

uint64_t sub_1002716B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002716D4(a1, a2, a3, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))&dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:));
}

uint64_t sub_1002716D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;

  v8 = v5;
  result = a4(0);
  v13 = result;
  v14 = (unsigned int *)(v8 + *(int *)(result + 20));
  if ((v14[1] & 1) == 0)
    result = a5(*v14, 1, a2, a3);
  if (!v6)
  {
    v15 = (unsigned int *)(v8 + *(int *)(v13 + 24));
    if ((v15[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v15, 2, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1002717A8(uint64_t a1, uint64_t a2)
{
  return sub_1001D3C4C(a1, a2, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData) & 1;
}

Swift::Int sub_1002717C8()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData, &qword_10037D680, (uint64_t)&unk_1002EDB80);
}

uint64_t sub_1002717E4(uint64_t a1, uint64_t a2)
{
  return sub_100103A00(a1, a2, &qword_1003D0860, &qword_100385700, algn_100385708, (uint64_t)sub_100271360);
}

uint64_t sub_100271804(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100380190, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData, (uint64_t)&unk_1002EDAF8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100271854@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D0868, (uint64_t)qword_100385710, (uint64_t)sub_100271428, a1);
}

uint64_t sub_100271870(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DAE0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData, (uint64_t)&unk_1002EDA80);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1002718B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DAE0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData, (uint64_t)&unk_1002EDA80);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_100271900()
{
  Swift::String v0;

  v0._object = (void *)0x80000001003036A0;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  qword_100385728 = 0xD000000000000012;
  unk_100385730 = 0x8000000100302BD0;
}

uint64_t *sub_100271970()
{
  if (qword_1003D0870 != -1)
    swift_once(&qword_1003D0870, sub_100271900);
  return &qword_100385728;
}

uint64_t sub_1002719B0()
{
  return sub_100103668(&qword_1003D0870, &qword_100385728, &qword_100385730, (uint64_t)sub_100271900);
}

uint64_t sub_1002719D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100385738);
  sub_10000E6A4(v0, (uint64_t)qword_100385738);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 11 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C40E0;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "c5";
  *(_QWORD *)(v9 + 8) = 2;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.same(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "c4";
  *(_QWORD *)(v13 + 8) = 2;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v7 + v6 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "c3";
  *((_QWORD *)v15 + 1) = 2;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v7 + v6 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "c2";
  *((_QWORD *)v17 + 1) = 2;
  v17[16] = 2;
  v12();
  v18 = (_QWORD *)(v7 + v6 + 4 * v4);
  v19 = (char *)v18 + *(int *)(v2 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "c1";
  *((_QWORD *)v19 + 1) = 2;
  v19[16] = 2;
  v12();
  v20 = (_QWORD *)(v7 + v6 + 5 * v4);
  v21 = (char *)v20 + *(int *)(v2 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "c0";
  *((_QWORD *)v21 + 1) = 2;
  v21[16] = 2;
  v12();
  v22 = (_QWORD *)(v7 + v6 + 6 * v4);
  v23 = (char *)v22 + *(int *)(v2 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "coeff_calibrated";
  *((_QWORD *)v23 + 1) = 16;
  v23[16] = 2;
  v12();
  v24 = (_QWORD *)(v7 + v6 + 7 * v4);
  v25 = (char *)v24 + *(int *)(v2 + 48);
  *v24 = 8;
  *(_QWORD *)v25 = "ref_temp";
  *((_QWORD *)v25 + 1) = 8;
  v25[16] = 2;
  v12();
  v26 = v7 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 8 * v4) = 9;
  *(_QWORD *)v26 = "ltl_cleanup_factor";
  *(_QWORD *)(v26 + 8) = 18;
  *(_BYTE *)(v26 + 16) = 2;
  v12();
  v27 = (_QWORD *)(v7 + v6 + 9 * v4);
  v28 = (char *)v27 + *(int *)(v2 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "hw_id";
  *((_QWORD *)v28 + 1) = 5;
  v28[16] = 2;
  v12();
  v29 = (_QWORD *)(v7 + v6 + 10 * v4);
  v30 = (char *)v29 + *(int *)(v2 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "clock_id";
  *((_QWORD *)v30 + 1) = 8;
  v30[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100271D08()
{
  return sub_100008BD0(&qword_1003D0878, (uint64_t)qword_100385738, (uint64_t)sub_1002719D0);
}

uint64_t sub_100271D24@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D0878, (uint64_t)qword_100385738, (uint64_t)sub_1002719D0, a1);
}

uint64_t sub_100271D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v9 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0) + 20);
          goto LABEL_13;
        case 2:
          v9 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0) + 24);
          goto LABEL_13;
        case 3:
          v9 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0) + 28);
          goto LABEL_13;
        case 4:
          v9 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0) + 32);
          goto LABEL_13;
        case 5:
          v9 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0) + 36);
          goto LABEL_13;
        case 6:
          v9 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0) + 40);
          goto LABEL_13;
        case 7:
          v10 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + *(int *)(v10 + 44), a2, a3);
          break;
        case 8:
          v9 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0) + 48);
LABEL_13:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + v9, a2, a3);
          break;
        case 9:
          v11 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0) + 52);
          goto LABEL_17;
        case 10:
          v11 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0) + 56);
          goto LABEL_17;
        case 11:
          v11 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0) + 60);
LABEL_17:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + v11, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100271ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  v10 = (int *)result;
  v11 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v11[1] & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v11, 1, a2, a3);
  if (!v4)
  {
    v12 = (unsigned int *)(v5 + v10[6]);
    if ((v12[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v12, 2, a2, a3);
    v13 = (unsigned int *)(v5 + v10[7]);
    if ((v13[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v13, 3, a2, a3);
    v14 = (unsigned int *)(v5 + v10[8]);
    if ((v14[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v14, 4, a2, a3);
    sub_1002720E0(v5, a1, a2, a3);
    sub_100272154(v5, a1, a2, a3);
    sub_1002721C8(v5, a1, a2, a3);
    sub_10027223C(v5, a1, a2, a3);
    sub_1002722B0(v5, a1, a2, a3);
    sub_100272324(v5, a1, a2, a3);
    sub_100272398(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1002720E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 36));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v8, 5, a3, a4);
  return result;
}

uint64_t sub_100272154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 40));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v8, 6, a3, a4);
  return result;
}

uint64_t sub_1002721C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;

  result = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(result + 44));
  if (v8 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v8 & 1, 7, a3, a4);
  return result;
}

uint64_t sub_10027223C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 48));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v8, 8, a3, a4);
  return result;
}

uint64_t sub_1002722B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 52));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v8, 9, a3, a4);
  return result;
}

uint64_t sub_100272324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 56));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v8, 10, a3, a4);
  return result;
}

uint64_t sub_100272398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int *v8;

  result = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  v8 = (unsigned int *)(a1 + *(int *)(result + 60));
  if ((v8[1] & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v8, 11, a3, a4);
  return result;
}

Swift::Int sub_100272410()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams, &qword_10037D688, (uint64_t)&unk_1002EDCE8);
}

uint64_t sub_10027242C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a2 + v8;
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1[10];
  v12 = a2 + a1[9];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a2 + v11;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  v15 = a2 + v14;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a1[14];
  v17 = a2 + a1[13];
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  v18 = a2 + v16;
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  v19 = a2 + a1[15];
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  return result;
}

uint64_t sub_1002724EC(uint64_t a1, uint64_t a2)
{
  return sub_100103A00(a1, a2, &qword_1003D0870, &qword_100385728, &qword_100385730, (uint64_t)sub_100271900);
}

uint64_t sub_10027250C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100271D40(a1, a2, a3);
}

uint64_t sub_100272520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100271ED4(a1, a2, a3);
}

uint64_t sub_100272534(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100380188, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams, (uint64_t)&unk_1002EDC60);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100272584@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D0878, (uint64_t)qword_100385738, (uint64_t)sub_1002719D0, a1);
}

uint64_t sub_1002725A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DAF8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams, (uint64_t)&unk_1002EDBE8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1002725E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DAF8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams, (uint64_t)&unk_1002EDBE8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100272630()
{
  return &unk_10035A180;
}

unint64_t sub_10027263C()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_100272658(uint64_t a1)
{
  return sub_1000FB324(a1, qword_100385750, (uint64_t)"status", 6, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t sub_100272678()
{
  return sub_100008BD0(&qword_1003D0880, (uint64_t)qword_100385750, (uint64_t)sub_100272658);
}

uint64_t sub_100272694@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D0880, (uint64_t)qword_100385750, (uint64_t)sub_100272658, a1);
}

uint64_t sub_1002726B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10026E1D4(a1, a2, a3, type metadata accessor for Proto_Gpsd_CntinStatusMessage, (uint64_t (*)(void))sub_100284570, (uint64_t)&type metadata for Proto_Gpsd_CntinStatus);
}

uint64_t sub_1002726DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v10;
  char v11;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_CntinStatusMessage(0);
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 7)
  {
    v11 = *(_BYTE *)(v5 + *(int *)(result + 20));
    v10 = sub_100284570();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(&v11, 1, &type metadata for Proto_Gpsd_CntinStatus, v10, a2, a3);
  }
  if (!v4)
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  return result;
}

Swift::Int sub_100272788()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_CntinStatusMessage, &qword_10037D690, (uint64_t)&unk_1002EDE50);
}

uint64_t sub_1002727A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = UnknownStorage.init()();
  *(_BYTE *)(a2 + *(int *)(a1 + 20)) = 7;
  return result;
}

uint64_t sub_1002727D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002726DC(a1, a2, a3);
}

uint64_t sub_1002727E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100380180, type metadata accessor for Proto_Gpsd_CntinStatusMessage, (uint64_t)&unk_1002EDDC8);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100272838@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D0880, (uint64_t)qword_100385750, (uint64_t)sub_100272658, a1);
}

uint64_t sub_100272854(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DB10, type metadata accessor for Proto_Gpsd_CntinStatusMessage, (uint64_t)&unk_1002EDD50);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100272894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DB10, type metadata accessor for Proto_Gpsd_CntinStatusMessage, (uint64_t)&unk_1002EDD50);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1002728E4()
{
  return &unk_10035A190;
}

unint64_t sub_1002728F0()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_10027290C(uint64_t a1)
{
  return sub_1000FB324(a1, qword_100385768, (uint64_t)"enable_cntin_clock", 18, (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t sub_10027292C()
{
  return sub_100008BD0(&qword_1003D0888, (uint64_t)qword_100385768, (uint64_t)sub_10027290C);
}

uint64_t sub_100272948@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D0888, (uint64_t)qword_100385768, (uint64_t)sub_10027290C, a1);
}

uint64_t sub_100272964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100272980(a1, a2, a3, type metadata accessor for Proto_Gpsd_CntinClockControl);
}

uint64_t sub_100272980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t i;
  uint64_t result;
  char v12;
  uint64_t v13;

  v9 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    if (v5 || (v12 & 1) != 0)
      break;
    if (result == 1)
    {
      v13 = a4(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)(v4 + *(int *)(v13 + 20), a2, a3);
    }
    v5 = 0;
    v9 = a2;
  }
  return result;
}

uint64_t sub_100272A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100272A34(a1, a2, a3, type metadata accessor for Proto_Gpsd_CntinClockControl);
}

uint64_t sub_100272A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v11;

  v6 = v4;
  result = a4(0);
  v11 = *(unsigned __int8 *)(v6 + *(int *)(result + 20));
  if (v11 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1, a2, a3);
  if (!v5)
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  return result;
}

uint64_t sub_100272AC8(uint64_t a1, uint64_t a2)
{
  return sub_100276B20(a1, a2, type metadata accessor for Proto_Gpsd_CntinClockControl) & 1;
}

Swift::Int sub_100272AE8()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_CntinClockControl, &qword_10037D698, (uint64_t)&unk_1002EDFB8);
}

uint64_t sub_100272B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100380178, type metadata accessor for Proto_Gpsd_CntinClockControl, (uint64_t)&unk_1002EDF30);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100272B54@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D0888, (uint64_t)qword_100385768, (uint64_t)sub_10027290C, a1);
}

uint64_t sub_100272B70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DB28, type metadata accessor for Proto_Gpsd_CntinClockControl, (uint64_t)&unk_1002EDEB8);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100272BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DB28, type metadata accessor for Proto_Gpsd_CntinClockControl, (uint64_t)&unk_1002EDEB8);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100272C00()
{
  return &unk_10035A1A0;
}

unint64_t sub_100272C0C()
{
  return 0xD000000000000014;
}

uint64_t sub_100272C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100385780);
  sub_10000E6A4(v0, (uint64_t)qword_100385780);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "type_deprecated";
  *(_QWORD *)(v9 + 8) = 15;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "payload";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "type_integer";
  *(_QWORD *)(v14 + 8) = 12;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100272DC4()
{
  return sub_100008BD0(&qword_1003D0890, (uint64_t)qword_100385780, (uint64_t)sub_100272C28);
}

uint64_t sub_100272DE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D0890, (uint64_t)qword_100385780, (uint64_t)sub_100272C28, a1);
}

uint64_t sub_100272DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        v9 = *(int *)(type metadata accessor for Proto_Gpsd_Exception(0) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + v9, a2, a3);
        break;
      case 2:
        v9 = *(int *)(type metadata accessor for Proto_Gpsd_Exception(0) + 24);
        goto LABEL_3;
      case 1:
        v9 = *(int *)(type metadata accessor for Proto_Gpsd_Exception(0) + 20);
        goto LABEL_3;
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_100272EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_Exception(0);
  v10 = result;
  v11 = (unsigned int *)(v5 + *(int *)(result + 20));
  if ((v11[1] & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v11, 1, a2, a3);
  if (!v4)
  {
    v12 = (unsigned int *)(v5 + *(int *)(v10 + 24));
    if ((v12[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v12, 2, a2, a3);
    v13 = (unsigned int *)(v5 + *(int *)(v10 + 28));
    if ((v13[1] & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(*v13, 3, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_100272FBC()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_Exception, &qword_10037D6A0, (uint64_t)&unk_1002EE120);
}

uint64_t sub_100272FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100272DFC(a1, a2, a3);
}

uint64_t sub_100272FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100272EC0(a1, a2, a3);
}

uint64_t sub_100273000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100380170, type metadata accessor for Proto_Gpsd_Exception, (uint64_t)&unk_1002EE098);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100273050@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D0890, (uint64_t)qword_100385780, (uint64_t)sub_100272C28, a1);
}

uint64_t sub_10027306C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DB40, type metadata accessor for Proto_Gpsd_Exception, (uint64_t)&unk_1002EE020);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1002730AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DB40, type metadata accessor for Proto_Gpsd_Exception, (uint64_t)&unk_1002EE020);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1002730FC()
{
  return &unk_10035A1B0;
}

unint64_t sub_100273108()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100273124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_100385798);
  sub_10000E6A4(v0, (uint64_t)qword_100385798);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "mach_continuous_seconds";
  *(_QWORD *)(v9 + 8) = 23;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "reason_code";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "reason_string";
  *(_QWORD *)(v14 + 8) = 13;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1002732B8()
{
  return sub_100008BD0(&qword_1003D0898, (uint64_t)qword_100385798, (uint64_t)sub_100273124);
}

uint64_t sub_1002732D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D0898, (uint64_t)qword_100385798, (uint64_t)sub_100273124, a1);
}

uint64_t sub_1002732F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    v10 = v4;
    if (v4 || (v12 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        v9 = type metadata accessor for Proto_Gpsd_AskBasebandReset(0);
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + *(int *)(v9 + 28), a2, a3);
LABEL_3:
        v10 = 0;
        break;
      case 2:
        v14 = type metadata accessor for Proto_Gpsd_AskBasebandReset(0);
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + *(int *)(v14 + 24), a2, a3);
        goto LABEL_3;
      case 1:
        v13 = type metadata accessor for Proto_Gpsd_AskBasebandReset(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v3 + *(int *)(v13 + 20), a2, a3);
        goto LABEL_3;
    }
    v4 = v10;
    v7 = a2;
  }
  return result;
}

uint64_t sub_1002733DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_AskBasebandReset(0);
  v10 = result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(1, a2, a3, *(double *)v11);
  if (!v4)
  {
    v12 = v5 + *(int *)(v10 + 24);
    if ((*(_BYTE *)(v12 + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(*(_QWORD *)v12, 2, a2, a3);
    v13 = (_QWORD *)(v5 + *(int *)(v10 + 28));
    v14 = v13[1];
    if (v14)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v13, v14, 3, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1002734D8()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_AskBasebandReset, &qword_10037D6A8, (uint64_t)&unk_1002EE288);
}

uint64_t sub_1002734F4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = (_QWORD *)(a2 + a1[7]);
  *v8 = 0;
  v8[1] = 0;
  return result;
}

uint64_t sub_100273544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002732F0(a1, a2, a3);
}

uint64_t sub_100273558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002733DC(a1, a2, a3);
}

uint64_t sub_10027356C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100380168, type metadata accessor for Proto_Gpsd_AskBasebandReset, (uint64_t)&unk_1002EE200);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1002735BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D0898, (uint64_t)qword_100385798, (uint64_t)sub_100273124, a1);
}

uint64_t sub_1002735D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DB58, type metadata accessor for Proto_Gpsd_AskBasebandReset, (uint64_t)&unk_1002EE188);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100273618(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DB58, type metadata accessor for Proto_Gpsd_AskBasebandReset, (uint64_t)&unk_1002EE188);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100273668()
{
  return &unk_10035A1C0;
}

unint64_t sub_100273674()
{
  return 0xD000000000000013;
}

uint64_t sub_100273690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003857B0);
  sub_10000E6A4(v0, (uint64_t)qword_1003857B0);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3100;
  v8 = v7 + v6;
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v9 = "print_time_mach_continuous_ns";
  *(_QWORD *)(v9 + 8) = 29;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + v4) = 2;
  *(_QWORD *)v13 = "comment";
  *(_QWORD *)(v13 + 8) = 7;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  v14 = (_QWORD *)(v8 + 2 * v4);
  v15 = (char *)v14 + *(int *)(v2 + 48);
  *v14 = 5;
  *(_QWORD *)v15 = "request";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v12();
  v16 = (_QWORD *)(v8 + 3 * v4);
  v17 = (char *)v16 + *(int *)(v2 + 48);
  *v16 = 6;
  *(_QWORD *)v17 = "response";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v12();
  v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)(v8 + 4 * v4) = 7;
  *(_QWORD *)v18 = "indication";
  *(_QWORD *)(v18 + 8) = 10;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1002738A0()
{
  return sub_100008BD0(&qword_1003D08A0, (uint64_t)qword_1003857B0, (uint64_t)sub_100273690);
}

uint64_t sub_1002738BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D08A0, (uint64_t)qword_1003857B0, (uint64_t)sub_100273690, a1);
}

uint64_t sub_1002738D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v17 = type metadata accessor for Proto_Gpsd_LogEntry(0);
          v16 = v9;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)(v3 + *(int *)(v17 + 20), a2, a3);
          goto LABEL_6;
        case 2:
          v18 = type metadata accessor for Proto_Gpsd_LogEntry(0);
          v16 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + *(int *)(v18 + 24), a2, a3);
          goto LABEL_6;
        case 5:
          v10 = v3 + *(int *)(type metadata accessor for Proto_Gpsd_LogEntry(0) + 28);
          v11 = type metadata accessor for Proto_Gpsd_Request(0);
          v12 = &qword_10036A6B8;
          v13 = type metadata accessor for Proto_Gpsd_Request;
          v14 = &unk_1002EA790;
          goto LABEL_5;
        case 6:
          v10 = v3 + *(int *)(type metadata accessor for Proto_Gpsd_LogEntry(0) + 32);
          v11 = type metadata accessor for Proto_Gpsd_Response(0);
          v12 = &qword_10036A668;
          v13 = type metadata accessor for Proto_Gpsd_Response;
          v14 = &unk_1002EA920;
          goto LABEL_5;
        case 7:
          v10 = v3 + *(int *)(type metadata accessor for Proto_Gpsd_LogEntry(0) + 36);
          v11 = type metadata accessor for Proto_Gpsd_Indication(0);
          v12 = &qword_10036A660;
          v13 = type metadata accessor for Proto_Gpsd_Indication;
          v14 = &unk_1002EAA88;
LABEL_5:
          v15 = sub_10000FD38(v12, v13, (uint64_t)v14);
          v16 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v15, a2, a3);
LABEL_6:
          v9 = v16;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }
  return result;
}

uint64_t sub_100273A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_LogEntry(0);
  v10 = result;
  v11 = v5 + *(int *)(result + 20);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(*(_QWORD *)v11, 1, a2, a3);
  if (!v4)
  {
    v12 = (_QWORD *)(v5 + *(int *)(v10 + 24));
    v13 = v12[1];
    if (v13)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v12, v13, 2, a2, a3);
    sub_100273BC0(v5, a1, a2, a3);
    sub_100273D34(v5, a1, a2, a3);
    sub_100273EA8(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100273BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_100369E40);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_Gpsd_Request(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  sub_10000E660(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_100369E40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E40);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_Request);
  v15 = sub_10000FD38(&qword_10036A6B8, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&unk_1002EA790);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 5, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for Proto_Gpsd_Request);
}

uint64_t sub_100273D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_100369E48);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_Gpsd_Response(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  sub_10000E660(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_100369E48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E48);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_Response);
  v15 = sub_10000FD38(&qword_10036A668, type metadata accessor for Proto_Gpsd_Response, (uint64_t)&unk_1002EA920);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 6, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for Proto_Gpsd_Response);
}

uint64_t sub_100273EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v6 = sub_1000039AC(&qword_100369E50);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_Gpsd_Indication(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  sub_10000E660(a1 + *(int *)(v13 + 36), (uint64_t)v8, &qword_100369E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100015704((uint64_t)v8, &qword_100369E50);
  sub_100003E08((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Gpsd_Indication);
  v15 = sub_10000FD38(&qword_10036A660, type metadata accessor for Proto_Gpsd_Indication, (uint64_t)&unk_1002EAA88);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 7, v9, v15, a3, v17);
  return sub_100004030((uint64_t)v12, type metadata accessor for Proto_Gpsd_Indication);
}

Swift::Int sub_100274020()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_LogEntry, &qword_10037D6B0, (uint64_t)&unk_1002EE3F0);
}

uint64_t sub_10027403C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = (_QWORD *)(a2 + v4);
  *v6 = 0;
  v6[1] = 0;
  v7 = a2 + a1[7];
  v8 = type metadata accessor for Proto_Gpsd_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = a2 + a1[8];
  v10 = type metadata accessor for Proto_Gpsd_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a2 + a1[9];
  v12 = type metadata accessor for Proto_Gpsd_Indication(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
}

uint64_t sub_100274104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002738D8(a1, a2, a3);
}

uint64_t sub_100274118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100273A94(a1, a2, a3);
}

uint64_t sub_10027412C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100380160, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&unk_1002EE368);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10027417C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D08A0, (uint64_t)qword_1003857B0, (uint64_t)sub_100273690, a1);
}

uint64_t sub_100274198(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10036E450, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&unk_1002EE2F0);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1002741D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10036E450, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&unk_1002EE2F0);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_100274228()
{
  return &unk_10035A1D0;
}

unint64_t sub_100274234()
{
  return 0xD000000000000017;
}

uint64_t sub_100274250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  uint64_t v14;

  v0 = type metadata accessor for _NameMap(0);
  sub_1000155B4(v0, qword_1003857C8);
  sub_10000E6A4(v0, (uint64_t)qword_1003857C8);
  v1 = sub_1000039AC(&qword_10036A618);
  v2 = sub_1000039AC(&qword_10036A620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002C3120;
  v8 = (_QWORD *)(v7 + v6);
  v9 = v7 + v6 + *(int *)(v2 + 48);
  *v8 = 1;
  *(_QWORD *)v9 = "enable_lte_band13_filter";
  *(_QWORD *)(v9 + 8) = 24;
  *(_BYTE *)(v9 + 16) = 2;
  v10 = enum case for _NameMap.NameDescription.standard(_:);
  v11 = type metadata accessor for _NameMap.NameDescription(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + v4) = 2;
  *(_QWORD *)v13 = "enable_benign_environment_power_saving";
  *((_QWORD *)v13 + 1) = 38;
  v13[16] = 2;
  v12();
  v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(_QWORD *)((char *)v8 + 2 * v4) = 3;
  *(_QWORD *)v14 = "in_region_where_cold_searches_should_prioritize_beidou";
  *(_QWORD *)(v14 + 8) = 54;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1002743E4()
{
  return sub_100008BD0(&qword_1003D08A8, (uint64_t)qword_1003857C8, (uint64_t)sub_100274250);
}

uint64_t sub_100274400@<X0>(uint64_t a1@<X8>)
{
  return sub_100008C2C(&qword_1003D08A8, (uint64_t)qword_1003857C8, (uint64_t)sub_100274250, a1);
}

uint64_t sub_10027441C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  char v11;

  v7 = a2;
  for (i = a3; ; i = a3)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        v9 = *(int *)(type metadata accessor for Proto_Gpsd_StartContext(0) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + v9, a2, a3);
        break;
      case 2:
        v9 = *(int *)(type metadata accessor for Proto_Gpsd_StartContext(0) + 24);
        goto LABEL_3;
      case 1:
        v9 = *(int *)(type metadata accessor for Proto_Gpsd_StartContext(0) + 20);
        goto LABEL_3;
    }
    v4 = 0;
    v7 = a2;
  }
  return result;
}

uint64_t sub_1002744E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v5 = v3;
  result = type metadata accessor for Proto_Gpsd_StartContext(0);
  v10 = result;
  v11 = *(unsigned __int8 *)(v5 + *(int *)(result + 20));
  if (v11 != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v11 & 1, 1, a2, a3);
  if (!v4)
  {
    v12 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 24));
    if (v12 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v12 & 1, 2, a2, a3);
    v13 = *(unsigned __int8 *)(v5 + *(int *)(v10 + 28));
    if (v13 != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v13 & 1, 3, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

Swift::Int sub_1002745DC()
{
  return sub_10000DF2C(type metadata accessor for Proto_Gpsd_StartContext, &qword_10037D6B8, (uint64_t)&unk_1002EE558);
}

uint64_t sub_1002745F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027441C(a1, a2, a3);
}

uint64_t sub_10027460C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002744E0(a1, a2, a3);
}

uint64_t sub_100274620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100380158, type metadata accessor for Proto_Gpsd_StartContext, (uint64_t)&unk_1002EE4D0);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100274670@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CB0(&qword_1003D08A8, (uint64_t)qword_1003857C8, (uint64_t)sub_100274250, a1);
}

uint64_t sub_10027468C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_10037DB78, type metadata accessor for Proto_Gpsd_StartContext, (uint64_t)&unk_1002EE458);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1002746CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_10037DB78, type metadata accessor for Proto_Gpsd_StartContext, (uint64_t)&unk_1002EE458);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_10027471C(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  BOOL v36;
  uint64_t v38;

  v4 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v38 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      while (1)
      {
        sub_100003FEC(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
        sub_100003FEC(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
        v15 = v4[5];
        v16 = &v10[v15];
        v17 = *(_QWORD *)&v10[v15 + 8];
        v18 = &v7[v15];
        v19 = *((_QWORD *)v18 + 1);
        if (v17)
        {
          if (!v19)
            goto LABEL_36;
          v20 = *(_QWORD *)v16 == *(_QWORD *)v18 && v17 == v19;
          if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v16, v17) & 1) == 0)
            goto LABEL_36;
        }
        else if (v19)
        {
          goto LABEL_36;
        }
        v21 = v4[6];
        v22 = &v10[v21];
        v23 = v10[v21 + 4];
        v24 = &v7[v21];
        v25 = v7[v21 + 4];
        if ((v23 & 1) != 0)
        {
          if (!v25)
            goto LABEL_36;
        }
        else
        {
          if (*(_DWORD *)v22 != *(_DWORD *)v24)
            LOBYTE(v25) = 1;
          if ((v25 & 1) != 0)
          {
LABEL_36:
            sub_100004030((uint64_t)v7, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
            sub_100004030((uint64_t)v10, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
            goto LABEL_37;
          }
        }
        v26 = v4[7];
        v27 = &v10[v26];
        v28 = *(_QWORD *)&v10[v26 + 8];
        v29 = &v7[v26];
        v30 = *((_QWORD *)v29 + 1);
        if (v28)
        {
          if (!v30)
            goto LABEL_36;
          v31 = *(_QWORD *)v27 == *(_QWORD *)v29 && v28 == v30;
          if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v27, v28) & 1) == 0)
            goto LABEL_36;
        }
        else if (v30)
        {
          goto LABEL_36;
        }
        v32 = type metadata accessor for UnknownStorage(0);
        v33 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v34 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v32, v33);
        sub_100004030((uint64_t)v7, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
        sub_100004030((uint64_t)v10, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
        v36 = v14-- != 0;
        if ((v34 & 1) != 0)
        {
          v12 += v13;
          if (v36)
            continue;
        }
        return v34 & 1;
      }
    }
    v34 = 1;
  }
  else
  {
LABEL_37:
    v34 = 0;
  }
  return v34 & 1;
}

uint64_t type metadata accessor for Proto_Gpsd_Request(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA110, (uint64_t)&nominal type descriptor for Proto_Gpsd_Request);
}

uint64_t type metadata accessor for Proto_Gpsd_Request._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA3D0, (uint64_t)&nominal type descriptor for Proto_Gpsd_Request._StorageClass);
}

uint64_t type metadata accessor for Proto_Gpsd_InjectAssistancePosition(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA190, (uint64_t)&nominal type descriptor for Proto_Gpsd_InjectAssistancePosition);
}

uint64_t type metadata accessor for Proto_Gpsd_InjectAssistanceTime(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA1A0, (uint64_t)&nominal type descriptor for Proto_Gpsd_InjectAssistanceTime);
}

uint64_t type metadata accessor for Proto_Gpsd_SetAssistancePressure(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA1D0, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetAssistancePressure);
}

uint64_t type metadata accessor for Proto_Gpsd_SetAssistanceAccel(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA1E0, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetAssistanceAccel);
}

uint64_t type metadata accessor for Proto_Gpsd_SetAssistanceGyro(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA1F0, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetAssistanceGyro);
}

uint64_t type metadata accessor for Proto_Gpsd_SetAssistanceDem(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA200, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetAssistanceDem);
}

uint64_t type metadata accessor for Proto_Gpsd_SetAssistanceMapVector(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA210, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetAssistanceMapVector);
}

uint64_t type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA220, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetAssistanceMotionActivityContext);
}

uint64_t type metadata accessor for Proto_Gpsd_SetAssistanceMountState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA230, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetAssistanceMountState);
}

uint64_t type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA240, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetAssistanceSignalEnvironment);
}

uint64_t type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA250, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetAssistanceSpeedConstraint);
}

uint64_t type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA260, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
}

uint64_t type metadata accessor for Proto_Gpsd_InjectAssistanceFile(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA160, (uint64_t)&nominal type descriptor for Proto_Gpsd_InjectAssistanceFile);
}

uint64_t type metadata accessor for Proto_Gpsd_InjectRtiFile(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA170, (uint64_t)&nominal type descriptor for Proto_Gpsd_InjectRtiFile);
}

uint64_t type metadata accessor for Proto_Gpsd_InjectSvidBlocklist(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA180, (uint64_t)&nominal type descriptor for Proto_Gpsd_InjectSvidBlocklist);
}

uint64_t type metadata accessor for Proto_Gpsd_DeleteGnssData(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA1B0, (uint64_t)&nominal type descriptor for Proto_Gpsd_DeleteGnssData);
}

uint64_t type metadata accessor for Proto_Gpsd_SetPvtmReport(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA150, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetPvtmReport);
}

uint64_t type metadata accessor for Proto_Gpsd_SetNmeaHandler(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA1C0, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetNmeaHandler);
}

uint64_t type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA280, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetConfigSimulatorMode);
}

uint64_t type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA290, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetConfigEnableGnssConstellations);
}

uint64_t type metadata accessor for Proto_Gpsd_SetConfigDutyCycling(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA2B0, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetConfigDutyCycling);
}

uint64_t type metadata accessor for Proto_Gpsd_TerminationImminent(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA2C0, (uint64_t)&nominal type descriptor for Proto_Gpsd_TerminationImminent);
}

uint64_t type metadata accessor for Proto_Gpsd_ExitMessage(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA2D0, (uint64_t)&nominal type descriptor for Proto_Gpsd_ExitMessage);
}

uint64_t type metadata accessor for Proto_Gpsd_LtlInfo(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA320, (uint64_t)&nominal type descriptor for Proto_Gpsd_LtlInfo);
}

uint64_t type metadata accessor for Proto_Gpsd_StartContext(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA3C0, (uint64_t)&nominal type descriptor for Proto_Gpsd_StartContext);
}

uint64_t type metadata accessor for Proto_Gpsd_CntinStatusMessage(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA370, (uint64_t)&nominal type descriptor for Proto_Gpsd_CntinStatusMessage);
}

uint64_t type metadata accessor for Proto_Gpsd_SetThermalRiskState(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA270, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetThermalRiskState);
}

uint64_t type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA2A0, (uint64_t)&nominal type descriptor for Proto_Gpsd_SetConfigRfBandEnable);
}

uint64_t sub_100274BC0(unint64_t a1)
{
  if (a1 > 0x4C)
    return 61;
  else
    return byte_1002EEED0[a1];
}

uint64_t type metadata accessor for Proto_Gpsd_Response(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA120, (uint64_t)&nominal type descriptor for Proto_Gpsd_Response);
}

uint64_t type metadata accessor for Proto_Gpsd_Indication(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA130, (uint64_t)&nominal type descriptor for Proto_Gpsd_Indication);
}

uint64_t type metadata accessor for Proto_Gpsd_Indication._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA3E0, (uint64_t)&nominal type descriptor for Proto_Gpsd_Indication._StorageClass);
}

uint64_t type metadata accessor for Proto_Gpsd_Status(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA140, (uint64_t)&nominal type descriptor for Proto_Gpsd_Status);
}

uint64_t type metadata accessor for Proto_Gpsd_RecoveryStatistics(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA2E0, (uint64_t)&nominal type descriptor for Proto_Gpsd_RecoveryStatistics);
}

uint64_t type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA2F0, (uint64_t)&nominal type descriptor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
}

uint64_t type metadata accessor for Proto_Gpsd_LtlInfoRequest(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA310, (uint64_t)&nominal type descriptor for Proto_Gpsd_LtlInfoRequest);
}

uint64_t type metadata accessor for Proto_Gpsd_CntinClockControl(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA380, (uint64_t)&nominal type descriptor for Proto_Gpsd_CntinClockControl);
}

uint64_t type metadata accessor for Proto_Gpsd_Exception(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA390, (uint64_t)&nominal type descriptor for Proto_Gpsd_Exception);
}

uint64_t type metadata accessor for Proto_Gpsd_AskBasebandReset(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA3A0, (uint64_t)&nominal type descriptor for Proto_Gpsd_AskBasebandReset);
}

uint64_t sub_100274CA8(unint64_t a1)
{
  if (a1 > 0x1A)
    return 24;
  else
    return byte_1002EEF1D[a1];
}

uint64_t type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA300, (uint64_t)&nominal type descriptor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
}

uint64_t type metadata accessor for Proto_Gpsd_LtlInfo._StorageClass(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA3F0, (uint64_t)&nominal type descriptor for Proto_Gpsd_LtlInfo._StorageClass);
}

uint64_t type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA360, (uint64_t)&nominal type descriptor for Proto_Gpsd_LtlInfo.LtlInitialParams);
}

uint64_t type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA330, (uint64_t)&nominal type descriptor for Proto_Gpsd_LtlInfo.LtlLutParams);
}

uint64_t type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA340, (uint64_t)&nominal type descriptor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
}

uint64_t type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA350, (uint64_t)&nominal type descriptor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
}

uint64_t type metadata accessor for Proto_Gpsd_LogEntry(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DA3B0, (uint64_t)&nominal type descriptor for Proto_Gpsd_LogEntry);
}

uint64_t sub_100274D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  void (*v30)(_BYTE *, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  void (*v33)(_BYTE *, uint64_t);
  _BYTE v35[10];
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v35[-v9];
  v11 = type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext(0);
  v12 = v11;
  v13 = *(int *)(v11 + 20);
  v14 = (_QWORD *)(a1 + v13);
  v15 = *(_BYTE *)(a1 + v13 + 8);
  v16 = (_QWORD *)(a2 + v13);
  v17 = *(unsigned __int8 *)(a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_23;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_23;
  }
  v18 = *(int *)(v11 + 24);
  v19 = *(unsigned __int8 *)(a1 + v18);
  v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 10)
  {
    if (v20 != 10)
      goto LABEL_23;
  }
  else
  {
    v37 = v19;
    if (v20 == 10)
      goto LABEL_23;
    v36 = v20;
    v21 = sub_10021D30C();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v37, &v36, &type metadata for Proto_Gnss_MotionActivityContext, v21) & 1) == 0)goto LABEL_23;
  }
  v22 = *(int *)(v12 + 28);
  v23 = *(unsigned __int8 *)(a1 + v22);
  v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 5)
  {
    if (v24 != 5)
      goto LABEL_23;
  }
  else
  {
    v39 = v23;
    if (v24 == 5)
      goto LABEL_23;
    v38 = v24;
    v25 = sub_10021D408();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v39, &v38, &type metadata for Proto_Gnss_MovingState, v25) & 1) == 0)
      goto LABEL_23;
  }
  v26 = *(int *)(v12 + 32);
  v27 = *(unsigned __int8 *)(a1 + v26);
  v28 = *(unsigned __int8 *)(a2 + v26);
  if (v27 == 6)
  {
    if (v28 == 6)
      goto LABEL_22;
LABEL_23:
    v32 = 0;
    return v32 & 1;
  }
  v41 = v27;
  if (v28 == 6)
    goto LABEL_23;
  v40 = v28;
  v29 = sub_10021D504();
  if ((dispatch thunk of static Equatable.== infix(_:_:)(&v41, &v40, &type metadata for Proto_Gnss_Reliability, v29) & 1) == 0)
    goto LABEL_23;
LABEL_22:
  v30 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v30(v10, a1, v4);
  v30(v8, a2, v4);
  v31 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v31);
  v33 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v33(v8, v4);
  v33(v10, v4);
  return v32 & 1;
}

uint64_t sub_100274FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t v16;
  char v17;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[14];
  char v21;
  char v22;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v20[-v9];
  v11 = *(int *)(type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment(0) + 20);
  v12 = *(unsigned __int8 *)(a1 + v11);
  v13 = *(unsigned __int8 *)(a2 + v11);
  if (v12 == 8)
  {
    if (v13 != 8)
    {
LABEL_7:
      v17 = 0;
      return v17 & 1;
    }
  }
  else
  {
    v22 = v12;
    if (v13 == 8)
      goto LABEL_7;
    v21 = v13;
    v14 = sub_10021D6FC();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v22, &v21, &type metadata for Proto_Gnss_SignalEnvironmentType, v14) & 1) == 0)goto LABEL_7;
  }
  v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v15(v10, a1, v4);
  v15(v8, a2, v4);
  v16 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v16);
  v18 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v18(v8, v4);
  v18(v10, v4);
  return v17 & 1;
}

uint64_t sub_10027511C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  char v32;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v37 - v9;
  v11 = (int *)type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_21;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_21;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_21;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_21;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_21;
LABEL_19:
    v27 = v11[8];
    v28 = (double *)(a1 + v27);
    v29 = *(_BYTE *)(a1 + v27 + 8);
    v30 = (double *)(a2 + v27);
    v31 = *(unsigned __int8 *)(a2 + v27 + 8);
    if ((v29 & 1) != 0)
    {
      if (!v31)
        goto LABEL_21;
    }
    else
    {
      if (*v28 != *v30)
        LOBYTE(v31) = 1;
      if ((v31 & 1) != 0)
        goto LABEL_21;
    }
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v34(v10, a1, v4);
    v34(v8, a2, v4);
    v35 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v35);
    v36 = *(void (**)(char *, uint64_t))(v5 + 8);
    v36(v8, v4);
    v36(v10, v4);
    return v32 & 1;
  }
  if (v26)
    goto LABEL_19;
LABEL_21:
  v32 = 0;
  return v32 & 1;
}

uint64_t sub_100275300(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  void (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  void (*v24)(_BYTE *, uint64_t);
  _BYTE v26[14];
  char v27;
  char v28;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v26[-v9];
  v11 = type metadata accessor for Proto_Gpsd_SetAssistanceMountState(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_13;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_13;
  }
  v17 = *(int *)(v11 + 24);
  v18 = *(unsigned __int8 *)(a1 + v17);
  v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 4)
  {
    if (v19 != 4)
    {
LABEL_13:
      v23 = 0;
      return v23 & 1;
    }
  }
  else
  {
    v28 = v18;
    if (v19 == 4)
      goto LABEL_13;
    v27 = v19;
    v20 = sub_10021D600();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v27, &type metadata for Proto_Gnss_DeviceMountState, v20) & 1) == 0)goto LABEL_13;
  }
  v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v21(v10, a1, v4);
  v21(v8, a2, v4);
  v22 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v22);
  v24 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v24(v8, v4);
  v24(v10, v4);
  return v23 & 1;
}

uint64_t sub_1002754A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  char v17;
  _DWORD *v18;
  int v19;
  char v20;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v25 - v9;
  v11 = type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_8;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_8;
  }
  v15 = *(int *)(v11 + 24);
  v16 = (_DWORD *)(a1 + v15);
  v17 = *(_BYTE *)(a1 + v15 + 4);
  v18 = (_DWORD *)(a2 + v15);
  v19 = *(unsigned __int8 *)(a2 + v15 + 4);
  if ((v17 & 1) == 0)
  {
    if (*v16 != *v18)
      LOBYTE(v19) = 1;
    if ((v19 & 1) != 0)
      goto LABEL_8;
LABEL_13:
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v22(v10, a1, v4);
    v22(v8, a2, v4);
    v23 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v20 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v23);
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v4);
    v24(v10, v4);
    return v20 & 1;
  }
  if (v19)
    goto LABEL_13;
LABEL_8:
  v20 = 0;
  return v20 & 1;
}

uint64_t sub_100275628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  double *v31;
  char v32;
  double *v33;
  int v34;
  uint64_t v35;
  double *v36;
  char v37;
  double *v38;
  int v39;
  uint64_t v40;
  double *v41;
  char v42;
  double *v43;
  int v44;
  uint64_t v45;
  double *v46;
  char v47;
  double *v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  char v67;
  void (*v68)(char *, uint64_t);
  uint64_t v70;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v70 - v9;
  v11 = (int *)type metadata accessor for Proto_Gpsd_SetAssistanceMapVector(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_74;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_74;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_74;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_74;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_74;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_74;
  }
  v27 = v11[8];
  v28 = *(unsigned __int8 *)(a1 + v27);
  v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 != 2)
      goto LABEL_74;
  }
  else if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
  {
    goto LABEL_74;
  }
  v30 = v11[9];
  v31 = (double *)(a1 + v30);
  v32 = *(_BYTE *)(a1 + v30 + 8);
  v33 = (double *)(a2 + v30);
  v34 = *(unsigned __int8 *)(a2 + v30 + 8);
  if ((v32 & 1) != 0)
  {
    if (!v34)
      goto LABEL_74;
  }
  else
  {
    if (*v31 != *v33)
      LOBYTE(v34) = 1;
    if ((v34 & 1) != 0)
      goto LABEL_74;
  }
  v35 = v11[10];
  v36 = (double *)(a1 + v35);
  v37 = *(_BYTE *)(a1 + v35 + 8);
  v38 = (double *)(a2 + v35);
  v39 = *(unsigned __int8 *)(a2 + v35 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39)
      goto LABEL_74;
  }
  else
  {
    if (*v36 != *v38)
      LOBYTE(v39) = 1;
    if ((v39 & 1) != 0)
      goto LABEL_74;
  }
  v40 = v11[11];
  v41 = (double *)(a1 + v40);
  v42 = *(_BYTE *)(a1 + v40 + 8);
  v43 = (double *)(a2 + v40);
  v44 = *(unsigned __int8 *)(a2 + v40 + 8);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_74;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_74;
  }
  v45 = v11[12];
  v46 = (double *)(a1 + v45);
  v47 = *(_BYTE *)(a1 + v45 + 8);
  v48 = (double *)(a2 + v45);
  v49 = *(unsigned __int8 *)(a2 + v45 + 8);
  if ((v47 & 1) != 0)
  {
    if (!v49)
      goto LABEL_74;
  }
  else
  {
    if (*v46 != *v48)
      LOBYTE(v49) = 1;
    if ((v49 & 1) != 0)
      goto LABEL_74;
  }
  v50 = v11[13];
  v51 = *(unsigned __int8 *)(a1 + v50);
  v52 = *(unsigned __int8 *)(a2 + v50);
  if (v51 == 2)
  {
    if (v52 != 2)
      goto LABEL_74;
  }
  else if (v52 == 2 || ((((v52 & 1) == 0) ^ v51) & 1) == 0)
  {
    goto LABEL_74;
  }
  v53 = v11[14];
  v54 = *(unsigned __int8 *)(a1 + v53);
  v55 = *(unsigned __int8 *)(a2 + v53);
  if (v54 == 2)
  {
    if (v55 != 2)
      goto LABEL_74;
  }
  else if (v55 == 2 || ((((v55 & 1) == 0) ^ v54) & 1) == 0)
  {
    goto LABEL_74;
  }
  v56 = v11[15];
  v57 = *(unsigned __int8 *)(a1 + v56);
  v58 = *(unsigned __int8 *)(a2 + v56);
  if (v57 == 2)
  {
    if (v58 != 2)
      goto LABEL_74;
  }
  else if (v58 == 2 || ((((v58 & 1) == 0) ^ v57) & 1) == 0)
  {
    goto LABEL_74;
  }
  v59 = v11[16];
  v60 = *(unsigned __int8 *)(a1 + v59);
  v61 = *(unsigned __int8 *)(a2 + v59);
  if (v60 == 2)
  {
    if (v61 != 2)
      goto LABEL_74;
  }
  else if (v61 == 2 || ((((v61 & 1) == 0) ^ v60) & 1) == 0)
  {
    goto LABEL_74;
  }
  v62 = v11[17];
  v63 = *(unsigned __int8 *)(a1 + v62);
  v64 = *(unsigned __int8 *)(a2 + v62);
  if (v63 == 2)
  {
    if (v64 == 2)
      goto LABEL_73;
LABEL_74:
    v67 = 0;
    return v67 & 1;
  }
  if (v64 == 2 || ((((v64 & 1) == 0) ^ v63) & 1) == 0)
    goto LABEL_74;
LABEL_73:
  v65 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v65(v10, a1, v4);
  v65(v8, a2, v4);
  v66 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v67 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v66);
  v68 = *(void (**)(char *, uint64_t))(v5 + 8);
  v68(v8, v4);
  v68(v10, v4);
  return v67 & 1;
}

uint64_t sub_1002759FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v23 - v9;
  v11 = type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_12;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_12;
  }
  v15 = *(int *)(v11 + 24);
  v16 = *(unsigned __int8 *)(a1 + v15);
  v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
    {
LABEL_12:
      v20 = 0;
      return v20 & 1;
    }
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_12;
  }
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, a1, v4);
  v18(v8, a2, v4);
  v19 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v20 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v19);
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  v21(v10, v4);
  return v20 & 1;
}

uint64_t sub_100275B84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  _QWORD *v25;
  int v26;
  char v27;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  v11 = (int *)type metadata accessor for Proto_Gpsd_InjectAssistanceTime(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_15;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_15;
  }
  v17 = v11[6];
  v18 = (_QWORD *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (_QWORD *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_15;
LABEL_13:
    v22 = v11[7];
    v23 = (_QWORD *)(a1 + v22);
    v24 = *(_BYTE *)(a1 + v22 + 8);
    v25 = (_QWORD *)(a2 + v22);
    v26 = *(unsigned __int8 *)(a2 + v22 + 8);
    if ((v24 & 1) != 0)
    {
      if (!v26)
        goto LABEL_15;
    }
    else
    {
      if (*v23 != *v25)
        LOBYTE(v26) = 1;
      if ((v26 & 1) != 0)
        goto LABEL_15;
    }
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    v30 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v30);
    v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    v31(v8, v4);
    v31(v10, v4);
    return v27 & 1;
  }
  if (v21)
    goto LABEL_13;
LABEL_15:
  v27 = 0;
  return v27 & 1;
}

uint64_t sub_100275D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t);
  _BYTE v28[4];
  int v29;
  uint64_t v30;

  v4 = type metadata accessor for UnknownStorage(0);
  v30 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v28[-v8];
  v10 = type metadata accessor for Proto_Gpsd_InjectAssistanceFile(0);
  v11 = *(int *)(v10 + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (uint64_t *)(a2 + v11);
  v15 = *v14;
  v16 = v14[1];
  if (v13 >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      sub_10005F298(v12, v13);
      sub_10005F298(v15, v16);
      sub_100060048(v12, v13);
      v29 = v19;
      sub_10005F2AC(v15, v16);
      sub_10005F2AC(v12, v13);
      if ((v29 & 1) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
LABEL_5:
    sub_10005F298(v12, v13);
    sub_10005F298(v15, v16);
    sub_10005F2AC(v12, v13);
    sub_10005F2AC(v15, v16);
    goto LABEL_6;
  }
  if (v16 >> 60 != 15)
    goto LABEL_5;
LABEL_9:
  v20 = *(int *)(v10 + 24);
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 3)
  {
    if (v22 == 3)
    {
LABEL_17:
      v24 = v30;
      v25 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v30 + 16);
      v25(v9, a1, v4);
      v25(v7, a2, v4);
      v26 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v7, v4, v26);
      v27 = *(void (**)(_BYTE *, uint64_t))(v24 + 8);
      v27(v7, v4);
      v27(v9, v4);
      return v17 & 1;
    }
  }
  else if (v22 != 3 && v21 == v22)
  {
    goto LABEL_17;
  }
LABEL_6:
  v17 = 0;
  return v17 & 1;
}

uint64_t sub_100275F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  char v19;
  _DWORD *v20;
  int v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v27 - v9;
  v11 = type metadata accessor for Proto_Gpsd_SetThermalRiskState(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_9;
LABEL_7:
    v17 = *(int *)(v11 + 24);
    v18 = (_DWORD *)(a1 + v17);
    v19 = *(_BYTE *)(a1 + v17 + 4);
    v20 = (_DWORD *)(a2 + v17);
    v21 = *(unsigned __int8 *)(a2 + v17 + 4);
    if ((v19 & 1) != 0)
    {
      if (!v21)
        goto LABEL_9;
    }
    else
    {
      if (*v18 != *v20)
        LOBYTE(v21) = 1;
      if ((v21 & 1) != 0)
        goto LABEL_9;
    }
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v10, a1, v4);
    v23(v8, a2, v4);
    v24 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v24);
    v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v8, v4);
    v25(v10, v4);
    return v22 & 1;
  }
  if (v16)
    goto LABEL_7;
LABEL_9:
  v22 = 0;
  return v22 & 1;
}

uint64_t sub_1002760C8(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;

  v12 = type metadata accessor for UnknownStorage(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v26 - v17;
  if ((sub_10000E1F0(*a1, *a2, a3, a4, a5) & 1) != 0)
  {
    v19 = a6(0);
    v20 = (char *)a1 + *(int *)(v19 + 20);
    v21 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v21(v18, v20, v12);
    v21(v16, (char *)a2 + *(int *)(v19 + 20), v12);
    v22 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v23 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v16, v12, v22);
    v24 = *(void (**)(char *, uint64_t))(v13 + 8);
    v24(v16, v12);
    v24(v18, v12);
  }
  else
  {
    v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_100276220(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  char v28;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = type metadata accessor for UnknownStorage(0);
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  v5 = __chkstk_darwin(v4);
  v41 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - v7;
  v9 = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  v45 = *(_QWORD *)(v9 - 8);
  v46 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_1000039AC(&qword_100380308);
  __chkstk_darwin(v44);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10037D530);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v39 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v39 - v21;
  v23 = a1;
  if ((sub_10027471C(*a1, *a2) & 1) == 0)
    goto LABEL_8;
  v39 = v11;
  v40 = v8;
  v24 = type metadata accessor for Proto_Gpsd_RecoveryStatistics(0);
  v25 = v23;
  sub_10000E660((uint64_t)v23 + *(int *)(v24 + 24), (uint64_t)v22, &qword_10037D530);
  sub_10000E660((uint64_t)a2 + *(int *)(v24 + 24), (uint64_t)v20, &qword_10037D530);
  v26 = (uint64_t)&v13[*(int *)(v44 + 48)];
  sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10037D530);
  sub_10000E660((uint64_t)v20, v26, &qword_10037D530);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  if (v27((uint64_t)v13, 1, v46) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10037D530);
    sub_100015704((uint64_t)v22, &qword_10037D530);
    if (v27(v26, 1, v46) == 1)
    {
      sub_100015704((uint64_t)v13, &qword_10037D530);
LABEL_11:
      v33 = v42;
      v32 = v43;
      v34 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
      v35 = v40;
      v34(v40, (char *)v25 + *(int *)(v24 + 20), v43);
      v36 = v41;
      v34(v41, (char *)a2 + *(int *)(v24 + 20), v32);
      v37 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v28 = dispatch thunk of static Equatable.== infix(_:_:)(v35, v36, v32, v37);
      v38 = *(void (**)(char *, uint64_t))(v33 + 8);
      v38(v36, v32);
      v38(v35, v32);
      return v28 & 1;
    }
    goto LABEL_7;
  }
  sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10037D530);
  if (v27(v26, 1, v46) == 1)
  {
    sub_100015704((uint64_t)v20, &qword_10037D530);
    sub_100015704((uint64_t)v22, &qword_10037D530);
    sub_100004030((uint64_t)v17, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
LABEL_7:
    sub_100015704((uint64_t)v13, &qword_100380308);
    goto LABEL_8;
  }
  v30 = (uint64_t)v39;
  sub_100003E08(v26, (uint64_t)v39, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
  v31 = sub_10027660C((uint64_t)v17, v30);
  sub_100004030(v30, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
  sub_100015704((uint64_t)v20, &qword_10037D530);
  sub_100015704((uint64_t)v22, &qword_10037D530);
  sub_100004030((uint64_t)v17, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
  sub_100015704((uint64_t)v13, &qword_10037D530);
  if ((v31 & 1) != 0)
    goto LABEL_11;
LABEL_8:
  v28 = 0;
  return v28 & 1;
}

uint64_t sub_10027660C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  char v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v31 - v9;
  v11 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_23;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_23;
  }
  v15 = v11[6];
  v16 = (_DWORD *)(a1 + v15);
  v17 = *(_BYTE *)(a1 + v15 + 4);
  v18 = (_DWORD *)(a2 + v15);
  v19 = *(unsigned __int8 *)(a2 + v15 + 4);
  if ((v17 & 1) != 0)
  {
    if (!v19)
      goto LABEL_23;
  }
  else
  {
    if (*v16 != *v18)
      LOBYTE(v19) = 1;
    if ((v19 & 1) != 0)
      goto LABEL_23;
  }
  v20 = v11[7];
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2)
      goto LABEL_23;
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_23;
  }
  v23 = v11[8];
  v24 = *(unsigned __int8 *)(a1 + v23);
  v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 2)
  {
    if (v25 == 2)
      goto LABEL_22;
LABEL_23:
    v28 = 0;
    return v28 & 1;
  }
  if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0)
    goto LABEL_23;
LABEL_22:
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v26(v10, a1, v4);
  v26(v8, a2, v4);
  v27 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v28 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v27);
  v29 = *(void (**)(char *, uint64_t))(v5 + 8);
  v29(v8, v4);
  v29(v10, v4);
  return v28 & 1;
}

uint64_t sub_100276800(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _DWORD *v20;
  char v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v34 - v9;
  v11 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_25;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_25;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14) & 1) != 0))
  {
LABEL_10:
    v19 = v11[6];
    v20 = (_DWORD *)(a1 + v19);
    v21 = *(_BYTE *)(a1 + v19 + 4);
    v22 = (_DWORD *)(a2 + v19);
    v23 = *(unsigned __int8 *)(a2 + v19 + 4);
    if ((v21 & 1) != 0)
    {
      if (!v23)
        goto LABEL_25;
    }
    else
    {
      if (*v20 != *v22)
        LOBYTE(v23) = 1;
      if ((v23 & 1) != 0)
        goto LABEL_25;
    }
    v24 = v11[7];
    v25 = (_QWORD *)(a1 + v24);
    v26 = *(_QWORD *)(a1 + v24 + 8);
    v27 = (_QWORD *)(a2 + v24);
    v28 = v27[1];
    if (v26)
    {
      if (v28)
      {
        if (*v25 != *v27 || v26 != v28)
        {
          v18 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26) & 1) == 0)
            return v18 & 1;
        }
LABEL_27:
        v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v31(v10, a1, v4);
        v31(v8, a2, v4);
        v32 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v32);
        v33 = *(void (**)(char *, uint64_t))(v5 + 8);
        v33(v8, v4);
        v33(v10, v4);
        return v18 & 1;
      }
    }
    else if (!v28)
    {
      goto LABEL_27;
    }
LABEL_25:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_1002769E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v20 - v9;
  v11 = *(int *)(type metadata accessor for Proto_Gpsd_CntinStatusMessage(0) + 20);
  v12 = *(unsigned __int8 *)(a1 + v11);
  v13 = *(unsigned __int8 *)(a2 + v11);
  if (v12 != 7)
  {
    if (v13 != 7 && v12 == v13)
      goto LABEL_3;
LABEL_8:
    v16 = 0;
    return v16 & 1;
  }
  if (v13 != 7)
    goto LABEL_8;
LABEL_3:
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v10, a1, v4);
  v14(v8, a2, v4);
  v15 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v15);
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  return v16 & 1;
}

uint64_t sub_100276B20(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(a3(0) + 20);
  v14 = *(unsigned __int8 *)(a1 + v13);
  v15 = *(unsigned __int8 *)(a2 + v13);
  if (v14 == 2)
  {
    if (v15 != 2)
    {
LABEL_7:
      v18 = 0;
      return v18 & 1;
    }
  }
  else if (v15 == 2 || ((((v15 & 1) == 0) ^ v14) & 1) == 0)
  {
    goto LABEL_7;
  }
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16(v12, a1, v6);
  v16(v10, a2, v6);
  v17 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v17);
  v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v10, v6);
  v19(v12, v6);
  return v18 & 1;
}

uint64_t sub_100276C74(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  double *v25;
  char v26;
  double *v27;
  int v28;
  char v29;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v34 - v11;
  v13 = (int *)a3(0);
  v14 = v13[5];
  v15 = (_QWORD *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 8);
  v17 = (_QWORD *)(a2 + v14);
  v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) != 0)
  {
    if (!v18)
      goto LABEL_15;
  }
  else
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_15;
  }
  v19 = v13[6];
  v20 = (double *)(a1 + v19);
  v21 = *(_BYTE *)(a1 + v19 + 8);
  v22 = (double *)(a2 + v19);
  v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) == 0)
  {
    if (*v20 != *v22)
      LOBYTE(v23) = 1;
    if ((v23 & 1) != 0)
      goto LABEL_15;
LABEL_13:
    v24 = v13[7];
    v25 = (double *)(a1 + v24);
    v26 = *(_BYTE *)(a1 + v24 + 8);
    v27 = (double *)(a2 + v24);
    v28 = *(unsigned __int8 *)(a2 + v24 + 8);
    if ((v26 & 1) != 0)
    {
      if (!v28)
        goto LABEL_15;
    }
    else
    {
      if (*v25 != *v27)
        LOBYTE(v28) = 1;
      if ((v28 & 1) != 0)
        goto LABEL_15;
    }
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v31(v12, a1, v6);
    v31(v10, a2, v6);
    v32 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v29 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v32);
    v33 = *(void (**)(char *, uint64_t))(v7 + 8);
    v33(v10, v6);
    v33(v12, v6);
    return v29 & 1;
  }
  if (v23)
    goto LABEL_13;
LABEL_15:
  v29 = 0;
  return v29 & 1;
}

uint64_t sub_100276E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v28;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v33 - v9;
  v11 = (int *)type metadata accessor for Proto_Gpsd_AskBasebandReset(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_22;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_22;
  }
  v17 = v11[6];
  v18 = (_QWORD *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (_QWORD *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_22;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_22;
  }
  v22 = v11[7];
  v23 = (_QWORD *)(a1 + v22);
  v24 = *(_QWORD *)(a1 + v22 + 8);
  v25 = (_QWORD *)(a2 + v22);
  v26 = v25[1];
  if (!v24)
  {
    if (!v26)
    {
LABEL_24:
      v30 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v30(v10, a1, v4);
      v30(v8, a2, v4);
      v31 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v28 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v31);
      v32 = *(void (**)(char *, uint64_t))(v5 + 8);
      v32(v8, v4);
      v32(v10, v4);
      return v28 & 1;
    }
LABEL_22:
    v28 = 0;
    return v28 & 1;
  }
  if (!v26)
    goto LABEL_22;
  if (*v23 == *v25 && v24 == v26)
    goto LABEL_24;
  v28 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24) & 1) != 0)
    goto LABEL_24;
  return v28 & 1;
}

uint64_t sub_100276FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v20 - v9;
  v11 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfoRequest(0) + 20);
  v12 = *(unsigned __int8 *)(a1 + v11);
  v13 = *(unsigned __int8 *)(a2 + v11);
  if (v12 != 5)
  {
    if (v13 != 5 && v12 == v13)
      goto LABEL_3;
LABEL_8:
    v16 = 0;
    return v16 & 1;
  }
  if (v13 != 5)
    goto LABEL_8;
LABEL_3:
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v10, a1, v4);
  v14(v8, a2, v4);
  v15 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v15);
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  return v16 & 1;
}

uint64_t sub_100277130(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  int v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v23 - v11;
  v13 = *(int *)(a3(0) + 20);
  v14 = (_QWORD *)(a1 + v13);
  v15 = *(_BYTE *)(a1 + v13 + 8);
  v16 = (_QWORD *)(a2 + v13);
  v17 = *(unsigned __int8 *)(a2 + v13 + 8);
  if ((v15 & 1) == 0)
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v19(v12, a1, v6);
    v19(v10, a2, v6);
    v20 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v20);
    v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21(v10, v6);
    v21(v12, v6);
    return v18 & 1;
  }
  if (v17)
    goto LABEL_7;
LABEL_3:
  v18 = 0;
  return v18 & 1;
}

uint64_t sub_10027727C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v35 - v9;
  v11 = (int *)type metadata accessor for Proto_Gpsd_SetPvtmReport(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_32;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_32;
  }
  v15 = v11[6];
  v16 = *(unsigned __int8 *)(a1 + v15);
  v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
      goto LABEL_32;
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_32;
  }
  v18 = v11[7];
  v19 = *(unsigned __int8 *)(a1 + v18);
  v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2)
      goto LABEL_32;
  }
  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_32;
  }
  v21 = v11[8];
  v22 = *(unsigned __int8 *)(a1 + v21);
  v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 != 2)
      goto LABEL_32;
  }
  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_32;
  }
  v24 = v11[9];
  v25 = *(unsigned __int8 *)(a1 + v24);
  v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2)
      goto LABEL_32;
  }
  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_32;
  }
  v27 = v11[10];
  v28 = *(unsigned __int8 *)(a1 + v27);
  v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 == 2)
      goto LABEL_31;
LABEL_32:
    v32 = 0;
    return v32 & 1;
  }
  if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
    goto LABEL_32;
LABEL_31:
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v30(v10, a1, v4);
  v30(v8, a2, v4);
  v31 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v31);
  v33 = *(void (**)(char *, uint64_t))(v5 + 8);
  v33(v8, v4);
  v33(v10, v4);
  return v32 & 1;
}

uint64_t sub_1002774E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t);
  uint64_t v19;
  char v20;
  void (*v21)(_BYTE *, uint64_t);
  _BYTE v23[12];
  int v24;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v23[-v9];
  v11 = *(int *)(type metadata accessor for Proto_Gpsd_InjectRtiFile(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (uint64_t *)(a2 + v11);
  v15 = *v14;
  v16 = v14[1];
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 == 15)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (v16 >> 60 == 15)
  {
LABEL_5:
    sub_10005F298(v12, v13);
    sub_10005F298(v15, v16);
    sub_10005F2AC(v12, v13);
    sub_10005F2AC(v15, v16);
LABEL_8:
    v20 = 0;
    return v20 & 1;
  }
  sub_10005F298(v12, v13);
  sub_10005F298(v15, v16);
  sub_100060048(v12, v13);
  v24 = v17;
  sub_10005F2AC(v15, v16);
  sub_10005F2AC(v12, v13);
  if ((v24 & 1) == 0)
    goto LABEL_8;
LABEL_7:
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, a1, v4);
  v18(v8, a2, v4);
  v19 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v20 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v19);
  v21 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v21(v8, v4);
  v21(v10, v4);
  return v20 & 1;
}

uint64_t sub_1002776C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *started;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  started = (int *)type metadata accessor for Proto_Gpsd_StartContext(0);
  v12 = started[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_17;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_17;
  }
  v15 = started[6];
  v16 = *(unsigned __int8 *)(a1 + v15);
  v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
      goto LABEL_17;
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_17;
  }
  v18 = started[7];
  v19 = *(unsigned __int8 *)(a1 + v18);
  v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 == 2)
      goto LABEL_16;
LABEL_17:
    v23 = 0;
    return v23 & 1;
  }
  if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
    goto LABEL_17;
LABEL_16:
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v21(v10, a1, v4);
  v21(v8, a2, v4);
  v22 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v22);
  v24 = *(void (**)(char *, uint64_t))(v5 + 8);
  v24(v8, v4);
  v24(v10, v4);
  return v23 & 1;
}

uint64_t sub_100277888(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v24 - v11;
  v13 = *(int *)(a3(0) + 20);
  v14 = (_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  if (!v15)
  {
    if (!v17)
    {
LABEL_11:
      v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v20(v12, a1, v6);
      v20(v10, a2, v6);
      v21 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v21);
      v22 = *(void (**)(char *, uint64_t))(v7 + 8);
      v22(v10, v6);
      v22(v12, v6);
      return v19 & 1;
    }
LABEL_10:
    v19 = 0;
    return v19 & 1;
  }
  if (!v17)
    goto LABEL_10;
  if (*v14 == *v16 && v15 == v17)
    goto LABEL_11;
  v19 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15) & 1) != 0)
    goto LABEL_11;
  return v19 & 1;
}

uint64_t sub_1002779EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _DWORD *v13;
  char v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  char v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  char v24;
  _DWORD *v25;
  int v26;
  char v27;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  v11 = (int *)type metadata accessor for Proto_Gpsd_Exception(0);
  v12 = v11[5];
  v13 = (_DWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 4);
  v15 = (_DWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_15;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_15;
  }
  v17 = v11[6];
  v18 = (_DWORD *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 4);
  v20 = (_DWORD *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_15;
LABEL_13:
    v22 = v11[7];
    v23 = (_DWORD *)(a1 + v22);
    v24 = *(_BYTE *)(a1 + v22 + 4);
    v25 = (_DWORD *)(a2 + v22);
    v26 = *(unsigned __int8 *)(a2 + v22 + 4);
    if ((v24 & 1) != 0)
    {
      if (!v26)
        goto LABEL_15;
    }
    else
    {
      if (*v23 != *v25)
        LOBYTE(v26) = 1;
      if ((v26 & 1) != 0)
        goto LABEL_15;
    }
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    v30 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v30);
    v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    v31(v8, v4);
    v31(v10, v4);
    return v27 & 1;
  }
  if (v21)
    goto LABEL_13;
LABEL_15:
  v27 = 0;
  return v27 & 1;
}

uint64_t sub_100277B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  void (*v24)(_BYTE *, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(_BYTE *, uint64_t);
  _BYTE v29[14];
  char v30;
  char v31;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v29[-v9];
  v11 = (int *)type metadata accessor for Proto_Gpsd_Response(0);
  v12 = v11[5];
  v13 = *(char *)(a1 + v12);
  v14 = *(char *)(a2 + v12);
  if (v13 == 61)
  {
    if ((_DWORD)v14 != 61)
      goto LABEL_18;
  }
  else if ((_DWORD)v14 == 61 || qword_1002EEF38[v13] != qword_1002EEF38[v14])
  {
    goto LABEL_18;
  }
  v15 = v11[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = *(_BYTE *)(a1 + v15 + 8);
  v18 = (_QWORD *)(a2 + v15);
  v19 = *(unsigned __int8 *)(a2 + v15 + 8);
  if ((v17 & 1) != 0)
  {
    if (!v19)
      goto LABEL_18;
  }
  else
  {
    if (*v16 != *v18)
      LOBYTE(v19) = 1;
    if ((v19 & 1) != 0)
      goto LABEL_18;
  }
  v20 = v11[7];
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 10)
  {
    if (v22 == 10)
      goto LABEL_17;
LABEL_18:
    v26 = 0;
    return v26 & 1;
  }
  v31 = v21;
  if (v22 == 10)
    goto LABEL_18;
  v30 = v22;
  v23 = sub_1000155F4();
  if ((dispatch thunk of static Equatable.== infix(_:_:)(&v31, &v30, &type metadata for Proto_Gnss_Result, v23) & 1) == 0)
    goto LABEL_18;
LABEL_17:
  v24 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v24(v10, a1, v4);
  v24(v8, a2, v4);
  v25 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v25);
  v27 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v27(v8, v4);
  v27(v10, v4);
  return v26 & 1;
}

uint64_t sub_100277D84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  char v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v112 = type metadata accessor for UnknownStorage(0);
  v98 = *(_QWORD *)(v112 - 8);
  v4 = __chkstk_darwin(v112);
  v97 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v96 = (char *)&v94 - v6;
  v7 = type metadata accessor for Proto_Gpsd_Indication(0);
  v101 = *(_QWORD *)(v7 - 8);
  v102 = v7;
  __chkstk_darwin(v7);
  v95 = (uint64_t)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_1000039AC(&qword_10036A640);
  __chkstk_darwin(v100);
  v103 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000039AC(&qword_100369E50);
  v11 = __chkstk_darwin(v10);
  v111 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v109 = (char *)&v94 - v14;
  __chkstk_darwin(v13);
  v110 = (char *)&v94 - v15;
  v16 = type metadata accessor for Proto_Gpsd_Response(0);
  v106 = *(_QWORD *)(v16 - 8);
  v107 = v16;
  __chkstk_darwin(v16);
  v99 = (uint64_t)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1000039AC(&qword_10036A648);
  __chkstk_darwin(v105);
  v108 = (uint64_t)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000039AC(&qword_100369E48);
  v20 = __chkstk_darwin(v19);
  v104 = (uint64_t)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v113 = (uint64_t)&v94 - v23;
  __chkstk_darwin(v22);
  v114 = (uint64_t)&v94 - v24;
  v25 = type metadata accessor for Proto_Gpsd_Request(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1000039AC(&qword_10036A6A0);
  __chkstk_darwin(v29);
  v31 = (char *)&v94 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1000039AC(&qword_100369E40);
  v33 = __chkstk_darwin(v32);
  v35 = (char *)&v94 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v94 - v37;
  __chkstk_darwin(v36);
  v40 = (char *)&v94 - v39;
  v41 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  v42 = v41;
  v43 = *(int *)(v41 + 20);
  v115 = a1;
  v116 = a2;
  v44 = (_QWORD *)(a1 + v43);
  v45 = *(_BYTE *)(a1 + v43 + 8);
  v46 = (_QWORD *)(a2 + v43);
  v47 = *(unsigned __int8 *)(a2 + v43 + 8);
  if ((v45 & 1) != 0)
  {
    if (!v47)
      goto LABEL_29;
  }
  else
  {
    if (*v44 != *v46)
      LOBYTE(v47) = 1;
    if ((v47 & 1) != 0)
      goto LABEL_29;
  }
  v48 = *(int *)(v41 + 24);
  v49 = v115;
  v50 = (_QWORD *)(v115 + v48);
  v51 = *(_QWORD *)(v115 + v48 + 8);
  v52 = (_QWORD *)(v116 + v48);
  v53 = v52[1];
  if (!v51)
  {
    if (v53)
      goto LABEL_29;
    goto LABEL_14;
  }
  if (!v53)
    goto LABEL_29;
  if (*v50 == *v52 && v51 == v53
    || (v54 = v41, v55 = _stringCompareWithSmolCheck(_:_:expecting:)(*v50, v51), v42 = v54, v56 = 0, (v55 & 1) != 0))
  {
LABEL_14:
    v57 = v49 + *(int *)(v42 + 28);
    v58 = v42;
    sub_10000E660(v57, (uint64_t)v40, &qword_100369E40);
    v94 = v58;
    sub_10000E660(v116 + *(int *)(v58 + 28), (uint64_t)v38, &qword_100369E40);
    v59 = (uint64_t)&v31[*(int *)(v29 + 48)];
    sub_10000E660((uint64_t)v40, (uint64_t)v31, &qword_100369E40);
    sub_10000E660((uint64_t)v38, v59, &qword_100369E40);
    v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
    if (v60((uint64_t)v31, 1, v25) == 1)
    {
      sub_100015704((uint64_t)v38, &qword_100369E40);
      sub_100015704((uint64_t)v40, &qword_100369E40);
      if (v60(v59, 1, v25) == 1)
      {
        sub_100015704((uint64_t)v31, &qword_100369E40);
        goto LABEL_22;
      }
    }
    else
    {
      sub_10000E660((uint64_t)v31, (uint64_t)v35, &qword_100369E40);
      if (v60(v59, 1, v25) != 1)
      {
        sub_100003E08(v59, (uint64_t)v28, type metadata accessor for Proto_Gpsd_Request);
        v63 = sub_100065A60((uint64_t)v35, (uint64_t)v28, type metadata accessor for Proto_Gpsd_Request, (uint64_t (*)(uint64_t, uint64_t))sub_100254220);
        sub_100004030((uint64_t)v28, type metadata accessor for Proto_Gpsd_Request);
        sub_100015704((uint64_t)v38, &qword_100369E40);
        sub_100015704((uint64_t)v40, &qword_100369E40);
        sub_100004030((uint64_t)v35, type metadata accessor for Proto_Gpsd_Request);
        sub_100015704((uint64_t)v31, &qword_100369E40);
        if ((v63 & 1) == 0)
          goto LABEL_29;
LABEL_22:
        v64 = v94;
        v66 = v114;
        v65 = v115;
        sub_10000E660(v115 + *(int *)(v94 + 32), v114, &qword_100369E48);
        v67 = v113;
        sub_10000E660(v116 + *(int *)(v64 + 32), v113, &qword_100369E48);
        v68 = v108;
        v69 = v108 + *(int *)(v105 + 48);
        sub_10000E660(v66, v108, &qword_100369E48);
        sub_10000E660(v67, v69, &qword_100369E48);
        v70 = v107;
        v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
        if (v71(v68, 1, v107) == 1)
        {
          sub_100015704(v67, &qword_100369E48);
          sub_100015704(v66, &qword_100369E48);
          v72 = v71(v69, 1, v70);
          v74 = (uint64_t)v111;
          v73 = v112;
          v76 = (uint64_t)v109;
          v75 = (uint64_t)v110;
          if (v72 == 1)
          {
            sub_100015704(v68, &qword_100369E48);
LABEL_32:
            v82 = v94;
            sub_10000E660(v65 + *(int *)(v94 + 36), v75, &qword_100369E50);
            sub_10000E660(v116 + *(int *)(v82 + 36), v76, &qword_100369E50);
            v31 = v103;
            v83 = (uint64_t)&v103[*(int *)(v100 + 48)];
            sub_10000E660(v75, (uint64_t)v103, &qword_100369E50);
            sub_10000E660(v76, v83, &qword_100369E50);
            v84 = v102;
            v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
            if (v85((uint64_t)v31, 1, v102) == 1)
            {
              sub_100015704(v76, &qword_100369E50);
              sub_100015704(v75, &qword_100369E50);
              if (v85(v83, 1, v84) == 1)
              {
                sub_100015704((uint64_t)v31, &qword_100369E50);
LABEL_39:
                v88 = v98;
                v89 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
                v90 = v96;
                v89(v96, v115, v73);
                v91 = v97;
                v89(v97, v116, v73);
                v92 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
                v56 = dispatch thunk of static Equatable.== infix(_:_:)(v90, v91, v73, v92);
                v93 = *(void (**)(char *, uint64_t))(v88 + 8);
                v93(v91, v73);
                v93(v90, v73);
                return v56 & 1;
              }
              goto LABEL_37;
            }
            sub_10000E660((uint64_t)v31, v74, &qword_100369E50);
            if (v85(v83, 1, v84) == 1)
            {
              sub_100015704(v76, &qword_100369E50);
              sub_100015704(v75, &qword_100369E50);
              sub_100004030(v74, type metadata accessor for Proto_Gpsd_Indication);
LABEL_37:
              v61 = &qword_10036A640;
              goto LABEL_20;
            }
            v86 = v95;
            sub_100003E08(v83, v95, type metadata accessor for Proto_Gpsd_Indication);
            v87 = sub_100065A60(v74, v86, type metadata accessor for Proto_Gpsd_Indication, (uint64_t (*)(uint64_t, uint64_t))sub_1002613E8);
            sub_100004030(v86, type metadata accessor for Proto_Gpsd_Indication);
            sub_100015704(v76, &qword_100369E50);
            sub_100015704(v75, &qword_100369E50);
            sub_100004030(v74, type metadata accessor for Proto_Gpsd_Indication);
            sub_100015704((uint64_t)v31, &qword_100369E50);
            if ((v87 & 1) != 0)
              goto LABEL_39;
LABEL_29:
            v56 = 0;
            return v56 & 1;
          }
        }
        else
        {
          v77 = v104;
          sub_10000E660(v68, v104, &qword_100369E48);
          v78 = v71(v69, 1, v70);
          v74 = (uint64_t)v111;
          v73 = v112;
          v76 = (uint64_t)v109;
          v75 = (uint64_t)v110;
          if (v78 != 1)
          {
            v80 = v99;
            sub_100003E08(v69, v99, type metadata accessor for Proto_Gpsd_Response);
            v81 = sub_100277B9C(v77, v80);
            sub_100004030(v80, type metadata accessor for Proto_Gpsd_Response);
            sub_100015704(v113, &qword_100369E48);
            sub_100015704(v114, &qword_100369E48);
            sub_100004030(v77, type metadata accessor for Proto_Gpsd_Response);
            sub_100015704(v68, &qword_100369E48);
            if ((v81 & 1) == 0)
              goto LABEL_29;
            goto LABEL_32;
          }
          sub_100015704(v113, &qword_100369E48);
          sub_100015704(v114, &qword_100369E48);
          sub_100004030(v77, type metadata accessor for Proto_Gpsd_Response);
        }
        v61 = &qword_10036A648;
        v62 = v68;
        goto LABEL_28;
      }
      sub_100015704((uint64_t)v38, &qword_100369E40);
      sub_100015704((uint64_t)v40, &qword_100369E40);
      sub_100004030((uint64_t)v35, type metadata accessor for Proto_Gpsd_Request);
    }
    v61 = &qword_10036A6A0;
LABEL_20:
    v62 = (uint64_t)v31;
LABEL_28:
    sub_100015704(v62, v61);
    goto LABEL_29;
  }
  return v56 & 1;
}

uint64_t sub_10027877C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;

  v4 = type metadata accessor for UnknownStorage(0);
  v60 = *(_QWORD *)(v4 - 8);
  v61 = v4;
  v5 = __chkstk_darwin(v4);
  v59 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v58 = (char *)&v58 - v7;
  v8 = type metadata accessor for Proto_Gnss_Position(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v62 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10037CDF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_10037C040);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v58 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v58 - v21;
  v23 = type metadata accessor for Proto_Gpsd_InjectAssistancePosition(0);
  v24 = *(int *)(v23 + 20);
  v63 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  sub_10000E660(v25, (uint64_t)v22, &qword_10037C040);
  v27 = v26[5];
  v64 = a2;
  sub_10000E660(a2 + v27, (uint64_t)v20, &qword_10037C040);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000E660((uint64_t)v22, (uint64_t)v13, &qword_10037C040);
  sub_10000E660((uint64_t)v20, v28, &qword_10037C040);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) != 1)
  {
    sub_10000E660((uint64_t)v13, (uint64_t)v17, &qword_10037C040);
    if (v29(v28, 1, v8) != 1)
    {
      v32 = v28;
      v33 = v62;
      sub_100003E08(v32, v62, type metadata accessor for Proto_Gnss_Position);
      v34 = sub_10000FD38(&qword_10037C2A0, type metadata accessor for Proto_Gnss_Position, (uint64_t)&unk_1002E7F58);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v33, v8, v34);
      sub_100004030(v33, type metadata accessor for Proto_Gnss_Position);
      sub_100015704((uint64_t)v20, &qword_10037C040);
      sub_100015704((uint64_t)v22, &qword_10037C040);
      sub_100004030((uint64_t)v17, type metadata accessor for Proto_Gnss_Position);
      sub_100015704((uint64_t)v13, &qword_10037C040);
      if ((v35 & 1) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    sub_100015704((uint64_t)v20, &qword_10037C040);
    sub_100015704((uint64_t)v22, &qword_10037C040);
    sub_100004030((uint64_t)v17, type metadata accessor for Proto_Gnss_Position);
LABEL_6:
    sub_100015704((uint64_t)v13, &qword_10037CDF0);
    goto LABEL_7;
  }
  sub_100015704((uint64_t)v20, &qword_10037C040);
  sub_100015704((uint64_t)v22, &qword_10037C040);
  if (v29(v28, 1, v8) != 1)
    goto LABEL_6;
  sub_100015704((uint64_t)v13, &qword_10037C040);
LABEL_10:
  v36 = v26[6];
  v37 = v63;
  v38 = v64;
  v39 = *(unsigned __int8 *)(v63 + v36);
  v40 = *(unsigned __int8 *)(v64 + v36);
  if (v39 == 4)
  {
    if (v40 != 4)
      goto LABEL_7;
  }
  else
  {
    v66 = v39;
    if (v40 == 4)
      goto LABEL_7;
    v65 = v40;
    v41 = sub_10021D210();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v66, &v65, &type metadata for Proto_Gnss_PositionAssistType, v41) & 1) == 0)goto LABEL_7;
  }
  v42 = v26[7];
  v43 = *(unsigned __int8 *)(v37 + v42);
  v44 = *(unsigned __int8 *)(v38 + v42);
  if (v43 == 2)
  {
    if (v44 != 2)
      goto LABEL_7;
  }
  else if (v44 == 2 || ((((v44 & 1) == 0) ^ v43) & 1) == 0)
  {
    goto LABEL_7;
  }
  v45 = v26[8];
  v46 = (_QWORD *)(v37 + v45);
  v47 = *(_BYTE *)(v37 + v45 + 8);
  v48 = (_QWORD *)(v38 + v45);
  v49 = *(unsigned __int8 *)(v38 + v45 + 8);
  if ((v47 & 1) != 0)
  {
    if (v49)
    {
LABEL_26:
      v50 = v60;
      v51 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
      v52 = v58;
      v53 = v37;
      v54 = v61;
      v51(v58, v53, v61);
      v55 = v59;
      v51(v59, v38, v54);
      v56 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)(v52, v55, v54, v56);
      v57 = *(void (**)(char *, uint64_t))(v50 + 8);
      v57(v55, v54);
      v57(v52, v54);
      return v30 & 1;
    }
  }
  else
  {
    if (*v46 != *v48)
      LOBYTE(v49) = 1;
    if ((v49 & 1) == 0)
      goto LABEL_26;
  }
LABEL_7:
  v30 = 0;
  return v30 & 1;
}

uint64_t sub_100278C2C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  char v20;
  _DWORD *v21;
  int v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v29 - v9;
  v11 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(0);
  v12 = v11;
  v13 = *(int *)(v11 + 28);
  v14 = (_DWORD *)((char *)a1 + v13);
  v15 = *((_BYTE *)a1 + v13 + 4);
  v16 = (_DWORD *)((char *)a2 + v13);
  v17 = *((unsigned __int8 *)a2 + v13 + 4);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_16;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_16;
  }
  v18 = *(int *)(v11 + 32);
  v19 = (_DWORD *)((char *)a1 + v18);
  v20 = *((_BYTE *)a1 + v18 + 4);
  v21 = (_DWORD *)((char *)a2 + v18);
  v22 = *((unsigned __int8 *)a2 + v18 + 4);
  if ((v20 & 1) != 0)
  {
    if (!v22)
    {
LABEL_16:
      v26 = 0;
      return v26 & 1;
    }
  }
  else
  {
    if (*v19 != *v21)
      LOBYTE(v22) = 1;
    if ((v22 & 1) != 0)
      goto LABEL_16;
  }
  if (!sub_1001C1DE4(*a1, *a2) || !sub_1001C1DE4(a1[1], a2[1]))
    goto LABEL_16;
  v23 = (char *)a1 + *(int *)(v12 + 24);
  v24 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v24(v10, v23, v4);
  v24(v8, (char *)a2 + *(int *)(v12 + 24), v4);
  v25 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v25);
  v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v8, v4);
  v27(v10, v4);
  return v26 & 1;
}

uint64_t sub_100278DD8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  _DWORD *v14;
  char v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  char v20;
  _DWORD *v21;
  int v22;
  char v23;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v29 - v9;
  if (!sub_1001C1DE4(*a1, *a2))
    goto LABEL_10;
  v11 = (int *)type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(0);
  v12 = v11;
  v13 = v11[6];
  v14 = (_DWORD *)((char *)a1 + v13);
  v15 = *((_BYTE *)a1 + v13 + 4);
  v16 = (_DWORD *)((char *)a2 + v13);
  v17 = *((unsigned __int8 *)a2 + v13 + 4);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_10;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_10;
  }
  v18 = v11[7];
  v19 = (_DWORD *)((char *)a1 + v18);
  v20 = *((_BYTE *)a1 + v18 + 4);
  v21 = (_DWORD *)((char *)a2 + v18);
  v22 = *((unsigned __int8 *)a2 + v18 + 4);
  if ((v20 & 1) == 0)
  {
    if (*v19 != *v21)
      LOBYTE(v22) = 1;
    if ((v22 & 1) != 0)
      goto LABEL_10;
LABEL_15:
    v25 = (char *)a1 + v11[5];
    v26 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v26(v10, v25, v4);
    v26(v8, (char *)a2 + v12[5], v4);
    v27 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v27);
    v28 = *(void (**)(char *, uint64_t))(v5 + 8);
    v28(v8, v4);
    v28(v10, v4);
    return v23 & 1;
  }
  if (v22)
    goto LABEL_15;
LABEL_10:
  v23 = 0;
  return v23 & 1;
}

uint64_t sub_100278F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _DWORD *v13;
  char v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  char v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  char v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  char v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  char v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  char v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  _DWORD *v46;
  char v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  char v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  _DWORD *v56;
  char v57;
  _DWORD *v58;
  int v59;
  uint64_t v60;
  _DWORD *v61;
  char v62;
  _DWORD *v63;
  int v64;
  char v65;
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v70 - v9;
  v11 = (int *)type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  v12 = v11[5];
  v13 = (_DWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 4);
  v15 = (_DWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_62;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_62;
  }
  v17 = v11[6];
  v18 = (_DWORD *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 4);
  v20 = (_DWORD *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_62;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_62;
  }
  v22 = v11[7];
  v23 = (_DWORD *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 4);
  v25 = (_DWORD *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_62;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_62;
  }
  v27 = v11[8];
  v28 = (_DWORD *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 4);
  v30 = (_DWORD *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if ((v29 & 1) != 0)
  {
    if (!v31)
      goto LABEL_62;
  }
  else
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_62;
  }
  v32 = v11[9];
  v33 = (_DWORD *)(a1 + v32);
  v34 = *(_BYTE *)(a1 + v32 + 4);
  v35 = (_DWORD *)(a2 + v32);
  v36 = *(unsigned __int8 *)(a2 + v32 + 4);
  if ((v34 & 1) != 0)
  {
    if (!v36)
      goto LABEL_62;
  }
  else
  {
    if (*v33 != *v35)
      LOBYTE(v36) = 1;
    if ((v36 & 1) != 0)
      goto LABEL_62;
  }
  v37 = v11[10];
  v38 = (_DWORD *)(a1 + v37);
  v39 = *(_BYTE *)(a1 + v37 + 4);
  v40 = (_DWORD *)(a2 + v37);
  v41 = *(unsigned __int8 *)(a2 + v37 + 4);
  if ((v39 & 1) != 0)
  {
    if (!v41)
      goto LABEL_62;
  }
  else
  {
    if (*v38 != *v40)
      LOBYTE(v41) = 1;
    if ((v41 & 1) != 0)
      goto LABEL_62;
  }
  v42 = v11[11];
  v43 = *(unsigned __int8 *)(a1 + v42);
  v44 = *(unsigned __int8 *)(a2 + v42);
  if (v43 == 2)
  {
    if (v44 != 2)
      goto LABEL_62;
  }
  else if (v44 == 2 || ((((v44 & 1) == 0) ^ v43) & 1) == 0)
  {
    goto LABEL_62;
  }
  v45 = v11[12];
  v46 = (_DWORD *)(a1 + v45);
  v47 = *(_BYTE *)(a1 + v45 + 4);
  v48 = (_DWORD *)(a2 + v45);
  v49 = *(unsigned __int8 *)(a2 + v45 + 4);
  if ((v47 & 1) != 0)
  {
    if (!v49)
      goto LABEL_62;
  }
  else
  {
    if (*v46 != *v48)
      LOBYTE(v49) = 1;
    if ((v49 & 1) != 0)
      goto LABEL_62;
  }
  v50 = v11[13];
  v51 = (_DWORD *)(a1 + v50);
  v52 = *(_BYTE *)(a1 + v50 + 4);
  v53 = (_DWORD *)(a2 + v50);
  v54 = *(unsigned __int8 *)(a2 + v50 + 4);
  if ((v52 & 1) != 0)
  {
    if (!v54)
      goto LABEL_62;
  }
  else
  {
    if (*v51 != *v53)
      LOBYTE(v54) = 1;
    if ((v54 & 1) != 0)
      goto LABEL_62;
  }
  v55 = v11[14];
  v56 = (_DWORD *)(a1 + v55);
  v57 = *(_BYTE *)(a1 + v55 + 4);
  v58 = (_DWORD *)(a2 + v55);
  v59 = *(unsigned __int8 *)(a2 + v55 + 4);
  if ((v57 & 1) == 0)
  {
    if (*v56 != *v58)
      LOBYTE(v59) = 1;
    if ((v59 & 1) != 0)
      goto LABEL_62;
LABEL_60:
    v60 = v11[15];
    v61 = (_DWORD *)(a1 + v60);
    v62 = *(_BYTE *)(a1 + v60 + 4);
    v63 = (_DWORD *)(a2 + v60);
    v64 = *(unsigned __int8 *)(a2 + v60 + 4);
    if ((v62 & 1) != 0)
    {
      if (!v64)
        goto LABEL_62;
    }
    else
    {
      if (*v61 != *v63)
        LOBYTE(v64) = 1;
      if ((v64 & 1) != 0)
        goto LABEL_62;
    }
    v67 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v67(v10, a1, v4);
    v67(v8, a2, v4);
    v68 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v65 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v68);
    v69 = *(void (**)(char *, uint64_t))(v5 + 8);
    v69(v8, v4);
    v69(v10, v4);
    return v65 & 1;
  }
  if (v59)
    goto LABEL_60;
LABEL_62:
  v65 = 0;
  return v65 & 1;
}

uint64_t sub_1002792C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v36 - v9;
  v11 = (int *)type metadata accessor for Proto_Gpsd_Status(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_29;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_29;
  }
  v17 = v11[6];
  v18 = (_QWORD *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (_QWORD *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_29;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_29;
  }
  v22 = v11[7];
  v23 = *(unsigned __int8 *)(a1 + v22);
  v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 2)
  {
    if (v24 != 2)
      goto LABEL_29;
  }
  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_29;
  }
  v25 = v11[8];
  v26 = *(unsigned __int8 *)(a1 + v25);
  v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 != 2)
      goto LABEL_29;
  }
  else if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0)
  {
    goto LABEL_29;
  }
  v28 = v11[9];
  v29 = *(unsigned __int8 *)(a1 + v28);
  v30 = *(unsigned __int8 *)(a2 + v28);
  if (v29 == 2)
  {
    if (v30 == 2)
      goto LABEL_28;
LABEL_29:
    v33 = 0;
    return v33 & 1;
  }
  if (v30 == 2 || ((((v30 & 1) == 0) ^ v29) & 1) == 0)
    goto LABEL_29;
LABEL_28:
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v31(v10, a1, v4);
  v31(v8, a2, v4);
  v32 = sub_10000FD38(&qword_10036A610, (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage, (uint64_t)&protocol conformance descriptor for UnknownStorage);
  v33 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v32);
  v34 = *(void (**)(char *, uint64_t))(v5 + 8);
  v34(v8, v4);
  v34(v10, v4);
  return v33 & 1;
}

unint64_t sub_1002794F0()
{
  unint64_t result;

  result = qword_10037D6C0;
  if (!qword_10037D6C0)
  {
    result = swift_getWitnessTable(&unk_1002EA030, &type metadata for Proto_Gpsd_SuplInitDecodeResult);
    atomic_store(result, (unint64_t *)&qword_10037D6C0);
  }
  return result;
}

unint64_t sub_100279538()
{
  unint64_t result;

  result = qword_10037D6C8;
  if (!qword_10037D6C8)
  {
    result = swift_getWitnessTable(&unk_1002EA058, &type metadata for Proto_Gpsd_SuplInitDecodeResult);
    atomic_store(result, (unint64_t *)&qword_10037D6C8);
  }
  return result;
}

unint64_t sub_100279580()
{
  unint64_t result;

  result = qword_10037D6D0;
  if (!qword_10037D6D0)
  {
    result = swift_getWitnessTable(&unk_1002EA0E0, &type metadata for Proto_Gpsd_SuplInitDecodeResult);
    atomic_store(result, (unint64_t *)&qword_10037D6D0);
  }
  return result;
}

uint64_t sub_1002795C4()
{
  return sub_10000FFB4(&qword_10037D6D8, &qword_10037D6E0);
}

unint64_t sub_1002795EC()
{
  unint64_t result;

  result = qword_10037D6E8;
  if (!qword_10037D6E8)
  {
    result = swift_getWitnessTable(&unk_1002EA150, &type metadata for Proto_Gpsd_CompressionType);
    atomic_store(result, (unint64_t *)&qword_10037D6E8);
  }
  return result;
}

unint64_t sub_100279634()
{
  unint64_t result;

  result = qword_10037D6F0;
  if (!qword_10037D6F0)
  {
    result = swift_getWitnessTable(&unk_1002EA178, &type metadata for Proto_Gpsd_CompressionType);
    atomic_store(result, (unint64_t *)&qword_10037D6F0);
  }
  return result;
}

unint64_t sub_10027967C()
{
  unint64_t result;

  result = qword_10037D6F8;
  if (!qword_10037D6F8)
  {
    result = swift_getWitnessTable(&unk_1002EA200, &type metadata for Proto_Gpsd_CompressionType);
    atomic_store(result, (unint64_t *)&qword_10037D6F8);
  }
  return result;
}

uint64_t sub_1002796C0()
{
  return sub_10000FFB4(&qword_10037D700, &qword_10037D708);
}

unint64_t sub_1002796E8()
{
  unint64_t result;

  result = qword_10037D710;
  if (!qword_10037D710)
  {
    result = swift_getWitnessTable(&unk_1002EA270, &type metadata for Proto_Gpsd_LtlInfoType);
    atomic_store(result, (unint64_t *)&qword_10037D710);
  }
  return result;
}

unint64_t sub_100279730()
{
  unint64_t result;

  result = qword_10037D718;
  if (!qword_10037D718)
  {
    result = swift_getWitnessTable(&unk_1002EA298, &type metadata for Proto_Gpsd_LtlInfoType);
    atomic_store(result, (unint64_t *)&qword_10037D718);
  }
  return result;
}

unint64_t sub_100279778()
{
  unint64_t result;

  result = qword_10037D720;
  if (!qword_10037D720)
  {
    result = swift_getWitnessTable(&unk_1002EA320, &type metadata for Proto_Gpsd_LtlInfoType);
    atomic_store(result, (unint64_t *)&qword_10037D720);
  }
  return result;
}

uint64_t sub_1002797BC()
{
  return sub_10000FFB4(&qword_10037D728, &qword_10037D730);
}

unint64_t sub_1002797E4()
{
  unint64_t result;

  result = qword_10037D738;
  if (!qword_10037D738)
  {
    result = swift_getWitnessTable(&unk_1002EA390, &type metadata for Proto_Gpsd_CntinStatus);
    atomic_store(result, (unint64_t *)&qword_10037D738);
  }
  return result;
}

unint64_t sub_10027982C()
{
  unint64_t result;

  result = qword_10037D740;
  if (!qword_10037D740)
  {
    result = swift_getWitnessTable(&unk_1002EA3B8, &type metadata for Proto_Gpsd_CntinStatus);
    atomic_store(result, (unint64_t *)&qword_10037D740);
  }
  return result;
}

unint64_t sub_100279874()
{
  unint64_t result;

  result = qword_10037D748;
  if (!qword_10037D748)
  {
    result = swift_getWitnessTable(&unk_1002EA440, &type metadata for Proto_Gpsd_CntinStatus);
    atomic_store(result, (unint64_t *)&qword_10037D748);
  }
  return result;
}

uint64_t sub_1002798B8()
{
  return sub_10000FFB4(&qword_10037D750, &qword_10037D758);
}

unint64_t sub_1002798E0()
{
  unint64_t result;

  result = qword_10037D760;
  if (!qword_10037D760)
  {
    result = swift_getWitnessTable(&unk_1002EA4B0, &type metadata for Proto_Gpsd_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_10037D760);
  }
  return result;
}

unint64_t sub_100279928()
{
  unint64_t result;

  result = qword_10037D768;
  if (!qword_10037D768)
  {
    result = swift_getWitnessTable(&unk_1002EA4D8, &type metadata for Proto_Gpsd_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_10037D768);
  }
  return result;
}

unint64_t sub_100279970()
{
  unint64_t result;

  result = qword_10037D770;
  if (!qword_10037D770)
  {
    result = swift_getWitnessTable(&unk_1002EA560, &type metadata for Proto_Gpsd_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_10037D770);
  }
  return result;
}

uint64_t sub_1002799B4()
{
  return sub_10000FFB4(&qword_10037D778, &qword_10037D780);
}

unint64_t sub_1002799DC()
{
  unint64_t result;

  result = qword_10037D788;
  if (!qword_10037D788)
  {
    result = swift_getWitnessTable(&unk_1002EA5D0, &type metadata for Proto_Gpsd_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_10037D788);
  }
  return result;
}

unint64_t sub_100279A24()
{
  unint64_t result;

  result = qword_10037D790;
  if (!qword_10037D790)
  {
    result = swift_getWitnessTable(&unk_1002EA5F8, &type metadata for Proto_Gpsd_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_10037D790);
  }
  return result;
}

unint64_t sub_100279A6C()
{
  unint64_t result;

  result = qword_10037D798;
  if (!qword_10037D798)
  {
    result = swift_getWitnessTable(&unk_1002EA680, &type metadata for Proto_Gpsd_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_10037D798);
  }
  return result;
}

uint64_t sub_100279AB0()
{
  return sub_10000FFB4(&qword_10037D7A0, &qword_10037D7A8);
}

uint64_t sub_100279AD4()
{
  return sub_10000FD38(&qword_10037D7B0, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&unk_1002EA868);
}

uint64_t sub_100279B00()
{
  return sub_10000FD38(&qword_10036A6B8, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&unk_1002EA790);
}

uint64_t sub_100279B2C()
{
  return sub_10000FD38(&qword_10037D558, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&unk_1002EA890);
}

uint64_t sub_100279B58()
{
  return sub_10000FD38(&qword_10036A6B0, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&unk_1002EA8D0);
}

uint64_t sub_100279B84()
{
  return sub_10000FD38(&qword_10037D7B8, type metadata accessor for Proto_Gpsd_Response, (uint64_t)&unk_1002EA9F8);
}

uint64_t sub_100279BB0()
{
  return sub_10000FD38(&qword_10036A668, type metadata accessor for Proto_Gpsd_Response, (uint64_t)&unk_1002EA920);
}

uint64_t sub_100279BDC()
{
  return sub_10000FD38(&qword_10037D560, type metadata accessor for Proto_Gpsd_Response, (uint64_t)&unk_1002EAA20);
}

uint64_t sub_100279C08()
{
  return sub_10000FD38(&qword_10036A658, type metadata accessor for Proto_Gpsd_Response, (uint64_t)&unk_1002EAA60);
}

uint64_t sub_100279C34()
{
  return sub_10000FD38(&qword_10037D7C0, type metadata accessor for Proto_Gpsd_Indication, (uint64_t)&unk_1002EAB60);
}

uint64_t sub_100279C60()
{
  return sub_10000FD38(&qword_10036A660, type metadata accessor for Proto_Gpsd_Indication, (uint64_t)&unk_1002EAA88);
}

uint64_t sub_100279C8C()
{
  return sub_10000FD38(&qword_10037D568, type metadata accessor for Proto_Gpsd_Indication, (uint64_t)&unk_1002EAB88);
}

uint64_t sub_100279CB8()
{
  return sub_10000FD38(&qword_10036A650, type metadata accessor for Proto_Gpsd_Indication, (uint64_t)&unk_1002EABC8);
}

uint64_t sub_100279CE4()
{
  return sub_10000FD38(&qword_10037D7C8, type metadata accessor for Proto_Gpsd_Status, (uint64_t)&unk_1002EACF0);
}

uint64_t sub_100279D10()
{
  return sub_10000FD38(&qword_10037D7D0, type metadata accessor for Proto_Gpsd_Status, (uint64_t)&unk_1002EAC18);
}

uint64_t sub_100279D3C()
{
  return sub_10000FD38(&qword_10037D570, type metadata accessor for Proto_Gpsd_Status, (uint64_t)&unk_1002EAD18);
}

uint64_t sub_100279D68()
{
  return sub_10000FD38(&qword_10037D7D8, type metadata accessor for Proto_Gpsd_Status, (uint64_t)&unk_1002EAD58);
}

uint64_t sub_100279D94()
{
  return sub_10000FD38(&qword_10037D7E0, type metadata accessor for Proto_Gpsd_SetPvtmReport, (uint64_t)&unk_1002EAE58);
}

uint64_t sub_100279DC0()
{
  return sub_10000FD38(&qword_10037D7E8, type metadata accessor for Proto_Gpsd_SetPvtmReport, (uint64_t)&unk_1002EAD80);
}

uint64_t sub_100279DEC()
{
  return sub_10000FD38(&qword_10037D578, type metadata accessor for Proto_Gpsd_SetPvtmReport, (uint64_t)&unk_1002EAE80);
}

uint64_t sub_100279E18()
{
  return sub_10000FD38(&qword_10037D7F0, type metadata accessor for Proto_Gpsd_SetPvtmReport, (uint64_t)&unk_1002EAEC0);
}

uint64_t sub_100279E44()
{
  return sub_10000FD38(&qword_10037D7F8, type metadata accessor for Proto_Gpsd_InjectAssistanceFile, (uint64_t)&unk_1002EAFC0);
}

uint64_t sub_100279E70()
{
  return sub_10000FD38(&qword_10037D800, type metadata accessor for Proto_Gpsd_InjectAssistanceFile, (uint64_t)&unk_1002EAEE8);
}

uint64_t sub_100279E9C()
{
  return sub_10000FD38(&qword_10037D580, type metadata accessor for Proto_Gpsd_InjectAssistanceFile, (uint64_t)&unk_1002EAFE8);
}

uint64_t sub_100279EC8()
{
  return sub_10000FD38(&qword_10037D808, type metadata accessor for Proto_Gpsd_InjectAssistanceFile, (uint64_t)&unk_1002EB028);
}

uint64_t sub_100279EF4()
{
  return sub_10000FD38(&qword_10037D810, type metadata accessor for Proto_Gpsd_InjectRtiFile, (uint64_t)&unk_1002EB128);
}

uint64_t sub_100279F20()
{
  return sub_10000FD38(&qword_10037D818, type metadata accessor for Proto_Gpsd_InjectRtiFile, (uint64_t)&unk_1002EB050);
}

uint64_t sub_100279F4C()
{
  return sub_10000FD38(&qword_10037D588, type metadata accessor for Proto_Gpsd_InjectRtiFile, (uint64_t)&unk_1002EB150);
}

uint64_t sub_100279F78()
{
  return sub_10000FD38(&qword_10037D820, type metadata accessor for Proto_Gpsd_InjectRtiFile, (uint64_t)&unk_1002EB190);
}

uint64_t sub_100279FA4()
{
  return sub_10000FD38(&qword_10037D828, type metadata accessor for Proto_Gpsd_InjectSvidBlocklist, (uint64_t)&unk_1002EB290);
}

uint64_t sub_100279FD0()
{
  return sub_10000FD38(&qword_10037D830, type metadata accessor for Proto_Gpsd_InjectSvidBlocklist, (uint64_t)&unk_1002EB1B8);
}

uint64_t sub_100279FFC()
{
  return sub_10000FD38(&qword_10037D590, type metadata accessor for Proto_Gpsd_InjectSvidBlocklist, (uint64_t)&unk_1002EB2B8);
}

uint64_t sub_10027A028()
{
  return sub_10000FD38(&qword_10037D838, type metadata accessor for Proto_Gpsd_InjectSvidBlocklist, (uint64_t)&unk_1002EB2F8);
}

uint64_t sub_10027A054()
{
  return sub_10000FD38(&qword_10037D840, type metadata accessor for Proto_Gpsd_InjectAssistancePosition, (uint64_t)&unk_1002EB3F8);
}

uint64_t sub_10027A080()
{
  return sub_10000FD38(&qword_10037D848, type metadata accessor for Proto_Gpsd_InjectAssistancePosition, (uint64_t)&unk_1002EB320);
}

uint64_t sub_10027A0AC()
{
  return sub_10000FD38(&qword_10037D598, type metadata accessor for Proto_Gpsd_InjectAssistancePosition, (uint64_t)&unk_1002EB420);
}

uint64_t sub_10027A0D8()
{
  return sub_10000FD38(&qword_10037D850, type metadata accessor for Proto_Gpsd_InjectAssistancePosition, (uint64_t)&unk_1002EB460);
}

uint64_t sub_10027A104()
{
  return sub_10000FD38(&qword_10037D858, type metadata accessor for Proto_Gpsd_InjectAssistanceTime, (uint64_t)&unk_1002EB560);
}

uint64_t sub_10027A130()
{
  return sub_10000FD38(&qword_10037D860, type metadata accessor for Proto_Gpsd_InjectAssistanceTime, (uint64_t)&unk_1002EB488);
}

uint64_t sub_10027A15C()
{
  return sub_10000FD38(&qword_10037D5A0, type metadata accessor for Proto_Gpsd_InjectAssistanceTime, (uint64_t)&unk_1002EB588);
}

uint64_t sub_10027A188()
{
  return sub_10000FD38(&qword_10037D868, type metadata accessor for Proto_Gpsd_InjectAssistanceTime, (uint64_t)&unk_1002EB5C8);
}

uint64_t sub_10027A1B4()
{
  return sub_10000FD38(&qword_10037D870, type metadata accessor for Proto_Gpsd_DeleteGnssData, (uint64_t)&unk_1002EB6C8);
}

uint64_t sub_10027A1E0()
{
  return sub_10000FD38(&qword_10037D878, type metadata accessor for Proto_Gpsd_DeleteGnssData, (uint64_t)&unk_1002EB5F0);
}

uint64_t sub_10027A20C()
{
  return sub_10000FD38(&qword_10037D5A8, type metadata accessor for Proto_Gpsd_DeleteGnssData, (uint64_t)&unk_1002EB6F0);
}

uint64_t sub_10027A238()
{
  return sub_10000FD38(&qword_10037D880, type metadata accessor for Proto_Gpsd_DeleteGnssData, (uint64_t)&unk_1002EB730);
}

uint64_t sub_10027A264()
{
  return sub_10000FD38(&qword_10037D888, type metadata accessor for Proto_Gpsd_SetNmeaHandler, (uint64_t)&unk_1002EB830);
}

uint64_t sub_10027A290()
{
  return sub_10000FD38(&qword_10037D890, type metadata accessor for Proto_Gpsd_SetNmeaHandler, (uint64_t)&unk_1002EB758);
}

uint64_t sub_10027A2BC()
{
  return sub_10000FD38(&qword_10037D5B0, type metadata accessor for Proto_Gpsd_SetNmeaHandler, (uint64_t)&unk_1002EB858);
}

uint64_t sub_10027A2E8()
{
  return sub_10000FD38(&qword_10037D898, type metadata accessor for Proto_Gpsd_SetNmeaHandler, (uint64_t)&unk_1002EB898);
}

uint64_t sub_10027A314()
{
  return sub_10000FD38(&qword_10037D8A0, type metadata accessor for Proto_Gpsd_SetAssistancePressure, (uint64_t)&unk_1002EB998);
}

uint64_t sub_10027A340()
{
  return sub_10000FD38(&qword_10037D8A8, type metadata accessor for Proto_Gpsd_SetAssistancePressure, (uint64_t)&unk_1002EB8C0);
}

uint64_t sub_10027A36C()
{
  return sub_10000FD38(&qword_10037D5B8, type metadata accessor for Proto_Gpsd_SetAssistancePressure, (uint64_t)&unk_1002EB9C0);
}

uint64_t sub_10027A398()
{
  return sub_10000FD38(&qword_10037D8B0, type metadata accessor for Proto_Gpsd_SetAssistancePressure, (uint64_t)&unk_1002EBA00);
}

uint64_t sub_10027A3C4()
{
  return sub_10000FD38(&qword_10037D8B8, type metadata accessor for Proto_Gpsd_SetAssistanceAccel, (uint64_t)&unk_1002EBB00);
}

uint64_t sub_10027A3F0()
{
  return sub_10000FD38(&qword_10037D8C0, type metadata accessor for Proto_Gpsd_SetAssistanceAccel, (uint64_t)&unk_1002EBA28);
}

uint64_t sub_10027A41C()
{
  return sub_10000FD38(&qword_10037D5C0, type metadata accessor for Proto_Gpsd_SetAssistanceAccel, (uint64_t)&unk_1002EBB28);
}

uint64_t sub_10027A448()
{
  return sub_10000FD38(&qword_10037D8C8, type metadata accessor for Proto_Gpsd_SetAssistanceAccel, (uint64_t)&unk_1002EBB68);
}

uint64_t sub_10027A474()
{
  return sub_10000FD38(&qword_10037D8D0, type metadata accessor for Proto_Gpsd_SetAssistanceGyro, (uint64_t)&unk_1002EBC68);
}

uint64_t sub_10027A4A0()
{
  return sub_10000FD38(&qword_10037D8D8, type metadata accessor for Proto_Gpsd_SetAssistanceGyro, (uint64_t)&unk_1002EBB90);
}

uint64_t sub_10027A4CC()
{
  return sub_10000FD38(&qword_10037D5C8, type metadata accessor for Proto_Gpsd_SetAssistanceGyro, (uint64_t)&unk_1002EBC90);
}

uint64_t sub_10027A4F8()
{
  return sub_10000FD38(&qword_10037D8E0, type metadata accessor for Proto_Gpsd_SetAssistanceGyro, (uint64_t)&unk_1002EBCD0);
}

uint64_t sub_10027A524()
{
  return sub_10000FD38(&qword_10037D8E8, type metadata accessor for Proto_Gpsd_SetAssistanceDem, (uint64_t)&unk_1002EBDD0);
}

uint64_t sub_10027A550()
{
  return sub_10000FD38(&qword_10037D8F0, type metadata accessor for Proto_Gpsd_SetAssistanceDem, (uint64_t)&unk_1002EBCF8);
}

uint64_t sub_10027A57C()
{
  return sub_10000FD38(&qword_10037D5D0, type metadata accessor for Proto_Gpsd_SetAssistanceDem, (uint64_t)&unk_1002EBDF8);
}

uint64_t sub_10027A5A8()
{
  return sub_10000FD38(&qword_10037D8F8, type metadata accessor for Proto_Gpsd_SetAssistanceDem, (uint64_t)&unk_1002EBE38);
}

uint64_t sub_10027A5D4()
{
  return sub_10000FD38(&qword_10037D900, type metadata accessor for Proto_Gpsd_SetAssistanceMapVector, (uint64_t)&unk_1002EBF38);
}

uint64_t sub_10027A600()
{
  return sub_10000FD38(&qword_10037D908, type metadata accessor for Proto_Gpsd_SetAssistanceMapVector, (uint64_t)&unk_1002EBE60);
}

uint64_t sub_10027A62C()
{
  return sub_10000FD38(&qword_10037D5D8, type metadata accessor for Proto_Gpsd_SetAssistanceMapVector, (uint64_t)&unk_1002EBF60);
}

uint64_t sub_10027A658()
{
  return sub_10000FD38(&qword_10037D910, type metadata accessor for Proto_Gpsd_SetAssistanceMapVector, (uint64_t)&unk_1002EBFA0);
}

uint64_t sub_10027A684()
{
  return sub_10000FD38(&qword_10037D918, type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext, (uint64_t)&unk_1002EC0A0);
}

uint64_t sub_10027A6B0()
{
  return sub_10000FD38(&qword_10037D920, type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext, (uint64_t)&unk_1002EBFC8);
}

uint64_t sub_10027A6DC()
{
  return sub_10000FD38(&qword_10037D5E0, type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext, (uint64_t)&unk_1002EC0C8);
}

uint64_t sub_10027A708()
{
  return sub_10000FD38(&qword_10037D928, type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext, (uint64_t)&unk_1002EC108);
}

uint64_t sub_10027A734()
{
  return sub_10000FD38(&qword_10037D930, type metadata accessor for Proto_Gpsd_SetAssistanceMountState, (uint64_t)&unk_1002EC208);
}

uint64_t sub_10027A760()
{
  return sub_10000FD38(&qword_10037D938, type metadata accessor for Proto_Gpsd_SetAssistanceMountState, (uint64_t)&unk_1002EC130);
}

uint64_t sub_10027A78C()
{
  return sub_10000FD38(&qword_10037D5E8, type metadata accessor for Proto_Gpsd_SetAssistanceMountState, (uint64_t)&unk_1002EC230);
}

uint64_t sub_10027A7B8()
{
  return sub_10000FD38(&qword_10037D940, type metadata accessor for Proto_Gpsd_SetAssistanceMountState, (uint64_t)&unk_1002EC270);
}

uint64_t sub_10027A7E4()
{
  return sub_10000FD38(&qword_10037D948, type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment, (uint64_t)&unk_1002EC370);
}

uint64_t sub_10027A810()
{
  return sub_10000FD38(&qword_10037D950, type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment, (uint64_t)&unk_1002EC298);
}

uint64_t sub_10027A83C()
{
  return sub_10000FD38(&qword_10037D5F0, type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment, (uint64_t)&unk_1002EC398);
}

uint64_t sub_10027A868()
{
  return sub_10000FD38(&qword_10037D958, type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment, (uint64_t)&unk_1002EC3D8);
}

uint64_t sub_10027A894()
{
  return sub_10000FD38(&qword_10037D960, type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint, (uint64_t)&unk_1002EC4D8);
}

uint64_t sub_10027A8C0()
{
  return sub_10000FD38(&qword_10037D968, type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint, (uint64_t)&unk_1002EC400);
}

uint64_t sub_10027A8EC()
{
  return sub_10000FD38(&qword_10037D5F8, type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint, (uint64_t)&unk_1002EC500);
}

uint64_t sub_10027A918()
{
  return sub_10000FD38(&qword_10037D970, type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint, (uint64_t)&unk_1002EC540);
}

uint64_t sub_10027A944()
{
  return sub_10000FD38(&qword_10037D978, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity, (uint64_t)&unk_1002EC640);
}

uint64_t sub_10027A970()
{
  return sub_10000FD38(&qword_10037D980, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity, (uint64_t)&unk_1002EC568);
}

uint64_t sub_10027A99C()
{
  return sub_10000FD38(&qword_10037D600, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity, (uint64_t)&unk_1002EC668);
}

uint64_t sub_10027A9C8()
{
  return sub_10000FD38(&qword_10037D988, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity, (uint64_t)&unk_1002EC6A8);
}

uint64_t sub_10027A9F4()
{
  return sub_10000FD38(&qword_10037D990, type metadata accessor for Proto_Gpsd_SetThermalRiskState, (uint64_t)&unk_1002EC7A8);
}

uint64_t sub_10027AA20()
{
  return sub_10000FD38(&qword_10037D998, type metadata accessor for Proto_Gpsd_SetThermalRiskState, (uint64_t)&unk_1002EC6D0);
}

uint64_t sub_10027AA4C()
{
  return sub_10000FD38(&qword_10037D608, type metadata accessor for Proto_Gpsd_SetThermalRiskState, (uint64_t)&unk_1002EC7D0);
}

uint64_t sub_10027AA78()
{
  return sub_10000FD38(&qword_10037D9A0, type metadata accessor for Proto_Gpsd_SetThermalRiskState, (uint64_t)&unk_1002EC810);
}

uint64_t sub_10027AAA4()
{
  return sub_10000FD38(&qword_10037D9A8, type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode, (uint64_t)&unk_1002EC910);
}

uint64_t sub_10027AAD0()
{
  return sub_10000FD38(&qword_10037D9B0, type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode, (uint64_t)&unk_1002EC838);
}

uint64_t sub_10027AAFC()
{
  return sub_10000FD38(&qword_10037D610, type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode, (uint64_t)&unk_1002EC938);
}

uint64_t sub_10027AB28()
{
  return sub_10000FD38(&qword_10037D9B8, type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode, (uint64_t)&unk_1002EC978);
}

uint64_t sub_10027AB54()
{
  return sub_10000FD38(&qword_10037D9C0, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations, (uint64_t)&unk_1002ECA78);
}

uint64_t sub_10027AB80()
{
  return sub_10000FD38(&qword_10037D9C8, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations, (uint64_t)&unk_1002EC9A0);
}

uint64_t sub_10027ABAC()
{
  return sub_10000FD38(&qword_10037D618, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations, (uint64_t)&unk_1002ECAA0);
}

uint64_t sub_10027ABD8()
{
  return sub_10000FD38(&qword_10037D9D0, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations, (uint64_t)&unk_1002ECAE0);
}

uint64_t sub_10027AC04()
{
  return sub_10000FD38(&qword_10037D9D8, type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable, (uint64_t)&unk_1002ECBE0);
}

uint64_t sub_10027AC30()
{
  return sub_10000FD38(&qword_10037D9E0, type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable, (uint64_t)&unk_1002ECB08);
}

uint64_t sub_10027AC5C()
{
  return sub_10000FD38(&qword_10037D620, type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable, (uint64_t)&unk_1002ECC08);
}

uint64_t sub_10027AC88()
{
  return sub_10000FD38(&qword_10037D9E8, type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable, (uint64_t)&unk_1002ECC48);
}

uint64_t sub_10027ACB4()
{
  return sub_10000FD38(&qword_10037D9F0, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling, (uint64_t)&unk_1002ECD48);
}

uint64_t sub_10027ACE0()
{
  return sub_10000FD38(&qword_10037D9F8, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling, (uint64_t)&unk_1002ECC70);
}

uint64_t sub_10027AD0C()
{
  return sub_10000FD38(&qword_10037D628, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling, (uint64_t)&unk_1002ECD70);
}

uint64_t sub_10027AD38()
{
  return sub_10000FD38(&qword_10037DA00, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling, (uint64_t)&unk_1002ECDB0);
}

uint64_t sub_10027AD64()
{
  return sub_10000FD38(&qword_10037DA08, type metadata accessor for Proto_Gpsd_TerminationImminent, (uint64_t)&unk_1002ECEB0);
}

uint64_t sub_10027AD90()
{
  return sub_10000FD38(&qword_10037DA10, type metadata accessor for Proto_Gpsd_TerminationImminent, (uint64_t)&unk_1002ECDD8);
}

uint64_t sub_10027ADBC()
{
  return sub_10000FD38(&qword_10037D630, type metadata accessor for Proto_Gpsd_TerminationImminent, (uint64_t)&unk_1002ECED8);
}

uint64_t sub_10027ADE8()
{
  return sub_10000FD38(&qword_10037DA18, type metadata accessor for Proto_Gpsd_TerminationImminent, (uint64_t)&unk_1002ECF18);
}

uint64_t sub_10027AE14()
{
  return sub_10000FD38(&qword_10037DA20, type metadata accessor for Proto_Gpsd_ExitMessage, (uint64_t)&unk_1002ED018);
}

uint64_t sub_10027AE40()
{
  return sub_10000FD38(&qword_10037DA28, type metadata accessor for Proto_Gpsd_ExitMessage, (uint64_t)&unk_1002ECF40);
}

uint64_t sub_10027AE6C()
{
  return sub_10000FD38(&qword_10037D638, type metadata accessor for Proto_Gpsd_ExitMessage, (uint64_t)&unk_1002ED040);
}

uint64_t sub_10027AE98()
{
  return sub_10000FD38(&qword_10037DA30, type metadata accessor for Proto_Gpsd_ExitMessage, (uint64_t)&unk_1002ED080);
}

uint64_t sub_10027AEC4()
{
  return sub_10000FD38(&qword_10037DA38, type metadata accessor for Proto_Gpsd_RecoveryStatistics, (uint64_t)&unk_1002ED180);
}

uint64_t sub_10027AEF0()
{
  return sub_10000FD38(&qword_10037DA40, type metadata accessor for Proto_Gpsd_RecoveryStatistics, (uint64_t)&unk_1002ED0A8);
}

uint64_t sub_10027AF1C()
{
  return sub_10000FD38(&qword_10037D648, type metadata accessor for Proto_Gpsd_RecoveryStatistics, (uint64_t)&unk_1002ED1A8);
}

uint64_t sub_10027AF48()
{
  return sub_10000FD38(&qword_10037DA48, type metadata accessor for Proto_Gpsd_RecoveryStatistics, (uint64_t)&unk_1002ED1E8);
}

uint64_t sub_10027AF74()
{
  return sub_10000FD38(&qword_10037DA50, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus, (uint64_t)&unk_1002ED2E8);
}

uint64_t sub_10027AFA0()
{
  return sub_10000FD38(&qword_10037DA58, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus, (uint64_t)&unk_1002ED210);
}

uint64_t sub_10027AFCC()
{
  return sub_10000FD38(&qword_10037D650, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus, (uint64_t)&unk_1002ED310);
}

uint64_t sub_10027AFF8()
{
  return sub_10000FD38(&qword_10037DA60, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus, (uint64_t)&unk_1002ED350);
}

uint64_t sub_10027B024()
{
  return sub_10000FD38(&qword_10037DA68, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint, (uint64_t)&unk_1002ED450);
}

uint64_t sub_10027B050()
{
  return sub_10000FD38(&qword_10037D640, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint, (uint64_t)&unk_1002ED378);
}

uint64_t sub_10027B07C()
{
  return sub_10000FD38(&qword_10037D658, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint, (uint64_t)&unk_1002ED478);
}

uint64_t sub_10027B0A8()
{
  return sub_10000FD38(&qword_10037DA70, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint, (uint64_t)&unk_1002ED4B8);
}

uint64_t sub_10027B0D4()
{
  return sub_10000FD38(&qword_10037DA78, type metadata accessor for Proto_Gpsd_LtlInfoRequest, (uint64_t)&unk_1002ED5B8);
}

uint64_t sub_10027B100()
{
  return sub_10000FD38(&qword_10037DA80, type metadata accessor for Proto_Gpsd_LtlInfoRequest, (uint64_t)&unk_1002ED4E0);
}

uint64_t sub_10027B12C()
{
  return sub_10000FD38(&qword_10037D660, type metadata accessor for Proto_Gpsd_LtlInfoRequest, (uint64_t)&unk_1002ED5E0);
}

uint64_t sub_10027B158()
{
  return sub_10000FD38(&qword_10037DA88, type metadata accessor for Proto_Gpsd_LtlInfoRequest, (uint64_t)&unk_1002ED620);
}

uint64_t sub_10027B184()
{
  return sub_10000FD38(&qword_10037DA90, type metadata accessor for Proto_Gpsd_LtlInfo, (uint64_t)&unk_1002ED720);
}

uint64_t sub_10027B1B0()
{
  return sub_10000FD38(&qword_10037DA98, type metadata accessor for Proto_Gpsd_LtlInfo, (uint64_t)&unk_1002ED648);
}

uint64_t sub_10027B1DC()
{
  return sub_10000FD38(&qword_10037D668, type metadata accessor for Proto_Gpsd_LtlInfo, (uint64_t)&unk_1002ED748);
}

uint64_t sub_10027B208()
{
  return sub_10000FD38(&qword_10037DAA0, type metadata accessor for Proto_Gpsd_LtlInfo, (uint64_t)&unk_1002ED788);
}

uint64_t sub_10027B234()
{
  return sub_10000FD38(&qword_10037DAA8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams, (uint64_t)&unk_1002ED888);
}

uint64_t sub_10027B260()
{
  return sub_10000FD38(&qword_10037DAB0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams, (uint64_t)&unk_1002ED7B0);
}

uint64_t sub_10027B28C()
{
  return sub_10000FD38(&qword_10037D670, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams, (uint64_t)&unk_1002ED8B0);
}

uint64_t sub_10027B2B8()
{
  return sub_10000FD38(&qword_10037DAB8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams, (uint64_t)&unk_1002ED8F0);
}

uint64_t sub_10027B2E4()
{
  return sub_10000FD38(&qword_10037DAC0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData, (uint64_t)&unk_1002ED9F0);
}

uint64_t sub_10027B310()
{
  return sub_10000FD38(&qword_10037DAC8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData, (uint64_t)&unk_1002ED918);
}

uint64_t sub_10027B33C()
{
  return sub_10000FD38(&qword_10037D678, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData, (uint64_t)&unk_1002EDA18);
}

uint64_t sub_10027B368()
{
  return sub_10000FD38(&qword_10037DAD0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData, (uint64_t)&unk_1002EDA58);
}

uint64_t sub_10027B394()
{
  return sub_10000FD38(&qword_10037DAD8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData, (uint64_t)&unk_1002EDB58);
}

uint64_t sub_10027B3C0()
{
  return sub_10000FD38(&qword_10037DAE0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData, (uint64_t)&unk_1002EDA80);
}

uint64_t sub_10027B3EC()
{
  return sub_10000FD38(&qword_10037D680, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData, (uint64_t)&unk_1002EDB80);
}

uint64_t sub_10027B418()
{
  return sub_10000FD38(&qword_10037DAE8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData, (uint64_t)&unk_1002EDBC0);
}

uint64_t sub_10027B444()
{
  return sub_10000FD38(&qword_10037DAF0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams, (uint64_t)&unk_1002EDCC0);
}

uint64_t sub_10027B470()
{
  return sub_10000FD38(&qword_10037DAF8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams, (uint64_t)&unk_1002EDBE8);
}

uint64_t sub_10027B49C()
{
  return sub_10000FD38(&qword_10037D688, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams, (uint64_t)&unk_1002EDCE8);
}

uint64_t sub_10027B4C8()
{
  return sub_10000FD38(&qword_10037DB00, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams, (uint64_t)&unk_1002EDD28);
}

uint64_t sub_10027B4F4()
{
  return sub_10000FD38(&qword_10037DB08, type metadata accessor for Proto_Gpsd_CntinStatusMessage, (uint64_t)&unk_1002EDE28);
}

uint64_t sub_10027B520()
{
  return sub_10000FD38(&qword_10037DB10, type metadata accessor for Proto_Gpsd_CntinStatusMessage, (uint64_t)&unk_1002EDD50);
}

uint64_t sub_10027B54C()
{
  return sub_10000FD38(&qword_10037D690, type metadata accessor for Proto_Gpsd_CntinStatusMessage, (uint64_t)&unk_1002EDE50);
}

uint64_t sub_10027B578()
{
  return sub_10000FD38(&qword_10037DB18, type metadata accessor for Proto_Gpsd_CntinStatusMessage, (uint64_t)&unk_1002EDE90);
}

uint64_t sub_10027B5A4()
{
  return sub_10000FD38(&qword_10037DB20, type metadata accessor for Proto_Gpsd_CntinClockControl, (uint64_t)&unk_1002EDF90);
}

uint64_t sub_10027B5D0()
{
  return sub_10000FD38(&qword_10037DB28, type metadata accessor for Proto_Gpsd_CntinClockControl, (uint64_t)&unk_1002EDEB8);
}

uint64_t sub_10027B5FC()
{
  return sub_10000FD38(&qword_10037D698, type metadata accessor for Proto_Gpsd_CntinClockControl, (uint64_t)&unk_1002EDFB8);
}

uint64_t sub_10027B628()
{
  return sub_10000FD38(&qword_10037DB30, type metadata accessor for Proto_Gpsd_CntinClockControl, (uint64_t)&unk_1002EDFF8);
}

uint64_t sub_10027B654()
{
  return sub_10000FD38(&qword_10037DB38, type metadata accessor for Proto_Gpsd_Exception, (uint64_t)&unk_1002EE0F8);
}

uint64_t sub_10027B680()
{
  return sub_10000FD38(&qword_10037DB40, type metadata accessor for Proto_Gpsd_Exception, (uint64_t)&unk_1002EE020);
}

uint64_t sub_10027B6AC()
{
  return sub_10000FD38(&qword_10037D6A0, type metadata accessor for Proto_Gpsd_Exception, (uint64_t)&unk_1002EE120);
}

uint64_t sub_10027B6D8()
{
  return sub_10000FD38(&qword_10037DB48, type metadata accessor for Proto_Gpsd_Exception, (uint64_t)&unk_1002EE160);
}

uint64_t sub_10027B704()
{
  return sub_10000FD38(&qword_10037DB50, type metadata accessor for Proto_Gpsd_AskBasebandReset, (uint64_t)&unk_1002EE260);
}

uint64_t sub_10027B730()
{
  return sub_10000FD38(&qword_10037DB58, type metadata accessor for Proto_Gpsd_AskBasebandReset, (uint64_t)&unk_1002EE188);
}

uint64_t sub_10027B75C()
{
  return sub_10000FD38(&qword_10037D6A8, type metadata accessor for Proto_Gpsd_AskBasebandReset, (uint64_t)&unk_1002EE288);
}

uint64_t sub_10027B788()
{
  return sub_10000FD38(&qword_10037DB60, type metadata accessor for Proto_Gpsd_AskBasebandReset, (uint64_t)&unk_1002EE2C8);
}

uint64_t sub_10027B7B4()
{
  return sub_10000FD38(&qword_10037DB68, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&unk_1002EE3C8);
}

uint64_t sub_10027B7E0()
{
  return sub_10000FD38(&qword_10036E450, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&unk_1002EE2F0);
}

uint64_t sub_10027B80C()
{
  return sub_10000FD38(&qword_10037D6B0, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&unk_1002EE3F0);
}

uint64_t sub_10027B838()
{
  return sub_10000FD38(&qword_10036E448, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&unk_1002EE430);
}

uint64_t sub_10027B864()
{
  return sub_10000FD38(&qword_10037DB70, type metadata accessor for Proto_Gpsd_StartContext, (uint64_t)&unk_1002EE530);
}

uint64_t sub_10027B890()
{
  return sub_10000FD38(&qword_10037DB78, type metadata accessor for Proto_Gpsd_StartContext, (uint64_t)&unk_1002EE458);
}

uint64_t sub_10027B8BC()
{
  return sub_10000FD38(&qword_10037D6B8, type metadata accessor for Proto_Gpsd_StartContext, (uint64_t)&unk_1002EE558);
}

uint64_t sub_10027B8E8()
{
  return sub_10000FD38(&qword_10037DB80, type metadata accessor for Proto_Gpsd_StartContext, (uint64_t)&unk_1002EE598);
}

uint64_t storeEnumTagSinglePayload for Proto_Gpsd_SuplInitDecodeResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10027B960 + 4 * byte_1002E9FF8[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10027B994 + 4 * byte_1002E9FF3[v4]))();
}

uint64_t sub_10027B994(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027B99C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10027B9A4);
  return result;
}

uint64_t sub_10027B9B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10027B9B8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10027B9BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027B9C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Proto_Gpsd_SuplInitDecodeResult()
{
  return &type metadata for Proto_Gpsd_SuplInitDecodeResult;
}

uint64_t storeEnumTagSinglePayload for Proto_Gpsd_CompressionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10027BA2C + 4 * byte_1002EA002[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10027BA60 + 4 * byte_1002E9FFD[v4]))();
}

uint64_t sub_10027BA60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027BA68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10027BA70);
  return result;
}

uint64_t sub_10027BA7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10027BA84);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10027BA88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027BA90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Proto_Gpsd_CompressionType()
{
  return &type metadata for Proto_Gpsd_CompressionType;
}

uint64_t storeEnumTagSinglePayload for Proto_Gpsd_LtlInfoType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10027BAF8 + 4 * byte_1002EA00C[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10027BB2C + 4 * byte_1002EA007[v4]))();
}

uint64_t sub_10027BB2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027BB34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10027BB3CLL);
  return result;
}

uint64_t sub_10027BB48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10027BB50);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10027BB54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027BB5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Proto_Gpsd_LtlInfoType()
{
  return &type metadata for Proto_Gpsd_LtlInfoType;
}

uint64_t storeEnumTagSinglePayload for Proto_Gpsd_CntinStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10027BBC4 + 4 * byte_1002EA016[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10027BBF8 + 4 * byte_1002EA011[v4]))();
}

uint64_t sub_10027BBF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027BC00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10027BC08);
  return result;
}

uint64_t sub_10027BC14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10027BC1CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10027BC20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027BC28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Proto_Gpsd_CntinStatus()
{
  return &type metadata for Proto_Gpsd_CntinStatus;
}

uint64_t sub_10027BC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027BC50);
}

uint64_t sub_10027BC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027BC60);
}

uint64_t getEnumTagSinglePayload for Proto_Gpsd_Request.TypeEnum(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xC4)
    goto LABEL_17;
  if (a2 + 60 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 60) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 60;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 60;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 60;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x3D;
  v8 = v6 - 61;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Proto_Gpsd_Request.TypeEnum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 60 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 60) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xC4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xC3)
    return ((uint64_t (*)(void))((char *)&loc_10027BD40 + 4 * byte_1002EA020[v4]))();
  *a1 = a2 + 60;
  return ((uint64_t (*)(void))((char *)sub_10027BD74 + 4 * byte_1002EA01B[v4]))();
}

uint64_t sub_10027BD74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027BD7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10027BD84);
  return result;
}

uint64_t sub_10027BD90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10027BD98);
  *(_BYTE *)result = a2 + 60;
  return result;
}

uint64_t sub_10027BD9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027BDA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Proto_Gpsd_Request.TypeEnum()
{
  return &type metadata for Proto_Gpsd_Request.TypeEnum;
}

uint64_t sub_10027BDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027BDCC);
}

uint64_t sub_10027BDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 0xAu)
    v9 = 10;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  v10 = v9 - 10;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 0xAu)
    return v10;
  else
    return 0;
}

uint64_t sub_10027BE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027BE5C);
}

uint64_t sub_10027BE5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 10;
  return result;
}

uint64_t sub_10027BED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100209860(a1, a2, a3, (uint64_t)&unk_1002EE688, (uint64_t)&unk_1002EE6A0, (uint64_t)&unk_1002EE6B8);
}

uint64_t sub_10027BEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027BEFC);
}

uint64_t sub_10027BF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027BF0C);
}

uint64_t storeEnumTagSinglePayload for Proto_Gpsd_Indication.TypeEnum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 23 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 23) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE8)
    return ((uint64_t (*)(void))((char *)&loc_10027BF5C + 4 * byte_1002EA02A[v4]))();
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_10027BF90 + 4 * byte_1002EA025[v4]))();
}

uint64_t sub_10027BF90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027BF98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10027BFA0);
  return result;
}

uint64_t sub_10027BFAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10027BFB4);
  *(_BYTE *)result = a2 + 23;
  return result;
}

uint64_t sub_10027BFB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10027BFC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Proto_Gpsd_Indication.TypeEnum()
{
  return &type metadata for Proto_Gpsd_Indication.TypeEnum;
}

_QWORD *sub_10027BFDC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_10027C0AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10027C150(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10027C1FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10027C2A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10027C344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027C350);
}

uint64_t sub_10027C350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10027C3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027C3F4);
}

uint64_t sub_10027C3F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  return result;
}

uint64_t sub_10027C46C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1002EE6A0;
    v4[2] = &unk_1002EE6A0;
    v4[3] = &unk_1002EE708;
    v4[4] = &unk_1002EE708;
    v4[5] = &unk_1002EE708;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10027C4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027C4F8);
}

uint64_t sub_10027C4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027C508);
}

uint64_t sub_10027C50C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1002EE708;
    v4[2] = &unk_1002EE708;
    v4[3] = &unk_1002EE708;
    v4[4] = &unk_1002EE708;
    v4[5] = &unk_1002EE708;
    v4[6] = &unk_1002EE708;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_10027C588(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      sub_100017EF8(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_10027C658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_100017EF8(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10027C6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      v12 = *v9;
      sub_100017EF8(v12, v10);
      v13 = *v8;
      v14 = v8[1];
      *v8 = v12;
      v8[1] = v10;
      sub_100017F3C(v13, v14);
      goto LABEL_8;
    }
    sub_1001DED84((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v11 = *v9;
  sub_100017EF8(v11, v10);
  *v8 = v11;
  v8[1] = v10;
LABEL_8:
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10027C7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_10027C840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      v12 = *v8;
      *v8 = *v9;
      v8[1] = v11;
      sub_100017F3C(v12, v10);
      goto LABEL_6;
    }
    sub_1001DED84((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
LABEL_6:
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10027C8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027C900);
}

uint64_t sub_10027C900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 3u)
    v9 = 3;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  v10 = v9 - 3;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 3u)
    return v10;
  else
    return 0;
}

uint64_t sub_10027C984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027C990);
}

uint64_t sub_10027C990(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 3;
  return result;
}

uint64_t sub_10027CA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)&unk_1002EE760, (uint64_t)&unk_1002EE778);
}

uint64_t sub_10027CA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027CA2C);
}

uint64_t sub_10027CA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10)
    return 0;
  else
    return v11;
}

uint64_t sub_10027CAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027CAC0);
}

uint64_t sub_10027CAC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t sub_10027CB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148CFC(a1, a2, a3, (uint64_t)&unk_1002EE760);
}

uint64_t sub_10027CB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027CB74);
}

uint64_t sub_10027CB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027CB84);
}

char *sub_10027CB8C(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for Proto_Gnss_Position(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_1000039AC(&qword_10037C040);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v12[8];
      v26 = &v10[v25];
      v27 = &v11[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      v28 = v12[9];
      v29 = &v10[v28];
      v30 = &v11[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      v31 = v12[10];
      v32 = &v10[v31];
      v33 = &v11[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v12[11];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v12[12];
      v38 = &v10[v37];
      v39 = &v11[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v12[13];
      v41 = &v10[v40];
      v42 = &v11[v40];
      *(_DWORD *)v41 = *(_DWORD *)v42;
      v41[4] = v42[4];
      v10[v12[14]] = v11[v12[14]];
      v43 = v12[15];
      v44 = &v10[v43];
      v45 = &v11[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      v10[v12[16]] = v11[v12[16]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v46 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v46] = a2[v46];
    v47 = a3[8];
    v48 = &a1[v47];
    v49 = &a2[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = v49[8];
  }
  return a1;
}

uint64_t sub_10027CE04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Proto_Gnss_Position(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  return result;
}

uint64_t sub_10027CEA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for Proto_Gnss_Position(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10037C040);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v11[8];
    v24 = &v9[v23];
    v25 = &v10[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    v26 = v11[9];
    v27 = &v9[v26];
    v28 = &v10[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = v11[10];
    v30 = &v9[v29];
    v31 = &v10[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v11[11];
    v33 = &v9[v32];
    v34 = &v10[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = v11[12];
    v36 = &v9[v35];
    v37 = &v10[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v11[13];
    v39 = &v9[v38];
    v40 = &v10[v38];
    *(_DWORD *)v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    v9[v11[14]] = v10[v11[14]];
    v41 = v11[15];
    v42 = &v9[v41];
    v43 = &v10[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v9[v11[16]] = v10[v11[16]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v44 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v44) = *(_BYTE *)(a2 + v44);
  v45 = a3[8];
  v46 = a1 + v45;
  v47 = a2 + v45;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  return a1;
}

uint64_t sub_10027D0F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int *v12;
  uint64_t (*v13)(_BYTE *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v87 = a3;
  v9 = a3[5];
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  v12 = (int *)type metadata accessor for Proto_Gnss_Position(0);
  v86 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v86 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v54 = v12[5];
      v55 = &v10[v54];
      v56 = &v11[v54];
      v57 = *(_QWORD *)v56;
      v55[8] = v56[8];
      *(_QWORD *)v55 = v57;
      v58 = v12[6];
      v59 = &v10[v58];
      v60 = &v11[v58];
      LOBYTE(v57) = v60[8];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      v59[8] = v57;
      v61 = v12[7];
      v62 = &v10[v61];
      v63 = &v11[v61];
      LOBYTE(v57) = v63[8];
      *(_QWORD *)v62 = *(_QWORD *)v63;
      v62[8] = v57;
      v64 = v12[8];
      v65 = &v10[v64];
      v66 = &v11[v64];
      LOBYTE(v57) = v66[8];
      *(_QWORD *)v65 = *(_QWORD *)v66;
      v65[8] = v57;
      v67 = v12[9];
      v68 = &v10[v67];
      v69 = &v11[v67];
      LOBYTE(v57) = v69[8];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v57;
      v70 = v12[10];
      v71 = &v10[v70];
      v72 = &v11[v70];
      LOBYTE(v57) = v72[8];
      *(_QWORD *)v71 = *(_QWORD *)v72;
      v71[8] = v57;
      v73 = v12[11];
      v74 = &v10[v73];
      v75 = &v11[v73];
      LOBYTE(v57) = v75[8];
      *(_QWORD *)v74 = *(_QWORD *)v75;
      v74[8] = v57;
      v76 = v12[12];
      v77 = &v10[v76];
      v78 = &v11[v76];
      LOBYTE(v57) = v78[8];
      *(_QWORD *)v77 = *(_QWORD *)v78;
      v77[8] = v57;
      v79 = v12[13];
      v80 = &v10[v79];
      v81 = &v11[v79];
      LOBYTE(v57) = v81[4];
      *(_DWORD *)v80 = *(_DWORD *)v81;
      v80[4] = v57;
      v10[v12[14]] = v11[v12[14]];
      v82 = v12[15];
      v83 = &v10[v82];
      v84 = &v11[v82];
      v85 = *(_QWORD *)v84;
      v83[8] = v84[8];
      *(_QWORD *)v83 = v85;
      v10[v12[16]] = v11[v12[16]];
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for Proto_Gnss_Position);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v48 = sub_1000039AC(&qword_10037C040);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  v19 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)v17 = v19;
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  LOBYTE(v19) = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v19;
  v23 = v12[7];
  v24 = &v10[v23];
  v25 = &v11[v23];
  LOBYTE(v19) = v25[8];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v19;
  v26 = v12[8];
  v27 = &v10[v26];
  v28 = &v11[v26];
  LOBYTE(v19) = v28[8];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v19;
  v29 = v12[9];
  v30 = &v10[v29];
  v31 = &v11[v29];
  LOBYTE(v19) = v31[8];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v19;
  v32 = v12[10];
  v33 = &v10[v32];
  v34 = &v11[v32];
  LOBYTE(v19) = v34[8];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v33[8] = v19;
  v35 = v12[11];
  v36 = &v10[v35];
  v37 = &v11[v35];
  LOBYTE(v19) = v37[8];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v19;
  v38 = v12[12];
  v39 = &v10[v38];
  v40 = &v11[v38];
  LOBYTE(v19) = v40[8];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v39[8] = v19;
  v41 = v12[13];
  v42 = &v10[v41];
  v43 = &v11[v41];
  LOBYTE(v19) = v43[4];
  *(_DWORD *)v42 = *(_DWORD *)v43;
  v42[4] = v19;
  v10[v12[14]] = v11[v12[14]];
  v44 = v12[15];
  v45 = &v10[v44];
  v46 = &v11[v44];
  v47 = *(_QWORD *)v46;
  v45[8] = v46[8];
  *(_QWORD *)v45 = v47;
  v10[v12[16]] = v11[v12[16]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v86 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(_BYTE *)(a1 + v87[6]) = *(_BYTE *)(a2 + v87[6]);
  *(_BYTE *)(a1 + v87[7]) = *(_BYTE *)(a2 + v87[7]);
  v49 = v87[8];
  v50 = a1 + v49;
  v51 = (uint64_t *)(a2 + v49);
  v52 = *v51;
  *(_BYTE *)(v50 + 8) = *((_BYTE *)v51 + 8);
  *(_QWORD *)v50 = v52;
  return a1;
}

uint64_t sub_10027D4CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for Proto_Gnss_Position(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1000039AC(&qword_10037C040);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v11[8];
    v24 = &v9[v23];
    v25 = &v10[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    v26 = v11[9];
    v27 = &v9[v26];
    v28 = &v10[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = v11[10];
    v30 = &v9[v29];
    v31 = &v10[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v11[11];
    v33 = &v9[v32];
    v34 = &v10[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = v11[12];
    v36 = &v9[v35];
    v37 = &v10[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v11[13];
    v39 = &v9[v38];
    v40 = &v10[v38];
    *(_DWORD *)v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    v9[v11[14]] = v10[v11[14]];
    v41 = v11[15];
    v42 = &v9[v41];
    v43 = &v10[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v9[v11[16]] = v10[v11[16]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v44 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v44) = *(_BYTE *)(a2 + v44);
  v45 = a3[8];
  v46 = a1 + v45;
  v47 = a2 + v45;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  return a1;
}

uint64_t sub_10027D718(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int *v12;
  uint64_t (*v13)(_BYTE *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  int *v83;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v83 = a3;
  v9 = a3[5];
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  v12 = (int *)type metadata accessor for Proto_Gnss_Position(0);
  v82 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v82 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v52 = v12[5];
      v53 = &v10[v52];
      v54 = &v11[v52];
      *(_QWORD *)v53 = *(_QWORD *)v54;
      v53[8] = v54[8];
      v55 = v12[6];
      v56 = &v10[v55];
      v57 = &v11[v55];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = v57[8];
      v58 = v12[7];
      v59 = &v10[v58];
      v60 = &v11[v58];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      v59[8] = v60[8];
      v61 = v12[8];
      v62 = &v10[v61];
      v63 = &v11[v61];
      *(_QWORD *)v62 = *(_QWORD *)v63;
      v62[8] = v63[8];
      v64 = v12[9];
      v65 = &v10[v64];
      v66 = &v11[v64];
      *(_QWORD *)v65 = *(_QWORD *)v66;
      v65[8] = v66[8];
      v67 = v12[10];
      v68 = &v10[v67];
      v69 = &v11[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v69[8];
      v70 = v12[11];
      v71 = &v10[v70];
      v72 = &v11[v70];
      *(_QWORD *)v71 = *(_QWORD *)v72;
      v71[8] = v72[8];
      v73 = v12[12];
      v74 = &v10[v73];
      v75 = &v11[v73];
      *(_QWORD *)v74 = *(_QWORD *)v75;
      v74[8] = v75[8];
      v76 = v12[13];
      v77 = &v10[v76];
      v78 = &v11[v76];
      *(_DWORD *)v77 = *(_DWORD *)v78;
      v77[4] = v78[4];
      v10[v12[14]] = v11[v12[14]];
      v79 = v12[15];
      v80 = &v10[v79];
      v81 = &v11[v79];
      *(_QWORD *)v80 = *(_QWORD *)v81;
      v80[8] = v81[8];
      v10[v12[16]] = v11[v12[16]];
      goto LABEL_7;
    }
    sub_100004030((uint64_t)v10, type metadata accessor for Proto_Gnss_Position);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v46 = sub_1000039AC(&qword_10037C040);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = v12[6];
  v20 = &v10[v19];
  v21 = &v11[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = v12[7];
  v23 = &v10[v22];
  v24 = &v11[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = v12[8];
  v26 = &v10[v25];
  v27 = &v11[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  v28 = v12[9];
  v29 = &v10[v28];
  v30 = &v11[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v30[8];
  v31 = v12[10];
  v32 = &v10[v31];
  v33 = &v11[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  v34 = v12[11];
  v35 = &v10[v34];
  v36 = &v11[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v35[8] = v36[8];
  v37 = v12[12];
  v38 = &v10[v37];
  v39 = &v11[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v38[8] = v39[8];
  v40 = v12[13];
  v41 = &v10[v40];
  v42 = &v11[v40];
  *(_DWORD *)v41 = *(_DWORD *)v42;
  v41[4] = v42[4];
  v10[v12[14]] = v11[v12[14]];
  v43 = v12[15];
  v44 = &v10[v43];
  v45 = &v11[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v44[8] = v45[8];
  v10[v12[16]] = v11[v12[16]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v82 + 56))(v10, 0, 1, v12);
LABEL_7:
  v47 = v83[7];
  *(_BYTE *)(a1 + v83[6]) = *(_BYTE *)(a2 + v83[6]);
  *(_BYTE *)(a1 + v47) = *(_BYTE *)(a2 + v47);
  v48 = v83[8];
  v49 = a1 + v48;
  v50 = a2 + v48;
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  return a1;
}

uint64_t sub_10027DAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027DAFC);
}

uint64_t sub_10027DAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  int v15;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000039AC(&qword_10037C040);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 2)
    v15 = ((v14 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v15 = -2;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t sub_10027DBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027DBD0);
}

uint64_t sub_10027DBD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000039AC(&qword_10037C040);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  return result;
}

void sub_10027DC78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_10037CAB0, type metadata accessor for Proto_Gnss_Position);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_1002EE7F8;
      v6[3] = &unk_1002EE708;
      v6[4] = &unk_1002EE6A0;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t sub_10027DD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027DD34);
}

uint64_t sub_10027DD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027DD44);
}

uint64_t sub_10027DD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100209860(a1, a2, a3, (uint64_t)&unk_1002EE6A0, (uint64_t)&unk_1002EE6A0, (uint64_t)&unk_1002EE6A0);
}

uint64_t sub_10027DD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027DD7C);
}

uint64_t sub_10027DD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027DD8C);
}

uint64_t sub_10027DD90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148CFC(a1, a2, a3, (uint64_t)&unk_1002EE6A0);
}

uint64_t *sub_10027DD9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
  }
  return a1;
}

uint64_t sub_10027DE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t sub_10027DEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  return a1;
}

uint64_t sub_10027DF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t sub_10027DF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t sub_10027DFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027DFF0);
}

uint64_t sub_10027DFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027E000);
}

uint64_t sub_10027E004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027E010);
}

uint64_t sub_10027E014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027E020);
}

uint64_t sub_10027E024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027E030);
}

uint64_t sub_10027E034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027E040);
}

uint64_t *sub_10027E044(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t *sub_10027E0DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *sub_10027E14C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *sub_10027E1C0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_10027E21C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10027E288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027E294);
}

uint64_t sub_10027E298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027E2A4);
}

uint64_t sub_10027E2A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10027E320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027E32C);
}

uint64_t sub_10027E330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027E33C);
}

_QWORD *sub_10027E340(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v32 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v32);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
    v18 = a3[9];
    v19 = a3[10];
    v20 = (char *)a1 + v18;
    v21 = (char *)a2 + v18;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    v22 = (char *)a1 + v19;
    v23 = (char *)a2 + v19;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = a3[11];
    v25 = a3[12];
    v26 = (char *)a1 + v24;
    v27 = (char *)a2 + v24;
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    v28 = (char *)a1 + v25;
    v29 = (char *)a2 + v25;
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    v30 = a3[14];
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *((_BYTE *)a1 + v30) = *((_BYTE *)a2 + v30);
    v31 = a3[16];
    *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    *((_BYTE *)a1 + v31) = *((_BYTE *)a2 + v31);
    *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  }
  return a1;
}

uint64_t sub_10027E4B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v17 = a3[9];
  v18 = a3[10];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = a3[11];
  v24 = a3[12];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v30 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_10027E5F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v10;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  *(_BYTE *)(v18 + 8) = *((_BYTE *)v19 + 8);
  *(_QWORD *)v18 = v20;
  v21 = a3[10];
  v22 = a1 + v21;
  v23 = a2 + v21;
  LOBYTE(v20) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = v20;
  v24 = a3[11];
  v25 = a1 + v24;
  v26 = a2 + v24;
  LOBYTE(v20) = *(_BYTE *)(v26 + 8);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = v20;
  v27 = a3[12];
  v28 = a1 + v27;
  v29 = a2 + v27;
  LOBYTE(v20) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = v20;
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_10027E750(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v17 = a3[9];
  v18 = a3[10];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = a3[11];
  v24 = a3[12];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v30 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_10027E894(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v17 = a3[9];
  v18 = a3[10];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = a3[11];
  v24 = a3[12];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v30 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_10027E9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027E9E4);
}

uint64_t sub_10027E9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10027EA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027EA88);
}

uint64_t sub_10027EA88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 32)) = a2 + 2;
  return result;
}

uint64_t sub_10027EB00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[14];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1002EE6A0;
    v4[2] = &unk_1002EE6A0;
    v4[3] = &unk_1002EE6A0;
    v4[4] = &unk_1002EE708;
    v4[5] = &unk_1002EE6A0;
    v4[6] = &unk_1002EE6A0;
    v4[7] = &unk_1002EE6A0;
    v4[8] = &unk_1002EE6A0;
    v4[9] = &unk_1002EE708;
    v4[10] = &unk_1002EE708;
    v4[11] = &unk_1002EE708;
    v4[12] = &unk_1002EE708;
    v4[13] = &unk_1002EE708;
    swift_initStructMetadata(a1, 256, 14, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_10027EB90(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    v12 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  }
  return a1;
}

uint64_t sub_10027EC44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t sub_10027ECCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10027ED5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t sub_10027EDE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t sub_10027EE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027EE78);
}

uint64_t sub_10027EE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 5u)
    v9 = 5;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  v10 = v9 - 5;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 5u)
    return v10;
  else
    return 0;
}

uint64_t sub_10027EEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027EF08);
}

uint64_t sub_10027EF08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 5;
  return result;
}

uint64_t sub_10027EF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001484E4(a1, a2, a3, (uint64_t)&unk_1002EE6A0, (uint64_t)&unk_1002EE6B8, (uint64_t)&unk_1002EE960, (uint64_t)&unk_1002EE978);
}

uint64_t sub_10027EFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027EFB0);
}

uint64_t sub_10027EFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 4u)
    v9 = 4;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  v10 = v9 - 4;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 4u)
    return v10;
  else
    return 0;
}

uint64_t sub_10027F034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027F040);
}

uint64_t sub_10027F040(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 4;
  return result;
}

uint64_t sub_10027F0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)&unk_1002EE6A0, (uint64_t)&unk_1002EE7F8);
}

uint64_t sub_10027F0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027F0D8);
}

uint64_t sub_10027F0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 8u)
    v9 = 8;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 8;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 8u)
    return v10;
  else
    return 0;
}

uint64_t sub_10027F15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027F168);
}

uint64_t sub_10027F168(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 8;
  return result;
}

uint64_t sub_10027F1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148CFC(a1, a2, a3, (uint64_t)&unk_1002EE9F0);
}

uint64_t sub_10027F1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027F1F8);
}

uint64_t sub_10027F1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027F208);
}

uint64_t sub_10027F20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001484E4(a1, a2, a3, (uint64_t)&unk_1002EE6A0, (uint64_t)&unk_1002EE6A0, (uint64_t)&unk_1002EE6A0, (uint64_t)&unk_1002EE6A0);
}

uint64_t sub_10027F224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027F230);
}

uint64_t sub_10027F234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027F240);
}

uint64_t sub_10027F244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027F250);
}

uint64_t sub_10027F254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027F260);
}

uint64_t sub_10027F264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)&unk_1002EE6A0, (uint64_t)&unk_1002EEA90);
}

_QWORD *sub_10027F278(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_DWORD *)v9 = *(_DWORD *)v10;
    v9[4] = v10[4];
  }
  return a1;
}

uint64_t sub_10027F318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t sub_10027F38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  return a1;
}

uint64_t sub_10027F404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t sub_10027F478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t sub_10027F4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027F4F8);
}

uint64_t sub_10027F4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027F508);
}

uint64_t sub_10027F50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)&unk_1002EE708, (uint64_t)&unk_1002EEA90);
}

uint64_t sub_10027F520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027F52C);
}

uint64_t sub_10027F530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027F53C);
}

uint64_t sub_10027F540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)&unk_1002EEA90, (uint64_t)&unk_1002EEA90);
}

uint64_t sub_10027F550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027F55C);
}

uint64_t sub_10027F560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027F56C);
}

uint64_t sub_10027F570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000780DC(a1, a2, a3, (uint64_t)&unk_1002EE708, (uint64_t)&unk_1002EE708);
}

uint64_t sub_10027F580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027F58C);
}

uint64_t sub_10027F590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027F59C);
}

uint64_t sub_10027F5A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148CFC(a1, a2, a3, (uint64_t)&unk_1002EE708);
}

uint64_t sub_10027F5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027F5CC);
}

uint64_t sub_10027F5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027F5DC);
}

uint64_t sub_10027F5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148CFC(a1, a2, a3, (uint64_t)&unk_1002EEB80);
}

uint64_t *sub_10027F5EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_10027F680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_10027F6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_10027F730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_10027F7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_10027F818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027F824);
}

uint64_t sub_10027F828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027F834);
}

uint64_t *sub_10027F838(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_1000039AC(&qword_10037D530);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v14[v16[5]] = v15[v16[5]];
      v19 = v16[6];
      v20 = &v14[v19];
      v21 = &v15[v19];
      v20[4] = v21[4];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t sub_10027F9A0(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(char *, uint64_t);

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage(0);
  v9 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(char *, uint64_t))v9)(v6, v5);
  return result;
}

uint64_t *sub_10027FA50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_1000039AC(&qword_10037D530);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    v13[v15[5]] = v14[v15[5]];
    v18 = v15[6];
    v19 = &v13[v18];
    v20 = &v14[v18];
    v19[4] = v20[4];
    *(_DWORD *)v19 = *(_DWORD *)v20;
    v13[v15[7]] = v14[v15[7]];
    v13[v15[8]] = v14[v15[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t *sub_10027FB90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, int *);
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 24);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(char *, uint64_t, int *))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v13(v15, v16, v11);
      v15[v17[5]] = v16[v17[5]];
      v27 = v17[6];
      v28 = &v15[v27];
      v29 = &v16[v27];
      v30 = v29[4];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v30;
      v15[v17[7]] = v16[v17[7]];
      v15[v17[8]] = v16[v17[8]];
      return a1;
    }
    sub_100004030((uint64_t)v15, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v25 = sub_1000039AC(&qword_10037D530);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
  v15[v17[5]] = v16[v17[5]];
  v21 = v17[6];
  v22 = &v15[v21];
  v23 = &v16[v21];
  v24 = v23[4];
  *(_DWORD *)v22 = *(_DWORD *)v23;
  v22[4] = v24;
  v15[v17[7]] = v16[v17[7]];
  v15[v17[8]] = v16[v17[8]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

_QWORD *sub_10027FD64(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000039AC(&qword_10037D530);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v12[v14[5]] = v13[v14[5]];
    v17 = v14[6];
    v18 = &v12[v17];
    v19 = &v13[v17];
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v12[v14[7]] = v13[v14[7]];
    v12[v14[8]] = v13[v14[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *sub_10027FE9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, int *);
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  char *v27;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v12(v14, v15, v10);
      v14[v16[5]] = v15[v16[5]];
      v25 = v16[6];
      v26 = &v14[v25];
      v27 = &v15[v25];
      v26[4] = v27[4];
      *(_DWORD *)v26 = *(_DWORD *)v27;
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      return a1;
    }
    sub_100004030((uint64_t)v14, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v23 = sub_1000039AC(&qword_10037D530);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  v14[v16[5]] = v15[v16[5]];
  v20 = v16[6];
  v21 = &v14[v20];
  v22 = &v15[v20];
  v21[4] = v22[4];
  *(_DWORD *)v21 = *(_DWORD *)v22;
  v14[v16[7]] = v15[v16[7]];
  v14[v16[8]] = v15[v16[8]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_100280068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100280074);
}

uint64_t sub_100280074(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_1000039AC(&qword_10037D530);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_100280118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100280124);
}

char *sub_100280124(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_1000039AC(&qword_10037D530);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_1002801C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, (unint64_t *)&unk_10037EB38, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

_QWORD *sub_100280268(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_DWORD *)v9 = *(_DWORD *)v10;
    v9[4] = v10[4];
    v11 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  }
  return a1;
}

uint64_t sub_10028031C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  v10 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t sub_1002803A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100280434(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  v10 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t sub_1002804BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  v10 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t sub_100280544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100280550);
}

uint64_t sub_100280554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100280560);
}

uint64_t sub_100280564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001484E4(a1, a2, a3, (uint64_t)&unk_1002EE708, (uint64_t)&unk_1002EEA90, (uint64_t)&unk_1002EE708, (uint64_t)&unk_1002EE708);
}

uint64_t *sub_100280580(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (char *)a2 + v9;
    v13[4] = v14[4];
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v15 = a3[7];
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v18);
  }
  return a1;
}

uint64_t sub_100280648(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t sub_1002806A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a3[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v17);
  return a1;
}

uint64_t sub_10028073C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = (int *)(a2 + v12);
  v15 = *v14;
  *(_BYTE *)(v13 + 4) = *((_BYTE *)v14 + 4);
  *(_DWORD *)v13 = v15;
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_100280800(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100280880(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = (_QWORD *)(a1 + v14);
  v18 = (uint64_t *)(a2 + v14);
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_100280920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10028092C);
}

uint64_t sub_100280930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1002809BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002809C8);
}

uint64_t sub_1002809CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_100280A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100209860(a1, a2, a3, (uint64_t)&unk_1002EEB80, (uint64_t)&unk_1002EEA90, (uint64_t)&unk_1002EEB80);
}

uint64_t sub_100280A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100280A6C);
}

uint64_t sub_100280A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 5u)
    v9 = 5;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 5;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 5u)
    return v10;
  else
    return 0;
}

uint64_t sub_100280AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100280AFC);
}

uint64_t sub_100280AFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 5;
  return result;
}

uint64_t sub_100280B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148CFC(a1, a2, a3, (uint64_t)&unk_1002EE960);
}

uint64_t sub_100280B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100280B8C);
}

uint64_t sub_100280B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100280B9C);
}

uint64_t *sub_100280BA0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    a1[1] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)v7 + v14;
    v17 = (char *)a2 + v14;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    v18 = (char *)v7 + v15;
    v19 = (char *)a2 + v15;
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
  }
  return v7;
}

uint64_t *sub_100280C94(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = a3[8];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v15[4] = v16[4];
  v17 = (char *)a1 + v14;
  v18 = (char *)a2 + v14;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  return a1;
}

uint64_t *sub_100280D58(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = v16[4];
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v15[4] = v17;
  v18 = a3[8];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = v20[4];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  v19[4] = v21;
  return a1;
}

_OWORD *sub_100280E24(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  v11 = a3[8];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v12[4] = v13[4];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  return a1;
}

uint64_t *sub_100280EC4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = a3[8];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  return a1;
}

uint64_t sub_100280F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100280F88);
}

uint64_t sub_100280F88(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_100281004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100281010);
}

char *sub_100281010(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100281084(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1002EEA90;
    v4[4] = &unk_1002EEA90;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100281108(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)v7 + v13;
    v16 = (char *)a2 + v13;
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    v17 = (char *)v7 + v14;
    v18 = (char *)a2 + v14;
    *(_DWORD *)v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
  }
  return v7;
}

uint64_t *sub_1002811E4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  return a1;
}

uint64_t *sub_100281298(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = v14[4];
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v13[4] = v15;
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v17[4] = v19;
  return a1;
}

_QWORD *sub_10028134C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v12[4] = v13[4];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  return a1;
}

uint64_t *sub_1002813EC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v13[4] = v14[4];
  v15 = (char *)a1 + v12;
  v16 = (char *)a2 + v12;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v15[4] = v16[4];
  return a1;
}

uint64_t sub_100281494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002814A0);
}

uint64_t sub_1002814A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002814B0);
}

uint64_t sub_1002814B4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1002EEA90;
    v4[3] = &unk_1002EEA90;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100281538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100281544);
}

uint64_t sub_100281548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100281554);
}

_QWORD *sub_100281558(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v39 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v39 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v39);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v20 = a3[9];
    v21 = a3[10];
    v22 = (char *)a1 + v20;
    v23 = (char *)a2 + v20;
    *(_DWORD *)v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    v24 = (char *)a1 + v21;
    v25 = (char *)a2 + v21;
    *(_DWORD *)v24 = *(_DWORD *)v25;
    v26 = a3[11];
    v27 = a3[12];
    v28 = *((_BYTE *)a2 + v26);
    v24[4] = v25[4];
    *((_BYTE *)a1 + v26) = v28;
    v29 = (char *)a1 + v27;
    *(_DWORD *)v29 = *(_DWORD *)((char *)a2 + v27);
    v29[4] = *((_BYTE *)a2 + v27 + 4);
    v30 = a3[13];
    v31 = a3[14];
    v32 = (char *)a1 + v30;
    v33 = (char *)a2 + v30;
    *(_DWORD *)v32 = *(_DWORD *)v33;
    v32[4] = v33[4];
    v34 = (char *)a1 + v31;
    v35 = (char *)a2 + v31;
    *(_DWORD *)v34 = *(_DWORD *)v35;
    v34[4] = v35[4];
    v36 = a3[15];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    *(_DWORD *)v37 = *(_DWORD *)v38;
    v37[4] = v38[4];
  }
  return a1;
}

uint64_t sub_1002816E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  v25 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = a3[13];
  v29 = a3[14];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  v32 = a1 + v29;
  v33 = a2 + v29;
  *(_DWORD *)v32 = *(_DWORD *)v33;
  *(_BYTE *)(v32 + 4) = *(_BYTE *)(v33 + 4);
  v34 = a3[15];
  v35 = a1 + v34;
  v36 = a2 + v34;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  return a1;
}

uint64_t sub_100281844(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 4);
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = v10;
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  LOBYTE(v10) = *(_BYTE *)(v19 + 4);
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = v10;
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  LOBYTE(v10) = *(_BYTE *)(v22 + 4);
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = v10;
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = a2 + v23;
  LOBYTE(v10) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v10;
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v26 = a3[12];
  v27 = a1 + v26;
  v28 = (int *)(a2 + v26);
  v29 = *v28;
  *(_BYTE *)(v27 + 4) = *((_BYTE *)v28 + 4);
  *(_DWORD *)v27 = v29;
  v30 = a3[13];
  v31 = a1 + v30;
  v32 = a2 + v30;
  LOBYTE(v29) = *(_BYTE *)(v32 + 4);
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = v29;
  v33 = a3[14];
  v34 = a1 + v33;
  v35 = a2 + v33;
  LOBYTE(v29) = *(_BYTE *)(v35 + 4);
  *(_DWORD *)v34 = *(_DWORD *)v35;
  *(_BYTE *)(v34 + 4) = v29;
  v36 = a3[15];
  v37 = a1 + v36;
  v38 = a2 + v36;
  LOBYTE(v29) = *(_BYTE *)(v38 + 4);
  *(_DWORD *)v37 = *(_DWORD *)v38;
  *(_BYTE *)(v37 + 4) = v29;
  return a1;
}

uint64_t sub_1002819B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  v25 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = a3[13];
  v29 = a3[14];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  v32 = a1 + v29;
  v33 = a2 + v29;
  *(_DWORD *)v32 = *(_DWORD *)v33;
  *(_BYTE *)(v32 + 4) = *(_BYTE *)(v33 + 4);
  v34 = a3[15];
  v35 = a1 + v34;
  v36 = a2 + v34;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  return a1;
}

uint64_t sub_100281B18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  v25 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = a3[13];
  v29 = a3[14];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  v32 = a1 + v29;
  v33 = a2 + v29;
  *(_DWORD *)v32 = *(_DWORD *)v33;
  *(_BYTE *)(v32 + 4) = *(_BYTE *)(v33 + 4);
  v34 = a3[15];
  v35 = a1 + v34;
  v36 = a2 + v34;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  return a1;
}

uint64_t sub_100281C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100281C84);
}

uint64_t sub_100281C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 44));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100281D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100281D28);
}

uint64_t sub_100281D28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 44)) = a2 + 2;
  return result;
}

uint64_t sub_100281DA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  result = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1002EEA90;
    v4[2] = &unk_1002EEA90;
    v4[3] = &unk_1002EEA90;
    v4[4] = &unk_1002EEA90;
    v4[5] = &unk_1002EEA90;
    v4[6] = &unk_1002EEA90;
    v4[7] = &unk_1002EE708;
    v4[8] = &unk_1002EEA90;
    v4[9] = &unk_1002EEA90;
    v4[10] = &unk_1002EEA90;
    v4[11] = &unk_1002EEA90;
    swift_initStructMetadata(a1, 256, 12, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100281E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100281E38);
}

uint64_t sub_100281E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 7u)
    v9 = 7;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 7;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 7u)
    return v10;
  else
    return 0;
}

uint64_t sub_100281EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100281EC8);
}

uint64_t sub_100281EC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 7;
  return result;
}

uint64_t sub_100281F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148CFC(a1, a2, a3, (uint64_t)&unk_1002EECC0);
}

uint64_t sub_100281F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100281F58);
}

uint64_t sub_100281F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100281F68);
}

uint64_t sub_100281F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100281F78);
}

uint64_t sub_100281F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100281F88);
}

uint64_t sub_100281F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100209860(a1, a2, a3, (uint64_t)&unk_1002EEA90, (uint64_t)&unk_1002EEA90, (uint64_t)&unk_1002EEA90);
}

uint64_t *sub_100281FA0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain(v17);
  }
  return a1;
}

uint64_t sub_100282068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t sub_1002820B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t sub_10028214C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t sub_100282200(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100282290(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_100282330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10028233C);
}

uint64_t sub_10028233C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1002823C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002823D4);
}

uint64_t sub_1002823D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

uint64_t sub_100282450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100209860(a1, a2, a3, (uint64_t)&unk_1002EE6A0, (uint64_t)&unk_1002EE6A0, (uint64_t)&unk_1002EEB80);
}

uint64_t *sub_100282468(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, uint64_t);
  void (*v46)(uint64_t *, uint64_t *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v23);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage(0);
    v46 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v46(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (uint64_t *)((char *)a1 + v9);
    v13 = (uint64_t *)((char *)a2 + v9);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = a3[7];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Proto_Gpsd_Request(0);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain(v14);
    if (v20(v17, 1, v18))
    {
      v21 = v7;
      v22 = sub_1000039AC(&qword_100369E40);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v21 = v7;
      v46((uint64_t *)v16, (uint64_t *)v17, v7);
      v24 = *(int *)(v18 + 20);
      v25 = *(_QWORD *)&v17[v24];
      *(_QWORD *)&v16[v24] = v25;
      v26 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56);
      swift_retain(v25);
      v26(v16, 0, 1, v18);
    }
    v27 = a3[8];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = (int *)type metadata accessor for Proto_Gpsd_Response(0);
    v31 = *((_QWORD *)v30 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
    {
      v32 = sub_1000039AC(&qword_100369E48);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v46((uint64_t *)v28, (uint64_t *)v29, v21);
      v28[v30[5]] = v29[v30[5]];
      v33 = v30[6];
      v34 = &v28[v33];
      v35 = &v29[v33];
      v34[8] = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v28[v30[7]] = v29[v30[7]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
    }
    v36 = a3[9];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = type metadata accessor for Proto_Gpsd_Indication(0);
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      v41 = sub_1000039AC(&qword_100369E50);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v46((uint64_t *)v37, (uint64_t *)v38, v21);
      v42 = *(int *)(v39 + 20);
      v43 = *(_QWORD *)&v38[v42];
      *(_QWORD *)&v37[v42] = v43;
      v44 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56);
      swift_retain(v43);
      v44(v37, 0, 1, v39);
    }
  }
  return a1;
}

uint64_t sub_100282728(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  v6 = a1 + a2[7];
  v7 = type metadata accessor for Proto_Gpsd_Request(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v5(v6, v4);
    swift_release(*(_QWORD *)(v6 + *(int *)(v7 + 20)));
  }
  v8 = a1 + a2[8];
  v9 = type metadata accessor for Proto_Gpsd_Response(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    v5(v8, v4);
  v10 = a1 + a2[9];
  v11 = type metadata accessor for Proto_Gpsd_Indication(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    v5(v10, v4);
    return swift_release(*(_QWORD *)(v10 + *(int *)(v11 + 20)));
  }
  return result;
}

uint64_t sub_100282860(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, _QWORD, uint64_t, uint64_t);
  void (*v44)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage(0);
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v44(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (_QWORD *)(a1 + v8);
  v12 = (_QWORD *)(a2 + v8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = a3[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for Proto_Gpsd_Request(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  swift_bridgeObjectRetain(v13);
  if (v19(v16, 1, v17))
  {
    v20 = v6;
    v21 = sub_1000039AC(&qword_100369E40);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v20 = v6;
    v44((uint64_t)v15, (uint64_t)v16, v6);
    v22 = *(int *)(v17 + 20);
    v23 = *(_QWORD *)&v16[v22];
    *(_QWORD *)&v15[v22] = v23;
    v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56);
    swift_retain(v23);
    v24(v15, 0, 1, v17);
  }
  v25 = a3[8];
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = (int *)type metadata accessor for Proto_Gpsd_Response(0);
  v29 = *((_QWORD *)v28 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v29 + 48))(v27, 1, v28))
  {
    v30 = sub_1000039AC(&qword_100369E48);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v44((uint64_t)v26, (uint64_t)v27, v20);
    v26[v28[5]] = v27[v28[5]];
    v31 = v28[6];
    v32 = &v26[v31];
    v33 = &v27[v31];
    v32[8] = v33[8];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v26[v28[7]] = v27[v28[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v29 + 56))(v26, 0, 1, v28);
  }
  v34 = a3[9];
  v35 = (char *)(a1 + v34);
  v36 = (char *)(a2 + v34);
  v37 = type metadata accessor for Proto_Gpsd_Indication(0);
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    v39 = sub_1000039AC(&qword_100369E50);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v44((uint64_t)v35, (uint64_t)v36, v20);
    v40 = *(int *)(v37 + 20);
    v41 = *(_QWORD *)&v36[v40];
    *(_QWORD *)&v35[v40] = v41;
    v42 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56);
    swift_retain(v41);
    v42(v35, 0, 1, v37);
  }
  return a1;
}

uint64_t sub_100282AF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int *v31;
  uint64_t v32;
  uint64_t (*v33)(_BYTE *, uint64_t, int *);
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;

  v6 = type metadata accessor for UnknownStorage(0);
  v65 = *(_QWORD *)(v6 - 8);
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 24);
  v64(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[7];
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  v19 = type metadata accessor for Proto_Gpsd_Request(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v17, v18, v6);
      v24 = *(int *)(v19 + 20);
      v25 = *(_QWORD *)&v18[v24];
      *(_QWORD *)&v17[v24] = v25;
      v26 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
      swift_retain(v25);
      v26(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    sub_100004030((uint64_t)v17, type metadata accessor for Proto_Gpsd_Request);
LABEL_6:
    v27 = sub_1000039AC(&qword_100369E40);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v64((uint64_t)v17, (uint64_t)v18, v6);
  v54 = *(int *)(v19 + 20);
  v55 = *(_QWORD *)&v18[v54];
  v56 = *(_QWORD *)&v17[v54];
  *(_QWORD *)&v17[v54] = v55;
  swift_retain(v55);
  swift_release(v56);
LABEL_7:
  v28 = a3[8];
  v29 = (_BYTE *)(a1 + v28);
  v30 = (_BYTE *)(a2 + v28);
  v31 = (int *)type metadata accessor for Proto_Gpsd_Response(0);
  v32 = *((_QWORD *)v31 - 1);
  v33 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v65 + 16))(v29, v30, v6);
      v29[v31[5]] = v30[v31[5]];
      v36 = v31[6];
      v37 = &v29[v36];
      v38 = &v30[v36];
      v39 = v38[8];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v39;
      v29[v31[7]] = v30[v31[7]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    sub_100004030((uint64_t)v29, type metadata accessor for Proto_Gpsd_Response);
LABEL_12:
    v40 = sub_1000039AC(&qword_100369E48);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  v64((uint64_t)v29, (uint64_t)v30, v6);
  v29[v31[5]] = v30[v31[5]];
  v57 = v31[6];
  v58 = &v29[v57];
  v59 = &v30[v57];
  v60 = v59[8];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v60;
  v29[v31[7]] = v30[v31[7]];
LABEL_13:
  v41 = a3[9];
  v42 = (char *)(a1 + v41);
  v43 = (char *)(a2 + v41);
  v44 = type metadata accessor for Proto_Gpsd_Indication(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (!v47)
  {
    if (!v48)
    {
      v64((uint64_t)v42, (uint64_t)v43, v6);
      v61 = *(int *)(v44 + 20);
      v62 = *(_QWORD *)&v43[v61];
      v63 = *(_QWORD *)&v42[v61];
      *(_QWORD *)&v42[v61] = v62;
      swift_retain(v62);
      swift_release(v63);
      return a1;
    }
    sub_100004030((uint64_t)v42, type metadata accessor for Proto_Gpsd_Indication);
    goto LABEL_18;
  }
  if (v48)
  {
LABEL_18:
    v52 = sub_1000039AC(&qword_100369E50);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v42, v43, v6);
  v49 = *(int *)(v44 + 20);
  v50 = *(_QWORD *)&v43[v49];
  *(_QWORD *)&v42[v49] = v50;
  v51 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56);
  swift_retain(v50);
  v51(v42, 0, 1, v44);
  return a1;
}

uint64_t sub_100282EDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v12 = *(_OWORD *)(a2 + v9);
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  *(_OWORD *)(a1 + v9) = v12;
  v13 = a3[7];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for Proto_Gpsd_Request(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_1000039AC(&qword_100369E40);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    *(_QWORD *)&v14[*(int *)(v16 + 20)] = *(_QWORD *)&v15[*(int *)(v16 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = a3[8];
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = (int *)type metadata accessor for Proto_Gpsd_Response(0);
  v23 = *((_QWORD *)v22 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_1000039AC(&qword_100369E48);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v20, (uint64_t)v21, v6);
    v20[v22[5]] = v21[v22[5]];
    v25 = v22[6];
    v26 = &v20[v25];
    v27 = &v21[v25];
    v26[8] = v27[8];
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v20[v22[7]] = v21[v22[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  v28 = a3[9];
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = type metadata accessor for Proto_Gpsd_Indication(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = sub_1000039AC(&qword_100369E50);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v29, (uint64_t)v30, v6);
    *(_QWORD *)&v29[*(int *)(v31 + 20)] = *(_QWORD *)&v30[*(int *)(v31 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t sub_100283138(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  int *v28;
  uint64_t v29;
  uint64_t (*v30)(_BYTE *, uint64_t, int *);
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;

  v6 = type metadata accessor for UnknownStorage(0);
  v55 = *(_QWORD *)(v6 - 8);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 40);
  v54(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (_QWORD *)(a1 + v8);
  v12 = (uint64_t *)(a2 + v8);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  v16 = a3[7];
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  v19 = type metadata accessor for Proto_Gpsd_Request(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v17, v18, v6);
      *(_QWORD *)&v17[*(int *)(v19 + 20)] = *(_QWORD *)&v18[*(int *)(v19 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    sub_100004030((uint64_t)v17, type metadata accessor for Proto_Gpsd_Request);
LABEL_6:
    v24 = sub_1000039AC(&qword_100369E40);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v54((uint64_t)v17, (uint64_t)v18, v6);
  v47 = *(int *)(v19 + 20);
  v48 = *(_QWORD *)&v17[v47];
  *(_QWORD *)&v17[v47] = *(_QWORD *)&v18[v47];
  swift_release(v48);
LABEL_7:
  v25 = a3[8];
  v26 = (_BYTE *)(a1 + v25);
  v27 = (_BYTE *)(a2 + v25);
  v28 = (int *)type metadata accessor for Proto_Gpsd_Response(0);
  v29 = *((_QWORD *)v28 - 1);
  v30 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v55 + 32))(v26, v27, v6);
      v26[v28[5]] = v27[v28[5]];
      v33 = v28[6];
      v34 = &v26[v33];
      v35 = &v27[v33];
      v34[8] = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v26[v28[7]] = v27[v28[7]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    sub_100004030((uint64_t)v26, type metadata accessor for Proto_Gpsd_Response);
LABEL_12:
    v36 = sub_1000039AC(&qword_100369E48);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  v54((uint64_t)v26, (uint64_t)v27, v6);
  v26[v28[5]] = v27[v28[5]];
  v49 = v28[6];
  v50 = &v26[v49];
  v51 = &v27[v49];
  v50[8] = v51[8];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v26[v28[7]] = v27[v28[7]];
LABEL_13:
  v37 = a3[9];
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  v40 = type metadata accessor for Proto_Gpsd_Indication(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      v54((uint64_t)v38, (uint64_t)v39, v6);
      v52 = *(int *)(v40 + 20);
      v53 = *(_QWORD *)&v38[v52];
      *(_QWORD *)&v38[v52] = *(_QWORD *)&v39[v52];
      swift_release(v53);
      return a1;
    }
    sub_100004030((uint64_t)v38, type metadata accessor for Proto_Gpsd_Indication);
    goto LABEL_18;
  }
  if (v44)
  {
LABEL_18:
    v45 = sub_1000039AC(&qword_100369E50);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v38, v39, v6);
  *(_QWORD *)&v38[*(int *)(v40 + 20)] = *(_QWORD *)&v39[*(int *)(v40 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  return a1;
}

uint64_t sub_1002834F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100283500);
}

uint64_t sub_100283500(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + a3[6] + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = sub_1000039AC(&qword_100369E40);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v13 = v11;
      v14 = a3[7];
    }
    else
    {
      v15 = sub_1000039AC(&qword_100369E48);
      v12 = *(_QWORD *)(v15 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v13 = v15;
        v14 = a3[8];
      }
      else
      {
        v13 = sub_1000039AC(&qword_100369E50);
        v12 = *(_QWORD *)(v13 - 8);
        v14 = a3[9];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1 + v14, a2, v13);
  }
}

uint64_t sub_10028360C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100283618);
}

uint64_t sub_100283618(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = type metadata accessor for UnknownStorage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[6] + 8) = a2;
      return result;
    }
    v13 = sub_1000039AC(&qword_100369E40);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[7];
    }
    else
    {
      v16 = sub_1000039AC(&qword_100369E48);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[8];
      }
      else
      {
        v10 = sub_1000039AC(&qword_100369E50);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[9];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100283714(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];

  v2 = type metadata accessor for UnknownStorage(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = &unk_1002EE6A0;
    v10[2] = &unk_1002EEB80;
    sub_10001198C(319, (unint64_t *)&unk_10036A030, type metadata accessor for Proto_Gpsd_Request);
    if (v5 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, &qword_10036A3F8, type metadata accessor for Proto_Gpsd_Response);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001198C(319, &qword_10036A400, type metadata accessor for Proto_Gpsd_Indication);
        if (v9 <= 0x3F)
        {
          v10[5] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 6, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100283814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100283820);
}

uint64_t sub_100283824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100283830);
}

uint64_t sub_100283834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100209860(a1, a2, a3, (uint64_t)&unk_1002EE708, (uint64_t)&unk_1002EE708, (uint64_t)&unk_1002EE708);
}

uint64_t sub_100283848()
{
  return type metadata accessor for Proto_Gpsd_Request._StorageClass(0);
}

void sub_100283850(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD v80[48];

  v80[0] = &unk_1002EE6A0;
  v80[1] = &unk_1002EEA90;
  v80[2] = &unk_1002EE688;
  sub_10001198C(319, &qword_10037F320, type metadata accessor for Proto_Gpsd_InjectAssistancePosition);
  if (v3 <= 0x3F)
  {
    v80[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_10037F328, type metadata accessor for Proto_Gpsd_InjectAssistanceTime);
    if (v5 <= 0x3F)
    {
      v80[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, &qword_10037F330, type metadata accessor for Proto_Gpsd_SetAssistancePressure);
      if (v7 <= 0x3F)
      {
        v80[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001198C(319, &qword_10037F338, type metadata accessor for Proto_Gpsd_SetAssistanceAccel);
        if (v9 <= 0x3F)
        {
          v80[6] = *(_QWORD *)(v8 - 8) + 64;
          sub_10001198C(319, &qword_10037F340, type metadata accessor for Proto_Gpsd_SetAssistanceGyro);
          if (v11 <= 0x3F)
          {
            v80[7] = *(_QWORD *)(v10 - 8) + 64;
            sub_10001198C(319, &qword_10037F348, type metadata accessor for Proto_Gpsd_SetAssistanceDem);
            if (v13 <= 0x3F)
            {
              v80[8] = *(_QWORD *)(v12 - 8) + 64;
              sub_10001198C(319, &qword_10037F350, type metadata accessor for Proto_Gpsd_SetAssistanceMapVector);
              if (v15 <= 0x3F)
              {
                v80[9] = *(_QWORD *)(v14 - 8) + 64;
                sub_10001198C(319, &qword_10037F358, type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext);
                if (v17 <= 0x3F)
                {
                  v80[10] = *(_QWORD *)(v16 - 8) + 64;
                  sub_10001198C(319, &qword_10037F360, type metadata accessor for Proto_Gpsd_SetAssistanceMountState);
                  if (v19 <= 0x3F)
                  {
                    v80[11] = *(_QWORD *)(v18 - 8) + 64;
                    sub_10001198C(319, &qword_10037F368, type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment);
                    if (v21 <= 0x3F)
                    {
                      v80[12] = *(_QWORD *)(v20 - 8) + 64;
                      sub_10001198C(319, &qword_10037F370, type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint);
                      if (v23 <= 0x3F)
                      {
                        v80[13] = *(_QWORD *)(v22 - 8) + 64;
                        sub_10001198C(319, &qword_10037F378, type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
                        if (v25 <= 0x3F)
                        {
                          v80[14] = *(_QWORD *)(v24 - 8) + 64;
                          sub_10001198C(319, &qword_10037F380, type metadata accessor for Proto_Gpsd_InjectAssistanceFile);
                          if (v27 <= 0x3F)
                          {
                            v80[15] = *(_QWORD *)(v26 - 8) + 64;
                            sub_10001198C(319, &qword_10037F388, type metadata accessor for Proto_Gpsd_InjectRtiFile);
                            if (v29 <= 0x3F)
                            {
                              v80[16] = *(_QWORD *)(v28 - 8) + 64;
                              sub_10001198C(319, &qword_10037F390, type metadata accessor for Proto_Gpsd_InjectSvidBlocklist);
                              if (v31 <= 0x3F)
                              {
                                v80[17] = *(_QWORD *)(v30 - 8) + 64;
                                sub_10001198C(319, &qword_10037F398, type metadata accessor for Proto_Gpsd_DeleteGnssData);
                                if (v33 <= 0x3F)
                                {
                                  v80[18] = *(_QWORD *)(v32 - 8) + 64;
                                  sub_10001198C(319, &qword_10037F3A0, type metadata accessor for Proto_Gpsd_SetPvtmReport);
                                  if (v35 <= 0x3F)
                                  {
                                    v80[19] = *(_QWORD *)(v34 - 8) + 64;
                                    sub_10001198C(319, &qword_10037F3A8, type metadata accessor for Proto_Gpsd_SetNmeaHandler);
                                    if (v37 <= 0x3F)
                                    {
                                      v80[20] = *(_QWORD *)(v36 - 8) + 64;
                                      sub_10001198C(319, &qword_10037F3B0, type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode);
                                      if (v39 <= 0x3F)
                                      {
                                        v80[21] = *(_QWORD *)(v38 - 8) + 64;
                                        sub_10001198C(319, &qword_10037F3B8, type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations);
                                        if (v41 <= 0x3F)
                                        {
                                          v80[22] = *(_QWORD *)(v40 - 8) + 64;
                                          sub_10001198C(319, &qword_10037F3C0, type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
                                          if (v43 <= 0x3F)
                                          {
                                            v80[23] = *(_QWORD *)(v42 - 8) + 64;
                                            sub_10001198C(319, &qword_10037F3C8, type metadata accessor for Proto_Gpsd_TerminationImminent);
                                            if (v45 <= 0x3F)
                                            {
                                              v80[24] = *(_QWORD *)(v44 - 8) + 64;
                                              sub_10001198C(319, &qword_10037F3D0, type metadata accessor for Proto_Gpsd_ExitMessage);
                                              if (v47 <= 0x3F)
                                              {
                                                v80[25] = *(_QWORD *)(v46 - 8) + 64;
                                                sub_10001198C(319, &qword_10037F3D8, type metadata accessor for Proto_Gpsd_LtlInfo);
                                                if (v49 <= 0x3F)
                                                {
                                                  v80[26] = *(_QWORD *)(v48 - 8) + 64;
                                                  sub_10001198C(319, &qword_10037F3E0, type metadata accessor for Proto_Gpsd_StartContext);
                                                  if (v51 <= 0x3F)
                                                  {
                                                    v80[27] = *(_QWORD *)(v50 - 8) + 64;
                                                    sub_10001198C(319, &qword_10037F3E8, type metadata accessor for Proto_Gpsd_CntinStatusMessage);
                                                    if (v53 <= 0x3F)
                                                    {
                                                      v80[28] = *(_QWORD *)(v52 - 8) + 64;
                                                      sub_10001198C(319, &qword_10037F3F0, type metadata accessor for Proto_Gpsd_SetThermalRiskState);
                                                      if (v55 <= 0x3F)
                                                      {
                                                        v80[29] = *(_QWORD *)(v54 - 8) + 64;
                                                        sub_10001198C(319, &qword_10037F3F8, type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable);
                                                        if (v57 <= 0x3F)
                                                        {
                                                          v80[30] = *(_QWORD *)(v56 - 8) + 64;
                                                          sub_10001198C(319, &qword_10037F400, type metadata accessor for Proto_Gnss_Emergency_EmergConfig);
                                                          if (v59 <= 0x3F)
                                                          {
                                                            v80[31] = *(_QWORD *)(v58 - 8) + 64;
                                                            sub_10001198C(319, &qword_10037F408, type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
                                                            if (v61 <= 0x3F)
                                                            {
                                                              v80[32] = *(_QWORD *)(v60 - 8) + 64;
                                                              v80[33] = &unk_1002EEA90;
                                                              sub_10001198C(319, &qword_10037F410, type metadata accessor for Proto_Gnss_Emergency_GpsReferenceTime);
                                                              if (v63 <= 0x3F)
                                                              {
                                                                v80[34] = *(_QWORD *)(v62 - 8) + 64;
                                                                sub_10001198C(319, &qword_10037F418, type metadata accessor for Proto_Gnss_Emergency_ReferenceLocation);
                                                                if (v65 <= 0x3F)
                                                                {
                                                                  v80[35] = *(_QWORD *)(v64 - 8) + 64;
                                                                  sub_10001198C(319, &qword_10037F420, type metadata accessor for Proto_Gnss_Emergency_GpsNavigationModel);
                                                                  if (v67 <= 0x3F)
                                                                  {
                                                                    v80[36] = *(_QWORD *)(v66 - 8) + 64;
                                                                    sub_10001198C(319, &qword_10037F428, type metadata accessor for Proto_Gnss_Emergency_GpsAcqAssistance);
                                                                    if (v69 <= 0x3F)
                                                                    {
                                                                      v80[37] = *(_QWORD *)(v68 - 8) + 64;
                                                                      sub_10001198C(319, &qword_10037F430, type metadata accessor for Proto_Gnss_Emergency_CellFTAssistance);
                                                                      if (v71 <= 0x3F)
                                                                      {
                                                                        v80[38] = *(_QWORD *)(v70 - 8) + 64;
                                                                        sub_10001198C(319, &qword_10037F438, type metadata accessor for Proto_Gnss_Emergency_CplaneContext);
                                                                        if (v73 <= 0x3F)
                                                                        {
                                                                          v80[39] = *(_QWORD *)(v72 - 8) + 64;
                                                                          v80[40] = (char *)&value witness table for Builtin.BridgeObject
                                                                                  + 64;
                                                                          sub_10001198C(319, &qword_10037F440, type metadata accessor for Proto_Gnss_Emergency_LocationId);
                                                                          if (v75 <= 0x3F)
                                                                          {
                                                                            v80[41] = *(_QWORD *)(v74 - 8) + 64;
                                                                            v80[42] = &unk_1002EEA90;
                                                                            v80[43] = (char *)&value witness table for Builtin.BridgeObject
                                                                                    + 64;
                                                                            v80[44] = &unk_1002EE708;
                                                                            v80[45] = &unk_1002EEA90;
                                                                            sub_10001198C(319, &qword_10037F448, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
                                                                            if (v77 <= 0x3F)
                                                                            {
                                                                              v80[46] = *(_QWORD *)(v76 - 8) + 64;
                                                                              sub_10001198C(319, (unint64_t *)&unk_10037F450, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList);
                                                                              if (v79 <= 0x3F)
                                                                              {
                                                                                v80[47] = *(_QWORD *)(v78 - 8) + 64;
                                                                                swift_updateClassMetadata2(a1, 256, 48, v80, a1 + 80);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100283F94()
{
  return type metadata accessor for Proto_Gpsd_Indication._StorageClass(0);
}

void sub_100283F9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v44[29];

  v44[0] = &unk_1002EEDB8;
  v44[1] = &unk_1002EE688;
  v44[2] = &unk_1002EE6A0;
  sub_10001198C(319, &qword_10037FAF8, type metadata accessor for Proto_Gnss_Fix);
  if (v3 <= 0x3F)
  {
    v44[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_10037FB00, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
    if (v5 <= 0x3F)
    {
      v44[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, &qword_10037FB08, type metadata accessor for Proto_Gnss_PwrMeasurement);
      if (v7 <= 0x3F)
      {
        v44[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001198C(319, &qword_10037FB10, type metadata accessor for Proto_Gpsd_Status);
        if (v9 <= 0x3F)
        {
          v44[6] = *(_QWORD *)(v8 - 8) + 64;
          sub_10001198C(319, &qword_10037FB18, type metadata accessor for Proto_Gnss_TimeTransferDataExtend);
          if (v11 <= 0x3F)
          {
            v44[7] = *(_QWORD *)(v10 - 8) + 64;
            sub_10001198C(319, &qword_10037FB20, type metadata accessor for Proto_Gpsd_RecoveryStatistics);
            if (v13 <= 0x3F)
            {
              v44[8] = *(_QWORD *)(v12 - 8) + 64;
              sub_10001198C(319, &qword_10037FB28, type metadata accessor for Proto_Gpsd_LtlInfoRequest);
              if (v15 <= 0x3F)
              {
                v44[9] = *(_QWORD *)(v14 - 8) + 64;
                sub_10001198C(319, &qword_10037FB30, type metadata accessor for Proto_Gnss_DecodedExtendedEphemeris);
                if (v17 <= 0x3F)
                {
                  v44[10] = *(_QWORD *)(v16 - 8) + 64;
                  sub_10001198C(319, &qword_10037FB38, type metadata accessor for Proto_Gnss_DecodedRti);
                  if (v19 <= 0x3F)
                  {
                    v44[11] = *(_QWORD *)(v18 - 8) + 64;
                    v44[12] = &unk_1002EE6B8;
                    v44[13] = &unk_1002EE6B8;
                    sub_10001198C(319, &qword_10037FB40, type metadata accessor for Proto_Gpsd_CntinClockControl);
                    if (v21 <= 0x3F)
                    {
                      v44[14] = *(_QWORD *)(v20 - 8) + 64;
                      sub_10001198C(319, &qword_10037FB48, type metadata accessor for Proto_Gpsd_Exception);
                      if (v23 <= 0x3F)
                      {
                        v44[15] = *(_QWORD *)(v22 - 8) + 64;
                        sub_10001198C(319, &qword_10037FB50, type metadata accessor for Proto_Gpsd_AskBasebandReset);
                        if (v25 <= 0x3F)
                        {
                          v44[16] = *(_QWORD *)(v24 - 8) + 64;
                          sub_10001198C(319, &qword_10037FB58, type metadata accessor for Proto_Gnss_Emergency_SummaryReport);
                          if (v27 <= 0x3F)
                          {
                            v44[17] = *(_QWORD *)(v26 - 8) + 64;
                            sub_10001198C(319, &qword_10037FB60, type metadata accessor for Proto_Gnss_Emergency_PositionReport);
                            if (v29 <= 0x3F)
                            {
                              v44[18] = *(_QWORD *)(v28 - 8) + 64;
                              sub_10001198C(319, &qword_10037FB68, type metadata accessor for Proto_Gnss_Emergency_MeasurementReport);
                              if (v31 <= 0x3F)
                              {
                                v44[19] = *(_QWORD *)(v30 - 8) + 64;
                                sub_10001198C(319, &qword_10037FB70, type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport);
                                if (v33 <= 0x3F)
                                {
                                  v44[20] = *(_QWORD *)(v32 - 8) + 64;
                                  sub_10001198C(319, &qword_10037FB78, type metadata accessor for Proto_Gnss_Emergency_CellFTAssistanceRequest);
                                  if (v35 <= 0x3F)
                                  {
                                    v44[21] = *(_QWORD *)(v34 - 8) + 64;
                                    sub_10001198C(319, &qword_10037FB80, type metadata accessor for Proto_Gnss_Emergency_MeasurementReportWithEstimate);
                                    if (v37 <= 0x3F)
                                    {
                                      v44[22] = *(_QWORD *)(v36 - 8) + 64;
                                      sub_10001198C(319, &qword_10037FB88, type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
                                      if (v39 <= 0x3F)
                                      {
                                        v44[23] = *(_QWORD *)(v38 - 8) + 64;
                                        sub_10001198C(319, &qword_10037FB90, type metadata accessor for Proto_Gnss_Emergency_Init);
                                        if (v41 <= 0x3F)
                                        {
                                          v44[24] = *(_QWORD *)(v40 - 8) + 64;
                                          v44[25] = &unk_1002EEA90;
                                          v44[26] = &unk_1002EE7F8;
                                          v44[27] = &unk_1002EEA90;
                                          sub_10001198C(319, (unint64_t *)&unk_10037FB98, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
                                          if (v43 <= 0x3F)
                                          {
                                            v44[28] = *(_QWORD *)(v42 - 8) + 64;
                                            swift_updateClassMetadata2(a1, 256, 29, v44, a1 + 80);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1002843C4()
{
  return type metadata accessor for Proto_Gpsd_LtlInfo._StorageClass(0);
}

void sub_1002843CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[7];

  v10[0] = &unk_1002EE708;
  v10[1] = &unk_1002EEA90;
  v10[2] = &unk_1002EE960;
  sub_10001198C(319, &qword_10037FFE0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams);
  if (v3 <= 0x3F)
  {
    v10[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001198C(319, &qword_10037FFE8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams);
    if (v5 <= 0x3F)
    {
      v10[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001198C(319, &qword_10037FFF0, type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
      if (v7 <= 0x3F)
      {
        v10[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001198C(319, (unint64_t *)&unk_10037FFF8, type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
        if (v9 <= 0x3F)
        {
          v10[6] = *(_QWORD *)(v8 - 8) + 64;
          swift_updateClassMetadata2(a1, 256, 7, v10, a1 + 80);
        }
      }
    }
  }
}

unint64_t sub_1002844E8()
{
  unint64_t result;

  result = qword_1003802B8;
  if (!qword_1003802B8)
  {
    result = swift_getWitnessTable(&unk_1002EA638, &type metadata for Proto_Gpsd_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_1003802B8);
  }
  return result;
}

unint64_t sub_10028452C()
{
  unint64_t result;

  result = qword_1003802C0;
  if (!qword_1003802C0)
  {
    result = swift_getWitnessTable(&unk_1002EA518, &type metadata for Proto_Gpsd_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_1003802C0);
  }
  return result;
}

unint64_t sub_100284570()
{
  unint64_t result;

  result = qword_1003802C8;
  if (!qword_1003802C8)
  {
    result = swift_getWitnessTable(&unk_1002EA3F8, &type metadata for Proto_Gpsd_CntinStatus);
    atomic_store(result, (unint64_t *)&qword_1003802C8);
  }
  return result;
}

unint64_t sub_1002845B4()
{
  unint64_t result;

  result = qword_1003802D0;
  if (!qword_1003802D0)
  {
    result = swift_getWitnessTable(&unk_1002EA2D8, &type metadata for Proto_Gpsd_LtlInfoType);
    atomic_store(result, (unint64_t *)&qword_1003802D0);
  }
  return result;
}

unint64_t sub_1002845F8()
{
  unint64_t result;

  result = qword_1003802D8;
  if (!qword_1003802D8)
  {
    result = swift_getWitnessTable(&unk_1002EA1B8, &type metadata for Proto_Gpsd_CompressionType);
    atomic_store(result, (unint64_t *)&qword_1003802D8);
  }
  return result;
}

unint64_t sub_10028463C()
{
  unint64_t result;

  result = qword_1003802E0;
  if (!qword_1003802E0)
  {
    result = swift_getWitnessTable(&unk_1002EA098, &type metadata for Proto_Gpsd_SuplInitDecodeResult);
    atomic_store(result, (unint64_t *)&qword_1003802E0);
  }
  return result;
}

id sub_100284690()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__listener);
}

id sub_1002846A0()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue);
}

uint64_t sub_1002846B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1000875F0(v3, a1);
}

uint64_t sub_100284700(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService);
  swift_beginAccess(v3, v5, 33, 0);
  sub_1000187CC(v3);
  sub_100284760(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t sub_100284760(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *sub_100284778(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService, a1, 33, 0);
  return &j__swift_endAccess;
}

char *ALServiceDelegate.__allocating_init(queue:dataService:)(void *a1, _QWORD *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return ALServiceDelegate.init(queue:dataService:)(a1, a2);
}

char *ALServiceDelegate.init(queue:dataService:)(void *a1, _QWORD *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  char *v10;
  NSString v11;
  id v12;
  objc_class *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  objc_super v30;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue] = a1;
  v27 = a2;
  sub_1000875F0((uint64_t)a2, (uint64_t)&v2[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService]);
  v9 = objc_allocWithZone((Class)NSXPCListener);
  v10 = v2;
  v26 = a1;
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v9, "initWithMachServiceName:", v11);

  *(_QWORD *)&v10[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__listener] = v12;
  v13 = (objc_class *)type metadata accessor for ALServiceDelegate();
  v30.receiver = v10;
  v30.super_class = v13;
  v14 = (char *)objc_msgSendSuper2(&v30, "init");
  v15 = *(void **)&v14[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__listener];
  v16 = *(_QWORD *)&v14[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue];
  v17 = v14;
  objc_msgSend(v15, "_setQueue:", v16);
  objc_msgSend(v15, "setDelegate:", v17);
  objc_msgSend(v15, "activate");
  v18 = xpclog.getter((uint64_t)v8);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v29 = v22;
    v25 = v5;
    *(_DWORD *)v21 = 136446210;
    v28 = sub_10001818C(0xD000000000000017, 0x8000000100305030, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v21 + 4, v21 + 12);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "serviceName %{public}s started", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    sub_1000187CC(v27);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v25);
  }
  else
  {

    sub_1000187CC(v27);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v17;
}

unint64_t static ALServiceDelegate.serviceName()()
{
  return 0xD000000000000017;
}

uint64_t type metadata accessor for ALServiceDelegate()
{
  return objc_opt_self(_TtC5ALXPC17ALServiceDelegate);
}

uint64_t sub_100284B00(uint64_t a1, void *a2)
{
  return sub_100285C08(a2);
}

uint64_t sub_100284B08(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100284B90(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  NSString v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  os_log_type_t v17;
  uint8_t *v18;
  _BYTE v20[15];
  char v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[32];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v20[-v7];
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(a1, "valueForEntitlement:", v9);

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)(&v22, v10);
    swift_unknownObjectRelease(v10);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }
  sub_1002861C0((uint64_t)&v22, (uint64_t)v24);
  sub_100286208((uint64_t)v24, (uint64_t)&v22);
  if (*((_QWORD *)&v23 + 1))
  {
    if (swift_dynamicCast(&v21, &v22, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)
      && (v21 & 1) != 0)
    {
      xpclog.getter((uint64_t)v8);
      v11 = a1;
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v14 = 67240192;
        LODWORD(v22) = objc_msgSend(v11, "processIdentifier");
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 4, v14 + 4, v14 + 8);

        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Entitlement check passed for pid: %{public}d", v14, 8u);
        swift_slowDealloc(v14, -1, -1);
      }
      else
      {

      }
      v15 = 1;
      goto LABEL_15;
    }
  }
  else
  {
    sub_100286250((uint64_t)&v22);
  }
  xpclog.getter((uint64_t)v6);
  v16 = a1;
  v12 = Logger.logObject.getter(v16);
  v17 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v18 = 67240192;
    LODWORD(v22) = objc_msgSend(v16, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 4, v18 + 4, v18 + 8);

    _os_log_impl((void *)&_mh_execute_header, v12, v17, "Entitlement check failed for pid:%{public}d, connection rejected", v18, 8u);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {

  }
  v15 = 0;
  v8 = v6;
LABEL_15:

  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  sub_100286250((uint64_t)v24);
  return v15;
}

uint64_t sub_100284EA8(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, void (*)(), uint64_t, void *, void *, uint64_t (*)(uint64_t));
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[3];
  void *v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v34 - v10;
  v12 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v12)
  {
    v13 = v12;
    v14 = swift_allocObject(&unk_10035A848, 24, 7);
    *(_QWORD *)(v14 + 16) = v2;
    v38 = sub_1002862B4;
    v39 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002852B8;
    v37 = &unk_10035A860;
    v15 = _Block_copy(aBlock);
    v16 = v39;
    v17 = v2;
    swift_release(v16);
    v18 = objc_msgSend(v13, "remoteObjectProxyWithErrorHandler:", v15);
    _Block_release(v15);
    _bridgeAnyObjectToAny(_:)(aBlock, v18);
    swift_unknownObjectRelease(v18);
    v19 = sub_1000039AC(&qword_100380510);
    if (swift_dynamicCast(&v35, aBlock, (char *)&type metadata for Any + 8, v19, 6))
    {
      v20 = v35;
      (*(void (**)(_QWORD *__return_ptr))((swift_isaMask & *v17) + 0x68))(aBlock);
      v21 = v37;
      v22 = v38;
      sub_1002862D0(aBlock, (uint64_t)v37);
      v23 = swift_allocObject(&unk_10035A898, 24, 7);
      *(_QWORD *)(v23 + 16) = v20;
      v24 = (void (*)(uint64_t, uint64_t, void (*)(), uint64_t, void *, void *, uint64_t (*)(uint64_t)))*((_QWORD *)v22 + 1);
      swift_unknownObjectRetain(v20);
      v24(a1, a2, sub_100286318, v23, v13, v21, v22);
      swift_release(v23);

      swift_unknownObjectRelease(v20);
      return sub_1000187CC(aBlock);
    }
    else
    {
      v30 = xpclog.getter((uint64_t)v11);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.error.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Invalid proxy", v33, 2u);
        swift_slowDealloc(v33, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    }
  }
  else
  {
    v26 = xpclog.getter((uint64_t)v9);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Invalid current connnection", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_1002851FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v7[16];
  uint64_t v8;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  xpclog.getter((uint64_t)v5);
  v8 = a1;
  Logger._fault(_:function:file:line:)(sub_1002863D4, (uint64_t)v7, (uint64_t *)"proxyErrorHandler(error:)", 25, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/XPC/ALXPCService.swift", 77, 2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1002852B8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_10028537C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v9;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = xpclog.getter((uint64_t)v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "service,onInterrupt", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_100285564(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v7);
  v8 = a1;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v17 = v5;
    v18 = v4;
    v19 = v2;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138543362;
    if (a1)
    {
      v20 = v8;
      v13 = v8;
    }
    else
    {
      v20 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4, v11 + 12);
    *v12 = a1;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "service,interruptionHandler,%{public}@", v11, 0xCu);
    v14 = sub_1000039AC((uint64_t *)&unk_1003805A0);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
    v4 = v18;
    v5 = v17;
  }
  else
  {

    v9 = v8;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_100285764(a1);
}

uint64_t sub_100285764(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  NSObject *v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[4];
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  _BYTE v40[16];
  uint64_t v41;
  uint64_t v42;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v34[-v9];
  if (a1)
  {
    v11 = a1;
    xpclog.getter((uint64_t)v10);
    v12 = v11;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter();
    v15 = v14;
    if (os_log_type_enabled(v13, v14))
    {
      v16 = swift_slowAlloc(18, -1);
      v38 = v4;
      v17 = v16;
      v18 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v17 = 138543618;
      v36 = v2;
      v39 = v12;
      v35 = v15;
      v19 = v12;
      v37 = v5;
      v20 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v17 + 4, v17 + 12);
      *v18 = a1;

      *(_WORD *)(v17 + 12) = 1026;
      v21 = -[NSObject processIdentifier](v20, "processIdentifier");

      LODWORD(v39) = v21;
      v2 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 4, v17 + 14, v17 + 18);

      v5 = v37;
      _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v35, "service,invalidationHandler,%{public}@,pid,%{public}d,exited", (uint8_t *)v17, 0x12u);
      v22 = sub_1000039AC((uint64_t *)&unk_1003805A0);
      swift_arrayDestroy(v18, 1, v22);
      swift_slowDealloc(v18, -1, -1);
      v23 = v17;
      v4 = v38;
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {

      v13 = v12;
    }

    v31 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
    (*(void (**)(NSObject **__return_ptr, uint64_t))((swift_isaMask & *v2) + 0x68))(&v39, v31);
    v32 = v41;
    v33 = v42;
    sub_1002862D0(&v39, v41);
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v33 + 16))(v12, v32, v33);

    return sub_1000187CC(&v39);
  }
  else
  {
    v24 = xpclog.getter((uint64_t)v8);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 138543362;
      v39 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v27 + 4, v27 + 12);
      *v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "serviceIvalidationHandler, invalid %{public}@", v27, 0xCu);
      v29 = sub_1000039AC((uint64_t *)&unk_1003805A0);
      swift_arrayDestroy(v28, 1, v29);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
}

id ALServiceDelegate.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void ALServiceDelegate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ALXPC.ALServiceDelegate", 23, "init()", 6, 0);
  __break(1u);
}

id ALServiceDelegate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ALServiceDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100285C08(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject **v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  int v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  NSObject *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  NSObject *v38;
  NSObject **v39;
  uint64_t v40;
  NSObject **v42;
  NSObject **v43;
  uint64_t v44;
  char *v45;
  void **aBlock;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  void (*v50)();
  uint64_t v51;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v45 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v42 - v8;
  xpclog.getter((uint64_t)&v42 - v8);
  v10 = a1;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(18, -1);
    v42 = (NSObject **)swift_slowAlloc(8, -1);
    v43 = (NSObject **)v2;
    *(_DWORD *)v13 = 67240450;
    v44 = v4;
    LODWORD(aBlock) = -[NSObject processIdentifier](v10, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v13 + 4, v13 + 8);
    *(_WORD *)(v13 + 8) = 2114;
    aBlock = (void **)&v10->isa;
    v14 = v10;
    v4 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v47, v13 + 10, v13 + 18);
    v15 = v42;
    *v42 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "New XPC Connection from process:%{public}d, details:(%{public}@)", (uint8_t *)v13, 0x12u);
    v16 = sub_1000039AC((uint64_t *)&unk_1003805A0);
    swift_arrayDestroy(v15, 1, v16);
    v2 = v43;
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {

    v11 = v10;
  }

  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v9, v4);
  v18 = (*(uint64_t (**))((swift_isaMask & *v2) + 0x90))(v10);
  if ((v18 & 1) != 0)
  {
    LODWORD(v44) = v18;
    -[NSObject setExportedObject:](v10, "setExportedObject:", v2);
    v19 = (void *)objc_opt_self(NSXPCInterface);
    v20 = objc_msgSend(v19, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP5ALXPC13ALXPCProtocol_);
    -[NSObject setExportedInterface:](v10, "setExportedInterface:", v20);

    v21 = objc_msgSend(v19, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP5ALXPC13ALXPCProtocol_);
    -[NSObject setRemoteObjectInterface:](v10, "setRemoteObjectInterface:", v21);

    v22 = swift_allocObject(&unk_10035A938, 24, 7);
    swift_unknownObjectWeakInit(v22 + 16, v10);
    v23 = swift_allocObject(&unk_10035A960, 32, 7);
    *(_QWORD *)(v23 + 16) = v2;
    *(_QWORD *)(v23 + 24) = v22;
    v50 = sub_1002864A0;
    v51 = v23;
    aBlock = _NSConcreteStackBlock;
    v47 = 1107296256;
    v48 = sub_100284B08;
    v49 = &unk_10035A978;
    v24 = _Block_copy(&aBlock);
    v25 = v51;
    v26 = v2;
    swift_release(v25);
    -[NSObject setInterruptionHandler:](v10, "setInterruptionHandler:", v24);
    _Block_release(v24);
    v27 = swift_allocObject(&unk_10035A938, 24, 7);
    swift_unknownObjectWeakInit(v27 + 16, v10);
    v28 = swift_allocObject(&unk_10035A9B0, 32, 7);
    *(_QWORD *)(v28 + 16) = v26;
    *(_QWORD *)(v28 + 24) = v27;
    v50 = sub_1002864DC;
    v51 = v28;
    aBlock = _NSConcreteStackBlock;
    v47 = 1107296256;
    v48 = sub_100284B08;
    v49 = &unk_10035A9C8;
    v29 = _Block_copy(&aBlock);
    v30 = v51;
    v31 = v26;
    swift_release(v30);
    -[NSObject setInvalidationHandler:](v10, "setInvalidationHandler:", v29);
    _Block_release(v29);
    -[NSObject _setQueue:](v10, "_setQueue:", *(_QWORD *)&v31[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue]);
    -[NSObject activate](v10, "activate");
    xpclog.getter((uint64_t)v45);
    v32 = v10;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(18, -1);
      v43 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v35 = 67240450;
      LODWORD(aBlock) = -[NSObject processIdentifier](v32, "processIdentifier");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v35 + 4, v35 + 8);
      *(_WORD *)(v35 + 8) = 2114;
      aBlock = (void **)&v32->isa;
      v36 = v17;
      v37 = v4;
      v38 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v47, v35 + 10, v35 + 18);
      v39 = v43;
      *v43 = v32;

      v4 = v37;
      v17 = v36;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Activated Connection from process:%{public}d, details:(%{public}@)", (uint8_t *)v35, 0x12u);
      v40 = sub_1000039AC((uint64_t *)&unk_1003805A0);
      swift_arrayDestroy(v39, 1, v40);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {

      v33 = v32;
    }

    v17(v45, v4);
    LOBYTE(v18) = v44;
  }
  return v18 & 1;
}

uint64_t sub_1002861C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000039AC(&qword_100380508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100286208(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000039AC(&qword_100380508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100286250(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000039AC(&qword_100380508);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100286290()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002862B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002862C8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_1002862D0(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1002862F4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100286318()
{
  uint64_t v0;
  void *v1;
  Class isa;

  v1 = *(void **)(v0 + 16);
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "onData:", isa);

}

uint64_t dispatch thunk of ALXPCDataService.subscribe(_:cb:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of ALXPCDataService.unsubscribe(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t method lookup function for ALServiceDelegate(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALServiceDelegate);
}

uint64_t dispatch thunk of ALServiceDelegate.__allocating_init(queue:dataService:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ALServiceDelegate.listener(_:shouldAcceptNewConnection:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))();
}

uint64_t dispatch thunk of ALServiceDelegate.onData(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x98))();
}

uint64_t dispatch thunk of ALServiceDelegate.onInterrupt()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA0))();
}

uint64_t sub_1002863D4()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  unint64_t v12;

  v1 = *(_QWORD *)(v0 + 16);
  v7 = 0;
  v8 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v11 = 0;
  v12 = 0xE000000000000000;
  v2._object = (void *)0x8000000100305170;
  v2._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v2);
  swift_getErrorValue(v1, v10, &v7);
  v3._countAndFlagsBits = Error.localizedDescription.getter(v8, v9);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  return v11;
}

uint64_t sub_100286478()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002864A0()
{
  sub_1002864E8((void (*)(void))sub_100285564);
}

uint64_t sub_1002864B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1002864DC()
{
  sub_1002864E8((void (*)(void))sub_100285764);
}

void sub_1002864E8(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;
  void *Strong;
  _BYTE v5[24];

  v3 = *(_QWORD *)(v1 + 24) + 16;
  swift_beginAccess(v3, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  a1();

}

uint64_t sub_100286558()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10028658C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 24, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;
  return swift_release(v3);
}

void *sub_1002865D0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t ALRPCInterface.__allocating_init(queue:interval:)(void *a1, double a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 32, 7);
  ALRPCInterface.init(queue:interval:)(a1, a2);
  return v5;
}

uint64_t ALRPCInterface.init(queue:interval:)(void *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21[24];

  v3 = v2;
  v6 = type metadata accessor for ALShmQueueHandler();
  *(_QWORD *)(v3 + 16) = 0;
  v7 = (uint64_t *)(v3 + 16);
  *(_QWORD *)(v3 + 24) = 0;
  v8 = (uint64_t *)(v3 + 24);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v9 = a1;
  v10 = ALShmQueueHandler.init(queue:interval:)(v9, a2);
  swift_beginAccess(v3 + 24, v21, 1, 0);
  v11 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v10;
  swift_release(v11);
  v12 = *(_QWORD *)(v3 + 24);
  if (v12)
    v13 = j___s8ALRPCShm17ALShmQueueHandlerC05fetchC0yyFTj;
  else
    v13 = 0;
  v14 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  swift_retain(v12);
  v15 = ALTightbeamHandler.init(cb:)((uint64_t)v13, v12);
  swift_beginAccess(v3 + 16, &v20, 1, 0);
  v16 = *v7;
  *v7 = v15;
  swift_release(v16);
  v17 = *v8;
  if (*v8)
  {
    v18 = *v7;
    swift_retain(v18);
    swift_retain(v17);
    dispatch thunk of ALShmQueueHandler.registerTightbeamHandler(tbHandler:)();
    swift_release(v17);
    swift_release(v18);
  }

  return v3;
}

uint64_t sub_1002867AC(uint64_t a1, uint64_t a2)
{
  return sub_1002867C4(a1, a2, (void (*)(uint64_t, uint64_t))dispatch thunk of ALShmQueueHandler.regAnalytics(onLocCompAnalytics:));
}

uint64_t sub_1002867B8(uint64_t a1, uint64_t a2)
{
  return sub_1002867C4(a1, a2, (void (*)(uint64_t, uint64_t))dispatch thunk of ALShmQueueHandler.register(onWiFi:));
}

uint64_t sub_1002867C4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 120))();
  if (result)
  {
    v8 = result;
    a3(a1, a2);
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_100286824()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
  if (result)
  {
    v2 = result;
    dispatch thunk of ALTightbeamHandler.enableWifiReception(enable:)();
    return swift_release(v2);
  }
  return result;
}

uint64_t ALTightbeamHandler.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t ALTightbeamHandler.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_1002868BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = swift_allocObject(v1, 16, 7);
  v7 = rpclog.getter((uint64_t)v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "PRCclassTest", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v6;
}

uint64_t sub_1002869C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = rpclog.getter((uint64_t)v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "PRCclassTest", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v1;
}

uint64_t sub_100286AC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t result;
  uint64_t v11;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ALRPCTest();
  inited = swift_initStaticObject(v4, &unk_1003DA418);
  v6 = rpclog.getter((uint64_t)v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "PRCclassTest", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_1003DA408 = inited;
  return result;
}

uint64_t *sub_100286BCC()
{
  if (qword_1003DA400 != -1)
    swift_once(&qword_1003DA400, sub_100286AC0);
  return &qword_1003DA408;
}

uint64_t static ALRPCTest.instance.getter()
{
  if (qword_1003DA400 != -1)
    swift_once(&qword_1003DA400, sub_100286AC0);
  return swift_retain(qword_1003DA408);
}

uint64_t sub_100286C4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v5;

  (*(void (**)(void))(*(_QWORD *)v1 + 104))();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 128))(a1);
  v3 = swift_slowAlloc(40, -1);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)(v3 + 32) = 0;
  sub_100287998((unint64_t **)&v5, (unint64_t *)v3, 5, 1);
  sub_1002879C0((uint64_t)&v5);
  return swift_slowDealloc(v3, -1, -1);
}

uint64_t sub_100286CE4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = ALTightbeamHandler.init(cb:)(0, 0);
  dispatch thunk of ALTightbeamHandler.hello(number:)();
  dispatch thunk of ALTightbeamHandler.hello(number:)();
  sleep(1u);
  return swift_release(v1);
}

uint64_t sub_100286D44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = ALTightbeamHandler.init(cb:)(0, 0);
  v2 = dispatch thunk of ALTightbeamHandler.getSamplesQueueSize()();
  swift_release(v1);
  return v2;
}

uint64_t sub_100286D98()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = ALTightbeamHandler.init(cb:)(0, 0);
  dispatch thunk of ALTightbeamHandler.printBufferUsageStatistics()();
  return swift_release(v1);
}

uint64_t sub_100286DE0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t (*v25)(_BYTE *, _QWORD);
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _BYTE v53[32];

  v2 = sub_1000039AC((uint64_t *)&unk_100380850);
  __chkstk_darwin(v2);
  v49 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ALWiFiNotification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v52 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v7);
  v47 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ALWiFiScanResult(0);
  v50 = *(_QWORD *)(v9 - 8);
  v51 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v43 - v17;
  v19 = type metadata accessor for ALShmQueueHandler();
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = ALShmQueueHandler.init(queue:interval:)(a1, 1.0);
  v21 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  swift_retain(v20);
  v44 = v20;
  v22 = ALTightbeamHandler.init(cb:)((uint64_t)j_j___s8ALRPCShm17ALShmQueueHandlerC05fetchC0yyFTj, v20);
  ALWiFiScanSingleAccessPoint.init()(v22);
  ALWiFiScanSingleAccessPoint._mac.setter(1, 0);
  v53[0] = 0;
  ALWiFiScanSingleAccessPoint._rssidB.setter(2);
  v53[0] = 0;
  v23 = ALWiFiScanSingleAccessPoint._channel.setter(3);
  ALWiFiScanResult.init()(v23);
  v24 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v48 = v12;
  v24(v16, v18, v12);
  v25 = (uint64_t (*)(_BYTE *, _QWORD))ALWiFiScanResult._accessPoints.modify(v53);
  v27 = v26;
  v28 = *v26;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
  *v27 = v28;
  v45 = v5;
  v46 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v28 = sub_1002874F4(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
    *v27 = v28;
  }
  v31 = *(_QWORD *)(v28 + 16);
  v30 = *(_QWORD *)(v28 + 24);
  if (v31 >= v30 >> 1)
  {
    v28 = sub_1002874F4(v30 > 1, v31 + 1, 1, v28);
    *v27 = v28;
  }
  *(_QWORD *)(v28 + 16) = v31 + 1;
  v32 = v28
      + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
      + *(_QWORD *)(v13 + 72) * v31;
  v33 = v48;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v32, v16, v48);
  v34 = v25(v53, 0);
  v35 = v47;
  static ALTimeStamp.now()(v34);
  v36 = type metadata accessor for ALTimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 0, 1, v36);
  v37 = ALWiFiScanResult._scanTimestamp.setter(v35);
  v38 = v52;
  ALWiFiNotification.init()(v37);
  v39 = v49;
  v40 = v50;
  v41 = v51;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v49, v11, v51);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v39, 0, 1, v41);
  ALWiFiNotification._scanResult.setter(v39);
  dispatch thunk of ALTightbeamHandler.enqueueWifiSample(notification:)();
  dispatch thunk of ALTightbeamHandler.apOn()();
  sleep(2u);
  dispatch thunk of ALTightbeamHandler.apOff()();
  swift_release(v44);
  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v38, v46);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v41);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v33);
}

uint64_t sub_1002871D0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for ALShmQueueHandler();
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = ALShmQueueHandler.init(queue:interval:)(a1, 1.0);
  v4 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  swift_retain(v3);
  v5 = ALTightbeamHandler.init(cb:)((uint64_t)j_j___s8ALRPCShm17ALShmQueueHandlerC05fetchC0yyFTj, v3);
  swift_release(v3);
  return swift_release(v5);
}

uint64_t sub_100287254()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = ALTightbeamHandler.init(cb:)(0, 0);
  dispatch thunk of ALTightbeamHandler.enableWifiReception(enable:)();
  return swift_release(v1);
}

uint64_t sub_1002872A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = ALTightbeamHandler.init(cb:)(0, 0);
  v2 = dispatch thunk of ALTightbeamHandler.setNumberOfAPsBeforeInterleavingSpecialTimestamp(number:)();
  swift_release(v1);
  return v2;
}

uint64_t sub_100287300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = ALTightbeamHandler.init(cb:)(0, 0);
  v2 = dispatch thunk of ALTightbeamHandler.mallocNBlocks(number:)();
  swift_release(v1);
  return v2;
}

uint64_t sub_10028736C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = ALTightbeamHandler.init(cb:)(0, 0);
  v2 = dispatch thunk of ALTightbeamHandler.getLargestFreeBlockBytes()();
  swift_release(v1);
  return v2;
}

uint64_t sub_1002873D0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = ALTightbeamHandler.init(cb:)(0, 0);
  v2 = dispatch thunk of ALTightbeamHandler.getPowerState()();
  swift_release(v1);
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

uint64_t sub_100287434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = ALTightbeamHandler.init(cb:)(0, 0);
  v2 = dispatch thunk of ALTightbeamHandler.pingForDaemonWatchdog(id:)();
  swift_release(v1);
  return v2;
}

uint64_t sub_100287490()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  v0 = type metadata accessor for ALTightbeamHandler();
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = ALTightbeamHandler.init(cb:)(0, 0);
  v2 = dispatch thunk of ALTightbeamHandler.setAONLogLevel(level:)();
  swift_release(v1);
  return v2 & 0x1FF;
}

uint64_t sub_1002874F4(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_1000039AC(&qword_100380C30);
  v11 = *(_QWORD *)(type metadata accessor for ALWiFiScanSingleAccessPoint(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100287880(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t type metadata accessor for ALRPCInterface()
{
  return objc_opt_self(_TtC5ALRPC14ALRPCInterface);
}

uint64_t method lookup function for ALRPCInterface(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALRPCInterface);
}

uint64_t dispatch thunk of ALBTScanRow.__allocating_init(backingData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ALRPCInterface.regAnalytics(onLocCompAnalytics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ALRPCInterface.regWifi(onWiFi:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ALTightbeamHandler.hello(number:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t type metadata accessor for ALRPCTest()
{
  return objc_opt_self(_TtC5ALRPC9ALRPCTest);
}

uint64_t method lookup function for ALRPCTest(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALRPCTest);
}

uint64_t dispatch thunk of ALRPCTest.test(queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of ALRPCTest.pingTest()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ALRPCTest.shmTest(queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ALRPCTest.shmDrain(queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ALRPCTest.wifiReception(enable:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ALRPCTest.setNumberOfAPsBeforeInterleavingSpecialTimestamp(number:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ALRPCTest.mallocNBlocks(number:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ALRPCTest.getLargestFreeBlockBytes()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ALRPCTest.getPowerState()()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ALTightbeamHandler.enableWifiReception(enable:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ALRPCTest.setAONLogLevel(level:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))() & 0x1FF;
}

uint64_t sub_100287880(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(type metadata accessor for ALWiFiScanSingleAccessPoint(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100287998(unint64_t **a1, unint64_t *a2, int a3, int a4)
{
  *a1 = a2;
  a1[1] = (unint64_t *)a3;
  a1[2] = a2 + 16;
  if (a4)
  {
    atomic_store(0, a2);
    atomic_store(0, *a1 + 8);
  }
}

BOOL sub_1002879C0(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = atomic_load(*(unint64_t **)a1);
  v3 = v2 % v1;
  v4 = atomic_load((unint64_t *)(*(_QWORD *)a1 + 64));
  return v3 == v4;
}

uint64_t sub_1002879EC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *object;
  uint64_t v10;
  Swift::String v11;
  void *v12;
  uint64_t v13;
  Swift::String v14;
  void *v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  void *v22;
  Swift::String v23;
  Swift::String v25;

  v4 = HIWORD(a3);
  v5 = HIBYTE(a3);
  v25._countAndFlagsBits = 0x3A7367616C66;
  v25._object = (void *)0xE600000000000000;
  v6 = sub_1000039AC((uint64_t *)&unk_100380810);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002CAB70;
  *(_QWORD *)(v7 + 56) = &type metadata for UInt8;
  *(_QWORD *)(v7 + 64) = &protocol witness table for UInt8;
  *(_BYTE *)(v7 + 32) = v4;
  v8._countAndFlagsBits = String.init(format:_:)(1478850608, 0xE400000000000000, v7);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v25._object);
  strcpy((char *)&v25, ",userflags:");
  HIDWORD(v25._object) = -352321536;
  v10 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1002CAB70;
  *(_QWORD *)(v10 + 56) = &type metadata for UInt8;
  *(_QWORD *)(v10 + 64) = &protocol witness table for UInt8;
  *(_BYTE *)(v10 + 32) = v5;
  v11._countAndFlagsBits = String.init(format:_:)(1478850608, 0xE400000000000000, v10);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRetain(0xE100000000000000);
  String.append(_:)(v25);
  swift_bridgeObjectRelease(0xE100000000000000);
  swift_bridgeObjectRelease(v25._object);
  strcpy((char *)&v25, ",bssid:");
  v25._object = (void *)0xE700000000000000;
  v13 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1002CAB70;
  *(_QWORD *)(v13 + 56) = &type metadata for UInt64;
  *(_QWORD *)(v13 + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(v13 + 32) = a2;
  v14._countAndFlagsBits = String.init(format:_:)(0x586C6C32313025, 0xE700000000000000, v13);
  v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRetain(0xE100000000000000);
  String.append(_:)(v25);
  swift_bridgeObjectRelease(0xE100000000000000);
  swift_bridgeObjectRelease(v25._object);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int8, &protocol witness table for Int8);
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRetain(0xE100000000000000);
  v18._countAndFlagsBits = 0x3A697373722CLL;
  v18._object = (void *)0xE600000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(0xE100000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  strcpy((char *)&v25, ",channel:");
  WORD1(v25._object) = 0;
  HIDWORD(v25._object) = -385875968;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRetain(0xE100000000000000);
  String.append(_:)(v25);
  swift_bridgeObjectRelease(0xE100000000000000);
  swift_bridgeObjectRelease(v25._object);
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)&v25, ",timestamp_ns:");
  HIBYTE(v25._object) = -18;
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRetain(0xE100000000000000);
  String.append(_:)(v25);
  swift_bridgeObjectRelease(0xE100000000000000);
  swift_bridgeObjectRelease(v25._object);
  swift_bridgeObjectRetain(0xE100000000000000);
  v23._countAndFlagsBits = 125;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(0xE100000000000000);
  return 123;
}

uint64_t sub_100287DF8()
{
  return 0;
}

uint64_t sub_100287E0C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_100287E44(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t result;
  _BYTE v10[24];

  result = swift_beginAccess(v4 + 16, v10, 1, 0);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  *(_BYTE *)(v4 + 40) = a4 & 1;
  return result;
}

void *sub_100287EA8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100287EE4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 48, v2, 0, 0);
  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_100287F1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t result;
  _BYTE v10[24];

  result = swift_beginAccess(v4 + 48, v10, 1, 0);
  *(_QWORD *)(v4 + 48) = a1;
  *(_QWORD *)(v4 + 56) = a2;
  *(_QWORD *)(v4 + 64) = a3;
  *(_BYTE *)(v4 + 72) = a4 & 1;
  return result;
}

void *sub_100287F80(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 48, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100287FBC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 80, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 80);
  sub_100288008(v1, *(_QWORD *)(v0 + 88));
  return v1;
}

uint64_t sub_100288008(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_100288018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v2 + 80, v8, 1, 0);
  v5 = *(_QWORD *)(v2 + 80);
  v6 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return sub_100288068(v5, v6);
}

uint64_t sub_100288068(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void *sub_100288078(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 80, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_1002880B4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 96, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 96);
  sub_100288008(v1, *(_QWORD *)(v0 + 104));
  return v1;
}

uint64_t sub_100288100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v2 + 96, v8, 1, 0);
  v5 = *(_QWORD *)(v2 + 96);
  v6 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return sub_100288068(v5, v6);
}

void *sub_100288150(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 96, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10028818C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 112, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 112));
}

uint64_t sub_1002881C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 112, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease(v3);
}

void *sub_100288204(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 112, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100288240()
{
  return 1;
}

double sub_100288248()
{
  return 0.0;
}

double sub_100288250()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 128, v2, 0, 0);
  return *(double *)(v0 + 128);
}

uint64_t sub_100288280(double a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 128, v4, 1, 0);
  *(double *)(v1 + 128) = a1;
  return result;
}

void *sub_1002882BC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 128, a1, 33, 0);
  return &j_j__swift_endAccess;
}

double sub_1002882F8()
{
  return 10.0;
}

double sub_100288300()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 144, v2, 0, 0);
  return *(double *)(v0 + 144);
}

uint64_t sub_100288330(double a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 144, v4, 1, 0);
  *(double *)(v1 + 144) = a1;
  return result;
}

void *sub_10028836C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 144, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_1002883A8()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 152, v2, 0, 0);
  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 152));
}

uint64_t sub_1002883DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 152, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 152) = a1;
  return swift_unknownObjectRelease(v3);
}

void *sub_100288420(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 152, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10028845C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 160, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 160));
}

uint64_t sub_100288490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 160, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 160) = a1;
  return swift_release(v3);
}

void *sub_1002884D4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 160, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_100288510()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 168, v2, 0, 0);
  return *(_QWORD *)(v0 + 168);
}

uint64_t sub_100288540(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 168, v4, 1, 0);
  *(_QWORD *)(v1 + 168) = a1;
  return result;
}

void *sub_10028857C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 168, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_1002885B8()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 176, v2, 0, 0);
  return *(_QWORD *)(v0 + 176);
}

uint64_t sub_1002885EC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v6[24];

  result = swift_beginAccess(v2 + 176, v6, 1, 0);
  *(_QWORD *)(v2 + 176) = a1;
  *(_BYTE *)(v2 + 184) = a2 & 1;
  return result;
}

void *sub_10028863C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 176, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100288678()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 192, v2, 0, 0);
  return *(_QWORD *)(v0 + 192);
}

uint64_t sub_1002886A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 192, v4, 1, 0);
  *(_QWORD *)(v1 + 192) = a1;
  return result;
}

void *sub_1002886E4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 192, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100288720()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 200, v2, 0, 0);
  return *(_QWORD *)(v0 + 200);
}

uint64_t sub_100288754(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v6[24];

  result = swift_beginAccess(v2 + 200, v6, 1, 0);
  *(_QWORD *)(v2 + 200) = a1;
  *(_BYTE *)(v2 + 208) = a2 & 1;
  return result;
}

void *sub_1002887A4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 200, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_1002887E0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 216, v2, 0, 0);
  return *(_QWORD *)(v0 + 216);
}

uint64_t sub_100288810(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 216, v4, 1, 0);
  *(_QWORD *)(v1 + 216) = a1;
  return result;
}

void *sub_10028884C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 216, a1, 33, 0);
  return &j_j__swift_endAccess;
}

double sub_10028888C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 224, v2, 0, 0);
  return *(double *)(v0 + 224);
}

uint64_t sub_1002888BC(double a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 224, v4, 1, 0);
  *(double *)(v1 + 224) = a1;
  return result;
}

void *sub_1002888F8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 224, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100288934()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 232, v2, 0, 0);
  return *(_QWORD *)(v0 + 232);
}

uint64_t sub_100288964(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 232, v4, 1, 0);
  *(_QWORD *)(v1 + 232) = a1;
  return result;
}

void *sub_1002889A0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 232, a1, 33, 0);
  return &j_j__swift_endAccess;
}

double sub_1002889E0()
{
  return 20.0;
}

double sub_1002889E8()
{
  uint64_t v0;

  return *(double *)(v0 + 240);
}

uint64_t sub_1002889F0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 248, v2, 0, 0);
  return *(_QWORD *)(v0 + 248);
}

uint64_t sub_100288A20(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 248, v4, 1, 0);
  *(_QWORD *)(v1 + 248) = a1;
  return result;
}

void *sub_100288A5C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 248, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100288A98()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 256, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 256));
}

uint64_t sub_100288ACC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 256, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 256);
  *(_QWORD *)(v1 + 256) = a1;
  return swift_bridgeObjectRelease(v3);
}

void *sub_100288B10(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 256, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100288B4C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 264, v2, 0, 0);
  return *(unsigned int *)(v0 + 264);
}

uint64_t sub_100288B7C(int a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 264, v4, 1, 0);
  *(_DWORD *)(v1 + 264) = a1;
  return result;
}

void *sub_100288BB8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 264, a1, 33, 0);
  return &j_j__swift_endAccess;
}

double sub_100288BF4()
{
  return 0.05;
}

id sub_100288C00()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 280, v2, 0, 0);
  return *(id *)(v0 + 280);
}

void sub_100288C30(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 280, v4, 1, 0);
  v3 = *(void **)(v1 + 280);
  *(_QWORD *)(v1 + 280) = a1;

}

void *sub_100288C74(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 280, a1, 33, 0);
  return &j_j__swift_endAccess;
}

double sub_100288CB0()
{
  return 1.0;
}

uint64_t ALShmQueueHandler.__allocating_init(queue:interval:)(void *a1, double a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 288, 7);
  ALShmQueueHandler.init(queue:interval:)(a1, a2);
  return v5;
}

uint64_t ALShmQueueHandler.init(queue:interval:)(void *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *address;
  uint64_t (*v23)(uint64_t);
  unint64_t *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  id v68;
  char *v69;
  __int128 aBlock;
  uint64_t (*v71)(uint64_t);
  void *v72;
  void (*v73)();
  uint64_t v74;
  _BYTE v75[24];
  _BYTE v76[24];
  _BYTE v77[16];
  _BYTE v78[8];
  _BYTE v79[8];
  _BYTE v80[8];

  v3 = v2;
  v55 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v62 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for DispatchQoS(0);
  v52 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v63 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for DispatchTimeInterval(0);
  v65 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v64 = (_QWORD *)((char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = type metadata accessor for DispatchTime(0);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v67 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v58 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v69 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for Logger(0);
  v59 = *(_QWORD *)(v60 - 8);
  v11 = __chkstk_darwin(v60);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v51 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v51 - v17;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 40) = 1;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 72) = 1;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_QWORD *)(v3 + 112) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 120) = 1;
  *(_OWORD *)(v3 + 128) = xmmword_1002EF200;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_QWORD *)(v3 + 176) = 0;
  *(_BYTE *)(v3 + 184) = 1;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_BYTE *)(v3 + 208) = 1;
  *(_QWORD *)(v3 + 216) = 0;
  *(Swift::Double *)(v3 + 224) = machContTimeSec()();
  *(_QWORD *)(v3 + 232) = 0;
  v19 = sub_1002889E0();
  *(_QWORD *)(v3 + 248) = 0;
  *(double *)(v3 + 240) = v19;
  *(_QWORD *)(v3 + 256) = &_swiftEmptyArrayStorage;
  *(_DWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v3 + 272) = 0x3FA999999999999ALL;
  *(_QWORD *)(v3 + 280) = a1;
  *(_QWORD *)&aBlock = 0;
  v68 = a1;
  if (shmem_map("aop2.gps-data", 0, &aBlock))
  {
    v49 = rpclog.getter((uint64_t)v18);
    __chkstk_darwin(v49);
    result = Logger._fatal(_:function:file:line:)(sub_100289BA4, (uint64_t)(&v51 - 2), (uint64_t *)"initSharedMemory(name:)", 23, 2, (uint64_t *)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2, 94);
  }
  else
  {
    v20 = aBlock;
    if (!(_QWORD)aBlock)
    {
LABEL_11:

      return v3;
    }
    *(_QWORD *)&aBlock = 0;
    if (!shmem_map("aop2.gps-debug", 0, &aBlock))
    {
      v21 = aBlock;
      if ((_QWORD)aBlock)
      {
        swift_beginAccess(v3 + 192, v80, 1, 0);
        *(_QWORD *)(v3 + 192) = v20;
        swift_beginAccess(v3 + 248, v79, 1, 0);
        *(_QWORD *)(v3 + 248) = v21;
        address = (unint64_t *)shmem_get_address(v20);
        sub_100287998((unint64_t **)&aBlock, address, 30, 0);
        v51 = aBlock;
        v23 = v71;
        swift_beginAccess(v3 + 16, v78, 1, 0);
        *(_OWORD *)(v3 + 16) = v51;
        *(_QWORD *)(v3 + 32) = v23;
        *(_BYTE *)(v3 + 40) = 0;
        v24 = (unint64_t *)shmem_get_address(v21);
        sub_100287998((unint64_t **)&aBlock, v24, 61, 0);
        v51 = aBlock;
        v25 = v71;
        swift_beginAccess(v3 + 48, v77, 1, 0);
        *(_OWORD *)(v3 + 48) = v51;
        *(_QWORD *)(v3 + 64) = v25;
        *(_BYTE *)(v3 + 72) = 0;
        v26 = rpclog.getter((uint64_t)v13);
        v27 = v61;
        v28 = Logger.logObject.getter(v26);
        v29 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v30 = 134349056;
          *(double *)&aBlock = a2;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v30 + 4, v30 + 12);
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Polling interval is %{public}f sec", v30, 0xCu);
          swift_slowDealloc(v30, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v59 + 8))(v13, v60);
        sub_100289BD8();
        swift_beginAccess(v3 + 280, v76, 0, 0);
        v31 = *(void **)(v3 + 280);
        *(_QWORD *)&aBlock = &_swiftEmptyArrayStorage;
        v32 = sub_10000FD38((unint64_t *)&unk_100380820, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
        v33 = v31;
        v34 = sub_1000039AC((uint64_t *)&unk_100382620);
        v35 = sub_10028D310((unint64_t *)&unk_100380830, (uint64_t *)&unk_100382620);
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v34, v35, v27, v32);
        v36 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v69, v31);

        v37 = (_QWORD *)(v3 + 152);
        (*(void (**)(char *, uint64_t))(v58 + 8))(v69, v27);
        swift_beginAccess(v3 + 152, v75, 1, 0);
        v38 = *(_QWORD *)(v3 + 152);
        *(_QWORD *)(v3 + 152) = v36;
        swift_unknownObjectRelease(v38);
        v39 = *(_QWORD *)(v3 + 152);
        if (v39)
        {
          ObjectType = swift_getObjectType(*v37);
          v41 = swift_unknownObjectRetain(v39);
          static DispatchTime.now()(v41);
          v42 = v64;
          *v64 = 0;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v65 + 104))(v42, enum case for DispatchTimeInterval.nanoseconds(_:), v66);
          OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v67, v42, ObjectType, a2);
          swift_unknownObjectRelease(v39);
          (*(void (**)(_QWORD *, uint64_t))(v65 + 8))(v64, v66);
          (*(void (**)(char *, uint64_t))(v56 + 8))(v67, v57);
          v43 = *v37;
          if (*v37)
          {
            v44 = swift_getObjectType(*v37);
            v73 = sub_100289C14;
            v74 = v3;
            *(_QWORD *)&aBlock = _NSConcreteStackBlock;
            *((_QWORD *)&aBlock + 1) = 1107296256;
            v71 = sub_100284B08;
            v72 = &unk_10035AA68;
            v45 = _Block_copy(&aBlock);
            swift_retain_n(v3, 2);
            v46 = swift_unknownObjectRetain(v43);
            static DispatchQoS.unspecified.getter(v46);
            sub_100289784();
            OS_dispatch_source.setEventHandler(qos:flags:handler:)(v63, v62, v45, v44);
            _Block_release(v45);
            swift_release(v3);
            swift_unknownObjectRelease(v43);
            (*(void (**)(char *, uint64_t))(v54 + 8))(v62, v55);
            (*(void (**)(char *, uint64_t))(v52 + 8))(v63, v53);
            swift_release(v74);
            v47 = *(_QWORD *)(v3 + 152);
            if (v47)
            {
              swift_getObjectType(*(_QWORD *)(v3 + 152));
              swift_unknownObjectRetain(v47);
              OS_dispatch_source.activate()();
              swift_unknownObjectRelease(v47);
            }
          }
        }
      }
      goto LABEL_11;
    }
    v50 = rpclog.getter((uint64_t)v16);
    __chkstk_darwin(v50);
    result = Logger._fatal(_:function:file:line:)(sub_10028E168, (uint64_t)(&v51 - 2), (uint64_t *)"initSharedMemory(name:)", 23, 2, (uint64_t *)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2, 94);
  }
  __break(1u);
  return result;
}

void sub_100289624(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x10028962CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100289648(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for Logger(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v7 = String.utf8CString.getter(a1, a2);
  LODWORD(a2) = shmem_map((const char *)(v7 + 32), 0, &v10);
  swift_release(v7);
  if ((_DWORD)a2)
  {
    v9 = rpclog.getter((uint64_t)v6);
    __chkstk_darwin(v9);
    Logger._fatal(_:function:file:line:)(sub_10028E168, (uint64_t)(&v10 - 4), (uint64_t *)"initSharedMemory(name:)", 23, 2, (uint64_t *)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2, 94);
    __break(1u);
  }
  return v10;
}

void sub_100289778(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __break(1u);
}

uint64_t sub_100289784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = &_swiftEmptyArrayStorage;
  v1 = sub_10000FD38((unint64_t *)&qword_100381D30, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_1000039AC((uint64_t *)&unk_100380840);
  v3 = sub_10028D310((unint64_t *)&qword_100381D40, (uint64_t *)&unk_100380840);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t ALShmQueueHandler.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v1 = type metadata accessor for Logger(0);
  v2 = __chkstk_darwin(v1);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v2);
  v6 = &v14[-v5 - 8];
  swift_beginAccess(v0 + 192, v14, 33, 0);
  if (shmem_unmap((io_object_t *)(v0 + 192)))
  {
    v8 = rpclog.getter((uint64_t)v6);
    __chkstk_darwin(v8);
    v9 = &v13 - 4;
    v10 = sub_10028D274;
    v12 = 84;
  }
  else
  {
    swift_endAccess(v14);
    swift_beginAccess(v0 + 248, v14, 33, 0);
    if (!shmem_unmap((io_object_t *)(v0 + 248)))
    {
      swift_endAccess(v14);
      sub_100288068(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
      sub_100288068(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
      swift_unknownObjectRelease(*(_QWORD *)(v0 + 152));
      swift_release(*(_QWORD *)(v0 + 160));
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));

      return v0;
    }
    v11 = rpclog.getter((uint64_t)v4);
    __chkstk_darwin(v11);
    v9 = &v13 - 4;
    v10 = sub_10028E16C;
    v12 = 84;
  }
  result = Logger._fatal(_:function:file:line:)(v10, (uint64_t)v9, (uint64_t *)"deinitSharedMemory(handle:)", 27, 2, (uint64_t *)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2, v12);
  __break(1u);
  return result;
}

uint64_t sub_100289A14(io_object_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for Logger(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = shmem_unmap(a1);
  if ((_DWORD)result)
  {
    v6 = rpclog.getter((uint64_t)v4);
    __chkstk_darwin(v6);
    result = Logger._fatal(_:function:file:line:)(sub_10028E16C, (uint64_t)(&v7 - 4), (uint64_t *)"deinitSharedMemory(handle:)", 27, 2, (uint64_t *)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2, 84);
    __break(1u);
  }
  return result;
}

uint64_t ALShmQueueHandler.__deallocating_deinit()
{
  uint64_t v0;

  ALShmQueueHandler.deinit();
  return swift_deallocClassInstance(v0, 288, 7);
}

uint64_t sub_100289B00(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  unint64_t v7;
  Swift::String v8;
  void *object;
  Swift::String v10;

  _StringGuts.grow(_:)(a2);
  v6._countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  v7 = sub_10028E118();
  v8._countAndFlagsBits = BinaryInteger.description.getter(&type metadata for Int32, v7);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t sub_100289BA4()
{
  uint64_t v0;

  return sub_100289B00(*(_DWORD *)(v0 + 16), 34, 0xD000000000000020, (void *)0x8000000100305700);
}

unint64_t sub_100289BD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100382610;
  if (!qword_100382610)
  {
    v1 = objc_opt_self(OS_dispatch_source);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100382610);
  }
  return result;
}

void sub_100289C14()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = objc_autoreleasePoolPush();
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 816))(v2);
  objc_autoreleasePoolPop(v1);
}

uint64_t sub_100289C50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100289C60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100289C68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v6)(uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 328);
  swift_retain(a2);
  return v6(a1, a2);
}

uint64_t sub_100289CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);

  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 472);
  v2 = swift_retain(a1);
  return v4(v2);
}

uint64_t sub_100289CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v6)(uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 352);
  swift_retain(a2);
  return v6(a1, a2);
}

uint64_t (*sub_100289D34())(uint64_t *, _QWORD)
{
  double *v0;
  double *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t (*v21)(_DWORD *);
  unint64_t v22;
  char v23;
  uint64_t (*result)(uint64_t *, _QWORD);
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  char v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  void *v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  void *v113;
  uint64_t aBlock;
  uint64_t v115;
  uint64_t (*v116)(uint64_t);
  void *v117;
  uint64_t (*v118)();
  _QWORD *v119;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v111 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v109 = *(_QWORD *)(v5 - 8);
  v110 = v5;
  __chkstk_darwin(v5);
  v108 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for DispatchTime(0);
  v105 = *(_QWORD *)(v112 - 8);
  v7 = __chkstk_darwin(v112);
  v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v104 = (char *)&v97 - v10;
  v101 = type metadata accessor for Logger(0);
  v100 = *(_QWORD *)(v101 - 8);
  v11 = __chkstk_darwin(v101);
  v98 = (uint64_t)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v97 = (uint64_t)&v97 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v97 - v16;
  __chkstk_darwin(v15);
  v99 = (uint64_t)&v97 - v18;
  v107 = swift_allocObject(&unk_10035AAA0, 17, 7);
  *(_BYTE *)(v107 + 16) = 0;
  v19 = swift_allocObject(&unk_10035AAC8, 144, 7);
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)(v19 + 64) = 0u;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 96) = 0u;
  *(_OWORD *)(v19 + 112) = 0u;
  *(_OWORD *)(v19 + 128) = 0u;
  v106 = v19;
  *(_OWORD *)(v19 + 16) = 0u;
  v20 = sub_10028D2C8((_DWORD *)(v19 + 16));
  v21 = *(uint64_t (**)(_DWORD *))(*(_QWORD *)v0 + 560);
  v22 = v21(v20);
  if ((v23 & 1) != 0)
    goto LABEL_9;
  result = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v0 + 600))(&aBlock);
  if (*v25 == -1)
  {
    __break(1u);
    goto LABEL_47;
  }
  ++*v25;
  v26 = result(&aBlock, 0);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 584))(v26);
  if (v22 < 3)
    goto LABEL_9;
  result = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v0 + 648))(&aBlock);
  if (*v27 == -1)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  ++*v27;
  v28 = result(&aBlock, 0);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 464))(v28);
  v30 = v29;
  if (v29)
  {
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 200))(v29);
    swift_release(v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = v30 == 0;
  v33 = v99;
  v34 = rpclog.getter(v99);
  __chkstk_darwin(v34);
  *(&v97 - 4) = v31;
  *((_BYTE *)&v97 - 24) = v32;
  v96 = 122;
  Logger._fault(_:function:file:line:)(sub_10028D484, (uint64_t)(&v97 - 6), (uint64_t *)"fetchQueue()", 12, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2);
  (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v33, v101);
  v22 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v1 + 568))(0, 1);
LABEL_9:
  v103 = v3;
  v35 = (*(double (**)(unint64_t))(*(_QWORD *)v1 + 608))(v22);
  v36 = v1[30];
  v37 = machContTimeSec()();
  result = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(void))(*(_QWORD *)v1 + 272))();
  if ((v40 & 1) == 0)
  {
    v41 = v2;
    aBlock = (uint64_t)result;
    v115 = v38;
    v116 = v39;
    v42 = sub_1002879C0((uint64_t)&aBlock);
    v43 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 464);
    v44 = v43();
    if (!v44)
    {
      v48 = 0;
      goto LABEL_28;
    }
    v45 = v44;
    v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 200))(v44);
    v44 = swift_release(v45);
    v47 = !v42;
    if (v35 + v36 > v37)
      v47 = 1;
    if (v46)
      v48 = 0;
    else
      v48 = v47;
    if ((v47 & 1) != 0 || v46)
    {
LABEL_28:
      v64 = ((uint64_t (*)(uint64_t))v43)(v44);
      v102 = v41;
      if (v64)
      {
        v65 = v64;
        if (v42 && (v48 & 1) == 0)
        {
          v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 272))(v64);
          if ((v72 & 0x100) != 0)
          {
            v78 = v99;
            rpclog.getter(v99);
            v96 = 156;
            Logger._fault(_:function:file:line:)((uint64_t (*)(void))sub_10028A828, 0, (uint64_t *)"fetchQueue()", 12, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2);
            swift_release(v65);
          }
          else
          {
            if (sub_100291F70(0) == v72)
            {
              v73 = v97;
              rpclog.getter(v97);
              v74 = swift_retain(v1);
              v75 = Logger.logObject.getter(v74);
              v76 = static os_log_type_t.error.getter(v75);
              if (os_log_type_enabled(v75, v76))
              {
                v77 = (uint8_t *)swift_slowAlloc(12, -1);
                *(_DWORD *)v77 = 134349056;
                aBlock = 0x3FA999999999999ALL;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v115, v77 + 4, v77 + 12);
                swift_release(v1);
                _os_log_impl((void *)&_mh_execute_header, v75, v76, "DRAMMove may be stuck, nudging and waiting %{public}f seconds", v77, 0xCu);
                swift_slowDealloc(v77, -1, -1);

              }
              else
              {

                swift_release(v65);
                v65 = (uint64_t)v1;
              }
              swift_release(v65);
              v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8))(v73, v101);
              v80 = 0.05;
              goto LABEL_43;
            }
            v78 = v99;
            v79 = rpclog.getter(v99);
            __chkstk_darwin(v79);
            v96 = 153;
            Logger._fault(_:function:file:line:)(sub_10028D350, (uint64_t)(&v97 - 4), (uint64_t *)"fetchQueue()", 12, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2);
            swift_release(v65);
          }
          v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8))(v78, v101);
        }
        else
        {
          v66 = swift_release(v64);
        }
      }
      else
      {
        v67 = v98;
        v68 = rpclog.getter(v98);
        v69 = Logger.logObject.getter(v68);
        v70 = static os_log_type_t.error.getter(v69);
        if (os_log_type_enabled(v69, v70))
        {
          v71 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v71 = 0;
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "#ShmQueue, _tbHandler is nil. Skip nudge", v71, 2u);
          swift_slowDealloc(v71, -1, -1);
        }

        v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8))(v67, v101);
      }
      v80 = 0.0;
LABEL_43:
      v81 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 728))(v66);
      static DispatchTime.now()(v81);
      v82 = v104;
      + infix(_:_:)(v9, v80);
      v105 = *(_QWORD *)(v105 + 8);
      ((void (*)(char *, uint64_t))v105)(v9, v112);
      v83 = (_QWORD *)swift_allocObject(&unk_10035AAF0, 40, 7);
      v85 = v106;
      v84 = v107;
      v83[2] = v1;
      v83[3] = v84;
      v83[4] = v85;
      v118 = sub_10028D304;
      v119 = v83;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v115 = 1107296256;
      v116 = sub_10028B824;
      v117 = &unk_10035AB08;
      v86 = _Block_copy(&aBlock);
      swift_retain(v1);
      swift_retain(v84);
      v87 = swift_retain(v85);
      v88 = v108;
      static DispatchQoS.unspecified.getter(v87);
      v113 = &_swiftEmptyArrayStorage;
      v89 = sub_10000FD38((unint64_t *)&qword_100381D30, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v90 = sub_1000039AC((uint64_t *)&unk_100380840);
      v91 = sub_10028D310((unint64_t *)&qword_100381D40, (uint64_t *)&unk_100380840);
      v92 = v111;
      v93 = v90;
      v94 = v102;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v113, v93, v91, v102, v89);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v82, v88, v92, v86);
      _Block_release(v86);

      (*(void (**)(char *, uint64_t))(v103 + 8))(v92, v94);
      (*(void (**)(char *, uint64_t))(v109 + 8))(v88, v110);
      ((void (*)(char *, uint64_t))v105)(v82, v112);
      v95 = v119;
      swift_release(v84);
      swift_release(v85);
      return (uint64_t (*)(uint64_t *, _QWORD))swift_release(v95);
    }
    v44 = v21((_DWORD *)v44);
    if ((v49 & 1) == 0)
    {
LABEL_27:
      v48 = 1;
      goto LABEL_28;
    }
    v50 = sub_10028D3F4(0xFFFFFFFFFFFFFFFFLL);
    v51 = v43();
    if (v51)
    {
      v52 = v51;
      v53 = v50 + 1;
      v54 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v51 + 256))(v50 + 1);
      swift_release(v52);
      if ((v54 & 1) != 0)
      {
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v1 + 568))(v53, 0);
        v57 = v17;
        v58 = rpclog.getter((uint64_t)v17);
        v59 = Logger.logObject.getter(v58);
        v60 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v59, v60))
        {
          v61 = v53;
          v62 = v60;
          v63 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v63 = 134349056;
          aBlock = v61;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v115, v63 + 4, v63 + 12);
          _os_log_impl((void *)&_mh_execute_header, v59, v62, "Pinged AOP2, id: %{public}llu", v63, 0xCu);
          swift_slowDealloc(v63, -1, -1);
        }

        v44 = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v57, v101);
        goto LABEL_27;
      }
    }
    v55 = v99;
    rpclog.getter(v99);
    v96 = 136;
    Logger._fault(_:function:file:line:)((uint64_t (*)(void))sub_10028A80C, 0, (uint64_t *)"fetchQueue()", 12, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2);
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v55, v101);
    result = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v1 + 648))(&aBlock);
    if (*v56 != -1)
    {
      ++*v56;
      v44 = result(&aBlock, 0);
      goto LABEL_27;
    }
    goto LABEL_48;
  }
LABEL_49:
  __break(1u);
  return result;
}

unint64_t sub_10028A80C()
{
  return 0xD000000000000010;
}

unint64_t sub_10028A828()
{
  return 0xD000000000000030;
}

uint64_t sub_10028A844(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void (*v36)(uint64_t *, _QWORD);
  uint64_t v37;
  _OWORD *v38;
  Swift::Double v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _BYTE *v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  Swift::Double v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  Swift::Double v123;
  uint64_t (*v124)(uint64_t *, _QWORD);
  char **v125;
  char **v126;
  char *v127;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t (*v132)(void);
  char v133;
  uint64_t v134;
  NSObject *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  char v143;
  uint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  uint8_t *v147;
  double v148;
  _BYTE *v149;
  uint64_t result;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t (*v157)(uint64_t);
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  char *v161;
  uint64_t v162;
  int *v163;
  _BYTE *v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  int *v172;
  char *v173;
  char *v174;
  char *v175;
  __int128 v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t (*v185)(char *, uint64_t);
  char v186[8];
  uint64_t v187[4];
  char v188[8];
  char v189[8];
  char v190;
  char v191[8];
  char v192[8];
  uint64_t v193;

  v6 = type metadata accessor for Logger(0);
  v162 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v167 = (char *)&v153 - v11;
  v12 = __chkstk_darwin(v10);
  v168 = (uint64_t)&v153 - v13;
  v14 = __chkstk_darwin(v12);
  v174 = (char *)&v153 - v15;
  v16 = __chkstk_darwin(v14);
  v173 = (char *)&v153 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v153 - v19;
  v21 = __chkstk_darwin(v18);
  v184 = (uint64_t)&v153 - v22;
  __chkstk_darwin(v21);
  v161 = (char *)&v153 - v23;
  v159 = type metadata accessor for Mirror(0);
  v158 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v170 = (char *)&v153 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = a3;
  a3 += 4;
  v25 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272);
  v164 = (_BYTE *)(a2 + 16);
  swift_beginAccess(a2 + 16, v192, 1, 0);
  swift_beginAccess(a3, v191, 0, 0);
  swift_beginAccess(a3, v189, 0, 0);
  v172 = a3;
  v26 = swift_beginAccess(a3, v188, 0, 0);
  v157 = v25;
  v27 = v25(v26);
  if ((v31 & 1) != 0)
    goto LABEL_75;
  v171 = 0;
  *(_QWORD *)&v30 = 134349312;
  v160 = v30;
  *(_QWORD *)&v30 = 136315138;
  v176 = v30;
  v175 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v30 = 134349056;
  v156 = v30;
  *(_QWORD *)&v30 = 136316162;
  v155 = v30;
  *((_QWORD *)&v32 + 1) = 2;
  v154 = xmmword_1002CAB70;
  *(_QWORD *)&v32 = 134283521;
  v153 = v32;
  v177 = a1;
  v179 = v6;
  v169 = v9;
  v178 = v20;
  while (1)
  {
    v187[0] = v27;
    v187[1] = v28;
    v187[2] = v29;
    if (sub_1002879C0((uint64_t)v187))
      break;
    *v164 = 1;
    v27 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)a1 + 288))(v187);
    if ((*(_BYTE *)(v35 + 24) & 1) != 0)
      goto LABEL_76;
    v36 = (void (*)(uint64_t *, _QWORD))v27;
    v37 = v35;
    v38 = v172;
    swift_beginAccess(v172, v186, 33, 0);
    sub_10028DF88(v37, v38);
    swift_endAccess(v186);
    v36(v187, 0);
    v39 = machContTimeSec()();
    (*(void (**)(double))(*(_QWORD *)a1 + 616))(v39);
    v40 = v163;
    v42 = *((_QWORD *)v163 + 3);
    v41 = *((_QWORD *)v163 + 4);
    v43 = *((_QWORD *)v163 + 6);
    v44 = *((_QWORD *)v163 + 7);
    v45 = *((_QWORD *)v163 + 9);
    v46 = *((_QWORD *)v163 + 10);
    v47 = *((_QWORD *)v163 + 12);
    v48 = *((_QWORD *)v163 + 13);
    v49 = *((_QWORD *)v163 + 16);
    v185 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v163 + 15);
    v187[3] = sub_1000039AC(&qword_100380C40);
    v50 = swift_allocObject(&unk_10035AE60, 136, 7);
    v187[0] = v50;
    *(_QWORD *)(v50 + 16) = v42;
    *(_QWORD *)(v50 + 24) = v41;
    *(_DWORD *)(v50 + 32) = v40[10];
    *(_QWORD *)(v50 + 40) = v43;
    *(_QWORD *)(v50 + 48) = v44;
    *(_DWORD *)(v50 + 56) = v40[16];
    *(_QWORD *)(v50 + 64) = v45;
    *(_QWORD *)(v50 + 72) = v46;
    *(_DWORD *)(v50 + 80) = v40[22];
    *(_QWORD *)(v50 + 88) = v47;
    *(_QWORD *)(v50 + 96) = v48;
    *(_DWORD *)(v50 + 104) = v40[28];
    *(_QWORD *)(v50 + 112) = v185;
    *(_QWORD *)(v50 + 120) = v49;
    *(_DWORD *)(v50 + 128) = v40[34];
    v51 = Mirror.init(reflecting:)(v187);
    v52 = Mirror.children.getter(v51);
    v53 = sub_1000039AC(&qword_100380C48);
    v9 = v171;
    v54 = dispatch thunk of _AnySequenceBox._map<A>(_:)(sub_10028DB18, 0, v53);
    if (v9)
    {
LABEL_80:
      v187[0] = (uint64_t)v9;
      v151 = sub_1000039AC(&qword_100380878);
      v152 = swift_dynamicCast(v151, v187, v151, &type metadata for Never, 7);
      result = swift_willThrowTypedImpl(v152, &type metadata for Never, &protocol witness table for Never);
      __break(1u);
      return result;
    }
    v55 = v54;
    v171 = 0;
    swift_release(v52);
    v9 = v161;
    rpclog.getter((uint64_t)v161);
    swift_retain(v40);
    v56 = swift_bridgeObjectRetain(v55);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.debug.getter();
    v59 = os_log_type_enabled(v57, v58);
    v60 = v179;
    if (v59)
    {
      v61 = swift_slowAlloc(22, -1);
      *(_DWORD *)v61 = v160;
      *(_QWORD *)(v61 + 4) = v40[4];
      swift_release(v40);
      *(_WORD *)(v61 + 12) = 2050;
      *(_QWORD *)(v61 + 14) = *(_QWORD *)(v55 + 16);
      swift_bridgeObjectRelease(v55);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "#WiFi,fetchQueue,block.next,%{public}ld,count,%{public}ld", (uint8_t *)v61, 0x16u);
      swift_slowDealloc(v61, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease(v55);
      swift_release(v40);
    }
    a1 = v177;
    v62 = (uint64_t)v178;
    v185 = *(uint64_t (**)(char *, uint64_t))(v162 + 8);
    v63 = v185(v9, v60);
    if (*(_QWORD *)(v55 + 16) >= *v172)
      v64 = (char *)*v172;
    else
      v64 = *(char **)(v55 + 16);
    if (((unint64_t)v64 & 0x8000000000000000) != 0)
      goto LABEL_72;
    if (v64)
    {
      v9 = 0;
      v65 = (_BYTE *)(v55 + 56);
      v181 = v55;
      v180 = v64;
      while (1)
      {
        if (v64 == v9)
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          v27 = swift_bridgeObjectRelease(v63);
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          swift_bridgeObjectRelease(v27);
          __break(1u);
LABEL_78:
          swift_release(a1);
          __break(1u);
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }
        if ((unint64_t)v9 >= *(_QWORD *)(v55 + 16))
          goto LABEL_71;
        if ((*v65 & 1) != 0)
        {
          v66 = rpclog.getter(v184);
          v67 = Logger.logObject.getter(v66);
          v68 = static os_log_type_t.error.getter(v67);
          if (os_log_type_enabled(v67, v68))
          {
            v69 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v69 = 0;
            _os_log_impl((void *)&_mh_execute_header, v67, v68, "#WiFi,fetchQueue,empty", v69, 2u);
            swift_slowDealloc(v69, -1, -1);
          }

          v70 = &v193;
LABEL_25:
          v63 = v185((char *)*(v70 - 32), v60);
          goto LABEL_18;
        }
        v71 = a1;
        v73 = *((_QWORD *)v65 - 3);
        v72 = *((_QWORD *)v65 - 2);
        v74 = *((_QWORD *)v65 - 1);
        v75 = rpclog.getter(v62);
        v76 = Logger.logObject.getter(v75);
        v77 = static os_log_type_t.debug.getter();
        v78 = os_log_type_enabled(v76, v77);
        v183 = v73;
        v182 = v72;
        if (v78)
        {
          v79 = swift_slowAlloc(12, -1);
          v80 = swift_slowAlloc(32, -1);
          v187[0] = v80;
          *(_DWORD *)v79 = v176;
          v81 = sub_1002879EC(v73, v72, v74);
          v83 = v82;
          *(_QWORD *)(v79 + 4) = sub_10001818C(v81, v82, v187);
          swift_bridgeObjectRelease(v83);
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "#WiFi,fetchQueue,wifiscandata,%s", (uint8_t *)v79, 0xCu);
          swift_arrayDestroy(v80, 1, v175);
          v84 = v80;
          v62 = (uint64_t)v178;
          a1 = v177;
          swift_slowDealloc(v84, -1, -1);
          v85 = v79;
          v60 = v179;
          swift_slowDealloc(v85, -1, -1);

          v86 = v185((char *)v62, v60);
        }
        else
        {

          v86 = v185((char *)v62, v60);
          a1 = v71;
        }
        v64 = v180;
        if (BYTE3(v74) <= 1u)
          break;
        if (BYTE3(v74) != 2)
        {
          if (BYTE3(v74) == 64)
          {
            v91 = rpclog.getter((uint64_t)v174);
            v92 = Logger.logObject.getter(v91);
            v93 = static os_log_type_t.info.getter();
            v94 = os_log_type_enabled(v92, v93);
            v95 = v182;
            if (v94)
            {
              v96 = swift_slowAlloc(12, -1);
              *(_DWORD *)v96 = v153;
              *(_QWORD *)(v96 + 4) = v95;
              _os_log_impl((void *)&_mh_execute_header, v92, v93, "#WiFi,fetchQueue,ASSOCIATEDBSSIDUPDATE,bssid:%{private}llx", (uint8_t *)v96, 0xCu);
              swift_slowDealloc(v96, -1, -1);
            }

            v185(v174, v60);
            (*(void (**)(uint64_t, BOOL))(*(_QWORD *)a1 + 520))(v95, v95 == 0);
            v97 = machContTimeSec()();
            v63 = (*(uint64_t (**)(uint64_t, Swift::Double))(*(_QWORD *)a1 + 800))(1, v97);
            goto LABEL_17;
          }
LABEL_39:
          v98 = (uint64_t)v169;
          v99 = rpclog.getter((uint64_t)v169);
          v100 = Logger.logObject.getter(v99);
          v101 = static os_log_type_t.error.getter(v100);
          if (os_log_type_enabled(v100, v101))
          {
            v166 = v74 >> 16;
            v165 = v74 >> 8;
            v102 = swift_slowAlloc(31, -1);
            v103 = swift_slowAlloc(32, -1);
            v187[0] = v103;
            *(_DWORD *)v102 = v155;
            v104 = sub_1000039AC((uint64_t *)&unk_100380810);
            v105 = swift_allocObject(v104, 72, 7);
            *(_OWORD *)(v105 + 16) = v154;
            *(_QWORD *)(v105 + 56) = &type metadata for UInt64;
            *(_QWORD *)(v105 + 64) = &protocol witness table for UInt64;
            *(_QWORD *)(v105 + 32) = v182;
            v106 = String.init(format:_:)(0x586C6C32313025, 0xE700000000000000, v105);
            v108 = v107;
            *(_QWORD *)(v102 + 4) = sub_10001818C(v106, v107, v187);
            swift_bridgeObjectRelease(v108);
            *(_WORD *)(v102 + 12) = 258;
            *(_BYTE *)(v102 + 14) = v74;
            *(_WORD *)(v102 + 15) = 258;
            *(_BYTE *)(v102 + 17) = v165;
            *(_WORD *)(v102 + 18) = 258;
            *(_BYTE *)(v102 + 20) = v166;
            *(_WORD *)(v102 + 21) = 2050;
            *(_QWORD *)(v102 + 23) = v183;
            _os_log_impl((void *)&_mh_execute_header, v100, v101, "#WiFi, Got unrecognized special packet with broadcast BSSID: {bssid:%s, rssi:%{public}hhd, channel:%{public}hhu, flags:%{public}hhu, timestamp:%{public}llu})", (uint8_t *)v102, 0x1Fu);
            swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
            v109 = v177;
            swift_slowDealloc(v103, -1, -1);
            v110 = v102;
            a1 = v109;
            swift_slowDealloc(v110, -1, -1);
          }

          v60 = v179;
          v63 = v185((char *)v98, v179);
LABEL_56:
          v62 = (uint64_t)v178;
          goto LABEL_17;
        }
        v132 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 560);
        ((void (*)(uint64_t))v132)(v86);
        v55 = v181;
        if ((v133 & 1) != 0)
        {
          v144 = rpclog.getter(v168);
          v145 = Logger.logObject.getter(v144);
          v146 = static os_log_type_t.error.getter(v145);
          if (os_log_type_enabled(v145, v146))
          {
            v147 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v147 = 0;
            _os_log_impl((void *)&_mh_execute_header, v145, v146, "#WiFi, got pong from lost watchdog id, daemon crashed recently or there was too many samples in intermediate queue", v147, 2u);
            swift_slowDealloc(v147, -1, -1);
          }

          v70 = (uint64_t *)&v190;
          goto LABEL_25;
        }
        rpclog.getter((uint64_t)v167);
        v134 = swift_retain_n(a1, 3);
        v135 = Logger.logObject.getter(v134);
        v136 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v135, (os_log_type_t)v136))
        {
          LODWORD(v183) = v136;
          v137 = swift_slowAlloc(22, -1);
          *(_DWORD *)v137 = v160;
          v138 = v132();
          if ((v139 & 1) != 0)
            goto LABEL_78;
          *(_QWORD *)(v137 + 4) = v138;
          v140 = swift_release(a1);
          *(_WORD *)(v137 + 12) = 2050;
          v141 = ((uint64_t (*)(uint64_t))v132)(v140);
          v143 = v142;
          swift_release(a1);
          if ((v143 & 1) != 0)
            goto LABEL_79;
          *(_QWORD *)(v137 + 14) = v141;
          swift_release(a1);
          _os_log_impl((void *)&_mh_execute_header, v135, (os_log_type_t)v183, "#WiFi, got pong from watchdog id: %{public}llu, last sent %{public}llu", (uint8_t *)v137, 0x16u);
          swift_slowDealloc(v137, -1, -1);

          v55 = v181;
        }
        else
        {

          swift_release_n(a1, 3);
        }
        v185(v167, v60);
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a1 + 568))(0, 1);
        v63 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 592))(0);
LABEL_18:
        ++v9;
        v65 += 32;
        if (v64 == v9)
          goto LABEL_3;
      }
      if (!BYTE3(v74))
      {
        v111 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 368);
        v112 = v111(v86);
        v113 = *(_QWORD *)(v112 + 16);
        v114 = swift_bridgeObjectRelease(v112);
        if (v113)
        {
          v63 = v111(v114);
          v115 = *(_QWORD *)(v63 + 16);
          if (!v115)
            goto LABEL_74;
          v116 = *(_QWORD *)(v63 + 24 * v115 + 8);
          v117 = swift_bridgeObjectRelease(v63);
          if (v116 < v183)
          {
            v27 = v111(v117);
            v118 = *(_QWORD *)(v27 + 16);
            if (!v118)
              goto LABEL_77;
            v119 = *(_QWORD *)(v27 + 24 * v118 + 8);
            v63 = swift_bridgeObjectRelease(v27);
            v120 = v183 >= v119;
            v121 = v183 - v119;
            if (!v120)
              goto LABEL_73;
            v122 = NsInSec.getter();
            if ((v122 & 0x8000000000000000) != 0 || v122 < v121)
            {
              v123 = machContTimeSec()();
              (*(void (**)(_QWORD, double))(*(_QWORD *)a1 + 800))(0, v123);
            }
          }
        }
        v124 = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)a1 + 384))(v187);
        v126 = v125;
        v127 = *v125;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v125);
        *v126 = v127;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v127 = sub_10028D14C(0, *((_QWORD *)v127 + 2) + 1, 1, v127);
          *v126 = v127;
        }
        v130 = *((_QWORD *)v127 + 2);
        v129 = *((_QWORD *)v127 + 3);
        if (v130 >= v129 >> 1)
        {
          v127 = sub_10028D14C((char *)(v129 > 1), v130 + 1, 1, v127);
          *v126 = v127;
        }
        v60 = v179;
        *((_QWORD *)v127 + 2) = v130 + 1;
        v131 = &v127[24 * v130];
        *((_QWORD *)v131 + 4) = v183;
        *((_QWORD *)v131 + 5) = v182;
        *((_WORD *)v131 + 24) = v74;
        v131[50] = BYTE2(v74);
        v131[51] = 0;
        v63 = v124(v187, 0);
        a1 = v177;
        goto LABEL_56;
      }
      if (BYTE3(v74) != 1)
        goto LABEL_39;
      v87 = rpclog.getter((uint64_t)v173);
      v88 = Logger.logObject.getter(v87);
      v89 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v88, v89))
      {
        v90 = swift_slowAlloc(12, -1);
        *(_DWORD *)v90 = v156;
        *(_QWORD *)(v90 + 4) = v183;
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "#WiFi,fetchQueue,AOPSERVICETIMESTAMP,timestamp,%{public}llu", (uint8_t *)v90, 0xCu);
        swift_slowDealloc(v90, -1, -1);
      }

      v63 = v185(v173, v60);
LABEL_17:
      v55 = v181;
      goto LABEL_18;
    }
LABEL_3:
    (*(void (**)(char *, uint64_t))(v158 + 8))(v170, v159);
    v33 = swift_bridgeObjectRelease(v55);
    v27 = v157(v33);
    if ((v34 & 1) != 0)
      goto LABEL_75;
  }
  v148 = machContTimeSec()();
  (*(void (**)(_QWORD))(*(_QWORD *)a1 + 800))(0);
  v149 = v164;
  result = swift_beginAccess(v164, v187, 0, 0);
  if (*v149 == 1)
    return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 792))(result, v148);
  return result;
}

void sub_10028B828(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, unint64_t, uint64_t, double);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  unint64_t v21;
  uint64_t v22;

  v2 = v1;
  if ((*(double (**)(void))(*(_QWORD *)v1 + 416))() + 10.0 <= a1)
  {
    v4 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 464))();
    if (v4)
    {
      v5 = v4;
      v6 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 344))();
      if (v6)
      {
        v8 = (void (*)(uint64_t, unint64_t, uint64_t, double))v6;
        v9 = v7;
        v10 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 224))();
        if ((v12 & 1) != 0)
        {
LABEL_11:
          swift_release(v5);
          sub_100288068((uint64_t)v8, v9);
          return;
        }
        v13 = v10;
        v14 = v11;
        v15 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 488))();
        if (v14 == v15)
        {
LABEL_10:
          (*(void (**)(uint64_t, double))(*(_QWORD *)v2 + 424))(v15, a1);
          goto LABEL_11;
        }
        v16 = sub_10028D5A0();
        v17 = sub_10028D5A0();
        if ((v17 & 0x8000000000000000) == 0)
        {
          v18 = v17;
          v19 = sub_10028D5A8();
          if ((v19 & 0x8000000000000000) == 0)
          {
            if (is_mul_ok(v18, v19))
            {
              v20 = (double)v13 / (double)v16 * 100.0;
              v21 = v18 * v19;
              v22 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 632))();
              v8(v14, v21, v22, v20);
              v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 496))(v14);
              goto LABEL_10;
            }
            __break(1u);
          }
        }
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
        __break(1u);
      }
      else
      {
        swift_release(v5);
      }
    }
  }
}

void sub_10028BA28(char a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __n128 v30;
  uint64_t v31;
  void (*v32)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t *, _QWORD);
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  __n128 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  void (*v56)(char *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint8_t *v71;
  void (*v72)(uint64_t *, _QWORD);
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  _BYTE v93[24];
  uint64_t v94[5];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v85 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000039AC((uint64_t *)&unk_100380850);
  __chkstk_darwin(v9);
  v86 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ALWiFiNotification(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v15 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v18);
  v89 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ALWiFiScanResult(0);
  v87 = *(_QWORD *)(v20 - 8);
  v88 = v20;
  v21 = __chkstk_darwin(v20);
  v91 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0 || (*(double (**)(uint64_t))(*(_QWORD *)v3 + 392))(v21) + 1.0 <= a2)
  {
    v23 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v3 + 400))(v21, a2);
    v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 368);
    v25 = v24(v23);
    v26 = *(_QWORD *)(v25 + 16);
    v27 = swift_bridgeObjectRelease(v25);
    if (v26)
    {
      v76 = v7;
      v84 = v14;
      v77 = v6;
      v80 = v12;
      v81 = v11;
      v28 = ALWiFiScanResult.init()(v27);
      v29 = v89;
      v30.n128_f64[0] = a2;
      ALTimeStamp.init(machContinuousTimeSec:)(v28, v30);
      v31 = type metadata accessor for ALTimeStamp(0);
      v32 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
      v79 = v31;
      v78 = v32;
      ((void (*)(char *, _QWORD, uint64_t))v32)(v29, 0, 1);
      v33 = ALWiFiScanResult._scanTimestamp.setter(v29);
      v82 = v3;
      v83 = v24(v33);
      v34 = *(_QWORD *)(v83 + 16);
      if (v34)
      {
        v35 = v83 + 51;
        do
        {
          sub_10028C05C(*(_QWORD *)(v35 - 19), *(_QWORD *)(v35 - 11), *(_DWORD *)(v35 - 3), *(uint64_t *)&a2, 0);
          v36 = (void (*)(uint64_t *, _QWORD))ALWiFiScanResult._accessPoints.modify(v94);
          v38 = v37;
          v39 = *v37;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v37);
          *v38 = v39;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v39 = sub_1002874F4(0, *(_QWORD *)(v39 + 16) + 1, 1, v39);
            *v38 = v39;
          }
          v42 = *(_QWORD *)(v39 + 16);
          v41 = *(_QWORD *)(v39 + 24);
          if (v42 >= v41 >> 1)
          {
            v39 = sub_1002874F4(v41 > 1, v42 + 1, 1, v39);
            *v38 = v39;
          }
          v35 += 24;
          *(_QWORD *)(v39 + 16) = v42 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v39+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v42, v17, v90);
          v36(v94, 0);
          --v34;
        }
        while (v34);
      }
      v43 = swift_bridgeObjectRelease(v83);
      v44 = v84;
      v45 = ALWiFiNotification.init()(v43);
      v46 = v89;
      v47.n128_f64[0] = a2;
      ALTimeStamp.init(machContinuousTimeSec:)(v45, v47);
      v78(v46, 0, 1, v79);
      ALWiFiNotification._timestamp.setter(v46);
      v48 = v86;
      v49 = v87;
      v50 = v88;
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v86, v91, v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v48, 0, 1, v50);
      ALWiFiNotification._scanResult.setter(v48);
      ALWiFiNotification._simulated.setter(0);
      v51 = ALWiFiNotification._available.setter(1);
      v52 = v82;
      v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 512))(v51);
      v55 = ALWiFiNotification._associatedMac.setter(v53, v54 & 1);
      v56 = (void (*)(char *))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 320))(v55);
      if (v56)
      {
        v58 = (uint64_t)v56;
        v59 = v57;
        v56(v44);
        v60 = v85;
        v61 = rpclog.getter(v85);
        v62 = Logger.logObject.getter(v61);
        v63 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v62, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc(12, -1);
          v65 = swift_slowAlloc(32, -1);
          v94[0] = v65;
          *(_DWORD *)v64 = 136315138;
          v66 = swift_beginAccess(v84, v93, 0, 0);
          v67 = ALWiFiNotification.description.getter(v66);
          v69 = v68;
          v92 = sub_10001818C(v67, v68, v94);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v64 + 4, v64 + 12);
          swift_bridgeObjectRelease(v69);
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "#WiFi,_onData,notif,%s", v64, 0xCu);
          swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
          v70 = v65;
          v49 = v87;
          v44 = v84;
          swift_slowDealloc(v70, -1, -1);
          v71 = v64;
          v50 = v88;
          swift_slowDealloc(v71, -1, -1);
          sub_100288068(v58, v59);

          (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v85, v77);
        }
        else
        {
          sub_100288068(v58, v59);

          (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v60, v77);
        }
      }
      v72 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v52 + 384))(v94);
      v74 = *v73;
      *v73 = (uint64_t)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v74);
      v72(v94, 0);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v91, v50);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v44, v81);
    }
  }
}

uint64_t sub_10028C05C(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unsigned int v20;
  _BYTE v21[16];

  v10 = sub_1000039AC(&qword_100380860);
  v11 = __chkstk_darwin(v10);
  v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ALWiFiScanSingleAccessPoint.init()(v11);
  ALWiFiScanSingleAccessPoint._mac.setter(a2, 0);
  v21[12] = 0;
  ALWiFiScanSingleAccessPoint._channel.setter(BYTE1(a3));
  v21[8] = 0;
  ALWiFiScanSingleAccessPoint._rssidB.setter((char)a3);
  v14 = HIWORD(a3) & 3;
  if (v14 == 3)
  {
    v15 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Band.band5G(_:);
  }
  else if (v14 == 1)
  {
    v15 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Band.band6G(_:);
  }
  else if (v14)
  {
    v15 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Band.unknown(_:);
  }
  else
  {
    v15 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Band.band2G(_:);
  }
  v16 = *v15;
  v17 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 104))(v13, v16, v17);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v17);
  result = ALWiFiScanSingleAccessPoint._band.setter(v13);
  if ((a5 & 1) == 0)
  {
    *(float *)&v20 = *(double *)&a4 - NsToSec.getter() * (double)a1;
    v21[4] = 0;
    return ALWiFiScanSingleAccessPoint._ageSec.setter(v20);
  }
  return result;
}

uint64_t sub_10028C1E4(unsigned int a1)
{
  return HIBYTE(a1) & 0xF;
}

uint64_t sub_10028C1EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  char v28;
  int v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t (*v104)(uint64_t);
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _OWORD v108[4];
  uint64_t v109;
  _BYTE v110[16];
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;

  v1 = v0;
  v83 = type metadata accessor for Logger(0);
  v82 = *(_QWORD *)(v83 - 8);
  v2 = __chkstk_darwin(v83);
  v4 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v76 - v5;
  v81 = type metadata accessor for Mirror(0);
  v80 = *(_QWORD *)(v81 - 8);
  v7 = __chkstk_darwin(v81);
  v9 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 296))(v7);
  if ((v13 & 1) != 0)
    return result;
  v103 = v6;
  v76 = v4;
  *(_QWORD *)&v114 = result;
  *((_QWORD *)&v114 + 1) = v11;
  v115 = v12;
  v14 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 704);
  v15 = v14();
  v104 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 808);
  v16 = v104(v15);
  v17 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 680);
  v18 = v17();
  v19 = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRelease(v18);
  if (HIDWORD(v19))
    goto LABEL_55;
  v20 = (v16 - v19);
  if (v16 < v19)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  memset(v108, 0, 60);
  v21 = sub_10028D5B0(v108);
  v107 = (_QWORD *)((uint64_t (*)(double))v17)(v21);
  v17 = (uint64_t (*)(void))v14();
  v111 = v114;
  v112 = v115;
  if (sub_1002879C0((uint64_t)&v111))
  {
LABEL_5:
    if (!(_DWORD)v20)
    {
      v20 = (uint64_t)v76;
      if (!(_DWORD)v17)
      {
LABEL_43:
        (*(void (**)(void *))(*(_QWORD *)v1 + 688))(&_swiftEmptyArrayStorage);
        v17 = 0;
        goto LABEL_44;
      }
      swift_beginAccess(&v107, &v111, 33, 0);
      v16 = (uint64_t)v107;
      if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) != 0)
      {
LABEL_40:
        v62 = *(_QWORD *)(v16 + 16);
        v61 = *(_QWORD *)(v16 + 24);
        if (v62 >= v61 >> 1)
          v16 = (uint64_t)sub_10028D03C((char *)(v61 > 1), v62 + 1, 1, (char *)v16);
        *(_QWORD *)(v16 + 16) = v62 + 1;
        *(_DWORD *)(v16 + 4 * v62 + 32) = (_DWORD)v17;
        v107 = (_QWORD *)v16;
        swift_endAccess(&v111);
        goto LABEL_43;
      }
LABEL_53:
      v16 = (uint64_t)sub_10028D03C(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
      goto LABEL_40;
    }
    v23 = v104((uint64_t)v17);
    v16 = v23 - v20;
    if (v23 >= v20)
    {
      swift_beginAccess(&v107, &v111, 0, 0);
      v24 = (uint64_t)v107;
      swift_bridgeObjectRetain(v107);
      v25 = sub_10028CD64(v16, v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 688))(v25);
      swift_beginAccess(&v107, v110, 33, 0);
      sub_10028D014(v16);
      swift_endAccess(v110);
      v20 = (uint64_t)v76;
LABEL_44:
      (*(void (**)(uint64_t (*)(void)))(*(_QWORD *)v1 + 712))(v17);
      swift_beginAccess(&v107, v110, 0, 0);
      v63 = v107;
      if (v107[2])
      {
        v64 = rpclog.getter(v20);
        v65 = Logger.logObject.getter(v64);
        v66 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v65, v66))
        {
          v67 = (uint8_t *)swift_slowAlloc(12, -1);
          v68 = swift_slowAlloc(32, -1);
          v109 = v68;
          *(_DWORD *)v67 = 136315138;
          v69 = v107;
          v70 = swift_bridgeObjectRetain(v107);
          v71 = Array.description.getter(v70, &type metadata for UInt32);
          v73 = v72;
          swift_bridgeObjectRelease(v69);
          v105 = sub_10001818C(v71, v73, &v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v67 + 4, v67 + 12);
          swift_bridgeObjectRelease(v73);
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "{\"msg\":\"AOP2 logs received\", \"log\":%s}", v67, 0xCu);
          swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1, -1);
          swift_slowDealloc(v67, -1, -1);
        }

        (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v20, v83);
        v63 = v107;
      }
      return swift_bridgeObjectRelease(v63);
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v102 = 0;
  *(_QWORD *)&v22 = 136315138;
  v78 = v22;
  v77 = (char *)&type metadata for Any + 8;
  v84 = v1;
  v79 = v9;
LABEL_11:
  sub_10028D5C4((uint64_t)&v114, v108);
  v16 = LOBYTE(v108[0]);
  LODWORD(v101) = *(_DWORD *)((char *)v108 + 1);
  v26 = BYTE5(v108[0]);
  v27 = *(_DWORD *)((char *)v108 + 6);
  v28 = BYTE10(v108[0]);
  v29 = *(_DWORD *)((char *)v108 + 11);
  v30 = HIBYTE(v108[0]);
  v31 = v108[1];
  v100 = BYTE4(v108[1]);
  v99 = *(_DWORD *)((char *)&v108[1] + 5);
  v98 = BYTE9(v108[1]);
  v97 = *(_DWORD *)((char *)&v108[1] + 10);
  v96 = BYTE14(v108[1]);
  v95 = *(_DWORD *)((char *)&v108[1] + 15);
  v94 = BYTE3(v108[2]);
  v93 = DWORD1(v108[2]);
  v92 = BYTE8(v108[2]);
  v91 = *(_DWORD *)((char *)&v108[2] + 9);
  v90 = BYTE13(v108[2]);
  v89 = *(_DWORD *)((char *)&v108[2] + 14);
  v88 = BYTE2(v108[3]);
  v87 = *(_DWORD *)((char *)&v108[3] + 3);
  v86 = BYTE7(v108[3]);
  v85 = DWORD2(v108[3]);
  v113 = sub_1000039AC(&qword_100380868);
  v32 = swift_allocObject(&unk_10035AB40, 76, 7);
  *(_QWORD *)&v111 = v32;
  *(_BYTE *)(v32 + 16) = v16;
  *(_DWORD *)(v32 + 17) = v101;
  *(_BYTE *)(v32 + 21) = v26;
  *(_DWORD *)(v32 + 22) = v27;
  *(_BYTE *)(v32 + 26) = v28;
  *(_DWORD *)(v32 + 27) = v29;
  *(_BYTE *)(v32 + 31) = v30;
  *(_DWORD *)(v32 + 32) = v31;
  *(_BYTE *)(v32 + 36) = v100;
  *(_DWORD *)(v32 + 37) = v99;
  *(_BYTE *)(v32 + 41) = v98;
  *(_DWORD *)(v32 + 42) = v97;
  *(_BYTE *)(v32 + 46) = v96;
  *(_DWORD *)(v32 + 47) = v95;
  *(_BYTE *)(v32 + 51) = v94;
  *(_DWORD *)(v32 + 52) = v93;
  *(_BYTE *)(v32 + 56) = v92;
  *(_DWORD *)(v32 + 57) = v91;
  *(_BYTE *)(v32 + 61) = v90;
  *(_DWORD *)(v32 + 62) = v89;
  *(_BYTE *)(v32 + 66) = v88;
  *(_DWORD *)(v32 + 67) = v87;
  *(_BYTE *)(v32 + 71) = v86;
  *(_DWORD *)(v32 + 72) = v85;
  v33 = Mirror.init(reflecting:)(&v111);
  v34 = Mirror.children.getter(v33);
  v35 = sub_1000039AC(&qword_100380870);
  v36 = v102;
  v37 = dispatch thunk of _AnySequenceBox._map<A>(_:)(sub_10028D7D8, 0, v35);
  v102 = v36;
  if (!v36)
  {
    v38 = v37;
    swift_release(v34);
    v1 = v84;
    if (!*(_QWORD *)(v38 + 16))
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    v39 = 0;
    v40 = (unsigned int *)(v38 + 32);
    while ((*((_BYTE *)v40 + 5) & 1) == 0)
    {
      v41 = *v40;
      if (!(_BYTE)v41)
        goto LABEL_10;
      v16 = (v41 | ((unint64_t)*((unsigned __int8 *)v40 + 4) << 32)) >> 8;
      if ((v41 & 1) != 0)
      {
        if ((_DWORD)v17)
        {
          swift_beginAccess(&v107, &v111, 33, 0);
          v45 = (char *)v107;
          if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0)
            v45 = sub_10028D03C(0, *((_QWORD *)v45 + 2) + 1, 1, v45);
          v47 = *((_QWORD *)v45 + 2);
          v46 = *((_QWORD *)v45 + 3);
          if (v47 >= v46 >> 1)
            v45 = sub_10028D03C((char *)(v46 > 1), v47 + 1, 1, v45);
          *((_QWORD *)v45 + 2) = v47 + 1;
          *(_DWORD *)&v45[4 * v47 + 32] = (_DWORD)v17;
          v107 = v45;
          swift_endAccess(&v111);
          if (*((_QWORD *)v45 + 2) >= 0x29uLL)
          {
            v48 = (uint64_t)v103;
            v49 = rpclog.getter((uint64_t)v103);
            v50 = Logger.logObject.getter(v49);
            v51 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v50, v51))
            {
              v52 = swift_slowAlloc(12, -1);
              v101 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v111 = v101;
              *(_DWORD *)v52 = v78;
              v53 = v107;
              v54 = swift_bridgeObjectRetain(v107);
              v55 = Array.description.getter(v54, &type metadata for UInt32);
              v57 = v56;
              v58 = v53;
              v1 = v84;
              swift_bridgeObjectRelease(v58);
              *(_QWORD *)(v52 + 4) = sub_10001818C(v55, v57, (uint64_t *)&v111);
              swift_bridgeObjectRelease(v57);
              _os_log_impl((void *)&_mh_execute_header, v50, v51, "{\"msg\":\"AOP2 logs received\", \"log\":%s}", (uint8_t *)v52, 0xCu);
              v59 = v101;
              swift_arrayDestroy(v101, 1, v77);
              swift_slowDealloc(v59, -1, -1);
              swift_slowDealloc(v52, -1, -1);

              (*(void (**)(char *, uint64_t))(v82 + 8))(v103, v83);
            }
            else
            {

              (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v48, v83);
            }
            v60 = v107;
            v107 = &_swiftEmptyArrayStorage;
            swift_bridgeObjectRelease(v60);
          }
        }
        v20 = v104(v16);
      }
      else
      {
        if (!(_DWORD)v20)
          break;
        swift_beginAccess(&v107, &v111, 33, 0);
        v42 = (char *)v107;
        if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0)
          v42 = sub_10028D03C(0, *((_QWORD *)v42 + 2) + 1, 1, v42);
        v44 = *((_QWORD *)v42 + 2);
        v43 = *((_QWORD *)v42 + 3);
        if (v44 >= v43 >> 1)
          v42 = sub_10028D03C((char *)(v43 > 1), v44 + 1, 1, v42);
        *((_QWORD *)v42 + 2) = v44 + 1;
        *(_DWORD *)&v42[4 * v44 + 32] = v16;
        v107 = v42;
        swift_endAccess(&v111);
        v20 = (v20 - 1);
        v16 = (uint64_t)v17;
      }
LABEL_35:
      if (v39 == 11)
      {
        v17 = (uint64_t (*)(void))v16;
LABEL_10:
        (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v81);
        swift_bridgeObjectRelease(v38);
        v111 = v114;
        v112 = v115;
        if (sub_1002879C0((uint64_t)&v111))
          goto LABEL_5;
        goto LABEL_11;
      }
      ++v39;
      v40 = (unsigned int *)((char *)v40 + 6);
      v17 = (uint64_t (*)(void))v16;
      if (v39 >= *(_QWORD *)(v38 + 16))
        goto LABEL_50;
    }
    v16 = (uint64_t)v17;
    goto LABEL_35;
  }
  *(_QWORD *)&v111 = v102;
  v74 = sub_1000039AC(&qword_100380878);
  v75 = swift_dynamicCast(v74, &v111, v74, &type metadata for Never, 7);
  swift_willThrowTypedImpl(v75, &type metadata for Never, &protocol witness table for Never);
  __break(1u);
LABEL_55:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  return result;
}

uint64_t sub_10028CD64(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (result < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v3 = result;
  if (!result)
  {
    swift_bridgeObjectRelease(a2);
    return (uint64_t)&_swiftEmptyArrayStorage;
  }
  if (*(_QWORD *)(a2 + 16) >= result)
    v4 = result;
  else
    v4 = *(_QWORD *)(a2 + 16);
  sub_10028D65C(0, v4, 0);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    goto LABEL_30;
  result = swift_bridgeObjectRetain(a2);
  v6 = a2 + 32;
  v7 = 0;
  v8 = 0;
  v9 = v5 - 2;
  do
  {
    v10 = (_DWORD *)((char *)&_swiftEmptyArrayStorage + 32);
    v11 = v8;
LABEL_9:
    if (v11 >= *(_QWORD *)(a2 + 16))
      goto LABEL_38;
    v12 = *(_DWORD *)(v6 + 4 * v11);
    v8 = v11 + 1;
    v13 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
    if ((uint64_t)v13 < v3)
    {
LABEL_23:
      v15 = *((_QWORD *)&_swiftEmptyArrayStorage + 3);
      v16 = v13 + 1;
      if (v13 >= v15 >> 1)
      {
        v21 = v9;
        v20 = v6;
        result = sub_10028D65C(v15 > 1, v13 + 1, 1);
        v16 = v13 + 1;
        v6 = v20;
        v9 = v21;
      }
      *((_QWORD *)&_swiftEmptyArrayStorage + 2) = v16;
      *((_DWORD *)&_swiftEmptyArrayStorage + v13 + 8) = v12;
    }
    else
    {
      if (v7 >= v13)
        goto LABEL_39;
      v10[v7++] = v12;
      if (v7 >= v3)
      {
        if (v8 == v5)
        {
LABEL_29:
          swift_bridgeObjectRelease(a2);
          goto LABEL_30;
        }
        while (v11 + 1 < *(_QWORD *)(a2 + 16))
        {
          v12 = *(_DWORD *)(a2 + 36 + 4 * v11);
          v13 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
          if ((uint64_t)v13 < v3)
          {
            v7 = 0;
            v8 = v11 + 2;
            goto LABEL_23;
          }
          *v10 = v12;
          if (v3 > 1)
          {
            v7 = 1;
            v14 = v9 == v11;
            v11 += 2;
            if (!v14)
              goto LABEL_9;
            swift_bridgeObjectRelease(a2);
            v7 = 1;
            goto LABEL_33;
          }
          if (v5 - 1 == ++v11)
            goto LABEL_29;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }
  }
  while (v8 != v5);
  swift_bridgeObjectRelease(a2);
  if (!v7)
  {
LABEL_30:
    swift_bridgeObjectRelease(a2);
    return (uint64_t)&_swiftEmptyArrayStorage;
  }
LABEL_33:
  v17 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
  result = sub_10028D65C(0, v17, 0);
  if (v17 < v7)
    goto LABEL_41;
  if ((v7 & 0x8000000000000000) == 0)
  {
    v18 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
    if (v18 >= v7 && v18 >= v17)
    {
      v19 = swift_retain(&_swiftEmptyArrayStorage);
      sub_10028DC9C(v19, (uint64_t)&_swiftEmptyArrayStorage + 32, v7, (2 * v17) | 1);
      swift_bridgeObjectRelease(a2);
      swift_release(&_swiftEmptyArrayStorage);
      sub_10028DC9C((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)&_swiftEmptyArrayStorage + 32, 0, (2 * v7) | 1);
      swift_release(&_swiftEmptyArrayStorage);
      return (uint64_t)&_swiftEmptyArrayStorage;
    }
    goto LABEL_43;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

unint64_t sub_10028D014(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
      v3 = v2 >= result;
      result = v2 - result;
      if (v3)
        return (unint64_t)sub_10028DE30(result, v2);
    }
    __break(1u);
  }
  return result;
}

char *sub_10028D03C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000039AC((uint64_t *)&unk_100380C20);
      v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 32])
          memmove(v14, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10028DBB4(0, v8, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_10028D14C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000039AC(&qword_100380C50);
      v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[24 * v8 + 32])
          memmove(v13, a4 + 32, 24 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10028E02C(0, v8, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10028D274()
{
  uint64_t v0;

  return sub_100289B00(*(_DWORD *)(v0 + 16), 29, 0xD00000000000001BLL, (void *)0x80000001003056E0);
}

uint64_t sub_10028D2A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10028D2B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 144, 7);
}

_DWORD *sub_10028D2C8(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10028D2D0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10028D304()
{
  uint64_t v0;

  return sub_10028A844(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(int **)(v0 + 32));
}

uint64_t sub_10028D310(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000FE74(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10028D350()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  Swift::String v3;

  _StringGuts.grow(_:)(29);
  v0._object = (void *)0x8000000100305680;
  v0._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 46;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

unint64_t sub_10028D3F4(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10028D484()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v17 = 0;
  v18 = 0xE000000000000000;
  _StringGuts.grow(_:)(69);
  v4._countAndFlagsBits = 0xD00000000000002FLL;
  v4._object = (void *)0x8000000100305610;
  String.append(_:)(v4);
  v15 = v1;
  v16 = v2;
  v5 = sub_1000039AC(&qword_100380C38);
  v6._countAndFlagsBits = String.init<A>(describing:)(&v15, v5);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._object = (void *)0x8000000100305640;
  v8._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v8);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 632))(v9, v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.append(_:)(v13);
  return v17;
}

uint64_t sub_10028D5A0()
{
  return 29866;
}

uint64_t sub_10028D5A8()
{
  return 24;
}

double sub_10028D5B0(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 44) = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

double sub_10028D5C4(uint64_t a1, _OWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = atomic_load(*(unint64_t **)a1);
  v4 = v3 % v2;
  v5 = atomic_load((unint64_t *)(*(_QWORD *)a1 + 64));
  if (v4 != v5)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(unint64_t **)a1;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = (__int128 *)(v6 + ((v8 % *(_QWORD *)(a1 + 8)) << 6));
    v10 = *v9;
    v11 = v9[1];
    v12 = v9[2];
    *(_OWORD *)((char *)a2 + 44) = *(__int128 *)((char *)v9 + 44);
    a2[1] = v11;
    a2[2] = v12;
    *a2 = v10;
    result = 0.0;
    v9[1] = 0u;
    v9[2] = 0u;
    *(__int128 *)((char *)v9 + 44) = 0u;
    *v9 = 0u;
  }
  return result;
}

uint64_t sub_10028D64C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 76, 7);
}

uint64_t sub_10028D65C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10028D678(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10028D678(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000039AC((uint64_t *)&unk_100380C20);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10028D7D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  _BYTE v6[32];
  unsigned int v7;
  unsigned __int8 v8;

  sub_1000187EC(a1 + 16, (uint64_t)v6);
  type metadata accessor for AONLogSample(0);
  result = swift_dynamicCast(&v7, v6, (char *)&type metadata for Any + 8, v3, 6);
  v5 = v7 | ((unint64_t)v8 << 32);
  if (!(_DWORD)result)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = BYTE4(v5);
  *(_BYTE *)(a2 + 5) = result ^ 1;
  return result;
}

uint64_t type metadata accessor for ALShmQueueHandler()
{
  return objc_opt_self(_TtC8ALRPCShm17ALShmQueueHandler);
}

uint64_t method lookup function for ALShmQueueHandler(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALShmQueueHandler);
}

uint64_t dispatch thunk of ALShmQueueHandler.__allocating_init(queue:interval:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 752))();
}

uint64_t dispatch thunk of ALShmQueueHandler.register(onWiFi:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 760))();
}

uint64_t dispatch thunk of ALShmQueueHandler.registerTightbeamHandler(tbHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 768))();
}

uint64_t dispatch thunk of ALShmQueueHandler.regAnalytics(onLocCompAnalytics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of ALShmQueueHandler.fetchQueue()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))();
}

uint64_t dispatch thunk of ALShmQueueHandler.sizeFromHeader(header:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 808))();
}

uint64_t dispatch thunk of ALShmQueueHandler.fetchLogs()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 816))();
}

__n128 initializeBufferWithCopyOfBuffer for TicksInfo(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for aonloc_wifiscandata(uint64_t a1)
{
  sub_10028DAD4(a1, &qword_100380BF8, (uint64_t)&unk_10035AC38);
}

uint64_t getEnumTagSinglePayload for TicksInfo(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TicksInfo(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for ShmQueue_AONLogBlock_ _CBool_-1_(uint64_t a1)
{
  sub_10028DAD4(a1, &qword_100380C00, (uint64_t)&unk_10035ACC8);
}

void type metadata accessor for ShmQueue_wifiscandataBlock_ _CBool_-1_(uint64_t a1)
{
  sub_10028DAD4(a1, &qword_100380C08, (uint64_t)&unk_10035AD40);
}

uint64_t sub_10028D98C(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t sub_10028D9A0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10028D9C0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

void type metadata accessor for AONLogSample(uint64_t a1)
{
  sub_10028DAD4(a1, &qword_100380C10, (uint64_t)&unk_10035ADB8);
}

uint64_t sub_10028DA00(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_10028DA30(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_10028DA54(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10028DA74(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for wifiscandataBlock(uint64_t a1)
{
  sub_10028DAD4(a1, &qword_100380C18, (uint64_t)&unk_10035AE38);
}

void sub_10028DAD4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_10028DB18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];
  _QWORD v9[4];

  sub_1000187EC(a1 + 16, (uint64_t)v8);
  type metadata accessor for aonloc_wifiscandata(0);
  result = swift_dynamicCast(v9, v8, (char *)&type metadata for Any + 8, v3, 6);
  v5 = v9[0];
  v6 = v9[1];
  v7 = v9[2];
  if (!(_DWORD)result)
  {
    v7 = 0;
    v6 = 0;
    v5 = 0;
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 24) = result ^ 1;
  return result;
}

char *sub_10028DBB4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10028DC9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native(*v4);
  *v4 = v7;
  if (!(_DWORD)result || v9 > *(_QWORD *)(v7 + 24) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_10028D65C(result, v13, 1);
      v7 = *v4;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = *(_QWORD *)(v7 + 16);
  if ((*(_QWORD *)(v7 + 24) >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
  {
LABEL_27:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_28;
  }
  v15 = (char *)(v7 + 4 * v14 + 32);
  v16 = (char *)(a2 + 4 * a3);
  if (v16 >= &v15[4 * v6] || v15 >= &v16[4 * v6])
  {
    result = (uint64_t)memcpy(v15, v16, 4 * v6);
    if (!v6)
    {
LABEL_22:
      *v4 = v7;
      return result;
    }
    v18 = *(_QWORD *)(v7 + 16);
    v19 = __OFADD__(v18, v6);
    v20 = v18 + v6;
    if (!v19)
    {
      *(_QWORD *)(v7 + 16) = v20;
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_28:
  __break(1u);
  return result;
}

char *sub_10028DE30(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = sub_10028D03C(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[4 * a1 + 32];
    v15 = &v4[4 * a2 + 32];
    if (a1 != a2 || result >= &v15[4 * v14])
      result = (char *)memmove(result, v15, 4 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

double sub_10028DF88(uint64_t a1, _OWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = atomic_load(*(unint64_t **)a1);
  v4 = v3 % v2;
  v5 = atomic_load((unint64_t *)(*(_QWORD *)a1 + 64));
  if (v4 != v5)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(unint64_t **)a1;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = (__int128 *)(v6 + ((v8 % *(_QWORD *)(a1 + 8)) << 7));
    v10 = *v9;
    v11 = v9[1];
    v12 = v9[3];
    a2[2] = v9[2];
    a2[3] = v12;
    *a2 = v10;
    a2[1] = v11;
    v13 = v9[4];
    v14 = v9[5];
    v15 = v9[7];
    a2[6] = v9[6];
    a2[7] = v15;
    a2[4] = v13;
    a2[5] = v14;
    result = 0.0;
    v9[2] = 0u;
    v9[3] = 0u;
    v9[4] = 0u;
    v9[5] = 0u;
    v9[6] = 0u;
    v9[7] = 0u;
    *v9 = 0u;
    v9[1] = 0u;
  }
  return result;
}

uint64_t sub_10028E01C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 136, 7);
}

char *sub_10028E02C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 24 * a1 + 32);
  v6 = 24 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10028E118()
{
  unint64_t result;

  result = qword_100380C58;
  if (!qword_100380C58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_100380C58);
  }
  return result;
}

uint64_t sub_10028E174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t result;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = rpclog.getter((uint64_t)v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Tightbeam, got new block.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v11 = *(void (**)(uint64_t))(v1 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(v1 + 24);
    v13 = swift_retain(v12);
    v11(v13);
    return sub_100288068((uint64_t)v11, v12);
  }
  return result;
}

uint64_t sub_10028E28C()
{
  uint64_t v0;

  sub_100288068(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10028E2B4()
{
  return sub_10028E174();
}

uint64_t sub_10028E2D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v9;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = rpclog.getter((uint64_t)v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Tightbeam, intermediate queue is full.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void *sub_10028E3BC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t ALTightbeamHandler.__allocating_init(cb:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 32, 7);
  ALTightbeamHandler.init(cb:)(a1, a2);
  return v5;
}

uint64_t ALTightbeamHandler.init(cb:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_DWORD *, uint64_t, uint64_t);
  void (*v19)(char *, _DWORD *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void (*v33)(_DWORD *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[5];
  _BYTE v42[24];

  v3 = v2;
  v37 = a1;
  v38 = a2;
  v4 = type metadata accessor for Logger(0);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  __chkstk_darwin(v4);
  v39 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TightbeamEndpoint(0);
  v7 = *(_QWORD **)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (_DWORD *)((char *)&v35 - v12);
  __chkstk_darwin(v11);
  v15 = (_DWORD *)((char *)&v35 - v14);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  v16 = v2 + 16;
  rpc_init();
  v40 = 0;
  sub_10028E9C0(0xD000000000000015, 0x8000000100305730, (_DWORD *)&v40 + 1, &v40);
  *v15 = HIDWORD(v40);
  v17 = enum case for TightbeamEndpoint.afk(_:);
  v18 = (void (*)(_DWORD *, uint64_t, uint64_t))v7[13];
  v18(v15, enum case for TightbeamEndpoint.afk(_:), v6);
  *v13 = v40;
  v18(v13, v17, v6);
  type metadata accessor for aonloc_service.Service();
  v19 = (void (*)(char *, _DWORD *, uint64_t))v7[2];
  v19(v10, v15, v6);
  v20 = sub_1002920EC((uint64_t)v10);
  swift_beginAccess(v16, v42, 1, 0);
  v21 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v20;
  swift_release(v21);
  v22 = type metadata accessor for ackHandler();
  v23 = swift_allocObject(v22, 32, 7);
  v24 = v37;
  v25 = v38;
  *(_QWORD *)(v23 + 16) = v37;
  *(_QWORD *)(v23 + 24) = v25;
  sub_100288008(v24, v25);
  sub_100288068(0, 0);
  type metadata accessor for aonloc_callback.Server();
  v19(v10, v13, v6);
  v41[3] = v22;
  v41[4] = &off_10035AE78;
  v41[0] = v23;
  swift_retain(v23);
  v26 = sub_1002945DC((uint64_t)v10, v41);
  swift_beginAccess(v3 + 24, v41, 1, 0);
  v27 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v26;
  swift_release(v27);
  v28 = *(_QWORD *)(v3 + 24);
  if (v28)
  {
    swift_retain(v28);
    sub_100295A38();
    swift_release(v28);
  }
  v29 = rpclog.getter(v39);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Tightbeam, init success", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }
  sub_100288068(v37, v38);

  swift_release(v23);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v39, v36);
  v33 = (void (*)(_DWORD *, uint64_t))v7[1];
  v33(v13, v6);
  v33(v15, v6);
  return v3;
}

void sub_10028E794(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __break(1u);
  _Unwind_Resume(a1);
}

void sub_10028E7A0(const char *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *server_by_name;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for Logger(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  server_by_name = rpc_get_server_by_name(a1);
  if (server_by_name)
  {
    sub_10028ED50(0xD00000000000001FLL, 0x8000000100305860, server_by_name, a2, a3);
    rpc_release_server(server_by_name);
  }
  else
  {
    v10 = rpclog.getter((uint64_t)v8);
    __chkstk_darwin(v10);
    Logger._fatal(_:function:file:line:)(sub_100291D64, (uint64_t)(&v11 - 4), (uint64_t *)"init(cb:)", 9, 2, (uint64_t *)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/AFKTightbeamEndpointsHelpers.swift", 93, 2, 72);
    __break(1u);
  }
}

uint64_t sub_10028E8CC(const char *a1, const char *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;

  v8 = type metadata accessor for Logger(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = rpc_afk_interface_find(a2, a1, 0, a3, a4);
  if ((_DWORD)result)
  {
    rpclog.getter((uint64_t)v10);
    result = Logger._fatal(_:function:file:line:)((uint64_t (*)(void))sub_10028E9A4, 0, (uint64_t *)"init(cb:)", 9, 2, (uint64_t *)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/AFKTightbeamEndpointsHelpers.swift", 93, 2, 67);
    __break(1u);
  }
  return result;
}

unint64_t sub_10028E9A4()
{
  return 0xD00000000000001ELL;
}

void sub_10028E9C0(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  char *v17;
  char *server_by_name;
  uint64_t v19;
  uint64_t *v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  _DWORD *v28;
  _DWORD *v29;
  _QWORD v30[2];

  v8 = type metadata accessor for Logger(0);
  v9 = __chkstk_darwin(v8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v25 - v11;
  __chkstk_darwin(v10);
  v15 = (char *)&v25 - v14;
  v28 = a3;
  v29 = a4;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(sub_100291D18, v27, a1, a2, (char *)&type metadata for () + 8);
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v30[0] = a1;
      v30[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      server_by_name = rpc_get_server_by_name((const char *)v30);
      if (!server_by_name)
      {
        v19 = rpclog.getter((uint64_t)v15);
        __chkstk_darwin(v19);
        v20 = &v25 - 4;
        v21 = sub_100291D30;
        i = 72;
        goto LABEL_16;
      }
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v16 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_6:
        v17 = rpc_get_server_by_name(v16);
        if (v17)
        {
          sub_10028ED50(0xD00000000000001FLL, 0x8000000100305860, v17, a3, a4);
          rpc_release_server(v17);
          return;
        }
        v22 = rpclog.getter((uint64_t)v12);
        __chkstk_darwin(v22);
        v20 = &v25 - 4;
        v21 = sub_100291D64;
        for (i = 72; ; i = 72)
        {
LABEL_16:
          Logger._fatal(_:function:file:line:)(v21, (uint64_t)v20, (uint64_t *)"init(cb:)", 9, 2, (uint64_t *)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/AFKTightbeamEndpointsHelpers.swift", 93, 2, i);
          __break(1u);
LABEL_17:
          v23 = rpclog.getter(v26);
          __chkstk_darwin(v23);
          v20 = &v25 - 4;
          v21 = sub_100291D64;
        }
      }
      v26 = v13;
      v16 = (const char *)_StringObject.sharedUTF8.getter(a1, a2);
      if (v16)
        goto LABEL_6;
      server_by_name = rpc_get_server_by_name(0);
      if (!server_by_name)
        goto LABEL_17;
    }
    sub_10028ED50(0xD00000000000001FLL, 0x8000000100305860, server_by_name, a3, a4);
    rpc_release_server(server_by_name);
  }
}

uint64_t type metadata accessor for ackHandler()
{
  return objc_opt_self(_TtC8ALRPCShmP33_5C9CF5B0EE1E3CA893C978B6223E185410ackHandler);
}

uint64_t sub_10028ED50(uint64_t a1, uint64_t a2, const char *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  const char *v18;
  uint64_t result;
  _BYTE v20[16];
  const char *v21;
  _DWORD *v22;
  _DWORD *v23;
  _QWORD v24[2];

  v10 = type metadata accessor for Logger(0);
  v11 = __chkstk_darwin(v10);
  v12 = __chkstk_darwin(v11);
  v14 = &v20[-v13];
  __chkstk_darwin(v12);
  v17 = &v20[-v16];
  v21 = a3;
  v22 = a4;
  v23 = a5;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
    return _StringGuts._slowWithCString<A>(_:)(sub_100291D38, v20, a1, a2, (char *)&type metadata for () + 8);
  if ((a2 & 0x2000000000000000) != 0)
  {
    v24[0] = a1;
    v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    result = rpc_afk_interface_find(a3, (const char *)v24, 0, a4, a5);
    if (!(_DWORD)result)
      return result;
    goto LABEL_13;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    v18 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_6;
  }
  v17 = v15;
  v18 = (const char *)_StringObject.sharedUTF8.getter(a1, a2);
  if (!v18)
  {
    result = rpc_afk_interface_find(a3, 0, 0, a4, a5);
    if (!(_DWORD)result)
      return result;
LABEL_13:
    rpclog.getter((uint64_t)v17);
    result = Logger._fatal(_:function:file:line:)((uint64_t (*)(void))sub_10028E9A4, 0, (uint64_t *)"init(cb:)", 9, 2, (uint64_t *)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/AFKTightbeamEndpointsHelpers.swift", 93, 2, 67);
    goto LABEL_14;
  }
LABEL_6:
  result = rpc_afk_interface_find(a3, v18, 0, a4, a5);
  if ((_DWORD)result)
  {
    rpclog.getter((uint64_t)v14);
    result = Logger._fatal(_:function:file:line:)((uint64_t (*)(void))sub_10028E9A4, 0, (uint64_t *)"init(cb:)", 9, 2, (uint64_t *)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/AFKTightbeamEndpointsHelpers.swift", 93, 2, 67);
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t sub_10028EFD0(uint64_t a1)
{
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  v2._object = (void *)0x80000001003058A0;
  v2._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v2);
  v6 = a1;
  v3 = sub_1000039AC(&qword_100380EF0);
  _print_unlocked<A, B>(_:_:)(&v6, v7, v3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  return v7[0];
}

uint64_t sub_10028F074()
{
  return sub_10028F09C((void (*)(void))sub_100292308);
}

uint64_t sub_10028F088()
{
  return sub_10028F09C((void (*)(void))sub_10029232C);
}

uint64_t sub_10028F09C(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = type metadata accessor for Logger(0);
  v4 = __chkstk_darwin(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v4);
  if (result)
  {
    v6 = result;
    a1();
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_10028F2C0(Swift::UInt64 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v16 - v7;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v6);
  if (result)
  {
    v10 = result;
    v11 = sub_1002920F4(a1);
    v12 = rpclog.getter((uint64_t)v8);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, (os_log_type_t)v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v15 = 134349056;
      v17 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v14, "Tightbeam, hello return: %{public}llu", v15, 0xCu);
      swift_slowDealloc(v15, -1, -1);
    }

    swift_release(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  }
  return result;
}

uint64_t sub_10028F5A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t i;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  Swift::UInt64 v40;
  Swift::UInt64 v41;
  int v42;
  int v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, unint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;

  v1 = type metadata accessor for Logger(0);
  v56 = *(_QWORD *)(v1 - 8);
  v57 = v1;
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v48 - v5;
  v7 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v58 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v61 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC((uint64_t *)&unk_100380850);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ALWiFiScanResult(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v60 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 96))(v17);
  v59 = result;
  if (!result)
    return result;
  ALWiFiNotification._scanResult.getter(result);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    swift_release(v59);
    return sub_100015704((uint64_t)v14, (uint64_t *)&unk_100380850);
  }
  v50 = v16;
  v51 = v15;
  v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v60, v14, v15);
  v21 = ALWiFiScanResult._accessPoints.getter(v20);
  v23 = *(_QWORD *)(v21 + 16);
  if (!v23)
  {
LABEL_31:
    swift_bridgeObjectRelease(v21);
    swift_release(v59);
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v60, v51);
  }
  v48 = v4;
  v49 = v21;
  v24 = v21 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
  v53 = *(_QWORD *)(v58 + 72);
  v55 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v58 + 16);
  *(_QWORD *)&v22 = 67109120;
  v52 = v22;
  v54 = v10;
  for (i = v55(v61, v24, v10); ; i = v55(v26, v24, v27))
  {
    ALWiFiScanResult._scanTimestamp.getter(i);
    v28 = type metadata accessor for ALTimeStamp(0);
    v29 = *(_QWORD *)(v28 - 8);
    v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v9, 1, v28);
    if ((_DWORD)v30 == 1)
    {
      sub_100015704((uint64_t)v9, &qword_10036A6D8);
      v31 = 0.0;
      goto LABEL_16;
    }
    v32 = COERCE_DOUBLE(ALTimeStamp.machContinuousTimeSec.getter(v30));
    v34 = v33;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v28);
    if ((v34 & 1) != 0)
      v31 = 0.0;
    else
      v31 = v32;
    if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) == 0)
      goto LABEL_40;
    if (v31 <= -1.0)
      break;
    if (v31 >= 1.84467441e19)
      goto LABEL_34;
LABEL_16:
    v35 = NsInSec.getter();
    if ((~COERCE__INT64((double)v35) & 0x7FF0000000000000) == 0)
      goto LABEL_35;
    if (v35 < 0)
      goto LABEL_36;
    if (!is_mul_ok((unint64_t)v31, (unint64_t)(double)v35))
      goto LABEL_37;
    v36 = ALWiFiScanSingleAccessPoint.mac.getter(v35);
    v37 = ALWiFiScanSingleAccessPoint.rssidB.getter(v36);
    if ((v37 & (unint64_t)&_mh_execute_header) != 0)
      v38 = 0;
    else
      v38 = v37;
    if (v38 < -128)
      goto LABEL_38;
    if (v38 > 127)
      goto LABEL_39;
    v39 = ALWiFiScanSingleAccessPoint.channel.getter(v37);
    if ((v39 & 0x100000000) == 0)
    {
      if ((v39 & 0x80000000) != 0)
        goto LABEL_41;
      if (v39 >= 0x100)
      {
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
        goto LABEL_42;
      }
    }
    sub_100291F58();
    v43 = sub_100292118(v40, v41, v42);
    v44 = rpclog.getter((uint64_t)v6);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc(8, -1);
      *(_DWORD *)v47 = v52;
      *(_DWORD *)(v47 + 4) = v43;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Tightbeam, enqueue wifi sample return: %d", (uint8_t *)v47, 8u);
      swift_slowDealloc(v47, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v56 + 8))(v6, v57);
    v26 = v61;
    v27 = v54;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v61, v54);
    v24 += v53;
    if (!--v23)
    {
      v21 = v49;
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10028FC9C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[2];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v21 - v7;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v6);
  if (result)
  {
    v10 = result;
    v11 = sub_100292520(a1 & 1);
    v12 = rpclog.getter((uint64_t)v8);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(18, -1);
      v16 = swift_slowAlloc(32, -1);
      v22 = v4;
      v17 = v16;
      v25[0] = v16;
      *(_DWORD *)v15 = 136446466;
      if ((a1 & 1) != 0)
        v18 = 28271;
      else
        v18 = 6710895;
      if ((a1 & 1) != 0)
        v19 = 0xE200000000000000;
      else
        v19 = 0xE300000000000000;
      v20 = sub_10001818C(v18, v19, v25);
      v23 = v3;
      v24 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease(v19);
      *(_WORD *)(v15 + 12) = 1024;
      LODWORD(v24) = v11 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, (char *)&v24 + 4, v15 + 14, v15 + 18);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Tightbeam, enableWifiReception %{public}s -> %{BOOL}d", (uint8_t *)v15, 0x12u);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      swift_release(v10);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v8, v23);
    }
    else
    {

      swift_release(v10);
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
    }
  }
  return result;
}

uint64_t sub_10029003C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v16 - v7;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v6);
  if (result)
  {
    v10 = result;
    v11 = sub_1002924F8(a1 & 1);
    v12 = rpclog.getter((uint64_t)v8);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, (os_log_type_t)v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 67240192;
      v17 = v11 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 4, v15 + 8);
      _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v14, "Tightbeam, enableCallbackMessages return: %{BOOL,public}d", v15, 8u);
      swift_slowDealloc(v15, -1, -1);
    }

    swift_release(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  }
  return result;
}

uint64_t sub_100290328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Logger(0);
  v2 = __chkstk_darwin(v1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 96))(v2);
  if (!v3)
    return -1;
  v4 = v3;
  v5 = sub_1002926F0();
  swift_release(v4);
  return v5;
}

uint64_t sub_100290550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v24 - v5;
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v24 - v8;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 96))(v7);
  if (result)
  {
    v11 = result;
    v12 = sub_100292714();
    v14 = v13;
    v15 = rpclog.getter((uint64_t)v9);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v18 = 134349056;
      v25 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v18 + 4, v18 + 12);
      _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v17, "numberOfWifiSamplesReceivedWhileAsleep='%{public}llu'", v18, 0xCu);
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = *(void (**)(char *, uint64_t))(v2 + 8);
    v19(v9, v1);
    v20 = rpclog.getter((uint64_t)v6);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v23 = 134349056;
      v25 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v23 + 4, v23 + 12);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "timeSinceAPLastSleptInUsecs='%{public}llu'", v23, 0xCu);
      swift_slowDealloc(v23, -1, -1);
    }

    swift_release(v11);
    return ((uint64_t (*)(char *, uint64_t))v19)(v6, v1);
  }
  return result;
}

uint64_t sub_10029090C(Swift::UInt64 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = type metadata accessor for Logger(0);
  v4 = __chkstk_darwin(v3);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v4);
  if (!v5)
    return -1;
  v6 = v5;
  v7 = sub_1002928CC(a1);
  swift_release(v6);
  return v7;
}

uint64_t sub_100290B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Logger(0);
  v2 = __chkstk_darwin(v1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 96))(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = sub_100292714();
  swift_release(v4);
  return v5;
}

uint64_t sub_100290D78(Swift::UInt64 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = type metadata accessor for Logger(0);
  v4 = __chkstk_darwin(v3);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v4);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = sub_1002928F0(a1);
  swift_release(v6);
  return v7;
}

uint64_t sub_100290FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Logger(0);
  v2 = __chkstk_darwin(v1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 96))(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = sub_100292AB8();
  swift_release(v4);
  return v5;
}

unint64_t sub_1002911E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned __int8 v6;
  uint64_t v7;

  v1 = type metadata accessor for Logger(0);
  v2 = __chkstk_darwin(v1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 96))(v2);
  if (v3)
  {
    v4 = v3;
    v5 = sub_100292350();
    swift_release(v4);
    v6 = 0;
    v7 = v5;
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  return v7 | ((unint64_t)v6 << 32);
}

uint64_t sub_10029141C(Swift::UInt64 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = type metadata accessor for Logger(0);
  v4 = __chkstk_darwin(v3);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v4);
  if (!v5)
    return 2;
  v6 = v5;
  v7 = sub_100292C74(a1);
  swift_release(v6);
  return v7 & 1;
}

uint64_t sub_10029164C(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  int v8;

  v3 = type metadata accessor for Logger(0);
  v4 = __chkstk_darwin(v3);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v4);
  if (v5)
  {
    v6 = v5;
    v7 = sub_100292E20(a1);
    swift_release(v6);
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  return v7 | (v8 << 8);
}

uint64_t sub_100291888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  int v6;

  v1 = type metadata accessor for Logger(0);
  v2 = __chkstk_darwin(v1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 96))(v2);
  if (v3)
  {
    v4 = v3;
    v5 = sub_100292FCC();
    swift_release(v4);
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 1;
  }
  return v5 | (v6 << 8);
}

uint64_t type metadata accessor for ALTightbeamHandler()
{
  return objc_opt_self(_TtC8ALRPCShm18ALTightbeamHandler);
}

uint64_t method lookup function for ALTightbeamHandler(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALTightbeamHandler);
}

uint64_t dispatch thunk of ALTightbeamHandler.__allocating_init(cb:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ALTightbeamHandler.apOn()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ALTightbeamHandler.apOff()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ALTightbeamHandler.enqueueWifiSample(notification:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ALTightbeamHandler.enableCallbackMessages(enable:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of ALTightbeamHandler.getSamplesQueueSize()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ALTightbeamHandler.printBufferUsageStatistics()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ALTightbeamHandler.setNumberOfAPsBeforeInterleavingSpecialTimestamp(number:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of ALTightbeamHandler.mallocNBlocks(number:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of ALTightbeamHandler.getLargestFreeBlockBytes()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of ALTightbeamHandler.getPowerState()()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ALTightbeamHandler.pingForDaemonWatchdog(id:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of ALTightbeamHandler.setAONLogLevel(level:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))() & 0x1FF;
}

uint64_t sub_100291BF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = rpclog.getter((uint64_t)v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    v12 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Tightbeam, hello ack: %llu.", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_100291D18(const char *a1)
{
  uint64_t v1;

  sub_10028E7A0(a1, *(_DWORD **)(v1 + 16), *(_DWORD **)(v1 + 24));
}

uint64_t sub_100291D30()
{
  uint64_t v0;

  return sub_10028EFD0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100291D38(const char *a1)
{
  uint64_t v1;

  return sub_10028E8CC(a1, *(const char **)(v1 + 16), *(_DWORD **)(v1 + 24), *(_DWORD **)(v1 + 32));
}

uint64_t sub_100291D6C(char a1)
{
  return 0x40020100u >> (8 * a1);
}

BOOL sub_100291D84(_BYTE *a1, _BYTE *a2)
{
  return (0x40020100u >> (8 * *a1)) == (0x40020100u >> (8 * *a2));
}

Swift::Int sub_100291DB8()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(0x40020100u >> (8 * v1));
  return Hasher._finalize()();
}

void sub_100291E08()
{
  _BYTE *v0;

  Hasher._combine(_:)(0x40020100u >> (8 * *v0));
}

Swift::Int sub_100291E40(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(0x40020100u >> (8 * v2));
  return Hasher._finalize()();
}

uint64_t sub_100291E8C@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100295418(*a1);
  *a2 = result;
  return result;
}

void sub_100291EB4(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = 0x40020100u >> (8 * *v1);
}

uint64_t sub_100291ED0(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t sub_100291ED8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100291EE0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t sub_100291EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_100291EF0(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100291EF8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return a3 >> 8;
}

uint64_t sub_100291F00(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*sub_100291F08())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100291F18(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return HIWORD(a3);
}

uint64_t sub_100291F20(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 18) = result;
  return result;
}

uint64_t (*sub_100291F28())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100291F38(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return HIBYTE(a3);
}

uint64_t sub_100291F40(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 19) = result;
  return result;
}

uint64_t (*sub_100291F48())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

unint64_t sub_100291F70(char a1)
{
  return 0x100804020100uLL >> (8 * a1);
}

BOOL sub_100291F8C(_BYTE *a1, _BYTE *a2)
{
  return ((0x100804020100uLL >> (8 * *a1)) & 0x1F) == ((0x100804020100uLL >> (8 * *a2)) & 0x1F);
}

Swift::Int sub_100291FC4()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(0x100804020100uLL >> (8 * v1));
  return Hasher._finalize()();
}

void sub_100292018()
{
  _BYTE *v0;

  Hasher._combine(_:)(0x100804020100uLL >> (8 * *v0));
}

Swift::Int sub_100292054(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(0x100804020100uLL >> (8 * v2));
  return Hasher._finalize()();
}

uint64_t sub_1002920A4@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100295438(*a1);
  *a2 = result;
  return result;
}

void sub_1002920CC(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = 0x100804020100uLL >> (8 * *v1);
}

uint64_t sub_1002920F4(Swift::UInt64 a1)
{
  return sub_100292914(a1, 0x50CEDDD6FEFEC9C4uLL);
}

uint64_t sub_100292118(Swift::UInt64 a1, Swift::UInt64 a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt64 v29;
  Swift::UInt64 v30;
  int v31;

  v31 = a3;
  v29 = a1;
  v30 = a2;
  v5 = type metadata accessor for TightbeamDecoder(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TightbeamEncoder(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v3 + 16);
  v14 = ClientConnection.allocateMessage(size:capabilities:)(28, 0);
  if (!v4)
  {
    v24 = v8;
    v25 = v6;
    v27 = v10;
    v28 = v9;
    v26 = v5;
    v15 = v31;
    v16 = v14;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0x3545A80215C54633uLL);
    TightbeamEncoder.encode(_:)(v29);
    TightbeamEncoder.encode(_:)(v30);
    TightbeamEncoder.encode(_:)(v15);
    TightbeamEncoder.encode(_:)(BYTE1(v15));
    TightbeamEncoder.encode(_:)(BYTE2(v15));
    TightbeamEncoder.encode(_:)(HIBYTE(v15));
    v17 = TightbeamEncoder.complete()();
    v19 = ClientConnection.send(message:)();
    swift_release(v17);
    v20 = swift_retain(v19);
    v21 = v24;
    v22 = TightbeamDecoder.init(message:)(v20);
    v13 = TightbeamDecoder.decode(as:)(v22);
    swift_release(v19);
    swift_release(v16);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v26);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v28);
  }
  return v13;
}

uint64_t sub_100292308()
{
  return sub_1002943EC(0x32B3991E6CE47131uLL);
}

uint64_t sub_10029232C()
{
  return sub_1002943EC(0xBC40CFF1A461D781);
}

uint64_t sub_100292350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for TightbeamDecoder(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TightbeamEncoder(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v0 + 16);
  v11 = ClientConnection.allocateMessage(size:capabilities:)(8, 0);
  if (!v1)
  {
    v19 = v3;
    v20 = v2;
    v12 = v11;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0xC7498AF17471E693);
    v13 = TightbeamEncoder.complete()();
    v15 = ClientConnection.send(message:)();
    swift_release(v13);
    v16 = swift_retain(v15);
    v17 = TightbeamDecoder.init(message:)(v16);
    v10 = TightbeamDecoder.decode(as:)(v17);
    swift_release(v15);
    swift_release(v12);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v10;
}

uint64_t sub_1002924F8(int a1)
{
  return sub_100292548(a1, 0xF68AD8D4317D2BDBLL) & 1;
}

uint64_t sub_100292520(int a1)
{
  return sub_100292548(a1, 0x246C8AC0C407EFA8uLL) & 1;
}

uint64_t sub_100292548(int a1, Swift::UInt64 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt64 v23;
  int v24;

  v23 = a2;
  v24 = a1;
  v4 = type metadata accessor for TightbeamDecoder(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TightbeamEncoder(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + 16);
  v13 = ClientConnection.allocateMessage(size:capabilities:)(9, 0);
  if (!v3)
  {
    v21 = v5;
    v22 = v4;
    v14 = v13;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(v23);
    TightbeamEncoder.encode(_:)(v24 & 1);
    v15 = TightbeamEncoder.complete()();
    v17 = ClientConnection.send(message:)();
    swift_release(v15);
    v18 = swift_retain(v17);
    v19 = TightbeamDecoder.init(message:)(v18);
    LOBYTE(v12) = TightbeamDecoder.decode(as:)(v19);
    swift_release(v17);
    swift_release(v14);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v22);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v12 & 1;
}

uint64_t sub_1002926F0()
{
  return sub_100292ADC(0x32CDF0B3FD13DCEFuLL);
}

uint64_t sub_100292714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for TightbeamDecoder(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TightbeamEncoder(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v0 + 16);
  v11 = ClientConnection.allocateMessage(size:capabilities:)(8, 0);
  if (!v1)
  {
    v19 = v3;
    v20 = v2;
    v12 = v11;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0xA9650CE9B29F447FLL);
    v13 = TightbeamEncoder.complete()();
    v15 = ClientConnection.send(message:)();
    swift_release(v13);
    v16 = swift_retain(v15);
    v17 = TightbeamDecoder.init(message:)(v16);
    v10 = TightbeamDecoder.decode(as:)(v17);
    TightbeamDecoder.decode(as:)(v10);
    swift_release(v15);
    swift_release(v12);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v10;
}

uint64_t sub_1002928CC(Swift::UInt64 a1)
{
  return sub_100292914(a1, 0xE0C4AD75FE620B62);
}

uint64_t sub_1002928F0(Swift::UInt64 a1)
{
  return sub_100292914(a1, 0x404B81785DEE86EuLL);
}

uint64_t sub_100292914(Swift::UInt64 a1, Swift::UInt64 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt64 v23;
  Swift::UInt64 v24;

  v23 = a2;
  v24 = a1;
  v4 = type metadata accessor for TightbeamDecoder(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TightbeamEncoder(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + 16);
  v13 = ClientConnection.allocateMessage(size:capabilities:)(16, 0);
  if (!v3)
  {
    v21 = v5;
    v22 = v4;
    v14 = v13;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(v23);
    TightbeamEncoder.encode(_:)(v24);
    v15 = TightbeamEncoder.complete()();
    v17 = ClientConnection.send(message:)();
    swift_release(v15);
    v18 = swift_retain(v17);
    v19 = TightbeamDecoder.init(message:)(v18);
    v12 = TightbeamDecoder.decode(as:)(v19);
    swift_release(v17);
    swift_release(v14);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v22);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v12;
}

uint64_t sub_100292AB8()
{
  return sub_100292ADC(0xA336D5BF2102DE71);
}

uint64_t sub_100292ADC(Swift::UInt64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt64 v21;

  v21 = a1;
  v3 = type metadata accessor for TightbeamDecoder(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TightbeamEncoder(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v1 + 16);
  v12 = ClientConnection.allocateMessage(size:capabilities:)(8, 0);
  if (!v2)
  {
    v19 = v4;
    v20 = v3;
    v13 = v12;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(v21);
    v14 = TightbeamEncoder.complete()();
    v16 = ClientConnection.send(message:)();
    swift_release(v14);
    v17 = swift_retain(v16);
    v18 = TightbeamDecoder.init(message:)(v17);
    v11 = TightbeamDecoder.decode(as:)(v18);
    swift_release(v16);
    swift_release(v13);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v20);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return v11;
}

uint64_t sub_100292C74(Swift::UInt64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt64 v21;

  v21 = a1;
  v3 = type metadata accessor for TightbeamDecoder(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TightbeamEncoder(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v1 + 16);
  v12 = ClientConnection.allocateMessage(size:capabilities:)(16, 0);
  if (!v2)
  {
    v19 = v4;
    v20 = v3;
    v13 = v12;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0x1FD23A08A59E572EuLL);
    TightbeamEncoder.encode(_:)(v21);
    v14 = TightbeamEncoder.complete()();
    v16 = ClientConnection.send(message:)();
    swift_release(v14);
    v17 = swift_retain(v16);
    v18 = TightbeamDecoder.init(message:)(v17);
    LOBYTE(v11) = TightbeamDecoder.decode(as:)(v18);
    swift_release(v16);
    swift_release(v13);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v20);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return v11 & 1;
}

uint64_t sub_100292E20(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v21 = a1;
  v3 = type metadata accessor for TightbeamDecoder(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TightbeamEncoder(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v1 + 16);
  v12 = ClientConnection.allocateMessage(size:capabilities:)(9, 0);
  if (!v2)
  {
    v19 = v4;
    v20 = v3;
    v13 = v12;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0xFF3ED4CFB31F2EB2);
    TightbeamEncoder.encode(_:)(v21);
    v14 = TightbeamEncoder.complete()();
    v16 = ClientConnection.send(message:)();
    swift_release(v14);
    v17 = swift_retain(v16);
    v18 = TightbeamDecoder.init(message:)(v17);
    v11 = TightbeamDecoder.decode(as:)(v18);
    swift_release(v16);
    swift_release(v13);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v20);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return v11;
}

uint64_t sub_100292FCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for TightbeamDecoder(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TightbeamEncoder(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v0 + 16);
  v11 = ClientConnection.allocateMessage(size:capabilities:)(8, 0);
  if (!v1)
  {
    v19 = v3;
    v20 = v2;
    v12 = v11;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0x31F3DFE67868C8DuLL);
    v13 = TightbeamEncoder.complete()();
    v15 = ClientConnection.send(message:)();
    swift_release(v13);
    v16 = swift_retain(v15);
    v17 = TightbeamDecoder.init(message:)(v16);
    v10 = TightbeamDecoder.decode(as:)(v17);
    swift_release(v15);
    swift_release(v12);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v10;
}

uint64_t sub_10029317C()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100293184@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000875F0(v1 + 24, a1);
}

uint64_t sub_1002931A0(uint64_t a1, _QWORD *a2)
{
  return sub_1002945F8(a1, a2, &qword_100380EF8, type metadata accessor for aonloc_service.Server, (uint64_t)&unk_1002EF610);
}

uint64_t sub_1002931BC(uint64_t a1, _QWORD *a2)
{
  return sub_100294738(a1, a2, &qword_100380EF8, type metadata accessor for aonloc_service.Server, (uint64_t)&unk_1002EF610);
}

uint64_t sub_1002931D8(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  Swift::UInt32 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Swift::UInt64 v73;
  Swift::UInt64 v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  unsigned __int8 v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  char *v137;
  uint64_t v138;
  uint64_t result;
  Swift::String v140;
  void *object;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t (*v152)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;

  v162 = a1;
  v1 = type metadata accessor for TightbeamEncoder(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v151 = (char *)&v142 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000039AC(&qword_100380F00);
  v5 = __chkstk_darwin(v4);
  v150 = (char *)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v155 = (char *)&v142 - v8;
  v9 = __chkstk_darwin(v7);
  v149 = (char *)&v142 - v10;
  v11 = __chkstk_darwin(v9);
  v154 = (char *)&v142 - v12;
  v13 = __chkstk_darwin(v11);
  v148 = (char *)&v142 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v142 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v142 - v19;
  v21 = __chkstk_darwin(v18);
  v147 = (char *)&v142 - v22;
  v23 = __chkstk_darwin(v21);
  v146 = (char *)&v142 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v142 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (uint64_t)&v142 - v29;
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v142 - v32;
  v34 = __chkstk_darwin(v31);
  v144 = (char *)&v142 - v35;
  v36 = __chkstk_darwin(v34);
  v145 = (char *)&v142 - v37;
  v38 = __chkstk_darwin(v36);
  v143 = (char *)&v142 - v39;
  __chkstk_darwin(v38);
  v41 = (char *)&v142 - v40;
  v42 = type metadata accessor for TightbeamDecoder(0);
  __chkstk_darwin(v42);
  v44 = (char *)&v142 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = v46;
  v159 = v45;
  (*(void (**)(char *, char *))(v46 + 16))(v44, v162);
  v156 = v2;
  v157 = v41;
  v152 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
  v153 = v1;
  v47 = v152(v41, 1, 1, v1);
  v162 = v44;
  v48 = TightbeamDecoder.decode(as:)(v47);
  v49 = v48;
  if (v48 <= 0x31F3DFE67868C8CLL)
  {
    v61 = (uint64_t)v33;
    v63 = v154;
    v62 = v155;
    if (v48 <= (uint64_t)0xC7498AF17471E692)
    {
      if (v48 == 0xA336D5BF2102DE71)
      {
        v103 = v160[6];
        v104 = v160[7];
        sub_1002862D0(v160 + 3, v103);
        v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 96))(v103, v104);
        v105 = v161;
        TightbeamDecoder.encoder(bytes:capabilities:)(8, 0);
        v55 = v156;
        if (!v105)
        {
          v60 = v153;
          v152(v63, 0, 1, v153);
          v134 = (uint64_t)v63;
          v50 = (uint64_t)v157;
          sub_1002954E4(v134, (uint64_t)v157);
          v135 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v50, 1, v60);
          v57 = v158;
          v56 = v159;
          if (!v135)
LABEL_61:
            TightbeamEncoder.encode(_:)(v30);
LABEL_65:
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v50, 1, v60))
          {
            (*(void (**)(char *, uint64_t))(v57 + 8))(v162, v56);
            v30 = 0;
          }
          else
          {
            v137 = v151;
            v138 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 16))(v151, v50, v60);
            v30 = TightbeamEncoder.complete()(v138);
            (*(void (**)(char *, uint64_t))(v55 + 8))(v137, v60);
            (*(void (**)(char *, uint64_t))(v57 + 8))(v162, v56);
          }
          sub_1002954A4(v50);
          return v30;
        }
        v57 = v158;
        v56 = v159;
LABEL_34:
        v50 = (uint64_t)v157;
        goto LABEL_57;
      }
      if (v48 != 0xA9650CE9B29F447FLL)
      {
        v50 = (uint64_t)v157;
        if (v48 != 0xBC40CFF1A461D781)
          goto LABEL_70;
        v30 = v160[6];
        v110 = v160[7];
        sub_1002862D0(v160 + 3, v30);
        (*(void (**)(uint64_t, uint64_t))(v110 + 32))(v30, v110);
        v111 = v161;
        TightbeamDecoder.encoder(bytes:capabilities:)(0, 0);
        if (!v111)
        {
          v60 = v153;
          v152((char *)v61, 0, 1, v153);
          sub_1002954E4(v61, v50);
          v55 = v156;
          v57 = v158;
          v56 = v159;
          goto LABEL_65;
        }
        goto LABEL_39;
      }
      v71 = v160[6];
      v72 = v160[7];
      sub_1002862D0(v160 + 3, v71);
      v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 72))(v71, v72);
      v74 = v73;
      v75 = v161;
      TightbeamDecoder.encoder(bytes:capabilities:)(16, 0);
      v55 = v156;
      v50 = (uint64_t)v157;
      if (v75)
        goto LABEL_39;
      v76 = v153;
      v152(v20, 0, 1, v153);
      sub_1002954E4((uint64_t)v20, v50);
      v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v50, 1, v76);
      v57 = v158;
      v56 = v159;
      if (!v77)
      {
        TightbeamEncoder.encode(_:)(v30);
        TightbeamEncoder.encode(_:)(v74);
      }
    }
    else
    {
      v50 = (uint64_t)v157;
      if (v48 <= (uint64_t)0xF68AD8D4317D2BDALL)
      {
        if (v48 == 0xC7498AF17471E693)
        {
          v65 = v160[6];
          v64 = v160[7];
          sub_1002862D0(v160 + 3, v65);
          v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 40))(v65, v64);
          v67 = v161;
          TightbeamDecoder.encoder(bytes:capabilities:)(4, 0);
          v57 = v158;
          v56 = v159;
          if (!v67)
          {
            v60 = v153;
            v152((char *)v30, 0, 1, v153);
            sub_1002954E4(v30, v50);
            v55 = v156;
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v50, 1, v60))
              TightbeamEncoder.encode(_:)(v66);
            goto LABEL_65;
          }
          goto LABEL_57;
        }
        if (v48 == 0xE0C4AD75FE620B62)
        {
          v106 = v160[6];
          v107 = v160[7];
          v108 = sub_1002862D0(v160 + 3, v106);
          v109 = TightbeamDecoder.decode(as:)(v108);
          v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 80))(v109, v106, v107);
          goto LABEL_56;
        }
        goto LABEL_70;
      }
      if (v48 != 0xF68AD8D4317D2BDBLL)
      {
        if (v48 == 0xFF3ED4CFB31F2EB2)
        {
          v112 = v160[6];
          v113 = v160[7];
          v114 = sub_1002862D0(v160 + 3, v112);
          v115 = TightbeamDecoder.decode(as:)(v114);
          v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 112))(v115, v112, v113);
          v116 = (uint64_t)v62;
          v117 = v161;
          TightbeamDecoder.encoder(bytes:capabilities:)(1, 0);
          v57 = v158;
          v56 = v159;
          if (!v117)
          {
            v60 = v153;
            v152((char *)v116, 0, 1, v153);
            sub_1002954E4(v116, v50);
            v55 = v156;
LABEL_43:
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v50, 1, v60))
              TightbeamEncoder.encode(_:)(v30);
            goto LABEL_65;
          }
LABEL_57:
          (*(void (**)(char *, uint64_t))(v57 + 8))(v162, v56);
          sub_1002954A4(v50);
          return v30;
        }
        goto LABEL_70;
      }
      v78 = v160[6];
      v79 = v160[7];
      v80 = sub_1002862D0(v160 + 3, v78);
      v81 = TightbeamDecoder.decode(as:)(v80);
      v82 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v79 + 48))(v81 & 1, v78, v79);
      v30 = (uint64_t)v27;
      v83 = v161;
      TightbeamDecoder.encoder(bytes:capabilities:)(1, 0);
      v57 = v158;
      v56 = v159;
      if (v83)
        goto LABEL_57;
      v84 = v153;
      v152((char *)v30, 0, 1, v153);
      sub_1002954E4(v30, v50);
      v55 = v156;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v50, 1, v84))
        TightbeamEncoder.encode(_:)(v82 & 1);
    }
    v60 = v153;
    goto LABEL_65;
  }
  if (v48 > 0x32B3991E6CE47130)
  {
    if (v48 <= 0x3545A80215C54632)
    {
      if (v48 == 0x32B3991E6CE47131)
      {
        v68 = v160[6];
        v69 = v160[7];
        sub_1002862D0(v160 + 3, v68);
        (*(void (**)(uint64_t, uint64_t))(v69 + 24))(v68, v69);
        v30 = (uint64_t)v144;
        v70 = v161;
        TightbeamDecoder.encoder(bytes:capabilities:)(0, 0);
        v55 = v156;
        v57 = v158;
        v56 = v159;
        if (!v70)
        {
          v60 = v153;
          v152((char *)v30, 0, 1, v153);
          v50 = (uint64_t)v157;
          sub_1002954E4(v30, (uint64_t)v157);
          goto LABEL_65;
        }
        goto LABEL_34;
      }
      v50 = (uint64_t)v157;
      if (v48 != 0x32CDF0B3FD13DCEFLL)
        goto LABEL_70;
      v122 = v160[6];
      v123 = v160[7];
      sub_1002862D0(v160 + 3, v122);
      v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v123 + 64))(v122, v123);
      v17 = v147;
LABEL_56:
      v133 = v161;
      TightbeamDecoder.encoder(bytes:capabilities:)(8, 0);
      v57 = v158;
      v56 = v159;
      if (v133)
        goto LABEL_57;
      v60 = v153;
      v152(v17, 0, 1, v153);
      sub_1002954E4((uint64_t)v17, v50);
      v55 = v156;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v50, 1, v60))
        goto LABEL_61;
      goto LABEL_65;
    }
    if (v48 != 0x3545A80215C54633)
    {
      v50 = (uint64_t)v157;
      if (v48 != 0x50CEDDD6FEFEC9C4)
        goto LABEL_70;
      v129 = v160[6];
      v130 = v160[7];
      v131 = sub_1002862D0(v160 + 3, v129);
      v132 = TightbeamDecoder.decode(as:)(v131);
      v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v130 + 8))(v132, v129, v130);
      v17 = v143;
      goto LABEL_56;
    }
    v90 = v160[6];
    v91 = v160[7];
    v160 = sub_1002862D0(v160 + 3, v90);
    v92 = TightbeamDecoder.decode(as:)(v160);
    v93 = TightbeamDecoder.decode(as:)(v92);
    v94 = TightbeamDecoder.decode(as:)();
    v95 = v94;
    v96 = TightbeamDecoder.decode(as:)(v94);
    v97 = v96;
    v98 = TightbeamDecoder.decode(as:)(v96);
    v99 = v98;
    v100 = TightbeamDecoder.decode(as:)(v98);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v91 + 16))(v92, v93, v95 | (unsigned __int16)(v97 << 8) | (v99 << 16) | (v100 << 24), v90, v91);
    v101 = (uint64_t)v145;
    v102 = v161;
    TightbeamDecoder.encoder(bytes:capabilities:)(4, 0);
    if (!v102)
    {
      v60 = v153;
      v152((char *)v101, 0, 1, v153);
      v50 = (uint64_t)v157;
      sub_1002954E4(v101, (uint64_t)v157);
      v55 = v156;
      v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v50, 1, v60);
      v57 = v158;
      v56 = v159;
      if (!v136)
        TightbeamEncoder.encode(_:)(v30);
      goto LABEL_65;
    }
    v50 = (uint64_t)v157;
LABEL_39:
    v57 = v158;
    v56 = v159;
    goto LABEL_57;
  }
  if (v48 > 0x1FD23A08A59E572DLL)
  {
    v50 = (uint64_t)v157;
    if (v48 == 0x1FD23A08A59E572ELL)
    {
      v85 = v160[6];
      v86 = v160[7];
      v87 = sub_1002862D0(v160 + 3, v85);
      v88 = TightbeamDecoder.decode(as:)(v87);
      v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 104))(v88, v85, v86);
      v89 = (uint64_t)v149;
    }
    else
    {
      if (v48 != 0x246C8AC0C407EFA8)
        goto LABEL_70;
      v124 = v160[6];
      v125 = v160[7];
      v126 = sub_1002862D0(v160 + 3, v124);
      v127 = TightbeamDecoder.decode(as:)(v126);
      v30 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v125 + 56))(v127 & 1, v124, v125);
      v89 = (uint64_t)v146;
    }
    v128 = v161;
    TightbeamDecoder.encoder(bytes:capabilities:)(1, 0);
    v57 = v158;
    v56 = v159;
    if (!v128)
    {
      v60 = v153;
      v152((char *)v89, 0, 1, v153);
      sub_1002954E4(v89, v50);
      v55 = v156;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v50, 1, v60))
        TightbeamEncoder.encode(_:)(v30 & 1);
      goto LABEL_65;
    }
    goto LABEL_57;
  }
  v50 = (uint64_t)v157;
  if (v48 == 0x31F3DFE67868C8DLL)
  {
    v51 = v160[6];
    v52 = v160[7];
    sub_1002862D0(v160 + 3, v51);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 120))(v51, v52);
    v53 = v150;
    v54 = v161;
    TightbeamDecoder.encoder(bytes:capabilities:)(1, 0);
    v55 = v156;
    v57 = v158;
    v56 = v159;
    if (!v54)
    {
      v58 = v53;
      v59 = (uint64_t)v53;
      v60 = v153;
      v152(v58, 0, 1, v153);
      sub_1002954E4(v59, v50);
      goto LABEL_43;
    }
    goto LABEL_57;
  }
  if (v48 == 0x404B81785DEE86ELL)
  {
    v118 = v160[6];
    v119 = v160[7];
    v120 = sub_1002862D0(v160 + 3, v118);
    v121 = TightbeamDecoder.decode(as:)(v120);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 88))(v121, v118, v119);
    v17 = v148;
    goto LABEL_56;
  }
LABEL_70:
  v163 = 0;
  v164 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(v164);
  v163 = 0xD00000000000002DLL;
  v164 = 0x8000000100305A20;
  v165 = v49;
  v140._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v140._object;
  String.append(_:)(v140);
  swift_bridgeObjectRelease(object);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v163, v164, "ALRPCShm/aonloc.swift", 21, 2, 412, 0);
  __break(1u);
  return result;
}

uint64_t sub_1002940A4()
{
  return dispatch thunk of ServiceConnection.begin()();
}

uint64_t sub_1002940CC(char *a1)
{
  return sub_1002931D8(a1);
}

uint64_t sub_1002940EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = type metadata accessor for TightbeamEndpoint(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_allocObject(v1, 24, 7);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v8 = type metadata accessor for ClientConnection(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = ClientConnection.init(endpoint:)(v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  *(_QWORD *)(v7 + 16) = v9;
  return v7;
}

uint64_t sub_1002941B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v4 = type metadata accessor for TightbeamEndpoint(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = type metadata accessor for ClientConnection(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = ClientConnection.init(endpoint:)(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  *(_QWORD *)(v2 + 16) = v9;
  return v2;
}

uint64_t sub_100294278(Swift::UInt64 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for TightbeamEncoder(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = ClientConnection.allocateMessage(size:capabilities:)(16, 0);
  if (!v1)
  {
    v8 = result;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0x7F1459E11F2AC8CBuLL);
    TightbeamEncoder.encode(_:)(a1);
    v9 = TightbeamEncoder.complete()();
    v10 = ClientConnection.send(message:)();
    swift_release(v10);
    swift_release(v8);
    swift_release(v9);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_1002943A4()
{
  return sub_1002943EC(0xF36AAD1A335EC889);
}

uint64_t sub_1002943C8()
{
  return sub_1002943EC(0x712657D6300C16CEuLL);
}

uint64_t sub_1002943EC(Swift::UInt64 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for TightbeamEncoder(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = ClientConnection.allocateMessage(size:capabilities:)(8, 0);
  if (!v1)
  {
    v8 = result;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(a1);
    v9 = TightbeamEncoder.complete()();
    v10 = ClientConnection.send(message:)();
    swift_release(v10);
    swift_release(v8);
    swift_release(v9);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_100294504@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = type metadata accessor for TightbeamEndpoint(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject(v2, 24, 7);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v10 = type metadata accessor for ClientConnection(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = ClientConnection.init(endpoint:)(v8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  *(_QWORD *)(v9 + 16) = v11;
  *a2 = v9;
  return result;
}

uint64_t sub_1002945DC(uint64_t a1, _QWORD *a2)
{
  return sub_1002945F8(a1, a2, &qword_100380F08, type metadata accessor for aonloc_callback.Server, (uint64_t)&unk_1002EF688);
}

uint64_t sub_1002945F8(uint64_t a1, _QWORD *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v11 = type metadata accessor for TightbeamEndpoint(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(v5, 64, 7);
  sub_1000875F0((uint64_t)a2, v15 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v16 = type metadata accessor for ServiceConnection(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_QWORD *)(v15 + 16) = ServiceConnection.init(endpoint:)(v14);
  v17 = sub_100295688(a3, a4, a5);
  v18 = swift_retain(v15);
  dispatch thunk of ServiceConnection.service.setter(v18, v17);
  sub_1000187CC(a2);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v15;
}

uint64_t sub_10029471C(uint64_t a1, _QWORD *a2)
{
  return sub_100294738(a1, a2, &qword_100380F08, type metadata accessor for aonloc_callback.Server, (uint64_t)&unk_1002EF688);
}

uint64_t sub_100294738(uint64_t a1, _QWORD *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v9 = v5;
  v12 = type metadata accessor for TightbeamEndpoint(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000875F0((uint64_t)a2, v9 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v16 = type metadata accessor for ServiceConnection(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_QWORD *)(v9 + 16) = ServiceConnection.init(endpoint:)(v15);
  v17 = sub_100295688(a3, a4, a5);
  v18 = swift_retain(v9);
  dispatch thunk of ServiceConnection.service.setter(v18, v17);
  sub_1000187CC(a2);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  return v9;
}

uint64_t sub_100294850(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t result;
  Swift::String v43;
  void *object;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v2 = v1;
  v4 = type metadata accessor for TightbeamEncoder(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v45 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC(&qword_100380F00);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v45 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v45 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v45 - v17;
  v19 = type metadata accessor for TightbeamDecoder(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v23;
  v50 = v22;
  (*(void (**)(char *, uint64_t))(v23 + 16))(v21, a1);
  v46 = v5;
  v47 = v4;
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25 = v24(v18, 1, 1, v4);
  v26 = TightbeamDecoder.decode(as:)(v25);
  if (v26 == 0xF36AAD1A335EC889)
  {
    v16 = (char *)v2[6];
    v30 = v2[7];
    sub_1002862D0(v2 + 3, (uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v30 + 16))(v16, v30);
    v31 = v48;
    TightbeamDecoder.encoder(bytes:capabilities:)(0, 0);
    if (!v31)
      goto LABEL_11;
    goto LABEL_9;
  }
  v27 = v26;
  if (v26 == 0x712657D6300C16CELL)
  {
    v16 = (char *)v2[6];
    v28 = v2[7];
    sub_1002862D0(v2 + 3, (uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v28 + 24))(v16, v28);
    v29 = v48;
    TightbeamDecoder.encoder(bytes:capabilities:)(0, 0);
    if (!v29)
    {
      v13 = v10;
LABEL_11:
      v37 = v50;
      v38 = v47;
      v24(v13, 0, 1, v47);
      sub_1002954E4((uint64_t)v13, (uint64_t)v18);
      v39 = v46;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v18, 1, v38))
      {
        (*(void (**)(char *, uint64_t))(v49 + 8))(v21, v37);
        v16 = 0;
      }
      else
      {
        v40 = v45;
        v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v39 + 16))(v45, v18, v38);
        v16 = (char *)TightbeamEncoder.complete()(v41);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v21, v37);
      }
      sub_1002954A4((uint64_t)v18);
      return (uint64_t)v16;
    }
    goto LABEL_9;
  }
  if (v26 == 0x7F1459E11F2AC8CBLL)
  {
    v32 = v2[6];
    v33 = v2[7];
    v34 = sub_1002862D0(v2 + 3, v32);
    v35 = TightbeamDecoder.decode(as:)(v34);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 8))(v35, v32, v33);
    v36 = v48;
    TightbeamDecoder.encoder(bytes:capabilities:)(0, 0);
    if (!v36)
    {
      v13 = v16;
      goto LABEL_11;
    }
LABEL_9:
    (*(void (**)(char *, uint64_t))(v49 + 8))(v21, v50);
    sub_1002954A4((uint64_t)v18);
    return (uint64_t)v16;
  }
  v51 = 0;
  v52 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease(v52);
  v51 = 0xD00000000000002ELL;
  v52 = 0x80000001003059F0;
  v53 = v27;
  v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v43._object;
  String.append(_:)(v43);
  swift_bridgeObjectRelease(object);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v51, v52, "ALRPCShm/aonloc.swift", 21, 2, 419, 0);
  __break(1u);
  return result;
}

uint64_t sub_100294C80()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_1000187CC((_QWORD *)(v0 + 24));
  return v0;
}

uint64_t sub_100294CA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_1000187CC((_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_100294CD0(uint64_t a1)
{
  return sub_100294850(a1);
}

uint64_t sub_100294CF0()
{
  return 20;
}

uint64_t sub_100294CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  char v5;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v5 = a5;
  v16 = a4;
  v17 = a1;
  v18 = a2;
  v7 = a5 >> 8;
  v8 = HIWORD(a5);
  v9 = HIBYTE(a5);
  v10 = type metadata accessor for TightbeamMessage.BufferUsage(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TightbeamMessage(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for TightbeamMessage.BufferUsage.writing(_:), v10);
  v20 = a3;
  v21 = v16;
  v22 = v5;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  static TightbeamMessage.withBufferPointer<A>(for:_:_:)(v13, v17, v18, sub_10029554C, v19, (char *)&type metadata for () + 8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_100294E14(uint64_t a1, Swift::UInt64 a2, Swift::UInt64 a3, unsigned int a4)
{
  Swift::Int8 v4;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v4 = a4;
  v7 = a4 >> 8;
  v8 = HIWORD(a4);
  v9 = HIBYTE(a4);
  v10 = type metadata accessor for TightbeamEncoder(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin();
  v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of TightbeamMessage.encoder()(v12);
  TightbeamEncoder.encode(_:)(a2);
  TightbeamEncoder.encode(_:)(a3);
  TightbeamEncoder.encode(_:)(v4);
  TightbeamEncoder.encode(_:)(v7);
  TightbeamEncoder.encode(_:)(v8);
  TightbeamEncoder.encode(_:)(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_100294EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = type metadata accessor for TightbeamMessage.BufferUsage(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TightbeamMessage(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for TightbeamMessage.BufferUsage.reading(_:), v4);
  static TightbeamMessage.withBufferPointer<A>(for:_:_:)(v7, a1, a2, sub_100294FE4, 0, &type metadata for WifiScanData);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9[1];
}

uint64_t sub_100294FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for TightbeamDecoder(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_retain(a1);
  v9 = TightbeamDecoder.init(message:)(v8);
  v20 = TightbeamDecoder.decode(as:)(v9);
  v10 = TightbeamDecoder.decode(as:)(v20);
  v11 = TightbeamDecoder.decode(as:)();
  v12 = v11;
  v13 = TightbeamDecoder.decode(as:)(v11);
  v14 = v13;
  v15 = TightbeamDecoder.decode(as:)(v13);
  v16 = v15;
  v17 = TightbeamDecoder.decode(as:)(v15);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 17) = v14;
  *(_BYTE *)(a2 + 18) = v16;
  *(_BYTE *)(a2 + 19) = v17;
  return result;
}

uint64_t sub_1002950D4()
{
  return 16;
}

uint64_t sub_1002950DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for TightbeamMessage.BufferUsage(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v13[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for TightbeamMessage(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for TightbeamMessage.BufferUsage.writing(_:), v8);
  v14 = a3;
  v15 = a4;
  static TightbeamMessage.withBufferPointer<A>(for:_:_:)(v11, a1, a2, sub_100295578, v13, (char *)&type metadata for () + 8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1002951DC(uint64_t a1, Swift::UInt64 a2, Swift::UInt64 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = type metadata accessor for TightbeamEncoder(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin();
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of TightbeamMessage.encoder()(v7);
  TightbeamEncoder.encode(_:)(a2);
  TightbeamEncoder.encode(_:)(a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100295278(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = type metadata accessor for TightbeamMessage.BufferUsage(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TightbeamMessage(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for TightbeamMessage.BufferUsage.reading(_:), v4);
  static TightbeamMessage.withBufferPointer<A>(for:_:_:)(v7, a1, a2, sub_100295368, 0, &type metadata for BufferUsageStatistics);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

uint64_t sub_100295368@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = type metadata accessor for TightbeamDecoder(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_retain(a1);
  v9 = TightbeamDecoder.init(message:)(v8);
  v10 = TightbeamDecoder.decode(as:)(v9);
  v11 = TightbeamDecoder.decode(as:)(v10);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v10;
  a2[1] = v11;
  return result;
}

uint64_t sub_100295418(uint64_t result)
{
  unsigned int v1;

  if (result == 64)
    v1 = 3;
  else
    v1 = 4;
  if (result >= 3u)
    return v1;
  else
    return result;
}

uint64_t sub_100295438(uint64_t result)
{
  switch((char)result)
  {
    case 0:
    case 1:
    case 2:
      return result;
    case 4:
      result = 3;
      break;
    case 8:
      result = 4;
      break;
    case 16:
      result = 5;
      break;
    default:
      result = 6;
      break;
  }
  return result;
}

uint64_t type metadata accessor for aonloc_service.Server()
{
  return objc_opt_self(_TtCC8ALRPCShm14aonloc_service6Server);
}

uint64_t sub_1002954A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000039AC(&qword_100380F00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002954E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000039AC(&qword_100380F00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for aonloc_callback.Server()
{
  return objc_opt_self(_TtCC8ALRPCShm15aonloc_callback6Server);
}

uint64_t sub_10029554C(uint64_t a1)
{
  uint64_t v1;

  return sub_100294E14(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_DWORD *)(v1 + 32));
}

uint64_t sub_100295578(uint64_t a1)
{
  uint64_t v1;

  return sub_1002951DC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1002955A4()
{
  unint64_t result;

  result = qword_100380F10;
  if (!qword_100380F10)
  {
    result = swift_getWitnessTable(&unk_1002EF4A8, &type metadata for UserFlags);
    atomic_store(result, (unint64_t *)&qword_100380F10);
  }
  return result;
}

unint64_t sub_1002955EC()
{
  unint64_t result;

  result = qword_100380F18;
  if (!qword_100380F18)
  {
    result = swift_getWitnessTable(&unk_1002EF548, &type metadata for NudgeFailureReason);
    atomic_store(result, (unint64_t *)&qword_100380F18);
  }
  return result;
}

uint64_t sub_100295630()
{
  return sub_100295688(&qword_100380F20, type metadata accessor for aonloc_service.Server, (uint64_t)&unk_1002EF638);
}

uint64_t sub_10029565C()
{
  return sub_100295688(&qword_100380F28, type metadata accessor for aonloc_callback.Server, (uint64_t)&unk_1002EF6B0);
}

uint64_t sub_100295688(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2();
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UserFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100295710 + 4 * byte_1002EF496[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100295744 + 4 * byte_1002EF491[v4]))();
}

uint64_t sub_100295744(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10029574C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100295754);
  return result;
}

uint64_t sub_100295760(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100295768);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10029576C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100295774(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserFlags()
{
  return &type metadata for UserFlags;
}

__n128 initializeBufferWithCopyOfBuffer for WifiScanData(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for WifiScanData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WifiScanData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WifiScanData()
{
  return &type metadata for WifiScanData;
}

__n128 initializeBufferWithCopyOfBuffer for BufferUsageStatistics(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BufferUsageStatistics(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BufferUsageStatistics(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BufferUsageStatistics()
{
  return &type metadata for BufferUsageStatistics;
}

uint64_t storeEnumTagSinglePayload for NudgeFailureReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1002958B0 + 4 * byte_1002EF4A0[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1002958E4 + 4 * byte_1002EF49B[v4]))();
}

uint64_t sub_1002958E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002958EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002958F4);
  return result;
}

uint64_t sub_100295900(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100295908);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10029590C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100295914(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NudgeFailureReason()
{
  return &type metadata for NudgeFailureReason;
}

uint64_t type metadata accessor for aonloc_service()
{
  return objc_opt_self(_TtC8ALRPCShm14aonloc_service);
}

uint64_t type metadata accessor for aonloc_service.Service()
{
  return objc_opt_self(_TtCC8ALRPCShm14aonloc_service7Service);
}

uint64_t sub_100295970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_100295978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t sub_100295980(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_100295988(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_100295990(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_100295998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t sub_1002959A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t sub_1002959A8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t sub_1002959B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t sub_1002959B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t sub_1002959C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t sub_1002959C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t sub_1002959D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t sub_1002959D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t sub_1002959E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t type metadata accessor for aonloc_callback()
{
  return objc_opt_self(_TtC8ALRPCShm15aonloc_callback);
}

uint64_t type metadata accessor for aonloc_callback.Service()
{
  return objc_opt_self(_TtCC8ALRPCShm15aonloc_callback7Service);
}

uint64_t sub_100295A28(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t rpc_afk_interface_find(const char *a1, const char *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  int interface;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  char v14[128];
  char __str[128];

  snprintf(__str, 0x80uLL, "%s-%s-fwd", a1, a2);
  snprintf(v14, 0x80uLL, "%s-%s-rev", a1, a2);
  interface = rpctools_find_interface(__str, "AFKEndpointInterface");
  if (!interface)
    return 1;
  v10 = interface;
  v11 = rpctools_find_interface(v14, "AFKEndpointInterface");
  if (!v11)
    return 1;
  v12 = v11;
  result = 0;
  *a4 = v10;
  *a5 = v12;
  return result;
}

uint64_t rpctools_find_interface(const char *a1, char *name)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  __CFDictionary *MutableCopy;
  CFStringRef v6;
  const void *v7;
  IONotificationPort *v8;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Current;
  kern_return_t v11;
  uint64_t result;
  __CFRunLoop *v13;
  io_iterator_t notification[2];

  v3 = IOServiceMatching(name);
  if (v3)
  {
    v4 = v3;
    MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v3);
    CFRelease(v4);
    if (MutableCopy)
    {
      v6 = CFStringCreateWithCString(kCFAllocatorDefault, a1, 0x8000100u);
      if (v6)
      {
        v7 = v6;
        CFDictionarySetValue(MutableCopy, CFSTR("IONameMatch"), v6);
      }
      else
      {
        v7 = MutableCopy;
        MutableCopy = 0;
      }
      CFRelease(v7);
    }
  }
  else
  {
    MutableCopy = 0;
  }
  *(_QWORD *)notification = 0;
  v8 = IONotificationPortCreate(kIOMainPortDefault);
  RunLoopSource = IONotificationPortGetRunLoopSource(v8);
  Current = CFRunLoopGetCurrent();
  CFRunLoopAddSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
  v11 = IOServiceAddMatchingNotification(v8, "IOServiceFirstMatch", MutableCopy, (IOServiceMatchingCallback)sub_100295C80, notification, &notification[1]);
  result = 0;
  if (!v11)
  {
    notification[0] = IOIteratorNext(notification[1]);
    if (!notification[0])
      CFRunLoopRun();
    v13 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v13, RunLoopSource, kCFRunLoopDefaultMode);
    IOObjectRelease(notification[1]);
    IONotificationPortDestroy(v8);
    return notification[0];
  }
  return result;
}

void sub_100295C80(io_object_t *a1, io_iterator_t iterator)
{
  io_object_t v3;
  __CFRunLoop *Current;

  v3 = IOIteratorNext(iterator);
  if (v3)
  {
    *a1 = v3;
    Current = CFRunLoopGetCurrent();
    CFRunLoopStop(Current);
  }
}

void rpc_init()
{
  qword_1003DAA30 = 0;
}

char *rpc_get_matching_server(const char *a1)
{
  int v1;
  char *v2;
  void **v3;
  void *v5;

  v5 = 0;
  v1 = sub_100295D2C(0, a1, (void ***)&v5);
  v2 = 0;
  v3 = (void **)v5;
  if (!v1)
  {
    if (*(_QWORD *)v5)
      v2 = strdup(*(const char **)v5);
    else
      v2 = 0;
  }
  sub_100295E58(v3);
  return v2;
}

uint64_t sub_100295D2C(const char *a1, const char *a2, void ***a3)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  char *v12;
  void *v13;

  v13 = 0;
  if (pthread_mutex_lock(&stru_1003812F0))
  {
    v6 = 0;
    v7 = 6;
  }
  else
  {
    v8 = qword_1003DAA30;
    if (qword_1003DAA30)
    {
      v9 = 0;
      do
      {
        v9 += sub_1002961F4((char *)v8, a1, a2);
        v8 = *(_QWORD *)(v8 + 224);
      }
      while (v8);
    }
    else
    {
      v9 = 0;
    }
    v7 = sub_100296190(8 * v9 + 8, &v13);
    v6 = (void **)v13;
    if ((_DWORD)v7)
    {
LABEL_9:
      sub_100295E58(v6);
      v6 = 0;
    }
    else
    {
      v7 = qword_1003DAA30;
      if (qword_1003DAA30)
      {
        v11 = 0;
        do
        {
          if (v11 >= v9)
          {
            v7 = 3;
            goto LABEL_9;
          }
          if (sub_1002961F4((char *)v7, a1, a2))
          {
            v12 = strdup((const char *)v7);
            if (!v12)
            {
              v7 = 4;
              goto LABEL_9;
            }
            v6[v11++] = v12;
          }
          v7 = *(_QWORD *)(v7 + 224);
        }
        while (v7);
      }
    }
    pthread_mutex_unlock(&stru_1003812F0);
  }
  *a3 = v6;
  return v7;
}

void sub_100295E58(void **a1)
{
  void *v2;
  unsigned int v3;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      v3 = 1;
      do
      {
        free(v2);
        v2 = a1[v3++];
      }
      while (v2);
    }
    free(a1);
  }
}

void **rpc_get_all_matching_servers(const char *a1)
{
  void **v2;

  v2 = 0;
  sub_100295D2C(0, a1, &v2);
  return v2;
}

char *rpc_get_server_by_name(const char *a1)
{
  int v2;
  char *v3;
  void **v4;
  const char *v5;
  void *v7;

  v7 = 0;
  v2 = sub_100295D2C(a1, 0, (void ***)&v7);
  v3 = 0;
  v4 = (void **)v7;
  if (!v2)
  {
    v5 = *(const char **)v7;
    if (!*(_QWORD *)v7)
      v5 = a1;
    v3 = strdup(v5);
  }
  sub_100295E58(v4);
  return v3;
}

void rpc_release_server(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t rpc_copy_server_property()
{
  return 0;
}

uint64_t rpc_interface_open(const char *a1, const char *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (!pthread_mutex_lock(&stru_1003812F0))
  {
    v11 = qword_1003DAA30;
    if (!qword_1003DAA30)
      goto LABEL_7;
    while (strcmp((const char *)v11, a1) || strcmp((const char *)(v11 + 128), a2))
    {
      v11 = *(_QWORD *)(v11 + 224);
      if (!v11)
        goto LABEL_7;
    }
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, _QWORD *))(v11 + 192))(*(_QWORD *)(v11 + 200), a3, a4, a5);
    if ((_DWORD)v10 == 5)
    {
LABEL_7:
      v13 = 0;
      v10 = rpc_afk_interface_find(a1, a2, a3, (_DWORD *)&v13 + 1, &v13);
      if ((_DWORD)v10)
        return v10;
      *a4 = tb_endpoint_create_with_data(11, HIDWORD(v13), 0, 0);
      *a5 = tb_endpoint_create_with_data(11, v13, 0, 0);
    }
    pthread_mutex_unlock(&stru_1003812F0);
    return v10;
  }
  return 6;
}

uint64_t rpc_interface_close()
{
  return 0;
}

uint64_t rpc_register_static_route(const char *a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  void *v14;

  v14 = 0;
  if (strlen(a1) > 0x3F || strlen(a2) > 0x3F || strlen(a3) > 0x3F)
    return 3;
  v12 = sub_100296190(0xE8uLL, &v14);
  v13 = v14;
  if ((_DWORD)v12)
  {
    v10 = v12;
    if (!v14)
      return v10;
  }
  else
  {
    __strlcpy_chk(v14, a1, 64, 64);
    __strlcpy_chk(v13 + 8, a2, 64, 64);
    __strlcpy_chk(v13 + 16, a3, 64, 64);
    v13[24] = a4;
    v13[25] = a5;
    if (!pthread_mutex_lock(&stru_1003812F0))
    {
      v13[28] = qword_1003DAA30;
      qword_1003DAA30 = (uint64_t)v13;
      pthread_mutex_unlock(&stru_1003812F0);
      return 0;
    }
    v10 = 6;
  }
  free(v13);
  return v10;
}

uint64_t sub_100296190(size_t a1, _QWORD *a2)
{
  void *v4;

  v4 = malloc_type_malloc(a1, 0x94AF4BDFuLL);
  *a2 = v4;
  if (!v4)
    return 4;
  bzero(v4, a1);
  return 0;
}

void rpc_free(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t rpc_allocate_scheduler()
{
  return 0;
}

uint64_t sub_1002961F4(char *__s1, const char *a2, const char *a3)
{
  _BOOL4 v5;
  _BOOL4 v6;

  if (!a2)
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v6 = 0;
    return v6 | v5;
  }
  v5 = strcmp(__s1, a2) == 0;
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v6 = strcmp(__s1 + 64, a3) == 0;
  return v6 | v5;
}

uint64_t shmem_map(const char *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  __CFDictionary *MutableCopy;
  CFStringRef v10;
  const void *v11;
  uint64_t v12;
  IONotificationPort *v13;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Current;
  __CFRunLoop *v16;
  io_service_t v17;
  io_iterator_t notification[2];

  v5 = malloc_type_malloc(0x18uLL, 0x1000040504FFAC1uLL);
  v6 = v5;
  if (v5)
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v7 = IOServiceMatching("AFKSharedMemoryRegion");
    if (v7)
    {
      v8 = v7;
      MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v7);
      CFRelease(v8);
      if (MutableCopy)
      {
        v10 = CFStringCreateWithCString(kCFAllocatorDefault, a1, 0x8000100u);
        if (v10)
        {
          v11 = v10;
          CFDictionarySetValue(MutableCopy, CFSTR("IONameMatch"), v10);
        }
        else
        {
          v11 = MutableCopy;
          MutableCopy = 0;
        }
        CFRelease(v11);
      }
    }
    else
    {
      MutableCopy = 0;
    }
    *(_QWORD *)notification = 0;
    v13 = IONotificationPortCreate(kIOMasterPortDefault);
    RunLoopSource = IONotificationPortGetRunLoopSource(v13);
    Current = CFRunLoopGetCurrent();
    CFRunLoopAddSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
    if (IOServiceAddMatchingNotification(v13, "IOServiceFirstMatch", MutableCopy, (IOServiceMatchingCallback)sub_1002964BC, notification, &notification[1]))
    {
      *(_DWORD *)v6 = 0;
LABEL_12:
      v12 = 5;
      goto LABEL_19;
    }
    notification[0] = IOIteratorNext(notification[1]);
    if (!notification[0])
      CFRunLoopRun();
    v16 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v16, RunLoopSource, kCFRunLoopDefaultMode);
    IOObjectRelease(notification[1]);
    IONotificationPortDestroy(v13);
    v17 = notification[0];
    *(_DWORD *)v6 = notification[0];
    if (!v17)
      goto LABEL_12;
    if (!IOServiceOpen(v17, mach_task_self_, 0x61666B6Du, (io_connect_t *)v6 + 1)
      && !IOConnectMapMemory64(*((_DWORD *)v6 + 1), 1u, mach_task_self_, v6 + 1, v6 + 2, 1u))
    {
      v12 = 0;
      goto LABEL_20;
    }
    v12 = 6;
  }
  else
  {
    v12 = 4;
  }
LABEL_19:
  shmem_unmap((io_object_t *)v6);
  v6 = 0;
LABEL_20:
  *a3 = v6;
  return v12;
}

uint64_t shmem_unmap(io_object_t *a1)
{
  io_connect_t v2;

  if (a1)
  {
    v2 = a1[1];
    if (v2)
      IOServiceClose(v2);
    if (*a1)
      IOObjectRelease(*a1);
    free(a1);
  }
  return 0;
}

uint64_t shmem_get_address(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t shmem_get_size(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

void sub_1002964BC(io_object_t *a1, io_iterator_t iterator)
{
  io_object_t v3;
  __CFRunLoop *Current;

  v3 = IOIteratorNext(iterator);
  if (v3)
  {
    *a1 = v3;
    Current = CFRunLoopGetCurrent();
    CFRunLoopStop(Current);
  }
}

uint64_t sub_1002964F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v19 = a2;
  v17[0] = 47;
  v17[1] = 0xE100000000000000;
  v6 = sub_1002965F4();
  v7 = StringProtocol.components<A>(separatedBy:)(v17, &type metadata for String, &type metadata for String, v6, v6);
  v8 = v7;
  v9 = *(_QWORD *)(v7 + 16);
  if (v9)
  {
    v10 = v7 + 16 * v9;
    v12 = *(_QWORD *)(v10 + 16);
    v11 = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRelease(v8);
    v18 = v12;
    v19 = v11;
    swift_bridgeObjectRetain(v11);
    v13._countAndFlagsBits = 35;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v11);
    v14 = v19;
    swift_bridgeObjectRetain(v19);
    v15._countAndFlagsBits = a3;
    v15._object = a4;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    return v18;
  }
  else
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRetain(a4);
  }
  return a3;
}

unint64_t sub_1002965F4()
{
  unint64_t result;

  result = qword_100381330;
  if (!qword_100381330)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100381330);
  }
  return result;
}

uint64_t Logger._fault(_:function:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t *a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;

  result = a1();
  v17 = result;
  v19 = v18;
  if ((a8 & 1) == 0)
  {
    if (a6)
    {
      v20 = (uint64_t *)a6;
      v21 = a7;
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_26;
  }
  v16 = HIDWORD(a6);
  if (HIDWORD(a6))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (a6 >> 11 == 27)
    goto LABEL_45;
  LODWORD(v16) = WORD1(a6);
  if (WORD1(a6) > 0x10u)
    goto LABEL_27;
  if ((a6 & 0xFFFFFF80) == 0)
  {
    if (a6 > 0xFF)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v22 = (a6 + 1);
    goto LABEL_10;
  }
LABEL_28:
  v41 = (a6 & 0x3F) << 8;
  v42 = (v41 | (a6 >> 6)) + 33217;
  v43 = (v41 | (a6 >> 6) & 0x3F) << 8;
  v44 = (((v43 | (a6 >> 12) & 0x3F) << 8) | (a6 >> 18)) - 2122219023;
  v45 = (v43 | (a6 >> 12)) + 8487393;
  if ((_DWORD)v16)
    v22 = v44;
  else
    v22 = v45;
  if (a6 < 0x800)
    v22 = v42;
LABEL_10:
  v23 = __clz(v22);
  v21 = 4 - (v23 >> 3);
  v52 = (v22 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v23 >> 3)) & 7)));
  v20 = &v52;
LABEL_11:
  result = static String._fromUTF8Repairing(_:)(v20, v21);
  a6 = result;
  a2 = v24;
  if ((a5 & 1) != 0)
  {
    v16 = (unint64_t)a3 >> 32;
    if ((unint64_t)a3 >> 32)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (a3 >> 11 == 27)
    {
LABEL_46:
      __break(1u);
      return result;
    }
    LODWORD(v16) = a3 >> 16;
    if (a3 >> 16 > 0x10)
    {
LABEL_37:
      __break(1u);
LABEL_38:
      v46 = (a3 & 0x3F) << 8;
      v47 = (v46 | (a3 >> 6)) + 33217;
      v48 = (v46 | (a3 >> 6) & 0x3F) << 8;
      v49 = (((v48 | (a3 >> 12) & 0x3F) << 8) | (a3 >> 18)) - 2122219023;
      v50 = (v48 | (a3 >> 12)) + 8487393;
      if ((_DWORD)v16)
        v27 = v49;
      else
        v27 = v50;
      if (a3 < 0x800)
        v27 = v47;
      goto LABEL_20;
    }
    if ((a3 & 0xFFFFFF80) != 0)
      goto LABEL_38;
    if (a3 <= 0xFF)
    {
      v27 = ((_BYTE)a3 + 1);
LABEL_20:
      v28 = __clz(v27);
      v26 = 4 - (v28 >> 3);
      v52 = (v27 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v28 >> 3)) & 7)));
      v25 = &v52;
      goto LABEL_21;
    }
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (!a3)
  {
    __break(1u);
    goto LABEL_35;
  }
  v25 = a3;
  v26 = a4;
LABEL_21:
  v29 = static String._fromUTF8Repairing(_:)(v25, v26);
  v31 = v30;
  v32 = sub_1002964F8(a6, a2, v29, v30);
  v34 = v33;
  swift_bridgeObjectRelease(a2);
  v35 = swift_bridgeObjectRelease(v31);
  v36 = static os_log_type_t.fault.getter(v35);
  swift_bridgeObjectRetain_n(v34, 2);
  v37 = swift_bridgeObjectRetain(v19);
  v38 = Logger.logObject.getter(v37);
  if (os_log_type_enabled(v38, v36))
  {
    v39 = swift_slowAlloc(22, -1);
    v40 = swift_slowAlloc(64, -1);
    v52 = v40;
    *(_DWORD *)v39 = 136315394;
    swift_bridgeObjectRetain(v34);
    v51 = sub_10001818C(v32, v34, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease_n(v34, 3);
    *(_WORD *)(v39 + 12) = 2080;
    swift_bridgeObjectRetain(v19);
    v51 = sub_10001818C(v17, v19, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v39 + 14, v39 + 22);
    swift_bridgeObjectRelease_n(v19, 3);
    _os_log_impl((void *)&_mh_execute_header, v38, v36, "fault,func,%s,message,%s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease_n(v34, 2);
  }

  reportBug(type:subType:subTypeContext:fatalCallback:)(0x746C756166, 0xE500000000000000, v32, v34, 0, 0, 0, 0);
  return swift_bridgeObjectRelease(v34);
}

uint64_t Logger._fatal(_:function:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t *a3, uint64_t a4, char a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  void *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  void *v50;
  Swift::String v51;
  uint64_t result;
  uint64_t v53;
  os_log_type_t type;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v56 = a1();
  if ((a8 & 1) != 0)
  {
    v19 = (unint64_t)a6 >> 32;
    if ((unint64_t)a6 >> 32)
      goto LABEL_21;
    if (a6 >> 11 != 27)
    {
      LODWORD(v19) = a6 >> 16;
      if (a6 >> 16 > 0x10)
        goto LABEL_22;
      if ((a6 & 0xFFFFFF80) != 0)
        goto LABEL_24;
      if (a6 <= 0xFF)
      {
        v9 = v18;
        v22 = ((_BYTE)a6 + 1);
        goto LABEL_10;
      }
      __break(1u);
LABEL_31:
      __break(1u);
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    v29 = a3;
    v30 = a4;
    goto LABEL_43;
  }
  if (!a6)
    goto LABEL_20;
  v9 = v18;
  v20 = a6;
  v21 = a7;
  while (1)
  {
    v10 = static String._fromUTF8Repairing(_:)(v20, v21);
    a2 = (uint64_t)v18;
    if ((a5 & 1) == 0)
    {
      if (a3)
        goto LABEL_34;
      __break(1u);
    }
    v19 = (unint64_t)a3 >> 32;
    if ((unint64_t)a3 >> 32)
      goto LABEL_23;
    if (a3 >> 11 == 27)
      goto LABEL_33;
    LODWORD(v19) = a3 >> 16;
    if (a3 >> 16 > 0x10)
      goto LABEL_31;
    if ((a3 & 0xFFFFFF80) != 0)
      break;
    if (a3 <= 0xFF)
    {
      v36 = ((_BYTE)a3 + 1);
      goto LABEL_42;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    v9 = v18;
    v24 = (a6 & 0x3F) << 8;
    v25 = (v24 | (a6 >> 6)) + 33217;
    v26 = (v24 | (a6 >> 6) & 0x3F) << 8;
    v27 = (((v26 | (a6 >> 12) & 0x3F) << 8) | (a6 >> 18)) - 2122219023;
    v28 = (v26 | (a6 >> 12)) + 8487393;
    if ((_DWORD)v19)
      v22 = v27;
    else
      v22 = v28;
    if (a6 < 0x800)
      v22 = v25;
LABEL_10:
    v23 = __clz(v22);
    v21 = 4 - (v23 >> 3);
    v58 = (v22 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v23 >> 3)) & 7)));
    v20 = &v58;
  }
  v31 = (a3 & 0x3F) << 8;
  v32 = (v31 | (a3 >> 6)) + 33217;
  v33 = (v31 | (a3 >> 6) & 0x3F) << 8;
  v34 = (((v33 | (a3 >> 12) & 0x3F) << 8) | (a3 >> 18)) - 2122219023;
  v35 = (v33 | (a3 >> 12)) + 8487393;
  if ((_DWORD)v19)
    v36 = v34;
  else
    v36 = v35;
  if (a3 < 0x800)
    v36 = v32;
LABEL_42:
  v37 = __clz(v36);
  v30 = 4 - (v37 >> 3);
  v58 = (v36 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v37 >> 3)) & 7)));
  v29 = &v58;
LABEL_43:
  v38 = static String._fromUTF8Repairing(_:)(v29, v30);
  v40 = v39;
  v55 = sub_1002964F8(v10, a2, v38, v39);
  v42 = v41;
  swift_bridgeObjectRelease(a2);
  v43 = swift_bridgeObjectRelease(v40);
  LOBYTE(v40) = static os_log_type_t.error.getter(v43);
  swift_bridgeObjectRetain_n(v42, 2);
  v44 = swift_bridgeObjectRetain_n(v9, 2);
  v45 = Logger.logObject.getter(v44);
  type = v40;
  if (os_log_type_enabled(v45, (os_log_type_t)v40))
  {
    v46 = swift_slowAlloc(22, -1);
    v53 = swift_slowAlloc(64, -1);
    v58 = v53;
    *(_DWORD *)v46 = 136315394;
    swift_bridgeObjectRetain(v42);
    v57 = sub_10001818C(v55, v42, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v46 + 4, v46 + 12);
    swift_bridgeObjectRelease_n(v42, 3);
    *(_WORD *)(v46 + 12) = 2080;
    swift_bridgeObjectRetain(v9);
    v57 = sub_10001818C(v56, (unint64_t)v9, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v46 + 14, v46 + 22);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v45, type, "fatal,func,%s,message,%s", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v46, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease_n(v42, 2);
  }

  v47 = swift_allocObject(&unk_10035B178, 64, 7);
  *(_QWORD *)(v47 + 16) = v56;
  *(_QWORD *)(v47 + 24) = v9;
  *(_QWORD *)(v47 + 32) = a6;
  *(_QWORD *)(v47 + 40) = a7;
  *(_BYTE *)(v47 + 48) = a8;
  *(_QWORD *)(v47 + 56) = a9;
  swift_bridgeObjectRetain_n(v9, 2);
  swift_bridgeObjectRetain(v42);
  reportBug(type:subType:subTypeContext:fatalCallback:)(0x6C61746166, 0xE500000000000000, v55, v42, v56, v9, (void (*)(_QWORD))sub_100297644, v47);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v9);
  swift_release(v47);
  objc_msgSend((id)objc_opt_self(NSThread), "sleepForTimeInterval:", 10.0);
  v58 = 0;
  v59 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  v48._object = (void *)0x8000000100305AD0;
  v48._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v48);
  Double.write<A>(to:)(&v58, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, 10.0);
  v49 = v58;
  v50 = (void *)v59;
  v58 = v56;
  v59 = (unint64_t)v9;
  swift_bridgeObjectRetain(v9);
  v51._countAndFlagsBits = v49;
  v51._object = v50;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v9);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v58, v59, a6, a7, a8, a9, 0);
  __break(1u);
  return result;
}

void *sub_100296FF8()
{
  return &unk_10035B158;
}

unint64_t sub_100297004()
{
  return 0xD000000000000013;
}

uint64_t sub_100297020(uint64_t a1)
{
  return sub_100297190(a1, qword_1003DAA40, 1701998435, 0xE400000000000000);
}

uint64_t sub_100297038()
{
  return sub_100297484(&qword_1003DAA38, (uint64_t)qword_1003DAA40, (uint64_t)sub_100297020);
}

uint64_t static ALLogger.core.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002970C0(&qword_1003DAA38, (uint64_t)qword_1003DAA40, (uint64_t)sub_100297020, a1);
}

uint64_t sub_100297070(uint64_t a1)
{
  return sub_100297190(a1, qword_1003DAA60, 1818850421, 0xE400000000000000);
}

uint64_t sub_100297088()
{
  return sub_100297484(&qword_1003DAA58, (uint64_t)qword_1003DAA60, (uint64_t)sub_100297070);
}

uint64_t static ALLogger.util.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002970C0(&qword_1003DAA58, (uint64_t)qword_1003DAA60, (uint64_t)sub_100297070, a1);
}

uint64_t sub_1002970C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000E6A4(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_100297128(uint64_t a1)
{
  return sub_100297190(a1, qword_1003DAA80, 6516856, 0xE300000000000000);
}

uint64_t sub_100297140()
{
  return sub_100297484(&qword_1003DAA78, (uint64_t)qword_1003DAA80, (uint64_t)sub_100297128);
}

uint64_t static ALLogger.xpc.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002970C0(&qword_1003DAA78, (uint64_t)qword_1003DAA80, (uint64_t)sub_100297128, a1);
}

uint64_t sub_100297178(uint64_t a1)
{
  return sub_100297190(a1, qword_1003DAAA0, 6516850, 0xE300000000000000);
}

uint64_t sub_100297190(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_1000155B4(v7, a2);
  sub_10000E6A4(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x8000000100305AB0, a3, a4);
}

uint64_t sub_100297204()
{
  return sub_100297484(&qword_1003DAA98, (uint64_t)qword_1003DAAA0, (uint64_t)sub_100297178);
}

uint64_t static ALLogger.rpc.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002970C0(&qword_1003DAA98, (uint64_t)qword_1003DAAA0, (uint64_t)sub_100297178, a1);
}

uint64_t sub_10029723C(uint64_t a1)
{
  return sub_1002972BC(a1, qword_1003DAAC0, &qword_1003DAA38, (uint64_t)qword_1003DAA40, (uint64_t)sub_100297020);
}

uint64_t sub_100297260()
{
  return sub_100297484(&qword_1003DAAB8, (uint64_t)qword_1003DAAC0, (uint64_t)sub_10029723C);
}

uint64_t corelog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002970C0(&qword_1003DAAB8, (uint64_t)qword_1003DAAC0, (uint64_t)sub_10029723C, a1);
}

uint64_t sub_100297298(uint64_t a1)
{
  return sub_1002972BC(a1, qword_1003DAAE0, &qword_1003DAA38, (uint64_t)qword_1003DAA40, (uint64_t)sub_100297020);
}

uint64_t sub_1002972BC(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = type metadata accessor for Logger(0);
  sub_1000155B4(v9, a2);
  v10 = sub_10000E6A4(v9, (uint64_t)a2);
  if (*a3 != -1)
    swift_once(a3, a5);
  v11 = sub_10000E6A4(v9, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v10, v11, v9);
}

uint64_t sub_100297354()
{
  return sub_100297484(&qword_1003DAAD8, (uint64_t)qword_1003DAAE0, (uint64_t)sub_100297298);
}

uint64_t allog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002970C0(&qword_1003DAAD8, (uint64_t)qword_1003DAAE0, (uint64_t)sub_100297298, a1);
}

uint64_t sub_10029738C(uint64_t a1)
{
  return sub_1002972BC(a1, qword_1003DAB00, &qword_1003DAA98, (uint64_t)qword_1003DAAA0, (uint64_t)sub_100297178);
}

uint64_t sub_1002973B0()
{
  return sub_100297484(&qword_1003DAAF8, (uint64_t)qword_1003DAB00, (uint64_t)sub_10029738C);
}

uint64_t rpclog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002970C0(&qword_1003DAAF8, (uint64_t)qword_1003DAB00, (uint64_t)sub_10029738C, a1);
}

uint64_t sub_1002973E8(uint64_t a1)
{
  return sub_1002972BC(a1, qword_1003DAB20, &qword_1003DAA58, (uint64_t)qword_1003DAA60, (uint64_t)sub_100297070);
}

uint64_t sub_10029740C()
{
  return sub_100297484(&qword_1003DAB18, (uint64_t)qword_1003DAB20, (uint64_t)sub_1002973E8);
}

uint64_t utillog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002970C0(&qword_1003DAB18, (uint64_t)qword_1003DAB20, (uint64_t)sub_1002973E8, a1);
}

uint64_t sub_100297444(uint64_t a1)
{
  return sub_1002972BC(a1, qword_1003DAB40, &qword_1003DAA78, (uint64_t)qword_1003DAA80, (uint64_t)sub_100297128);
}

uint64_t sub_100297468()
{
  return sub_100297484(&qword_1003DAB38, (uint64_t)qword_1003DAB40, (uint64_t)sub_100297444);
}

uint64_t sub_100297484(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for Logger(0);
  return sub_10000E6A4(v4, a2);
}

uint64_t xpclog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002970C0(&qword_1003DAB38, (uint64_t)qword_1003DAB40, (uint64_t)sub_100297444, a1);
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];

  v7 = type metadata accessor for Optional(0, a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v15 - v9, a1, v7);
  v11 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v18[3] = &type metadata for String;
    v18[4] = &protocol witness table for String;
    v18[0] = 7104878;
    v18[1] = 0xE300000000000000;
  }
  else
  {
    v16 = a2;
    v17 = a3;
    v12 = sub_100297680(&v15);
    (*(void (**)(_QWORD *, char *, uint64_t))(v11 + 32))(v12, v10, a2);
    sub_100284760(&v15, (uint64_t)v18);
  }
  v13 = sub_1000039AC(&qword_100381338);
  _print_unlocked<A, B>(_:_:)(v18, v3, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return sub_1000187CC(v18);
}

uint64_t sub_100297620()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100297644()
{
  uint64_t v0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(_QWORD *)(v0 + 56), 0);
  __break(1u);
}

_QWORD *sub_100297680(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for ALLogger()
{
  return objc_opt_self(_TtC6ALUtil8ALLogger);
}

uint64_t method lookup function for ALLogger(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALLogger);
}

void reportBug(type:subType:subTypeContext:fatalCallback:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, NSString a6, void (*a7)(_QWORD), uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class v19;
  NSString v20;
  NSString v21;
  NSString v22;
  uint64_t v23;
  NSString v24;
  void (*v25)(_QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  void (*v53)(_QWORD);
  uint8_t *v54;
  uint8_t *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  Class isa;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD);
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t aBlock[5];
  uint64_t v81;

  v75 = a8;
  v15 = type metadata accessor for Logger(0);
  v77 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v71 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v76 = (char *)&v65 - v18;
  v78 = (char *)objc_msgSend(objc_allocWithZone((Class)NSProcessInfo), "init");
  v19 = (Class)objc_msgSend(objc_allocWithZone((Class)SDRDiagnosticReporter), "init");
  v20 = String._bridgeToObjectiveC()();
  v68 = a1;
  v72 = a2;
  v21 = String._bridgeToObjectiveC()();
  v69 = a3;
  v73 = a4;
  v22 = String._bridgeToObjectiveC()();
  v74 = (unint64_t)a6;
  v70 = a5;
  v23 = v15;
  if (a6)
    a6 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v78, "processName");
  if (!v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v25 = a7;
    v27 = v26;
    v24 = String._bridgeToObjectiveC()();
    v28 = v27;
    a7 = v25;
    swift_bridgeObjectRelease(v28);
  }
  v29 = (char *)-[objc_class signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:](v19, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:", v20, v21, v22, a6, v24, 0);

  if (!v29)
  {
    v47 = sub_10029740C();
    v48 = v77;
    v49 = v71;
    v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 16))(v71, v47, v23);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = a7;
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "reportBugBlocking,signature,nil", v54, 2u);
      v55 = v54;
      a7 = v53;
      v48 = v77;
      swift_slowDealloc(v55, -1, -1);
    }

    v56 = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v49, v23);
    if (a7)
      a7(v56);
    goto LABEL_24;
  }
  v71 = v29;
  if (a7)
    v30 = 0.0;
  else
    v30 = 6.0;
  v31 = sub_10029740C();
  v32 = v76;
  v33 = v77;
  v34 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, v31, v23);
  v35 = v74;
  swift_bridgeObjectRetain_n(v74, 2);
  v36 = v72;
  swift_bridgeObjectRetain_n(v72, 2);
  v37 = v73;
  v38 = swift_bridgeObjectRetain_n(v73, 2);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  v67 = v40;
  if (os_log_type_enabled(v39, v40))
  {
    v41 = swift_slowAlloc(42, -1);
    v65 = swift_slowAlloc(96, -1);
    aBlock[0] = v65;
    *(_DWORD *)v41 = 136315906;
    v66 = a7;
    swift_bridgeObjectRetain(v36);
    v79 = sub_10001818C(v68, v36, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, aBlock, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease_n(v36, 3);
    v42 = v33;
    *(_WORD *)(v41 + 12) = 2080;
    swift_bridgeObjectRetain(v37);
    v79 = sub_10001818C(v69, v37, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, aBlock, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease_n(v37, 3);
    *(_WORD *)(v41 + 22) = 2080;
    if (v35)
      v43 = v70;
    else
      v43 = 45;
    if (v35)
      v44 = v35;
    else
      v44 = 0xE100000000000000;
    v73 = v34;
    swift_bridgeObjectRetain(v35);
    v45 = v43;
    a7 = v66;
    v79 = sub_10001818C(v45, v44, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, aBlock, v41 + 24, v41 + 32);
    swift_bridgeObjectRelease_n(v35, 2);
    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v41 + 32) = 2048;
    v79 = *(_QWORD *)&v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, aBlock, v41 + 34, v41 + 42);
    _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v67, "reportBug,type:%s,subtype:%s,context:%s,delay:%f", (uint8_t *)v41, 0x2Au);
    v46 = v65;
    swift_arrayDestroy(v65, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v41, -1, -1);

    (*(void (**)(char *, unint64_t))(v42 + 8))(v76, v73);
  }
  else
  {

    swift_bridgeObjectRelease_n(v35, 2);
    swift_bridgeObjectRelease_n(v37, 2);
    swift_bridgeObjectRelease_n(v36, 2);
    (*(void (**)(char *, unint64_t))(v33 + 8))(v32, v34);
  }
  aBlock[0] = 0;
  v57 = v71;
  static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  v58 = aBlock[0];
  if (aBlock[0])
  {

    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v58);
    v60 = swift_allocObject(&unk_10035B218, 32, 7);
    v61 = v75;
    *(_QWORD *)(v60 + 16) = a7;
    *(_QWORD *)(v60 + 24) = v61;
    aBlock[4] = (uint64_t)sub_100298384;
    v81 = v60;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1002982E0;
    aBlock[3] = (uint64_t)&unk_10035B230;
    v62 = _Block_copy(aBlock);
    v63 = (uint64_t)a7;
    v64 = v81;
    sub_100288008(v63, v61);
    swift_release(v64);
    -[objc_class snapshotWithSignature:delay:events:payload:actions:reply:](v19, "snapshotWithSignature:delay:events:payload:actions:reply:", isa, 0, 0, 0, v62, v30);
    _Block_release(v62);

    v78 = v57;
    v19 = isa;
LABEL_24:

    return;
  }
  __break(1u);
}

uint64_t sub_100297D74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  int v39;
  uint8_t *v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v47 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v47 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v47 - v13;
  if (a1)
  {
    v50 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(kSymptomDiagnosticReplySuccess);
    v51 = v15;
    swift_bridgeObjectRetain(a1);
    AnyHashable.init<A>(_:)(&v52, &v50, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(a1 + 16) && (v16 = sub_1002983C4((uint64_t)&v52), (v17 & 1) != 0))
    {
      sub_1000187EC(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v54);
    }
    else
    {
      v54 = 0u;
      v55 = 0u;
    }
    sub_1002983F4((uint64_t)&v52);
    if (*((_QWORD *)&v55 + 1))
    {
      v18 = sub_100298428();
      if ((swift_dynamicCast(&v50, &v54, (char *)&type metadata for Any + 8, v18, 6) & 1) != 0)
      {
        v19 = v50;
        if (objc_msgSend(v50, "BOOLValue"))
        {
          swift_bridgeObjectRelease(a1);
          v20 = sub_10029740C();
          v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v14, v20, v2);
          v22 = Logger.logObject.getter(v21);
          v23 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v22, v23))
          {
            v24 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v24 = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "reportBug,successful", v24, 2u);
            swift_slowDealloc(v24, -1, -1);
          }

          return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v14, v2);
        }
        v36 = sub_10029740C();
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v36, v2);
        v37 = swift_bridgeObjectRetain(a1);
        v38 = Logger.logObject.getter(v37);
        v39 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v38, (os_log_type_t)v39))
        {

          swift_bridgeObjectRelease_n(a1, 2);
LABEL_33:

          return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
        }
        v48 = v39;
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        v49 = v47;
        *(_DWORD *)v40 = 136315138;
        v50 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(kSymptomDiagnosticReplyReasonString);
        v51 = v41;
        AnyHashable.init<A>(_:)(&v52, &v50, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(a1 + 16) && (v42 = sub_1002983C4((uint64_t)&v52), (v43 & 1) != 0))
        {
          sub_1000187EC(*(_QWORD *)(a1 + 56) + 32 * v42, (uint64_t)&v54);
        }
        else
        {
          v54 = 0u;
          v55 = 0u;
        }
        sub_1002983F4((uint64_t)&v52);
        if (*((_QWORD *)&v55 + 1))
        {
          if ((swift_dynamicCast(&v50, &v54, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
          {
            v44 = (uint64_t)v50;
            v45 = v51;
LABEL_32:
            v52 = sub_10001818C(v44, v45, &v49);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v40 + 4, v40 + 12);
            swift_bridgeObjectRelease_n(a1, 2);
            swift_bridgeObjectRelease(v45);
            _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v48, "reportBug,failed,reason,%s ", v40, 0xCu);
            v46 = v47;
            swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v46, -1, -1);
            swift_slowDealloc(v40, -1, -1);

            goto LABEL_33;
          }
        }
        else
        {
          sub_100286250((uint64_t)&v54);
        }
        v45 = 0xE700000000000000;
        v44 = 0x6E776F6E6B6E75;
        goto LABEL_32;
      }
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      swift_bridgeObjectRelease(a1);
      sub_100286250((uint64_t)&v54);
    }
    v31 = sub_10029740C();
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v31, v2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "reportBug,response,malformed", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }
  else
  {
    v26 = sub_10029740C();
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v26, v2);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, (os_log_type_t)v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v29, "reportBug,response,nil", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_1002982E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (a2)
    v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v4 = 0;
  swift_retain(v2);
  v3(v4);
  swift_release(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_100298358()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100298384(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t result;

  v2 = *(uint64_t (**)(uint64_t))(v1 + 16);
  result = sub_100297D74(a1);
  if (v2)
    return v2(result);
  return result;
}

uint64_t sub_1002983AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002983BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1002983C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100298464(a1, v4);
}

uint64_t sub_1002983F4(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

unint64_t sub_100298428()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100381DD0;
  if (!qword_100381DD0)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100381DD0);
  }
  return result;
}

unint64_t sub_100298464(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_100298528(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1002983F4((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_100298528(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

void *sub_100298564()
{
  return &unk_1002EF808;
}

uint64_t MsInSec.getter()
{
  return 1000;
}

void *sub_100298578()
{
  return &unk_1002EF810;
}

uint64_t UsInSec.getter()
{
  return 1000000;
}

void *sub_100298590()
{
  return &unk_1002EF818;
}

uint64_t NsInSec.getter()
{
  return 1000000000;
}

void *sub_1002985A8()
{
  return &unk_1002EF820;
}

void *sub_1002985B4()
{
  return &unk_1002EF828;
}

void *sub_1002985C0()
{
  return &unk_1002EF830;
}

void *sub_1002985CC()
{
  return &unk_1002EF838;
}

uint64_t SecInMin.getter()
{
  return 60;
}

void *sub_1002985E0()
{
  return &unk_1002EF840;
}

uint64_t SecInHr.getter()
{
  return 3600;
}

void sub_1002985F4()
{
  qword_1003DAB60 = 0x3F50624DD2F1A9FCLL;
}

uint64_t *sub_100298610()
{
  if (qword_1003DAB58 != -1)
    swift_once(&qword_1003DAB58, sub_1002985F4);
  return &qword_1003DAB60;
}

double NsToUs.getter()
{
  return sub_10029893C(&qword_1003DAB58, (uint64_t)&qword_1003DAB60, (uint64_t)sub_1002985F4);
}

void sub_10029866C()
{
  qword_1003DAB70 = 0x3EB0C6F7A0B5ED8DLL;
}

uint64_t *sub_100298688()
{
  if (qword_1003DAB68 != -1)
    swift_once(&qword_1003DAB68, sub_10029866C);
  return &qword_1003DAB70;
}

double NsToMs.getter()
{
  return sub_10029893C(&qword_1003DAB68, (uint64_t)&qword_1003DAB70, (uint64_t)sub_10029866C);
}

void sub_1002986E4()
{
  qword_1003DAB80 = 0x3E112E0BE826D695;
}

uint64_t *sub_100298700()
{
  if (qword_1003DAB78 != -1)
    swift_once(&qword_1003DAB78, sub_1002986E4);
  return &qword_1003DAB80;
}

double NsToSec.getter()
{
  return sub_10029893C(&qword_1003DAB78, (uint64_t)&qword_1003DAB80, (uint64_t)sub_1002986E4);
}

void sub_10029875C()
{
  qword_1003DAB90 = 0x3F50624DD2F1A9FCLL;
}

uint64_t *sub_100298778()
{
  if (qword_1003DAB88 != -1)
    swift_once(&qword_1003DAB88, sub_10029875C);
  return &qword_1003DAB90;
}

double UsToMs.getter()
{
  return sub_10029893C(&qword_1003DAB88, (uint64_t)&qword_1003DAB90, (uint64_t)sub_10029875C);
}

void sub_1002987D4()
{
  qword_1003DABA0 = 0x3EB0C6F7A0B5ED8DLL;
}

uint64_t *sub_1002987F0()
{
  if (qword_1003DAB98 != -1)
    swift_once(&qword_1003DAB98, sub_1002987D4);
  return &qword_1003DABA0;
}

double UsToSec.getter()
{
  return sub_10029893C(&qword_1003DAB98, (uint64_t)&qword_1003DABA0, (uint64_t)sub_1002987D4);
}

void sub_10029884C()
{
  qword_1003DABB0 = 0x3E51E54C672874DBLL;
}

uint64_t *sub_100298868()
{
  if (qword_1003DABA8 != -1)
    swift_once(&qword_1003DABA8, sub_10029884C);
  return &qword_1003DABB0;
}

double UsToMin.getter()
{
  return sub_10029893C(&qword_1003DABA8, (uint64_t)&qword_1003DABB0, (uint64_t)sub_10029884C);
}

void sub_1002988C4()
{
  qword_1003DABC0 = 0x3F50624DD2F1A9FCLL;
}

uint64_t *sub_1002988E0()
{
  if (qword_1003DABB8 != -1)
    swift_once(&qword_1003DABB8, sub_1002988C4);
  return &qword_1003DABC0;
}

double MsToSec.getter()
{
  return sub_10029893C(&qword_1003DABB8, (uint64_t)&qword_1003DABC0, (uint64_t)sub_1002988C4);
}

double sub_10029893C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1)
    swift_once(a1, a3);
  return *(double *)a2;
}

uint64_t sub_10029897C()
{
  if (qword_1003DABE0 != -1)
    swift_once(&qword_1003DABE0, sub_100299384);
  return qword_1003DABE8;
}

unint64_t sub_1002989C8(unint64_t result)
{
  unint64_t v1;

  v1 = result;
  if (qword_1003DABE0 != -1)
    result = swift_once(&qword_1003DABE0, sub_100299384);
  if (is_mul_ok(v1, qword_1003DABE8))
  {
    if (qword_1003DABF0)
      return v1 * qword_1003DABE8 / qword_1003DABF0;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_100298A3C(unint64_t result)
{
  unint64_t v1;

  v1 = result;
  if (qword_1003DABE0 != -1)
    result = swift_once(&qword_1003DABE0, sub_100299384);
  if (is_mul_ok(v1, qword_1003DABF0))
  {
    if (qword_1003DABE8)
      return v1 * qword_1003DABF0 / qword_1003DABE8;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::UInt64 __swiftcall machAbsTimeNs()()
{
  uint64_t v0;

  v0 = mach_absolute_time();
  return sub_1002989C8(v0);
}

Swift::Double __swiftcall machAbsTimeSec()()
{
  return sub_100298AF0((uint64_t (*)(void))&_mach_absolute_time);
}

Swift::UInt64 __swiftcall machContTimeNs()()
{
  uint64_t v0;

  v0 = mach_continuous_time();
  return sub_1002989C8(v0);
}

Swift::Double __swiftcall machContTimeSec()()
{
  return sub_100298AF0((uint64_t (*)(void))&_mach_continuous_time);
}

double sub_100298AF0(uint64_t (*a1)(void))
{
  unint64_t v1;
  unint64_t v2;

  v1 = a1();
  v2 = sub_1002989C8(v1);
  if (qword_1003DAB78 != -1)
    swift_once(&qword_1003DAB78, sub_1002986E4);
  return *(double *)&qword_1003DAB80 * (double)v2;
}

uint64_t sub_100298B4C()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for TimesSync();
  result = swift_initStaticObject(v0, &unk_1003813E0);
  qword_1003DABD0 = result;
  return result;
}

uint64_t *sub_100298B74()
{
  if (qword_1003DABC8 != -1)
    swift_once(&qword_1003DABC8, sub_100298B4C);
  return &qword_1003DABD0;
}

uint64_t static TimesSync.instance.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for TimesSync();
  return swift_initStaticObject(v0, &unk_1003813E0);
}

uint64_t sub_100298BD0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
  if ((v2 & 1) != 0)
    return 1;
  v3 = v1;
  result = mach_continuous_time();
  v5 = result;
  if (qword_1003DABD8 != -1)
    result = swift_once(&qword_1003DABD8, sub_100299174);
  if (!__CFADD__(v3, qword_1003857E0))
    return v3 + qword_1003857E0 < v5;
  __break(1u);
  return result;
}

uint64_t *sub_100298C50()
{
  if (qword_1003DABD8 != -1)
    swift_once(&qword_1003DABD8, sub_100299174);
  return &qword_1003857E0;
}

uint64_t sub_100298C90()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_BYTE *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  void (*v27)(_BYTE *, uint64_t);
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[4];
  int v34;
  NSObject *v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45[24];

  v3 = v0;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __chkstk_darwin(v6);
  v11 = &v33[-v10];
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 112))(v9);
  if ((result & 1) == 0)
    return result;
  v39 = 0;
  v40 = 0;
  v37 = 0;
  v38 = 0;
  mach_get_times(&v39, &v40, &v37);
  v13 = v40;
  if (v40 < v39)
  {
    __break(1u);
    goto LABEL_12;
  }
  v14 = sub_1002989C8(v40 - v39);
  (*(void (**)(unint64_t))(*(_QWORD *)v0 + 152))(v14);
  v1 = (double)v37;
  v2 = (double)v38;
  if (qword_1003DAB78 != -1)
LABEL_12:
    swift_once(&qword_1003DAB78, sub_1002986E4);
  v15 = *(double *)&qword_1003DAB80;
  v16 = *(double *)&qword_1003DAB80 * v2 + v1;
  v17 = sub_1002989C8(v13);
  (*(void (**)(double))(*(_QWORD *)v0 + 176))(v16 - v15 * (double)v17 - kCFAbsoluteTimeIntervalSince1970);
  (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v0 + 200))(v13, 0);
  v18 = sub_100297260();
  v19 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v20 = v19(v11, v18, v4);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v24 = (_DWORD *)swift_slowAlloc(42, -1);
    v34 = v23;
    v25 = v24;
    *v24 = 134349824;
    v26 = v24 + 1;
    swift_beginAccess(&v39, v45, 0, 0);
    v43 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v26, v25 + 3);
    *((_WORD *)v25 + 6) = 2050;
    swift_beginAccess(&v40, &v43, 0, 0);
    v41 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, (char *)v25 + 14, (char *)v25 + 22);
    *((_WORD *)v25 + 11) = 2050;
    swift_beginAccess(&v37, &v41, 0, 0);
    v35 = v21;
    v36 = *(double *)&v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v25 + 6, v25 + 8);
    *((_WORD *)v25 + 16) = 2050;
    v36 = *(double *)&v38;
    v21 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, (char *)v25 + 34, (char *)v25 + 42);
    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v34, "TimeSync,mat,%{public}llu,mct,%{public}llu,tp,%{public}ld,%{public}ld", (uint8_t *)v25, 0x2Au);
    swift_slowDealloc(v25, -1, -1);
  }

  v27 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v27(v11, v4);
  v19(v8, v18, v4);
  v28 = swift_retain(v3);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(22, -1);
    *(_DWORD *)v31 = 134349312;
    v36 = *(double *)&qword_1003DAB80 * (double)(unint64_t)(*(uint64_t (**)(void))(*(_QWORD *)v3 + 144))();
    v32 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2050;
    v36 = (*(double (**)(uint64_t))(*(_QWORD *)v3 + 168))(v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v31 + 14, v31 + 22);
    swift_release(v3);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "TimeSync,mct-mat,%{public}f,cfa-mct,%{public}f", (uint8_t *)v31, 0x16u);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_release(v3);
  }
  return ((uint64_t (*)(_BYTE *, uint64_t))v27)(v8, v4);
}

uint64_t sub_100299118()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 120))();
  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t sub_10029913C()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 120))();
  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

void *sub_100299160()
{
  return &unk_1002EF848;
}

uint64_t sub_10029916C()
{
  return 100;
}

unint64_t sub_100299174()
{
  unint64_t result;

  result = sub_100298A3C(0x174876E800uLL);
  qword_1003857E0 = result;
  return result;
}

uint64_t sub_10029919C()
{
  if (qword_1003DABD8 != -1)
    swift_once(&qword_1003DABD8, sub_100299174);
  return qword_1003857E0;
}

uint64_t sub_1002991DC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_10029920C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 16, v4, 1, 0);
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

double sub_100299248()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return *(double *)(v0 + 24);
}

uint64_t sub_100299278(double a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 24, v4, 1, 0);
  *(double *)(v1 + 24) = a1;
  return result;
}

uint64_t sub_1002992B4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_1002992E8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v6[24];

  result = swift_beginAccess(v2 + 32, v6, 1, 0);
  *(_QWORD *)(v2 + 32) = a1;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

void *sub_100299338(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 32, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t TimesSync.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 41, 7);
}

uint64_t sub_100299384()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1002993C8();
  qword_1003DABE8 = result;
  qword_1003DABF0 = v1;
  return result;
}

uint64_t type metadata accessor for TimesSync()
{
  return objc_opt_self(_TtC6ALUtil9TimesSync);
}

uint64_t sub_1002993C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  mach_timebase_info info;
  _BYTE v11[24];
  uint32_t numer;
  _BYTE v13[20];

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&info - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  info = (mach_timebase_info)0x100000001;
  if (mach_timebase_info(&info))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!info.numer)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (!info.denom)
    goto LABEL_9;
  v4 = sub_10029740C();
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(14, -1);
    *(_DWORD *)v8 = 67109376;
    swift_beginAccess(&info, v11, 0, 0);
    numer = info.numer;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&numer, v13, v8 + 4, v8 + 8);
    *(_WORD *)(v8 + 8) = 1024;
    numer = info.denom;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&numer, v13, v8 + 10, v8 + 14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "ticksInfo,numer,%u,denom,%u", (uint8_t *)v8, 0xEu);
    swift_slowDealloc(v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_beginAccess(&info, &numer, 0, 0);
  return info.numer;
}

ValueMetadata *type metadata accessor for TicksInfo()
{
  return &type metadata for TicksInfo;
}

uint64_t method lookup function for TimesSync(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for TimesSync);
}

uint64_t dispatch thunk of TimesSync.mctMinusMatNs.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of TimesSync.cfaMinusMctSec.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t sub_1002995DC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100299610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 24, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100299654()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_100299684(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 32, v4, 1, 0);
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t sub_1002996C0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 40, v2, 0, 0);
  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_1002996F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 40, v4, 1, 0);
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

void *sub_10029972C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 40, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_100299768()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_retain(*(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t sub_100299794(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  swift_allocObject(v3, 64, 7);
  return sub_1002997E4(a1, a2, a3);
}

uint64_t sub_1002997E4(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  void (*v31)(double *__return_ptr, unint64_t, unint64_t, void *);
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  char *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  id v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  unsigned __int8 *v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  __int16 v126;
  unsigned __int8 *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char v139;
  char v140;
  unsigned __int8 *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unsigned int v169;
  char *v170;
  unint64_t *v171;
  unint64_t v172;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  Swift::UInt64 v181;
  Swift::UInt64 v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  char v189;
  uint64_t v190;
  Swift::UInt64 v191;
  uint64_t v192;
  NSObject *v193;
  os_log_type_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t result;
  uint64_t v198;
  char *v199;
  unint64_t *v200;
  char *v201;
  __int128 v202;
  char *v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(uint64_t, uint64_t);
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  unint64_t v225;
  id v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231[8];
  double v232;
  unint64_t v233;

  v4 = v3;
  v226 = a1;
  v216 = type metadata accessor for ALBtAdvertisement(0);
  v215 = *(_QWORD *)(v216 - 8);
  v7 = __chkstk_darwin(v216);
  v201 = (char *)&v198 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v211 = (char *)&v198 - v10;
  __chkstk_darwin(v9);
  v223 = (char *)&v198 - v11;
  v12 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v198 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = type metadata accessor for URL(0);
  v206 = *(_QWORD *)(v207 - 8);
  __chkstk_darwin(v207);
  v16 = (char *)&v198 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger(0);
  v225 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v198 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v210 = (uint64_t)&v198 - v22;
  v23 = __chkstk_darwin(v21);
  v209 = (uint64_t)&v198 - v24;
  v25 = __chkstk_darwin(v23);
  v212 = (uint64_t)&v198 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v198 - v27;
  v4[3] = &_swiftEmptyArrayStorage;
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = a2;
  v4[7] = a3;
  v205 = a3;
  swift_retain(a3);
  v29 = sub_1002A951C();
  v30 = *v29;
  v31 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v29 + 112);
  swift_retain(*v29);
  v31(&v232, 0xD000000000000011, 0x8000000100305BB0, &type metadata for String);
  swift_release(v30);
  if (v233)
    v32 = *(_QWORD *)&v232;
  else
    v32 = 0xD000000000000016;
  if (v233)
    v33 = v233;
  else
    v33 = 0x8000000100305BD0;
  v34 = *v29;
  v35 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v29 + 112);
  swift_retain(v34);
  v35(&v232, 0xD000000000000016, 0x8000000100305BF0, &type metadata for Double);
  swift_release(v34);
  if ((_BYTE)v233)
    v36 = 1.0;
  else
    v36 = v232;
  corelog.getter((uint64_t)v28);
  v37 = swift_bridgeObjectRetain_n(v33, 2);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter();
  v40 = os_log_type_enabled(v38, v39);
  v219 = v17;
  v218 = v16;
  if (v40)
  {
    v41 = swift_slowAlloc(22, -1);
    v224 = v20;
    v42 = v41;
    v43 = swift_slowAlloc(32, -1);
    v232 = *(double *)&v43;
    *(_DWORD *)v42 = 136315394;
    v222 = v28;
    swift_bridgeObjectRetain(v33);
    v230 = sub_10001818C(v32, v33, (uint64_t *)&v232);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, v231, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease_n(v33, 3);
    *(_WORD *)(v42 + 12) = 2048;
    v230 = *(_QWORD *)&v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, v231, v42 + 14, v42 + 22);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "ALBtReplayerCSV,path,%s,interval,%f", (uint8_t *)v42, 0x16u);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    v16 = v218;
    v17 = v219;
    swift_slowDealloc(v42, -1, -1);

    v44 = *(void (**)(uint64_t, uint64_t))(v225 + 8);
    v45 = v222;
  }
  else
  {

    swift_bridgeObjectRelease_n(v33, 2);
    v44 = *(void (**)(uint64_t, uint64_t))(v225 + 8);
    v45 = v28;
  }
  v217 = v44;
  v44((uint64_t)v45, v17);
  v204 = v226;
  v208 = ALDataGenerationBase.init(queue:interval:)(v204, v36);
  swift_retain(v208);
  v46 = URL.init(fileURLWithPath:)(v32, v33);
  static String.Encoding.utf8.getter(v46);
  v47 = String.init(contentsOf:encoding:)(v16, v14);
  v49 = v48;
  swift_bridgeObjectRelease(v33);
  v50 = sub_10029AD30(0x7FFFFFFFFFFFFFFFLL, 1, v47, v49);
  v52 = *(char **)(v50 + 16);
  v220 = 0;
  v221 = v52;
  if (v52)
  {
    v53 = 0;
    v200 = (unint64_t *)(v208 + 24);
    v214 = v50 + 32;
    v203 = v231;
    *(_QWORD *)&v51 = 134218242;
    v202 = v51;
    v199 = (char *)&type metadata for Any + 8;
    v213 = v50;
    do
    {
      if ((unint64_t)v53 >= *(_QWORD *)(v50 + 16))
      {
        __break(1u);
LABEL_115:
        __break(1u);
        goto LABEL_116;
      }
      if (!v53)
        goto LABEL_18;
      v222 = v53;
      v54 = (unint64_t *)(v214 + 32 * (_QWORD)v53);
      v56 = *v54;
      v55 = v54[1];
      v58 = (id)v54[2];
      v57 = v54[3];
      v59 = v55 >> 14;
      swift_bridgeObjectRetain_n(v57, 2);
      v224 = (char *)v56;
      v225 = v57;
      v226 = v58;
      if (v55 >> 14 == v56 >> 14)
      {
        v60 = Substring.subscript.getter(v56, v55, v56, v55, v58, v57);
        v62 = v61;
        v64 = v63;
        v66 = v65;
        v67 = sub_10029BE6C(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
        v69 = *((_QWORD *)v67 + 2);
        v68 = *((_QWORD *)v67 + 3);
        if (v69 >= v68 >> 1)
          v67 = sub_10029BE6C((char *)(v68 > 1), v69 + 1, 1, v67);
        *((_QWORD *)v67 + 2) = v69 + 1;
        v70 = &v67[32 * v69];
        *((_QWORD *)v70 + 4) = v60;
        v71 = v70 + 32;
        goto LABEL_43;
      }
      swift_bridgeObjectRetain(v57);
      v72 = v56;
      v73 = v56;
      v74 = v56;
      v67 = (char *)&_swiftEmptyArrayStorage;
      do
      {
        while (1)
        {
          v75 = v55;
          v76 = Substring.subscript.getter(v72, v56, v55, v58, v57);
          v78 = v77;
          if (v76 == 44 && v77 == 0xE100000000000000)
          {
            swift_bridgeObjectRelease(0xE100000000000000);
            break;
          }
          v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease(v78);
          if ((v79 & 1) != 0)
            break;
          v55 = v75;
          v58 = v226;
          v72 = Substring.index(after:)(v72, v56, v75, v226, v57);
          if (v59 == v72 >> 14)
            goto LABEL_37;
        }
        if (v72 >> 14 < v73 >> 14)
          goto LABEL_124;
        v80 = Substring.subscript.getter(v73, v72, v56, v75, v226, v57);
        v82 = v81;
        v84 = v83;
        v86 = v85;
        if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0)
          v67 = sub_10029BE6C(0, *((_QWORD *)v67 + 2) + 1, 1, v67);
        v88 = *((_QWORD *)v67 + 2);
        v87 = *((_QWORD *)v67 + 3);
        if (v88 >= v87 >> 1)
          v67 = sub_10029BE6C((char *)(v87 > 1), v88 + 1, 1, v67);
        *((_QWORD *)v67 + 2) = v88 + 1;
        v89 = &v67[32 * v88];
        *((_QWORD *)v89 + 4) = v80;
        *((_QWORD *)v89 + 5) = v82;
        *((_QWORD *)v89 + 6) = v84;
        *((_QWORD *)v89 + 7) = v86;
        v56 = (unint64_t)v224;
        v57 = v225;
        v55 = v75;
        v58 = v226;
        v72 = Substring.index(after:)(v72, v224, v75, v226, v225);
        v73 = v72;
        v74 = v72;
      }
      while (v59 != v72 >> 14);
LABEL_37:
      if (v59 < v74 >> 14)
        goto LABEL_124;
      v90 = Substring.subscript.getter(v74, v55, v56, v55, v58, v57);
      v62 = v91;
      v64 = v92;
      v66 = v93;
      swift_bridgeObjectRelease(v57);
      if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0)
        v67 = sub_10029BE6C(0, *((_QWORD *)v67 + 2) + 1, 1, v67);
      v95 = *((_QWORD *)v67 + 2);
      v94 = *((_QWORD *)v67 + 3);
      if (v95 >= v94 >> 1)
        v67 = sub_10029BE6C((char *)(v94 > 1), v95 + 1, 1, v67);
      *((_QWORD *)v67 + 2) = v95 + 1;
      v96 = &v67[32 * v95];
      *((_QWORD *)v96 + 4) = v90;
      v71 = v96 + 32;
LABEL_43:
      v71[1] = v62;
      v71[2] = v64;
      v71[3] = v66;
      v97 = v225;
      v98 = swift_bridgeObjectRelease(v225);
      if (*((_QWORD *)v67 + 2) != 6)
      {
        swift_bridgeObjectRelease(v67);
        v107 = v212;
        corelog.getter(v212);
        v108 = swift_bridgeObjectRetain(v97);
        v109 = Logger.logObject.getter(v108);
        v110 = static os_log_type_t.error.getter(v109);
        if (os_log_type_enabled(v109, v110))
        {
          v111 = swift_slowAlloc(22, -1);
          v112 = swift_slowAlloc(32, -1);
          v232 = *(double *)&v112;
          *(_DWORD *)v111 = v202;
          v113 = v222;
          v230 = (uint64_t)v222;
          v114 = v203;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, v203, v111 + 4, v111 + 12);
          *(_WORD *)(v111 + 12) = 2080;
          swift_bridgeObjectRetain(v97);
          v115 = static String._fromSubstring(_:)(v224, v55, v226, v97);
          v117 = v116;
          swift_bridgeObjectRelease(v97);
          v230 = sub_10001818C(v115, v117, (uint64_t *)&v232);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, v114, v111 + 14, v111 + 22);
          swift_bridgeObjectRelease_n(v97, 2);
          swift_bridgeObjectRelease(v117);
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "line %ld: '%s' is ill-formed. Please follow [mac],[timestamp(ns)],[channel],[rssidB],[antennaIndex],[deviceInfoKw]. Skip!", (uint8_t *)v111, 0x16u);
          swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v112, -1, -1);
          swift_slowDealloc(v111, -1, -1);

          v17 = v219;
          v217(v212, v219);
          goto LABEL_58;
        }

        swift_bridgeObjectRelease_n(v97, 2);
        v17 = v219;
        v217(v107, v219);
        goto LABEL_16;
      }
      ALBtAdvertisement.init()(v98);
      if (*((_QWORD *)v67 + 2) < 2uLL)
        goto LABEL_115;
      v99 = *((_QWORD *)v67 + 8);
      v100 = *((_QWORD *)v67 + 9);
      if ((v100 ^ (unint64_t)v99) < 0x4000)
        goto LABEL_56;
      v102 = *((_QWORD *)v67 + 10);
      v101 = *((_QWORD *)v67 + 11);
      v103 = v220;
      v104 = sub_10029CFC0(*((_QWORD *)v67 + 8), *((_QWORD *)v67 + 9), v102, v101, 10);
      v220 = v103;
      if ((v105 & 0x100) != 0)
      {
        swift_bridgeObjectRetain(v101);
        v106 = sub_10029C1BC(v99, v100, v102, v101, 10);
        v119 = v118;
        swift_bridgeObjectRelease(v101);
        if ((v119 & 1) != 0)
          goto LABEL_56;
LABEL_52:
        v120 = v220;
        swift_bridgeObjectRelease(v97);
        ALBtAdvertisement._machContTimeNs.setter(v106, 0);
        if (*((_QWORD *)v67 + 2))
        {
          v121 = *((_QWORD *)v67 + 4);
          v122 = *((_QWORD *)v67 + 5);
          if ((v122 ^ (unint64_t)v121) < 0x4000)
          {
            v141 = 0;
          }
          else
          {
            v124 = *((_QWORD *)v67 + 6);
            v123 = *((_QWORD *)v67 + 7);
            v125 = sub_10029CFC0(*((_QWORD *)v67 + 4), *((_QWORD *)v67 + 5), v124, v123, 16);
            if ((v126 & 0x100) != 0)
            {
              swift_bridgeObjectRetain(v123);
              v127 = sub_10029C1BC(v121, v122, v124, v123, 16);
              v140 = v139;
              swift_bridgeObjectRelease(v123);
              v128 = v140 & 1;
            }
            else
            {
              v127 = (unsigned __int8 *)v125;
              v128 = v126 & 1;
            }
            if (v128)
              v141 = 0;
            else
              v141 = v127;
          }
          ALBtAdvertisement._mac.setter(v141);
          if (*((_QWORD *)v67 + 2) >= 3uLL)
          {
            v142 = *((_QWORD *)v67 + 12);
            v143 = *((_QWORD *)v67 + 13);
            if ((v143 ^ (unint64_t)v142) < 0x4000)
            {
              v148 = 0;
              LOBYTE(v147) = 1;
            }
            else
            {
              v145 = *((_QWORD *)v67 + 14);
              v144 = *((_QWORD *)v67 + 15);
              v146 = sub_10029CEE4(*((_QWORD *)v67 + 12), *((_QWORD *)v67 + 13), v145, v144, 10, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_10029D5BC);
              if ((v146 & 0x10000000000) != 0)
              {
                swift_bridgeObjectRetain(v144);
                v146 = sub_10029C0C0(v142, v143, v145, v144, 10, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10029C52C);
                swift_bridgeObjectRelease(v144);
              }
              v147 = (v146 & (unint64_t)&_mh_execute_header) >> 32;
              if ((v146 & (unint64_t)&_mh_execute_header) != 0)
                v148 = 0;
              else
                v148 = v146;
            }
            LOBYTE(v232) = v147 & 1;
            ALBtAdvertisement._channel.setter(v148 | ((v147 & 1) << 32));
            if (*((_QWORD *)v67 + 2) >= 4uLL)
            {
              v149 = *((_QWORD *)v67 + 16);
              v150 = *((_QWORD *)v67 + 17);
              if ((v150 ^ (unint64_t)v149) < 0x4000)
              {
                v155 = 0;
                LOBYTE(v154) = 1;
              }
              else
              {
                v152 = *((_QWORD *)v67 + 18);
                v151 = *((_QWORD *)v67 + 19);
                v153 = sub_10029CEE4(*((_QWORD *)v67 + 16), *((_QWORD *)v67 + 17), v152, v151, 10, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_10029D5BC);
                if ((v153 & 0x10000000000) != 0)
                {
                  swift_bridgeObjectRetain(v151);
                  v153 = sub_10029C0C0(v149, v150, v152, v151, 10, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10029C52C);
                  swift_bridgeObjectRelease(v151);
                }
                v154 = (v153 & (unint64_t)&_mh_execute_header) >> 32;
                if ((v153 & (unint64_t)&_mh_execute_header) != 0)
                  v155 = 0;
                else
                  v155 = v153;
              }
              LOBYTE(v232) = v154 & 1;
              ALBtAdvertisement._rssidB.setter(v155 | ((v154 & 1) << 32));
              if (*((_QWORD *)v67 + 2) >= 5uLL)
              {
                v156 = *((_QWORD *)v67 + 20);
                v157 = *((_QWORD *)v67 + 21);
                if ((v157 ^ (unint64_t)v156) < 0x4000)
                {
                  v162 = 0;
                  LOBYTE(v161) = 1;
                }
                else
                {
                  v159 = *((_QWORD *)v67 + 22);
                  v158 = *((_QWORD *)v67 + 23);
                  v160 = sub_10029CEE4(*((_QWORD *)v67 + 20), *((_QWORD *)v67 + 21), v159, v158, 10, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_10029D5BC);
                  if ((v160 & 0x10000000000) != 0)
                  {
                    swift_bridgeObjectRetain(v158);
                    v160 = sub_10029C0C0(v156, v157, v159, v158, 10, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10029C52C);
                    swift_bridgeObjectRelease(v158);
                  }
                  v161 = (v160 & (unint64_t)&_mh_execute_header) >> 32;
                  if ((v160 & (unint64_t)&_mh_execute_header) != 0)
                    v162 = 0;
                  else
                    v162 = v160;
                }
                LOBYTE(v232) = v161 & 1;
                ALBtAdvertisement._antennaIndex.setter(v162 | ((v161 & 1) << 32));
                if (*((_QWORD *)v67 + 2) >= 6uLL)
                {
                  v163 = *((_QWORD *)v67 + 24);
                  v164 = *((_QWORD *)v67 + 25);
                  v166 = *((_QWORD *)v67 + 26);
                  v165 = *((_QWORD *)v67 + 27);
                  swift_bridgeObjectRetain(v165);
                  swift_bridgeObjectRelease(v67);
                  if ((v164 ^ (unint64_t)v163) < 0x4000)
                  {
                    v220 = v120;
                    swift_bridgeObjectRelease(v165);
                    v169 = 0;
                    LOBYTE(v168) = 1;
                    v17 = v219;
                    v16 = v218;
                  }
                  else
                  {
                    v167 = sub_10029CEE4(v163, v164, v166, v165, 10, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_10029D9E0);
                    v220 = v120;
                    v17 = v219;
                    v16 = v218;
                    if ((v167 & 0x10000000000) != 0)
                      v167 = sub_10029C0C0(v163, v164, v166, v165, 10, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10029C2AC);
                    swift_bridgeObjectRelease(v165);
                    v168 = (v167 & (unint64_t)&_mh_execute_header) >> 32;
                    if ((v167 & (unint64_t)&_mh_execute_header) != 0)
                      v169 = 0;
                    else
                      v169 = v167;
                  }
                  LOBYTE(v232) = v168 & 1;
                  v170 = v223;
                  ALBtAdvertisement._deviceInfoKw.setter(v169 | ((v168 & 1) << 32));
                  (*(void (**)(char *, char *, uint64_t))(v215 + 16))(v211, v170, v216);
                  v171 = v200;
                  swift_beginAccess(v200, &v232, 33, 0);
                  v172 = *v171;
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v171);
                  *v171 = v172;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    v172 = sub_10029BC64(0, *(_QWORD *)(v172 + 16) + 1, 1, v172);
                    *v200 = v172;
                  }
                  v175 = *(_QWORD *)(v172 + 16);
                  v174 = *(_QWORD *)(v172 + 24);
                  if (v175 >= v174 >> 1)
                  {
                    v172 = sub_10029BC64(v174 > 1, v175 + 1, 1, v172);
                    *v200 = v172;
                  }
                  *(_QWORD *)(v172 + 16) = v175 + 1;
                  v176 = v215;
                  v177 = v172
                       + ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80))
                       + *(_QWORD *)(v176 + 72) * v175;
                  v178 = v216;
                  (*(void (**)(unint64_t, char *, uint64_t))(v215 + 32))(v177, v211, v216);
                  swift_endAccess(&v232);
                  (*(void (**)(char *, uint64_t))(v176 + 8))(v223, v178);
                  goto LABEL_17;
                }
LABEL_120:
                __break(1u);
LABEL_121:
                __break(1u);
                goto LABEL_122;
              }
LABEL_119:
              __break(1u);
              goto LABEL_120;
            }
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }
LABEL_116:
        __break(1u);
        goto LABEL_117;
      }
      if ((v105 & 1) == 0)
      {
        v106 = (unsigned __int8 *)v104;
        goto LABEL_52;
      }
LABEL_56:
      swift_bridgeObjectRelease(v67);
      v129 = v209;
      corelog.getter(v209);
      v130 = swift_bridgeObjectRetain(v97);
      v131 = Logger.logObject.getter(v130);
      v132 = static os_log_type_t.error.getter(v131);
      if (!os_log_type_enabled(v131, v132))
      {
        swift_bridgeObjectRelease_n(v97, 2);

        v17 = v219;
        v217(v129, v219);
        (*(void (**)(char *, uint64_t))(v215 + 8))(v223, v216);
LABEL_16:
        v16 = v218;
LABEL_17:
        v50 = v213;
        v53 = v222;
        goto LABEL_18;
      }
      v133 = swift_slowAlloc(22, -1);
      v134 = swift_slowAlloc(32, -1);
      v232 = *(double *)&v134;
      *(_DWORD *)v133 = v202;
      v113 = v222;
      v230 = (uint64_t)v222;
      v135 = v203;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, v203, v133 + 4, v133 + 12);
      *(_WORD *)(v133 + 12) = 2080;
      swift_bridgeObjectRetain(v97);
      v136 = static String._fromSubstring(_:)(v224, v55, v226, v97);
      v138 = v137;
      swift_bridgeObjectRelease(v97);
      v230 = sub_10001818C(v136, v138, (uint64_t *)&v232);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, v135, v133 + 14, v133 + 22);
      swift_bridgeObjectRelease_n(v97, 2);
      swift_bridgeObjectRelease(v138);
      _os_log_impl((void *)&_mh_execute_header, v131, v132, "line %ld: '%s' is ill-formed. Timestamp cannot convert to Uint64. Note that timestamp unit should be ns. Skip!", (uint8_t *)v133, 0x16u);
      swift_arrayDestroy(v134, 1, v199);
      swift_slowDealloc(v134, -1, -1);
      swift_slowDealloc(v133, -1, -1);

      v17 = v219;
      v217(v209, v219);
      (*(void (**)(char *, uint64_t))(v215 + 8))(v223, v216);
LABEL_58:
      v53 = v113;
      v16 = v218;
      v50 = v213;
LABEL_18:
      ++v53;
    }
    while (v53 != v221);
  }
  swift_bridgeObjectRelease(v50);
  (*(void (**)(char *, uint64_t))(v206 + 8))(v16, v207);
  v179 = v208;
  v180 = v208 + 24;
  swift_beginAccess(v208 + 24, &v232, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)(v179 + 24) + 16))
    goto LABEL_110;
  v181 = machContTimeNs()();
  if ((v181 & 0x8000000000000000) != 0)
    goto LABEL_121;
  v182 = v181;
  swift_beginAccess(v179 + 24, &v230, 32, 0);
  if (*(_QWORD *)(*(_QWORD *)v180 + 16))
  {
    v183 = v215;
    v184 = v201;
    v185 = v216;
    v186 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v215 + 16))(v201, *(_QWORD *)v180+ ((*(unsigned __int8 *)(v215 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v215 + 80)), v216);
    v187 = ALBtAdvertisement._machContTimeNs.getter(v186);
    v189 = v188;
    (*(void (**)(char *, uint64_t))(v183 + 8))(v184, v185);
    swift_endAccess(&v230);
    if ((v189 & 1) != 0)
      v190 = 0;
    else
      v190 = v187;
    if ((v190 & 0x8000000000000000) == 0)
    {
      v191 = v182 - v190;
      swift_beginAccess(v179 + 40, &v230, 1, 0);
      *(_QWORD *)(v179 + 40) = v191;
LABEL_110:
      corelog.getter(v210);
      v192 = swift_retain(v179);
      v193 = Logger.logObject.getter(v192);
      v194 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v193, v194))
      {
        v195 = swift_slowAlloc(22, -1);
        *(_DWORD *)v195 = 134218240;
        v228 = *(_QWORD *)(*(_QWORD *)(v179 + 24) + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229, v195 + 4, v195 + 12);
        *(_WORD *)(v195 + 12) = 2048;
        swift_beginAccess(v179 + 40, &v228, 0, 0);
        v227 = *(_QWORD *)(v179 + 40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, &v228, v195 + 14, v195 + 22);
        swift_release(v179);
        _os_log_impl((void *)&_mh_execute_header, v193, v194, "Total bt advs from file: %ld. Offset is %lld", (uint8_t *)v195, 0x16u);
        swift_slowDealloc(v195, -1, -1);

        v196 = v205;
      }
      else
      {

        swift_release(v205);
        v196 = v179;
      }
      swift_release(v196);
      swift_release(v179);

      v217(v210, v17);
      return v179;
    }
  }
  else
  {
LABEL_122:
    __break(1u);
  }
  __break(1u);
LABEL_124:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
  return result;
}

uint64_t sub_10029AD30(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t result;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v53[2];
  unint64_t v54;

  if (a1 < 0)
  {
LABEL_54:
    LOBYTE(v47) = 2;
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, v47, 1552, 0);
    __break(1u);
  }
  else
  {
    v8 = swift_allocObject(&unk_10035B378, 24, 7);
    *(_QWORD *)(v8 + 16) = &_swiftEmptyArrayStorage;
    v9 = swift_allocObject(&unk_10035B3A0, 24, 7);
    v10 = v9;
    *(_QWORD *)(v9 + 16) = 15;
    v11 = a4 >> 60;
    v12 = HIBYTE(a4) & 0xF;
    if (a1)
    {
      v13 = (a4 & 0x2000000000000000) != 0 ? HIBYTE(a4) & 0xF : a3 & 0xFFFFFFFFFFFFLL;
      if (v13)
      {
        v49 = a1;
        v14 = (v11 & ((a3 & 0x800000000000000) == 0)) == 0;
        v15 = 7;
        if (!v14)
          v15 = 11;
        v48 = v15 | (v13 << 16);
        v54 = 4 * v13;
        v16 = (char *)&_swiftEmptyArrayStorage;
        v17 = 15;
        v18 = 15;
        v50 = a3;
        v51 = v9;
        while (1)
        {
          v19 = String.subscript.getter(v17, a3, a4);
          v21 = v20;
          if (!((v20 & 0x2000000000000000) != 0 ? HIBYTE(v20) & 0xF : v19 & 0xFFFFFFFFFFFFLL))
            break;
          if ((v20 & 0x1000000000000000) != 0)
          {
            v24 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(0, v19, v20);
          }
          else
          {
            if ((v20 & 0x2000000000000000) != 0)
            {
              v53[0] = v19;
              v53[1] = v20 & 0xFFFFFFFFFFFFFFLL;
              v23 = v53;
            }
            else if ((v19 & 0x1000000000000000) != 0)
            {
              v23 = (_QWORD *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else
            {
              v23 = (_QWORD *)_StringObject.sharedUTF8.getter(v19, v20);
            }
            v24 = _decodeScalar(_:startingAt:)(v23);
          }
          v4 = v24;
          swift_bridgeObjectRelease(v21);
          if ((v4 - 14) > 0xFFFFFFFB || (v4 - 8232) < 2 || (_DWORD)v4 == 133)
          {
            if (v18 >> 14 == v17 >> 14 && (a2 & 1) != 0)
            {
              v17 = String.index(after:)(v17, a3, a4);
              *(_QWORD *)(v10 + 16) = v17;
              v18 = v17;
            }
            else
            {
              if (v17 >> 14 < v18 >> 14)
                goto LABEL_53;
              v25 = a3;
              v26 = a4;
              v27 = String.subscript.getter(v18, v17, v25, a4);
              v29 = v28;
              v31 = v30;
              v4 = v32;
              if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
                v16 = sub_10029BE6C(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
              v33 = v16;
              v34 = *((_QWORD *)v16 + 2);
              v35 = v33;
              v36 = *((_QWORD *)v33 + 3);
              if (v34 >= v36 >> 1)
                v35 = sub_10029BE6C((char *)(v36 > 1), v34 + 1, 1, v35);
              *((_QWORD *)v35 + 2) = v34 + 1;
              v37 = &v35[32 * v34];
              v16 = v35;
              *((_QWORD *)v37 + 4) = v27;
              *((_QWORD *)v37 + 5) = v29;
              *((_QWORD *)v37 + 6) = v31;
              *((_QWORD *)v37 + 7) = v4;
              *(_QWORD *)(v8 + 16) = v35;
              a4 = v26;
              a3 = v50;
              v18 = String.index(after:)(v17, v50, a4);
              v10 = v51;
              *(_QWORD *)(v51 + 16) = v18;
              v17 = v18;
              if (*((_QWORD *)v16 + 2) == v49)
              {
LABEL_42:
                if (v54 == v18 >> 14 && (a2 & 1) != 0)
                {
                  swift_bridgeObjectRelease(a4);
                  goto LABEL_50;
                }
                if (v54 < v18 >> 14)
                {
LABEL_53:
                  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
                  __break(1u);
                  goto LABEL_54;
                }
                v39 = a3;
                a3 = (uint64_t)v16;
                v18 = String.subscript.getter(v18, v48, v39, a4);
                v21 = v40;
                v16 = v41;
                v4 = v42;
                swift_bridgeObjectRelease(a4);
                if ((swift_isUniquelyReferenced_nonNull_native(a3) & 1) != 0)
                {
LABEL_47:
                  v44 = *(_QWORD *)(a3 + 16);
                  v43 = *(_QWORD *)(a3 + 24);
                  if (v44 >= v43 >> 1)
                    a3 = (uint64_t)sub_10029BE6C((char *)(v43 > 1), v44 + 1, 1, (char *)a3);
                  *(_QWORD *)(a3 + 16) = v44 + 1;
                  v45 = (_QWORD *)(a3 + 32 * v44);
                  v45[4] = v18;
                  v45[5] = v21;
                  v45[6] = v16;
                  v45[7] = v4;
                  v16 = (char *)a3;
                  *(_QWORD *)(v8 + 16) = a3;
                  v10 = v51;
                  goto LABEL_50;
                }
LABEL_52:
                a3 = (uint64_t)sub_10029BE6C(0, *(_QWORD *)(a3 + 16) + 1, 1, (char *)a3);
                goto LABEL_47;
              }
            }
          }
          else
          {
            v17 = String.index(after:)(v17, a3, a4);
          }
          if (v54 == v17 >> 14)
            goto LABEL_42;
        }
        __break(1u);
        goto LABEL_52;
      }
    }
    if ((a4 & 0x2000000000000000) == 0)
      v12 = a3 & 0xFFFFFFFFFFFFLL;
    v14 = (v11 & ((a3 & 0x800000000000000) == 0)) == 0;
    v38 = 7;
    if (!v14)
      v38 = 11;
    sub_10029BB0C(v38 | (v12 << 16), v9, a2 & 1, v8, a3, a4);
    swift_bridgeObjectRelease(a4);
    v16 = *(char **)(v8 + 16);
LABEL_50:
    swift_bridgeObjectRetain(v16);
    swift_release(v8);
    swift_release(v10);
    return (uint64_t)v16;
  }
  return result;
}

int64_t sub_10029B200()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t result;
  __int128 v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t (*v39)(char *, uint64_t);
  int64_t v40;
  uint64_t v41;
  NSObject *v42;
  int v43;
  uint8_t *v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  os_log_t v54;
  uint64_t v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t *, _QWORD);
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint8_t *v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint8_t *v86;
  void (*v87)(char *);
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  __int128 v99;
  char *v100;
  uint64_t v101;
  os_log_t v102;
  int v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, unint64_t, uint64_t);
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(void);
  uint64_t (*v115)(void);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v105 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v96 = (uint64_t)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v92 - v5;
  v113 = type metadata accessor for ALBtAdvertisement(0);
  v109 = *(_QWORD *)(v113 - 8);
  v7 = __chkstk_darwin(v113);
  v108 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v100 = (char *)&v92 - v10;
  __chkstk_darwin(v9);
  v104 = (char *)&v92 - v11;
  v12 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v12);
  v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for ALBtNotification(0);
  v94 = *(_QWORD *)(v95 - 8);
  v15 = __chkstk_darwin(v95);
  v93 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v92 - v18;
  v20 = ALBtNotification.init()(v17);
  static ALTimeStamp.now()(v20);
  v21 = type metadata accessor for ALTimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v14, 0, 1, v21);
  ALBtNotification._timestamp.setter(v14);
  v106 = v19;
  v22 = ALBtNotification._simulated.setter(1);
  v23 = *(uint64_t (**)(void))(*v1 + 160);
  v115 = *(uint64_t (**)(void))(*v1 + 184);
  v24 = ((uint64_t (*)(uint64_t))v115)(v22);
  v114 = v23;
  v25 = v23();
  v26 = *(_QWORD *)(v25 + 16);
  result = swift_bridgeObjectRelease(v25);
  if (v24 >= v26)
  {
LABEL_23:
    v72 = v106;
    v73 = ALBtNotification._advertisements.getter(result);
    v74 = *(_QWORD *)(v73 + 16);
    swift_bridgeObjectRelease(v73);
    if (v74)
    {
      v75 = corelog.getter(v96);
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc(12, -1);
        v101 = v2;
        v79 = v78;
        *(_DWORD *)v78 = 134217984;
        v80 = v78 + 12;
        v81 = v78 + 4;
        v82 = swift_beginAccess(v106, &v116, 32, 0);
        v83 = ALBtNotification._advertisements.getter(v82);
        swift_endAccess(&v116);
        v84 = v1;
        v85 = *(_QWORD *)(v83 + 16);
        swift_bridgeObjectRelease(v83);
        v116 = v85;
        v1 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v81, v80);
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "One BT notification from file, count: %ld", v79, 0xCu);
        v86 = v79;
        v2 = v101;
        swift_slowDealloc(v86, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v96, v2);
      v87 = (void (*)(char *))v1[6];
      v72 = v106;
      swift_beginAccess(v106, &v116, 0, 0);
      v88 = v94;
      v89 = v93;
      v90 = v95;
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v93, v72, v95);
      v87(v89);
      v91 = *(void (**)(char *, uint64_t))(v88 + 8);
      v91(v89, v90);
    }
    else
    {
      v91 = *(void (**)(char *, uint64_t))(v94 + 8);
      v90 = v95;
    }
    return ((uint64_t (*)(char *, uint64_t))v91)(v72, v90);
  }
  else
  {
    v98 = &v119;
    *(_QWORD *)&v28 = 136315138;
    v99 = v28;
    v97 = (char *)&type metadata for Any + 8;
    v107 = v6;
    v101 = v2;
    while (1)
    {
      v29 = ((uint64_t (*)(int64_t))v115)(result);
      result = v114();
      if ((v29 & 0x8000000000000000) != 0)
        break;
      v30 = result;
      if (v29 >= *(_QWORD *)(result + 16))
        goto LABEL_30;
      v31 = v109;
      v112 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
      v32 = *(_QWORD *)(v109 + 72);
      v33 = v104;
      v34 = v113;
      v110 = *(void (**)(char *, unint64_t, uint64_t))(v109 + 16);
      v111 = v32;
      v110(v104, result + v112 + v32 * v29, v113);
      v35 = swift_bridgeObjectRelease(v30);
      v36 = ALBtAdvertisement._machContTimeNs.getter(v35);
      v38 = v37;
      v39 = *(uint64_t (**)(char *, uint64_t))(v31 + 8);
      result = v39(v33, v34);
      if ((v38 & 1) != 0)
        goto LABEL_39;
      if (v36 < 0)
        goto LABEL_31;
      result = (*(uint64_t (**)(int64_t))(*v1 + 208))(result);
      v40 = v36 + result;
      if (__OFADD__(v36, result))
        goto LABEL_32;
      result = machContTimeNs()();
      if (result < 0)
        goto LABEL_33;
      if (v40 >= result)
        goto LABEL_23;
      corelog.getter((uint64_t)v6);
      v41 = swift_retain_n(v1, 2);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, (os_log_type_t)v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(12, -1);
        v45 = swift_slowAlloc(32, -1);
        v116 = v45;
        *(_DWORD *)v44 = v99;
        v46 = v115();
        result = v114();
        if ((v46 & 0x8000000000000000) != 0)
          goto LABEL_37;
        v47 = result;
        if (v46 >= *(_QWORD *)(result + 16))
          goto LABEL_38;
        v103 = v43;
        v48 = v100;
        v102 = v42;
        v49 = v113;
        v110(v100, result + v112 + v46 * v111, v113);
        v50 = swift_bridgeObjectRelease(v47);
        v51 = ALBtAdvertisement.description.getter(v50);
        v53 = v52;
        v39(v48, v49);
        v118 = sub_10001818C(v51, v53, &v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v98, v44 + 4, v44 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v53);
        v54 = v102;
        _os_log_impl((void *)&_mh_execute_header, v102, (os_log_type_t)v103, "One BT adv from file: %s", v44, 0xCu);
        swift_arrayDestroy(v45, 1, v97);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v44, -1, -1);

        v2 = v101;
        v55 = (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v107, v101);
      }
      else
      {

        swift_release_n(v1, 2);
        v55 = (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v6, v2);
      }
      v56 = ((uint64_t (*)(uint64_t))v115)(v55);
      result = v114();
      if ((v56 & 0x8000000000000000) != 0)
        goto LABEL_34;
      v57 = result;
      if (v56 >= *(_QWORD *)(result + 16))
        goto LABEL_35;
      v59 = v111;
      v58 = v112;
      v110(v108, result + v112 + v56 * v111, v113);
      swift_bridgeObjectRelease(v57);
      v60 = (void (*)(uint64_t *, _QWORD))ALBtNotification._advertisements.modify(&v116);
      v62 = v61;
      v63 = *v61;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v61);
      *v62 = v63;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v63 = sub_10029BC64(0, *(_QWORD *)(v63 + 16) + 1, 1, v63);
        *v62 = v63;
      }
      v66 = *(_QWORD *)(v63 + 16);
      v65 = *(_QWORD *)(v63 + 24);
      if (v66 >= v65 >> 1)
      {
        v63 = sub_10029BC64(v65 > 1, v66 + 1, 1, v63);
        *v62 = v63;
      }
      *(_QWORD *)(v63 + 16) = v66 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v109 + 32))(v63 + v58 + v66 * v59, v108, v113);
      v60(&v116, 0);
      result = (*(uint64_t (**)(uint64_t *))(*v1 + 200))(&v116);
      if (__OFADD__(*v67, 1))
        goto LABEL_36;
      ++*v67;
      v68 = ((uint64_t (*)(uint64_t *, _QWORD))result)(&v116, 0);
      v69 = ((uint64_t (*)(uint64_t))v115)(v68);
      v70 = v114();
      v71 = *(_QWORD *)(v70 + 16);
      result = swift_bridgeObjectRelease(v70);
      v6 = v107;
      if (v69 >= v71)
        goto LABEL_23;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  return result;
}

void sub_10029BA54()
{
  _swift_stdlib_reportUnimplementedInitializer("ALDaemon.ALBtReplayerCSV", 24, "init(queue:interval:)", 21, 0);
  __break(1u);
}

uint64_t sub_10029BA80()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_release(*(_QWORD *)(v0 + 56));
}

uint64_t sub_10029BA9C()
{
  uint64_t v0;

  v0 = ALDataGenerationBase.deinit();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 56));
  return v0;
}

uint64_t sub_10029BAD0()
{
  uint64_t v0;

  v0 = ALDataGenerationBase.deinit();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_10029BB0C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t result;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = (v7 >> 14 == a1 >> 14) & a3;
  if (v8 == 1)
    return v8 ^ 1u;
  if (a1 >> 14 >= v7 >> 14)
  {
    v10 = String.subscript.getter(v7, a1, a5, a6);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v17 = *(char **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    *(_QWORD *)(a4 + 16) = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = sub_10029BE6C(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
      *(_QWORD *)(a4 + 16) = v17;
    }
    v20 = *((_QWORD *)v17 + 2);
    v19 = *((_QWORD *)v17 + 3);
    if (v20 >= v19 >> 1)
    {
      v17 = sub_10029BE6C((char *)(v19 > 1), v20 + 1, 1, v17);
      *(_QWORD *)(a4 + 16) = v17;
    }
    *((_QWORD *)v17 + 2) = v20 + 1;
    v21 = &v17[32 * v20];
    *((_QWORD *)v21 + 4) = v10;
    *((_QWORD *)v21 + 5) = v12;
    *((_QWORD *)v21 + 6) = v14;
    *((_QWORD *)v21 + 7) = v16;
    return v8 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
  return result;
}

uint64_t sub_10029BC64(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_1000039AC((uint64_t *)&unk_100382330);
  v11 = *(_QWORD *)(type metadata accessor for ALBtAdvertisement(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for ALBtAdvertisement(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10029DE04(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

char *sub_10029BE6C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000039AC(&qword_100381660);
      v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[32 * v8 + 32])
          memmove(v14, a4 + 32, 32 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10029D0B0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10029BF78(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_10029BFF0()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v10;
  _QWORD v11[2];

  v1 = v0[2];
  v2 = (void *)v0[3];
  v3 = v0[4];
  v11[0] = 0;
  v11[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  v4._object = (void *)0x8000000100305D80;
  v4._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v4);
  v5._countAndFlagsBits = v1;
  v5._object = v2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 8238;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v10 = v3;
  v7 = sub_1000039AC(&qword_100380878);
  _print_unlocked<A, B>(_:_:)(&v10, v11, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return v11[0];
}

uint64_t sub_10029C0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t *, uint64_t, uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = a1;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v9 = sub_10029DF1C();
  swift_bridgeObjectRetain(a4);
  v10 = String.init<A>(_:)(&v20, &type metadata for Substring, &protocol witness table for Substring, v9);
  v12 = v10;
  v13 = v11;
  if ((v11 & 0x1000000000000000) == 0)
  {
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v15 = HIBYTE(v13) & 0xF;
    v20 = v12;
    v21 = v13 & 0xFFFFFFFFFFFFFFLL;
    v14 = &v20;
    goto LABEL_7;
  }
  v12 = sub_10029CA28(v10, v11);
  v17 = v16;
  swift_bridgeObjectRelease(v13);
  v13 = v17;
  if ((v17 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v12 & 0x1000000000000000) != 0)
  {
    v14 = (uint64_t *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v15 = v12 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v14 = (uint64_t *)_StringObject.sharedUTF8.getter(v12, v13);
  }
LABEL_7:
  v18 = a6(v14, v15, a5);
  swift_bridgeObjectRelease(v13);
  return v18 | ((HIDWORD(v18) & 1) << 32);
}

unsigned __int8 *sub_10029C1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v7 = sub_10029DF1C();
  swift_bridgeObjectRetain(a4);
  v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v7);
  v10 = v8;
  v11 = v9;
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v13 = HIBYTE(v11) & 0xF;
    v18 = v10;
    v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }
  v10 = sub_10029CA28(v8, v9);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  v11 = v15;
  if ((v15 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v10 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }
LABEL_7:
  v16 = sub_10029C7AC(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16;
}

unsigned __int8 *sub_10029C2AC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_10029C52C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__OFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__OFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (__OFSUB__((_DWORD)v14, v15))
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_10029C7AC(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  unint64_t v32;
  unsigned __int8 v33;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v14 = v9 * a3;
              v15 = v11 + v12;
              v16 = v14 >= v15;
              v9 = v14 - v15;
              if (!v16)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      v26 = a3 + 48;
      v27 = a3 + 55;
      v28 = a3 + 87;
      if (a3 > 10)
      {
        v26 = 58;
      }
      else
      {
        v28 = 97;
        v27 = 65;
      }
      if (result)
      {
        v29 = 0;
        do
        {
          v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              v13 = 0;
              if (v30 < 0x61 || v30 >= v28)
                return (unsigned __int8 *)v13;
              v31 = -87;
            }
            else
            {
              v31 = -55;
            }
          }
          else
          {
            v31 = -48;
          }
          if (!is_mul_ok(v29, a3))
            return 0;
          v32 = v29 * a3;
          v33 = v30 + v31;
          v16 = __CFADD__(v32, v33);
          v29 = v32 + v33;
          if (v16)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  v17 = a2 - 1;
  if (a2 == 1)
    return 0;
  v18 = a3 + 48;
  v19 = a3 + 55;
  v20 = a3 + 87;
  if (a3 > 10)
  {
    v18 = 58;
  }
  else
  {
    v20 = 97;
    v19 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v21 = result + 1;
  do
  {
    v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        v13 = 0;
        if (v22 < 0x61 || v22 >= v20)
          return (unsigned __int8 *)v13;
        v23 = -87;
      }
      else
      {
        v23 = -55;
      }
    }
    else
    {
      v23 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v24 = v9 * a3;
    v25 = v22 + v23;
    v16 = __CFADD__(v24, v25);
    v9 = v24 + v25;
    if (v16)
      return 0;
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10029CA28(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_10029CAA4(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_10029CAA4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10029CBE8(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_10001861C(v12, 0);
      v5 = sub_10029CCD4((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)&_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_10029CBE8(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_10029BF78(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_10029BF78(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10029CCD4(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_10029BF78(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_10029BF78(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10029CEE4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t result;
  _QWORD v15[2];
  unsigned __int8 v16;

  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    v16 = 0;
    return result | ((unint64_t)v16 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v13 = v15;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v13 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v13 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = a6(v13, a1, a2, a3, a4, a5);
  if (!v6)
  {
    v16 = BYTE4(result) & 1;
    return result | ((unint64_t)v16 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

uint64_t sub_10029CFC0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_10029D1A0((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t type metadata accessor for ALBtReplayerCSV()
{
  return objc_opt_self(_TtC8ALDaemon15ALBtReplayerCSV);
}

uint64_t sub_10029D0B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10029D1A0(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  BOOL v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_10029BF78(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_96;
  result = String.UTF8View._foreignDistance(from:to:)(15, a2, a4, a5);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_10029BF78(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_10029BF78(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_92;
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 48;
        v34 = a6 + 55;
        v35 = a6 + 87;
        if (a6 > 10)
        {
          v33 = 58;
        }
        else
        {
          v35 = 97;
          v34 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                if (v38 < 0x61 || v38 >= v35)
                  return v29;
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            if (!is_mul_ok(v24, a6))
              return 0;
            v40 = v24 * a6;
            v41 = v38 + v39;
            v32 = __CFADD__(v40, v41);
            v24 = v40 + v41;
            if (v32)
              return 0;
            ++v36;
            --v37;
          }
          while (v37);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 48;
      v43 = a6 + 55;
      v44 = a6 + 87;
      if (a6 > 10)
      {
        v42 = 58;
      }
      else
      {
        v44 = 97;
        v43 = 65;
      }
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              if (v45 < 0x61 || v45 >= v44)
                return v29;
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          if (!is_mul_ok(v24, a6))
            return 0;
          v47 = v24 * a6;
          v48 = v45 + v46;
          v32 = __CFADD__(v47, v48);
          v24 = v47 + v48;
          if (v32)
            return 0;
          ++v19;
          if (!--result)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          if (!is_mul_ok(v24, a6))
            return 0;
          v30 = v24 * a6;
          v31 = v27 + v28;
          v32 = v30 >= v31;
          v24 = v30 - v31;
          if (!v32)
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

uint64_t sub_10029D5BC(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_10029BF78(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_104;
  result = String.UTF8View._foreignDistance(from:to:)(15, a2, a4, a5);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_10029BF78(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_10029BF78(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_100;
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v34 = a6 + 55;
        }
        else
        {
          v33 = 97;
          v34 = 65;
        }
        if (a6 <= 10)
          v35 = a6 + 48;
        else
          v35 = 58;
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                v30 = 1;
                if (v38 < 0x61 || v38 >= v33)
                  return v29 | ((unint64_t)v30 << 32);
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            v40 = (int)v24 * (uint64_t)(int)a6;
            if (v40 != (int)v40)
              goto LABEL_96;
            v41 = v38 + v39;
            v24 = v40 + v41;
            if (__OFADD__((_DWORD)v40, v41))
              goto LABEL_96;
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          v30 = 0;
          v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 87;
      if (a6 > 10)
      {
        v43 = a6 + 55;
      }
      else
      {
        v42 = 97;
        v43 = 65;
      }
      if (a6 <= 10)
        v44 = a6 + 48;
      else
        v44 = 58;
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              v30 = 1;
              if (v45 < 0x61 || v45 >= v42)
                return v29 | ((unint64_t)v30 << 32);
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          v47 = (int)v24 * (uint64_t)(int)a6;
          if (v47 != (int)v47)
            goto LABEL_96;
          v48 = v45 + v46;
          v24 = v47 + v48;
          if (__OFADD__((_DWORD)v47, v48))
            goto LABEL_96;
          ++v19;
          if (!--result)
            goto LABEL_94;
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    v29 = 0;
    v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 87;
      if (a6 > 10)
      {
        v22 = a6 + 55;
      }
      else
      {
        v21 = 97;
        v22 = 65;
      }
      if (a6 <= 10)
        v23 = a6 + 48;
      else
        v23 = 58;
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              v30 = 1;
              if (v27 < 0x61 || v27 >= v21)
                return v29 | ((unint64_t)v30 << 32);
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v31 = (int)v24 * (uint64_t)(int)a6;
          if (v31 != (int)v31)
            goto LABEL_96;
          v32 = v27 + v28;
          v24 = v31 - v32;
          if (__OFSUB__((_DWORD)v31, v32))
            goto LABEL_96;
          ++v25;
          if (!--v26)
            goto LABEL_94;
        }
      }
LABEL_95:
      v29 = 0;
      v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t sub_10029D9E0(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned __int8 v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_10029BF78(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_104;
  result = String.UTF8View._foreignDistance(from:to:)(15, a2, a4, a5);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_10029BF78(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_10029BF78(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_100;
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v34 = a6 + 55;
        }
        else
        {
          v33 = 97;
          v34 = 65;
        }
        if (a6 <= 10)
          v35 = a6 + 48;
        else
          v35 = 58;
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                v30 = 1;
                if (v38 < 0x61 || v38 >= v33)
                  return v29 | ((unint64_t)v30 << 32);
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_96;
            v41 = v38 + v39;
            v24 = v40 + v41;
            if (__CFADD__((_DWORD)v40, v41))
              goto LABEL_96;
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          v30 = 0;
          v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 87;
      if (a6 > 10)
      {
        v43 = a6 + 55;
      }
      else
      {
        v42 = 97;
        v43 = 65;
      }
      if (a6 <= 10)
        v44 = a6 + 48;
      else
        v44 = 58;
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              v30 = 1;
              if (v45 < 0x61 || v45 >= v42)
                return v29 | ((unint64_t)v30 << 32);
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v48 = v45 + v46;
          v24 = v47 + v48;
          if (__CFADD__((_DWORD)v47, v48))
            goto LABEL_96;
          ++v19;
          if (!--result)
            goto LABEL_94;
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    v29 = 0;
    v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 87;
      if (a6 > 10)
      {
        v22 = a6 + 55;
      }
      else
      {
        v21 = 97;
        v22 = 65;
      }
      if (a6 <= 10)
        v23 = a6 + 48;
      else
        v23 = 58;
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              v30 = 1;
              if (v27 < 0x61 || v27 >= v21)
                return v29 | ((unint64_t)v30 << 32);
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v32 = v27 + v28;
          v24 = v31 - v32;
          if (v31 < v32)
            goto LABEL_96;
          ++v25;
          if (!--v26)
            goto LABEL_94;
        }
      }
LABEL_95:
      v29 = 0;
      v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t sub_10029DE04(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(type metadata accessor for ALBtAdvertisement(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10029DF1C()
{
  unint64_t result;

  result = qword_100381658;
  if (!qword_100381658)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100381658);
  }
  return result;
}

uint64_t sub_10029DF60()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10029DF84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10029DF94()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(id *)(v0 + 16);
}

void sub_10029DFC4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 16, v4, 1, 0);
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

uint64_t sub_10029E008()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 24, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 24);
  swift_retain(*(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t sub_10029E050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 24, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_release(v5);
}

uint64_t sub_10029E0A0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 40, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 40));
}

uint64_t sub_10029E0D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 40, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;
  return swift_release(v3);
}

void *sub_10029E118(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 40, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10029E154()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 48, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 48));
}

uint64_t sub_10029E188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 48, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;
  return swift_release(v3);
}

uint64_t sub_10029E1CC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 56, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 56));
}

uint64_t sub_10029E200(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 56, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;
  return swift_release(v3);
}

void *sub_10029E244(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 56, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_10029E280()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 64, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 64));
}

uint64_t sub_10029E2B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 64, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = a1;
  return swift_release(v3);
}

void *sub_10029E2F8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 64, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10029E334(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 72, 7);
  sub_10029E388(a1, a2, a3);
  return v7;
}

_QWORD *sub_10029E388(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t *v8;
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t, unint64_t, void *);
  uint64_t v17;
  void (*v18)(_QWORD *__return_ptr, uint64_t, unint64_t, void *);
  uint64_t v19;
  void (*v20)(_QWORD *__return_ptr, uint64_t, unint64_t, void *);
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v25;
  void (*v26)(_QWORD *__return_ptr, unint64_t, unint64_t, void *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *__return_ptr, uint64_t, unint64_t, void *);
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v36;
  char v37;
  char v38[24];
  _QWORD v39[3];

  v4 = v3;
  v5 = a3;
  *(_OWORD *)(v3 + 5) = 0u;
  v7 = v3 + 5;
  *(_OWORD *)(v3 + 7) = 0u;
  v8 = v3 + 7;
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  v9 = a1;
  swift_retain(v5);
  v10 = sub_1002A9084();
  v11 = *v10;
  v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*v10 + 152);
  v13 = swift_retain(*v10);
  v37 = v12(v13);
  swift_release(v11);
  v14 = sub_1002A951C();
  v15 = *v14;
  v16 = *(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t, void *))(*(_QWORD *)*v14 + 112);
  swift_retain(*v14);
  v16(v39, 0x756D695369466957, 0xED0000646574616CLL, &type metadata for Bool);
  swift_release(v15);
  if (LOBYTE(v39[0]) != 2 && (v39[0] & 1) != 0)
  {
    type metadata accessor for ALWiFiSimulated();
    v32 = sub_1002B0C04(v9, a2, v5);
LABEL_19:
    v34 = v32;
    swift_beginAccess(v7, v39, 1, 0);
    v5 = *v7;
    *v7 = v34;
    goto LABEL_21;
  }
  v17 = *v14;
  v18 = *(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t, void *))(*(_QWORD *)*v14 + 112);
  swift_retain(*v14);
  v18(v39, 0x6C70655269466957, 0xEF56534364657961, &type metadata for Bool);
  swift_release(v17);
  if (LOBYTE(v39[0]) != 2 && (v39[0] & 1) != 0)
  {
    ++v7;
    type metadata accessor for ALWiFiReplayerCSV();
    v32 = sub_1002B1128(v9, a2, v5);
    goto LABEL_19;
  }
  v36 = v9;
  v19 = *v14;
  v20 = *(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t, void *))(*(_QWORD *)*v14 + 112);
  swift_retain(*v14);
  v20(v39, 0x726F43686365654CLL, 0xED00006946695765, &type metadata for Bool);
  swift_release(v19);
  if (LOBYTE(v39[0]) == 2)
  {
    if ((v37 & 1) != 0)
      goto LABEL_8;
    v21 = *v10;
    v22 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*v10 + 176);
    v23 = swift_retain(*v10);
    v24 = v22(v23);
    swift_release(v21);
    if ((v24 & 1) == 0)
      goto LABEL_8;
  }
  else if ((v39[0] & 1) == 0)
  {
LABEL_8:
    v25 = *v14;
    v26 = *(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v14
                                                                                                  + 112);
    swift_retain(*v14);
    v26(v39, 0xD000000000000018, 0x8000000100305DB0, &type metadata for Bool);
    swift_release(v25);
    if (LOBYTE(v39[0]) != 2 && (v39[0] & 1) != 0)
    {
      type metadata accessor for ALLeechCoreWiFi();
      v27 = sub_1002A3E24(v36, (uint64_t)sub_10029E758, 0);
      swift_beginAccess(v8, v38, 1, 0);
      v28 = *v8;
      *v8 = v27;
      swift_release(v28);
    }
    v29 = *v14;
    v30 = *(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t, void *))(*(_QWORD *)*v14 + 112);
    swift_retain(*v14);
    v30(v39, 0x504F41686365654CLL, 0xED00006946695732, &type metadata for Bool);
    swift_release(v29);
    v31 = v39[0];
    if (LOBYTE(v39[0]) == 2)
      v31 = v37;
    if ((v31 & 1) == 0)
    {

      goto LABEL_21;
    }
    v7 += 3;
    type metadata accessor for ALWiFiLeechAOP2();
    v32 = sub_1002A3238(v36, a2, v5);
    goto LABEL_19;
  }
  type metadata accessor for ALLeechCoreWiFi();
  v33 = sub_1002A3E24(v36, a2, v5);
  swift_beginAccess(v8, v39, 1, 0);
  v5 = *v8;
  *v8 = v33;
LABEL_21:
  swift_release(v5);
  return v4;
}

uint64_t sub_10029E758(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = type metadata accessor for ALWiFiNotification(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  __chkstk_darwin();
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v9);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v26 = v20;
    v21 = v1;
    *(_DWORD *)v13 = 136315138;
    v19 = v13 + 4;
    v14 = ALWiFiNotification.description.getter();
    v16 = v15;
    v24 = sub_10001818C(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v19, v13 + 12);
    swift_bridgeObjectRelease(v16);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "#WiFi,LeechCoreWiFiAsReference,%s", v13, 0xCu);
    v17 = v20;
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v9, v23);
}

uint64_t sub_10029E96C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return v0;
}

uint64_t sub_10029E9B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for ALWiFiResultHub()
{
  return objc_opt_self(_TtC8ALDaemon15ALWiFiResultHub);
}

uint64_t sub_10029EA1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void (*v4)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t result;
  double v11;
  char v12;

  v0 = type metadata accessor for ALCoreAnalyticsManager();
  v1 = swift_allocObject(v0, 104, 7);
  *(_BYTE *)(v1 + 16) = 0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_QWORD *)(v1 + 88) = &off_10035B3D0;
  *(_QWORD *)(v1 + 96) = &off_10035B458;
  v2 = sub_1002A951C();
  v3 = *v2;
  v4 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v2 + 112);
  swift_retain(*v2);
  v4(&v11, 0xD000000000000017, 0x8000000100306040, &type metadata for Double);
  swift_release(v3);
  if (v12)
    v5 = 6.0;
  else
    v5 = v11;
  *(double *)(v1 + 80) = v5 * (double)SecInHr.getter();
  *(Swift::Double *)(v1 + 72) = machContTimeSec()();
  v6 = sub_1002A9084();
  v7 = *v6;
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*v6 + 152);
  v9 = swift_retain(*v6);
  LOBYTE(v8) = v8(v9);
  result = swift_release(v7);
  *(_BYTE *)(v1 + 16) = v8 & 1;
  qword_1003DAC00 = v1;
  return result;
}

uint64_t *sub_10029EB34()
{
  if (qword_1003DABF8 != -1)
    swift_once(&qword_1003DABF8, sub_10029EA1C);
  return &qword_1003DAC00;
}

uint64_t static ALCoreAnalyticsManager.instance.getter()
{
  if (qword_1003DABF8 != -1)
    swift_once(&qword_1003DABF8, sub_10029EA1C);
  return swift_retain(qword_1003DAC00);
}

_UNKNOWN **sub_10029EBB4()
{
  return &off_10035B4B8;
}

_UNKNOWN **sub_10029EBC0()
{
  return &off_10035B540;
}

void sub_10029EBCC(unint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double v7;
  double v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v7 = (double)a1;
  v8 = UsToMin.getter();
  sub_10029EC80(a2, v8 * v7);
  if (a2 <= 1.0)
    goto LABEL_4;
  v9 = *(_QWORD *)(v4 + 32);
  v10 = __CFADD__(v9, 1);
  v11 = v9 + 1;
  if (!v10)
  {
    *(_QWORD *)(v4 + 32) = v11;
LABEL_4:
    *(_QWORD *)(v4 + 24) = a4;
    sub_10029F3AC();
    return;
  }
  __break(1u);
}

void sub_10029EC3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = __CFADD__(v2, a1);
  v4 = v2 + a1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 56) = v4;
    v5 = *(_QWORD *)(v1 + 64);
    v3 = __CFADD__(v5, 1);
    v6 = v5 + 1;
    if (!v3)
    {
      *(_QWORD *)(v1 + 64) = v6;
      sub_10029F3AC();
      return;
    }
  }
  __break(1u);
}

void sub_10029EC68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = __CFADD__(v2, a1);
  v4 = v2 + a1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 48) = v4;
    sub_10029F3AC();
  }
}

void sub_10029EC80(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  Class isa;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  Class v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  double v22;
  Class v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  double v31;
  Class v32;
  char v33;
  uint64_t v34;
  Class v35;
  char v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  NSString v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  uint64_t aBlock[5];
  uint64_t v59;

  v3 = v2;
  v55 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject(&unk_10035B5B0, 24, 7);
  *(_QWORD *)(v9 + 16) = sub_10029F210((uint64_t)&_swiftEmptyArrayStorage);
  v10 = (_QWORD *)(v9 + 16);
  sub_10029FFB8(0, (unint64_t *)&qword_100381DD0, NSNumber_ptr);
  isa = NSNumber.init(integerLiteral:)(-1).super.super.isa;
  v12 = *(_QWORD *)(v9 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
  aBlock[0] = v12;
  *(_QWORD *)(v9 + 16) = 0x8000000000000000;
  sub_10029FE40((uint64_t)isa, 0x6E65637265507442, 0xED00006C6C754674, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v9 + 16) = aBlock[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v14 = NSNumber.init(integerLiteral:)(-1).super.super.isa;
  v15 = *(_QWORD *)(v9 + 16);
  v16 = swift_isUniquelyReferenced_nonNull_native(v15);
  aBlock[0] = v15;
  *(_QWORD *)(v9 + 16) = 0x8000000000000000;
  sub_10029FE40((uint64_t)v14, 0x7265666675427442, 0xEC000000657A6953, v16);
  v17 = aBlock[0];
  *(_QWORD *)(v9 + 16) = aBlock[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v18 = *(_QWORD *)(v3 + 96);
  v19 = *(_QWORD *)(v18 + 16);
  if (v19 && *(double *)(v18 + 32) < a2)
  {
    v20 = (double *)(v18 + 40);
    v21 = v19 - 1;
    do
    {
      if (!v21)
        break;
      v22 = *v20++;
      --v21;
    }
    while (v22 < a2);
  }
  v23 = Double._bridgeToObjectiveC()().super.super.isa;
  v24 = swift_isUniquelyReferenced_nonNull_native(v17);
  aBlock[0] = v17;
  *v10 = 0x8000000000000000;
  sub_10029FE40((uint64_t)v23, 0x656C7341656D6954, 0xEA00000000007065, v24);
  v25 = aBlock[0];
  *v10 = aBlock[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v26 = *(_QWORD *)(v3 + 88);
  v27 = *(_QWORD *)(v26 + 16);
  if (v27)
  {
    v28 = (uint64_t)v8;
    if (*(double *)(v26 + 32) < a1)
    {
      v29 = (double *)(v26 + 40);
      v30 = v27 - 1;
      do
      {
        if (!v30)
          break;
        v31 = *v29++;
        --v30;
      }
      while (v31 < a1);
    }
  }
  else
  {
    v28 = (uint64_t)v8;
  }
  v32 = Double._bridgeToObjectiveC()().super.super.isa;
  v33 = swift_isUniquelyReferenced_nonNull_native(v25);
  aBlock[0] = v25;
  *(_QWORD *)(v9 + 16) = 0x8000000000000000;
  sub_10029FE40((uint64_t)v32, 0x6372655069666957, 0xEF6C6C7546746E65, v33);
  v34 = aBlock[0];
  *(_QWORD *)(v9 + 16) = aBlock[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v35 = UInt64._bridgeToObjectiveC()().super.super.isa;
  v36 = swift_isUniquelyReferenced_nonNull_native(v34);
  aBlock[0] = v34;
  *(_QWORD *)(v9 + 16) = 0x8000000000000000;
  sub_10029FE40((uint64_t)v35, 0x6666754269666957, 0xEE00657A69537265, v36);
  *(_QWORD *)(v9 + 16) = aBlock[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  corelog.getter(v28);
  v37 = swift_retain_n(v9, 2);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(32, -1);
    v54 = v28;
    v42 = v41;
    aBlock[0] = v41;
    *(_DWORD *)v40 = 136446210;
    v53 = v6;
    swift_beginAccess(v9 + 16, v57, 0, 0);
    v43 = *(_QWORD *)(v9 + 16);
    v44 = sub_10029FFB8(0, (unint64_t *)&qword_1003819C0, NSObject_ptr);
    v45 = swift_bridgeObjectRetain(v43);
    v46 = Dictionary.description.getter(v45, &type metadata for String, v44, &protocol witness table for String);
    v48 = v47;
    swift_bridgeObjectRelease(v43);
    v56 = sub_10001818C(v46, v48, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v40 + 4, v40 + 12);
    swift_release_n(v9, 2);
    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "CoreAnalytics, send wake event: %{public}s", v40, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
  }
  else
  {

    swift_release_n(v9, 2);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v28, v55);
  }
  v49 = String._bridgeToObjectiveC()();
  aBlock[4] = (uint64_t)sub_10029FF9C;
  v59 = v9;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10029F328;
  aBlock[3] = (uint64_t)&unk_10035B5F0;
  v50 = _Block_copy(aBlock);
  v51 = v59;
  swift_retain(v9);
  swift_release(v51);
  AnalyticsSendEventLazy(v49, v50);
  _Block_release(v50);
  swift_release(v9);

}

unint64_t sub_10029F210(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000039AC((uint64_t *)&unk_1003819D0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_10029FAD0(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

Class sub_10029F328(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_10029FFB8(0, (unint64_t *)&qword_1003819C0, NSObject_ptr);
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

void sub_10029F3AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  Class v12;
  char v13;
  uint64_t v14;
  Class v15;
  char v16;
  Class v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  Class v21;
  char v22;
  uint64_t v23;
  Class v24;
  char v25;
  Class v26;
  uint64_t v27;
  char v28;
  Class v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  Class v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSString v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[24];
  uint64_t aBlock[5];
  uint64_t v62;

  v1 = v0;
  v58 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = machContTimeSec()();
  if (v5 - *(double *)(v0 + 72) >= *(double *)(v0 + 80))
  {
    *(double *)(v0 + 72) = v5;
    v6 = swift_allocObject(&unk_10035B5B0, 24, 7);
    v7 = sub_10029F210((uint64_t)&_swiftEmptyArrayStorage);
    *(_QWORD *)(v6 + 16) = v7;
    v8 = (_QWORD *)(v1 + 48);
    isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
    aBlock[0] = v7;
    v57 = v4;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    sub_10029FE40((uint64_t)isa, 0x6D754E7663527442, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
    v11 = aBlock[0];
    *(_QWORD *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    v12 = UInt64._bridgeToObjectiveC()().super.super.isa;
    v13 = swift_isUniquelyReferenced_nonNull_native(v11);
    aBlock[0] = v11;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    sub_10029FE40((uint64_t)v12, 0x5273704169666957, 0xED00006D754E7663, v13);
    v14 = aBlock[0];
    *(_QWORD *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    v15 = UInt64._bridgeToObjectiveC()().super.super.isa;
    v16 = swift_isUniquelyReferenced_nonNull_native(v14);
    aBlock[0] = v14;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    sub_10029FE40((uint64_t)v15, 0xD000000000000015, 0x8000000100305F40, v16);
    *(_QWORD *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_10029FFB8(0, (unint64_t *)&qword_100381DD0, NSNumber_ptr);
    v17 = NSNumber.init(integerLiteral:)(-1).super.super.isa;
    v18 = *(_QWORD *)(v6 + 16);
    v19 = swift_isUniquelyReferenced_nonNull_native(v18);
    aBlock[0] = v18;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    sub_10029FE40((uint64_t)v17, 0xD000000000000011, 0x8000000100305F60, v19);
    v20 = aBlock[0];
    *(_QWORD *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    v21 = UInt64._bridgeToObjectiveC()().super.super.isa;
    v22 = swift_isUniquelyReferenced_nonNull_native(v20);
    aBlock[0] = v20;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    sub_10029FE40((uint64_t)v21, 0xD000000000000013, 0x8000000100305F80, v22);
    v23 = aBlock[0];
    *(_QWORD *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    v24 = Bool._bridgeToObjectiveC()().super.super.isa;
    v25 = swift_isUniquelyReferenced_nonNull_native(v23);
    aBlock[0] = v23;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    sub_10029FE40((uint64_t)v24, 0x654432706F417349, 0xEC00000065636976, v25);
    *(_QWORD *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    v26 = NSNumber.init(integerLiteral:)(-1).super.super.isa;
    v27 = *(_QWORD *)(v6 + 16);
    v28 = swift_isUniquelyReferenced_nonNull_native(v27);
    aBlock[0] = v27;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    sub_10029FE40((uint64_t)v26, 0xD000000000000012, 0x8000000100305FA0, v28);
    *(_QWORD *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    v29 = NSNumber.init(integerLiteral:)(-1).super.super.isa;
    v30 = *(_QWORD *)(v6 + 16);
    v31 = swift_isUniquelyReferenced_nonNull_native(v30);
    aBlock[0] = v30;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    sub_10029FE40((uint64_t)v29, 0xD000000000000010, 0x8000000100305FC0, v31);
    v32 = aBlock[0];
    *(_QWORD *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    v33 = (_QWORD *)(v1 + 24);
    v34 = UInt64._bridgeToObjectiveC()().super.super.isa;
    v35 = swift_isUniquelyReferenced_nonNull_native(v32);
    aBlock[0] = v32;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    v36 = (uint64_t)v57;
    sub_10029FE40((uint64_t)v34, 0x4F4164656C696146, 0xEF73676E69503250, v35);
    *(_QWORD *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    corelog.getter(v36);
    v37 = swift_retain_n(v6, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v56 = v8;
      v42 = v41;
      aBlock[0] = v41;
      v55 = v2;
      *(_DWORD *)v40 = 136446210;
      v54 = v40 + 4;
      swift_beginAccess(v6 + 16, v60, 0, 0);
      v43 = *(_QWORD *)(v6 + 16);
      v44 = sub_10029FFB8(0, (unint64_t *)&qword_1003819C0, NSObject_ptr);
      v45 = swift_bridgeObjectRetain(v43);
      v46 = Dictionary.description.getter(v45, &type metadata for String, v44, &protocol witness table for String);
      v48 = v47;
      swift_bridgeObjectRelease(v43);
      v59 = sub_10001818C(v46, v48, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v54, v40 + 12);
      swift_release_n(v6, 2);
      swift_bridgeObjectRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "CoreAnalytics, send heartbeat event: %{public}s", v40, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      v49 = v42;
      v8 = v56;
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v58);
    }
    else
    {

      swift_release_n(v6, 2);
      (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v36, v58);
    }
    v50 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_10029FF9C;
    v62 = v6;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10029F328;
    aBlock[3] = (uint64_t)&unk_10035B5C8;
    v51 = _Block_copy(aBlock);
    v52 = v62;
    swift_retain(v6);
    swift_release(v52);
    AnalyticsSendEventLazy(v50, v51);
    _Block_release(v51);

    *v33 = 0;
    v33[1] = 0;
    v8[1] = 0;
    v8[2] = 0;
    *v8 = 0;
    swift_release(v6);
  }
}

_QWORD *ALCoreAnalyticsManager.deinit()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  return v0;
}

uint64_t ALCoreAnalyticsManager.__deallocating_deinit()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for ALCoreAnalyticsManager()
{
  return objc_opt_self(_TtC8ALDaemon22ALCoreAnalyticsManager);
}

uint64_t method lookup function for ALCoreAnalyticsManager(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALCoreAnalyticsManager);
}

uint64_t dispatch thunk of ALCoreAnalyticsManager.onLocCompAnalytics(wifiPercentFull:timeAsleepUsec:wifiBufferSize:failedPings:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t sub_10029FAAC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10029FAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10029FFF0(a1, a2, v5);
}

Swift::Int sub_10029FB34(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000039AC((uint64_t *)&unk_1003819D0);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_10029FE40(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10029FAD0(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002A00D0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10029FB34(v15, a4 & 1);
  v20 = sub_10029FAD0(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10029FFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10029FFB0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10029FFB8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_10029FFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

id sub_1002A00D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1000039AC((uint64_t *)&unk_1003819D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1002A0280()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

void *sub_1002A02BC()
{
  return &unk_1002EF9E8;
}

double sub_1002A02C8()
{
  return 0.6;
}

void *sub_1002A02D8()
{
  return &unk_1002EF9F0;
}

id sub_1002A02E4()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t sub_1002A02EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain(*(_QWORD *)(v0 + 32));
  return v1;
}

double sub_1002A0318()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

uint64_t sub_1002A0320()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 48, v2, 0, 0);
  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_1002A0354(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v6[24];

  result = swift_beginAccess(v2 + 48, v6, 1, 0);
  *(_QWORD *)(v2 + 48) = a1;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

void *sub_1002A03A4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 48, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_1002A03E0(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, 72, 7);
  sub_1002A0444(a1, a2, a3, a4);
  return v9;
}

uint64_t sub_1002A0444(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v20;
  double v21;
  uint64_t v22;

  v5 = v4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v5 + 48) = 0;
  *(_BYTE *)(v5 + 56) = 1;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  *(_QWORD *)(v5 + 32) = a3;
  *(double *)(v5 + 40) = a4;
  v14 = a1;
  swift_retain(a3);
  v15 = corelog.getter((uint64_t)v13);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v18 = 134349056;
    v21 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v18 + 4, v18 + 12);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "debounce.init,%{public}f", v18, 0xCu);
    swift_slowDealloc(v18, -1, -1);
  }

  swift_release(a3);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v5;
}

uint64_t sub_1002A05C0(char a1)
{
  double *v1;
  double *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  double v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  char v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  double v39;
  char v40;
  double v41;
  double v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  void (*v75)(uint64_t);
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  double aBlock;
  _QWORD v87[4];
  uint64_t v88;

  v2 = v1;
  v4 = type metadata accessor for DispatchTimeInterval(0);
  v79 = *(_QWORD *)(v4 - 8);
  v80 = v4;
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v81 = type metadata accessor for DispatchTime(0);
  v78 = *(_QWORD *)(v81 - 8);
  v7 = __chkstk_darwin(v81);
  v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v82 = (char *)&v77 - v10;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v83 = *(_QWORD *)(v14 - 8);
  v84 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v77 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v77 - v23;
  v25 = __chkstk_darwin(v22);
  v28 = (char *)&v77 - v26;
  if ((a1 & 1) != 0 || (v29 = v2[5], v29 < 0.6))
  {
    v30 = corelog.getter((uint64_t)&v77 - v26);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "debounce.notify,force", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v83 + 8))(v28, v84);
    v34 = 0;
LABEL_6:
    v35 = 1;
    return sub_1002A1104(v34, v35);
  }
  v37 = v27;
  *(double *)&v38 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 120))(v25));
  v39 = *(double *)&v38;
  if ((v40 & 1) != 0)
  {
    v47 = v38;
    v48 = corelog.getter((uint64_t)v17);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "debounce.notify,1stRequest", v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v83 + 8))(v17, v84);
    v34 = v47;
    goto LABEL_6;
  }
  v41 = machContTimeSec()();
  v42 = v29 + v39;
  if (v29 + v39 + -0.1 < v41)
  {
    v43 = corelog.getter((uint64_t)v24);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v46 = 134349056;
      aBlock = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v87, v46 + 4, v46 + 12);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "debounce.notify,pastSchedule,%{public}f", v46, 0xCu);
      swift_slowDealloc(v46, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v83 + 8))(v24, v84);
    v34 = *(_QWORD *)&v41;
    v35 = 0;
    return sub_1002A1104(v34, v35);
  }
  v77 = v39;
  v52 = (*(uint64_t (**)(double))(*(_QWORD *)v2 + 144))(v29 + v39 + -0.1);
  swift_release(v52);
  if (v52)
  {
    corelog.getter((uint64_t)v21);
    v53 = swift_retain(v2);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.default.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = swift_slowAlloc(42, -1);
      *(_DWORD *)v56 = 134349824;
      aBlock = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v87, v56 + 4, v56 + 12);
      *(_WORD *)(v56 + 12) = 2050;
      aBlock = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v87, v56 + 14, v56 + 22);
      *(_WORD *)(v56 + 22) = 2050;
      aBlock = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v87, v56 + 24, v56 + 32);
      swift_release(v2);
      *(_WORD *)(v56 + 32) = 2050;
      aBlock = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v87, v56 + 34, v56 + 42);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "debounce.notify,skip,now,%{public}f,last,%{public}f,%{public}f,willRunAt,%{public}f", (uint8_t *)v56, 0x2Au);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

      swift_release(v2);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v21, v84);
  }
  v57 = swift_allocObject(&unk_10035B628, 32, 7);
  *(_QWORD *)(v57 + 16) = v2;
  *(double *)(v57 + 24) = v41;
  v87[3] = sub_1002A13C4;
  v88 = v57;
  aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
  v87[0] = 1107296256;
  v87[1] = sub_100284B08;
  v87[2] = &unk_10035B640;
  v58 = _Block_copy(&aBlock);
  v85 = &_swiftEmptyArrayStorage;
  v59 = sub_1002A13E8();
  swift_retain(v2);
  v60 = sub_1000039AC((uint64_t *)&unk_100380840);
  v61 = sub_1002A1430();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v85, v60, v61, v11, v59);
  v62 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
  v63 = DispatchWorkItem.init(flags:block:)(v13, v58);
  v64 = swift_release(v88);
  result = static DispatchTime.now()(v64);
  v65 = (v42 + 0.6 - v41) * 1000.0;
  if ((~*(_QWORD *)&v65 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v65 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v65 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  *v6 = (uint64_t)v65;
  v67 = v79;
  v66 = v80;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v79 + 104))(v6, enum case for DispatchTimeInterval.milliseconds(_:), v80);
  v68 = v82;
  + infix(_:_:)(v9, v6);
  (*(void (**)(_QWORD *, uint64_t))(v67 + 8))(v6, v66);
  v69 = *(void (**)(char *, uint64_t))(v78 + 8);
  v70 = v81;
  v69(v9, v81);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v68, v63);
  corelog.getter(v37);
  v71 = swift_retain(v2);
  v72 = Logger.logObject.getter(v71);
  v73 = static os_log_type_t.default.getter(v72);
  if (os_log_type_enabled(v72, v73))
  {
    v74 = swift_slowAlloc(62, -1);
    *(_DWORD *)v74 = 134350336;
    aBlock = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v87, v74 + 4, v74 + 12);
    *(_WORD *)(v74 + 12) = 2050;
    aBlock = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v87, v74 + 14, v74 + 22);
    *(_WORD *)(v74 + 22) = 2050;
    aBlock = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v87, v74 + 24, v74 + 32);
    swift_release(v2);
    *(_WORD *)(v74 + 32) = 2050;
    aBlock = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v87, v74 + 34, v74 + 42);
    *(_WORD *)(v74 + 42) = 2050;
    aBlock = 0.6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v87, v74 + 44, v74 + 52);
    *(_WORD *)(v74 + 52) = 2050;
    aBlock = v42 + 0.6 - v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v87, v74 + 54, v74 + 62);
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "debounce.notify,schedule,now,%{public}f,%{public}f,%{public}f,toRunAt,%{public}f,delay,%{public}f,dispatchSec,%{public}f", (uint8_t *)v74, 0x3Eu);
    swift_slowDealloc(v74, -1, -1);

  }
  else
  {

    swift_release(v2);
  }
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v37, v84);
  v75 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 152);
  v76 = swift_retain(v63);
  v75(v76);
  swift_release(v63);
  return ((uint64_t (*)(char *, uint64_t))v69)(v82, v70);
}

uint64_t sub_1002A0E88(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  char v13;
  double v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v23 - v10;
  *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(v9));
  if ((v13 & 1) == 0)
  {
    v14 = *(double *)&result;
    if (*(double *)&result <= a2)
    {
      v19 = corelog.getter((uint64_t)v8);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc(22, -1);
        *(_DWORD *)v22 = 134349312;
        v24 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v22 + 4, v22 + 12);
        *(_WORD *)(v22 + 12) = 2050;
        v24 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v22 + 14, v22 + 22);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "debounce.workItem,callback,mctnow,%{public}f,last,%{public}f", (uint8_t *)v22, 0x16u);
        swift_slowDealloc(v22, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      *(double *)&result = COERCE_DOUBLE(sub_1002A1104(0, 1));
    }
    else
    {
      v15 = corelog.getter((uint64_t)v11);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc(22, -1);
        *(_DWORD *)v18 = 134349312;
        v24 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v18 + 4, v18 + 12);
        *(_WORD *)(v18 + 12) = 2050;
        v24 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v18 + 14, v18 + 22);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "debounce.workItem,skip,mctnow,%{public}f,last,%{public}f", (uint8_t *)v18, 0x16u);
        swift_slowDealloc(v18, -1, -1);
      }

      *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4));
    }
  }
  return result;
}

uint64_t sub_1002A1104(uint64_t a1, char a2)
{
  void (**v2)(_QWORD);
  void (**v3)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _DWORD *v13;
  _DWORD *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  double v26;
  uint64_t v27;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v9);
  v10 = swift_retain_n(v2, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (_DWORD *)swift_slowAlloc(18, -1);
    v14 = v13;
    *v13 = 134349312;
    v15 = *(double *)&a1;
    if ((a2 & 1) != 0)
      v15 = -1.0;
    v26 = v15;
    v16 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v13 + 1, v13 + 3);
    *((_WORD *)v14 + 6) = 1026;
    v24 = v7;
    v17 = (*((uint64_t (**)(uint64_t))*v2 + 18))(v16);
    swift_release(v3);
    swift_release(v17);
    v25 = v17 != 0;
    v7 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, (char *)v14 + 14, (char *)v14 + 18);
    swift_release(v3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "debounce.callback,now,%{public}f,scheduled,%{BOOL,public}d", (uint8_t *)v14, 0x12u);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_release_n(v2, 2);
  }
  v18 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v3[3](v18);
  if ((a2 & 1) != 0)
    *(double *)&a1 = machContTimeSec()();
  v19 = (*((uint64_t (**)(uint64_t, _QWORD))*v3 + 16))(a1, 0);
  v20 = (*((uint64_t (**)(uint64_t))*v3 + 18))(v19);
  if (v20)
  {
    v21 = v20;
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release(v21);
  }
  return (*((uint64_t (**)(_QWORD))*v3 + 19))(0);
}

uint64_t sub_1002A1340()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 64));
  return v0;
}

uint64_t sub_1002A136C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t sub_1002A13A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002A13C4()
{
  uint64_t v0;

  return sub_1002A0E88(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1002A13D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002A13E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1002A13E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100381D30;
  if (!qword_100381D30)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100381D30);
  }
  return result;
}

unint64_t sub_1002A1430()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100381D40;
  if (!qword_100381D40)
  {
    v1 = sub_10000FE74((uint64_t *)&unk_100380840);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100381D40);
  }
  return result;
}

uint64_t type metadata accessor for ALDebounce()
{
  return objc_opt_self(_TtC8ALDaemon10ALDebounce);
}

uint64_t sub_1002A149C()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 24));
}

void *sub_1002A14A4()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 32, v4, 0, 0);
  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

void sub_1002A14E4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 32, v4, 1, 0);
  v3 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;

}

id sub_1002A1528()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

id sub_1002A1530()
{
  uint64_t v0;

  return *(id *)(v0 + 56);
}

uint64_t sub_1002A1538()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 72, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 72));
}

uint64_t sub_1002A156C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 72, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = a1;
  return swift_release(v3);
}

void *sub_1002A15B0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 72, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t DataVendorService.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 80, 7);
  DataVendorService.init()();
  return v1;
}

_QWORD *DataVendorService.init()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  void (*v14)(void **__return_ptr, uint64_t, unint64_t, void *);
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  char *v45;
  void *v46;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  void (*v56)(char *);
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char v61[24];
  void *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66[24];
  char v67[32];

  v1 = v0;
  v58 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v58);
  v3 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[4] = 0;
  v0[5] = 0;
  v11 = v0 + 5;
  v0[8] = 0;
  v59 = v0 + 8;
  v60 = v0 + 4;
  v0[9] = 0;
  v12 = sub_1002A951C();
  v13 = *v12;
  v14 = *(void (**)(void **__return_ptr, uint64_t, unint64_t, void *))(*(_QWORD *)*v12 + 112);
  swift_retain(*v12);
  v14(&v62, 0x4244656C62616E45, 0xE800000000000000, &type metadata for Bool);
  swift_release(v13);
  if (v62 != 2 && (v62 & 1) != 0)
  {
    type metadata accessor for ALDatabase();
    v15 = sub_1002BB83C();
    swift_beginAccess(v11, v61, 1, 0);
    v16 = *v11;
    *v11 = v15;
    swift_release(v16);
  }
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v18 = objc_msgSend(v17, "bundleIdentifier");

  if (v18)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

  }
  else
  {
    v21 = 0xE100000000000000;
    v19 = 95;
  }
  v57 = v1 + 9;
  v54 = sub_1002A1B90();
  v62 = (void *)v19;
  v63 = v21;
  swift_bridgeObjectRetain(v21);
  v22._countAndFlagsBits = 0x6F72676B6361622ELL;
  v22._object = (void *)0xEB00000000646E75;
  String.append(_:)(v22);
  v51 = v62;
  v50 = v63;
  static DispatchQoS.background.getter();
  v55 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v56 = *(void (**)(char *))(v5 + 104);
  v56(v7);
  v62 = &_swiftEmptyArrayStorage;
  v23 = sub_1002A3038(&qword_100381AE8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v53 = v23;
  v24 = sub_1000039AC(&qword_100381AF0);
  v52 = v24;
  v25 = sub_10028D310(&qword_100381AF8, &qword_100381AF0);
  v49 = v4;
  v26 = v25;
  v27 = v24;
  v28 = v58;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v62, v27, v25, v58, v23);
  v1[6] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v51, v50, v10, v3, v7, 0);
  v62 = (void *)v19;
  v63 = v21;
  swift_bridgeObjectRetain(v21);
  v29._countAndFlagsBits = 7627310;
  v29._object = (void *)0xE300000000000000;
  String.append(_:)(v29);
  v30 = swift_bridgeObjectRelease(v21);
  v31 = v62;
  v32 = v63;
  static DispatchQoS.userInteractive.getter(v30);
  ((void (*)(char *, _QWORD, uint64_t))v56)(v7, v55, v49);
  v62 = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v62, v52, v26, v28, v53);
  v33 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v31, v32, v10, v3, v7, 0);
  v1[7] = v33;
  v34 = (void *)v1[6];
  sub_1000039AC(&qword_100381B00);
  v35 = v34;
  v1[2] = sub_1002AE434((uint64_t)v35, (uint64_t)sub_1002A1BCC, 0);
  sub_1000039AC(&qword_100381B08);
  v1[3] = sub_1002AE434((uint64_t)v33, (uint64_t)sub_1002A1BE0, 0);
  type metadata accessor for ALWiFiResultHub();
  v36 = v35;
  swift_retain(v1);
  v37 = sub_10029E334(v36, (uint64_t)sub_1002A1F68, (uint64_t)v1);
  swift_beginAccess(v59, v67, 1, 0);
  v38 = v1[8];
  v1[8] = v37;
  swift_release(v38);
  type metadata accessor for ALBtResultHub();
  v39 = (void *)v1[7];
  swift_retain(v1);
  v40 = sub_1002B41C4(v39, (uint64_t)sub_1002A21A0, (uint64_t)v1);
  swift_beginAccess(v57, v66, 1, 0);
  v41 = v1[9];
  v1[9] = v40;
  swift_release(v41);
  v42 = (void *)v1[6];
  v64 = type metadata accessor for DataVendorService();
  v65 = sub_1002A3038(&qword_100381B10, v43, (uint64_t (*)(uint64_t))type metadata accessor for DataVendorService, (uint64_t)&protocol conformance descriptor for DataVendorService);
  v62 = v1;
  v44 = objc_allocWithZone((Class)type metadata accessor for ALServiceDelegate());
  swift_retain(v1);
  v45 = ALServiceDelegate.init(queue:dataService:)(v42, &v62);

  swift_beginAccess(v60, &v62, 1, 0);
  v46 = (void *)v1[4];
  v1[4] = v45;

  return v1;
}

unint64_t sub_1002A1B90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100381AE0;
  if (!qword_100381AE0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100381AE0);
  }
  return result;
}

uint64_t sub_1002A1BCC(uint64_t a1, char a2)
{
  return static ALWiFiNotifications.serializedIndications(results:isLastBatch:)(a1, a2);
}

uint64_t sub_1002A1BE0(uint64_t a1, uint64_t a2)
{
  return static ALBtNotifications.serializedIndications(results:isLastBatch:)(a1, a2);
}

uint64_t sub_1002A1BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(uint64_t);
  char *v17;
  uint64_t result;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD aBlock[5];
  uint64_t v58;
  void *v59;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  __chkstk_darwin(v4);
  v50 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  v52 = v6;
  v53 = v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ALWiFiNotification(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = sub_1000039AC((uint64_t *)&unk_100380850);
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(a2 + 16) + 200);
  v51 = a1;
  v17 = v56;
  result = v16(a1);
  if (!v17)
  {
    v45 = v12;
    v46 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v47 = v11;
    v48 = a2;
    v49 = 0;
    v56 = v9;
    v19 = v50;
    v20 = v51;
    ALWiFiNotification._scanResult.getter(result);
    v21 = type metadata accessor for ALWiFiScanResult(0);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v15, 1, v21);
    if ((_DWORD)v23 == 1)
    {
      sub_1002A3078((uint64_t)v15);
      v24 = 0;
    }
    else
    {
      v25 = ALWiFiScanResult._accessPoints.getter(v23);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v21);
      v24 = *(_QWORD *)(v25 + 16);
      swift_bridgeObjectRelease(v25);
    }
    v26 = v19;
    v27 = v56;
    v28 = v47;
    v29 = v48;
    v56 = *(char **)(v48 + 48);
    v30 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v20, v10);
    v31 = *(unsigned __int8 *)(v28 + 80);
    v32 = v28;
    v33 = (v31 + 24) & ~v31;
    v34 = (v45 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    v35 = swift_allocObject(&unk_10035B6C8, v34 + 8, v31 | 7);
    v36 = v10;
    v37 = v35;
    *(_QWORD *)(v35 + 16) = v29;
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v35 + v33, v30, v36);
    *(_QWORD *)(v37 + v34) = v24;
    aBlock[4] = sub_1002A3138;
    v58 = v37;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10028B824;
    aBlock[3] = &unk_10035B6E0;
    v38 = _Block_copy(aBlock);
    v39 = swift_retain(v29);
    static DispatchQoS.unspecified.getter(v39);
    v59 = &_swiftEmptyArrayStorage;
    v40 = sub_1002A3038((unint64_t *)&qword_100381D30, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v41 = sub_1000039AC((uint64_t *)&unk_100380840);
    v42 = sub_10028D310((unint64_t *)&qword_100381D40, (uint64_t *)&unk_100380840);
    v43 = v41;
    v44 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v43, v42, v55, v40);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v27, v26, v38);
    _Block_release(v38);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v26, v44);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v27, v52);
    return swift_release(v58);
  }
  return result;
}

uint64_t sub_1002A1F68(uint64_t a1)
{
  uint64_t v1;

  return sub_1002A1BF4(a1, v1);
}

uint64_t sub_1002A1F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;
  void *v27;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(a2 + 24) + 200))(a1);
  if (!v2)
  {
    v13 = ALBtNotification._advertisements.getter(result);
    v14 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRelease(v13);
    v23 = *(_QWORD *)(a2 + 48);
    v15 = swift_allocObject(&unk_10035B678, 24, 7);
    *(_QWORD *)(v15 + 16) = v14;
    aBlock[4] = sub_1002A2F84;
    v26 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10028B824;
    aBlock[3] = &unk_10035B690;
    v16 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter(v16);
    v27 = &_swiftEmptyArrayStorage;
    v17 = sub_1002A3038((unint64_t *)&qword_100381D30, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v22 = v6;
    v18 = v17;
    v19 = sub_1000039AC((uint64_t *)&unk_100380840);
    v20 = sub_10028D310((unint64_t *)&qword_100381D40, (uint64_t *)&unk_100380840);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v19, v20, v5, v18);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v16);
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
    return swift_release(v26);
  }
  return result;
}

uint64_t sub_1002A21A0(uint64_t a1)
{
  uint64_t v1;

  return sub_1002A1F80(a1, v1);
}

uint64_t type metadata accessor for DataVendorService()
{
  return objc_opt_self(_TtC8ALDaemon17DataVendorService);
}

uint64_t sub_1002A21D8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  NSObject *v28;
  NSObject *v29;
  _QWORD *v30;
  uint8_t *v31;
  uint64_t v32;
  uint8_t *v33;
  NSObject *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  _QWORD *v54;
  NSObject *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  _QWORD *v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;

  v5 = v4;
  v69 = a3;
  v8 = sub_1000039AC(&qword_100381B18);
  __chkstk_darwin(v8);
  v68 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ClientCallback(0);
  __chkstk_darwin(v10);
  v12 = (uint8_t *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v63 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v63 - v21;
  if ((dispatch thunk of ALRPCTest.getSamplesQueueSize()() & 1) != 0)
  {
    corelog.getter((uint64_t)v22);
    v23 = a4;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v67 = v13;
      v26 = swift_slowAlloc(12, -1);
      v65 = v5;
      v27 = (uint8_t *)v26;
      v63 = (_QWORD *)swift_slowAlloc(8, -1);
      v64 = v27;
      *(_DWORD *)v27 = 138543362;
      v70 = v23;
      v28 = v23;
      v66 = v14;
      v29 = v28;
      v13 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v27 + 4, v27 + 12);
      v30 = v63;
      *v63 = v23;

      v14 = v66;
      v31 = v64;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Add wifi client %{public}@", v64, 0xCu);
      v32 = sub_1000039AC((uint64_t *)&unk_1003805A0);
      swift_arrayDestroy(v30, 1, v32);
      swift_slowDealloc(v30, -1, -1);
      v33 = v31;
      v5 = v65;
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {

      v24 = v23;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
    v44 = type metadata accessor for ALResultOptions(0);
    v45 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v68, 1, 1, v44);
    v46 = v23;
    v47 = v69;
    swift_retain(v69);
    sub_1002ADF0C(a2, v47, (uint64_t)v46, v45, v12);
    v48 = *(_QWORD *)(v5 + 16);
LABEL_13:
    (*(void (**)(uint8_t *))(*(_QWORD *)v48 + 176))(v12);
    return sub_1002A2F0C((uint64_t)v12);
  }
  if ((dispatch thunk of ALRPCTest.printBufferUsageStatistics()() & 1) != 0)
  {
    corelog.getter((uint64_t)v20);
    v34 = a4;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v64 = v12;
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(8, -1);
      v67 = v13;
      v63 = (_QWORD *)v38;
      v65 = v5;
      *(_DWORD *)v37 = 138543362;
      v70 = v34;
      v39 = v34;
      v66 = a2;
      v40 = v39;
      v12 = v64;
      v5 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v37 + 4, v37 + 12);
      v41 = v63;
      *v63 = v34;

      a2 = v66;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Add BT client %{public}@", v37, 0xCu);
      v42 = sub_1000039AC((uint64_t *)&unk_1003805A0);
      swift_arrayDestroy(v41, 1, v42);
      v43 = v41;
      v13 = v67;
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {

      v35 = v34;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    v58 = type metadata accessor for ALResultOptions(0);
    v59 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v68, 1, 1, v58);
    v60 = v34;
    v61 = v69;
    swift_retain(v69);
    sub_1002ADF0C(a2, v61, (uint64_t)v60, v59, v12);
    v48 = *(_QWORD *)(v5 + 24);
    goto LABEL_13;
  }
  corelog.getter((uint64_t)v17);
  v49 = a4;
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.error.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = swift_slowAlloc(8, -1);
    v67 = v13;
    v54 = (_QWORD *)v53;
    v66 = v14;
    *(_DWORD *)v52 = 138543362;
    v70 = v49;
    v55 = v49;
    v14 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v52 + 4, v52 + 12);
    *v54 = v49;

    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Unknown subscribe %{public}@", v52, 0xCu);
    v56 = sub_1000039AC((uint64_t *)&unk_1003805A0);
    swift_arrayDestroy(v54, 1, v56);
    v57 = v54;
    v13 = v67;
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v52, -1, -1);
  }
  else
  {

    v50 = v49;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t sub_1002A27D0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD *v20;
  NSObject *v21;
  NSObject *v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;

  v10 = type metadata accessor for Logger(0);
  v37 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - v12;
  corelog.getter((uint64_t)&v29 - v12);
  v14 = a5;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  v17 = os_log_type_enabled(v15, v16);
  v34 = a3;
  v35 = a4;
  if (v17)
  {
    v36 = v10;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(8, -1);
    v32 = a2;
    v20 = (_QWORD *)v19;
    v30 = v18;
    *(_DWORD *)v18 = 138543362;
    v38 = v14;
    v21 = v14;
    v31 = a1;
    v22 = v21;
    v10 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 4, v18 + 12);
    *v20 = v14;

    v23 = v30;
    a1 = v31;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "subscribeDataService,%{public}@", v30, 0xCu);
    v24 = sub_1000039AC((uint64_t *)&unk_1003805A0);
    swift_arrayDestroy(v20, 1, v24);
    v25 = v20;
    a2 = v32;
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {

    v15 = v14;
  }
  v26 = v37;

  (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v10);
  type metadata accessor for ALProtoRequest(0);
  sub_100017EF8(a1, a2);
  v27 = ALProtoRequest.__allocating_init(data:)(a1, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, NSObject *))(*(_QWORD *)v33 + 248))(v27, v34, v35, v14);
  return swift_release(v27);
}

uint64_t sub_1002A2C68(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  NSObject *v13;
  NSObject **v14;
  uint64_t v15;
  uint8_t *v16;
  NSObject **v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v7);
  v8 = a1;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v20 = v2;
    v11 = swift_slowAlloc(12, -1);
    v19 = v5;
    v12 = (uint8_t *)v11;
    v18 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138543362;
    v21 = v8;
    v13 = v8;
    v2 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4, v12 + 12);
    v14 = v18;
    *v18 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "unsubscribeDataService,%{public}@", v12, 0xCu);
    v15 = sub_1000039AC((uint64_t *)&unk_1003805A0);
    swift_arrayDestroy(v14, 1, v15);
    swift_slowDealloc(v14, -1, -1);
    v16 = v12;
    v5 = v19;
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {

    v9 = v8;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**))(**(_QWORD **)(v2 + 16) + 184))(v8);
  return (*(uint64_t (**))(**(_QWORD **)(v2 + 24) + 184))(v8);
}

uint64_t DataVendorService.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  return v0;
}

uint64_t DataVendorService.__deallocating_deinit()
{
  uint64_t v0;

  DataVendorService.deinit();
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t sub_1002A2EBC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 256))();
}

uint64_t sub_1002A2EE4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 264))();
}

uint64_t sub_1002A2F0C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ClientCallback(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t method lookup function for DataVendorService(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for DataVendorService);
}

uint64_t dispatch thunk of DataVendorService.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of DataVendorService.subscribe(_:cb:id:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of DataVendorService.unsubscribe(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t sub_1002A2F74()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002A2F84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t result;
  char v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = sub_10029EB34();
  if (v1 < 0)
  {
    v6 = 2;
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v6, 3451, 0);
    __break(1u);
  }
  else
  {
    v3 = *v2;
    v4 = *(void (**)(uint64_t))(*(_QWORD *)*v2 + 192);
    swift_retain(*v2);
    v4(v1);
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_1002A3020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002A3030(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1002A3038(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002A3078(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000039AC((uint64_t *)&unk_100380850);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002A30B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for ALWiFiNotification(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002A3138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t result;
  char v11;

  v1 = v0;
  v2 = *(_QWORD *)(type metadata accessor for ALWiFiNotification(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v5 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 168))();
  if (v5)
  {
    v6 = v5;
    (*(void (**)(unint64_t))(*(_QWORD *)v5 + 184))(v1 + v3);
    swift_release(v6);
  }
  v7 = sub_10029EB34();
  if (v4 < 0)
  {
    v11 = 2;
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v11, 3451, 0);
    __break(1u);
  }
  else
  {
    v8 = *v7;
    v9 = *(void (**)(uint64_t))(*(_QWORD *)*v7 + 184);
    swift_retain(*v7);
    v9(v4);
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_1002A3238(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 24, 7);
  sub_1002A328C(a1, a2, a3);
  return v7;
}

uint64_t sub_1002A328C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint8_t *v25;
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *__return_ptr, unint64_t, unint64_t, void *);
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  char v47;
  double v48;
  char v49;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v45 - v13;
  v15 = corelog.getter((uint64_t)&v45 - v13);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    v46 = v12;
    v19 = a1;
    v20 = v8;
    v21 = a3;
    v22 = a2;
    v23 = v4;
    v24 = v18;
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "#WiFi, Leeching on AOP2", v18, 2u);
    v25 = v24;
    v4 = v23;
    a2 = v22;
    a3 = v21;
    v8 = v20;
    a1 = v19;
    v12 = v46;
    swift_slowDealloc(v25, -1, -1);
  }

  v46 = *(char **)(v9 + 8);
  ((void (*)(char *, uint64_t))v46)(v14, v8);
  v26 = sub_1002A951C();
  v27 = *v26;
  v28 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v26 + 112);
  swift_retain(*v26);
  v28(&v48, 0xD000000000000016, 0x8000000100306150, &type metadata for Double);
  swift_release(v27);
  if (v49)
    v29 = 1.0;
  else
    v29 = v48;
  type metadata accessor for ALRPCInterface();
  v30 = a1;
  v31 = ALRPCInterface.__allocating_init(queue:interval:)(v30, v29);
  v32 = v4;
  *(_QWORD *)(v4 + 16) = v31;
  v33 = (_QWORD *)(v4 + 16);
  swift_retain(v31);
  v34 = *sub_10029EB34();
  swift_retain(v34);
  dispatch thunk of ALRPCInterface.regAnalytics(onLocCompAnalytics:)();
  swift_release(v31);
  swift_release(v34);
  swift_beginAccess(v33, &v48, 0, 0);
  v35 = *v33;
  v36 = swift_allocObject(&unk_10035B730, 32, 7);
  *(_QWORD *)(v36 + 16) = a2;
  *(_QWORD *)(v36 + 24) = a3;
  swift_retain(v35);
  swift_retain(a3);
  dispatch thunk of ALRPCInterface.regWifi(onWiFi:)();
  swift_release(v35);
  swift_release(v36);
  v37 = *v26;
  v38 = *(void (**)(char *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v26 + 112);
  swift_retain(*v26);
  v38(&v47, 0xD000000000000017, 0x8000000100306170, &type metadata for Bool);
  swift_release(v37);
  if (v47 == 2 || (v47 & 1) != 0)
  {
    v39 = corelog.getter((uint64_t)v12);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "#WiFi, Enable AOP2 Wifi Reception", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    ((void (*)(char *, uint64_t))v46)(v12, v8);
    v43 = *v33;
    swift_retain(*v33);
    dispatch thunk of ALTightbeamHandler.hello(number:)();
    swift_release(v43);
  }

  swift_release(a3);
  return v32;
}

uint64_t sub_1002A3620(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  __chkstk_darwin(v4);
  return a2(a1);
}

uint64_t sub_1002A3810()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002A3834(uint64_t a1)
{
  uint64_t v1;

  return sub_1002A3620(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t type metadata accessor for ALWiFiLeechAOP2()
{
  return objc_opt_self(_TtC8ALDaemon15ALWiFiLeechAOP2);
}

uint64_t sub_1002A385C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t, float, float);
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char v25;
  float v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v34 = a2;
  v3 = type metadata accessor for Logger(0);
  v30 = *(_QWORD *)(v3 - 8);
  v31 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v35 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v7);
  v12 = (char *)&v29 - v11;
  v32 = a1;
  v36 = *(_QWORD *)(a1 + 16);
  if (v36 >= 2)
  {
    v13 = 0;
    v14 = v32 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    v15 = *(float *)&v34;
    v16 = *(_QWORD *)(v35 + 72);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
    v33 = v36 - 1;
    while (1)
    {
      if (v36 == v13)
      {
        __break(1u);
        return result;
      }
      v17(v12, v14, v6);
      v19 = ((uint64_t (*)(char *, uint64_t, uint64_t))v17)(v9, v14 + v16, v6);
      v20 = ALWiFiScanSingleAccessPoint._ageSec.getter(v19);
      if ((v20 & 0x100000000) != 0)
        goto LABEL_10;
      v21 = *(float *)&v20;
      v22 = ALWiFiScanSingleAccessPoint._ageSec.getter(v20);
      if ((v22 & 0x100000000) != 0)
        goto LABEL_10;
      if (*(float *)&v22 > v21)
        break;
      v18 = *(void (**)(char *, uint64_t, float, float))(v35 + 8);
      v18(v9, v6, v21, *(float *)&v22);
      result = ((uint64_t (*)(char *, uint64_t))v18)(v12, v6);
LABEL_4:
      ++v13;
      v14 += v16;
      if (v33 == v13)
        return result;
    }
    if ((v34 & 0x100000000) != 0)
    {
LABEL_10:
      v23 = *(void (**)(char *, uint64_t))(v35 + 8);
      v23(v9, v6);
      v23(v12, v6);
    }
    else
    {
      v26 = vabds_f32(v21, *(float *)&v22);
      v27 = *(void (**)(char *, uint64_t))(v35 + 8);
      v27(v9, v6);
      result = ((uint64_t (*)(char *, uint64_t))v27)(v12, v6);
      if (v26 <= v15)
        goto LABEL_4;
    }
    v24 = corelog.getter((uint64_t)v5);
    __chkstk_darwin(v24);
    v25 = BYTE4(v34);
    *((_DWORD *)&v29 - 8) = v34;
    *((_BYTE *)&v29 - 28) = v25 & 1;
    *(&v29 - 3) = v13 + 1;
    v28 = 54;
    Logger._fault(_:function:file:line:)((uint64_t (*)(void))sub_1002A3B0C, (uint64_t)(&v29 - 6), (uint64_t *)"checkInOrder(_:toleranceSec:)", 29, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreWiFi.swift", 73, 2);
    result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v5, v31);
    goto LABEL_4;
  }
  return result;
}

void sub_1002A3B0C()
{
  uint64_t v0;
  int v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  _QWORD v18[3];

  v1 = *(_DWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 20);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v18[1] = 0;
  v18[2] = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v5._object = (void *)0x8000000100306400;
  v5._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v5);
  LODWORD(v18[0]) = v1;
  BYTE4(v18[0]) = v2;
  DefaultStringInterpolation.appendInterpolation<A>(_:)((uint64_t)v18, (uint64_t)&type metadata for Float, (uint64_t)&protocol witness table for Float);
  v6._countAndFlagsBits = 44;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v18[0] = v3;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._countAndFlagsBits = 44;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10 = v3 - 1;
  if (__OFSUB__(v3, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(v4 + 16);
  if (v10 >= v11)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v12._countAndFlagsBits = ALWiFiScanSingleAccessPoint.description.getter();
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = 44;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  if (v11 > v3)
  {
    v15._countAndFlagsBits = ALWiFiScanSingleAccessPoint.description.getter();
    v16 = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v16);
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    String.append(_:)(v17);
    return;
  }
LABEL_9:
  __break(1u);
}

void *sub_1002A3CA4()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 40, v4, 0, 0);
  v1 = *(void **)(v0 + 40);
  v2 = v1;
  return v1;
}

void sub_1002A3CE4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 40, v4, 1, 0);
  v3 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;

}

uint64_t sub_1002A3D28()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 64, v2, 0, 0);
  return *(_QWORD *)(v0 + 64);
}

uint64_t sub_1002A3D5C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v6[24];

  result = swift_beginAccess(v2 + 64, v6, 1, 0);
  *(_QWORD *)(v2 + 64) = a1;
  *(_BYTE *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t sub_1002A3DAC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 80, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 80));
}

uint64_t sub_1002A3DE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 80, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = a1;
  return swift_release(v3);
}

uint64_t sub_1002A3E24(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  swift_allocObject(v3, 88, 7);
  v7 = sub_1002A822C(a1, a2, a3);

  swift_release(a3);
  return v7;
}

uint64_t sub_1002A3E88(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_1002A822C(a1, a2, a3);

  swift_release(a3);
  return v5;
}

uint64_t sub_1002A3EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v23;
  uint64_t (*v24)(void);
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  void **aBlock;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v44 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v43 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v38 - v13;
  v15 = (*(uint64_t (**)(id))(*(_QWORD *)v0 + 184))(objc_msgSend(objc_allocWithZone((Class)CWFInterface), "init"));
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 176))(v15);
  if (v16)
  {
    v17 = (void *)v16;
    v39 = v6;
    v40 = v5;
    v41 = v3;
    v42 = v2;
    corelog.getter((uint64_t)v14);
    v18 = v17;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v21 = 134349056;
      aBlock = (void **)-[NSObject serviceType](v18, "serviceType");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v47, v21 + 4, v21 + 12);

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "#WiFi, Leeching CoreWiFi %{public}ld", v21, 0xCu);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {

      v19 = v18;
    }

    v23 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    v24 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 128);
    v25 = (void *)((uint64_t (*)(uint64_t))v24)(v23);
    -[NSObject setTargetQueue:](v18, "setTargetQueue:", v25);

    v50 = sub_1002A8368;
    v51 = v1;
    aBlock = _NSConcreteStackBlock;
    v47 = 1107296256;
    v48 = sub_1002852B8;
    v49 = &unk_10035B780;
    v26 = _Block_copy(&aBlock);
    v27 = v51;
    swift_retain(v1);
    swift_release(v27);
    -[NSObject setEventHandler:](v18, "setEventHandler:", v26);
    _Block_release(v26);
    v28 = (void *)v24();
    v50 = sub_1002A8388;
    v51 = v1;
    aBlock = _NSConcreteStackBlock;
    v47 = 1107296256;
    v48 = sub_10028B824;
    v49 = &unk_10035B7A8;
    v29 = _Block_copy(&aBlock);
    v30 = swift_retain(v1);
    v31 = v43;
    static DispatchQoS.unspecified.getter(v30);
    v45 = &_swiftEmptyArrayStorage;
    v32 = sub_1002A13E8();
    v33 = sub_1000039AC((uint64_t *)&unk_100380840);
    v34 = sub_1002A8D3C((unint64_t *)&qword_100381D40, (uint64_t *)&unk_100380840, (uint64_t)&protocol conformance descriptor for [A]);
    v35 = v40;
    v36 = v33;
    v37 = v42;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v36, v34, v42, v32);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v31, v35, v29);
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v41 + 8))(v35, v37);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v31, v39);
    return swift_release(v51);
  }
  else
  {
    corelog.getter((uint64_t)v12);
    Logger._fault(_:function:file:line:)((uint64_t (*)(void))sub_1002A4310, 0, (uint64_t *)"regCoreWiFi()", 13, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreWiFi.swift", 73, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

unint64_t sub_1002A4310()
{
  return 0xD000000000000013;
}

uint64_t sub_1002A432C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 128))(v9);
  v13 = swift_allocObject(&unk_10035B858, 32, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a1;
  aBlock[4] = sub_1002A8E50;
  v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10028B824;
  aBlock[3] = &unk_10035B870;
  v14 = _Block_copy(aBlock);
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(a1);
  v20 = &_swiftEmptyArrayStorage;
  v15 = sub_1002A13E8();
  v16 = sub_1000039AC((uint64_t *)&unk_100380840);
  v17 = sub_1002A8D3C((unint64_t *)&qword_100381D40, (uint64_t *)&unk_100380840, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v4, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return swift_release(v22);
}

uint64_t sub_1002A4518(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  NSObject *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject **v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  NSObject **v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 328))(a2);
  if (v2)
  {
    corelog.getter((uint64_t)v8);
    v10 = a2;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v24 = v5;
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (NSObject **)swift_slowAlloc(8, -1);
      v22 = v13;
      *(_DWORD *)v13 = 138543362;
      v20 = v13 + 4;
      v25 = v10;
      v14 = v10;
      v23 = v6;
      v15 = v14;
      v5 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v20, v13 + 12);
      v16 = v21;
      *v21 = v10;

      v17 = v22;
      v6 = v23;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "#WiFi,eventHandler,catch,%{public}@", v22, 0xCu);
      v18 = sub_1000039AC((uint64_t *)&unk_1003805A0);
      swift_arrayDestroy(v16, 1, v18);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {

      v11 = v10;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(v2);
    return swift_errorRelease(v2);
  }
  return result;
}

void *sub_1002A4724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  id v41;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v40 = (uint64_t)&v37 - v8;
  result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 176))(v7);
  if (result)
  {
    v10 = result;
    objc_msgSend(result, "activate");
    v11 = 0;
    *(_QWORD *)&v12 = 134349056;
    v39 = v12;
    v38 = v6;
    do
    {
      v13 = *(uint64_t *)((char *)&off_10035B748 + v11 + 32);
      v41 = 0;
      v14 = objc_msgSend(v10, "startMonitoringEventType:error:", v13, &v41);
      v15 = v41;
      if (v14)
      {
        v16 = v41;
        v17 = corelog.getter(v40);
        v18 = Logger.logObject.getter(v17);
        v19 = static os_log_type_t.default.getter(v18);
        if (os_log_type_enabled(v18, v19))
        {
          v20 = swift_slowAlloc(12, -1);
          *(_DWORD *)v20 = v39;
          *(_QWORD *)(v20 + 4) = v13;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "#WiFi,startMonitoringEventType,%{public}ld", (uint8_t *)v20, 0xCu);
          swift_slowDealloc(v20, -1, -1);
        }

        (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v40, v2);
      }
      else
      {
        v21 = v41;
        v22 = _convertNSErrorToError(_:)(v15);

        swift_willThrow();
        v23 = corelog.getter((uint64_t)v6);
        v24 = Logger.logObject.getter(v23);
        v25 = static os_log_type_t.default.getter(v24);
        if (os_log_type_enabled(v24, v25))
        {
          v26 = v3;
          v27 = v2;
          v28 = v10;
          v29 = v1;
          v30 = swift_slowAlloc(12, -1);
          *(_DWORD *)v30 = v39;
          *(_QWORD *)(v30 + 4) = v13;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "#WiFi,activate,catch,%{public}ld", (uint8_t *)v30, 0xCu);
          v31 = v30;
          v1 = v29;
          v10 = v28;
          v2 = v27;
          v3 = v26;
          v6 = v38;
          swift_slowDealloc(v31, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
        (*(void (**)(uint64_t))(*(_QWORD *)v1 + 296))(v22);
        swift_errorRelease(v22);
      }
      v11 += 8;
    }
    while (v11 != 24);
    v32 = objc_msgSend(v10, "BSSID");
    if (v32)
    {
      v33 = v32;
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v36 = v35;

    }
    else
    {
      v34 = 0;
      v36 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 320))(v34, v36);

    return (void *)swift_bridgeObjectRelease(v36);
  }
  return result;
}

uint64_t sub_1002A4A50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  const char *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  char v44;
  char *v45;
  char v46;
  int v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  _QWORD v62[3];
  char v63[8];
  _QWORD v64[3];
  char v65[8];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v59 = (char *)&v54 - v8;
  v9 = __chkstk_darwin(v7);
  v60 = (char *)&v54 - v10;
  v11 = __chkstk_darwin(v9);
  v58 = (char *)&v54 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v54 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v54 - v16;
  corelog.getter((uint64_t)&v54 - v16);
  swift_errorRetain(a1);
  v18 = swift_errorRetain(a1);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v55 = v3;
    v22 = v21;
    v23 = swift_slowAlloc(8, -1);
    v57 = v2;
    v24 = (_QWORD *)v23;
    *(_DWORD *)v22 = 134349314;
    v56 = v6;
    swift_getErrorValue(a1, v63, v62);
    v61 = dispatch thunk of Error._code.getter(v62[1], v62[2]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2114;
    swift_errorRetain(a1);
    v25 = _swift_stdlib_bridgeErrorToNSError(a1);
    v61 = v25;
    v6 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v22 + 14, v22 + 22);
    *v24 = v25;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "#WiFi,exceptionHandling,code,%{public}ld,%{public}@", (uint8_t *)v22, 0x16u);
    v26 = sub_1000039AC((uint64_t *)&unk_1003805A0);
    swift_arrayDestroy(v24, 1, v26);
    v27 = v24;
    v2 = v57;
    swift_slowDealloc(v27, -1, -1);
    v28 = v22;
    v3 = v55;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v29 = *(void (**)(char *, uint64_t))(v3 + 8);
  v29(v17, v2);
  swift_getErrorValue(a1, v65, v64);
  v30 = dispatch thunk of Error._code.getter(v64[1], v64[2]);
  if (v30 > 4096)
  {
    if (v30 == 4097)
    {
      v15 = v58;
      v51 = corelog.getter((uint64_t)v58);
      v32 = Logger.logObject.getter(v51);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        v35 = "#WiFi,exceptionHandling,interrupted";
        goto LABEL_18;
      }
      goto LABEL_20;
    }
    if (v30 == 4099)
    {
      v36 = corelog.getter((uint64_t)v15);
      v32 = Logger.logObject.getter(v36);
      v37 = static os_log_type_t.error.getter(v32);
      if (os_log_type_enabled(v32, v37))
      {
        v38 = v2;
        v39 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v39 = 67240192;
        v40 = sub_1002A9084();
        v41 = *v40;
        v42 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*v40 + 160);
        v43 = swift_retain(*v40);
        v44 = v42(v43);
        v45 = v15;
        v46 = v44;
        swift_release(v41);
        v47 = v46 & 1;
        v15 = v45;
        LODWORD(v61) = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, (char *)&v61 + 4, v39 + 4, v39 + 8);
        _os_log_impl((void *)&_mh_execute_header, v32, v37, "#WiFi,exceptionHandling,unloaded,virtual,%{BOOL,public}d", v39, 8u);
        v48 = v39;
        v2 = v38;
LABEL_19:
        swift_slowDealloc(v48, -1, -1);
        goto LABEL_20;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (v30 == 60)
    {
      v15 = v59;
      v50 = corelog.getter((uint64_t)v59);
      v32 = Logger.logObject.getter(v50);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        v35 = "#WiFi,exceptionHandling,timeout";
        goto LABEL_18;
      }
LABEL_20:

      return ((uint64_t (*)(char *, uint64_t))v29)(v15, v2);
    }
    if (v30 == 82)
    {
      v15 = v60;
      v31 = corelog.getter((uint64_t)v60);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        v35 = "#WiFi,exceptionHandling,poweredOff";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v32, v33, v35, v34, 2u);
        v48 = v34;
        goto LABEL_19;
      }
      goto LABEL_20;
    }
  }
  v49 = corelog.getter((uint64_t)v6);
  __chkstk_darwin(v49);
  v53 = 136;
  Logger._fault(_:function:file:line:)(sub_1002A8394, (uint64_t)(&v54 - 4), (uint64_t *)"exceptionHandling(_:)", 21, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreWiFi.swift", 73, 2);
  v15 = v6;
  return ((uint64_t (*)(char *, uint64_t))v29)(v15, v2);
}

uint64_t sub_1002A4FCC(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  void (*v42)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t result;
  char v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  double v59;
  void *v60;
  uint64_t (*v61)();
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t (*v71)();
  __int128 v72;
  double v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  void *v76;
  uint64_t (*v77)();
  id v78;
  void *v79;
  id v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  double v94;
  unsigned int v95;
  id v96;
  id v97;
  id v98;
  id v99;
  unint64_t v100;
  id v101;
  id v102;
  NSObject *v103;
  os_log_type_t v104;
  int v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void ***v110;
  id v111;
  id v112;
  id v113;
  os_log_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  char v119;
  void (*v120)(double *, _QWORD);
  unint64_t *v121;
  unint64_t *v122;
  unint64_t v123;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t (*v131)();
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  id v144;
  id v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  Swift::String v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  _QWORD *v155;
  void *v156;
  uint64_t v157;
  char *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  uint64_t v167;
  uint8_t *v168;
  double v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  os_log_t v181;
  double v182;
  int v183;
  uint64_t v184;
  unsigned int v185;
  id v186;
  unint64_t v187;
  char *v188;
  __int128 v189;
  char *v190;
  void ***p_aBlock;
  unsigned int v192;
  unsigned int v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  char *v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  double v227;
  char v228[8];
  id v229;
  void **aBlock;
  uint64_t v231;
  uint64_t (*v232)(uint64_t);
  void *AssociatedTypeWitness;
  uint64_t (*AssociatedConformanceWitness)();
  _QWORD *v235;

  LODWORD(v224) = a2;
  v217 = type metadata accessor for ALWiFiNotification(0);
  v3 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217);
  v203 = (char *)&v181 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = type metadata accessor for DispatchWorkItemFlags(0);
  v215 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v214 = (char *)&v181 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = type metadata accessor for DispatchQoS(0);
  v212 = *(_QWORD *)(v213 - 8);
  __chkstk_darwin(v213);
  v211 = (char *)&v181 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000039AC((uint64_t *)&unk_100380850);
  __chkstk_darwin(v7);
  v210 = (char *)&v181 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000039AC(&qword_10036E1C0);
  __chkstk_darwin(v9);
  v209 = (char *)&v181 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band(0);
  v197 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v196 = (char *)&v181 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_100380860);
  __chkstk_darwin(v12);
  v195 = (char *)&v181 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v206 = *(_QWORD *)(v207 - 8);
  v14 = __chkstk_darwin(v207);
  v205 = (char *)&v181 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v223 = (char *)&v181 - v16;
  v225 = type metadata accessor for Logger(0);
  v219 = *(_QWORD *)(v225 - 8);
  v17 = __chkstk_darwin(v225);
  v19 = (char *)&v181 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v222 = (uint64_t)&v181 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v181 - v23;
  v25 = __chkstk_darwin(v22);
  v204 = (uint64_t)&v181 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v181 - v27;
  v29 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v29);
  v31 = (char *)&v181 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for ALWiFiScanResult(0);
  v220 = *(_QWORD *)(v32 - 8);
  v221 = v32;
  __chkstk_darwin(v32);
  v34 = (char *)&v181 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a1[3];
  v35 = a1[4];
  sub_1002862D0(a1, v36);
  if (dispatch thunk of Collection.count.getter(v36, *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8)) < 1)
  {
    v46 = corelog.getter((uint64_t)v19);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "#WiFi, empty scan cache batch", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v219 + 8))(v19, v225);
  }
  v37 = machContTimeSec()();
  v39 = ALWiFiScanResult.init()(v38);
  v40.n128_f64[0] = v37;
  ALTimeStamp.init(machContinuousTimeSec:)(v39, v40);
  v41 = type metadata accessor for ALTimeStamp(0);
  v42 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
  v208 = 1;
  v200 = v41;
  v199 = v42;
  ((void (*)(char *, _QWORD, uint64_t))v42)(v31, 0, 1);
  v218 = v34;
  v43 = ALWiFiScanResult._scanTimestamp.setter(v31);
  v44 = v224;
  v194 = v3;
  v201 = v31;
  if ((v224 & 1) != 0)
  {
    v202 = 0;
    v45 = v226;
  }
  else
  {
    v45 = v226;
    v202 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v226 + 200))(v43);
    v208 = v51 & 1;
  }
  corelog.getter((uint64_t)v28);
  sub_1000875F0((uint64_t)a1, (uint64_t)&aBlock);
  v52 = swift_retain(v45);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v55 = swift_slowAlloc(38, -1);
    *(_DWORD *)v55 = 67240960;
    LODWORD(v227) = v44 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, (char *)&v227 + 4, v55 + 4, v55 + 8);
    *(_WORD *)(v55 + 8) = 2050;
    v227 = v37;
    v56 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228, v55 + 10, v55 + 18);
    *(_WORD *)(v55 + 18) = 2050;
    *(double *)&v57 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(_QWORD *)v226 + 224))(v56));
    if ((v58 & 1) != 0)
      v59 = 0.0;
    else
      v59 = *(double *)&v57;
    v227 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228, v55 + 20, v55 + 28);
    swift_release(v226);
    *(_WORD *)(v55 + 28) = 2050;
    v60 = AssociatedTypeWitness;
    v61 = AssociatedConformanceWitness;
    sub_1002862D0(&aBlock, (uint64_t)AssociatedTypeWitness);
    v62 = COERCE_DOUBLE(dispatch thunk of Collection.count.getter(v60, *(_QWORD *)(*((_QWORD *)v61 + 1) + 8)));
    sub_1000187CC(&aBlock);
    v227 = v62;
    v45 = v226;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228, v55 + 30, v55 + 38);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "#WiFi,bg,%{BOOL,public}d,now,%{public}f,last,%{public}llu,size,%{public}ld", (uint8_t *)v55, 0x26u);
    swift_slowDealloc(v55, -1, -1);

  }
  else
  {
    sub_1000187CC(&aBlock);

    swift_release(v45);
  }
  v63 = v225;
  v219 = *(_QWORD *)(v219 + 8);
  ((void (*)(char *, uint64_t))v219)(v28, v225);
  v65 = a1[3];
  v64 = a1[4];
  v66 = sub_1002862D0(a1, v65);
  __chkstk_darwin(v66);
  (*(void (**)(char *))(v68 + 16))((char *)&v181 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 8) + 8) + 8);
  AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness(0, v69, v65, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Iterator);
  AssociatedConformanceWitness = (uint64_t (*)())swift_getAssociatedConformanceWitness(v69, v65, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  sub_100297680(&aBlock);
  dispatch thunk of Sequence.makeIterator()(v65, v69);
  v70 = AssociatedTypeWitness;
  v71 = AssociatedConformanceWitness;
  sub_1002A8438((uint64_t)&aBlock, (uint64_t)AssociatedTypeWitness);
  dispatch thunk of IteratorProtocol.next()(&v227, v70, v71);
  v73 = v227;
  if (v227 == 0.0)
  {
LABEL_38:
    sub_1000187CC(&aBlock);
    v132 = swift_allocBox(v217);
    v134 = v133;
    ALWiFiNotification.init()(v132);
    v135 = type metadata accessor for ALWiFiNotification.NotiType(0);
    v136 = *(_QWORD *)(v135 - 8);
    v137 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.scanCache(_:);
    if ((v224 & 1) == 0)
      v137 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.scan(_:);
    v138 = v209;
    (*(void (**)(char *, _QWORD, uint64_t))(v136 + 104))(v209, *v137, v135);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v138, 0, 1, v135);
    v139 = ALWiFiNotification._type.setter(v138);
    v140 = v201;
    static ALTimeStamp.now()(v139);
    v199(v140, 0, 1, v200);
    ALWiFiNotification._timestamp.setter(v140);
    v142 = v220;
    v141 = v221;
    v143 = v210;
    (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v210, v218, v221);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v142 + 56))(v143, 0, 1, v141);
    ALWiFiNotification._scanResult.setter(v143);
    ALWiFiNotification._associatedMac.setter(v202, v208 & 1);
    ALWiFiNotification._simulated.setter(0);
    ALWiFiNotification._available.setter(1);
    v144 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v145 = objc_msgSend(v144, "bundleIdentifier");

    if (v145)
    {
      v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v145);
      v148 = v147;

    }
    else
    {
      v148 = 0xE100000000000000;
      v146 = 95;
    }
    aBlock = (void **)v146;
    v231 = v148;
    swift_bridgeObjectRetain(v148);
    v149._countAndFlagsBits = 0x6F6E2E696669772ELL;
    v149._object = (void *)0xEA00000000006974;
    String.append(_:)(v149);
    swift_bridgeObjectRelease(v148);
    v150 = v231;
    v151 = String.utf8CString.getter(aBlock, v231);
    swift_bridgeObjectRelease(v150);
    v152 = os_transaction_create(v151 + 32);
    v153 = swift_release(v151);
    v154 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 128))(v153);
    v155 = (_QWORD *)swift_allocObject(&unk_10035B7E0, 40, 7);
    v155[2] = v152;
    v155[3] = v45;
    v155[4] = v132;
    AssociatedConformanceWitness = sub_1002A8494;
    v235 = v155;
    aBlock = _NSConcreteStackBlock;
    v231 = 1107296256;
    v232 = sub_10028B824;
    AssociatedTypeWitness = &unk_10035B7F8;
    v156 = _Block_copy(&aBlock);
    swift_retain(v45);
    v226 = v152;
    swift_unknownObjectRetain(v152);
    v157 = swift_retain(v132);
    v158 = v211;
    static DispatchQoS.unspecified.getter(v157);
    v227 = COERCE_DOUBLE(&_swiftEmptyArrayStorage);
    v159 = sub_1002A13E8();
    v160 = sub_1000039AC((uint64_t *)&unk_100380840);
    v161 = sub_1002A8D3C((unint64_t *)&qword_100381D40, (uint64_t *)&unk_100380840, (uint64_t)&protocol conformance descriptor for [A]);
    v162 = v214;
    v163 = v216;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v227, v160, v161, v216, v159);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v158, v162, v156);
    _Block_release(v156);

    (*(void (**)(char *, uint64_t))(v215 + 8))(v162, v163);
    (*(void (**)(char *, uint64_t))(v212 + 8))(v158, v213);
    swift_release(v235);
    corelog.getter(v222);
    v164 = swift_retain_n(v132, 2);
    v165 = Logger.logObject.getter(v164);
    v166 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v165, v166))
    {
      v167 = swift_slowAlloc(12, -1);
      v224 = v132;
      v168 = (uint8_t *)v167;
      v169 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
      v227 = v169;
      *(_DWORD *)v168 = 136315138;
      v223 = (char *)(v168 + 4);
      swift_beginAccess(v134, &aBlock, 0, 0);
      v170 = v194;
      v171 = v203;
      v172 = v217;
      v173 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v194 + 16))(v203, v134, v217);
      v174 = ALWiFiNotification.description.getter(v173);
      v176 = v175;
      (*(void (**)(char *, uint64_t))(v170 + 8))(v171, v172);
      v229 = (id)sub_10001818C(v174, v176, (uint64_t *)&v227);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &aBlock, v223, v168 + 12);
      v177 = v224;
      swift_release_n(v224, 2);
      swift_bridgeObjectRelease(v176);
      _os_log_impl((void *)&_mh_execute_header, v165, v166, "#WiFi,processResultArray,notif,%s", v168, 0xCu);
      swift_arrayDestroy(*(_QWORD *)&v169, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(*(_QWORD *)&v169, -1, -1);
      swift_slowDealloc(v168, -1, -1);
      swift_unknownObjectRelease(v226);

      ((void (*)(uint64_t, uint64_t))v219)(v222, v225);
      (*(void (**)(char *, uint64_t))(v220 + 8))(v218, v221);
      v178 = v177;
    }
    else
    {
      swift_unknownObjectRelease(v226);
      swift_release_n(v132, 2);

      ((void (*)(uint64_t, uint64_t))v219)(v222, v225);
      (*(void (**)(char *, uint64_t))(v220 + 8))(v218, v221);
      v178 = v132;
    }
    return swift_release(v178);
  }
  p_aBlock = &aBlock;
  v190 = (char *)&v229 + 4;
  v192 = enum case for ALWiFiScanSingleAccessPoint.Band.band5G(_:);
  v193 = enum case for ALWiFiScanSingleAccessPoint.Band.band2G(_:);
  v185 = enum case for ALWiFiScanSingleAccessPoint.Band.unknown(_:);
  *(_QWORD *)&v72 = 134350339;
  v189 = v72;
  v188 = (char *)&type metadata for Any + 8;
  v74 = (void (*)(char *, uint64_t))v219;
  while (1)
  {
    while (1)
    {
      v78 = objc_msgSend(*(id *)&v73, "channel");
      if (!v78)
        goto LABEL_17;
      v79 = v78;
      v80 = objc_msgSend(*(id *)&v73, "BSSID");
      if (v80)
        break;

LABEL_17:
      v75 = corelog.getter((uint64_t)v24);
      __chkstk_darwin(v75);
      v180 = v73;
      v179 = 160;
      Logger._fault(_:function:file:line:)(sub_1002A849C, (uint64_t)&(&v181)[-4], (uint64_t *)"processResultArray(_:bg:)", 25, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreWiFi.swift", 73, 2);

      v74(v24, v63);
      v76 = AssociatedTypeWitness;
      v77 = AssociatedConformanceWitness;
      sub_1002A8438((uint64_t)&aBlock, (uint64_t)AssociatedTypeWitness);
      dispatch thunk of IteratorProtocol.next()(&v227, v76, v77);
      v73 = v227;
      if (v227 == 0.0)
        goto LABEL_38;
    }
    v81 = v80;
    v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    v84 = v83;

    ALWiFiScanSingleAccessPoint.init()(v85);
    swift_bridgeObjectRetain(v84);
    v184 = v82;
    v86 = sub_1002A8918(v82, v84);
    LOBYTE(v81) = v87;
    v187 = v84;
    swift_bridgeObjectRelease(v84);
    ALWiFiScanSingleAccessPoint._mac.setter(v86, v81 & 1);
    result = (uint64_t)objc_msgSend(v79, "channel");
    if (result < (uint64_t)0xFFFFFFFF80000000)
      break;
    if (result > 0x7FFFFFFF)
      goto LABEL_48;
    LOBYTE(v227) = 0;
    ALWiFiScanSingleAccessPoint._channel.setter(result);
    v88 = objc_msgSend(v79, "band");
    v89 = v193;
    if (v88 != 1)
    {
      v89 = v192;
      if (v88 != 2)
        v89 = v185;
    }
    v90 = v197;
    v91 = v196;
    v92 = v198;
    (*(void (**)(char *, uint64_t, uint64_t))(v197 + 104))(v196, v89, v198);
    v93 = v195;
    (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v195, v91, v92);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v93, 0, 1, v92);
    ALWiFiScanSingleAccessPoint._band.setter(v93);
    result = (uint64_t)objc_msgSend(*(id *)&v73, "RSSI");
    if (result < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_49;
    if (result > 0x7FFFFFFF)
      goto LABEL_50;
    LOBYTE(v227) = 0;
    ALWiFiScanSingleAccessPoint._rssidB.setter(result);
    v94 = (double)(unint64_t)objc_msgSend(*(id *)&v73, "timestamp");
    *(float *)&v95 = v37 - NsToSec.getter() * v94;
    LOBYTE(v227) = 0;
    ALWiFiScanSingleAccessPoint._ageSec.setter(v95);
    corelog.getter(v204);
    v96 = *(id *)&v73;
    v97 = v79;
    v98 = v96;
    v99 = v97;
    v100 = v187;
    swift_bridgeObjectRetain(v187);
    v101 = v98;
    v102 = v99;
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.info.getter();
    v105 = v104;
    v106 = os_log_type_enabled(v103, v104);
    v186 = v102;
    if (v106)
    {
      v107 = swift_slowAlloc(58, -1);
      v183 = v105;
      v108 = v107;
      v182 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
      v227 = v182;
      *(_DWORD *)v108 = v189;
      v181 = v103;
      v229 = objc_msgSend(v101, "timestamp");
      v109 = v100;
      v110 = p_aBlock;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, p_aBlock, v108 + 4, v108 + 12);

      *(_WORD *)(v108 + 12) = 2050;
      v111 = objc_msgSend(v101, "age");

      v229 = v111;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v110, v108 + 14, v108 + 22);

      *(_WORD *)(v108 + 22) = 2081;
      swift_bridgeObjectRetain(v109);
      v229 = (id)sub_10001818C(v184, v109, (uint64_t *)&v227);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v110, v108 + 24, v108 + 32);
      swift_bridgeObjectRelease_n(v109, 3);
      *(_WORD *)(v108 + 32) = 1026;
      LODWORD(v109) = objc_msgSend(v102, "band");

      LODWORD(v229) = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v190, v108 + 34, v108 + 38);

      *(_WORD *)(v108 + 38) = 2050;
      v112 = objc_msgSend(v102, "channel");

      v229 = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v110, v108 + 40, v108 + 48);

      *(_WORD *)(v108 + 48) = 2050;
      v113 = objc_msgSend(v101, "RSSI");

      v229 = v113;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v110, v108 + 50, v108 + 58);

      v114 = v181;
      _os_log_impl((void *)&_mh_execute_header, v181, (os_log_type_t)v183, "#WiFi,scan,ts,%{public}llu,age,%{public}ld,mac,%{private}s,band,%{public}u,chan,%{public}ld,rssi,%{public}ld", (uint8_t *)v108, 0x3Au);
      v115 = v182;
      swift_arrayDestroy(*(_QWORD *)&v182, 1, v188);
      swift_slowDealloc(*(_QWORD *)&v115, -1, -1);
      swift_slowDealloc(v108, -1, -1);

      v116 = v204;
      v117 = v225;
    }
    else
    {

      swift_bridgeObjectRelease_n(v100, 2);
      v116 = v204;
      v117 = v63;
    }
    ((void (*)(uint64_t, uint64_t))v219)(v116, v117);
    v45 = v226;
    if ((v224 & 1) != 0)
    {
      v118 = objc_msgSend(v101, "wasConnectedDuringSleep");
      if ((_DWORD)v118)
      {
        v202 = ALWiFiScanSingleAccessPoint._mac.getter(v118);
        v208 = v119 & 1;
      }
    }
    (*(void (**)(char *, char *, uint64_t))(v206 + 16))(v205, v223, v207);
    v120 = (void (*)(double *, _QWORD))ALWiFiScanResult._accessPoints.modify(&v227);
    v122 = v121;
    v123 = *v121;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v121);
    *v122 = v123;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v123 = sub_1002874F4(0, *(_QWORD *)(v123 + 16) + 1, 1, v123);
      *v122 = v123;
    }
    v126 = *(_QWORD *)(v123 + 16);
    v125 = *(_QWORD *)(v123 + 24);
    if (v126 >= v125 >> 1)
    {
      v123 = sub_1002874F4(v125 > 1, v126 + 1, 1, v123);
      *v122 = v123;
    }
    *(_QWORD *)(v123 + 16) = v126 + 1;
    v127 = v206;
    v128 = v123
         + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80))
         + *(_QWORD *)(v127 + 72) * v126;
    v129 = v207;
    (*(void (**)(unint64_t, char *, uint64_t))(v206 + 32))(v128, v205, v207);
    v120(&v227, 0);

    (*(void (**)(char *, uint64_t))(v127 + 8))(v223, v129);
    v130 = AssociatedTypeWitness;
    v131 = AssociatedConformanceWitness;
    sub_1002A8438((uint64_t)&aBlock, (uint64_t)AssociatedTypeWitness);
    dispatch thunk of IteratorProtocol.next()(&v227, v130, v131);
    v73 = v227;
    v63 = v225;
    v74 = (void (*)(char *, uint64_t))v219;
    if (v227 == 0.0)
      goto LABEL_38;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_1002A64F0(uint64_t a1, unint64_t a2)
{
  return sub_1002A8918(a1, a2);
}

uint64_t sub_1002A6508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];
  uint64_t v34;
  _BYTE v35[24];

  v4 = type metadata accessor for Logger(0);
  v31 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ALWiFiNotification(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_projectBox(a2);
  swift_beginAccess(v11, v35, 0, 0);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v12(v10, v11, v7);
  (*(void (**)(char *))(*(_QWORD *)a1 + 312))(v10);
  v13 = *(void (**)(char *, uint64_t))(v8 + 8);
  v13(v10, v7);
  corelog.getter((uint64_t)v6);
  v30 = a2;
  v14 = swift_retain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v34 = v28;
    v29 = v4;
    *(_DWORD *)v17 = 136315138;
    v18 = v17 + 12;
    v26 = v17 + 4;
    v27 = v17;
    swift_beginAccess(v11, v33, 0, 0);
    v19 = ((uint64_t (*)(char *, uint64_t, uint64_t))v12)(v10, v11, v7);
    v20 = ALWiFiNotification.description.getter(v19);
    v22 = v21;
    v13(v10, v7);
    v32 = sub_10001818C(v20, v22, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v26, v18);
    swift_release_n(v30, 2);
    swift_bridgeObjectRelease(v22);
    v23 = v27;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "#WiFi,_onData,notif,%s", v27, 0xCu);
    v24 = v28;
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v6, v29);
  }
  else
  {

    swift_release_n(v30, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v6, v4);
  }
}

uint64_t sub_1002A67B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;

  v3 = type metadata accessor for Logger(0);
  v4 = __chkstk_darwin(v3);
  v5 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152))(v4);
  v7 = v6;
  v5(a1);
  return swift_release(v7);
}

uint64_t sub_1002A68E8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1002A8918(a1, a2);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 208))(v9, v10 & 1);
  corelog.getter((uint64_t)v8);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v20 = v5;
    v14 = swift_slowAlloc(12, -1);
    v19 = v6;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v22 = v16;
    *(_DWORD *)v15 = 136315138;
    if (a2)
    {
      v17 = a2;
    }
    else
    {
      a1 = 1953722220;
      v17 = 0xE400000000000000;
    }
    swift_bridgeObjectRetain(a2);
    v21 = sub_10001818C(a1, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "#WiFi,updateAssociatedMac,%s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v8, v20);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_1002A6AF0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  uint8_t *v32;
  void (*v33)(char *, uint64_t);
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint8_t *v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  uint8_t *v55;
  uint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  id v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v3 = v2;
  v4 = v1;
  v62 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v62 - 8);
  v7 = __chkstk_darwin(v62);
  v61 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v55 - v9;
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v12 = objc_msgSend(v11, "bundleIdentifier");

  if (v12)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

  }
  else
  {
    v15 = 0xE100000000000000;
    v13 = 95;
  }
  v63 = (id)v13;
  v64 = v15;
  swift_bridgeObjectRetain(v15);
  v16._countAndFlagsBits = 0x76652E696669772ELL;
  v16._object = (void *)0xEB00000000746E65;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v15);
  v17 = v64;
  v18 = String.utf8CString.getter(v63, v64);
  swift_bridgeObjectRelease(v17);
  v19 = os_transaction_create(v18 + 32);
  swift_release(v18);
  corelog.getter((uint64_t)v10);
  v20 = a1;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v60 = v2;
    v23 = swift_slowAlloc(12, -1);
    v59 = v4;
    v24 = (uint8_t *)v23;
    v57 = (id)swift_slowAlloc(32, -1);
    v63 = v57;
    v58 = v10;
    *(_DWORD *)v24 = 136446210;
    v55 = v24 + 4;
    v25 = objc_msgSend(v20, "description");
    v26 = v19;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v56 = v6;
    v29 = v28;

    v3 = v60;
    v30 = v27;
    v19 = v26;
    v65 = sub_10001818C(v30, v29, (uint64_t *)&v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v55, v24 + 12);

    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "#WiFi, received event %{public}s", v24, 0xCu);
    v31 = v57;
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    v32 = v24;
    v4 = v59;
    swift_slowDealloc(v32, -1, -1);

    v33 = *(void (**)(char *, uint64_t))(v56 + 8);
    v33(v58, v62);
  }
  else
  {

    v33 = *(void (**)(char *, uint64_t))(v6 + 8);
    v33(v10, v62);
  }
  v34 = objc_msgSend(v20, "type");
  if (v34 == (id)37)
  {
    (*(void (**)(void))(*(_QWORD *)v4 + 336))();
  }
  else if (v34 == (id)5)
  {
    v42 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 248))();
    if (v42)
    {
      v43 = v42;
      v44 = sub_100004194();
      (*(void (**)(_QWORD))(*(_QWORD *)v43 + 176))(v44 & 1);
      swift_release(v43);
    }
  }
  else if (v34 == (id)3)
  {
    v35 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 248))();
    if (v35)
    {
      v36 = v35;
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 176))(1);
      v35 = swift_release(v36);
    }
    v37 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v35);
    v38 = v37;
    if (v37)
    {
      v39 = objc_msgSend(v37, "BSSID");

      if (v39)
      {
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v38 = v41;

      }
      else
      {
        v40 = 0;
        v38 = 0;
      }
    }
    else
    {
      v40 = 0;
    }
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v4 + 320))(v40, v38);
    swift_bridgeObjectRelease(v38);
  }
  else
  {
    corelog.getter((uint64_t)v61);
    v45 = v20;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = v3;
      v49 = v48;
      v50 = v19;
      *(_DWORD *)v48 = 134349056;
      v51 = v48 + 12;
      v52 = v48 + 4;
      v63 = -[NSObject type](v45, "type");
      v53 = v51;
      v19 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v52, v53);

      _os_log_impl((void *)&_mh_execute_header, v46, v47, "#WiFi,unhandled,evtType,%{public}ld", v49, 0xCu);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {

      v46 = v45;
    }

    v33(v61, v62);
  }
  return swift_unknownObjectRelease(v19);
}

uint64_t sub_1002A7008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  Swift::Int v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::Int v72;
  Swift::Int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Swift::Int v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD v100[3];
  uint64_t v101;
  uint64_t v102;
  char v103[24];
  Swift::Int v104[2];

  v99 = type metadata accessor for Logger(0);
  v91 = *(_QWORD *)(v99 - 8);
  v1 = __chkstk_darwin(v99);
  v3 = (char *)&v85 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v1);
  v97 = (uint64_t)&v85 - v5;
  v6 = __chkstk_darwin(v4);
  v96 = (uint64_t)&v85 - v7;
  v8 = __chkstk_darwin(v6);
  v95 = (uint64_t)&v85 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v85 - v11;
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 176);
  v90 = v0;
  v14 = (void *)v13(v10);
  if (!v14
    || (v15 = v14,
        v16 = objc_msgSend(v14, "backgroundScanCache"),
        v15,
        !v16))
  {
    v62 = corelog.getter((uint64_t)v3);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "processBackgroundScanCache,backgroundScanCache,nil", v65, 2u);
      swift_slowDealloc(v65, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v3, v99);
  }
  v17 = sub_10029FFB8(0, &qword_100381DB0, CWFScanResult_ptr);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  v19 = (unint64_t)v18 >> 62;
  if ((unint64_t)v18 >> 62)
    goto LABEL_86;
  v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v20)
  {
LABEL_90:
    swift_bridgeObjectRelease(v18);
    v81 = corelog.getter((uint64_t)v12);
    v82 = Logger.logObject.getter(v81);
    v83 = static os_log_type_t.error.getter(v82);
    if (os_log_type_enabled(v82, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "processBackgroundScanCache,empty", v84, 2u);
      swift_slowDealloc(v84, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v12, v99);
  }
LABEL_5:
  v89 = v19;
  v104[0] = 0;
  v21 = v18 & 0xC000000000000001;
  swift_bridgeObjectRetain(v18);
  swift_beginAccess(v104, v103, 1, 0);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v94 = v18 + 32;
  if (v18 < 0)
    v26 = v18;
  else
    v26 = v18 & 0xFFFFFFFFFFFFFF8;
  v88 = v26;
  v92 = v18 & 0xFFFFFFFFFFFFFF8;
  v86 = (v18 & 0xFFFFFFFFFFFFFF8) + 32;
  *(_QWORD *)&v22 = 134349312;
  v85 = v22;
  *(_QWORD *)&v22 = 138477827;
  v87 = v22;
  v98 = v18 & 0xC000000000000001;
  v93 = v20;
  do
  {
    if (v21)
      v27 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v18);
    else
      v27 = (char *)*(id *)(v94 + 8 * v23);
    v12 = v27;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      if (v18 < 0)
        v80 = v18;
      else
        v80 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      v20 = _CocoaArrayWrapper.endIndex.getter(v80);
      swift_bridgeObjectRelease(v18);
      if (!v20)
        goto LABEL_90;
      goto LABEL_5;
    }
    if (v23)
    {
      v28 = (unint64_t)objc_msgSend(v27, "timestamp");
      if ((v28 & 0x8000000000000000) != 0)
        goto LABEL_79;
      v29 = v28;
      v19 = v23 - 1;
      if (v21)
      {
        v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 1, v18);
      }
      else
      {
        if ((unint64_t)v19 >= *(_QWORD *)(v92 + 16))
          goto LABEL_84;
        v30 = *(id *)(v94 + 8 * v19);
      }
      v31 = v30;
      v32 = (unint64_t)objc_msgSend(v30, "timestamp", (_QWORD)v85, *((_QWORD *)&v85 + 1));

      if ((v32 & 0x8000000000000000) != 0)
        goto LABEL_80;
      v33 = v29 - v32;
      if ((uint64_t)(v29 - v32) < 0)
        v33 = v32 - v29;
      if (v33 > 0x773593FF)
      {
        v34 = corelog.getter(v95);
        v35 = Logger.logObject.getter(v34);
        v36 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = swift_slowAlloc(22, -1);
          *(_DWORD *)v37 = v85;
          *(_QWORD *)(v37 + 4) = v23;
          *(_WORD *)(v37 + 12) = 2050;
          *(_QWORD *)(v37 + 14) = v104[0];
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "processBackgroundScanCache,newGroup,idx,%{public}ld,start,%{public}ld", (uint8_t *)v37, 0x16u);
          swift_slowDealloc(v37, -1, -1);
        }

        v38 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
        v38(v95, v99);
        corelog.getter(v96);
        v39 = swift_bridgeObjectRetain_n(v18, 2);
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v40, v41))
        {
          v42 = swift_slowAlloc(12, -1);
          v43 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v42 = v87;
          if (v98)
            v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 1, v18);
          else
            v44 = *(id *)(v94 + 8 * v19);
          *(_QWORD *)(v42 + 4) = v44;
          *v43 = v44;
          swift_bridgeObjectRelease_n(v18, 2);
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "processBackgroundScanCache,newGroup,pre,%{private}@", (uint8_t *)v42, 0xCu);
          v45 = sub_1000039AC((uint64_t *)&unk_1003805A0);
          swift_arrayDestroy(v43, 1, v45);
          swift_slowDealloc(v43, -1, -1);
          swift_slowDealloc(v42, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v18, 2);
        }
        v38(v96, v99);
        corelog.getter(v97);
        v12 = v12;
        v46 = Logger.logObject.getter(v12);
        v47 = static os_log_type_t.info.getter();
        v19 = v47;
        v48 = os_log_type_enabled(v46, v47);
        v21 = v98;
        if (v48)
        {
          v49 = swift_slowAlloc(12, -1);
          v50 = (char **)swift_slowAlloc(8, -1);
          *(_DWORD *)v49 = v87;
          *(_QWORD *)(v49 + 4) = v12;
          *v50 = v12;
          _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v19, "processBackgroundScanCache,newGroup,new,%{private}@", (uint8_t *)v49, 0xCu);
          v51 = sub_1000039AC((uint64_t *)&unk_1003805A0);
          swift_arrayDestroy(v50, 1, v51);
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(v49, -1, -1);
        }
        else
        {

          v46 = v12;
        }

        v38(v97, v99);
        v52 = v104[0];
        if (v23 < v104[0])
          goto LABEL_81;
        v53 = v89;
        if (v89)
        {
          swift_bridgeObjectRetain(v18);
          v19 = _CocoaArrayWrapper.endIndex.getter(v88);
          swift_bridgeObjectRelease(v18);
        }
        else
        {
          v19 = *(_QWORD *)(v92 + 16);
        }
        if (v19 < v52)
          goto LABEL_82;
        if (v52 < 0)
          goto LABEL_83;
        if (v21 && v52 != v23)
        {
          if (v52 >= v23)
            goto LABEL_85;
          v54 = v52;
          do
          {
            v55 = v54 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v54);
            v54 = v55;
          }
          while (v23 != v55);
        }
        if (v53)
        {
          swift_bridgeObjectRetain(v18);
          v56 = _CocoaArrayWrapper.subscript.getter(v52, v23, v88);
          v57 = v58;
          v52 = v59;
          v19 = v60;
          swift_bridgeObjectRelease(v18);
        }
        else
        {
          v19 = (2 * v23) | 1;
          swift_bridgeObjectRetain(v18);
          v56 = v92;
          v57 = v86;
        }
        v101 = sub_1000039AC(&qword_100381DB8);
        v102 = sub_1002A8D3C(&qword_100381DC0, &qword_100381DB8, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
        v61 = (_QWORD *)swift_allocObject(&unk_10035B830, 48, 7);
        v100[0] = v61;
        v61[2] = v56;
        v61[3] = v57;
        v61[4] = v52;
        v61[5] = v19;
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)v90 + 304))(v100, 1);

        sub_1000187CC(v100);
        v104[0] = v23;
        v24 = v23;
        v25 = v23;
        v20 = v93;
      }
      else
      {

        v21 = v98;
        v20 = v93;
      }
    }
    else
    {

    }
    ++v23;
  }
  while (v23 != v20);
  result = swift_bridgeObjectRelease(v18);
  if (v89)
  {
    swift_bridgeObjectRetain(v18);
    v68 = _CocoaArrayWrapper.endIndex.getter(v88);
    result = swift_bridgeObjectRelease(v18);
    v67 = v92;
    if (v25 >= v68)
      return swift_bridgeObjectRelease(v18);
  }
  else
  {
    v67 = v92;
    v68 = *(_QWORD *)(v92 + 16);
    if (v25 >= v68)
      return swift_bridgeObjectRelease(v18);
  }
  if (v68 < v24)
  {
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  v69 = v89;
  if (v89)
  {
    swift_bridgeObjectRetain(v18);
    v70 = _CocoaArrayWrapper.endIndex.getter(v88);
    result = swift_bridgeObjectRelease(v18);
  }
  else
  {
    v70 = *(_QWORD *)(v67 + 16);
  }
  if (v70 < v24)
    goto LABEL_94;
  if (v24 < 0)
  {
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  if (v69)
  {
    swift_bridgeObjectRetain(v18);
    v71 = _CocoaArrayWrapper.endIndex.getter(v88);
    result = swift_bridgeObjectRelease(v18);
  }
  else
  {
    v71 = *(_QWORD *)(v67 + 16);
  }
  if (v71 < v68)
    goto LABEL_96;
  if (!v21 || v24 == v68)
    goto LABEL_74;
  if (v24 >= (unint64_t)v68)
  {
LABEL_97:
    __break(1u);
    return result;
  }
  v72 = v24;
  do
  {
    v73 = v72 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v72);
    v72 = v73;
  }
  while (v68 != v73);
LABEL_74:
  if (v69)
  {
    swift_bridgeObjectRetain(v18);
    v67 = _CocoaArrayWrapper.subscript.getter(v24, v68, v88);
    v75 = v76;
    v24 = v77;
    v74 = v78;
    swift_bridgeObjectRelease_n(v18, 2);
  }
  else
  {
    v74 = (2 * v68) | 1;
    v75 = v86;
  }
  v101 = sub_1000039AC(&qword_100381DB8);
  v102 = sub_1002A8D3C(&qword_100381DC0, &qword_100381DB8, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
  v79 = (_QWORD *)swift_allocObject(&unk_10035B830, 48, 7);
  v100[0] = v79;
  v79[2] = v67;
  v79[3] = v75;
  v79[4] = v24;
  v79[5] = v74;
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)v90 + 304))(v100, 1);
  return sub_1000187CC(v100);
}

void sub_1002A7A08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  Class isa;
  uint64_t v27;
  char v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint8_t *v32;
  uint64_t v33;
  NSObject *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t);
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  NSObject *v54;
  uint64_t v55;
  uint8_t *v56;
  uint8_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD v65[4];
  char v66[72];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v59 - v7;
  v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v10 = objc_msgSend(v9, "bundleIdentifier");

  if (v10)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

  }
  else
  {
    v13 = 0xE100000000000000;
    v11 = 95;
  }
  v64 = v11;
  v65[0] = v13;
  swift_bridgeObjectRetain(v13);
  v14._object = (void *)0x80000001003062B0;
  v14._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  v15 = v65[0];
  v16 = String.utf8CString.getter(v64, v65[0]);
  swift_bridgeObjectRelease(v15);
  v17 = os_transaction_create(v16 + 32);
  swift_release(v16);
  v18 = objc_msgSend(objc_allocWithZone((Class)CWFScanParameters), "init");
  -[NSObject setScanType:](v18, "setScanType:", 3);
  -[NSObject setIncludeHiddenNetworks:](v18, "setIncludeHiddenNetworks:", 1);
  v19 = sub_1000039AC(&qword_100381DC8);
  inited = swift_initStackObject(v19, v66);
  *(_OWORD *)(inited + 16) = xmmword_1002EFB30;
  *(NSNumber *)(inited + 32) = Int._bridgeToObjectiveC()();
  *(NSNumber *)(inited + 40) = Int._bridgeToObjectiveC()();
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(NSNumber *)(inited + 56) = Int._bridgeToObjectiveC()();
  *(NSNumber *)(inited + 64) = Int._bridgeToObjectiveC()();
  v64 = inited;
  specialized Array._endMutation()();
  v21 = v64;
  if ((unint64_t)v64 >> 62)
  {
    if (v64 < 0)
      v24 = v64;
    else
      v24 = v64 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v64);
    v25 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(v21);
    if (v25)
      goto LABEL_6;
  }
  else if (*(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_6:
    sub_1002A85BC(v21);
    v23 = v22;
    goto LABEL_12;
  }
  v23 = &_swiftEmptySetSingleton;
LABEL_12:
  swift_bridgeObjectRelease(v21);
  sub_10029FFB8(0, (unint64_t *)&qword_100381DD0, NSNumber_ptr);
  sub_1002A8C68();
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  -[NSObject setIncludeProperties:](v18, "setIncludeProperties:", isa);

  v27 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 224))();
  if ((v28 & 1) == 0)
  {
    if (v27 == -1)
    {
      __break(1u);
      goto LABEL_31;
    }
    -[NSObject setMinimumTimestamp:](v18, "setMinimumTimestamp:", v27 + 1);
  }
  corelog.getter((uint64_t)v8);
  v18 = v18;
  v63 = v8;
  v29 = Logger.logObject.getter(v18);
  v30 = static os_log_type_t.default.getter(v29);
  v31 = os_log_type_enabled(v29, v30);
  v62 = v6;
  if (v31)
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(8, -1);
    v61 = v17;
    v59 = (_QWORD *)v33;
    *(_DWORD *)v32 = 138543362;
    v60 = v3;
    v64 = (uint64_t)v18;
    v34 = v18;
    v3 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v32 + 4, v32 + 12);
    v35 = v59;
    *v59 = v18;

    _os_log_impl((void *)&_mh_execute_header, v29, v30, "#WiFi,.scanCacheUpdated,param,%{public}@", v32, 0xCu);
    v36 = sub_1000039AC((uint64_t *)&unk_1003805A0);
    swift_arrayDestroy(v35, 1, v36);
    v17 = v61;
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {

    v29 = v18;
  }

  v37 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v38 = v37(v63, v2);
  v39 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 176))(v38);
  if (!v39)
  {
    swift_unknownObjectRelease(v17);

    return;
  }
  v40 = v39;
  v64 = 0;
  v41 = objc_msgSend(v39, "performScanWithParameters:error:", v18, &v64);

  v42 = (id)v64;
  if (!v41)
  {
    v48 = (id)v64;
    v49 = _convertNSErrorToError(_:)(v42);

    swift_willThrow();
    v50 = (uint64_t)v62;
    v51 = corelog.getter((uint64_t)v62);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.default.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = v18;
      v55 = v50;
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "#WiFi,fectchScanUpdate,catch", v56, 2u);
      v57 = v56;
      v50 = v55;
      v18 = v54;
      swift_slowDealloc(v57, -1, -1);
    }

    v37((char *)v50, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 296))(v49);

    swift_errorRelease(v49);
    goto LABEL_37;
  }
  v43 = sub_10029FFB8(0, &qword_100381DB0, CWFScanResult_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v43);
  v44 = v42;

  if (!((unint64_t)v3 >> 62))
  {
    v45 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v3);
    if (v45)
      goto LABEL_22;
    goto LABEL_35;
  }
LABEL_31:
  if (v3 < 0)
    v58 = v3;
  else
    v58 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  if (_CocoaArrayWrapper.endIndex.getter(v58))
  {
LABEL_22:
    if ((v3 & 0xC000000000000001) != 0)
    {
      v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
    }
    else
    {
      if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
        __break(1u);
      v46 = *(id *)(v3 + 32);
    }
    v47 = v46;
    swift_bridgeObjectRelease(v3);
    (*(void (**)(id, _QWORD))(*(_QWORD *)v1 + 232))(objc_msgSend(v47, "timestamp"), 0);

    goto LABEL_36;
  }
LABEL_35:
  swift_bridgeObjectRelease(v3);
LABEL_36:
  v65[2] = sub_1000039AC(&qword_100381DE0);
  v65[3] = sub_1002A8CC0();
  v64 = v3;
  (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)v1 + 304))(&v64, 0);

  sub_1000187CC(&v64);
LABEL_37:
  swift_unknownObjectRelease(v17);
}

uint64_t sub_1002A80D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 80));
  return v0;
}

uint64_t sub_1002A810C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocClassInstance(v0, 88, 7);
}

unsigned __int8 *sub_1002A8148(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_10029CA28(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_10029C7AC(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

uint64_t sub_1002A822C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  id v7;
  uint64_t *v8;
  uint64_t v9;
  void (*v10)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v17;
  char v18;

  v4 = v3;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 56) = 1;
  *(_QWORD *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 72) = 1;
  *(_QWORD *)(v4 + 80) = 0;
  v6 = (uint64_t *)(v4 + 80);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  v7 = a1;
  swift_retain(a3);
  v8 = sub_1002A951C();
  v9 = *v8;
  v10 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v8 + 112);
  swift_retain(*v8);
  v10(&v17, 0xD000000000000020, 0x80000001003063D0, &type metadata for Double);
  swift_release(v9);
  if (v18)
    v11 = 3.0;
  else
    v11 = v17;
  type metadata accessor for ALDebounce();
  v12 = v7;
  swift_retain(v4);
  v13 = sub_1002A03E0(v12, (uint64_t)sub_1002A8E98, v4, v11);
  swift_beginAccess(v4 + 80, &v17, 1, 0);
  v14 = *v6;
  *v6 = v13;
  v15 = swift_release(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 280))(v15);
  return v4;
}

uint64_t sub_1002A8368(void *a1)
{
  uint64_t v1;

  return sub_1002A432C(a1, v1);
}

uint64_t sub_1002A8370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002A8380(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1002A8388()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t sub_1002A8394()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v6;
  _QWORD v7[2];

  v1 = *(_QWORD *)(v0 + 16);
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v2._object = (void *)0x8000000100306380;
  v2._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v2);
  v6 = v1;
  v3 = sub_1000039AC(&qword_100380878);
  _print_unlocked<A, B>(_:_:)(&v6, v7, v3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  return v7[0];
}

uint64_t sub_1002A8438(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1002A8460()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002A8494()
{
  uint64_t v0;

  return sub_1002A6508(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1002A849C()
{
  uint64_t v0;
  int v1;
  void *v2;
  Swift::String v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  _StringGuts.grow(_:)(48);
  v3._countAndFlagsBits = 0x47422C6946695723;
  v3._object = (void *)0xE90000000000002CLL;
  String.append(_:)(v3);
  if (v1)
    v4 = 1702195828;
  else
    v4 = 0x65736C6166;
  if (v1)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE500000000000000;
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v5);
  v7._object = (void *)0x8000000100306350;
  v7._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v7);
  v8 = objc_msgSend(v2, "description");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.append(_:)(v13);
  return 0;
}

void sub_1002A85BC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  id v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = a1;
  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_1000039AC(&qword_100381FA0);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (v1 < 0)
        v7 = v1;
      else
        v7 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(v1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = (char *)(v4 + 7);
  v45 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v9 = 0;
    v43 = v1;
    while (1)
    {
      while (1)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
        v11 = __OFADD__(v9++, 1);
        if (v11)
        {
          __break(1u);
          goto LABEL_42;
        }
        v12 = v10;
        v13 = NSObject._rawHashValue(seed:)(v4[5]);
        v14 = -1 << *((_BYTE *)v4 + 32);
        v15 = v13 & ~v14;
        v16 = v15 >> 6;
        v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
        v18 = 1 << v15;
        if (((1 << v15) & v17) != 0)
          break;
LABEL_26:
        *(_QWORD *)&v8[8 * v16] = v18 | v17;
        *(_QWORD *)(v4[6] + 8 * v15) = v12;
        v24 = v4[2];
        v11 = __OFADD__(v24, 1);
        v25 = v24 + 1;
        if (v11)
          goto LABEL_43;
        v4[2] = v25;
        if (v9 == v5)
          return;
      }
      sub_10029FFB8(0, (unint64_t *)&qword_100381DD0, NSNumber_ptr);
      v19 = *(id *)(v4[6] + 8 * v15);
      v20 = static NSObject.== infix(_:_:)();

      if ((v20 & 1) == 0)
      {
        v21 = ~v14;
        while (1)
        {
          v15 = (v15 + 1) & v21;
          v16 = v15 >> 6;
          v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
          v18 = 1 << v15;
          if ((v17 & (1 << v15)) == 0)
            break;
          v22 = *(id *)(v4[6] + 8 * v15);
          v23 = static NSObject.== infix(_:_:)();

          if ((v23 & 1) != 0)
            goto LABEL_17;
        }
        v1 = v43;
        v5 = v45;
        goto LABEL_26;
      }
LABEL_17:
      swift_unknownObjectRelease(v12);
      v1 = v43;
      v5 = v45;
      if (v9 == v45)
        return;
    }
  }
  v26 = 0;
  v42 = v1 + 32;
  v44 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v26 != v44)
  {
    v27 = v4[5];
    v28 = *(id *)(v42 + 8 * v26);
    v29 = NSObject._rawHashValue(seed:)(v27);
    v30 = -1 << *((_BYTE *)v4 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
    v34 = 1 << v31;
    if (((1 << v31) & v33) != 0)
    {
      sub_10029FFB8(0, (unint64_t *)&qword_100381DD0, NSNumber_ptr);
      v35 = *(id *)(v4[6] + 8 * v31);
      v36 = static NSObject.== infix(_:_:)();

      if ((v36 & 1) != 0)
      {
LABEL_30:

        goto LABEL_31;
      }
      v37 = ~v30;
      while (1)
      {
        v31 = (v31 + 1) & v37;
        v32 = v31 >> 6;
        v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
        v34 = 1 << v31;
        if ((v33 & (1 << v31)) == 0)
          break;
        v38 = *(id *)(v4[6] + 8 * v31);
        v39 = static NSObject.== infix(_:_:)();

        if ((v39 & 1) != 0)
          goto LABEL_30;
      }
    }
    *(_QWORD *)&v8[8 * v32] = v34 | v33;
    *(_QWORD *)(v4[6] + 8 * v31) = v28;
    v40 = v4[2];
    v11 = __OFADD__(v40, 1);
    v41 = v40 + 1;
    if (v11)
      goto LABEL_44;
    v4[2] = v41;
LABEL_31:
    if (++v26 == v45)
      return;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

uint64_t sub_1002A8918(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 v17;
  BOOL v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 v22;
  uint64_t *v23;
  int v24;
  unsigned __int8 v25;
  char v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  if (!a2)
    return 0;
  v30 = a1;
  v31 = a2;
  v28 = 58;
  v29 = 0xE100000000000000;
  v27[0] = 0;
  v27[1] = 0xE000000000000000;
  v3 = sub_1002A8D9C();
  v4 = sub_1002A8DE0();
  swift_bridgeObjectRetain(a2);
  RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)(&v28, v27, 0x7FFFFFFFFFFFFFFFLL, &type metadata for String, &type metadata for String, &type metadata for String, v3, v4, v4, &protocol witness table for Character);
  result = v30;
  v6 = v31;
  v7 = HIBYTE(v31) & 0xF;
  v8 = v30 & 0xFFFFFFFFFFFFLL;
  if ((v31 & 0x2000000000000000) != 0)
    v9 = HIBYTE(v31) & 0xF;
  else
    v9 = v30 & 0xFFFFFFFFFFFFLL;
  if (!v9)
  {
    swift_bridgeObjectRelease(v31);
    return 0;
  }
  if ((v31 & 0x1000000000000000) == 0)
  {
    if ((v31 & 0x2000000000000000) == 0)
    {
      if ((v30 & 0x1000000000000000) != 0)
        v10 = (unsigned __int8 *)((v31 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v30, v31);
      v11 = (unint64_t)sub_10029C7AC(v10, v8, 16);
      v13 = v12 & 1;
      goto LABEL_48;
    }
    v28 = v30;
    v29 = v31 & 0xFFFFFFFFFFFFFFLL;
    if (v30 == 43)
    {
      if (v7)
      {
        v19 = v7 - 1;
        if (v19)
        {
          v11 = 0;
          v20 = (unsigned __int8 *)&v28 + 1;
          while (1)
          {
            v21 = *v20;
            v22 = v21 - 48;
            if ((v21 - 48) >= 0xA)
            {
              if ((v21 - 65) < 6)
              {
                v22 = v21 - 55;
              }
              else
              {
                if ((v21 - 97) > 5)
                  goto LABEL_47;
                v22 = v21 - 87;
              }
            }
            if (v11 >> 60)
              break;
            v11 = 16 * v11 + v22;
            ++v20;
            if (!--v19)
            {
LABEL_46:
              v13 = 0;
              goto LABEL_48;
            }
          }
        }
        goto LABEL_47;
      }
    }
    else
    {
      if (v30 != 45)
      {
        if (v7)
        {
          v11 = 0;
          v23 = &v28;
          while (1)
          {
            v24 = *(unsigned __int8 *)v23;
            v25 = v24 - 48;
            if ((v24 - 48) >= 0xA)
            {
              if ((v24 - 65) < 6)
              {
                v25 = v24 - 55;
              }
              else
              {
                if ((v24 - 97) > 5)
                  goto LABEL_47;
                v25 = v24 - 87;
              }
            }
            if (v11 >> 60)
              break;
            v11 = 16 * v11 + v25;
            v23 = (uint64_t *)((char *)v23 + 1);
            if (!--v7)
              goto LABEL_46;
          }
        }
        goto LABEL_47;
      }
      if (v7)
      {
        v14 = v7 - 1;
        if (v14)
        {
          v11 = 0;
          v15 = (unsigned __int8 *)&v28 + 1;
          while (1)
          {
            v16 = *v15;
            v17 = v16 - 48;
            if ((v16 - 48) >= 0xA)
            {
              if ((v16 - 65) < 6)
              {
                v17 = v16 - 55;
              }
              else
              {
                if ((v16 - 97) > 5)
                  break;
                v17 = v16 - 87;
              }
            }
            if (v11 >> 60)
              break;
            v18 = 16 * v11 >= v17;
            v11 = 16 * v11 - v17;
            if (!v18)
              break;
            ++v15;
            if (!--v14)
              goto LABEL_46;
          }
        }
LABEL_47:
        v11 = 0;
        v13 = 1;
        goto LABEL_48;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v11 = (unint64_t)sub_1002A8148(v30, v31, 16);
  v13 = v26;
LABEL_48:
  swift_bridgeObjectRelease(v6);
  if ((v13 & 1) != 0)
    return 0;
  else
    return v11;
}

uint64_t sub_1002A8BAC()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v6;
  _QWORD v7[2];

  v1 = *(_QWORD *)(v0 + 16);
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  v2._countAndFlagsBits = 0x6E6F2C6946695723;
  v2._object = (void *)0xED00002C61746144;
  String.append(_:)(v2);
  v6 = v1;
  v3 = sub_1000039AC(&qword_100380878);
  _print_unlocked<A, B>(_:_:)(&v6, v7, v3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  return v7[0];
}

uint64_t sub_1002A8C44()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1002A8C68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100381DD8;
  if (!qword_100381DD8)
  {
    v1 = sub_10029FFB8(255, (unint64_t *)&qword_100381DD0, NSNumber_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100381DD8);
  }
  return result;
}

unint64_t sub_1002A8CC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100381DE8;
  if (!qword_100381DE8)
  {
    v1 = sub_10000FE74(&qword_100381DE0);
    sub_1002A8D3C(&qword_100381DF0, &qword_100381DF8, (uint64_t)&protocol conformance descriptor for [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ReversedCollection<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100381DE8);
  }
  return result;
}

uint64_t sub_1002A8D3C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000FE74(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ALLeechCoreWiFi()
{
  return objc_opt_self(_TtC8ALDaemon15ALLeechCoreWiFi);
}

unint64_t sub_1002A8D9C()
{
  unint64_t result;

  result = qword_100381FA8;
  if (!qword_100381FA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100381FA8);
  }
  return result;
}

unint64_t sub_1002A8DE0()
{
  unint64_t result;

  result = qword_100381FB0;
  if (!qword_100381FB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100381FB0);
  }
  return result;
}

uint64_t sub_1002A8E24()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1002A8E50()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = objc_autoreleasePoolPush();
  sub_1002A4518(v1, v2);
  objc_autoreleasePoolPop(v3);
}

uint64_t sub_1002A8E98()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

void sub_1002A8EBC()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  char deviceSupportsAOP;
  id v5;
  void *v6;
  char deviceSupportsAOP2;
  id v8;
  void *v9;
  char isVirtualDevice;
  id v11;
  void *v12;
  char mobileWifi;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v0 = type metadata accessor for PlatformInfo();
  v1 = swift_allocObject(v0, 69, 7);
  v2 = (id)MobileGestalt_get_current_device();
  if (!v2)
  {
    __break(1u);
    goto LABEL_13;
  }
  v3 = v2;
  deviceSupportsAOP = MobileGestalt_get_deviceSupportsAOP();

  *(_BYTE *)(v1 + 64) = deviceSupportsAOP;
  v5 = (id)MobileGestalt_get_current_device();
  if (!v5)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  deviceSupportsAOP2 = MobileGestalt_get_deviceSupportsAOP2();

  *(_BYTE *)(v1 + 65) = deviceSupportsAOP2;
  v8 = (id)MobileGestalt_get_current_device();
  if (!v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v8;
  isVirtualDevice = MobileGestalt_get_isVirtualDevice();

  *(_BYTE *)(v1 + 66) = isVirtualDevice;
  *(_BYTE *)(v1 + 67) = 1;
  v11 = (id)MobileGestalt_get_current_device();
  if (!v11)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v12 = v11;
  mobileWifi = MobileGestalt_get_mobileWifi();

  *(_BYTE *)(v1 + 68) = mobileWifi;
  v14 = (id)MobileGestalt_get_current_device();
  if (!v14)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15 = v14;
  v16 = (id)MobileGestalt_copy_productType_obj();

  if (!v16)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  *(_QWORD *)(v1 + 16) = v17;
  *(_QWORD *)(v1 + 24) = v19;
  v20 = (id)MobileGestalt_get_current_device();
  if (!v20)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v21 = v20;
  v22 = (id)MobileGestalt_copy_hwModelStr_obj();

  if (!v22)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  *(_QWORD *)(v1 + 32) = v23;
  *(_QWORD *)(v1 + 40) = v25;
  v26 = (id)MobileGestalt_get_current_device();
  if (!v26)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v27 = v26;
  v28 = (id)MobileGestalt_copy_productVersion_obj();

  if (v28)
  {
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    *(_QWORD *)(v1 + 48) = v29;
    *(_QWORD *)(v1 + 56) = v31;
    qword_1003DAC98 = v1;
    return;
  }
LABEL_21:
  __break(1u);
}

uint64_t *sub_1002A9084()
{
  if (qword_1003DAC90 != -1)
    swift_once(&qword_1003DAC90, sub_1002A8EBC);
  return &qword_1003DAC98;
}

uint64_t static PlatformInfo.instance.getter()
{
  if (qword_1003DAC90 != -1)
    swift_once(&qword_1003DAC90, sub_1002A8EBC);
  return swift_retain(qword_1003DAC98);
}

uint64_t PlatformInfo.product.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t PlatformInfo.model.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t PlatformInfo.osVer.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
  return v1;
}

id sub_1002A9188()
{
  return sub_1002A924C((uint64_t (*)(void))&_MobileGestalt_get_deviceSupportsAOP);
}

uint64_t sub_1002A9194()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

id sub_1002A919C()
{
  return sub_1002A924C((uint64_t (*)(void))&_MobileGestalt_get_deviceSupportsAOP2);
}

uint64_t sub_1002A91A8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 65);
}

id sub_1002A91B0()
{
  return sub_1002A924C((uint64_t (*)(void))&_MobileGestalt_get_isVirtualDevice);
}

uint64_t sub_1002A91BC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 66);
}

uint64_t sub_1002A91C4()
{
  uint64_t *v0;
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, unint64_t, unint64_t, void *);
  uint64_t v4;

  v0 = sub_1002A951C();
  v1 = *v0;
  v2 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v0 + 112);
  swift_retain(*v0);
  v2(&v4, 0xD000000000000017, 0x8000000100306430, &type metadata for Bool);
  swift_release(v1);
  return (v4 == 2) | (v4 & 1);
}

id sub_1002A9240()
{
  return sub_1002A924C((uint64_t (*)(void))&_MobileGestalt_get_mobileWifi);
}

id sub_1002A924C(uint64_t (*a1)(void))
{
  id result;
  void *v3;
  uint64_t v4;

  result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    v3 = result;
    v4 = a1();

    return (id)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002A9290()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 68);
}

uint64_t sub_1002A9298()
{
  _QWORD *v0;
  Swift::String v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v6;
  uint64_t v7;

  v6 = v0[2];
  v7 = v0[3];
  swift_bridgeObjectRetain(v7);
  v1._countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v3 = v0[6];
  v2 = (void *)v0[7];
  swift_bridgeObjectRetain(v7);
  v4._countAndFlagsBits = v3;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v7);
  return v6;
}

uint64_t sub_1002A9310()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  uint64_t v5;

  v1 = v0[6];
  v2 = (void *)v0[7];
  v5 = v0[2];
  swift_bridgeObjectRetain(v0[3]);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  return v5;
}

_QWORD *PlatformInfo.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return v0;
}

uint64_t PlatformInfo.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocClassInstance(v0, 69, 7);
}

uint64_t type metadata accessor for PlatformInfo()
{
  return objc_opt_self(_TtC8ALDaemon12PlatformInfo);
}

uint64_t method lookup function for PlatformInfo(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PlatformInfo);
}

uint64_t dispatch thunk of PlatformInfo.hasAOP.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PlatformInfo.isAvailable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PlatformInfo.hasMobileWiFi.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PlatformInfo.systemVersionDescriptionNoBuild()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

void sub_1002A9428()
{
  strcpy((char *)&qword_1003857E8, "ServerDefaults");
  unk_1003857F7 = -18;
}

uint64_t *sub_1002A9458()
{
  if (qword_1003DACA0 != -1)
    swift_once(&qword_1003DACA0, sub_1002A9428);
  return &qword_1003857E8;
}

uint64_t sub_1002A9498()
{
  uint64_t v0;

  if (qword_1003DACA0 != -1)
    swift_once(&qword_1003DACA0, sub_1002A9428);
  v0 = qword_1003857E8;
  swift_bridgeObjectRetain(unk_1003857F0);
  return v0;
}

uint64_t sub_1002A94F4()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for PersistentConfig();
  result = swift_initStaticObject(v0, &unk_1003DACC0);
  qword_1003DACB0 = result;
  return result;
}

uint64_t *sub_1002A951C()
{
  if (qword_1003DACA8 != -1)
    swift_once(&qword_1003DACA8, sub_1002A94F4);
  return &qword_1003DACB0;
}

uint64_t static PersistentConfig.instance.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for PersistentConfig();
  return swift_initStaticObject(v0, &unk_1003DACC0);
}

unint64_t sub_1002A9578(uint64_t a1, uint64_t a2)
{
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];

  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  if (qword_1003DACA0 != -1)
    swift_once(&qword_1003DACA0, sub_1002A9428);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "dictionaryForKey:", v5);

  if (!v6)
    return 0;
  v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v8 = sub_1002A9084();
  v9 = *v8;
  v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*v8 + 200);
  v11 = swift_retain(*v8);
  v12 = v10(v11);
  v14 = v13;
  swift_release(v9);
  if (!*(_QWORD *)(v7 + 16) || (v15 = sub_10029FAD0(v12, v14), (v16 & 1) == 0))
  {
    v25 = 0u;
    v26 = 0u;
    swift_bridgeObjectRelease(v14);
    goto LABEL_14;
  }
  sub_1000187EC(*(_QWORD *)(v7 + 56) + 32 * v15, (uint64_t)&v25);
  swift_bridgeObjectRelease(v14);
  if (!*((_QWORD *)&v26 + 1))
  {
LABEL_14:
    sub_100286250((uint64_t)&v25);
    v22 = sub_1002A97F8(v7);
    swift_bridgeObjectRelease(v7);
    return v22;
  }
  swift_bridgeObjectRelease(v7);
  sub_1002AA440(&v25, v27);
  sub_1000187EC((uint64_t)v27, (uint64_t)&v25);
  v17 = sub_1000039AC(&qword_1003820C8);
  if (!swift_dynamicCast(&v24, &v25, (char *)&type metadata for Any + 8, v17, 6))
  {
LABEL_17:
    sub_1000187CC(v27);
    return 0;
  }
  v18 = v24;
  if (!*(_QWORD *)(v24 + 16))
  {
LABEL_16:
    swift_bridgeObjectRelease(v18);
    goto LABEL_17;
  }
  swift_bridgeObjectRetain(a2);
  v19 = sub_10029FAD0(a1, a2);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_16;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
  swift_unknownObjectRetain(v21);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v18);
  sub_1000187CC(v27);
  *(_QWORD *)&v25 = v21;
  if (swift_dynamicCast(&v24, &v25, (char *)&type metadata for Swift.AnyObject + 8, v17, 6))
    return v24;
  else
    return 0;
}

unint64_t sub_1002A97F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t result;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  __int128 v40;
  _OWORD v41[2];
  __int128 v42;
  _OWORD v43[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000039AC((uint64_t *)&unk_1003821A8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v35 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v34 = (unint64_t)(63 - v4) >> 6;
  v7 = v43;
  v8 = v41;
  result = swift_bridgeObjectRetain(v1);
  v36 = 0;
  v10 = (char *)&type metadata for Any + 8;
  v11 = (char *)&type metadata for Swift.AnyObject + 8;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v20 = v36 + 1;
  if (__OFADD__(v36, 1))
    goto LABEL_35;
  if (v20 >= v34)
    goto LABEL_32;
  v21 = *(_QWORD *)(v35 + 8 * v20);
  v22 = v36 + 1;
  if (!v21)
  {
    v22 = v36 + 2;
    if (v36 + 2 >= v34)
      goto LABEL_32;
    v21 = *(_QWORD *)(v35 + 8 * v22);
    if (!v21)
    {
      v22 = v36 + 3;
      if (v36 + 3 >= v34)
        goto LABEL_32;
      v21 = *(_QWORD *)(v35 + 8 * v22);
      if (!v21)
      {
        v22 = v36 + 4;
        if (v36 + 4 >= v34)
          goto LABEL_32;
        v21 = *(_QWORD *)(v35 + 8 * v22);
        if (!v21)
        {
          v23 = v36 + 5;
          if (v36 + 5 < v34)
          {
            v21 = *(_QWORD *)(v35 + 8 * v23);
            if (v21)
            {
              v22 = v36 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v34)
                break;
              v21 = *(_QWORD *)(v35 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_1002AA5DC(v1);
          return (unint64_t)v3;
        }
      }
    }
  }
LABEL_26:
  v36 = v22;
  v37 = (v21 - 1) & v21;
  for (i = __clz(__rbit64(v21)) + (v22 << 6); ; i = __clz(__rbit64(v6)) | (v36 << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
    v26 = *v24;
    v25 = v24[1];
    sub_1000187EC(*(_QWORD *)(v1 + 56) + 32 * i, (uint64_t)v7);
    *(_QWORD *)&v42 = v26;
    *((_QWORD *)&v42 + 1) = v25;
    v40 = v42;
    v41[0] = v43[0];
    v41[1] = v43[1];
    v27 = v42;
    sub_1002AA440(v8, v38);
    swift_bridgeObjectRetain(v25);
    swift_dynamicCast(&v39, v38, v10, v11, 7);
    v28 = v39;
    result = sub_10029FAD0(v27, *((uint64_t *)&v27 + 1));
    v29 = result;
    if ((v30 & 1) != 0)
    {
      v12 = v1;
      v13 = v10;
      v14 = v8;
      v15 = v7;
      v16 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8));
      *(_OWORD *)v16 = v27;
      v17 = v3[7];
      v18 = 8 * v29;
      result = swift_unknownObjectRelease(*(_QWORD *)(v17 + v18));
      *(_QWORD *)(v17 + v18) = v28;
      v7 = v15;
      v8 = v14;
      v10 = v13;
      v1 = v12;
      v11 = (char *)&type metadata for Swift.AnyObject + 8;
      v6 = v37;
      if (!v37)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v3[6] + 16 * result) = v27;
    *(_QWORD *)(v3[7] + 8 * result) = v28;
    v31 = v3[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_34;
    v3[2] = v33;
    v6 = v37;
    if (!v37)
      goto LABEL_11;
LABEL_10:
    v37 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

BOOL sub_1002A9B44(uint64_t a1, uint64_t a2)
{
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _BOOL8 v10;
  __int128 v12;
  __int128 v13;

  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  if (qword_1003DACA0 != -1)
    swift_once(&qword_1003DACA0, sub_1002A9428);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "dictionaryForKey:", v5);

  if (v6)
  {
    v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    if (*(_QWORD *)(v7 + 16))
    {
      swift_bridgeObjectRetain(a2);
      v8 = sub_10029FAD0(a1, a2);
      if ((v9 & 1) != 0)
      {
        sub_1000187EC(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v12);
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v7);
        v10 = *((_QWORD *)&v13 + 1) != 0;
LABEL_11:
        sub_100286250((uint64_t)&v12);
        return v10;
      }
      v12 = 0u;
      v13 = 0u;
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      v12 = 0u;
      v13 = 0u;
    }
    swift_bridgeObjectRelease(v7);
    v10 = 0;
    goto LABEL_11;
  }
  return 0;
}

BOOL sub_1002A9CC4()
{
  id v0;
  NSString v1;
  id v2;
  _OWORD v4[2];

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "valueForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v4, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_100286250((uint64_t)v4);
  return v2 != 0;
}

void sub_1002A9D88(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  allog.getter((uint64_t)v7);
  v8 = swift_bridgeObjectRetain_n(a2, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(12, -1);
    v17 = a1;
    v12 = (uint8_t *)v11;
    v13 = swift_slowAlloc(32, -1);
    v19 = v13;
    *(_DWORD *)v12 = 136446210;
    swift_bridgeObjectRetain(a2);
    v18 = sub_10001818C(v17, a2, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "UserDefaults,add,%{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "addSuiteNamed:", v15);

}

uint64_t sub_1002A9F94(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)a1 + 112))(*a2, a2[1], *(_QWORD *)((char *)a2 + a3 - 8));
}

uint64_t sub_1002A9FC8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v7 = *(uint64_t *)((char *)a3 + a4 - 8);
  type metadata accessor for Optional(0, v7);
  __chkstk_darwin();
  v9 = (char *)&v15 - v8;
  v11 = *a3;
  v10 = a3[1];
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)&v15 - v8, a1);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(**(_QWORD **)a2 + 120);
  swift_bridgeObjectRetain(v10);
  return v13(v9, v11, v10, v7);
}

uint64_t sub_1002AA07C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  _OWORD v23[2];

  if (((*(uint64_t (**)(void))(*(_QWORD *)v4 + 96))() & 1) != 0)
  {
    v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_msgSend(v9, "valueForKey:", v10);

    if (v11)
    {
      _bridgeAnyObjectToAny(_:)(v22, v11);
      swift_unknownObjectRelease(v11);
      sub_1002AA440(v22, v23);
    }
    else
    {
      memset(v23, 0, sizeof(v23));
    }
    v17 = sub_1000039AC(&qword_100380508);
    v18 = swift_dynamicCast(a4, v23, v17, a3, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v18 ^ 1u, 1, a3);
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(a1, a2);
    if (v12)
    {
      v13 = v12;
      if (*(_QWORD *)(v12 + 16))
      {
        swift_bridgeObjectRetain(a2);
        v14 = sub_10029FAD0(a1, a2);
        if ((v15 & 1) != 0)
        {
          v16 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
          swift_unknownObjectRetain(v16);
        }
        else
        {
          v16 = 0;
        }
        swift_bridgeObjectRelease(a2);
      }
      else
      {
        v16 = 0;
      }
      swift_bridgeObjectRelease(v13);
      *(_QWORD *)&v23[0] = v16;
      v20 = sub_1000039AC(&qword_1003820D0);
      v21 = swift_dynamicCast(a4, v23, v20, a3, 6) ^ 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v21, 1, a3);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, 1, 1, a3);
    }
  }
}

uint64_t sub_1002AA26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_1002AA450(a1, a2, a3, a4);
  v6 = type metadata accessor for Optional(0, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
}

void (*sub_1002AA2AC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;

  v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[1] = a3;
  v8[2] = a4;
  *v8 = a2;
  v9 = type metadata accessor for Optional(0, a4);
  v8[3] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[4] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v8[5] = malloc(v11);
  v12 = malloc(v11);
  v8[6] = v12;
  sub_1002AA07C(a2, a3, a4, (uint64_t)v12);
  return sub_1002AA354;
}

void sub_1002AA354(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  v5 = (*a1)[3];
  v6 = (*a1)[4];
  v8 = (*a1)[1];
  v7 = (*a1)[2];
  v9 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    swift_bridgeObjectRetain(v8);
    sub_1002AA450((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    swift_bridgeObjectRetain((*a1)[1]);
    sub_1002AA450((uint64_t)v4, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t type metadata accessor for PersistentConfig()
{
  return objc_opt_self(_TtC8ALDaemon16PersistentConfig);
}

_OWORD *sub_1002AA440(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_1002AA450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  uint64_t v15;

  v7 = type metadata accessor for Optional(0, a4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v15 - v9;
  v11 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v12 = *(_QWORD *)(a4 - 8);
  v13 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, a4) != 1)
  {
    v13 = _bridgeAnythingToObjectiveC<A>(_:)(v10, a4);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, a4);
  }
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  objc_msgSend(v11, "setObject:forKey:", v13, v14);

  swift_unknownObjectRelease(v13);
}

uint64_t sub_1002AA588()
{
  return 8;
}

_QWORD *sub_1002AA594(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t method lookup function for PersistentConfig(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PersistentConfig);
}

uint64_t dispatch thunk of PersistentConfig.addSuite(named:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PersistentConfig.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PersistentConfig.subscript.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PersistentConfig.subscript.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t sub_1002AA5DC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void *sub_1002AA5E4()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 48, v4, 0, 0);
  v1 = *(void **)(v0 + 48);
  v2 = v1;
  return v1;
}

void sub_1002AA624(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 48, v4, 1, 0);
  v3 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;

}

_QWORD *sub_1002AA668(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  id v8;

  v7 = (_QWORD *)swift_allocObject(v3, 56, 7);
  v7[5] = 0;
  v7[6] = 0;
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v8 = a1;
  swift_retain(a3);
  sub_1002AA744();
  sub_1002AAC3C();

  swift_release(a3);
  return v7;
}

_QWORD *sub_1002AA6DC(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);
  id v6;
  uint64_t v7;
  uint64_t v8;

  v3[5] = 0;
  v3[6] = 0;
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  v5 = *(uint64_t (**)(uint64_t))(*v3 + 216);
  v6 = a1;
  v7 = swift_retain(a3);
  v8 = v5(v7);
  (*(void (**)(uint64_t))(*v3 + 224))(v8);

  swift_release(a3);
  return v3;
}

uint64_t sub_1002AA744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t (*v23)(void);
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void **aBlock;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v36 - v13;
  v15 = corelog.getter((uint64_t)&v36 - v13);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Reg discovery BT on AP from CB", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v14, v8);
  v20 = (*(uint64_t (**)(id))(*(_QWORD *)v1 + 168))(objc_msgSend(objc_allocWithZone((Class)CBDiscovery), "init"));
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 160))(v20);
  if (v21)
  {
    v22 = (void *)v21;
    v23 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 112);
    v24 = (void *)v23();
    objc_msgSend(v22, "setDispatchQueue:", v24);

    objc_msgSend(v22, "addDiscoveryType:", 29);
    objc_msgSend(v22, "setUseCase:", 269);
    objc_msgSend(v22, "setDiscoveryFlags:", 0x2000000);
    v46 = sub_1002AB048;
    v47 = v1;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v44 = sub_1002AAB8C;
    v45 = &unk_10035B8B8;
    v25 = _Block_copy(&aBlock);
    v26 = v47;
    swift_retain(v1);
    swift_release(v26);
    objc_msgSend(v22, "setDevicesBufferedHandler:", v25);
    _Block_release(v25);
    v27 = (void *)v23();
    v28 = swift_allocObject(&unk_10035B8F0, 32, 7);
    *(_QWORD *)(v28 + 16) = v22;
    *(_QWORD *)(v28 + 24) = v1;
    v46 = sub_1002AB0A4;
    v47 = v28;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v44 = sub_10028B824;
    v45 = &unk_10035B908;
    v29 = _Block_copy(&aBlock);
    swift_retain(v1);
    v30 = v22;
    static DispatchQoS.unspecified.getter(v30);
    v41 = &_swiftEmptyArrayStorage;
    v31 = sub_10000FD38((unint64_t *)&qword_100381D30, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v32 = sub_1000039AC((uint64_t *)&unk_100380840);
    v33 = sub_1002A1430();
    v34 = v40;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v32, v33, v40, v31);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v29);
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v4, v34);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v38);
    return swift_release(v47);
  }
  else
  {
    corelog.getter((uint64_t)v12);
    Logger._fault(_:function:file:line:)((uint64_t (*)(void))sub_1002AAB70, 0, (uint64_t *)"regDiscovery()", 14, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreBluetooth.swift", 78, 2);
    return ((uint64_t (*)(char *, uint64_t))v19)(v12, v8);
  }
}

unint64_t sub_1002AAB70()
{
  return 0xD000000000000010;
}

uint64_t sub_1002AAB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  unint64_t v5;
  uint64_t v6;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_1002ADB4C();
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v4(v6);
  swift_release(v3);
  return swift_bridgeObjectRelease(v6);
}

void sub_1002AABE8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_1002AAC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t (*v23)(void);
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void **aBlock;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v36 - v13;
  v15 = corelog.getter((uint64_t)&v36 - v13);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Reg leeching BT on AP from CB", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v14, v8);
  v20 = (*(uint64_t (**)(id))(*(_QWORD *)v1 + 192))(objc_msgSend(objc_allocWithZone((Class)CBDiscovery), "init"));
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v20);
  if (v21)
  {
    v22 = (void *)v21;
    v23 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 112);
    v24 = (void *)v23();
    objc_msgSend(v22, "setDispatchQueue:", v24);

    objc_msgSend(v22, "setDiscoveryFlags:", 0x10120001C080);
    v46 = sub_1002AD66C;
    v47 = v1;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v44 = sub_1002852B8;
    v45 = &unk_10035B930;
    v25 = _Block_copy(&aBlock);
    v26 = v47;
    swift_retain(v1);
    swift_release(v26);
    objc_msgSend(v22, "setDeviceFoundHandler:", v25);
    _Block_release(v25);
    v27 = (void *)v23();
    v28 = swift_allocObject(&unk_10035B968, 32, 7);
    *(_QWORD *)(v28 + 16) = v22;
    *(_QWORD *)(v28 + 24) = v1;
    v46 = sub_1002AD6B0;
    v47 = v28;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v44 = sub_10028B824;
    v45 = &unk_10035B980;
    v29 = _Block_copy(&aBlock);
    swift_retain(v1);
    v30 = v22;
    static DispatchQoS.unspecified.getter(v30);
    v41 = &_swiftEmptyArrayStorage;
    v31 = sub_10000FD38((unint64_t *)&qword_100381D30, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v32 = sub_1000039AC((uint64_t *)&unk_100380840);
    v33 = sub_1002A1430();
    v34 = v40;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v32, v33, v40, v31);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v29);
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v4, v34);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v38);
    return swift_release(v47);
  }
  else
  {
    corelog.getter((uint64_t)v12);
    Logger._fault(_:function:file:line:)(sub_1002AB0B8, 0, (uint64_t *)"regLeeching()", 13, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreBluetooth.swift", 78, 2);
    return ((uint64_t (*)(char *, uint64_t))v19)(v12, v8);
  }
}

void sub_1002AB048(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = objc_autoreleasePoolPush();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 240))(a1);
  objc_autoreleasePoolPop(v3);
}

uint64_t sub_1002AB088(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002AB098(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1002AB0A4()
{
  sub_1002AD6C4((uint64_t)j___s8ALRPCShm18ALTightbeamHandlerC21pingForDaemonWatchdog2idSbSgs6UInt64V_tFTj, (uint64_t)&unk_10035BA98);
}

uint64_t sub_1002AB0B8()
{
  return 0x686365654C74625FLL;
}

uint64_t sub_1002AB0DC(void *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t (*v63)(char *, char *, uint64_t);
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void *v78;
  void **aBlock;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  void *v82;
  uint64_t (*v83)();
  uint64_t v84;

  v69 = type metadata accessor for DispatchWorkItemFlags(0);
  v75 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v3 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v71 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v65 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v76 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ALBtAdvertisement(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v67 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v62 - v14;
  v66 = v16;
  __chkstk_darwin(v13);
  v77 = (char *)&v62 - v17;
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v19 = objc_msgSend(v18, "bundleIdentifier");

  v72 = v5;
  if (v19)
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

  }
  else
  {
    v22 = 0xE100000000000000;
    v20 = 95;
  }
  aBlock = (void **)v20;
  v80 = v22;
  swift_bridgeObjectRetain(v22);
  v23._countAndFlagsBits = 0x6E756F662E74622ELL;
  v23._object = (void *)0xE900000000000064;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  v24 = v80;
  v25 = String.utf8CString.getter(aBlock, v80);
  swift_bridgeObjectRelease(v24);
  v70 = os_transaction_create(v25 + 32);
  swift_release(v25);
  v26 = a1;
  v27 = v77;
  sub_1002AB678(v26);
  v28 = v76;
  corelog.getter(v76);
  v63 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 16);
  v29 = v63(v15, v27, v9);
  v30 = Logger.logObject.getter(v29);
  v31 = v9;
  v32 = static os_log_type_t.debug.getter();
  v33 = os_log_type_enabled(v30, v32);
  v73 = v4;
  v74 = v3;
  if (v33)
  {
    v34 = swift_slowAlloc(12, -1);
    v62 = v7;
    v35 = v10;
    v36 = (uint8_t *)v34;
    v37 = (void **)swift_slowAlloc(32, -1);
    aBlock = v37;
    *(_DWORD *)v36 = 136315138;
    v38 = ALBtAdvertisement.description.getter(v37);
    v40 = v39;
    v78 = (void *)sub_10001818C(v38, v39, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &aBlock, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v40);
    v64 = *(void (**)(char *, uint64_t))(v35 + 8);
    v64(v15, v31);
    _os_log_impl((void *)&_mh_execute_header, v30, v32, "#BT,onDeviceFound,%s", v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8))(v76, v62);
    v42 = v68;
  }
  else
  {
    v64 = *(void (**)(char *, uint64_t))(v10 + 8);
    v64(v15, v31);

    v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8))(v28, v7);
    v42 = v68;
    v35 = v10;
  }
  v43 = v66;
  v44 = v67;
  v45 = (void (*)(char *, char *, uint64_t))v63;
  v46 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 112))(v41);
  v47 = v77;
  v45(v44, v77, v31);
  v48 = *(unsigned __int8 *)(v35 + 80);
  v49 = (v48 + 32) & ~v48;
  v50 = swift_allocObject(&unk_10035B9B8, v49 + v43, v48 | 7);
  v51 = v31;
  v52 = v70;
  *(_QWORD *)(v50 + 16) = v70;
  *(_QWORD *)(v50 + 24) = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v50 + v49, v44, v51);
  v83 = sub_1002AD7D0;
  v84 = v50;
  aBlock = _NSConcreteStackBlock;
  v80 = 1107296256;
  v81 = sub_10028B824;
  v82 = &unk_10035B9D0;
  v53 = _Block_copy(&aBlock);
  swift_unknownObjectRetain(v52);
  v54 = swift_retain(v42);
  v55 = v71;
  static DispatchQoS.unspecified.getter(v54);
  v78 = &_swiftEmptyArrayStorage;
  v56 = sub_10000FD38((unint64_t *)&qword_100381D30, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v57 = sub_1000039AC((uint64_t *)&unk_100380840);
  v58 = sub_1002A1430();
  v59 = v74;
  v60 = v69;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v57, v58, v69, v56);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v55, v59, v53);
  _Block_release(v53);
  swift_unknownObjectRelease(v52);

  (*(void (**)(char *, uint64_t))(v75 + 8))(v59, v60);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v55, v73);
  v64(v47, v51);
  return swift_release(v84);
}

void sub_1002AB678(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  char **v48;
  char *v49;
  uint64_t v50;
  char v51;
  void (*v52)(char *, uint64_t);
  unsigned int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;

  v2 = type metadata accessor for ALBtAdvertisement.BtType(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_1000039AC(&qword_1003821B8);
  __chkstk_darwin(v58);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000039AC((uint64_t *)&unk_1003821C0);
  __chkstk_darwin(v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_10036A6C0);
  v12 = __chkstk_darwin(v11);
  v56 = (uint64_t)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v60 = (uint64_t)&v54 - v15;
  v16 = __chkstk_darwin(v14);
  v59 = (char *)&v54 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v54 - v19;
  ALBtAdvertisement.init()(v18);
  v21 = (unint64_t)objc_msgSend(a1, "bleAdvertisementTimestampMachContinuous");
  v22 = MsInSec.getter();
  if ((v22 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    JUMPOUT(0x1002ABEF4);
  }
  if (!is_mul_ok(v21, v22))
  {
    __break(1u);
    JUMPOUT(0x1002ABE94);
  }
  v55 = v5;
  v57 = v7;
  ALBtAdvertisement._machContTimeNs.setter(v21 * v22, 0);
  v23 = objc_msgSend(a1, "btAddressData");
  if (v23)
  {
    v24 = v23;
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    __asm { BR              X10 }
  }
  v27 = objc_msgSend(a1, "bleRSSI");
  v63 = 0;
  ALBtAdvertisement._rssidB.setter(v27);
  v28 = objc_msgSend(a1, "bleChannel");
  v62 = 0;
  ALBtAdvertisement._channel.setter(v28);
  v29 = objc_msgSend(a1, "bleAdvertisementData");
  if (v29)
  {
    v30 = v29;
    v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);

  }
  else
  {
    v31 = 0;
  }
  ALBtAdvertisement._payload.setter(v31);
  ALBtAdvertisement._deviceFlags.setter(objc_msgSend(a1, "deviceFlags"), 0);
  ALBtAdvertisement._discoveryFlags.setter(objc_msgSend(a1, "discoveryFlags"), 0);
  ALBtAdvertisement._vendorID.setter(objc_msgSend(a1, "vendorID"));
  v32 = objc_msgSend(a1, "identifier");
  if (v32)
  {
    v33 = v32;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);

  }
  else
  {
    v34 = 0;
  }
  ALBtAdvertisement._identifier.setter(v34);
  v35 = objc_msgSend(a1, "idsDeviceID");
  if (v35)
  {
    v36 = v35;
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);

  }
  else
  {
    v37 = 0;
  }
  ALBtAdvertisement._idsDeviceID.setter(v37);
  if ((objc_msgSend(a1, "discoveryFlags") & 0x8000) != 0
    || (objc_msgSend(a1, "discoveryFlags") & 0x4000) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v20, enum case for ALBtAdvertisement.BtType.type7(_:), v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v20, 0, 1, v2);
    ALBtAdvertisement._type.setter(v20);
    sub_1002AD0DC(a1, 1);
    v38 = type metadata accessor for ALBtAdvInfoType7(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v10, 0, 1, v38);
    ALBtAdvertisement._type7Info.setter(v10);
  }
  if ((objc_msgSend(a1, "discoveryFlags") & 0x10000) != 0)
  {
    v40 = enum case for ALBtAdvertisement.BtType.type7(_:);
    goto LABEL_21;
  }
  v39 = (uint64_t)objc_msgSend(a1, "discoveryFlags");
  v40 = enum case for ALBtAdvertisement.BtType.type7(_:);
  if ((v39 & 0x80) != 0)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 104))(v20, v40, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v20, 0, 1, v2);
    ALBtAdvertisement._type.setter(v20);
    sub_1002AD0DC(a1, 0);
    v41 = type metadata accessor for ALBtAdvInfoType7(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v10, 0, 1, v41);
    v39 = ALBtAdvertisement._type7Info.setter(v10);
  }
  v42 = (uint64_t)v59;
  ALBtAdvertisement.type.getter(v39);
  v43 = v60;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v60, v40, v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v43, 0, 1, v2);
  v44 = (uint64_t)v57;
  v45 = (uint64_t)&v57[*(int *)(v58 + 48)];
  sub_1002AD878(v42, (uint64_t)v57);
  sub_1002AD878(v43, v45);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v46(v44, 1, v2) == 1)
  {
    sub_100015704(v43, &qword_10036A6C0);
    sub_100015704(v42, &qword_10036A6C0);
    if (v46(v45, 1, v2) == 1)
    {
      sub_100015704(v44, &qword_10036A6C0);
LABEL_30:
      v48 = &selRef_proximityPairingProductID;
      goto LABEL_31;
    }
    goto LABEL_27;
  }
  v47 = v56;
  sub_1002AD878(v44, v56);
  if (v46(v45, 1, v2) == 1)
  {
    sub_100015704(v43, &qword_10036A6C0);
    sub_100015704(v42, &qword_10036A6C0);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v47, v2);
LABEL_27:
    sub_100015704(v44, &qword_1003821B8);
    goto LABEL_28;
  }
  v49 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v55, v45, v2);
  v50 = sub_10000FD38((unint64_t *)&unk_1003821D0, (uint64_t (*)(uint64_t))&type metadata accessor for ALBtAdvertisement.BtType, (uint64_t)&protocol conformance descriptor for ALBtAdvertisement.BtType);
  v51 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v49, v2, v50);
  v52 = *(void (**)(char *, uint64_t))(v3 + 8);
  v52(v49, v2);
  sub_100015704(v60, &qword_10036A6C0);
  sub_100015704(v42, &qword_10036A6C0);
  v52((char *)v47, v2);
  sub_100015704(v44, &qword_10036A6C0);
  if ((v51 & 1) != 0)
    goto LABEL_30;
LABEL_28:
  v48 = &selRef_productID;
LABEL_31:
  v53 = objc_msgSend(a1, *v48);
  v61 = 0;
  ALBtAdvertisement._productID.setter(v53);

}

uint64_t sub_1002ABF04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  void (*v31)(char *, _QWORD *);
  id v32;
  id v33;
  void (*v34)(char *, char *, _QWORD *);
  unint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void **v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void (*v50)(char *, _QWORD *);
  uint64_t v51;
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  __int128 v75;
  void ***p_aBlock;
  char *v77;
  char *v78;
  uint8_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;
  void *v90;
  void **aBlock;
  uint64_t v92;
  uint64_t (*v93)(uint64_t);
  void *v94;
  uint64_t (*v95)();
  _QWORD *v96;

  v87 = a1;
  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v72 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v71 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v83 = *(_QWORD *)(v7 - 8);
  v84 = v7;
  __chkstk_darwin(v7);
  v78 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = (_QWORD *)type metadata accessor for ALBtAdvertisement(0);
  v9 = *(v88 - 1);
  v10 = __chkstk_darwin(v88);
  v77 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v89 = (char *)&v65 - v13;
  __chkstk_darwin(v12);
  v85 = (char *)&v65 - v14;
  v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v16 = objc_msgSend(v15, "bundleIdentifier");

  if (v16)
  {
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

  }
  else
  {
    v19 = 0xE100000000000000;
    v17 = 95;
  }
  aBlock = (void **)v17;
  v92 = v19;
  swift_bridgeObjectRetain(v19);
  v20._countAndFlagsBits = 0x666675622E74622ELL;
  v20._object = (void *)0xEB00000000647265;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  v21 = v92;
  v22 = String.utf8CString.getter(aBlock, v92);
  swift_bridgeObjectRelease(v21);
  v69 = os_transaction_create(v22 + 32);
  swift_release(v22);
  v86 = swift_allocObject(&unk_10035BA08, 24, 7);
  *(_QWORD *)(v86 + 16) = &_swiftEmptyArrayStorage;
  if ((unint64_t)v87 >> 62)
  {
    if (v87 < 0)
      v64 = v87;
    else
      v64 = v87 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v87);
    result = _CocoaArrayWrapper.endIndex.getter(v64);
    v23 = result;
  }
  else
  {
    v23 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v87);
  }
  v26 = v85;
  v73 = v5;
  if (!v23)
  {
    v51 = swift_bridgeObjectRelease(v87);
LABEL_22:
    v52 = v70;
    v53 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 112))(v51);
    v54 = (_QWORD *)swift_allocObject(&unk_10035BA30, 40, 7);
    v55 = v69;
    v54[2] = v69;
    v54[3] = v52;
    v56 = v86;
    v54[4] = v86;
    v95 = sub_1002AD918;
    v96 = v54;
    aBlock = _NSConcreteStackBlock;
    v92 = 1107296256;
    v93 = sub_10028B824;
    v94 = &unk_10035BA48;
    v57 = _Block_copy(&aBlock);
    swift_unknownObjectRetain(v55);
    swift_retain(v52);
    v58 = swift_retain(v56);
    v59 = v71;
    static DispatchQoS.unspecified.getter(v58);
    v90 = &_swiftEmptyArrayStorage;
    v60 = sub_10000FD38((unint64_t *)&qword_100381D30, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v61 = sub_1000039AC((uint64_t *)&unk_100380840);
    v62 = sub_1002A1430();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v90, v61, v62, v1, v60);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v59, v4, v57);
    _Block_release(v57);
    swift_unknownObjectRelease(v55);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v59, v73);
    v63 = v96;
    swift_release(v56);
    return swift_release(v63);
  }
  if (v23 >= 1)
  {
    v66 = v4;
    v67 = v2;
    v68 = v1;
    v27 = 0;
    v80 = v87 & 0xC000000000000001;
    p_aBlock = &aBlock;
    *(_QWORD *)&v25 = 136315138;
    v75 = v25;
    v74 = (char *)&type metadata for Any + 8;
    v28 = v77;
    v29 = (uint64_t)v78;
    v30 = v88;
    v81 = v9;
    v82 = v23;
    do
    {
      if (v80)
        v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v87);
      else
        v32 = *(id *)(v87 + 8 * v27 + 32);
      v33 = v32;
      sub_1002AB678(v33);
      v34 = *(void (**)(char *, char *, _QWORD *))(v9 + 16);
      v34(v89, v26, v30);
      v35 = *(_QWORD *)(v86 + 16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
      v88 = v33;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v35 = sub_10029BC64(0, *(_QWORD *)(v35 + 16) + 1, 1, v35);
        *(_QWORD *)(v86 + 16) = v35;
      }
      v38 = *(_QWORD *)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
      if (v38 >= v37 >> 1)
      {
        v35 = sub_10029BC64(v37 > 1, v38 + 1, 1, v35);
        *(_QWORD *)(v86 + 16) = v35;
      }
      *(_QWORD *)(v35 + 16) = v38 + 1;
      (*(void (**)(unint64_t, char *, _QWORD *))(v9 + 32))(v35+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v38, v89, v30);
      corelog.getter(v29);
      v26 = v85;
      v39 = ((uint64_t (*)(char *, char *, _QWORD *))v34)(v28, v85, v30);
      v40 = Logger.logObject.getter(v39);
      v41 = v28;
      v42 = v9;
      v43 = v30;
      v44 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = (void **)swift_slowAlloc(32, -1);
        aBlock = v46;
        *(_DWORD *)v45 = v75;
        v79 = v45 + 4;
        v47 = ALBtAdvertisement.description.getter(v46);
        v49 = v48;
        v90 = (void *)sub_10001818C(v47, v48, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, p_aBlock, v79, v45 + 12);
        swift_bridgeObjectRelease(v49);
        v50 = *(void (**)(char *, _QWORD *))(v42 + 8);
        v28 = v77;
        v50(v77, v43);
        _os_log_impl((void *)&_mh_execute_header, v40, v44, "#BT,onDevicesBuffered,%s", v45, 0xCu);
        swift_arrayDestroy(v46, 1, v74);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);

        v29 = (uint64_t)v78;
        (*(void (**)(void))(v83 + 8))();
        v50(v26, v43);
        v30 = v43;
      }
      else
      {

        v31 = *(void (**)(char *, _QWORD *))(v42 + 8);
        v31(v41, v43);

        (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v29, v84);
        v31(v26, v43);
        v30 = v43;
        v28 = v41;
      }
      v9 = v81;
      ++v27;
    }
    while (v82 != v27);
    v51 = swift_bridgeObjectRelease(v87);
    v1 = v68;
    v2 = v67;
    v4 = v66;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002AC680(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t result;
  double v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[32];
  uint64_t v51[3];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v45 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - v8;
  v10 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for ALBtNotification(0);
  v46 = *(_QWORD *)(v48 - 8);
  v13 = __chkstk_darwin(v48);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v41 - v17;
  ALBtNotification.init()(v16);
  v19 = swift_bridgeObjectRetain(a1);
  ALBtNotification._advertisements.setter(v19);
  ALBtNotification._isScreenOn.setter(a2 & 1);
  v20 = ALBtNotification._simulated.setter(0);
  static ALTimeStamp.now()(v20);
  v21 = type metadata accessor for ALTimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v12, 0, 1, v21);
  ALBtNotification._timestamp.setter(v12);
  corelog.getter((uint64_t)v9);
  v22 = swift_bridgeObjectRetain_n(a1, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v23, v24))
  {

    swift_bridgeObjectRelease_n(a1, 2);
    v34 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
LABEL_7:
    v35 = (void (*)(char *))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 136))(v34);
    v37 = v36;
    swift_beginAccess(v18, v51, 0, 0);
    v38 = v46;
    v39 = v48;
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v15, v18, v48);
    v35(v15);
    v40 = *(void (**)(char *, uint64_t))(v38 + 8);
    v40(v15, v39);
    swift_release(v37);
    return ((uint64_t (*)(char *, uint64_t))v40)(v18, v39);
  }
  v43 = v5;
  v44 = v4;
  v25 = swift_slowAlloc(22, -1);
  v42 = swift_slowAlloc(32, -1);
  v51[0] = v42;
  *(_DWORD *)v25 = 136446466;
  v26 = swift_beginAccess(v18, v50, 0, 0);
  v27 = ALBtNotification.description.getter(v26);
  v29 = v28;
  v49 = sub_10001818C(v27, v28, v51);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v25 + 4, v25 + 12);
  result = swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2050;
  if (*(_QWORD *)(a1 + 16))
  {
    type metadata accessor for ALBtAdvertisement(0);
    v31 = COERCE_DOUBLE(sub_1002ACAF8());
    if ((v32 & 1) != 0)
      v31 = -1.0;
    v49 = *(_QWORD *)&v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease_n(a1, 2);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "#BT,onAdvertisements,notif,%{public}s,delayMs,%{public}f", (uint8_t *)v25, 0x16u);
    v33 = v42;
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    v34 = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v9, v44);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002ACAF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  double v13;
  uint64_t v15;

  v0 = sub_1000039AC(&qword_10036A6D8);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotification._timestamp.getter(v1);
  v4 = type metadata accessor for ALTimeStamp(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100015704((uint64_t)v3, &qword_10036A6D8);
  }
  else
  {
    v6 = COERCE_DOUBLE(ALTimeStamp._machAbsoluteTimeSec.getter());
    v8 = v7;
    v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v3, v4);
    if ((v8 & 1) != 0)
      return *(_QWORD *)&v6;
    v10 = ALBtAdvertisement._machContTimeNs.getter(v9);
    if ((v11 & 1) == 0)
    {
      v12 = v10;
      v13 = v6 * (double)MsInSec.getter();
      v6 = v13 - NsToMs.getter() * (double)v12;
      return *(_QWORD *)&v6;
    }
  }
  v6 = 0.0;
  return *(_QWORD *)&v6;
}

uint64_t sub_1002ACC20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD v33[3];
  char v34[8];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v31 - v8;
  result = __chkstk_darwin(v7);
  v12 = (char *)&v31 - v11;
  if (!a1)
    return result;
  swift_getErrorValue(a1, v34, v33);
  v13 = v33[1];
  v14 = v33[2];
  swift_errorRetain(a1);
  result = dispatch thunk of Error._code.getter(v13, v14);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if ((_DWORD)result == -71142)
  {
    corelog.getter((uint64_t)v9);
    swift_errorRetain(a1);
    v22 = swift_errorRetain(a1);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 138543362;
      swift_errorRetain(a1);
      v26 = _swift_stdlib_bridgeErrorToNSError(a1);
      v32 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v25 + 4, v25 + 12);
      v27 = v31;
      *v31 = v26;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "#BT,onCBError,interrupted,%{public}@", v25, 0xCu);
      v28 = sub_1000039AC((uint64_t *)&unk_1003805A0);
      swift_arrayDestroy(v27, 1, v28);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    v12 = v9;
  }
  else if ((_DWORD)result == -71148)
  {
    corelog.getter((uint64_t)v12);
    swift_errorRetain(a1);
    v15 = swift_errorRetain(a1);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138543362;
      swift_errorRetain(a1);
      v19 = _swift_stdlib_bridgeErrorToNSError(a1);
      v32 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v18 + 4, v18 + 12);
      v20 = v31;
      *v31 = v19;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "#BT,onCBError,bluetoothdUnloaded,%{public}@", v18, 0xCu);
      v21 = sub_1000039AC((uint64_t *)&unk_1003805A0);
      swift_arrayDestroy(v20, 1, v21);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    v29 = corelog.getter((uint64_t)v6);
    __chkstk_darwin(v29);
    v30 = 135;
    Logger._fault(_:function:file:line:)(sub_1002ADA24, (uint64_t)(&v31 - 4), (uint64_t *)"onCBError(_:)", 13, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreBluetooth.swift", 78, 2);
    swift_errorRelease(a1);
    v12 = v6;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
}

uint64_t sub_1002AD06C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t sub_1002AD0A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 56, 7);
}

void sub_1002AD0DC(void *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t isLeft;
  char v9;
  uint64_t v10;
  void *v11;

  v11 = a1;
  v3 = sub_1000039AC(&qword_10036A6C8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtAdvInfoType7.init()(v4);
  ALBtAdvInfoType7._isSameAccount.setter(((unint64_t)objc_msgSend(v11, "deviceFlags") >> 7) & 1);
  ALBtAdvInfoType7._isFamily.setter((objc_msgSend(v11, "deviceFlags") >> 8) & 1);
  ALBtAdvInfoType7._isSharedHome.setter((objc_msgSend(v11, "deviceFlags") >> 9) & 1);
  if ((a2 & 1) != 0)
    v7 = ((unint64_t)objc_msgSend(v11, "deviceFlags") >> 34) & 1;
  else
    v7 = 2;
  isLeft = ALBtAdvInfoType7._isLeftBud.setter(v7);
  v9 = ALBtAdvInfoType7._isLeftBud.getter(isLeft);
  if (v9 != 2)
  {
    sub_1002AD1F8(v11, v9 & 1, (uint64_t)v6);
    ALBtAdvInfoType7._placement.setter(v6);
  }

}

uint64_t sub_1002AD1F8@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  _DWORD *v17;
  _DWORD *v18;
  char v19;
  _DWORD *v20;
  unsigned int v21;
  char **v22;
  unsigned int *v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  int v34;
  uint64_t v35;

  v32 = a3;
  v31 = type metadata accessor for ALBtAdvInfoType7.Placement(0);
  v5 = *(_QWORD *)(v31 - 8);
  v6 = __chkstk_darwin(v31);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v28 - v9;
  v11 = type metadata accessor for Logger(0);
  v30 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  allog.getter((uint64_t)v13);
  v14 = a1;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (_DWORD *)swift_slowAlloc(11, -1);
    v28 = v11;
    v18 = v17;
    *v17 = 67109376;
    v19 = a2;
    v34 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 1, v17 + 2);
    *((_WORD *)v18 + 4) = 256;
    v29 = v8;
    v33 = -[NSObject primaryBudSide](v14, "primaryBudSide");
    v8 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, (char *)v18 + 10, (char *)v18 + 11);

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "ALBtAdvInfoType7.Placement,isLeftBud,%{BOOL}d,budSide,%hhu", (uint8_t *)v18, 0xBu);
    v20 = v18;
    v11 = v28;
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    v19 = a2;

    v15 = v14;
  }

  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v11);
  v21 = -[NSObject primaryBudSide](v14, "primaryBudSide");
  if (v21 == 2)
  {
    v24 = &selRef_secondaryPlacement;
    if ((v19 & 1) == 0)
      v24 = &selRef_primaryPlacement;
    switch(objc_msgSend(v14, *v24))
    {
      case 1u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.inEar(_:);
        break;
      case 2u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.outOfEar(_:);
        break;
      case 3u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.inCase(_:);
        break;
      case 4u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.onEar(_:);
        break;
      case 5u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.offEar(_:);
        break;
      case 6u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.onNeck(_:);
        break;
      case 7u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.disabled(_:);
        break;
      default:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.unknown(_:);
        break;
    }
    v10 = v8;
    goto LABEL_30;
  }
  if (v21 == 1)
  {
    v22 = &selRef_primaryPlacement;
    if ((v19 & 1) == 0)
      v22 = &selRef_secondaryPlacement;
    switch(objc_msgSend(v14, *v22))
    {
      case 1u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.inEar(_:);
        break;
      case 2u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.outOfEar(_:);
        break;
      case 3u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.inCase(_:);
        break;
      case 4u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.onEar(_:);
        break;
      case 5u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.offEar(_:);
        break;
      case 6u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.onNeck(_:);
        break;
      case 7u:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.disabled(_:);
        break;
      default:
        v23 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.unknown(_:);
        break;
    }
LABEL_30:
    v26 = v31;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v10, *v23, v31);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v32, v10, v26);
    v25 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v32, v25, 1, v31);
  }
  v25 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v32, v25, 1, v31);
}

uint64_t sub_1002AD5B0@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  switch(a1)
  {
    case 1:
      v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.inEar(_:);
      break;
    case 2:
      v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.outOfEar(_:);
      break;
    case 3:
      v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.inCase(_:);
      break;
    case 4:
      v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.onEar(_:);
      break;
    case 5:
      v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.offEar(_:);
      break;
    case 6:
      v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.onNeck(_:);
      break;
    case 7:
      v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.disabled(_:);
      break;
    default:
      v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.unknown(_:);
      break;
  }
  v4 = *v3;
  v5 = type metadata accessor for ALBtAdvInfoType7.Placement(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
}

void sub_1002AD66C(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = objc_autoreleasePoolPush();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 232))(a1);
  objc_autoreleasePoolPop(v3);
}

void sub_1002AD6B0()
{
  sub_1002AD6C4((uint64_t)dispatch thunk of ALTightbeamHandler.pingForDaemonWatchdog(id:), (uint64_t)&unk_10035BA70);
}

void sub_1002AD6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v3 = *(void **)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v7[4] = a1;
  v8 = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1002AABE8;
  v7[3] = a2;
  v5 = _Block_copy(v7);
  v6 = v8;
  swift_retain(v4);
  swift_release(v6);
  objc_msgSend(v3, "activateWithCompletion:", v5);
  _Block_release(v5);
}

uint64_t sub_1002AD754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ALBtAdvertisement(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002AD7D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for ALBtAdvertisement(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v0 + 24);
  v6 = sub_1000039AC((uint64_t *)&unk_100382330);
  v7 = swift_allocObject(v6, v4 + *(_QWORD *)(v2 + 72), v3 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002CAB70;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v7 + v4, v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 248))(v7, 1);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_1002AD878(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000039AC(&qword_10036A6C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002AD8C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002AD8E4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002AD918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD);
  uint64_t v5;
  _BYTE v7[24];

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  swift_beginAccess(v2 + 16, v7, 0, 0);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 248);
  v5 = swift_bridgeObjectRetain(v3);
  v4(v5, 0);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1002AD980()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v6;
  _QWORD v7[2];

  v1 = *(_QWORD *)(v0 + 16);
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  v2._object = (void *)0x8000000100306640;
  v2._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v2);
  v6 = v1;
  v3 = sub_1000039AC(&qword_100380878);
  _print_unlocked<A, B>(_:_:)(&v6, v7, v3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  return v7[0];
}

uint64_t sub_1002ADA24()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  _QWORD v14[2];

  v1 = *(_QWORD *)(v0 + 16);
  v10 = 0;
  v11 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  v2._object = (void *)0x8000000100306620;
  v2._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v2);
  swift_getErrorValue(v1, v13, &v10);
  dispatch thunk of Error._code.getter(v11, v12);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 44;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v9 = v1;
  v6 = sub_1000039AC(&qword_100380878);
  _print_unlocked<A, B>(_:_:)(&v9, v14, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  return v14[0];
}

uint64_t type metadata accessor for ALLeechCoreBluetooth()
{
  return objc_opt_self(_TtC8ALDaemon20ALLeechCoreBluetooth);
}

unint64_t sub_1002ADB4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100382340;
  if (!qword_100382340)
  {
    v1 = objc_opt_self(CBDevice);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100382340);
  }
  return result;
}

id sub_1002ADBC4()
{
  id *v0;

  return *v0;
}

void sub_1002ADBCC(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t sub_1002ADBF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_retain(*(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t sub_1002ADC20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t sub_1002ADC54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for ALResultOptions(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_1002ADC90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ClientCallback(0) + 24);
  return sub_1002ADCFC(v3, a1);
}

uint64_t type metadata accessor for ClientCallback(uint64_t a1)
{
  uint64_t result;

  result = qword_1003DACD0;
  if (!qword_1003DACD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClientCallback);
  return result;
}

uint64_t sub_1002ADCFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000039AC(&qword_100381B18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002ADD44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ClientCallback(0) + 24);
  return sub_1002ADD74(a1, v3);
}

uint64_t sub_1002ADD74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000039AC(&qword_100381B18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1002ADDBC())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for ClientCallback(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1002ADDE4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ClientCallback(0) + 28));
}

uint64_t sub_1002ADE0C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for ClientCallback(0);
  v6 = v2 + *(int *)(result + 28);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_1002ADE50())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for ClientCallback(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1002ADE78()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ClientCallback(0) + 32));
}

uint64_t sub_1002ADEA0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for ClientCallback(0);
  v6 = v2 + *(int *)(result + 32);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_1002ADEE4())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for ClientCallback(0);
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1002ADF0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v15;
  char *v16;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v19 = a3;
  v20 = a2;
  v8 = type metadata accessor for ALResultOptions(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for ClientCallback(0);
  v13 = (uint64_t)a5 + v12[6];
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v14(v13, 1, 1, v8);
  v15 = (char *)a5 + v12[7];
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  v16 = (char *)a5 + v12[8];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  *a5 = v19;
  a5[1] = a1;
  a5[2] = v20;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a4, 1, v8) == 1)
    return sub_1002AE074(a4);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
  v18(v11, a4, v8);
  sub_1002AE074(v13);
  v18((char *)v13, (uint64_t)v11, v8);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v14)(v13, 0, 1, v8);
}

uint64_t sub_1002AE074(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000039AC(&qword_100381B18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002AE0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  _QWORD *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;

  v3 = v2;
  v6 = type metadata accessor for ClientCallback(0);
  __chkstk_darwin(v6);
  v8 = (id *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v12);
  v13 = sub_1002AE2C8(v3, (uint64_t)v8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v27 = a1;
    v16 = swift_slowAlloc(12, -1);
    v28 = a2;
    v17 = (uint8_t *)v16;
    v18 = (_QWORD *)swift_slowAlloc(8, -1);
    v25 = v10;
    v26 = v3;
    *(_DWORD *)v17 = 138543362;
    v24 = v17 + 4;
    v29 = *v8;
    v19 = v29;
    v20 = v29;
    a1 = v27;
    v10 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v24, v17 + 12);
    *v18 = v19;
    v3 = v26;
    sub_1002A2F0C((uint64_t)v8);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "leeching to %{public}@", v17, 0xCu);
    v21 = sub_1000039AC((uint64_t *)&unk_1003805A0);
    swift_arrayDestroy(v18, 1, v21);
    swift_slowDealloc(v18, -1, -1);
    v22 = v17;
    a2 = v28;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_1002A2F0C((uint64_t)v8);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, a2);
}

uint64_t sub_1002AE2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClientCallback(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002AE30C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1002AE340(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v6[24];

  result = swift_beginAccess(v2 + 16, v6, 1, 0);
  *(_QWORD *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t sub_1002AE390()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1002AE3C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 32, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1002AE408()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_retain(*(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t sub_1002AE434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  result = swift_allocObject(v3, 64, 7);
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 1;
  *(_QWORD *)(result + 32) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(result + 40) = a2;
  *(_QWORD *)(result + 48) = a3;
  *(_QWORD *)(result + 56) = a1;
  return result;
}

uint64_t sub_1002AE48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 1;
  *(_QWORD *)(v3 + 32) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 48) = a3;
  *(_QWORD *)(v3 + 56) = a1;
  return v3;
}

uint64_t sub_1002AE4B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v3 = *v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ClientCallback(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v22 = v1[7];
  sub_1002AE2C8(a1, (uint64_t)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(&unk_10035BAD0, v14 + v12, v13 | 7);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v15 + 24) = v1;
  sub_1002AF440((uint64_t)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14);
  aBlock[4] = sub_1002AF484;
  v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10028B824;
  aBlock[3] = &unk_10035BAE8;
  v16 = _Block_copy(aBlock);
  v17 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v17);
  v25 = &_swiftEmptyArrayStorage;
  v18 = sub_1002A13E8();
  v19 = sub_1000039AC((uint64_t *)&unk_100380840);
  v20 = sub_1002A1430();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v4, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v23);
  return swift_release(v27);
}

uint64_t sub_1002AE6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t (*v8)(_BYTE *, _QWORD);
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _BYTE v16[32];

  v4 = type metadata accessor for ClientCallback(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1002AE2C8(a2, (uint64_t)v7);
  v8 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 160))(v16);
  v10 = v9;
  v11 = *v9;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
  *v10 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v11 = sub_1002AF180(0, *(_QWORD *)(v11 + 16) + 1, 1, v11);
    *v10 = v11;
  }
  v14 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    v11 = sub_1002AF180(v13 > 1, v14 + 1, 1, v11);
    *v10 = v11;
  }
  *(_QWORD *)(v11 + 16) = v14 + 1;
  sub_1002AF440((uint64_t)v7, v11+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v14);
  return v8(v16, 0);
}

uint64_t sub_1002AE80C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject **v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  NSObject **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void **aBlock;
  _QWORD v43[4];
  uint64_t v44;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  __chkstk_darwin(v7);
  v37 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v12);
  v13 = a1;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v35 = v2;
    v16 = swift_slowAlloc(12, -1);
    v34 = v9;
    v17 = (uint8_t *)v16;
    v32 = (NSObject **)swift_slowAlloc(8, -1);
    v36 = v6;
    *(_DWORD *)v17 = 138543362;
    aBlock = (void **)&v13->isa;
    v18 = v13;
    v33 = v4;
    v19 = v18;
    v2 = v35;
    v6 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v43, v17 + 4, v17 + 12);
    v20 = v32;
    *v32 = v13;

    v4 = v33;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Remove client,%{public}@", v17, 0xCu);
    v21 = sub_1000039AC((uint64_t *)&unk_1003805A0);
    swift_arrayDestroy(v20, 1, v21);
    swift_slowDealloc(v20, -1, -1);
    v22 = v17;
    v9 = v34;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {

    v14 = v13;
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v23 = swift_allocObject(&unk_10035BB20, 32, 7);
  *(_QWORD *)(v23 + 16) = v2;
  *(_QWORD *)(v23 + 24) = v13;
  v43[3] = sub_1002AF4F8;
  v44 = v23;
  aBlock = _NSConcreteStackBlock;
  v43[0] = 1107296256;
  v43[1] = sub_10028B824;
  v43[2] = &unk_10035BB38;
  v24 = _Block_copy(&aBlock);
  v25 = v13;
  v26 = swift_retain(v2);
  v27 = v37;
  static DispatchQoS.unspecified.getter(v26);
  v41 = &_swiftEmptyArrayStorage;
  v28 = sub_1002A13E8();
  v29 = sub_1000039AC((uint64_t *)&unk_100380840);
  v30 = sub_1002A1430();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v29, v30, v4, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v27, v6, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v39);
  return swift_release(v44);
}

uint64_t sub_1002AEB5C(uint64_t a1, int a2)
{
  uint64_t (***v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void (**v14)(uint64_t, unint64_t);
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[2];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  LODWORD(v39) = a2;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ClientCallback(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (void **)((char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v14 = (void (**)(uint64_t, unint64_t))((char *)v34 - v13);
  v15 = v40;
  result = ((uint64_t (*)(uint64_t, _QWORD))v2[5])(a1, v39);
  if (!v15)
  {
    v39 = result;
    v40 = v17;
    v36 = v5;
    v37 = v4;
    v18 = (*v2)[18]();
    v20 = *(_QWORD *)(v18 + 16);
    if (v20)
    {
      v34[0] = v18;
      v34[1] = 0;
      v21 = v18 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v38 = *(_QWORD *)(v9 + 72);
      *(_QWORD *)&v19 = 138543362;
      v35 = v19;
      v23 = v36;
      v22 = v37;
      do
      {
        sub_1002AE2C8(v21, (uint64_t)v14);
        corelog.getter((uint64_t)v7);
        v24 = sub_1002AE2C8((uint64_t)v14, (uint64_t)v12);
        v25 = Logger.logObject.getter(v24);
        v26 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v25, v26))
        {
          v27 = swift_slowAlloc(12, -1);
          v28 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v27 = v35;
          v29 = *v12;
          *(_QWORD *)(v27 + 4) = *v12;
          *v28 = v29;
          v30 = v29;
          sub_1002A2F0C((uint64_t)v12);
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "leeching to %{public}@", (uint8_t *)v27, 0xCu);
          v31 = sub_1000039AC((uint64_t *)&unk_1003805A0);
          swift_arrayDestroy(v28, 1, v31);
          v32 = v28;
          v23 = v36;
          swift_slowDealloc(v32, -1, -1);
          v33 = v27;
          v22 = v37;
          swift_slowDealloc(v33, -1, -1);
        }
        else
        {
          sub_1002A2F0C((uint64_t)v12);
        }

        (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v22);
        v14[1](v39, v40);
        sub_1002A2F0C((uint64_t)v14);
        v21 += v38;
        --v20;
      }
      while (v20);
      swift_bridgeObjectRelease(v34[0]);
      return sub_100017F3C(v39, v40);
    }
    else
    {
      swift_bridgeObjectRelease(v18);
      return sub_100017F3C(v39, v40);
    }
  }
  return result;
}

uint64_t sub_1002AEE08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t MetatypeMetadata;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v1;
  v5 = *v1;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v9);
  v10 = swift_retain_n(v1, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    v14 = swift_slowAlloc(22, -1);
    v37 = a1;
    v15 = v14;
    v35 = swift_slowAlloc(32, -1);
    v41 = v35;
    *(_DWORD *)v15 = 136446466;
    v34 = v13;
    v36 = v7;
    v16 = *(_QWORD *)(v5 + 80);
    v39 = v16;
    MetatypeMetadata = swift_getMetatypeMetadata(v16);
    v18 = String.init<A>(describing:)(&v39, MetatypeMetadata);
    v38 = v2;
    v20 = v19;
    v39 = sub_10001818C(v18, v19, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v15 + 4, v15 + 12);
    v21 = swift_bridgeObjectRelease(v20);
    *(_WORD *)(v15 + 12) = 2050;
    v22 = (*(uint64_t (**)(uint64_t))(*v3 + 144))(v21);
    v33 = v6;
    v23 = *(_QWORD *)(v22 + 16);
    swift_release(v3);
    swift_bridgeObjectRelease(v22);
    v39 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v15 + 14, v15 + 22);
    swift_release(v3);
    _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v34, "Leeching %{public}s, clients count %{public}ld", (uint8_t *)v15, 0x16u);
    v24 = v35;
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v25 = v15;
    a1 = v37;
    swift_slowDealloc(v25, -1, -1);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v33);
  }
  else
  {

    swift_release_n(v3, 2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v16 = *(_QWORD *)(v5 + 80);
  }
  v26 = sub_1002AF134(v16, v16);
  v27 = *(_QWORD *)(v16 - 8);
  v28 = swift_allocObject(v26, ((*(unsigned __int8 *)(v27 + 80) + (unint64_t)*(unsigned int *)(v26 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72), *(unsigned __int8 *)(v27 + 80) | (unint64_t)*(unsigned __int16 *)(v26 + 52));
  v29 = static Array._adoptStorage(_:count:)(v28, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v30, a1, v16);
  type metadata accessor for Array(0, v16);
  (*(void (**)(uint64_t, uint64_t))(*v3 + 192))(v29, 1);
  return swift_bridgeObjectRelease(v29);
}

uint64_t sub_1002AF0E8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));

  return v0;
}

uint64_t sub_1002AF114()
{
  uint64_t v0;

  sub_1002AF0E8();
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_1002AF134(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType(a2))
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return sub_1000039AC(&qword_100381DC8);
  else
    return type metadata accessor for _ContiguousArrayStorage(0, a2);
}

uint64_t sub_1002AF180(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_1000039AC(&qword_1003823E8);
  v11 = *(_QWORD *)(type metadata accessor for ClientCallback(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for ClientCallback(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002AFEE0(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_1002AF388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for ClientCallback(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + v4 + 16));
  v6 = v0 + v4 + *(int *)(v1 + 24);
  v7 = type metadata accessor for ALResultOptions(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1002AF440(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClientCallback(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002AF484()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClientCallback(0) - 8) + 80);
  return sub_1002AE6D4(*(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_1002AF4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002AF4C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1002AF4CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1002AF4F8()
{
  uint64_t v0;
  uint64_t (*v1)(_BYTE *);
  id v2;
  void (*v3)(_BYTE *, _QWORD);
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  int64_t v7;
  _BYTE v8[32];

  v1 = *(uint64_t (**)(_BYTE *))(**(_QWORD **)(v0 + 16) + 160);
  v2 = *(id *)(v0 + 24);
  v3 = (void (*)(_BYTE *, _QWORD))v1(v8);
  v5 = v4;
  v6 = sub_1002AFFF8(v4, (uint64_t)v2);

  v7 = *(_QWORD *)(*v5 + 16);
  if (v7 < v6)
  {
    __break(1u);
  }
  else
  {
    sub_1002B0288(v6, v7);
    v3(v8, 0);
  }
}

char *sub_1002AF588(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v8;
    v9 = a3[6];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for ALResultOptions(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    v15 = v4;
    swift_retain(v8);
    if (v14(v11, 1, v12))
    {
      v16 = sub_1000039AC(&qword_100381B18);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = a3[7];
    v18 = a3[8];
    v19 = &v7[v17];
    v20 = (uint64_t)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = *(_BYTE *)(v20 + 8);
    v21 = &v7[v18];
    v22 = (uint64_t)a2 + v18;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = *(_BYTE *)(v22 + 8);
  }
  return v7;
}

uint64_t sub_1002AF6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_release(*(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for ALResultOptions(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_1002AF750(uint64_t a1, __int128 *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;

  v6 = *((_QWORD *)a2 + 2);
  v22 = *a2;
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ALResultOptions(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  v13 = (id)v22;
  swift_retain(v6);
  if (v12(v9, 1, v10))
  {
    v14 = sub_1000039AC(&qword_100381B18);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[7];
  v16 = a3[8];
  v17 = a1 + v15;
  v18 = (uint64_t)a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a1 + v16;
  v20 = (uint64_t)a2 + v16;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  return a1;
}

uint64_t sub_1002AF880(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v9;
  swift_retain(v9);
  swift_release(v10);
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = type metadata accessor for ALResultOptions(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_1000039AC(&qword_100381B18);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = (uint64_t *)(a2 + v20);
  v23 = *v22;
  *(_BYTE *)(v21 + 8) = *((_BYTE *)v22 + 8);
  *(_QWORD *)v21 = v23;
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = (uint64_t *)(a2 + v24);
  v27 = *v26;
  *(_BYTE *)(v25 + 8) = *((_BYTE *)v26 + 8);
  *(_QWORD *)v25 = v27;
  return a1;
}

uint64_t sub_1002AF9F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for ALResultOptions(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1000039AC(&qword_100381B18);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t sub_1002AFAFC(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v7);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for ALResultOptions(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_1000039AC(&qword_100381B18);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[7];
  v18 = a3[8];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  return a1;
}

uint64_t sub_1002AFC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002AFC6C);
}

uint64_t sub_1002AFC6C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000039AC(&qword_100381B18);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1002AFCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002AFCF8);
}

char *sub_1002AFCF8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1000039AC(&qword_100381B18);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_1002AFD70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for () + 64;
  sub_1002AFE00(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = "\t";
    v4[4] = "\t";
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

void sub_1002AFE00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1003823A8)
  {
    v2 = type metadata accessor for ALResultOptions(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1003823A8);
  }
}

uint64_t sub_1002AFE58(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = "\t";
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = (char *)&value witness table for () + 64;
  v2[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 4, v2, a1 + 88);
}

uint64_t type metadata accessor for DataVendorType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B04B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DataVendorType);
}

uint64_t sub_1002AFECC(unint64_t a1)
{
  return sub_1002AF180(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1002AFEE0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(type metadata accessor for ClientCallback(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002AFFF8(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = type metadata accessor for ClientCallback(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v30 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v31 = (uint64_t)&v27 - v9;
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v27 - v10);
  v28 = a1;
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 16);
  if (!v13)
    return 0;
  v14 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_1002B0430();
  v15 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain(v12);
  v16 = 0;
  v29 = v14;
  while ((static NSObject.== infix(_:_:)(*(_QWORD *)(v12 + v14), a2) & 1) == 0)
  {
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease(v12);
      return *(_QWORD *)(v12 + 16);
    }
  }
  result = swift_bridgeObjectRelease(v12);
  if (!__OFADD__(v16, 1))
  {
    v18 = *(_QWORD *)(v12 + 16);
    if (v16 + 1 == v18)
      return v16;
    v32 = a2;
    v19 = v15 + v14;
    v20 = v16 + 1;
    v21 = v28;
    while (v20 < v18)
    {
      sub_1002AE2C8(v12 + v19, (uint64_t)v11);
      v22 = static NSObject.== infix(_:_:)(*v11, v32);
      result = sub_1002A2F0C((uint64_t)v11);
      if ((v22 & 1) == 0)
      {
        if (v20 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0)
            goto LABEL_29;
          v23 = *v21;
          v24 = *(_QWORD *)(*v21 + 16);
          if (v16 >= v24)
            goto LABEL_30;
          result = sub_1002AE2C8(v23 + v29 + v16 * v15, v31);
          if (v20 >= v24)
            goto LABEL_31;
          sub_1002AE2C8(v23 + v19, v30);
          result = swift_isUniquelyReferenced_nonNull_native(v23);
          v21 = v28;
          *v28 = v23;
          if ((result & 1) == 0)
          {
            result = sub_1002AFECC(v23);
            v23 = result;
            *v21 = result;
          }
          if (v16 >= *(_QWORD *)(v23 + 16))
            goto LABEL_32;
          result = sub_1002B046C(v30, v23 + v29 + v16 * v15);
          if (v20 >= *(_QWORD *)(*v21 + 16))
            goto LABEL_33;
          result = sub_1002B046C(v31, *v21 + v19);
        }
        if (__OFADD__(v16++, 1))
          goto LABEL_28;
      }
      v26 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_27;
      v12 = *v21;
      v18 = *(_QWORD *)(*v21 + 16);
      ++v20;
      v19 += v15;
      if (v26 == v18)
        return v16;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002B0288(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1002AF180(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = type metadata accessor for ClientCallback(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy(v17, v7, v12);
  if (!v7)
    goto LABEL_25;
  v19 = *(_QWORD *)(v4 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_31;
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack(v17, v21, v20, v12);
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v17);
    }
    v23 = *(_QWORD *)(v4 + 16);
    v24 = __OFADD__(v23, v8);
    v25 = v23 - v7;
    if (!v24)
    {
      *(_QWORD *)(v4 + 16) = v25;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

unint64_t sub_1002B0430()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003819C0;
  if (!qword_1003819C0)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1003819C0);
  }
  return result;
}

uint64_t sub_1002B046C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClientCallback(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B04B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_1002B04E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *object;
  uint64_t result;
  int v11;
  _BOOL8 v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v0 = sub_1000039AC(&qword_100380860);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiScanSingleAccessPoint.init()(v1);
  v4 = sub_1002B0E4C(0xFFFFFFFFFFFFFFFFLL);
  v5 = v4;
  ALWiFiScanSingleAccessPoint._mac.setter(v4, 0);
  v6 = sub_1000039AC((uint64_t *)&unk_100380810);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002CAB70;
  *(_QWORD *)(v7 + 56) = &type metadata for UInt64;
  *(_QWORD *)(v7 + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(v7 + 32) = v5;
  v8._countAndFlagsBits = String.init(format:_:)(22565, 0xE200000000000000, v7);
  object = v8._object;
  v17[0] = 0x2D6D6F646E6172;
  v17[1] = 0xE700000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  ALWiFiScanSingleAccessPoint._ssid.setter(v17[0]);
  result = sub_1002B0DC0(61);
  if (__OFSUB__(0, result + 20))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v17[0]) = 0;
    ALWiFiScanSingleAccessPoint._rssidB.setter(-(result + 20));
    v11 = sub_1002B0DC0(14);
    LOBYTE(v17[0]) = 0;
    ALWiFiScanSingleAccessPoint._channel.setter((v11 + 1));
    v12 = (double)sub_1002B0E4C(0x20000000000001uLL) * 1.11022302e-16 + 0.0 > 0.9;
    ALWiFiScanSingleAccessPoint._isAph.setter(v12);
    v13 = (double)sub_1002B0E4C(0x20000000000001uLL) * 1.11022302e-16 + 0.0 > 0.9;
    ALWiFiScanSingleAccessPoint._isMoving.setter(v13);
    v14 = enum case for ALWiFiScanSingleAccessPoint.Band.band2G(_:);
    v15 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band(0);
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v3, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v3, 0, 1, v15);
    return ALWiFiScanSingleAccessPoint._band.setter(v3);
  }
  return result;
}

uint64_t sub_1002B0708@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t result;
  void (*v28)(unint64_t *, _QWORD);
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v2 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v35 - v7;
  v9 = type metadata accessor for Logger(0);
  v36 = *(_QWORD *)(v9 - 8);
  v37 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ALWiFiScanResult(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiScanResult.init()(v17);
  v20 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a1, v19, v15);
  static ALTimeStamp.now()(v20);
  v21 = type metadata accessor for ALTimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v14, 0, 1, v21);
  v38 = a1;
  ALWiFiScanResult._scanTimestamp.setter(v14);
  v22 = sub_1002B0E4C(0x29uLL);
  v23 = corelog.getter((uint64_t)v11);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v26 = 134217984;
    v39 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v26 + 4, v26 + 12);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Simulating AP count %ld", v26, 0xCu);
    swift_slowDealloc(v26, -1, -1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v11, v37);
  if ((v22 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    for (; v22; --v22)
    {
      sub_1002B04E8();
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
      v28 = (void (*)(unint64_t *, _QWORD))ALWiFiScanResult._accessPoints.modify(&v39);
      v30 = v29;
      v31 = *v29;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v29);
      *v30 = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v31 = sub_1002874F4(0, *(_QWORD *)(v31 + 16) + 1, 1, v31);
        *v30 = v31;
      }
      v34 = *(_QWORD *)(v31 + 16);
      v33 = *(_QWORD *)(v31 + 24);
      if (v34 >= v33 >> 1)
      {
        v31 = sub_1002874F4(v33 > 1, v34 + 1, 1, v31);
        *v30 = v31;
      }
      *(_QWORD *)(v31 + 16) = v34 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v31+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v34, v6, v2);
      v28(&v39, 0);
      result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
  }
  return result;
}

uint64_t sub_1002B0A5C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v0 = sub_1000039AC(&qword_1003824C0);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000039AC((uint64_t *)&unk_100380850);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036A6D8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = ALWiFiNotification.init()(v7);
  static ALTimeStamp.now()(v10);
  v11 = type metadata accessor for ALTimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 0, 1, v11);
  ALWiFiNotification._timestamp.setter(v9);
  sub_1002B0708((uint64_t)v5);
  v12 = type metadata accessor for ALWiFiScanResult(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 0, 1, v12);
  ALWiFiNotification._scanResult.setter(v5);
  ALWiFiNotification._simulated.setter(1);
  ALWiFiNotification._available.setter(1);
  v13 = enum case for ALWiFiNotification.ScanType.normal(_:);
  v14 = type metadata accessor for ALWiFiNotification.ScanType(0);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v2, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v2, 0, 1, v14);
  return ALWiFiNotification._scanType.setter(v2);
}

uint64_t sub_1002B0C04(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  swift_allocObject(v3, 40, 7);
  v7 = sub_1002B0ED4(a1, a2, a3);
  swift_release(a3);
  return v7;
}

uint64_t sub_1002B0C64(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = sub_1002B0ED4(a1, a2, a3);
  swift_release(a3);
  return v4;
}

uint64_t sub_1002B0C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v1 = type metadata accessor for ALWiFiNotification(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002B0A5C();
  (*(void (**)(char *))(v0 + 24))(v4);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_1002B0D2C()
{
  _swift_stdlib_reportUnimplementedInitializer("ALDaemon.ALWiFiSimulated", 24, "init(queue:interval:)", 21, 0);
  __break(1u);
}

uint64_t sub_1002B0D58()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1002B0D60()
{
  uint64_t v0;

  v0 = ALDataGenerationBase.deinit();
  swift_release(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t sub_1002B0D8C()
{
  uint64_t v0;

  v0 = ALDataGenerationBase.deinit();
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_1002B0DC0(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  int64_t v5;
  uint64_t v6;

  if ((_DWORD)result)
  {
    v1 = result;
    v2 = result;
    v6 = 0;
    swift_stdlib_random(&v6, 8);
    v3 = v6 * (unint64_t)v2;
    result = HIDWORD(v3);
    if (v3 < v1)
    {
      v4 = -v1 % v1;
      if (v4 > v3)
      {
        do
        {
          v6 = 0;
          swift_stdlib_random(&v6, 8);
          v5 = v6 * (unint64_t)v2;
        }
        while (v4 > v5);
        return v5 >> 32;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1002B0E4C(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002B0ED4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  void (*v14)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  double v21;
  _BYTE v22[8];

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_retain(v3);
  v12 = sub_1002A951C();
  v13 = *v12;
  v14 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v12 + 112);
  swift_retain(*v12);
  v14(&v21, 0xD000000000000019, 0x80000001003066E0, &type metadata for Double);
  swift_release(v13);
  if (v22[0])
    v15 = 6.0;
  else
    v15 = v21;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  swift_retain(a3);
  swift_release(v4);
  v16 = corelog.getter((uint64_t)v11);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v19 = 134217984;
    v21 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v19 + 4, v19 + 12);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "ALWiFiSimulated,interval,%f,sec", v19, 0xCu);
    swift_slowDealloc(v19, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return ALDataGenerationBase.init(queue:interval:)(a1, v15);
}

uint64_t type metadata accessor for ALWiFiSimulated()
{
  return objc_opt_self(_TtC8ALDaemon15ALWiFiSimulated);
}

double sub_1002B10BC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 40, v2, 0, 0);
  return *(double *)(v0 + 40);
}

uint64_t sub_1002B10EC(double a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 40, v4, 1, 0);
  *(double *)(v1 + 40) = a1;
  return result;
}

uint64_t sub_1002B1128(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  swift_allocObject(v3, 64, 7);
  return sub_1002B1178(a1, a2, a3);
}

uint64_t sub_1002B1178(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(double *__return_ptr, unint64_t, unint64_t, void *);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  __int16 v103;
  unsigned __int8 *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  char v118;
  unsigned __int8 *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  unsigned int v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  char v140;
  double v141;
  double v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  char *v156;
  uint64_t v157;
  void *v158;
  unint64_t v159;
  char v160;
  uint64_t v161;
  double v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  double v171;
  char v172;
  char v173;
  uint64_t v174;
  NSObject *v175;
  os_log_type_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t result;
  __int128 v181;
  char *v182;
  __int128 v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(uint64_t, uint64_t);
  uint64_t v202;
  double v203;
  void *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  void *v210;
  char *v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char v216[8];
  uint64_t v217;
  char v218[8];
  double v219;
  unint64_t v220;

  v4 = v3;
  v8 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v8);
  v192 = (char *)&v181 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for ALWiFiScanResult(0);
  v186 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v185 = (char *)&v181 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v196 = *(_QWORD *)(v197 - 8);
  v11 = __chkstk_darwin(v197);
  v194 = (char *)&v181 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v208 = (char *)&v181 - v13;
  v14 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v14);
  v213 = (char *)&v181 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for URL(0);
  v190 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v206 = (char *)&v181 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger(0);
  v212 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v211 = (char *)&v181 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v193 = (uint64_t)&v181 - v21;
  v22 = __chkstk_darwin(v20);
  v195 = (uint64_t)&v181 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v181 - v24;
  v4[3] = &_swiftEmptyArrayStorage;
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = a2;
  v4[7] = a3;
  v189 = a3;
  swift_retain(a3);
  v26 = sub_1002A951C();
  v27 = *v26;
  v28 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v26 + 112);
  swift_retain(*v26);
  v28(&v219, 0xD000000000000013, 0x8000000100306700, &type metadata for String);
  swift_release(v27);
  if (v220)
    v29 = *(_QWORD *)&v219;
  else
    v29 = 0xD000000000000018;
  if (v220)
    v30 = v220;
  else
    v30 = 0x8000000100306720;
  v31 = *v26;
  v32 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v26 + 112);
  swift_retain(v31);
  v32(&v219, 0xD00000000000001ALL, 0x8000000100306740, &type metadata for Double);
  swift_release(v31);
  if ((_BYTE)v220)
    v33 = 1.0;
  else
    v33 = v219;
  corelog.getter((uint64_t)v25);
  v34 = swift_bridgeObjectRetain_n(v30, 2);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(22, -1);
    v210 = a1;
    v38 = v37;
    *(double *)&v39 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
    v219 = *(double *)&v39;
    *(_DWORD *)v38 = 136315394;
    v205 = v17;
    swift_bridgeObjectRetain(v30);
    v217 = sub_10001818C(v29, v30, (uint64_t *)&v219);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease_n(v30, 3);
    *(_WORD *)(v38 + 12) = 2048;
    v217 = *(_QWORD *)&v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v38 + 14, v38 + 22);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "ALWiFiReplayerCSV,path,%s,interval,%f", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    v40 = v38;
    a1 = v210;
    swift_slowDealloc(v40, -1, -1);

    v41 = *(void (**)(uint64_t, uint64_t))(v212 + 8);
    v42 = v25;
    v17 = v205;
  }
  else
  {

    swift_bridgeObjectRelease_n(v30, 2);
    v41 = *(void (**)(uint64_t, uint64_t))(v212 + 8);
    v42 = v25;
  }
  v201 = v41;
  v41((uint64_t)v42, v17);
  v188 = a1;
  v43 = ALDataGenerationBase.init(queue:interval:)(v188, v33);
  swift_retain(v43);
  v44 = v206;
  v45 = URL.init(fileURLWithPath:)(v29, v30);
  v46 = v213;
  static String.Encoding.utf8.getter(v45);
  v47 = String.init(contentsOf:encoding:)(v44, v46);
  v49 = v48;
  swift_bridgeObjectRelease(v30);
  v50 = sub_1002B24D0(0x7FFFFFFFFFFFFFFFLL, 1, v47, v49);
  v207 = *(_QWORD *)(v50 + 16);
  if (v207)
  {
    v210 = 0;
    v203 = 0.0;
    v51 = 0;
    v199 = v50 + 32;
    v184 = v218;
    v202 = 1;
    *((_QWORD *)&v52 + 1) = 2;
    v181 = xmmword_1002CAB70;
    *(_QWORD *)&v52 = 134218242;
    v183 = v52;
    v182 = (char *)&type metadata for Any + 8;
    v204 = &_swiftEmptyArrayStorage;
    v205 = v17;
    v200 = v43;
    v198 = v50;
    while (1)
    {
      if (v51 >= *(_QWORD *)(v50 + 16))
      {
        __break(1u);
        goto LABEL_101;
      }
      if (!v51)
        goto LABEL_17;
      v209 = v51;
      v54 = (unint64_t *)(v199 + 32 * v51);
      v56 = *v54;
      v55 = v54[1];
      v57 = v54[2];
      v58 = (char *)v54[3];
      swift_bridgeObjectRetain_n(v58, 2);
      v212 = v57;
      v213 = (char *)(v55 >> 14);
      if (v55 >> 14 == v56 >> 14)
      {
        v59 = Substring.subscript.getter(v56, v55, v56, v55, v57, v58);
        v61 = v60;
        v63 = v62;
        v65 = v64;
        v66 = sub_10029BE6C(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
        v68 = *((_QWORD *)v66 + 2);
        v67 = *((_QWORD *)v66 + 3);
        if (v68 >= v67 >> 1)
          v66 = sub_10029BE6C((char *)(v67 > 1), v68 + 1, 1, v66);
        *((_QWORD *)v66 + 2) = v68 + 1;
        v69 = &v66[32 * v68];
        *((_QWORD *)v69 + 4) = v59;
        v70 = v69 + 32;
        goto LABEL_43;
      }
      swift_bridgeObjectRetain(v58);
      v71 = v56;
      v72 = v56;
      v73 = v56;
      v66 = (char *)&_swiftEmptyArrayStorage;
      v211 = v58;
      do
      {
        v74 = Substring.subscript.getter(v71, v56, v55, v57, v58);
        v76 = v75;
        if (v74 == 44 && v75 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease(0xE100000000000000);
        }
        else
        {
          v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease(v76);
          if ((v77 & 1) == 0)
          {
            v71 = Substring.index(after:)(v71, v56, v55, v57, v58);
            continue;
          }
        }
        if (v71 >> 14 < v72 >> 14)
          goto LABEL_109;
        v78 = Substring.subscript.getter(v72, v71, v56, v55, v57, v58);
        v80 = v79;
        v82 = v81;
        v84 = v83;
        if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
          v66 = sub_10029BE6C(0, *((_QWORD *)v66 + 2) + 1, 1, v66);
        v86 = *((_QWORD *)v66 + 2);
        v85 = *((_QWORD *)v66 + 3);
        if (v86 >= v85 >> 1)
          v66 = sub_10029BE6C((char *)(v85 > 1), v86 + 1, 1, v66);
        *((_QWORD *)v66 + 2) = v86 + 1;
        v87 = &v66[32 * v86];
        *((_QWORD *)v87 + 4) = v78;
        *((_QWORD *)v87 + 5) = v80;
        *((_QWORD *)v87 + 6) = v82;
        *((_QWORD *)v87 + 7) = v84;
        v58 = v211;
        v57 = v212;
        v71 = Substring.index(after:)(v71, v56, v55, v212, v211);
        v72 = v71;
        v73 = v71;
      }
      while (v213 != (char *)(v71 >> 14));
      if ((unint64_t)v213 < v73 >> 14)
        goto LABEL_109;
      v88 = Substring.subscript.getter(v73, v55, v56, v55, v57, v58);
      v61 = v89;
      v63 = v90;
      v65 = v91;
      swift_bridgeObjectRelease(v58);
      if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
        v66 = sub_10029BE6C(0, *((_QWORD *)v66 + 2) + 1, 1, v66);
      v93 = *((_QWORD *)v66 + 2);
      v92 = *((_QWORD *)v66 + 3);
      if (v93 >= v92 >> 1)
        v66 = sub_10029BE6C((char *)(v92 > 1), v93 + 1, 1, v66);
      *((_QWORD *)v66 + 2) = v93 + 1;
      v94 = &v66[32 * v93];
      *((_QWORD *)v94 + 4) = v88;
      v70 = v94 + 32;
LABEL_43:
      v70[1] = v61;
      v70[2] = v63;
      v70[3] = v65;
      swift_bridgeObjectRelease(v58);
      if (*((_QWORD *)v66 + 2) == 5)
      {
        v95 = swift_bridgeObjectRelease(v58);
        v96 = v208;
        ALWiFiScanSingleAccessPoint.init()(v95);
        v17 = v205;
        v43 = v200;
        if (*((_QWORD *)v66 + 2))
        {
          v97 = *((_QWORD *)v66 + 4);
          v98 = *((_QWORD *)v66 + 5);
          if ((v98 ^ (unint64_t)v97) < 0x4000)
          {
            v119 = 0;
          }
          else
          {
            v100 = *((_QWORD *)v66 + 6);
            v99 = *((_QWORD *)v66 + 7);
            v101 = v210;
            v102 = sub_10029CFC0(*((_QWORD *)v66 + 4), *((_QWORD *)v66 + 5), v100, v99, 16);
            v210 = v101;
            if ((v103 & 0x100) != 0)
            {
              swift_bridgeObjectRetain(v99);
              v104 = sub_10029C1BC(v97, v98, v100, v99, 16);
              v118 = v117;
              swift_bridgeObjectRelease(v99);
              v105 = v118 & 1;
            }
            else
            {
              v104 = (unsigned __int8 *)v102;
              v105 = v103 & 1;
            }
            if (v105)
              v119 = 0;
            else
              v119 = v104;
            v96 = v208;
          }
          ALWiFiScanSingleAccessPoint._mac.setter(v119, 0);
          if (*((_QWORD *)v66 + 2) >= 3uLL)
          {
            v120 = *((_QWORD *)v66 + 12);
            v121 = *((_QWORD *)v66 + 13);
            if ((v121 ^ (unint64_t)v120) < 0x4000)
            {
              v126 = 0;
            }
            else
            {
              v123 = *((_QWORD *)v66 + 14);
              v122 = *((_QWORD *)v66 + 15);
              v124 = v210;
              v125 = sub_1002B37E8(*((_QWORD *)v66 + 12), *((_QWORD *)v66 + 13), v123, v122, 10);
              v210 = v124;
              if ((v125 & 0x10000000000) != 0)
              {
                swift_bridgeObjectRetain(v122);
                v125 = sub_1002B36F8(v120, v121, v123, v122, 10);
                swift_bridgeObjectRelease(v122);
              }
              if ((v125 & (unint64_t)&_mh_execute_header) != 0)
                v126 = 0;
              else
                v126 = v125;
              v96 = v208;
            }
            LOBYTE(v219) = 0;
            ALWiFiScanSingleAccessPoint._channel.setter(v126);
            if (*((_QWORD *)v66 + 2) >= 4uLL)
            {
              v127 = *((_QWORD *)v66 + 16);
              v128 = *((_QWORD *)v66 + 17);
              if ((v128 ^ (unint64_t)v127) < 0x4000)
              {
                v133 = 0;
              }
              else
              {
                v130 = *((_QWORD *)v66 + 18);
                v129 = *((_QWORD *)v66 + 19);
                v131 = v210;
                v132 = sub_1002B37E8(*((_QWORD *)v66 + 16), *((_QWORD *)v66 + 17), v130, v129, 10);
                v210 = v131;
                if ((v132 & 0x10000000000) != 0)
                {
                  swift_bridgeObjectRetain(v129);
                  v132 = sub_1002B36F8(v127, v128, v130, v129, 10);
                  swift_bridgeObjectRelease(v129);
                }
                if ((v132 & (unint64_t)&_mh_execute_header) != 0)
                  v133 = 0;
                else
                  v133 = v132;
                v96 = v208;
              }
              LOBYTE(v219) = 0;
              ALWiFiScanSingleAccessPoint._rssidB.setter(v133);
              if (*((_QWORD *)v66 + 2) >= 5uLL)
              {
                v134 = sub_1002B38B8(*((_QWORD *)v66 + 20), *((_QWORD *)v66 + 21), *((_QWORD *)v66 + 22), *((_QWORD *)v66 + 23), 1702195828, 0xE400000000000000);
                ALWiFiScanSingleAccessPoint._isMoving.setter(v134 & 1);
                if (*((_QWORD *)v66 + 2) >= 2uLL)
                {
                  v135 = *((_QWORD *)v66 + 8);
                  v136 = *((_QWORD *)v66 + 9);
                  v137 = *((_QWORD *)v66 + 10);
                  v138 = *((_QWORD *)v66 + 11);
                  swift_bridgeObjectRetain(v138);
                  swift_bridgeObjectRelease(v66);
                  v139 = COERCE_DOUBLE(Double.init(_:)(v135, v136, v137, v138));
                  if ((v140 & 1) != 0)
                    v139 = 0.0;
                  v141 = v139;
                  if ((v202 & 1) != 0)
                    v142 = v139;
                  else
                    v142 = v203;
                  if (vabdd_f64(v142, v139) >= 2.22044605e-16)
                  {
                    v150 = v204;
                    sub_1002B29A0(*(unint64_t *)&v142, 0, (uint64_t)v204);
                    swift_bridgeObjectRelease(v150);
                    v151 = sub_1000039AC(&qword_100380C30);
                    v152 = v196;
                    v153 = *(unsigned __int8 *)(v196 + 80);
                    v154 = (v153 + 32) & ~v153;
                    v155 = (_OWORD *)swift_allocObject(v151, v154 + *(_QWORD *)(v196 + 72), v153 | 7);
                    v155[1] = v181;
                    v204 = v155;
                    v156 = (char *)v155 + v154;
                    v157 = v197;
                    (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v156, v96, v197);
                    (*(void (**)(char *, uint64_t))(v152 + 8))(v96, v157);
                  }
                  else
                  {
                    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v194, v96, v197);
                    v143 = (unint64_t)v204;
                    if ((swift_isUniquelyReferenced_nonNull_native(v204) & 1) == 0)
                      v143 = sub_100017F80(0, *(_QWORD *)(v143 + 16) + 1, 1, v143, &qword_100380C30, (uint64_t (*)(_QWORD))&type metadata accessor for ALWiFiScanSingleAccessPoint);
                    v145 = *(_QWORD *)(v143 + 16);
                    v144 = *(_QWORD *)(v143 + 24);
                    if (v145 >= v144 >> 1)
                      v143 = sub_100017F80(v144 > 1, v145 + 1, 1, v143, &qword_100380C30, (uint64_t (*)(_QWORD))&type metadata accessor for ALWiFiScanSingleAccessPoint);
                    *(_QWORD *)(v143 + 16) = v145 + 1;
                    v146 = (char *)v143;
                    v147 = v196;
                    v148 = (*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80);
                    v204 = v146;
                    v149 = v197;
                    (*(void (**)(char *, char *, uint64_t))(v196 + 32))(&v146[v148 + *(_QWORD *)(v196 + 72) * v145], v194, v197);
                    (*(void (**)(char *, uint64_t))(v147 + 8))(v96, v149);
                  }
                  v202 = 0;
                  v203 = v141;
LABEL_16:
                  v44 = v206;
                  v50 = v198;
                  v51 = v209;
                  goto LABEL_17;
                }
LABEL_105:
                __break(1u);
LABEL_106:
                __break(1u);
                goto LABEL_107;
              }
LABEL_104:
              __break(1u);
              goto LABEL_105;
            }
LABEL_103:
            __break(1u);
            goto LABEL_104;
          }
LABEL_102:
          __break(1u);
          goto LABEL_103;
        }
LABEL_101:
        __break(1u);
        goto LABEL_102;
      }
      swift_bridgeObjectRelease(v66);
      v106 = v195;
      corelog.getter(v195);
      v107 = swift_bridgeObjectRetain(v58);
      v108 = Logger.logObject.getter(v107);
      v109 = static os_log_type_t.error.getter(v108);
      if (!os_log_type_enabled(v108, v109))
      {

        swift_bridgeObjectRelease_n(v58, 2);
        v53 = v106;
        v17 = v205;
        v201(v53, v205);
        v43 = v200;
        goto LABEL_16;
      }
      v110 = swift_slowAlloc(22, -1);
      *(double *)&v111 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
      v219 = *(double *)&v111;
      *(_DWORD *)v110 = v183;
      v217 = v209;
      v112 = v184;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v184, v110 + 4, v110 + 12);
      *(_WORD *)(v110 + 12) = 2080;
      v213 = (char *)(v110 + 14);
      swift_bridgeObjectRetain(v58);
      v113 = static String._fromSubstring(_:)(v56, v55, v212, v58);
      v115 = v114;
      swift_bridgeObjectRelease(v58);
      v217 = sub_10001818C(v113, v115, (uint64_t *)&v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v112, v213, v110 + 22);
      swift_bridgeObjectRelease_n(v58, 2);
      swift_bridgeObjectRelease(v115);
      _os_log_impl((void *)&_mh_execute_header, v108, v109, "line %ld: '%s' is ill-formed. Please follow [mac],[timestamp],[channel],[rssidB],[isMoving]. Skip!", (uint8_t *)v110, 0x16u);
      swift_arrayDestroy(v111, 1, v182);
      swift_slowDealloc(v111, -1, -1);
      swift_slowDealloc(v110, -1, -1);

      v116 = v106;
      v17 = v205;
      v201(v116, v205);
      v51 = v209;
      v43 = v200;
      v44 = v206;
      v50 = v198;
LABEL_17:
      if (++v51 == v207)
      {
        swift_bridgeObjectRelease(v50);
        v158 = v204;
        v159 = *(_QWORD *)&v203;
        v160 = v202;
        goto LABEL_91;
      }
    }
  }
  swift_bridgeObjectRelease(v50);
  v159 = 0;
  v158 = &_swiftEmptyArrayStorage;
  v160 = 1;
LABEL_91:
  sub_1002B29A0(v159, v160 & 1, (uint64_t)v158);
  swift_bridgeObjectRelease(v158);
  (*(void (**)(char *, uint64_t))(v190 + 8))(v44, v191);
  v161 = v43 + 24;
  swift_beginAccess(v43 + 24, &v219, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)(v43 + 24) + 16))
    goto LABEL_96;
  v162 = machContTimeSec()();
  swift_beginAccess(v43 + 24, &v217, 32, 0);
  if (!*(_QWORD *)(*(_QWORD *)v161 + 16))
    goto LABEL_106;
  v163 = v186;
  v164 = *(_QWORD *)v161
       + ((*(unsigned __int8 *)(v186 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80));
  v165 = v185;
  v166 = v187;
  v167 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v186 + 16))(v185, v164, v187);
  ALWiFiScanResult._scanTimestamp.getter(v167);
  v168 = v192;
  (*(void (**)(char *, uint64_t))(v163 + 8))(v165, v166);
  swift_endAccess(&v217);
  v169 = type metadata accessor for ALTimeStamp(0);
  v170 = *(_QWORD *)(v169 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v168, 1, v169) == 1)
  {
LABEL_107:
    __break(1u);
  }
  else
  {
    v171 = COERCE_DOUBLE(ALTimeStamp.machContinuousTimeSec.getter());
    v173 = v172;
    (*(void (**)(char *, uint64_t))(v170 + 8))(v168, v169);
    if ((v173 & 1) == 0)
    {
      swift_beginAccess(v43 + 40, &v217, 1, 0);
      *(double *)(v43 + 40) = v162 - v171;
LABEL_96:
      corelog.getter(v193);
      v174 = swift_retain(v43);
      v175 = Logger.logObject.getter(v174);
      v176 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v175, v176))
      {
        v177 = swift_slowAlloc(22, -1);
        *(_DWORD *)v177 = 134218240;
        v215 = *(_QWORD *)(*(_QWORD *)(v43 + 24) + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, v216, v177 + 4, v177 + 12);
        *(_WORD *)(v177 + 12) = 2048;
        swift_beginAccess(v43 + 40, &v215, 0, 0);
        v214 = *(_QWORD *)(v43 + 40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215, v177 + 14, v177 + 22);
        swift_release(v43);
        _os_log_impl((void *)&_mh_execute_header, v175, v176, "Total Wifi scans from file: %ld. Offset is %f", (uint8_t *)v177, 0x16u);
        swift_slowDealloc(v177, -1, -1);
        v178 = v189;
      }
      else
      {
        swift_release(v189);
        v178 = v43;
      }
      swift_release(v178);
      v179 = v188;
      swift_release(v43);

      v201(v193, v17);
      return v43;
    }
  }
  __break(1u);
LABEL_109:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
  return result;
}

uint64_t sub_1002B24D0(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t result;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v53[2];
  unint64_t v54;

  if (a1 < 0)
  {
LABEL_54:
    LOBYTE(v47) = 2;
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, v47, 1552, 0);
    __break(1u);
  }
  else
  {
    v8 = swift_allocObject(&unk_10035BC40, 24, 7);
    *(_QWORD *)(v8 + 16) = &_swiftEmptyArrayStorage;
    v9 = swift_allocObject(&unk_10035BC68, 24, 7);
    v10 = v9;
    *(_QWORD *)(v9 + 16) = 15;
    v11 = a4 >> 60;
    v12 = HIBYTE(a4) & 0xF;
    if (a1)
    {
      v13 = (a4 & 0x2000000000000000) != 0 ? HIBYTE(a4) & 0xF : a3 & 0xFFFFFFFFFFFFLL;
      if (v13)
      {
        v49 = a1;
        v14 = (v11 & ((a3 & 0x800000000000000) == 0)) == 0;
        v15 = 7;
        if (!v14)
          v15 = 11;
        v48 = v15 | (v13 << 16);
        v54 = 4 * v13;
        v16 = (char *)&_swiftEmptyArrayStorage;
        v17 = 15;
        v18 = 15;
        v50 = a3;
        v51 = v9;
        while (1)
        {
          v19 = String.subscript.getter(v17, a3, a4);
          v21 = v20;
          if (!((v20 & 0x2000000000000000) != 0 ? HIBYTE(v20) & 0xF : v19 & 0xFFFFFFFFFFFFLL))
            break;
          if ((v20 & 0x1000000000000000) != 0)
          {
            v24 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(0, v19, v20);
          }
          else
          {
            if ((v20 & 0x2000000000000000) != 0)
            {
              v53[0] = v19;
              v53[1] = v20 & 0xFFFFFFFFFFFFFFLL;
              v23 = v53;
            }
            else if ((v19 & 0x1000000000000000) != 0)
            {
              v23 = (_QWORD *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else
            {
              v23 = (_QWORD *)_StringObject.sharedUTF8.getter(v19, v20);
            }
            v24 = _decodeScalar(_:startingAt:)(v23);
          }
          v4 = v24;
          swift_bridgeObjectRelease(v21);
          if ((v4 - 14) > 0xFFFFFFFB || (v4 - 8232) < 2 || (_DWORD)v4 == 133)
          {
            if (v18 >> 14 == v17 >> 14 && (a2 & 1) != 0)
            {
              v17 = String.index(after:)(v17, a3, a4);
              *(_QWORD *)(v10 + 16) = v17;
              v18 = v17;
            }
            else
            {
              if (v17 >> 14 < v18 >> 14)
                goto LABEL_53;
              v25 = a3;
              v26 = a4;
              v27 = String.subscript.getter(v18, v17, v25, a4);
              v29 = v28;
              v31 = v30;
              v4 = v32;
              if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
                v16 = sub_10029BE6C(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
              v33 = v16;
              v34 = *((_QWORD *)v16 + 2);
              v35 = v33;
              v36 = *((_QWORD *)v33 + 3);
              if (v34 >= v36 >> 1)
                v35 = sub_10029BE6C((char *)(v36 > 1), v34 + 1, 1, v35);
              *((_QWORD *)v35 + 2) = v34 + 1;
              v37 = &v35[32 * v34];
              v16 = v35;
              *((_QWORD *)v37 + 4) = v27;
              *((_QWORD *)v37 + 5) = v29;
              *((_QWORD *)v37 + 6) = v31;
              *((_QWORD *)v37 + 7) = v4;
              *(_QWORD *)(v8 + 16) = v35;
              a4 = v26;
              a3 = v50;
              v18 = String.index(after:)(v17, v50, a4);
              v10 = v51;
              *(_QWORD *)(v51 + 16) = v18;
              v17 = v18;
              if (*((_QWORD *)v16 + 2) == v49)
              {
LABEL_42:
                if (v54 == v18 >> 14 && (a2 & 1) != 0)
                {
                  swift_bridgeObjectRelease(a4);
                  goto LABEL_50;
                }
                if (v54 < v18 >> 14)
                {
LABEL_53:
                  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
                  __break(1u);
                  goto LABEL_54;
                }
                v39 = a3;
                a3 = (uint64_t)v16;
                v18 = String.subscript.getter(v18, v48, v39, a4);
                v21 = v40;
                v16 = v41;
                v4 = v42;
                swift_bridgeObjectRelease(a4);
                if ((swift_isUniquelyReferenced_nonNull_native(a3) & 1) != 0)
                {
LABEL_47:
                  v44 = *(_QWORD *)(a3 + 16);
                  v43 = *(_QWORD *)(a3 + 24);
                  if (v44 >= v43 >> 1)
                    a3 = (uint64_t)sub_10029BE6C((char *)(v43 > 1), v44 + 1, 1, (char *)a3);
                  *(_QWORD *)(a3 + 16) = v44 + 1;
                  v45 = (_QWORD *)(a3 + 32 * v44);
                  v45[4] = v18;
                  v45[5] = v21;
                  v45[6] = v16;
                  v45[7] = v4;
                  v16 = (char *)a3;
                  *(_QWORD *)(v8 + 16) = a3;
                  v10 = v51;
                  goto LABEL_50;
                }
LABEL_52:
                a3 = (uint64_t)sub_10029BE6C(0, *(_QWORD *)(a3 + 16) + 1, 1, (char *)a3);
                goto LABEL_47;
              }
            }
          }
          else
          {
            v17 = String.index(after:)(v17, a3, a4);
          }
          if (v54 == v17 >> 14)
            goto LABEL_42;
        }
        __break(1u);
        goto LABEL_52;
      }
    }
    if ((a4 & 0x2000000000000000) == 0)
      v12 = a3 & 0xFFFFFFFFFFFFLL;
    v14 = (v11 & ((a3 & 0x800000000000000) == 0)) == 0;
    v38 = 7;
    if (!v14)
      v38 = 11;
    sub_10029BB0C(v38 | (v12 << 16), v9, a2 & 1, v8, a3, a4);
    swift_bridgeObjectRelease(a4);
    v16 = *(char **)(v8 + 16);
LABEL_50:
    swift_bridgeObjectRetain(v16);
    swift_release(v8);
    swift_release(v10);
    return (uint64_t)v16;
  }
  return result;
}

uint64_t sub_1002B29A0(unint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t result;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  _BYTE v30[32];

  v4 = v3;
  v8 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v8);
  v10 = &v30[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for ALWiFiScanResult(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = &v30[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = __chkstk_darwin(v13);
  v18 = &v30[-v17];
  if (*(_QWORD *)(a3 + 16))
  {
    v19 = ALWiFiScanResult.init()(result);
    v20.n128_u64[0] = a1;
    if ((a2 & 1) != 0)
      v20.n128_f64[0] = 0.0;
    ALTimeStamp.init(machContinuousTimeSec:)(v19, v20);
    v21 = type metadata accessor for ALTimeStamp(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 0, 1, v21);
    ALWiFiScanResult._scanTimestamp.setter(v10);
    v22 = swift_bridgeObjectRetain(a3);
    ALWiFiScanResult._accessPoints.setter(v22);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16))(v15, v18, v11);
    v23 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 176))(v30);
    v25 = v24;
    v26 = *v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v24);
    *v25 = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v26 = sub_100017F80(0, *(_QWORD *)(v26 + 16) + 1, 1, v26, (uint64_t *)&unk_100382600, (uint64_t (*)(_QWORD))&type metadata accessor for ALWiFiScanResult);
      *v25 = v26;
    }
    v29 = *(_QWORD *)(v26 + 16);
    v28 = *(_QWORD *)(v26 + 24);
    if (v29 >= v28 >> 1)
    {
      v26 = sub_100017F80(v28 > 1, v29 + 1, 1, v26, (uint64_t *)&unk_100382600, (uint64_t (*)(_QWORD))&type metadata accessor for ALWiFiScanResult);
      *v25 = v26;
    }
    *(_QWORD *)(v26 + 16) = v29 + 1;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v12 + 32))(v26+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v29, v15, v11);
    v23(v30, 0);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v18, v11);
  }
  return result;
}

void sub_1002B2BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  char v54;
  char v55;
  uint64_t v56;
  Swift::Double v57;
  Swift::Double v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t (*v67)(void);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t *, _QWORD);
  _QWORD *v80;
  uint64_t (*v81)(void);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(void);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  Swift::Double v110;
  uint64_t v111;
  NSObject *v112;
  int v113;
  _BOOL4 v114;
  _DWORD *v115;
  _DWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint8_t *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t (***v138)(uint64_t *);
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t *, _QWORD);
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  __int128 v155;
  char *v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  void (*v163)(char *, unint64_t, uint64_t);
  uint64_t v164;
  char *v165;
  uint64_t (*v166)(void);
  uint64_t v167;
  uint64_t (*v168)(void);
  uint64_t v169;
  uint64_t v170[5];

  v1 = v0;
  v2 = sub_1000039AC(&qword_1003824C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v146 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000039AC((uint64_t *)&unk_100380850);
  __chkstk_darwin(v5);
  v150 = (char *)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ALWiFiNotification(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v146 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v158 = *(_QWORD *)(v11 - 8);
  v159 = v11;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v146 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v164 = (uint64_t)&v146 - v15;
  v16 = sub_1000039AC(&qword_10036A6D8);
  v17 = __chkstk_darwin(v16);
  v151 = (char *)&v146 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v153 = (char *)&v146 - v20;
  __chkstk_darwin(v19);
  v161 = (char *)&v146 - v21;
  v167 = type metadata accessor for ALWiFiScanResult(0);
  v162 = *(_QWORD *)(v167 - 8);
  v22 = __chkstk_darwin(v167);
  v152 = (char *)&v146 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v156 = (char *)&v146 - v25;
  v26 = __chkstk_darwin(v24);
  v160 = (char *)&v146 - v27;
  v28 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 160);
  v168 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 184);
  v29 = ((uint64_t (*)(uint64_t))v168)(v26);
  v30 = v29 + 1;
  if (__OFADD__(v29, 1))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v148 = v4;
  v149 = v10;
  v146 = v8;
  v147 = v7;
  v31 = v28();
  v32 = *(_QWORD *)(v31 + 16);
  v33 = swift_bridgeObjectRelease(v31);
  v165 = v14;
  v166 = v28;
  if (v30 < v32)
  {
    *(_QWORD *)&v34 = 136315138;
    v155 = v34;
    v154 = (char *)&type metadata for Any + 8;
    while (1)
    {
      v35 = ((uint64_t (*)(uint64_t))v168)(v33);
      v36 = v35 + 1;
      if (__OFADD__(v35, 1))
        break;
      v37 = v28();
      if ((v36 & 0x8000000000000000) != 0)
        goto LABEL_35;
      v38 = v37;
      if (v36 >= *(_QWORD *)(v37 + 16))
        goto LABEL_36;
      v39 = v1;
      v40 = v162;
      v41 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
      v42 = *(_QWORD *)(v162 + 72);
      v43 = v37 + v41 + v42 * v36;
      v44 = v160;
      v45 = v167;
      v163 = *(void (**)(char *, unint64_t, uint64_t))(v162 + 16);
      v163(v160, v43, v167);
      v46 = swift_bridgeObjectRelease(v38);
      v47 = v161;
      ALWiFiScanResult._scanTimestamp.getter(v46);
      v48 = v47;
      v49 = *(void (**)(char *, uint64_t))(v40 + 8);
      v49(v44, v45);
      v50 = type metadata accessor for ALTimeStamp(0);
      v51 = *(_QWORD *)(v50 - 8);
      v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 48))(v48, 1, v50);
      if ((_DWORD)v52 == 1)
        goto LABEL_49;
      v53 = COERCE_DOUBLE(ALTimeStamp.machContinuousTimeSec.getter(v52));
      v55 = v54;
      v56 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v48, v50);
      if ((v55 & 1) != 0)
        goto LABEL_50;
      v1 = v39;
      v57 = (*(double (**)(uint64_t))(*(_QWORD *)v39 + 208))(v56) + v53;
      v58 = machContTimeSec()();
      v14 = v165;
      v28 = v166;
      if (v57 >= v58)
        goto LABEL_18;
      v59 = v164;
      corelog.getter(v164);
      v60 = swift_retain_n(v39, 2);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.error.getter(v61);
      if (os_log_type_enabled(v61, (os_log_type_t)v62))
      {
        LODWORD(v157) = v62;
        v63 = v1;
        v64 = swift_slowAlloc(12, -1);
        v65 = swift_slowAlloc(32, -1);
        v170[0] = v65;
        *(_DWORD *)v64 = v155;
        v66 = v168();
        v67 = v28;
        v68 = v63;
        v69 = v67();
        if ((v66 & 0x8000000000000000) != 0)
          goto LABEL_39;
        v70 = v69;
        if (v66 >= *(_QWORD *)(v69 + 16))
          goto LABEL_40;
        v71 = v69 + v41 + v66 * v42;
        v72 = v156;
        v73 = v167;
        v163(v156, v71, v167);
        v74 = swift_bridgeObjectRelease(v70);
        v75 = ALWiFiScanResult.description.getter(v74);
        v77 = v76;
        v49(v72, v73);
        *(_QWORD *)(v64 + 4) = sub_10001818C(v75, v77, v170);
        swift_release_n(v68, 2);
        swift_bridgeObjectRelease(v77);
        _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v157, "One Wifi scan from file was discarded: %s. Please decrease TickIntervalSec", (uint8_t *)v64, 0xCu);
        swift_arrayDestroy(v65, 1, v154);
        swift_slowDealloc(v65, -1, -1);
        v78 = v64;
        v1 = v68;
        swift_slowDealloc(v78, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v164, v159);
        v14 = v165;
        v28 = v166;
      }
      else
      {

        swift_release_n(v1, 2);
        (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v59, v159);
      }
      v79 = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v1 + 200))(v170);
      v81 = v168;
      if (__OFADD__(*v80, 1))
        goto LABEL_37;
      ++*v80;
      v82 = v79(v170, 0);
      v83 = ((uint64_t (*)(uint64_t))v81)(v82);
      v84 = v83 + 1;
      if (__OFADD__(v83, 1))
        goto LABEL_38;
      v85 = v28();
      v86 = *(_QWORD *)(v85 + 16);
      v33 = swift_bridgeObjectRelease(v85);
      if (v84 >= v86)
        goto LABEL_18;
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_18:
  v87 = v168;
  v88 = ((uint64_t (*)(uint64_t))v168)(v33);
  v89 = v28();
  v90 = *(_QWORD *)(v89 + 16);
  v91 = swift_bridgeObjectRelease(v89);
  if (v88 < v90)
  {
    v92 = ((uint64_t (*)(uint64_t))v87)(v91);
    v93 = v28();
    if ((v92 & 0x8000000000000000) != 0)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v94 = v93;
    if (v92 >= *(_QWORD *)(v93 + 16))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v95 = v162;
    v163 = (void (*)(char *, unint64_t, uint64_t))((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
    v164 = v1;
    v161 = *(char **)(v162 + 72);
    v96 = *(void (**)(char *, char *, uint64_t))(v162 + 16);
    v97 = v152;
    v98 = v167;
    v96(v152, (char *)v163 + v93 + (_QWORD)v161 * v92, v167);
    v99 = swift_bridgeObjectRelease(v94);
    v100 = v153;
    ALWiFiScanResult._scanTimestamp.getter(v99);
    v101 = *(void (**)(char *, uint64_t))(v95 + 8);
    v101(v97, v98);
    v102 = type metadata accessor for ALTimeStamp(0);
    v103 = *(_QWORD *)(v102 - 8);
    v104 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v103 + 48))(v100, 1, v102);
    if ((_DWORD)v104 == 1)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    v105 = COERCE_DOUBLE(ALTimeStamp.machContinuousTimeSec.getter(v104));
    v107 = v106;
    v108 = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v100, v102);
    if ((v107 & 1) != 0)
    {
LABEL_52:
      __break(1u);
      return;
    }
    v109 = v164;
    v110 = (*(double (**)(uint64_t))(*(_QWORD *)v164 + 208))(v108) + v105;
    if (v110 < machContTimeSec()())
    {
      corelog.getter((uint64_t)v14);
      v111 = swift_retain_n(v109, 2);
      v112 = Logger.logObject.getter(v111);
      v113 = static os_log_type_t.debug.getter();
      v114 = os_log_type_enabled(v112, (os_log_type_t)v113);
      v160 = (char *)v96;
      if (v114)
      {
        LODWORD(v155) = v113;
        v115 = (_DWORD *)swift_slowAlloc(12, -1);
        v154 = (char *)swift_slowAlloc(32, -1);
        v170[0] = (uint64_t)v154;
        v157 = (uint8_t *)v115;
        *v115 = 136315138;
        v116 = v115 + 1;
        v117 = v168();
        v118 = v166();
        if ((v117 & 0x8000000000000000) != 0)
        {
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        v119 = v118;
        if (v117 >= *(_QWORD *)(v118 + 16))
        {
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        v120 = v156;
        v121 = v167;
        ((void (*)(char *, char *, uint64_t))v160)(v156, (char *)v163 + v118 + v117 * (_QWORD)v161, v167);
        v122 = swift_bridgeObjectRelease(v119);
        v123 = ALWiFiScanResult.description.getter(v122);
        v125 = v124;
        v101(v120, v121);
        v126 = sub_10001818C(v123, v125, v170);
        v127 = v157;
        v169 = v126;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v170, v116, v157 + 12);
        v109 = v164;
        swift_release_n(v164, 2);
        swift_bridgeObjectRelease(v125);
        _os_log_impl((void *)&_mh_execute_header, v112, (os_log_type_t)v155, "One Wifi scan from file: %s", v127, 0xCu);
        v128 = v154;
        swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v128, -1, -1);
        swift_slowDealloc(v127, -1, -1);

        v129 = (*(uint64_t (**)(char *, uint64_t))(v158 + 8))(v165, v159);
      }
      else
      {

        swift_release_n(v109, 2);
        v129 = (*(uint64_t (**)(char *, uint64_t))(v158 + 8))(v14, v159);
      }
      v130 = v149;
      v131 = ALWiFiNotification.init()(v129);
      v132 = v151;
      static ALTimeStamp.now()(v131);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v132, 0, 1, v102);
      v133 = ALWiFiNotification._timestamp.setter(v132);
      v134 = ((uint64_t (*)(uint64_t))v168)(v133);
      v135 = v166();
      v136 = v148;
      if ((v134 & 0x8000000000000000) == 0)
      {
        v137 = v135;
        if (v134 < *(_QWORD *)(v135 + 16))
        {
          v138 = (uint64_t (***)(uint64_t *))v109;
          v139 = v150;
          v140 = v167;
          ((void (*)(char *, char *, uint64_t))v160)(v150, (char *)v163 + v135 + v134 * (_QWORD)v161, v167);
          swift_bridgeObjectRelease(v137);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v139, 0, 1, v140);
          ALWiFiNotification._scanResult.setter(v139);
          ALWiFiNotification._simulated.setter(1);
          ALWiFiNotification._available.setter(1);
          v141 = enum case for ALWiFiNotification.ScanType.normal(_:);
          v142 = type metadata accessor for ALWiFiNotification.ScanType(0);
          v143 = *(_QWORD *)(v142 - 8);
          (*(void (**)(char *, uint64_t, uint64_t))(v143 + 104))(v136, v141, v142);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v143 + 56))(v136, 0, 1, v142);
          ALWiFiNotification._scanType.setter(v136);
          v144 = (void (*)(uint64_t *, _QWORD))(*v138)[25](v170);
          if (!__OFADD__(*v145, 1))
          {
            ++*v145;
            v144(v170, 0);
            ((void (*)(char *))v138[6])(v130);
            (*(void (**)(char *, uint64_t))(v146 + 8))(v130, v147);
            return;
          }
          goto LABEL_46;
        }
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
  }
}

void sub_1002B36CC()
{
  _swift_stdlib_reportUnimplementedInitializer("ALDaemon.ALWiFiReplayerCSV", 26, "init(queue:interval:)", 21, 0);
  __break(1u);
}

uint64_t sub_1002B36F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v7 = sub_10029DF1C();
  swift_bridgeObjectRetain(a4);
  v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v7);
  v10 = v8;
  v11 = v9;
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v13 = HIBYTE(v11) & 0xF;
    v18 = v10;
    v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }
  v10 = sub_10029CA28(v8, v9);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  v11 = v15;
  if ((v15 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v10 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }
LABEL_7:
  v16 = sub_10029C52C(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16 | ((((unint64_t)v16 >> 32) & 1) << 32);
}

uint64_t sub_1002B37E8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  _QWORD v13[2];
  unsigned __int8 v14;

  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_10029D5BC((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

uint64_t sub_1002B38B8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if ((a6 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a6) & 0xF;
  else
    v6 = a5 & 0xFFFFFFFFFFFFLL;
  v7 = a1 >> 16;
  v8 = a2 >> 16;
  if (a3 == a5 && a4 == a6 && !v7 && v8 == v6)
    return 1;
  else
    return _stringCompareInternal(_:_:_:_:expecting:)(a3, a4, v7, v8) & 1;
}

uint64_t type metadata accessor for ALWiFiReplayerCSV()
{
  return objc_opt_self(_TtC8ALDaemon17ALWiFiReplayerCSV);
}

uint64_t sub_1002B394C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002B3970()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002B3980()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1002B39B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_unknownObjectRelease(v3);
}

uint64_t ALDataGenerationBase.__allocating_init(queue:interval:)(void *a1, double a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 24, 7);
  ALDataGenerationBase.init(queue:interval:)(a1, a2);
  return v5;
}

uint64_t ALDataGenerationBase.init(queue:interval:)(void *a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _QWORD aBlock[5];
  uint64_t v60;
  char v61[32];

  v57 = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  __chkstk_darwin(v4);
  v49 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v46 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTimeInterval(0);
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = type metadata accessor for DispatchTime(0);
  v52 = *(_QWORD *)(v54 - 8);
  v10 = __chkstk_darwin(v54);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v53 = (char *)&v45 - v13;
  v14 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + 16) = 0;
  v18 = (uint64_t *)(v2 + 16);
  sub_100289BD8();
  aBlock[0] = &_swiftEmptyArrayStorage;
  v19 = sub_10000FD38((unint64_t *)&unk_100380820, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v20 = sub_1000039AC((uint64_t *)&unk_100382620);
  v21 = sub_10028D310((unint64_t *)&unk_100380830, (uint64_t *)&unk_100382620);
  v22 = v19;
  v23 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v14, v22);
  v24 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v17, v23);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  swift_beginAccess(v18, v61, 1, 0);
  v25 = *v18;
  *v18 = v24;
  swift_unknownObjectRelease(v25);
  v26 = *v18;
  if (*v18)
  {
    ObjectType = swift_getObjectType(*v18);
    v28 = swift_unknownObjectRetain(v26);
    static DispatchTime.now()(v28);
    v29 = v53;
    + infix(_:_:)(v12, a2);
    v30 = *(void (**)(char *, uint64_t))(v52 + 8);
    v31 = v54;
    v30(v12, v54);
    *v9 = 0;
    v33 = v55;
    v32 = v56;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v55 + 104))(v9, enum case for DispatchTimeInterval.nanoseconds(_:), v56);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v29, v9, ObjectType, a2);
    swift_unknownObjectRelease(v26);
    (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v9, v32);
    v30(v29, v31);
    v34 = *v18;
    if (*v18)
    {
      v35 = swift_getObjectType(*v18);
      v36 = swift_allocObject(&unk_10035BCA8, 24, 7);
      v37 = v58;
      swift_weakInit(v36 + 16, v58);
      aBlock[4] = sub_1002B400C;
      v60 = v36;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100284B08;
      aBlock[3] = &unk_10035BCC0;
      v38 = _Block_copy(aBlock);
      swift_unknownObjectRetain(v34);
      v39 = swift_retain(v36);
      v40 = v46;
      static DispatchQoS.unspecified.getter(v39);
      v41 = v49;
      sub_100289784();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)(v40, v41, v38, v35);
      _Block_release(v38);
      swift_unknownObjectRelease(v34);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v41, v51);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v40, v48);
      v42 = v60;
      swift_release(v36);
      swift_release(v42);
      v43 = *(_QWORD *)(v37 + 16);
      if (v43)
      {
        swift_getObjectType(*(_QWORD *)(v37 + 16));
        swift_unknownObjectRetain(v43);
        OS_dispatch_source.activate()();
        swift_unknownObjectRelease(v43);
      }
    }
  }

  return v58;
}

uint64_t sub_1002B3EAC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002B3ED0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = type metadata accessor for Logger(0);
  __chkstk_darwin(v2);
  a1 += 16;
  swift_beginAccess(a1, v5, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v4 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 120))(result);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1002B400C()
{
  uint64_t v0;

  return sub_1002B3ED0(v0);
}

uint64_t sub_1002B4014(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002B4024(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t ALDataGenerationBase.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t ALDataGenerationBase.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for ALDataGenerationBase()
{
  return objc_opt_self(_TtC8ALDaemon20ALDataGenerationBase);
}

uint64_t method lookup function for ALDataGenerationBase(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALDataGenerationBase);
}

uint64_t dispatch thunk of ALDataGenerationBase.__allocating_init(queue:interval:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ALDataGenerationBase.onTick()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t sub_1002B40BC()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v6;
  _QWORD v7[2];

  v1 = *(_QWORD *)(v0 + 16);
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  v2._countAndFlagsBits = 0x6F7272456B636954;
  v2._object = (void *)0xEA00000000002072;
  String.append(_:)(v2);
  v6 = v1;
  v3 = sub_1000039AC(&qword_100380878);
  _print_unlocked<A, B>(_:_:)(&v6, v7, v3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  return v7[0];
}

uint64_t sub_1002B414C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1002B4180(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 32, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;
  return swift_release(v3);
}

uint64_t sub_1002B41C4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 48, 7);
  sub_1002B4218(a1, a2, a3);
  return v7;
}

_QWORD *sub_1002B4218(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  id *v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(_QWORD *__return_ptr, uint64_t, unint64_t, void *);
  uint64_t v14;
  void (*v15)(_QWORD *__return_ptr, uint64_t, unint64_t, void *);
  uint64_t v16;
  void (*v17)(_QWORD *__return_ptr, uint64_t, unint64_t, void *);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v23[24];
  _QWORD v24[3];

  v4 = v3;
  v3[3] = 0;
  v6 = v3 + 3;
  v3[4] = 0;
  v7 = v3 + 4;
  v3[5] = 0;
  v8 = v3 + 5;
  v3[2] = a1;
  v9 = (id *)(v3 + 2);
  v10 = a1;
  v11 = sub_1002A951C();
  v12 = *v11;
  v13 = *(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t, void *))(*(_QWORD *)*v11 + 112);
  swift_retain(*v11);
  v13(v24, 0x616C756D69535442, 0xEB00000000646574, &type metadata for Bool);
  swift_release(v12);
  if (LOBYTE(v24[0]) != 2 && (v24[0] & 1) != 0)
  {
    type metadata accessor for ALBtSimulated();
    v19 = sub_1002C1118(v10, a2, a3);
    swift_beginAccess(v6, v24, 1, 0);
    a3 = *v6;
    *v6 = v19;
  }
  else
  {
    v14 = *v11;
    v15 = *(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t, void *))(*(_QWORD *)*v11 + 112);
    swift_retain(*v11);
    v15(v24, 0x79616C7065525442, 0xED00005653436465, &type metadata for Bool);
    swift_release(v14);
    if (LOBYTE(v24[0]) != 2 && (v24[0] & 1) != 0)
    {
      type metadata accessor for ALBtReplayerCSV();
      v20 = sub_100299794(v10, a2, a3);
      swift_beginAccess(v7, v24, 1, 0);
      a3 = *v7;
      *v7 = v20;
    }
    else
    {
      v16 = *v11;
      v17 = *(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t, void *))(*(_QWORD *)*v11 + 112);
      swift_retain(*v11);
      v17(v24, 0x726F43686365654CLL, 0xEB00000000544265, &type metadata for Bool);
      swift_release(v16);
      if (LOBYTE(v24[0]) == 2 || (v24[0] & 1) != 0)
      {
        type metadata accessor for ALLeechCoreBluetooth();
        swift_beginAccess(v9, v24, 0, 0);
        v18 = sub_1002AA668(*v9, a2, a3);

        swift_beginAccess(v8, v23, 1, 0);
        a3 = *v8;
        *v8 = (uint64_t)v18;
      }
      else
      {

      }
    }
  }
  swift_release(a3);
  return v4;
}

uint64_t sub_1002B448C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t sub_1002B44C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for ALBtResultHub()
{
  return objc_opt_self(_TtC8ALDaemon13ALBtResultHub);
}

uint64_t sub_1002B4524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002C07D0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002B4580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002C07D0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

ALDaemon::ALWiFiScanRow::Band_optional __swiftcall ALWiFiScanRow.Band.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)rawValue < 4)
    v2 = rawValue;
  *v1 = v2;
  return (ALDaemon::ALWiFiScanRow::Band_optional)rawValue;
}

Swift::Int sub_1002B45E0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1002B4624()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1002B464C(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

ALDaemon::ALWiFiScanRow::Band_optional sub_1002B468C(Swift::Int *a1)
{
  return ALWiFiScanRow.Band.init(rawValue:)(*a1);
}

uint64_t sub_1002B4694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002C078C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002B46F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002C078C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t ALWiFiScanRow._mac.getter()
{
  return sub_1002B7794((uint64_t)&unk_1002EFE60, &qword_100382878, &qword_100380C38, (uint64_t)&protocol witness table for UInt64);
}

uint64_t sub_1002B4760@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002B78BC(a1, (uint64_t)&unk_1002EFE60, &qword_100382878, &qword_100380C38, (uint64_t)&protocol witness table for UInt64, a2);
}

uint64_t sub_1002B4784(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B79EC(a1, a2, a3, a4, (uint64_t)&unk_1002EFE60, (uint64_t)sub_1002C0AAC);
}

uint64_t type metadata accessor for ALWiFiScanRow(uint64_t a1)
{
  return sub_10000E62C(a1, qword_1003DB800, (uint64_t)&nominal type descriptor for ALWiFiScanRow);
}

uint64_t ALWiFiScanRow._mac.setter(uint64_t a1, char a2)
{
  return sub_1002B7AB0(a1, a2, (uint64_t)&unk_1002EFE60, (uint64_t)sub_1002B47C0);
}

uint64_t sub_1002B47C0()
{
  uint64_t v0;

  return sub_1002B7B64(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), (uint64_t)&unk_1002EFE60, &qword_100382908, &qword_100380C38, (uint64_t)&protocol witness table for UInt64);
}

void (*ALWiFiScanRow._mac.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = v1;
  v4 = malloc(0x38uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v4[4] = v2;
  v4[5] = v5;
  v4[2] = v2;
  KeyPath = swift_getKeyPath(&unk_1002EFE60);
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v4[6] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 + 2, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002EFE60);
  v9 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v10 = sub_1002B8B90(&qword_100382878, &qword_100380C38, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v4 + 2, v8, v9, v10);
  swift_release(v8);
  v11 = *((_BYTE *)v4 + 24);
  *v4 = v4[2];
  *((_BYTE *)v4 + 8) = v11;
  return sub_1002B4944;
}

void sub_1002B4944(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t KeyPath;
  _QWORD v8[4];
  char v9;

  v1 = *a1;
  v2 = **a1;
  v3 = *((_BYTE *)*a1 + 8);
  v4 = (*a1)[6];
  v5 = (*a1)[4];
  v6 = *a1;
  v6[2] = v5;
  KeyPath = swift_getKeyPath(&unk_1002EFE60);
  v8[2] = v5;
  v8[3] = v2;
  v9 = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v6 + 2, KeyPath, sub_1002C0AAC, v8, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  free(v1);
}

uint64_t ALWiFiScanRow._ssid.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = v0;
  KeyPath = swift_getKeyPath(&unk_1002EFE88);
  v2 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_1002EFE88);
  v4 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v5 = sub_1002B8B90(&qword_100382880, &qword_100382888, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_1002B4B14@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;

  *(_QWORD *)&v9 = *a1;
  KeyPath = swift_getKeyPath(&unk_1002EFE88);
  v4 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_1002EFE88);
  v6 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v7 = sub_1002B8B90(&qword_100382880, &qword_100382888, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_1002B4C1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_1002EFE88);
  v7[2] = v8;
  v7[3] = v3;
  v7[4] = v2;
  v5 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1002C0BA4, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t ALWiFiScanRow._ssid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  KeyPath = swift_getKeyPath(&unk_1002EFE88);
  v9 = v2;
  v10 = a1;
  v11 = a2;
  v6 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, sub_1002B4E48, &v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1002B4D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  KeyPath = swift_getKeyPath(&unk_1002EFE88);
  v9[0] = a2;
  v9[1] = a3;
  v6 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v7 = sub_1002B8B90(&qword_100382910, &qword_100382888, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v9, v6, v7);
  return swift_release(KeyPath);
}

uint64_t sub_1002B4E48()
{
  uint64_t *v0;

  return sub_1002B4D9C(v0[2], v0[3], v0[4]);
}

void (*ALWiFiScanRow._ssid.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = malloc(0x38uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v4[4] = v2;
  v4[5] = v5;
  v4[2] = v2;
  KeyPath = swift_getKeyPath(&unk_1002EFE88);
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v4[6] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 + 2, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002EFE88);
  v9 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v10 = sub_1002B8B90(&qword_100382880, &qword_100382888, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v4 + 2, v8, v9, v10);
  swift_release(v8);
  *(_OWORD *)v4 = *((_OWORD *)v4 + 1);
  return sub_1002B4FA4;
}

void sub_1002B4FA4(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  _QWORD v9[6];

  v3 = *a1;
  v4 = (*a1)[4];
  v3[2] = v4;
  v6 = *v3;
  v5 = v3[1];
  v7 = v3[6];
  KeyPath = swift_getKeyPath(&unk_1002EFE88);
  v9[2] = v4;
  v9[3] = v6;
  v9[4] = v5;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(v5);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v3 + 2, KeyPath, sub_1002C0BA4, v9, (char *)&type metadata for () + 8, v7);
    swift_bridgeObjectRelease(v5);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v3[1]);
  }
  else
  {
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v3 + 2, KeyPath, sub_1002C0BA4, v9, (char *)&type metadata for () + 8, v7);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v5);
  }
  free(v3);
}

unint64_t ALWiFiScanRow._rssiDb.getter()
{
  return sub_1002B6B68((uint64_t)&unk_1002EFEB0, &qword_100382890, &qword_100382898, (uint64_t)&protocol witness table for Int32);
}

uint64_t sub_1002B50E4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002B6C9C(a1, (uint64_t)&unk_1002EFEB0, &qword_100382890, &qword_100382898, (uint64_t)&protocol witness table for Int32, a2);
}

uint64_t sub_1002B5108(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B6DCC(a1, a2, a3, a4, (uint64_t)&unk_1002EFEB0, (uint64_t)sub_1002B5130);
}

uint64_t ALWiFiScanRow._rssiDb.setter(uint64_t a1)
{
  return sub_1002B6E94(a1, (uint64_t)&unk_1002EFEB0, (uint64_t)sub_1002B5130);
}

uint64_t sub_1002B5130()
{
  return sub_1002B5360((uint64_t)&unk_1002EFEB0, &qword_100382918, &qword_100382898, (uint64_t)&protocol witness table for Int32);
}

void (*ALWiFiScanRow._rssiDb.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v4[1] = v2;
  v4[2] = v5;
  *v4 = v2;
  KeyPath = swift_getKeyPath(&unk_1002EFEB0);
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v4[3] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002EFEB0);
  v9 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v10 = sub_1002B8B90(&qword_100382890, &qword_100382898, (uint64_t)&protocol witness table for Int32, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v4, v8, v9, v10);
  swift_release(v8);
  *((_DWORD *)v4 + 8) = *(_DWORD *)v4;
  *((_BYTE *)v4 + 36) = *((_BYTE *)v4 + 4);
  return sub_1002B5290;
}

void sub_1002B5290(uint64_t a1)
{
  void *v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  _QWORD v7[3];
  int v8;
  char v9;

  v1 = *(void **)a1;
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 36);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  **(_QWORD **)a1 = v5;
  KeyPath = swift_getKeyPath(&unk_1002EFEB0);
  v7[2] = v5;
  v8 = v2;
  v9 = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v1, KeyPath, sub_1002B5130, v7, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  free(v1);
}

uint64_t sub_1002B5360(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1002B6F48(*(_QWORD *)(v4 + 16), *(unsigned int *)(v4 + 24) | ((unint64_t)*(unsigned __int8 *)(v4 + 28) << 32), a1, a2, a3, a4);
}

void sub_1002B53AC(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t ALWiFiScanRow._mode.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002B63FC((uint64_t)&unk_1002EFED8, &qword_1003828A0, &qword_1003828A8, (void (*)(void))sub_1002B5414, a1);
}

uint64_t sub_1002B53DC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1002B6528(a1, (uint64_t)&unk_1002EFED8, &qword_1003828A0, &qword_1003828A8, (void (*)(void))sub_1002B5414, a2);
}

uint64_t sub_1002B5400(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B6650(a1, a2, a3, a4, (uint64_t)&unk_1002EFED8, (uint64_t)sub_1002C0AD8);
}

unint64_t sub_1002B5414()
{
  unint64_t result;

  result = qword_1003828B0;
  if (!qword_1003828B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ALWiFiScanRow.Mode, &type metadata for ALWiFiScanRow.Mode);
    atomic_store(result, (unint64_t *)&qword_1003828B0);
  }
  return result;
}

uint64_t ALWiFiScanRow._mode.setter(char *a1)
{
  return sub_1002B67B8(a1, (uint64_t)&unk_1002EFED8, (uint64_t)sub_1002B546C);
}

uint64_t sub_1002B546C()
{
  uint64_t v0;

  return sub_1002B6864(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), (uint64_t)&unk_1002EFED8, &qword_100382920, &qword_1003828A8, (void (*)(void))sub_1002B8B08);
}

void (*ALWiFiScanRow._mode.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = v4 + 4;
  v6 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v4[1] = v2;
  v4[2] = v6;
  *v4 = v2;
  KeyPath = swift_getKeyPath(&unk_1002EFED8);
  v8 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v4[3] = v8;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v8);
  swift_release(KeyPath);
  v9 = swift_getKeyPath(&unk_1002EFED8);
  v10 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v11 = sub_1002B66FC(&qword_1003828A0, &qword_1003828A8, (void (*)(void))sub_1002B5414, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v5, v9, v10, v11);
  swift_release(v9);
  return sub_1002B55E0;
}

void sub_1002B55E0(uint64_t a1)
{
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  _QWORD v6[3];
  char v7;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  **(_QWORD **)a1 = v4;
  KeyPath = swift_getKeyPath(&unk_1002EFED8);
  v6[2] = v4;
  v7 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v1, KeyPath, sub_1002C0AD8, v6, (char *)&type metadata for () + 8, v3);
  swift_release(KeyPath);
  free(v1);
}

unint64_t ALWiFiScanRow._channel.getter()
{
  return sub_1002B6B68((uint64_t)&unk_1002EFF00, &qword_100382890, &qword_100382898, (uint64_t)&protocol witness table for Int32);
}

uint64_t sub_1002B56C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002B6C9C(a1, (uint64_t)&unk_1002EFF00, &qword_100382890, &qword_100382898, (uint64_t)&protocol witness table for Int32, a2);
}

uint64_t sub_1002B56E8(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B6DCC(a1, a2, a3, a4, (uint64_t)&unk_1002EFF00, (uint64_t)sub_1002B5710);
}

uint64_t ALWiFiScanRow._channel.setter(uint64_t a1)
{
  return sub_1002B6E94(a1, (uint64_t)&unk_1002EFF00, (uint64_t)sub_1002B5710);
}

uint64_t sub_1002B5710()
{
  return sub_1002B5360((uint64_t)&unk_1002EFF00, &qword_100382918, &qword_100382898, (uint64_t)&protocol witness table for Int32);
}

void (*ALWiFiScanRow._channel.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v4[1] = v2;
  v4[2] = v5;
  *v4 = v2;
  KeyPath = swift_getKeyPath(&unk_1002EFF00);
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v4[3] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002EFF00);
  v9 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v10 = sub_1002B8B90(&qword_100382890, &qword_100382898, (uint64_t)&protocol witness table for Int32, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v4, v8, v9, v10);
  swift_release(v8);
  *((_DWORD *)v4 + 8) = *(_DWORD *)v4;
  *((_BYTE *)v4 + 36) = *((_BYTE *)v4 + 4);
  return sub_1002B5870;
}

void sub_1002B5870(uint64_t a1)
{
  void *v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  _QWORD v7[3];
  int v8;
  char v9;

  v1 = *(void **)a1;
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 36);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  **(_QWORD **)a1 = v5;
  KeyPath = swift_getKeyPath(&unk_1002EFF00);
  v7[2] = v5;
  v8 = v2;
  v9 = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v1, KeyPath, sub_1002B5710, v7, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  free(v1);
}

unint64_t ALWiFiScanRow._ageSec.getter()
{
  return sub_1002B6B68((uint64_t)&unk_1002EFF28, &qword_1003828B8, &qword_1003828C0, (uint64_t)&protocol witness table for Float);
}

uint64_t sub_1002B5964@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002B6C9C(a1, (uint64_t)&unk_1002EFF28, &qword_1003828B8, &qword_1003828C0, (uint64_t)&protocol witness table for Float, a2);
}

uint64_t sub_1002B5988(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B6DCC(a1, a2, a3, a4, (uint64_t)&unk_1002EFF28, (uint64_t)sub_1002B59B0);
}

uint64_t ALWiFiScanRow._ageSec.setter(uint64_t a1)
{
  return sub_1002B6E94(a1, (uint64_t)&unk_1002EFF28, (uint64_t)sub_1002B59B0);
}

uint64_t sub_1002B59B0()
{
  return sub_1002B5360((uint64_t)&unk_1002EFF28, &qword_100382930, &qword_1003828C0, (uint64_t)&protocol witness table for Float);
}

void (*ALWiFiScanRow._ageSec.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v4[1] = v2;
  v4[2] = v5;
  *v4 = v2;
  KeyPath = swift_getKeyPath(&unk_1002EFF28);
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v4[3] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002EFF28);
  v9 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v10 = sub_1002B8B90(&qword_1003828B8, &qword_1003828C0, (uint64_t)&protocol witness table for Float, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v4, v8, v9, v10);
  swift_release(v8);
  *((_DWORD *)v4 + 8) = *(_DWORD *)v4;
  *((_BYTE *)v4 + 36) = *((_BYTE *)v4 + 4);
  return sub_1002B5B10;
}

void sub_1002B5B10(uint64_t a1)
{
  void *v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  _QWORD v7[3];
  int v8;
  char v9;

  v1 = *(void **)a1;
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 36);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  **(_QWORD **)a1 = v5;
  KeyPath = swift_getKeyPath(&unk_1002EFF28);
  v7[2] = v5;
  v8 = v2;
  v9 = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v1, KeyPath, sub_1002B59B0, v7, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  free(v1);
}

uint64_t ALWiFiScanRow._isAppleHotspot.getter()
{
  return sub_1002B5E44((uint64_t)&unk_1002EFF50);
}

uint64_t sub_1002B5BEC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1002B5F48(a1, (uint64_t)&unk_1002EFF50, a2);
}

uint64_t sub_1002B5BF8(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B6650(a1, a2, a3, a4, (uint64_t)&unk_1002EFF50, (uint64_t)sub_1002C0AEC);
}

uint64_t ALWiFiScanRow._isAppleHotspot.setter(char a1)
{
  return sub_1002B6074(a1, (uint64_t)&unk_1002EFF50, (uint64_t)sub_1002B5C20);
}

uint64_t sub_1002B5C20()
{
  uint64_t v0;

  return sub_1002B6120(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), (uint64_t)&unk_1002EFF50);
}

void (*ALWiFiScanRow._isAppleHotspot.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v4[1] = v2;
  v4[2] = v5;
  *v4 = v2;
  KeyPath = swift_getKeyPath(&unk_1002EFF50);
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v4[3] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002EFF50);
  v9 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v10 = sub_1002B8B90(&qword_1003828C8, &qword_1003828D0, (uint64_t)&protocol witness table for Bool, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v4, v8, v9, v10);
  swift_release(v8);
  *((_BYTE *)v4 + 32) = *(_BYTE *)v4;
  return sub_1002B5D78;
}

void sub_1002B5D78(uint64_t a1)
{
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  _QWORD v6[3];
  char v7;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  **(_QWORD **)a1 = v4;
  KeyPath = swift_getKeyPath(&unk_1002EFF50);
  v6[2] = v4;
  v7 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v1, KeyPath, sub_1002C0AEC, v6, (char *)&type metadata for () + 8, v3);
  swift_release(KeyPath);
  free(v1);
}

uint64_t ALWiFiScanRow._isMoving.getter()
{
  return sub_1002B5E44((uint64_t)&unk_1002EFF78);
}

uint64_t sub_1002B5E44(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v9;
  uint64_t v10;

  v10 = v1;
  KeyPath = swift_getKeyPath(a1);
  v4 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(a1);
  v6 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v7 = sub_1002B8B90(&qword_1003828C8, &qword_1003828D0, (uint64_t)&protocol witness table for Bool, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  return v9;
}

uint64_t sub_1002B5F3C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1002B5F48(a1, (uint64_t)&unk_1002EFF78, a2);
}

uint64_t sub_1002B5F48@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _BYTE *a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  v12 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v6 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, KeyPath, v6);
  swift_release(KeyPath);
  v7 = swift_getKeyPath(a2);
  v8 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v9 = sub_1002B8B90(&qword_1003828C8, &qword_1003828D0, (uint64_t)&protocol witness table for Bool, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v11, v7, v8, v9);
  result = swift_release(v7);
  *a3 = v11;
  return result;
}

uint64_t sub_1002B604C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B6650(a1, a2, a3, a4, (uint64_t)&unk_1002EFF78, (uint64_t)sub_1002C0B00);
}

uint64_t ALWiFiScanRow._isMoving.setter(char a1)
{
  return sub_1002B6074(a1, (uint64_t)&unk_1002EFF78, (uint64_t)sub_1002B61C0);
}

uint64_t sub_1002B6074(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  KeyPath = swift_getKeyPath(a2);
  v10 = v3;
  v11 = a1;
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, a3, &v9, (char *)&type metadata for () + 8, v7);
  return swift_release(KeyPath);
}

uint64_t sub_1002B6120(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  char v8;

  KeyPath = swift_getKeyPath(a3);
  v8 = a2;
  v5 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v6 = sub_1002B8B90(&qword_100382938, &qword_1003828D0, (uint64_t)&protocol witness table for Bool, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v8, v5, v6);
  return swift_release(KeyPath);
}

uint64_t sub_1002B61C0()
{
  uint64_t v0;

  return sub_1002B6120(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), (uint64_t)&unk_1002EFF78);
}

void (*ALWiFiScanRow._isMoving.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v4[1] = v2;
  v4[2] = v5;
  *v4 = v2;
  KeyPath = swift_getKeyPath(&unk_1002EFF78);
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v4[3] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002EFF78);
  v9 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v10 = sub_1002B8B90(&qword_1003828C8, &qword_1003828D0, (uint64_t)&protocol witness table for Bool, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v4, v8, v9, v10);
  swift_release(v8);
  *((_BYTE *)v4 + 32) = *(_BYTE *)v4;
  return sub_1002B6318;
}

void sub_1002B6318(uint64_t a1)
{
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  _QWORD v6[3];
  char v7;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  **(_QWORD **)a1 = v4;
  KeyPath = swift_getKeyPath(&unk_1002EFF78);
  v6[2] = v4;
  v7 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v1, KeyPath, sub_1002C0B00, v6, (char *)&type metadata for () + 8, v3);
  swift_release(KeyPath);
  free(v1);
}

uint64_t ALWiFiScanRow._band.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002B63FC((uint64_t)&unk_1002EFFA0, &qword_1003828D8, &qword_1003828E0, (void (*)(void))sub_1002B6760, a1);
}

uint64_t sub_1002B63FC@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, void (*a4)(void)@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = v5;
  KeyPath = swift_getKeyPath(a1);
  v12 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, KeyPath, v12);
  swift_release(KeyPath);
  v13 = swift_getKeyPath(a1);
  v14 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v15 = sub_1002B66FC(a2, a3, a4, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a5, v13, v14, v15);
  return swift_release(v13);
}

uint64_t sub_1002B6504@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1002B6528(a1, (uint64_t)&unk_1002EFFA0, &qword_1003828D8, &qword_1003828E0, (void (*)(void))sub_1002B6760, a2);
}

uint64_t sub_1002B6528@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, unint64_t *a3@<X4>, uint64_t *a4@<X5>, void (*a5)(void)@<X6>, _BYTE *a6@<X8>)
{
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v17 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v12 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, KeyPath, v12);
  swift_release(KeyPath);
  v13 = swift_getKeyPath(a2);
  v14 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v15 = sub_1002B66FC(a3, a4, a5, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v18, v13, v14, v15);
  result = swift_release(v13);
  *a6 = v18;
  return result;
}

uint64_t sub_1002B663C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B6650(a1, a2, a3, a4, (uint64_t)&unk_1002EFFA0, (uint64_t)sub_1002C0B14);
}

uint64_t sub_1002B6650(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t KeyPath;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13;

  v7 = *a1;
  v13 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v11[2] = v13;
  v12 = v7;
  v9 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, a6, v11, (char *)&type metadata for () + 8, v9);
  return swift_release(KeyPath);
}

uint64_t sub_1002B66FC(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000FE74(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002B6760()
{
  unint64_t result;

  result = qword_1003828E8;
  if (!qword_1003828E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ALWiFiScanRow.Band, &type metadata for ALWiFiScanRow.Band);
    atomic_store(result, (unint64_t *)&qword_1003828E8);
  }
  return result;
}

uint64_t ALWiFiScanRow._band.setter(char *a1)
{
  return sub_1002B67B8(a1, (uint64_t)&unk_1002EFFA0, (uint64_t)sub_1002B6910);
}

uint64_t sub_1002B67B8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v5 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v10 = v3;
  v11 = v5;
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, a3, &v9, (char *)&type metadata for () + 8, v7);
  return swift_release(KeyPath);
}

uint64_t sub_1002B6864(uint64_t a1, char a2, uint64_t a3, unint64_t *a4, uint64_t *a5, void (*a6)(void))
{
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  char v14;

  KeyPath = swift_getKeyPath(a3);
  v14 = a2;
  v11 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v12 = sub_1002B66FC(a4, a5, a6, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v14, v11, v12);
  return swift_release(KeyPath);
}

uint64_t sub_1002B6910()
{
  uint64_t v0;

  return sub_1002B6864(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), (uint64_t)&unk_1002EFFA0, &qword_100382940, &qword_1003828E0, (void (*)(void))sub_1002B8B4C);
}

void (*ALWiFiScanRow._band.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = v4 + 4;
  v6 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v4[1] = v2;
  v4[2] = v6;
  *v4 = v2;
  KeyPath = swift_getKeyPath(&unk_1002EFFA0);
  v8 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v4[3] = v8;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v8);
  swift_release(KeyPath);
  v9 = swift_getKeyPath(&unk_1002EFFA0);
  v10 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v11 = sub_1002B66FC(&qword_1003828D8, &qword_1003828E0, (void (*)(void))sub_1002B6760, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v5, v9, v10, v11);
  swift_release(v9);
  return sub_1002B6A84;
}

void sub_1002B6A84(uint64_t a1)
{
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  _QWORD v6[3];
  char v7;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  **(_QWORD **)a1 = v4;
  KeyPath = swift_getKeyPath(&unk_1002EFFA0);
  v6[2] = v4;
  v7 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v1, KeyPath, sub_1002C0B14, v6, (char *)&type metadata for () + 8, v3);
  swift_release(KeyPath);
  free(v1);
}

unint64_t ALWiFiScanRow._frequencyKhz.getter()
{
  return sub_1002B6B68((uint64_t)&unk_1002EFFC8, &qword_100382890, &qword_100382898, (uint64_t)&protocol witness table for Int32);
}

unint64_t sub_1002B6B68(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v16 = v4;
  KeyPath = swift_getKeyPath(a1);
  v10 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v16, KeyPath, v10);
  swift_release(KeyPath);
  v11 = swift_getKeyPath(a1);
  v12 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v13 = sub_1002B8B90(a2, a3, a4, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v15, v11, v12, v13);
  swift_release(v11);
  return v15 | ((unint64_t)BYTE4(v15) << 32);
}

uint64_t sub_1002B6C78@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002B6C9C(a1, (uint64_t)&unk_1002EFFC8, &qword_100382890, &qword_100382898, (uint64_t)&protocol witness table for Int32, a2);
}

uint64_t sub_1002B6C9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, unint64_t *a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v12 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, KeyPath, v12);
  swift_release(KeyPath);
  v13 = swift_getKeyPath(a2);
  v14 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v15 = sub_1002B8B90(a3, a4, a5, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v18, v13, v14, v15);
  result = swift_release(v13);
  v17 = BYTE4(v18);
  *(_DWORD *)a6 = v18;
  *(_BYTE *)(a6 + 4) = v17;
  return result;
}

uint64_t sub_1002B6DB8(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B6DCC(a1, a2, a3, a4, (uint64_t)&unk_1002EFFC8, (uint64_t)sub_1002B6FFC);
}

uint64_t sub_1002B6DCC(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  char v8;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD v12[3];
  int v13;
  char v14;
  uint64_t v15;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 4);
  v15 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v12[2] = v15;
  v13 = v7;
  v14 = v8;
  v10 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, a6, v12, (char *)&type metadata for () + 8, v10);
  return swift_release(KeyPath);
}

uint64_t ALWiFiScanRow._frequencyKhz.setter(uint64_t a1)
{
  return sub_1002B6E94(a1, (uint64_t)&unk_1002EFFC8, (uint64_t)sub_1002B6FFC);
}

uint64_t sub_1002B6E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;

  KeyPath = swift_getKeyPath(a2);
  v10 = v3;
  v11 = a1;
  v12 = BYTE4(a1) & 1;
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, a3, &v9, (char *)&type metadata for () + 8, v7);
  return swift_release(KeyPath);
}

uint64_t sub_1002B6F48(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  int v14;
  char v15;

  KeyPath = swift_getKeyPath(a3);
  v14 = a2;
  v15 = BYTE4(a2) & 1;
  v11 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v12 = sub_1002B8B90(a4, a5, a6, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v14, v11, v12);
  return swift_release(KeyPath);
}

uint64_t sub_1002B6FFC()
{
  return sub_1002B5360((uint64_t)&unk_1002EFFC8, &qword_100382918, &qword_100382898, (uint64_t)&protocol witness table for Int32);
}

void (*ALWiFiScanRow._frequencyKhz.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v4[1] = v2;
  v4[2] = v5;
  *v4 = v2;
  KeyPath = swift_getKeyPath(&unk_1002EFFC8);
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v4[3] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002EFFC8);
  v9 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v10 = sub_1002B8B90(&qword_100382890, &qword_100382898, (uint64_t)&protocol witness table for Int32, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v4, v8, v9, v10);
  swift_release(v8);
  *((_DWORD *)v4 + 8) = *(_DWORD *)v4;
  *((_BYTE *)v4 + 36) = *((_BYTE *)v4 + 4);
  return sub_1002B715C;
}

void sub_1002B715C(uint64_t a1)
{
  void *v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  _QWORD v7[3];
  int v8;
  char v9;

  v1 = *(void **)a1;
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 36);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  **(_QWORD **)a1 = v5;
  KeyPath = swift_getKeyPath(&unk_1002EFFC8);
  v7[2] = v5;
  v8 = v2;
  v9 = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v1, KeyPath, sub_1002B6FFC, v7, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  free(v1);
}

double ALWiFiScanRow._cfAbsoluteTimeSec.getter()
{
  double v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_1002EFFF0);
  v2 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_1002EFFF0);
  v4 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Double);
  swift_release(v3);
  return v6;
}

double sub_1002B7308@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  double v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_1002EFFF0);
  v4 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_1002EFFF0);
  v6 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Double);
  swift_release(v5);
  result = v8;
  *a2 = v8;
  return result;
}

uint64_t sub_1002B73EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_1002EFFF0);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1002C0B28, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t ALWiFiScanRow._cfAbsoluteTimeSec.setter(double a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1002EFFF0);
  v7 = v1;
  v8 = a1;
  v4 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1002B754C, &v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1002B754C()
{
  uint64_t v0;

  return sub_1002B9EF4(*(double *)(v0 + 24), *(_QWORD *)(v0 + 16), (uint64_t)&unk_1002EFFF0, &qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
}

void (*ALWiFiScanRow._cfAbsoluteTimeSec.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v4[2] = v2;
  v4[3] = v5;
  v4[1] = v2;
  KeyPath = swift_getKeyPath(&unk_1002EFFF0);
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v4[4] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 + 1, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002EFFF0);
  v9 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  PersistentModel.getValue<A>(forKey:)(v4 + 1, v8, v9, &protocol witness table for Double);
  swift_release(v8);
  *v4 = v4[1];
  return sub_1002B76A4;
}

void sub_1002B76A4(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t KeyPath;
  _QWORD v7[6];

  v1 = *a1;
  v2 = **a1;
  v3 = (*a1)[4];
  v4 = (*a1)[2];
  v5 = *a1;
  v5[1] = v4;
  KeyPath = swift_getKeyPath(&unk_1002EFFF0);
  v7[2] = v4;
  v7[3] = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v5 + 1, KeyPath, sub_1002C0B28, v7, (char *)&type metadata for () + 8, v3);
  swift_release(KeyPath);
  free(v1);
}

uint64_t ALWiFiScanRow._machContinuousTimeSec.getter()
{
  return sub_1002B7794((uint64_t)&unk_1002F0018, &qword_1003828F0, &qword_1003828F8, (uint64_t)&protocol witness table for Double);
}

uint64_t sub_1002B7794(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = v4;
  v9 = ((uint64_t (*)(void))swift_getKeyPath)();
  v10 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, v9, v10);
  swift_release(v9);
  KeyPath = swift_getKeyPath(a1);
  v12 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v13 = sub_1002B8B90(a2, a3, a4, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v15, KeyPath, v12, v13);
  swift_release(KeyPath);
  return v15;
}

uint64_t sub_1002B7898@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002B78BC(a1, (uint64_t)&unk_1002F0018, &qword_1003828F0, &qword_1003828F8, (uint64_t)&protocol witness table for Double, a2);
}

uint64_t sub_1002B78BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, unint64_t *a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;

  v18 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v12 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v18, KeyPath, v12);
  swift_release(KeyPath);
  v13 = swift_getKeyPath(a2);
  v14 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v15 = sub_1002B8B90(a3, a4, a5, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v18, v13, v14, v15);
  result = swift_release(v13);
  v17 = v19;
  *(_QWORD *)a6 = v18;
  *(_BYTE *)(a6 + 8) = v17;
  return result;
}

uint64_t sub_1002B79D8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B79EC(a1, a2, a3, a4, (uint64_t)&unk_1002F0018, (uint64_t)sub_1002C0AC0);
}

uint64_t sub_1002B79EC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  char v8;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD v12[4];
  char v13;
  uint64_t v14;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 8);
  v14 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v12[2] = v14;
  v12[3] = v7;
  v13 = v8;
  v10 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, a6, v12, (char *)&type metadata for () + 8, v10);
  return swift_release(KeyPath);
}

uint64_t ALWiFiScanRow._machContinuousTimeSec.setter(uint64_t a1, char a2)
{
  return sub_1002B7AB0(a1, a2, (uint64_t)&unk_1002F0018, (uint64_t)sub_1002B7C24);
}

uint64_t sub_1002B7AB0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  KeyPath = swift_getKeyPath(a3);
  v12 = v4;
  v13 = a1;
  v14 = a2 & 1;
  v9 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, a4, &v11, (char *)&type metadata for () + 8, v9);
  return swift_release(KeyPath);
}

uint64_t sub_1002B7B64(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;

  KeyPath = swift_getKeyPath(a4);
  v16 = a2;
  v17 = a3 & 1;
  v13 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v14 = sub_1002B8B90(a5, a6, a7, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v16, v13, v14);
  return swift_release(KeyPath);
}

uint64_t sub_1002B7C24()
{
  uint64_t v0;

  return sub_1002B7B64(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), (uint64_t)&unk_1002F0018, &qword_100382950, &qword_1003828F8, (uint64_t)&protocol witness table for Double);
}

void (*ALWiFiScanRow._machContinuousTimeSec.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = v1;
  v4 = malloc(0x38uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v4[4] = v2;
  v4[5] = v5;
  v4[2] = v2;
  KeyPath = swift_getKeyPath(&unk_1002F0018);
  v7 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v4[6] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 + 2, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002F0018);
  v9 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v10 = sub_1002B8B90(&qword_1003828F0, &qword_1003828F8, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v4 + 2, v8, v9, v10);
  swift_release(v8);
  v11 = *((_BYTE *)v4 + 24);
  *v4 = v4[2];
  *((_BYTE *)v4 + 8) = v11;
  return sub_1002B7DA8;
}

void sub_1002B7DA8(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t KeyPath;
  _QWORD v8[4];
  char v9;

  v1 = *a1;
  v2 = **a1;
  v3 = *((_BYTE *)*a1 + 8);
  v4 = (*a1)[6];
  v5 = (*a1)[4];
  v6 = *a1;
  v6[2] = v5;
  KeyPath = swift_getKeyPath(&unk_1002F0018);
  v8[2] = v5;
  v8[3] = v2;
  v9 = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v6 + 2, KeyPath, sub_1002C0AC0, v8, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  free(v1);
}

uint64_t ALWiFiScanRow.__allocating_init(mac:ssid:rssiDb:mode:channel:ageSec:isAppleHotspot:isMoving:band:frequencyKhz:cfAbsoluteTimeSec:machContinuousTimeSec:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, unint64_t a5, char *a6, unint64_t a7, unint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, char a17, char a18, char *a19, unint64_t a20,double a21,char a22,uint64_t a23,char a24)
{
  uint64_t v16;
  char v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v31;

  v20 = a2 & 1;
  v21 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v31 = a20 | ((HIDWORD(a20) & 1) << 32);
  ALWiFiScanRow.init(mac:ssid:rssiDb:mode:channel:ageSec:isAppleHotspot:isMoving:band:frequencyKhz:cfAbsoluteTimeSec:machContinuousTimeSec:)(a1, v20, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32), a6, a7 | ((HIDWORD(a7) & 1) << 32), a8 | ((HIDWORD(a8) & 1) << 32), v22, v23, v24, v25, v26, v27, v28, v29, a17, a18, a19,
    v31,
    SBYTE4(v31),
    a21,
    a22 & 1,
    a23,
    a24 & 1);
  return v21;
}

_QWORD *ALWiFiScanRow.init(mac:ssid:rssiDb:mode:channel:ageSec:isAppleHotspot:isMoving:band:frequencyKhz:cfAbsoluteTimeSec:machContinuousTimeSec:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, char a17, char a18, char *a19, int a20,char a21,double a22,char a23,uint64_t a24,char a25)
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  char v94;
  char v97;
  char v98[16];
  _QWORD *v99;
  uint64_t v100;
  char v101;
  char v102[16];
  _QWORD *v103;
  double v104;
  char v105[16];
  _QWORD *v106;
  int v107;
  char v108;
  char v109[16];
  _QWORD *v110;
  char v111;
  char v112[16];
  _QWORD *v113;
  char v114;
  char v115[16];
  _QWORD *v116;
  char v117;
  char v118[16];
  _QWORD *v119;
  int v120;
  char v121;
  char v122[16];
  _QWORD *v123;
  int v124;
  char v125;
  char v126[16];
  _QWORD *v127;
  char v128;
  char v129[16];
  _QWORD *v130;
  int v131;
  char v132;
  char v133[16];
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  char v137[16];
  _QWORD *v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD v143[3];
  uint64_t v144;
  uint64_t v145;

  v18 = v17;
  v19 = *v17;
  v94 = *a6;
  v97 = *a19;
  v18[7] = sub_1000039AC(&qword_100382900);
  v20 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  v143[0] = v19;
  v143[1] = v19;
  v143[2] = v20;
  v144 = v20;
  v18[8] = swift_getOpaqueTypeConformance2(v143, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_100297680(v18 + 4);
  static PersistentModel.createBackingData<A>()(v19, v19, v20, v20);
  sub_1000875F0((uint64_t)(v18 + 4), (uint64_t)v143);
  v21 = v144;
  v22 = v145;
  sub_1002862D0(v143, v144);
  KeyPath = swift_getKeyPath(&unk_1002EFE60);
  v141 = 0;
  LOBYTE(v142) = 1;
  v24 = sub_1000039AC(&qword_100380C38);
  v25 = sub_1002B8B90(&qword_100382908, &qword_100380C38, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v141, v24, v25, v21, v22);
  swift_release(KeyPath);
  sub_1000187CC(v143);
  *((_BYTE *)v18 + 16) = 0;
  sub_1000875F0((uint64_t)(v18 + 4), (uint64_t)v143);
  v26 = v144;
  v27 = v145;
  sub_1002862D0(v143, v144);
  v28 = swift_getKeyPath(&unk_1002EFE88);
  v141 = 0;
  v142 = 0;
  v29 = sub_1000039AC(&qword_100382888);
  v30 = sub_1002B8B90(&qword_100382910, &qword_100382888, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v28, &v141, v29, v30, v26, v27);
  swift_release(v28);
  sub_1000187CC(v143);
  *((_BYTE *)v18 + 17) = 0;
  sub_1000875F0((uint64_t)(v18 + 4), (uint64_t)v143);
  v31 = v144;
  v32 = v145;
  sub_1002862D0(v143, v144);
  v33 = swift_getKeyPath(&unk_1002EFEB0);
  LODWORD(v141) = 0;
  BYTE4(v141) = 1;
  v34 = sub_1000039AC(&qword_100382898);
  v88 = sub_1002B8B90(&qword_100382918, &qword_100382898, (uint64_t)&protocol witness table for Int32, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v33, &v141, v34, v88, v31, v32);
  swift_release(v33);
  sub_1000187CC(v143);
  *((_BYTE *)v18 + 18) = 0;
  sub_1000875F0((uint64_t)(v18 + 4), (uint64_t)v143);
  v35 = v144;
  v36 = v145;
  sub_1002862D0(v143, v144);
  v37 = swift_getKeyPath(&unk_1002EFED8);
  LOBYTE(v141) = 4;
  v38 = sub_1000039AC(&qword_1003828A8);
  v39 = sub_1002B66FC(&qword_100382920, &qword_1003828A8, (void (*)(void))sub_1002B8B08, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v37, &v141, v38, v39, v35, v36);
  swift_release(v37);
  sub_1000187CC(v143);
  *((_BYTE *)v18 + 19) = 0;
  sub_1000875F0((uint64_t)(v18 + 4), (uint64_t)v143);
  v40 = v144;
  v41 = v145;
  sub_1002862D0(v143, v144);
  v42 = swift_getKeyPath(&unk_1002EFF00);
  LODWORD(v141) = 0;
  BYTE4(v141) = 1;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v42, &v141, v34, v88, v40, v41);
  swift_release(v42);
  sub_1000187CC(v143);
  *((_BYTE *)v18 + 20) = 0;
  sub_1000875F0((uint64_t)(v18 + 4), (uint64_t)v143);
  v43 = v144;
  v44 = v145;
  sub_1002862D0(v143, v144);
  v45 = swift_getKeyPath(&unk_1002EFF28);
  LODWORD(v141) = 0;
  BYTE4(v141) = 1;
  v46 = sub_1000039AC(&qword_1003828C0);
  v47 = sub_1002B8B90(&qword_100382930, &qword_1003828C0, (uint64_t)&protocol witness table for Float, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v45, &v141, v46, v47, v43, v44);
  swift_release(v45);
  sub_1000187CC(v143);
  *((_BYTE *)v18 + 21) = 0;
  sub_1000875F0((uint64_t)(v18 + 4), (uint64_t)v143);
  v48 = v144;
  v49 = v145;
  sub_1002862D0(v143, v144);
  v50 = swift_getKeyPath(&unk_1002EFF50);
  LOBYTE(v141) = 2;
  v51 = sub_1000039AC(&qword_1003828D0);
  v52 = sub_1002B8B90(&qword_100382938, &qword_1003828D0, (uint64_t)&protocol witness table for Bool, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v50, &v141, v51, v52, v48, v49);
  swift_release(v50);
  sub_1000187CC(v143);
  *((_BYTE *)v18 + 22) = 0;
  sub_1000875F0((uint64_t)(v18 + 4), (uint64_t)v143);
  v53 = v144;
  v54 = v145;
  sub_1002862D0(v143, v144);
  v55 = swift_getKeyPath(&unk_1002EFF78);
  LOBYTE(v141) = 2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v55, &v141, v51, v52, v53, v54);
  swift_release(v55);
  sub_1000187CC(v143);
  *((_BYTE *)v18 + 23) = 0;
  sub_1000875F0((uint64_t)(v18 + 4), (uint64_t)v143);
  v56 = v144;
  v57 = v145;
  sub_1002862D0(v143, v144);
  v58 = swift_getKeyPath(&unk_1002EFFA0);
  LOBYTE(v141) = 4;
  v59 = sub_1000039AC(&qword_1003828E0);
  v60 = sub_1002B66FC(&qword_100382940, &qword_1003828E0, (void (*)(void))sub_1002B8B4C, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v58, &v141, v59, v60, v56, v57);
  swift_release(v58);
  sub_1000187CC(v143);
  *((_BYTE *)v18 + 24) = 0;
  sub_1000875F0((uint64_t)(v18 + 4), (uint64_t)v143);
  v61 = v144;
  v62 = v145;
  sub_1002862D0(v143, v144);
  v63 = swift_getKeyPath(&unk_1002EFFC8);
  LODWORD(v141) = 0;
  BYTE4(v141) = 1;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v63, &v141, v34, v88, v61, v62);
  swift_release(v63);
  sub_1000187CC(v143);
  *((_BYTE *)v18 + 25) = 0;
  sub_1000875F0((uint64_t)(v18 + 4), (uint64_t)v143);
  v64 = v144;
  v65 = v145;
  sub_1002862D0(v143, v144);
  v66 = swift_getKeyPath(&unk_1002EFFF0);
  v141 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v66, &v141, &type metadata for Double, &protocol witness table for Double, v64, v65);
  swift_release(v66);
  sub_1000187CC(v143);
  sub_1000875F0((uint64_t)(v18 + 4), (uint64_t)v143);
  v67 = v144;
  v68 = v145;
  sub_1002862D0(v143, v144);
  v69 = swift_getKeyPath(&unk_1002F0018);
  v141 = 0;
  LOBYTE(v142) = 1;
  v70 = sub_1000039AC(&qword_1003828F8);
  v71 = sub_1002B8B90(&qword_100382950, &qword_1003828F8, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v69, &v141, v70, v71, v67, v68);
  swift_release(v69);
  v72 = sub_1000187CC(v143);
  *((_BYTE *)v18 + 26) = 0;
  ObservationRegistrar.init()(v72);
  v143[0] = v18;
  v73 = swift_getKeyPath(&unk_1002EFE60);
  v138 = v18;
  v139 = a1;
  v140 = a2 & 1;
  v74 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v143, v73, sub_1002C0AAC, v137, (char *)&type metadata for () + 8, v74);
  swift_release(v73);
  v143[0] = v18;
  v75 = swift_getKeyPath(&unk_1002EFE88);
  v134 = v18;
  v135 = a3;
  v136 = a4;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v143, v75, sub_1002C0BA4, v133, (char *)&type metadata for () + 8, v74);
  swift_release(v75);
  swift_bridgeObjectRelease(a4);
  v143[0] = v18;
  v76 = swift_getKeyPath(&unk_1002EFEB0);
  v130 = v18;
  v131 = a5;
  v132 = BYTE4(a5) & 1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v143, v76, sub_1002B5130, v129, (char *)&type metadata for () + 8, v74);
  swift_release(v76);
  v143[0] = v18;
  v77 = swift_getKeyPath(&unk_1002EFED8);
  v127 = v18;
  v128 = v94;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v143, v77, sub_1002C0AD8, v126, (char *)&type metadata for () + 8, v74);
  swift_release(v77);
  v143[0] = v18;
  v78 = swift_getKeyPath(&unk_1002EFF00);
  v123 = v18;
  v124 = a7;
  v125 = BYTE4(a7) & 1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v143, v78, sub_1002B5710, v122, (char *)&type metadata for () + 8, v74);
  swift_release(v78);
  v143[0] = v18;
  v79 = swift_getKeyPath(&unk_1002EFF28);
  v119 = v18;
  v120 = a8;
  v121 = BYTE4(a8) & 1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v143, v79, sub_1002B59B0, v118, (char *)&type metadata for () + 8, v74);
  swift_release(v79);
  v143[0] = v18;
  v80 = swift_getKeyPath(&unk_1002EFF50);
  v116 = v18;
  v117 = a17;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v143, v80, sub_1002C0AEC, v115, (char *)&type metadata for () + 8, v74);
  swift_release(v80);
  v143[0] = v18;
  v81 = swift_getKeyPath(&unk_1002EFF78);
  v113 = v18;
  v114 = a18;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v143, v81, sub_1002C0B00, v112, (char *)&type metadata for () + 8, v74);
  swift_release(v81);
  v143[0] = v18;
  v82 = swift_getKeyPath(&unk_1002EFFA0);
  v110 = v18;
  v111 = v97;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v143, v82, sub_1002C0B14, v109, (char *)&type metadata for () + 8, v74);
  swift_release(v82);
  v143[0] = v18;
  v83 = swift_getKeyPath(&unk_1002EFFC8);
  v106 = v18;
  v107 = a20;
  v108 = a21 & 1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v143, v83, sub_1002B6FFC, v105, (char *)&type metadata for () + 8, v74);
  swift_release(v83);
  if ((a23 & 1) != 0)
    a22 = 0.0;
  v143[0] = v18;
  v85 = swift_getKeyPath(&unk_1002EFFF0);
  v103 = v18;
  v104 = a22;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v143, v85, sub_1002C0B28, v102, (char *)&type metadata for () + 8, v74);
  swift_release(v85);
  v143[0] = v18;
  v86 = swift_getKeyPath(&unk_1002F0018);
  v99 = v18;
  v100 = a24;
  v101 = a25 & 1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v143, v86, sub_1002C0AC0, v98, (char *)&type metadata for () + 8, v74);
  swift_release(v86);
  return v18;
}

unint64_t sub_1002B8B08()
{
  unint64_t result;

  result = qword_100382928;
  if (!qword_100382928)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ALWiFiScanRow.Mode, &type metadata for ALWiFiScanRow.Mode);
    atomic_store(result, (unint64_t *)&qword_100382928);
  }
  return result;
}

unint64_t sub_1002B8B4C()
{
  unint64_t result;

  result = qword_100382948;
  if (!qword_100382948)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ALWiFiScanRow.Band, &type metadata for ALWiFiScanRow.Band);
    atomic_store(result, (unint64_t *)&qword_100382948);
  }
  return result;
}

uint64_t sub_1002B8B90(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10000FE74(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002B8BEC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002BB1D8(type metadata accessor for ALWiFiScanRow, &qword_100382900, &qword_100382870, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow, a1);
}

uint64_t ALWiFiScanRow.persistentBackingData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 32;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1000875F0(v3, a1);
}

uint64_t sub_1002B8C5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = *a1 + 32;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1000875F0(v3, a2);
}

uint64_t sub_1002B8CA8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _BYTE v5[24];
  __int128 v6[2];

  sub_1000875F0(a1, (uint64_t)v6);
  v3 = (_QWORD *)(*a2 + 32);
  swift_beginAccess(v3, v5, 33, 0);
  sub_1000187CC(v3);
  sub_100284760(v6, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t ALWiFiScanRow.persistentBackingData.setter(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + 32);
  swift_beginAccess(v3, v5, 33, 0);
  sub_1000187CC(v3);
  sub_100284760(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t (*ALWiFiScanRow.persistentBackingData.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess(v1 + 32, v3 + 10, 0, 0);
  sub_1000875F0(v1 + 32, (uint64_t)v3);
  return sub_1002B8DCC;
}

uint64_t ALWiFiScanRow.__allocating_init(backingData:)(uint64_t a1)
{
  return sub_1002BB458(a1, (void (*)(uint64_t))ALWiFiScanRow.init(backingData:));
}

_QWORD *ALWiFiScanRow.init(backingData:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v2 = v1;
  v3 = *v1;
  v2[7] = sub_1000039AC(&qword_100382900);
  v4 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  *(_QWORD *)&v62 = v3;
  *((_QWORD *)&v62 + 1) = v3;
  v63 = v4;
  v64 = v4;
  v2[8] = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_100297680(v2 + 4);
  static PersistentModel.createBackingData<A>()(v3, v3, v4, v4);
  sub_1000875F0((uint64_t)(v2 + 4), (uint64_t)&v62);
  v5 = v64;
  v6 = v65;
  sub_1002862D0(&v62, v64);
  KeyPath = swift_getKeyPath(&unk_1002EFE60);
  v60 = 0;
  LOBYTE(v61) = 1;
  v8 = sub_1000039AC(&qword_100380C38);
  v9 = sub_1002B8B90(&qword_100382908, &qword_100380C38, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v60, v8, v9, v5, v6);
  swift_release(KeyPath);
  sub_1000187CC(&v62);
  *((_BYTE *)v2 + 16) = 0;
  sub_1000875F0((uint64_t)(v2 + 4), (uint64_t)&v62);
  v10 = v64;
  v11 = v65;
  sub_1002862D0(&v62, v64);
  v12 = swift_getKeyPath(&unk_1002EFE88);
  v60 = 0;
  v61 = 0;
  v13 = sub_1000039AC(&qword_100382888);
  v14 = sub_1002B8B90(&qword_100382910, &qword_100382888, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v12, &v60, v13, v14, v10, v11);
  swift_release(v12);
  sub_1000187CC(&v62);
  *((_BYTE *)v2 + 17) = 0;
  sub_1000875F0((uint64_t)(v2 + 4), (uint64_t)&v62);
  v15 = v64;
  v16 = v65;
  sub_1002862D0(&v62, v64);
  v17 = swift_getKeyPath(&unk_1002EFEB0);
  LODWORD(v60) = 0;
  BYTE4(v60) = 1;
  v18 = sub_1000039AC(&qword_100382898);
  v58 = sub_1002B8B90(&qword_100382918, &qword_100382898, (uint64_t)&protocol witness table for Int32, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v17, &v60, v18, v58, v15, v16);
  swift_release(v17);
  sub_1000187CC(&v62);
  *((_BYTE *)v2 + 18) = 0;
  sub_1000875F0((uint64_t)(v2 + 4), (uint64_t)&v62);
  v19 = v64;
  v20 = v65;
  sub_1002862D0(&v62, v64);
  v21 = swift_getKeyPath(&unk_1002EFED8);
  LOBYTE(v60) = 4;
  v22 = sub_1000039AC(&qword_1003828A8);
  v23 = sub_1002B66FC(&qword_100382920, &qword_1003828A8, (void (*)(void))sub_1002B8B08, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v21, &v60, v22, v23, v19, v20);
  swift_release(v21);
  sub_1000187CC(&v62);
  *((_BYTE *)v2 + 19) = 0;
  sub_1000875F0((uint64_t)(v2 + 4), (uint64_t)&v62);
  v24 = v64;
  v25 = v65;
  sub_1002862D0(&v62, v64);
  v26 = swift_getKeyPath(&unk_1002EFF00);
  LODWORD(v60) = 0;
  BYTE4(v60) = 1;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v26, &v60, v18, v58, v24, v25);
  swift_release(v26);
  sub_1000187CC(&v62);
  *((_BYTE *)v2 + 20) = 0;
  sub_1000875F0((uint64_t)(v2 + 4), (uint64_t)&v62);
  v27 = v64;
  v28 = v65;
  sub_1002862D0(&v62, v64);
  v29 = swift_getKeyPath(&unk_1002EFF28);
  LODWORD(v60) = 0;
  BYTE4(v60) = 1;
  v30 = sub_1000039AC(&qword_1003828C0);
  v31 = sub_1002B8B90(&qword_100382930, &qword_1003828C0, (uint64_t)&protocol witness table for Float, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v29, &v60, v30, v31, v27, v28);
  swift_release(v29);
  sub_1000187CC(&v62);
  *((_BYTE *)v2 + 21) = 0;
  sub_1000875F0((uint64_t)(v2 + 4), (uint64_t)&v62);
  v32 = v64;
  v33 = v65;
  sub_1002862D0(&v62, v64);
  v34 = swift_getKeyPath(&unk_1002EFF50);
  LOBYTE(v60) = 2;
  v35 = sub_1000039AC(&qword_1003828D0);
  v36 = sub_1002B8B90(&qword_100382938, &qword_1003828D0, (uint64_t)&protocol witness table for Bool, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v34, &v60, v35, v36, v32, v33);
  swift_release(v34);
  sub_1000187CC(&v62);
  *((_BYTE *)v2 + 22) = 0;
  sub_1000875F0((uint64_t)(v2 + 4), (uint64_t)&v62);
  v37 = v64;
  v38 = v65;
  sub_1002862D0(&v62, v64);
  v39 = swift_getKeyPath(&unk_1002EFF78);
  LOBYTE(v60) = 2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v39, &v60, v35, v36, v37, v38);
  swift_release(v39);
  sub_1000187CC(&v62);
  *((_BYTE *)v2 + 23) = 0;
  sub_1000875F0((uint64_t)(v2 + 4), (uint64_t)&v62);
  v40 = v64;
  v41 = v65;
  sub_1002862D0(&v62, v64);
  v42 = swift_getKeyPath(&unk_1002EFFA0);
  LOBYTE(v60) = 4;
  v43 = sub_1000039AC(&qword_1003828E0);
  v44 = sub_1002B66FC(&qword_100382940, &qword_1003828E0, (void (*)(void))sub_1002B8B4C, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v42, &v60, v43, v44, v40, v41);
  swift_release(v42);
  sub_1000187CC(&v62);
  *((_BYTE *)v2 + 24) = 0;
  sub_1000875F0((uint64_t)(v2 + 4), (uint64_t)&v62);
  v45 = v64;
  v46 = v65;
  sub_1002862D0(&v62, v64);
  v47 = swift_getKeyPath(&unk_1002EFFC8);
  LODWORD(v60) = 0;
  BYTE4(v60) = 1;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v47, &v60, v18, v58, v45, v46);
  swift_release(v47);
  sub_1000187CC(&v62);
  *((_BYTE *)v2 + 25) = 0;
  sub_1000875F0((uint64_t)(v2 + 4), (uint64_t)&v62);
  v48 = v64;
  v49 = v65;
  sub_1002862D0(&v62, v64);
  v50 = swift_getKeyPath(&unk_1002EFFF0);
  v60 = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v50, &v60, &type metadata for Double, &protocol witness table for Double, v48, v49);
  swift_release(v50);
  sub_1000187CC(&v62);
  sub_1000875F0((uint64_t)(v2 + 4), (uint64_t)&v62);
  v51 = v64;
  v52 = v65;
  sub_1002862D0(&v62, v64);
  v53 = swift_getKeyPath(&unk_1002F0018);
  v60 = 0;
  LOBYTE(v61) = 1;
  v54 = sub_1000039AC(&qword_1003828F8);
  v55 = sub_1002B8B90(&qword_100382950, &qword_1003828F8, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v53, &v60, v54, v55, v51, v52);
  swift_release(v53);
  v56 = sub_1000187CC(&v62);
  *((_BYTE *)v2 + 26) = 0;
  ObservationRegistrar.init()(v56);
  *(_DWORD *)((char *)v2 + 23) = 0;
  v2[2] = 0;
  sub_1000875F0((uint64_t)a1, (uint64_t)&v62);
  swift_beginAccess(v2 + 4, &v60, 33, 0);
  sub_1000187CC(v2 + 4);
  sub_100284760(&v62, (uint64_t)(v2 + 4));
  swift_endAccess(&v60);
  sub_1000187CC(a1);
  return v2;
}

uint64_t sub_1002B957C(uint64_t a1)
{
  return sub_1002BB5CC(a1, (uint64_t)&OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar, &qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
}

uint64_t sub_1002B95A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002BB65C(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar, &qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
}

uint64_t ALWiFiScanRow.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000187CC((_QWORD *)(v0 + 32));
  v1 = v0 + OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ALWiFiScanRow.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_1000187CC(v0 + 4);
  v1 = (char *)v0 + OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1002B9678()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_1002F0040);
  v2 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_1002F0040);
  v4 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for UInt64);
  swift_release(v3);
  return v6;
}

uint64_t sub_1002B9754@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_1002F0040);
  v4 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_1002F0040);
  v6 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt64);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_1002B9838(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_1002F0040);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1002C0B3C, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1002B98DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1002F0040);
  v7 = v1;
  v8 = a1;
  v4 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1002BFF14, &v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1002B9980(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1002F0040);
  v6 = a2;
  v4 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for UInt64);
  return swift_release(KeyPath);
}

void (*sub_1002B9A00(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  v4[2] = v2;
  v4[3] = v5;
  v4[1] = v2;
  KeyPath = swift_getKeyPath(&unk_1002F0040);
  v7 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  v4[4] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 + 1, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002F0040);
  v9 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(v4 + 1, v8, v9, &protocol witness table for UInt64);
  swift_release(v8);
  *v4 = v4[1];
  return sub_1002B9B0C;
}

void sub_1002B9B0C(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t KeyPath;
  _QWORD v7[6];

  v1 = *a1;
  v2 = **a1;
  v3 = (*a1)[4];
  v4 = (*a1)[2];
  v5 = *a1;
  v5[1] = v4;
  KeyPath = swift_getKeyPath(&unk_1002F0040);
  v7[2] = v4;
  v7[3] = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v5 + 1, KeyPath, sub_1002C0B3C, v7, (char *)&type metadata for () + 8, v3);
  swift_release(KeyPath);
  free(v1);
}

double sub_1002B9BD4()
{
  double v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v6;

  v6 = v0;
  KeyPath = swift_getKeyPath(&unk_1002F0068);
  v2 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_1002F0068);
  v4 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Double);
  swift_release(v3);
  return v6;
}

double sub_1002B9CB0@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  double v8;

  v8 = *a1;
  KeyPath = swift_getKeyPath(&unk_1002F0068);
  v4 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_1002F0068);
  v6 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Double);
  swift_release(v5);
  result = v8;
  *a2 = v8;
  return result;
}

uint64_t sub_1002B9D94(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_1002F0068);
  v6[2] = v7;
  v6[3] = v2;
  v4 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1002C0B50, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1002B9E44(double a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1002F0068);
  v7 = v1;
  v8 = a1;
  v4 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1002BFF3C, &v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1002B9EF4(double a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t KeyPath;
  uint64_t v11;
  double v13;

  KeyPath = swift_getKeyPath(a3);
  v13 = a1;
  v11 = sub_10000FD38(a4, a5, a6);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v13, v11, &protocol witness table for Double);
  return swift_release(KeyPath);
}

void (*sub_1002B9F84(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  v4[2] = v2;
  v4[3] = v5;
  v4[1] = v2;
  KeyPath = swift_getKeyPath(&unk_1002F0068);
  v7 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  v4[4] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 + 1, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002F0068);
  v9 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(v4 + 1, v8, v9, &protocol witness table for Double);
  swift_release(v8);
  *v4 = v4[1];
  return sub_1002BA090;
}

void sub_1002BA090(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t KeyPath;
  _QWORD v7[6];

  v1 = *a1;
  v2 = **a1;
  v3 = (*a1)[4];
  v4 = (*a1)[2];
  v5 = *a1;
  v5[1] = v4;
  KeyPath = swift_getKeyPath(&unk_1002F0068);
  v7[2] = v4;
  v7[3] = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v5 + 1, KeyPath, sub_1002C0B50, v7, (char *)&type metadata for () + 8, v3);
  swift_release(KeyPath);
  free(v1);
}

uint64_t sub_1002BA15C()
{
  return sub_1002BA4D8((uint64_t)&unk_1002F0090, (uint64_t)&protocol witness table for UInt8);
}

uint64_t sub_1002BA170@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1002BA5C0(a1, (uint64_t)&unk_1002F0090, (uint64_t)&protocol witness table for UInt8, a2);
}

uint64_t sub_1002BA184(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002BA198(a1, a2, a3, a4, (uint64_t)&unk_1002F0090, (uint64_t)sub_1002C0B64);
}

uint64_t sub_1002BA198(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t KeyPath;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13;

  v7 = *a1;
  v13 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v11[2] = v13;
  v12 = v7;
  v9 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, a6, v11, (char *)&type metadata for () + 8, v9);
  return swift_release(KeyPath);
}

uint64_t sub_1002BA244(char a1)
{
  return sub_1002BA258(a1, (uint64_t)&unk_1002F0090, (uint64_t)sub_1002BFF88);
}

uint64_t sub_1002BA258(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  KeyPath = swift_getKeyPath(a2);
  v10 = v3;
  v11 = a1;
  v7 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, a3, &v9, (char *)&type metadata for () + 8, v7);
  return swift_release(KeyPath);
}

void (*sub_1002BA304(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  v4[1] = v2;
  v4[2] = v5;
  *v4 = v2;
  KeyPath = swift_getKeyPath(&unk_1002F0090);
  v7 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  v4[3] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002F0090);
  v9 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(v4, v8, v9, &protocol witness table for UInt8);
  swift_release(v8);
  *((_BYTE *)v4 + 32) = *(_BYTE *)v4;
  return sub_1002BA404;
}

void sub_1002BA404(uint64_t a1)
{
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  _QWORD v6[3];
  char v7;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  **(_QWORD **)a1 = v4;
  KeyPath = swift_getKeyPath(&unk_1002F0090);
  v6[2] = v4;
  v7 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v1, KeyPath, sub_1002C0B64, v6, (char *)&type metadata for () + 8, v3);
  swift_release(KeyPath);
  free(v1);
}

uint64_t sub_1002BA4C4()
{
  return sub_1002BA4D8((uint64_t)&unk_1002F00B8, (uint64_t)&protocol witness table for Int8);
}

uint64_t sub_1002BA4D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v10;
  uint64_t v11;

  v11 = v2;
  KeyPath = swift_getKeyPath(a1);
  v6 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v6);
  swift_release(KeyPath);
  v7 = swift_getKeyPath(a1);
  v8 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(&v10, v7, v8, a2);
  swift_release(v7);
  return v10;
}

uint64_t sub_1002BA5AC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1002BA5C0(a1, (uint64_t)&unk_1002F00B8, (uint64_t)&protocol witness table for Int8, a2);
}

uint64_t sub_1002BA5C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t v13;

  v13 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v13, KeyPath, v8);
  swift_release(KeyPath);
  v9 = swift_getKeyPath(a2);
  v10 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(&v12, v9, v10, a3);
  result = swift_release(v9);
  *a4 = v12;
  return result;
}

uint64_t sub_1002BA6A8(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002BA198(a1, a2, a3, a4, (uint64_t)&unk_1002F00B8, (uint64_t)sub_1002C0B78);
}

uint64_t sub_1002BA6BC(char a1)
{
  return sub_1002BA258(a1, (uint64_t)&unk_1002F00B8, (uint64_t)sub_1002BFFC4);
}

uint64_t sub_1002BA6D0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v7;
  char v9;

  KeyPath = swift_getKeyPath(a3);
  v9 = a2;
  v7 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v9, v7, a4);
  return swift_release(KeyPath);
}

void (*sub_1002BA750(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  v4[1] = v2;
  v4[2] = v5;
  *v4 = v2;
  KeyPath = swift_getKeyPath(&unk_1002F00B8);
  v7 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  v4[3] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002F00B8);
  v9 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(v4, v8, v9, &protocol witness table for Int8);
  swift_release(v8);
  *((_BYTE *)v4 + 32) = *(_BYTE *)v4;
  return sub_1002BA850;
}

void sub_1002BA850(uint64_t a1)
{
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  _QWORD v6[3];
  char v7;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  **(_QWORD **)a1 = v4;
  KeyPath = swift_getKeyPath(&unk_1002F00B8);
  v6[2] = v4;
  v7 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v1, KeyPath, sub_1002C0B78, v6, (char *)&type metadata for () + 8, v3);
  swift_release(KeyPath);
  free(v1);
}

uint64_t sub_1002BA910()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v6;
  uint64_t v7;

  v7 = v0;
  KeyPath = swift_getKeyPath(&unk_1002F00E0);
  v2 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_1002F00E0);
  v4 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Bool);
  swift_release(v3);
  return v6;
}

uint64_t sub_1002BA9EC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;

  v9 = *a1;
  KeyPath = swift_getKeyPath(&unk_1002F00E0);
  v4 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_1002F00E0);
  v6 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Bool);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_1002BAAD0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[3];
  char v7;
  uint64_t v8;

  v2 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_1002F00E0);
  v6[2] = v8;
  v7 = v2;
  v4 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1002C0B8C, v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1002BAB78(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1002F00E0);
  v7 = v1;
  v8 = a1;
  v4 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1002C0000, &v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_1002BAC20(uint64_t a1, char a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  char v6;

  KeyPath = swift_getKeyPath(&unk_1002F00E0);
  v6 = a2;
  v4 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Bool);
  return swift_release(KeyPath);
}

void (*sub_1002BACA0(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = malloc(0x28uLL);
  *a1 = v4;
  v5 = OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  v4[1] = v2;
  v4[2] = v5;
  *v4 = v2;
  KeyPath = swift_getKeyPath(&unk_1002F00E0);
  v7 = sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  v4[3] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v7);
  swift_release(KeyPath);
  v8 = swift_getKeyPath(&unk_1002F00E0);
  v9 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)(v4, v8, v9, &protocol witness table for Bool);
  swift_release(v8);
  *((_BYTE *)v4 + 32) = *(_BYTE *)v4;
  return sub_1002BADA0;
}

void sub_1002BADA0(uint64_t a1)
{
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  _QWORD v6[3];
  char v7;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  **(_QWORD **)a1 = v4;
  KeyPath = swift_getKeyPath(&unk_1002F00E0);
  v6[2] = v4;
  v7 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v1, KeyPath, sub_1002C0B8C, v6, (char *)&type metadata for () + 8, v3);
  swift_release(KeyPath);
  free(v1);
}

uint64_t sub_1002BAE60(uint64_t a1, char a2, char a3, char a4, double a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  sub_1002BAED4(a1, a2, a3, a4, a5);
  return v11;
}

_QWORD *sub_1002BAED4(uint64_t a1, char a2, char a3, char a4, double a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;

  v6 = v5;
  v12 = *v5;
  v6[5] = sub_1000039AC(&qword_100382968);
  v13 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  v32[0] = v12;
  v32[1] = v12;
  v32[2] = v13;
  v33 = v13;
  v6[6] = swift_getOpaqueTypeConformance2(v32, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_100297680(v6 + 2);
  v14 = static PersistentModel.createBackingData<A>()(v12, v12, v13, v13);
  ObservationRegistrar.init()(v14);
  sub_1000875F0((uint64_t)(v6 + 2), (uint64_t)v32);
  v15 = v33;
  v16 = v34;
  sub_1002862D0(v32, v33);
  KeyPath = swift_getKeyPath(&unk_1002F0040);
  v31 = *(double *)&a1;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v31, &type metadata for UInt64, &protocol witness table for UInt64, v15, v16);
  swift_release(KeyPath);
  sub_1000187CC(v32);
  sub_1000875F0((uint64_t)(v6 + 2), (uint64_t)v32);
  v18 = v33;
  v19 = v34;
  sub_1002862D0(v32, v33);
  v20 = swift_getKeyPath(&unk_1002F0068);
  v31 = a5;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v20, &v31, &type metadata for Double, &protocol witness table for Double, v18, v19);
  swift_release(v20);
  sub_1000187CC(v32);
  sub_1000875F0((uint64_t)(v6 + 2), (uint64_t)v32);
  v21 = v33;
  v22 = v34;
  sub_1002862D0(v32, v33);
  v23 = swift_getKeyPath(&unk_1002F0090);
  LOBYTE(v31) = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v23, &v31, &type metadata for UInt8, &protocol witness table for UInt8, v21, v22);
  swift_release(v23);
  sub_1000187CC(v32);
  sub_1000875F0((uint64_t)(v6 + 2), (uint64_t)v32);
  v24 = v33;
  v25 = v34;
  sub_1002862D0(v32, v33);
  v26 = swift_getKeyPath(&unk_1002F00B8);
  LOBYTE(v31) = a3;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v26, &v31, &type metadata for Int8, &protocol witness table for Int8, v24, v25);
  swift_release(v26);
  sub_1000187CC(v32);
  sub_1000875F0((uint64_t)(v6 + 2), (uint64_t)v32);
  v27 = v33;
  v28 = v34;
  sub_1002862D0(v32, v33);
  v29 = swift_getKeyPath(&unk_1002F00E0);
  LOBYTE(v31) = a4;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v29, &v31, &type metadata for Bool, &protocol witness table for Bool, v27, v28);
  swift_release(v29);
  sub_1000187CC(v32);
  return v6;
}

uint64_t sub_1002BB1B4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002BB1D8(type metadata accessor for ALBTScanRow, &qword_100382968, &qword_100382960, (uint64_t)&protocol conformance descriptor for ALBTScanRow, a1);
}

uint64_t sub_1002BB1D8@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v10 = a1(0);
  a5[3] = sub_1000039AC(a2);
  v11 = sub_10000FD38(a3, a1, a4);
  v13[0] = v10;
  v13[1] = v10;
  v13[2] = v11;
  v13[3] = v11;
  a5[4] = swift_getOpaqueTypeConformance2(v13, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_100297680(a5);
  return static PersistentModel.createBackingData<A>()(v10, v10, v11, v11);
}

uint64_t ALBTScanRow.persistentBackingData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1000875F0(v3, a1);
}

uint64_t sub_1002BB2D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = *a1 + 16;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1000875F0(v3, a2);
}

uint64_t sub_1002BB320(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _BYTE v5[24];
  __int128 v6[2];

  sub_1000875F0(a1, (uint64_t)v6);
  v3 = (_QWORD *)(*a2 + 16);
  swift_beginAccess(v3, v5, 33, 0);
  sub_1000187CC(v3);
  sub_100284760(v6, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t ALBTScanRow.persistentBackingData.setter(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + 16);
  swift_beginAccess(v3, v5, 33, 0);
  sub_1000187CC(v3);
  sub_100284760(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t (*ALBTScanRow.persistentBackingData.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess(v1 + 16, v3 + 10, 0, 0);
  sub_1000875F0(v1 + 16, (uint64_t)v3);
  return sub_1002BB444;
}

uint64_t ALBTScanRow.__allocating_init(backingData:)(uint64_t a1)
{
  return sub_1002BB458(a1, (void (*)(uint64_t))ALBTScanRow.init(backingData:));
}

uint64_t sub_1002BB458(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  a2(a1);
  return v5;
}

_QWORD *ALBTScanRow.init(backingData:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = *v1;
  v2[5] = sub_1000039AC(&qword_100382968);
  v5 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  *(_QWORD *)&v9 = v4;
  *((_QWORD *)&v9 + 1) = v4;
  v10 = v5;
  v11 = v5;
  v2[6] = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_100297680(v2 + 2);
  v6 = static PersistentModel.createBackingData<A>()(v4, v4, v5, v5);
  ObservationRegistrar.init()(v6);
  sub_1000875F0((uint64_t)a1, (uint64_t)&v9);
  swift_beginAccess(v2 + 2, v8, 33, 0);
  sub_1000187CC(v2 + 2);
  sub_100284760(&v9, (uint64_t)(v2 + 2));
  swift_endAccess(v8);
  sub_1000187CC(a1);
  return v2;
}

uint64_t sub_1002BB5A8(uint64_t a1)
{
  return sub_1002BB5CC(a1, (uint64_t)&OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar, &qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
}

uint64_t sub_1002BB5CC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;

  v6 = sub_10000FD38(a3, a4, a5);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, a1, v6);
}

uint64_t sub_1002BB628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002BB65C(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar, &qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
}

uint64_t sub_1002BB65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v12;
  uint64_t v14;

  v12 = sub_10000FD38(a6, a7, a8);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, a1, a2, a3, a4, v12);
}

uint64_t ALBTScanRow.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000187CC((_QWORD *)(v0 + 16));
  v1 = v0 + OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ALBTScanRow.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_1000187CC(v0 + 2);
  v1 = (char *)v0 + OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

double sub_1002BB794()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return *(double *)(v0 + 32);
}

uint64_t sub_1002BB7C4(double a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 32, v4, 1, 0);
  *(double *)(v1 + 32) = a1;
  return result;
}

void *sub_1002BB800(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 32, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_1002BB83C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 40, 7);
  sub_1002BB870();
  return v1;
}

void sub_1002BB870()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void (*v38)(__int128 *__return_ptr, unint64_t, unint64_t, void *);
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void (*v82)(char *, uint64_t);
  double *v83;
  uint64_t v84;
  void (*v85)(__int128 *__return_ptr, unint64_t, unint64_t, void *);
  double v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  double *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, unint64_t, uint64_t);
  uint64_t v102;
  char *v103;
  char *v104;
  char v105[24];
  _QWORD v106[3];
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;

  v1 = type metadata accessor for Logger(0);
  v102 = *(_QWORD *)(v1 - 8);
  v2 = __chkstk_darwin(v1);
  v97 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v92 = (uint64_t)&v87 - v4;
  v5 = type metadata accessor for ModelConfiguration.CloudKitDatabase(0);
  __chkstk_darwin(v5);
  v96 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ModelConfiguration(0);
  v98 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v103 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v93 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v95 = (char *)&v87 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v87 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v87 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v87 - v21;
  v94 = (double *)v0;
  v0[2] = 0;
  v23 = v0 + 2;
  v0[3] = 0;
  v87 = v0 + 3;
  v0[4] = 0;
  v24 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v25 = objc_msgSend(v24, "URLsForDirectory:inDomains:", 5, 1);

  v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v9);
  if (!*(_QWORD *)(v26 + 16))
  {
    __break(1u);
    goto LABEL_25;
  }
  v104 = v17;
  v100 = v1;
  v27 = v26 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v101 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
  v101(v22, v27, v9);
  swift_bridgeObjectRelease(v26);
  URL.appendingPathComponent(_:isDirectory:)(0x736568636143, 0xE600000000000000, 1);
  v28 = (void *)objc_opt_self(NSBundle);
  v29 = objc_msgSend(v28, "mainBundle");
  v30 = objc_msgSend(v29, "infoDictionary");

  if (!v30)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return;
  }
  v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v30, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (*(_QWORD *)(v31 + 16) && (v32 = sub_10029FAD0(0xD000000000000012, 0x80000001003068E0), (v33 & 1) != 0))
  {
    sub_1000187EC(*(_QWORD *)(v31 + 56) + 32 * v32, (uint64_t)&v109);
  }
  else
  {
    v109 = 0u;
    v110 = 0u;
  }
  v89 = v10;
  v90 = v22;
  v99 = v20;
  v91 = v7;
  swift_bridgeObjectRelease(v31);
  if (!*((_QWORD *)&v110 + 1))
    goto LABEL_26;
  sub_1002AA440(&v109, &v111);
  swift_dynamicCast(v106, &v111, (char *)&type metadata for Any + 8, &type metadata for String, 7);
  v34 = v106[0];
  v35 = v106[1];
  v36 = sub_1002A951C();
  v37 = *v36;
  v38 = *(void (**)(__int128 *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v36
                                                                                                  + 112);
  swift_retain(*v36);
  v38(&v111, 0xD000000000000010, 0x8000000100306900, &type metadata for String);
  swift_release(v37);
  v39 = *((_QWORD *)&v111 + 1);
  if (*((_QWORD *)&v111 + 1))
  {
    v40 = v111;
    swift_bridgeObjectRelease(v35);
  }
  else
  {
    *(_QWORD *)&v109 = v34;
    *((_QWORD *)&v109 + 1) = v35;
    swift_bridgeObjectRetain(v35);
    v41._countAndFlagsBits = 0x336C71732E64735FLL;
    v41._object = (void *)0xE800000000000000;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(v35);
    v39 = *((_QWORD *)&v109 + 1);
    v40 = v109;
  }
  v42 = v98;
  URL.appendingPathComponent(_:)(v40, v39);
  swift_bridgeObjectRelease(v39);
  v43 = objc_msgSend(v28, "mainBundle");
  v44 = objc_msgSend(v43, "bundleIdentifier");

  v88 = v36;
  if (v44)
  {
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v47 = v46;

  }
  else
  {
    v45 = 0;
    v47 = 0;
  }
  v48 = v95;
  v49 = v104;
  v50 = ((uint64_t (*)(char *, char *, uint64_t))v101)(v95, v104, v9);
  v51 = v96;
  static ModelConfiguration.CloudKitDatabase.automatic.getter(v50);
  v52 = v103;
  ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)(v45, v47, 0, v48, 1, v51);
  type metadata accessor for ModelContainer(0);
  v53 = sub_1000039AC(&qword_100382970);
  v54 = swift_allocObject(v53, 64, 7);
  *(_OWORD *)(v54 + 16) = xmmword_1002C3150;
  v55 = type metadata accessor for ALWiFiScanRow(0);
  v56 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  *(_QWORD *)(v54 + 32) = v55;
  *(_QWORD *)(v54 + 40) = v56;
  v57 = type metadata accessor for ALBTScanRow(0);
  v58 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  *(_QWORD *)(v54 + 48) = v57;
  *(_QWORD *)(v54 + 56) = v58;
  v59 = sub_1000039AC(&qword_100382978);
  v60 = swift_allocObject(v59, 72, 7);
  *(_OWORD *)(v60 + 16) = xmmword_1002CAB70;
  v61 = v91;
  *(_QWORD *)(v60 + 56) = v91;
  *(_QWORD *)(v60 + 64) = sub_10000FD38(&qword_100382980, (uint64_t (*)(uint64_t))&type metadata accessor for ModelConfiguration, (uint64_t)&protocol conformance descriptor for ModelConfiguration);
  v62 = sub_100297680((_QWORD *)(v60 + 32));
  (*(void (**)(_QWORD *, char *, uint64_t))(v42 + 16))(v62, v52, v61);
  v63 = ModelContainer.__allocating_init(for:configurations:)(v54, v60);
  swift_beginAccess(v23, v105, 1, 0);
  v64 = *v23;
  *v23 = v63;
  swift_release(v64);
  v65 = (uint64_t)v97;
  swift_beginAccess(v23, &v111, 0, 0);
  v66 = *v23;
  if (*v23)
  {
    v67 = type metadata accessor for ModelContext(0);
    swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
    v68 = swift_retain(v66);
    v69 = ModelContext.init(_:)(v68);
    v70 = v87;
    swift_beginAccess(v87, v106, 1, 0);
    v71 = *v70;
    *v70 = v69;
    swift_release(v71);
  }
  else
  {
    v72 = v92;
    corelog.getter(v92);
    Logger._fault(_:function:file:line:)((uint64_t (*)(void))sub_1002BC2F4, 0, (uint64_t *)"init()", 6, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALDatabase.swift", 68, 2);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v72, v100);
  }
  v73 = v93;
  corelog.getter(v65);
  v74 = ((uint64_t (*)(char *, char *, uint64_t))v101)(v73, v49, v9);
  v75 = Logger.logObject.getter(v74);
  v76 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v75, v76))
  {
    v77 = (uint8_t *)swift_slowAlloc(12, -1);
    v78 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v109 = v78;
    *(_DWORD *)v77 = 136446210;
    v79 = URL.absoluteString.getter();
    v81 = v80;
    v107 = sub_10001818C(v79, v80, (uint64_t *)&v109);
    v42 = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v77 + 4, v77 + 12);
    swift_bridgeObjectRelease(v81);
    v82 = *(void (**)(char *, uint64_t))(v89 + 8);
    v82(v73, v9);
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Database file in use: %{public}s", v77, 0xCu);
    swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v77, -1, -1);

    v49 = v104;
    (*(void (**)(char *, uint64_t))(v102 + 8))(v97, v100);
  }
  else
  {
    v82 = *(void (**)(char *, uint64_t))(v89 + 8);
    v82(v73, v9);

    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v65, v100);
  }
  v83 = v94;
  v84 = *v88;
  v85 = *(void (**)(__int128 *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v88
                                                                                                  + 112);
  swift_retain(*v88);
  v85(&v109, 0xD000000000000016, 0x8000000100306970, &type metadata for Double);
  swift_release(v84);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v103, v61);
  v82(v49, v9);
  v82(v99, v9);
  v82(v90, v9);
  if (BYTE8(v109))
    v86 = 24.0;
  else
    v86 = *(double *)&v109;
  swift_beginAccess(v83 + 4, &v109, 1, 0);
  v83[4] = v86;
}

unint64_t sub_1002BC2F4()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1002BC310(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  double v37;
  char v38;
  char v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t KeyPath;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  double v103;
  double v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  void (*v129)(char *);
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  char v143;
  char v144[17];

  v141 = a1;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC(&qword_10036A6D8);
  v7 = __chkstk_darwin(v6);
  v131 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v130 = (char *)&v116 - v9;
  v10 = sub_1000039AC(&qword_100380860);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v132 = (char *)&v116 - v14;
  v15 = sub_1000039AC(&qword_10036E1A8);
  v16 = __chkstk_darwin(v15);
  v124 = (char *)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v133 = (char *)&v116 - v18;
  v19 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v134 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v140 = (char *)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000039AC((uint64_t *)&unk_100380850);
  __chkstk_darwin(v21);
  v23 = (char *)&v116 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ALWiFiScanResult(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v139 = (char *)&v116 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 128))(v26);
  if (!result)
    return result;
  v29 = result;
  ALWiFiNotification._scanResult.getter(result);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    v30 = sub_100015704((uint64_t)v23, (uint64_t *)&unk_100380850);
LABEL_26:
    dispatch thunk of ModelContext.save()(v30);
    return swift_release(v29);
  }
  v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v25 + 32))(v139, v23, v24);
  v32 = ALWiFiScanResult._accessPoints.getter(v31);
  v33 = *(_QWORD *)(v32 + 16);
  if (!v33)
  {
    swift_bridgeObjectRelease(v32);
LABEL_25:
    v30 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v139, v24);
    goto LABEL_26;
  }
  v118 = v25;
  v119 = v24;
  v123 = v13;
  v120 = v5;
  v121 = v3;
  v122 = v2;
  v34 = (*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80);
  v117 = v32;
  v35 = v32 + v34;
  v125 = *(_QWORD *)(v134 + 72);
  v129 = *(void (**)(char *))(v134 + 16);
  v127 = v29;
  v128 = (char *)&type metadata for () + 8;
  v36 = v140;
  v126 = v19;
  while (1)
  {
    v136 = v35;
    v137 = v33;
    v129(v36);
    LOBYTE(v142) = 4;
    v144[0] = 4;
    v43 = type metadata accessor for ALWiFiScanRow(0);
    v44 = *(unsigned int *)(v43 + 48);
    v45 = *(unsigned __int16 *)(v43 + 52);
    v135 = v43;
    v46 = swift_allocObject(v43, v44, v45);
    v143 = 1;
    v55 = ALWiFiScanRow.init(mac:ssid:rssiDb:mode:channel:ageSec:isAppleHotspot:isMoving:band:frequencyKhz:cfAbsoluteTimeSec:machContinuousTimeSec:)(0, 1, 0, 0, 0x100000000, (char *)&v142, 0x100000000, 0x100000000, v47, v48, v49, v50, v51, v52, v53, v54, 2, 2, v144,
            0,
            1,
            0.0,
            1,
            0,
            1);
    ALWiFiScanSingleAccessPoint._mac.getter(v55);
    v56 = (uint64_t *)(v46 + OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar);
    v142 = v46;
    KeyPath = swift_getKeyPath(&unk_1002EFE60);
    v141 = &v116;
    __chkstk_darwin(KeyPath);
    v58 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
    v59 = v128;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v142, KeyPath, sub_1002C0AAC, &v111, v128, v58);
    v60 = swift_release(KeyPath);
    v61 = ALWiFiScanSingleAccessPoint._ssid.getter(v60);
    v63 = v62;
    v142 = v46;
    v64 = swift_getKeyPath(&unk_1002EFE88);
    __chkstk_darwin(v64);
    v112 = v46;
    v113 = *(double *)&v61;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v142, v64, sub_1002C0BA4, &v111, v59, v58);
    swift_release(v64);
    v65 = swift_bridgeObjectRelease(v63);
    v66 = ALWiFiScanSingleAccessPoint._rssidB.getter(v65);
    v142 = v46;
    v67 = swift_getKeyPath(&unk_1002EFEB0);
    __chkstk_darwin(v67);
    v114 = v46;
    LODWORD(v115) = v66;
    BYTE4(v115) = BYTE4(v66) & 1;
    v138 = v58;
    v141 = v56;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v142, v67, sub_1002B5130, &v112, v59, v58);
    v68 = swift_release(v67);
    v69 = (uint64_t)v133;
    ALWiFiScanSingleAccessPoint._mode.getter(v68);
    v70 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode(0);
    v71 = *(_QWORD *)(v70 - 8);
    v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
    LODWORD(v66) = v72(v69, 1, v70);
    v73 = sub_100015704(v69, &qword_10036E1A8);
    if ((_DWORD)v66 == 1)
      goto LABEL_13;
    v74 = v124;
    ALWiFiScanSingleAccessPoint._mode.getter(v73);
    result = v72((uint64_t)v74, 1, v70);
    if ((_DWORD)result == 1)
      break;
    ALWiFiScanSingleAccessPoint.Mode.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v74, v70);
LABEL_13:
    v142 = v46;
    v75 = swift_getKeyPath(&unk_1002EFED8);
    __chkstk_darwin(v75);
    v76 = v138;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v142, v75, sub_1002C0AD8, &v112, (char *)&type metadata for () + 8, v138);
    v77 = swift_release(v75);
    ALWiFiScanSingleAccessPoint._channel.getter(v77);
    v142 = v46;
    v78 = swift_getKeyPath(&unk_1002EFF00);
    __chkstk_darwin(v78);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v142, v78, sub_1002B5710, &v112, (char *)&type metadata for () + 8, v76);
    v79 = swift_release(v78);
    v80 = ALWiFiScanSingleAccessPoint._ageSec.getter(v79);
    v142 = v46;
    v81 = swift_getKeyPath(&unk_1002EFF28);
    __chkstk_darwin(v81);
    LODWORD(v115) = v80;
    BYTE4(v115) = BYTE4(v80) & 1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v142, v81, sub_1002B59B0, &v112, (char *)&type metadata for () + 8, v76);
    v82 = swift_release(v81);
    ALWiFiScanSingleAccessPoint._isAph.getter(v82);
    v142 = v46;
    v83 = swift_getKeyPath(&unk_1002EFF50);
    __chkstk_darwin(v83);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v142, v83, sub_1002C0AEC, &v112, (char *)&type metadata for () + 8, v76);
    v84 = swift_release(v83);
    LOBYTE(v80) = ALWiFiScanSingleAccessPoint._isMoving.getter(v84);
    v142 = v46;
    v85 = swift_getKeyPath(&unk_1002EFF78);
    __chkstk_darwin(v85);
    v114 = v46;
    LOBYTE(v115) = v80;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v142, v85, sub_1002C0B00, &v112, (char *)&type metadata for () + 8, v76);
    v86 = swift_release(v85);
    v87 = (uint64_t)v132;
    ALWiFiScanSingleAccessPoint._band.getter(v86);
    v88 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band(0);
    v89 = *(_QWORD *)(v88 - 8);
    v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
    LODWORD(v80) = v90(v87, 1, v88);
    v91 = sub_100015704(v87, &qword_100380860);
    if ((_DWORD)v80 != 1)
    {
      v92 = v123;
      ALWiFiScanSingleAccessPoint._band.getter(v91);
      result = v90((uint64_t)v92, 1, v88);
      if ((_DWORD)result == 1)
        goto LABEL_29;
      ALWiFiScanSingleAccessPoint.Band.rawValue.getter();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v92, v88);
    }
    v142 = v46;
    v93 = swift_getKeyPath(&unk_1002EFFA0);
    __chkstk_darwin(v93);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v142, v93, sub_1002C0B14, &v112, (char *)&type metadata for () + 8, v76);
    v94 = swift_release(v93);
    v95 = ALWiFiScanSingleAccessPoint._frequencyKhz.getter(v94);
    v142 = v46;
    v96 = swift_getKeyPath(&unk_1002EFFC8);
    __chkstk_darwin(v96);
    v114 = v46;
    LODWORD(v115) = v95;
    BYTE4(v115) = BYTE4(v95) & 1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v142, v96, sub_1002B6FFC, &v112, (char *)&type metadata for () + 8, v76);
    v97 = swift_release(v96);
    v98 = (uint64_t)v130;
    ALWiFiScanResult._scanTimestamp.getter(v97);
    v99 = type metadata accessor for ALTimeStamp(0);
    v100 = *(_QWORD *)(v99 - 8);
    v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
    v102 = v101(v98, 1, v99);
    if ((_DWORD)v102 == 1)
    {
      sub_100015704(v98, &qword_10036A6D8);
      v103 = 0.0;
    }
    else
    {
      v104 = COERCE_DOUBLE(ALTimeStamp.cfAbsoluteTimeSec.getter(v102));
      v106 = v105;
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v98, v99);
      if ((v106 & 1) != 0)
        v103 = 0.0;
      else
        v103 = v104;
    }
    v142 = v46;
    v107 = swift_getKeyPath(&unk_1002EFFF0);
    __chkstk_darwin(v107);
    v114 = v46;
    v115 = v103;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v142, v107, sub_1002C0B28, &v112, (char *)&type metadata for () + 8, v76);
    v108 = swift_release(v107);
    v109 = (uint64_t)v131;
    ALWiFiScanResult._scanTimestamp.getter(v108);
    v110 = v101(v109, 1, v99);
    if ((_DWORD)v110 == 1)
    {
      sub_100015704(v109, &qword_10036A6D8);
      v40 = 0.0;
    }
    else
    {
      v37 = COERCE_DOUBLE(ALTimeStamp.machContinuousTimeSec.getter(v110));
      v39 = v38;
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v109, v99);
      if ((v39 & 1) != 0)
        v40 = 0.0;
      else
        v40 = v37;
    }
    v29 = v127;
    v142 = v46;
    v41 = swift_getKeyPath(&unk_1002F0018);
    __chkstk_darwin(v41);
    v112 = v46;
    v113 = v40;
    LOBYTE(v114) = 0;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v142, v41, sub_1002C0AC0, &v111, (char *)&type metadata for () + 8, v76);
    swift_release(v41);
    v42 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
    dispatch thunk of ModelContext.insert<A>(_:)(v46, v135, v42);
    swift_release(v46);
    v36 = v140;
    (*(void (**)(char *, uint64_t))(v134 + 8))(v140, v126);
    v35 = v136 + v125;
    v33 = v137 - 1;
    if (v137 == 1)
    {
      swift_bridgeObjectRelease(v117);
      v24 = v119;
      v25 = v118;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *sub_1002BD0A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t KeyPath;
  uint64_t v52;
  uint64_t v53;
  double v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  char v60;
  char *v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  char v87;
  char *v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  unint64_t i;
  unint64_t v106;
  int64_t v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char **, _QWORD);
  unint64_t *v164;
  unint64_t *v165;
  unint64_t v166;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  void (*v185)(char *, _QWORD, uint64_t, uint64_t);
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *result;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  char *v205;
  int64_t v206;
  char *v207;
  int64_t v208;
  _QWORD *v209;
  char *v210;
  char *v211;
  char *v212;
  double v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  unint64_t v228;
  char *v229;
  uint64_t v230;
  __int128 v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  double v240;

  v3 = type metadata accessor for Logger(0);
  __chkstk_darwin(v3);
  v4 = sub_1000039AC(&qword_1003824C0);
  __chkstk_darwin(v4);
  v212 = (char *)&v201 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000039AC((uint64_t *)&unk_100380850);
  __chkstk_darwin(v6);
  v211 = (char *)&v201 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = type metadata accessor for ALWiFiNotification(0);
  v220 = *(_QWORD *)(v221 - 8);
  v8 = __chkstk_darwin(v221);
  v219 = (char *)&v201 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v218 = (char *)&v201 - v10;
  v11 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v11);
  v210 = (char *)&v201 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = type metadata accessor for ALTimeStamp(0);
  v216 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217);
  v222 = (char *)&v201 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000039AC(&qword_100380860);
  __chkstk_darwin(v14);
  v226 = (char *)&v201 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000039AC(&qword_10036E1A8);
  __chkstk_darwin(v16);
  v227 = (char *)&v201 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ALWiFiScanSingleAccessPoint(0);
  v233 = *(_QWORD *)(v18 - 8);
  v234 = v18;
  v19 = __chkstk_darwin(v18);
  v232 = (char *)&v201 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v237 = (char *)&v201 - v21;
  v215 = type metadata accessor for ALWiFiScanResult(0);
  v214 = *(_QWORD *)(v215 - 8);
  __chkstk_darwin(v215);
  v229 = (char *)&v201 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000039AC(&qword_100382D00);
  __chkstk_darwin(v23);
  v25 = (char *)&v201 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000039AC(&qword_100382D78);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v201 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 128))(v28);
  if (!v31)
    return &_swiftEmptyArrayStorage;
  v32 = v31;
  v33 = sub_1000039AC(&qword_100382988);
  v34 = a1;
  v35 = *(_QWORD *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v25, v34, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v25, 0, 1, v33);
  v36 = type metadata accessor for ALWiFiScanRow(0);
  v37 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  FetchDescriptor.init(predicate:sortBy:)(v25, &_swiftEmptyArrayStorage, v36, v37);
  v236 = v37;
  v203 = v32;
  v39 = dispatch thunk of ModelContext.fetch<A>(_:)(v30, v36, v37);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
  v40 = 0.0;
  v238 = (char *)&_swiftEmptyDictionarySingleton;
  if ((unint64_t)v39 >> 62)
    goto LABEL_40;
  v41 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v41)
  {
    v213 = v40;
    v235 = v41;
    if ((v39 & 0xC000000000000001) != 0)
    {
      v42 = 0;
      v43 = (char *)&_swiftEmptyDictionarySingleton;
      v231 = xmmword_1002EFE40;
      while (1)
      {
        *(double *)&v49 = COERCE_DOUBLE(specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v39));
        v50 = v42 + 1;
        if (__OFADD__(v42, 1))
          break;
        v40 = *(double *)&v49;
        v240 = *(double *)&v49;
        KeyPath = swift_getKeyPath(&unk_1002EFFF0);
        v52 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v240, KeyPath, v52);
        swift_release(KeyPath);
        v53 = swift_getKeyPath(&unk_1002EFFF0);
        PersistentModel.getValue<A>(forKey:)(&v240, v53, v236, &protocol witness table for Double);
        swift_release(v53);
        v54 = v240;
        v56 = sub_1002BF750(v240);
        v57 = *((_QWORD *)v43 + 2);
        v58 = (v55 & 1) == 0;
        v59 = v57 + v58;
        if (__OFADD__(v57, v58))
          goto LABEL_35;
        v60 = v55;
        if (*((_QWORD *)v43 + 3) < v59)
        {
          sub_1002BF81C(v59, 1);
          v61 = v238;
          v62 = sub_1002BF750(v54);
          if ((v60 & 1) != (v63 & 1))
            goto LABEL_113;
          v56 = v62;
          v43 = v61;
          v41 = v235;
        }
        if ((v60 & 1) != 0)
        {
          v44 = v43;
          v45 = (_QWORD *)(*((_QWORD *)v43 + 7) + 8 * v56);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v47 = *(_QWORD *)((*v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v46 = *(_QWORD *)((*v45 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v47 >= v46 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
          v48 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, *(_QWORD *)&v40);
          specialized Array._endMutation()(v48);
          v43 = v44;
          v41 = v235;
        }
        else
        {
          v64 = sub_1000039AC(&qword_100381DC8);
          *(double *)&v65 = COERCE_DOUBLE(swift_allocObject(v64, 40, 7));
          *(_OWORD *)(v65 + 16) = v231;
          *(double *)(v65 + 32) = v40;
          v240 = *(double *)&v65;
          specialized Array._endMutation()(v65);
          v66 = v240;
          *(_QWORD *)&v43[8 * (v56 >> 6) + 64] |= 1 << v56;
          v67 = 8 * v56;
          *(double *)(*((_QWORD *)v43 + 6) + v67) = v54;
          *(double *)(*((_QWORD *)v43 + 7) + v67) = v66;
          v68 = *((_QWORD *)v43 + 2);
          v69 = __OFADD__(v68, 1);
          v70 = v68 + 1;
          if (v69)
            goto LABEL_38;
          *((_QWORD *)v43 + 2) = v70;
        }
        ++v42;
        if (v50 == v41)
          goto LABEL_33;
      }
      __break(1u);
LABEL_35:
      __break(1u);
    }
    else
    {
      v71 = 0;
      v43 = (char *)&_swiftEmptyDictionarySingleton;
      v231 = xmmword_1002EFE40;
      while (1)
      {
        v77 = v71 + 1;
        if (__OFADD__(v71, 1))
          break;
        v240 = *(double *)(v39 + 8 * v71 + 32);
        v40 = v240;
        v78 = swift_getKeyPath(&unk_1002EFFF0);
        v79 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
        swift_retain(*(_QWORD *)&v40);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v240, v78, v79);
        swift_release(v78);
        v80 = swift_getKeyPath(&unk_1002EFFF0);
        PersistentModel.getValue<A>(forKey:)(&v240, v80, v236, &protocol witness table for Double);
        swift_release(v80);
        v81 = v240;
        v83 = sub_1002BF750(v240);
        v84 = *((_QWORD *)v43 + 2);
        v85 = (v82 & 1) == 0;
        v86 = v84 + v85;
        if (__OFADD__(v84, v85))
          goto LABEL_37;
        v87 = v82;
        if (*((_QWORD *)v43 + 3) < v86)
        {
          sub_1002BF81C(v86, 1);
          v88 = v238;
          v89 = sub_1002BF750(v81);
          if ((v87 & 1) != (v90 & 1))
            goto LABEL_113;
          v83 = v89;
          v43 = v88;
          v41 = v235;
        }
        if ((v87 & 1) != 0)
        {
          v72 = v43;
          v73 = (_QWORD *)(*((_QWORD *)v43 + 7) + 8 * v83);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v75 = *(_QWORD *)((*v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v74 = *(_QWORD *)((*v73 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v75 >= v74 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1);
          v76 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v75, *(_QWORD *)&v40);
          specialized Array._endMutation()(v76);
          v43 = v72;
        }
        else
        {
          v91 = sub_1000039AC(&qword_100381DC8);
          *(double *)&v92 = COERCE_DOUBLE(swift_allocObject(v91, 40, 7));
          *(_OWORD *)(v92 + 16) = v231;
          *(double *)(v92 + 32) = v40;
          v240 = *(double *)&v92;
          specialized Array._endMutation()(v92);
          v93 = v240;
          *(_QWORD *)&v43[8 * (v83 >> 6) + 64] |= 1 << v83;
          v94 = 8 * v83;
          *(double *)(*((_QWORD *)v43 + 6) + v94) = v81;
          *(double *)(*((_QWORD *)v43 + 7) + v94) = v93;
          v95 = *((_QWORD *)v43 + 2);
          v69 = __OFADD__(v95, 1);
          v96 = v95 + 1;
          if (v69)
            goto LABEL_39;
          *((_QWORD *)v43 + 2) = v96;
        }
        ++v71;
        if (v77 == v41)
        {
LABEL_33:
          swift_bridgeObjectRelease(v39);
          v40 = v213;
          goto LABEL_45;
        }
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    if (v39 < 0)
      v97 = v39;
    else
      v97 = v39 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v39);
    v41 = _CocoaArrayWrapper.endIndex.getter(v97);
    swift_bridgeObjectRelease(v39);
  }
  swift_bridgeObjectRelease(v39);
  v43 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_45:
  v98 = 0;
  v99 = v43 + 64;
  v100 = 1 << v43[32];
  v101 = -1;
  if (v100 < 64)
    v101 = ~(-1 << v100);
  v102 = v101 & *((_QWORD *)v43 + 8);
  v103 = (unint64_t)(v100 + 63) >> 6;
  v204 = enum case for ALWiFiNotification.ScanType.cached(_:);
  v38 = &_swiftEmptyArrayStorage;
  v207 = v43;
  v205 = v43 + 64;
  v206 = v103;
  if (!v102)
    goto LABEL_49;
LABEL_48:
  v104 = __clz(__rbit64(v102));
  v102 &= v102 - 1;
  for (i = v104 | (v98 << 6); ; i = __clz(__rbit64(v106)) + (v98 << 6))
  {
    v108 = 8 * i;
    v109 = *(double *)(*((_QWORD *)v43 + 6) + v108);
    v110 = *(_QWORD *)(*((_QWORD *)v43 + 7) + v108);
    if ((unint64_t)v110 >> 62)
    {
      if (v110 < 0)
        v113 = *(_QWORD *)(*((_QWORD *)v43 + 7) + v108);
      else
        v113 = v110 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v110, 2);
      v114 = v113;
      v43 = v207;
      v111 = _CocoaArrayWrapper.endIndex.getter(v114);
      v112 = swift_bridgeObjectRelease(v110);
      if (!v111)
      {
LABEL_62:
        swift_bridgeObjectRelease(v110);
        if (v102)
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    else
    {
      v111 = *(_QWORD *)((v110 & 0xFFFFFFFFFFFFF8) + 0x10);
      v112 = swift_bridgeObjectRetain(v110);
      if (!v111)
        goto LABEL_62;
    }
    v208 = v98;
    v209 = v38;
    v213 = v40;
    ALWiFiScanResult.init()(v112);
    v228 = v110 & 0xC000000000000001;
    v202 = v110 + 32;
    swift_bridgeObjectRetain(v110);
    v115 = 4;
    v224 = v102;
    v223 = v110;
    v225 = v111;
    do
    {
      v116 = v115 - 4;
      if (v228)
      {
        v117 = specialized _ArrayBuffer._getElementSlowPath(_:)(v115 - 4, v110);
        v118 = (char *)v117;
        v119 = v115 - 3;
        if (__OFADD__(v116, 1))
          goto LABEL_105;
      }
      else
      {
        v118 = *(char **)(v110 + 8 * v115);
        v117 = swift_retain(v118);
        v119 = v115 - 3;
        if (__OFADD__(v116, 1))
        {
LABEL_105:
          __break(1u);
          goto LABEL_106;
        }
      }
      v230 = v119;
      ALWiFiScanSingleAccessPoint.init()(v117);
      v238 = v118;
      v120 = swift_getKeyPath(&unk_1002EFE60);
      v121 = sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v120, v121);
      swift_release(v120);
      v122 = swift_getKeyPath(&unk_1002EFE60);
      v123 = sub_1002B8B90(&qword_100382878, &qword_100380C38, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> A?);
      v124 = v236;
      PersistentModel.getValue<A>(forKey:)(&v238, v122, v236, v123);
      swift_release(v122);
      ALWiFiScanSingleAccessPoint._mac.setter(v238, v239);
      v238 = v118;
      v125 = swift_getKeyPath(&unk_1002EFE88);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v125, v121);
      swift_release(v125);
      v126 = swift_getKeyPath(&unk_1002EFE88);
      v127 = sub_1002B8B90(&qword_100382880, &qword_100382888, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
      PersistentModel.getValue<A>(forKey:)(&v238, v126, v124, v127);
      swift_release(v126);
      ALWiFiScanSingleAccessPoint._ssid.setter(v238);
      v238 = v118;
      v128 = swift_getKeyPath(&unk_1002EFEB0);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v128, v121);
      swift_release(v128);
      v129 = swift_getKeyPath(&unk_1002EFEB0);
      v235 = sub_1002B8B90(&qword_100382890, &qword_100382898, (uint64_t)&protocol witness table for Int32, (uint64_t)&protocol conformance descriptor for <A> A?);
      PersistentModel.getValue<A>(forKey:)(&v238, v129, v124, v235);
      swift_release(v129);
      v130 = v238;
      LOBYTE(v238) = BYTE4(v238);
      ALWiFiScanSingleAccessPoint._rssidB.setter(v130 | ((unint64_t)BYTE4(v238) << 32));
      v238 = v118;
      v131 = swift_getKeyPath(&unk_1002EFED8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v131, v121);
      swift_release(v131);
      v132 = swift_getKeyPath(&unk_1002EFED8);
      v133 = sub_1002B66FC(&qword_1003828A0, &qword_1003828A8, (void (*)(void))sub_1002B5414, (uint64_t)&protocol conformance descriptor for <A> A?);
      PersistentModel.getValue<A>(forKey:)(&v238, v132, v124, v133);
      swift_release(v132);
      *(_QWORD *)&v231 = v115;
      if (v238 == 4)
      {
        v134 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode(0);
        v135 = v227;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 56))(v227, 1, 1, v134);
      }
      else
      {
        v238 = v118;
        v136 = swift_getKeyPath(&unk_1002EFED8);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v136, v121);
        swift_release(v136);
        v137 = swift_getKeyPath(&unk_1002EFED8);
        PersistentModel.getValue<A>(forKey:)(&v238, v137, v124, v133);
        swift_release(v137);
        if (v238 == 4)
          goto LABEL_112;
        v135 = v227;
        ALWiFiScanSingleAccessPoint.Mode.init(rawValue:)();
      }
      ALWiFiScanSingleAccessPoint._mode.setter(v135);
      v238 = v118;
      v138 = swift_getKeyPath(&unk_1002EFF00);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v138, v121);
      swift_release(v138);
      v139 = swift_getKeyPath(&unk_1002EFF00);
      v140 = v236;
      PersistentModel.getValue<A>(forKey:)(&v238, v139, v236, v235);
      swift_release(v139);
      v141 = v238;
      LOBYTE(v238) = BYTE4(v238);
      ALWiFiScanSingleAccessPoint._channel.setter(v141 | ((unint64_t)BYTE4(v238) << 32));
      v238 = v118;
      v142 = swift_getKeyPath(&unk_1002EFF28);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v142, v121);
      swift_release(v142);
      v143 = swift_getKeyPath(&unk_1002EFF28);
      v144 = sub_1002B8B90(&qword_1003828B8, &qword_1003828C0, (uint64_t)&protocol witness table for Float, (uint64_t)&protocol conformance descriptor for <A> A?);
      PersistentModel.getValue<A>(forKey:)(&v238, v143, v140, v144);
      swift_release(v143);
      v145 = v238;
      LOBYTE(v238) = BYTE4(v238);
      ALWiFiScanSingleAccessPoint._ageSec.setter(v145 | ((unint64_t)BYTE4(v238) << 32));
      v238 = v118;
      v146 = swift_getKeyPath(&unk_1002EFF50);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v146, v121);
      swift_release(v146);
      v147 = swift_getKeyPath(&unk_1002EFF50);
      v148 = sub_1002B8B90(&qword_1003828C8, &qword_1003828D0, (uint64_t)&protocol witness table for Bool, (uint64_t)&protocol conformance descriptor for <A> A?);
      PersistentModel.getValue<A>(forKey:)(&v238, v147, v140, v148);
      swift_release(v147);
      ALWiFiScanSingleAccessPoint._isAph.setter(v238);
      v238 = v118;
      v149 = swift_getKeyPath(&unk_1002EFF78);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v149, v121);
      swift_release(v149);
      v150 = swift_getKeyPath(&unk_1002EFF78);
      PersistentModel.getValue<A>(forKey:)(&v238, v150, v140, v148);
      swift_release(v150);
      ALWiFiScanSingleAccessPoint._isMoving.setter(v238);
      v238 = v118;
      v151 = swift_getKeyPath(&unk_1002EFFA0);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v151, v121);
      swift_release(v151);
      v152 = swift_getKeyPath(&unk_1002EFFA0);
      v153 = sub_1002B66FC(&qword_1003828D8, &qword_1003828E0, (void (*)(void))sub_1002B6760, (uint64_t)&protocol conformance descriptor for <A> A?);
      PersistentModel.getValue<A>(forKey:)(&v238, v152, v140, v153);
      swift_release(v152);
      if (v238 == 4)
      {
        v154 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band(0);
        v155 = v226;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 56))(v226, 1, 1, v154);
      }
      else
      {
        v238 = v118;
        v156 = swift_getKeyPath(&unk_1002EFFA0);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v156, v121);
        swift_release(v156);
        v157 = swift_getKeyPath(&unk_1002EFFA0);
        PersistentModel.getValue<A>(forKey:)(&v238, v157, v140, v153);
        swift_release(v157);
        if (v238 == 4)
          goto LABEL_111;
        v155 = v226;
        ALWiFiScanSingleAccessPoint.Band.init(rawValue:)();
      }
      v110 = v223;
      v158 = v231;
      v159 = v237;
      ALWiFiScanSingleAccessPoint._band.setter(v155);
      v238 = v118;
      v160 = swift_getKeyPath(&unk_1002EFFC8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v160, v121);
      swift_release(v160);
      v161 = swift_getKeyPath(&unk_1002EFFC8);
      PersistentModel.getValue<A>(forKey:)(&v238, v161, v236, v235);
      swift_release(v161);
      v162 = v238;
      LOBYTE(v238) = BYTE4(v238);
      ALWiFiScanSingleAccessPoint._frequencyKhz.setter(v162 | ((unint64_t)BYTE4(v238) << 32));
      (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v232, v159, v234);
      v163 = (void (*)(char **, _QWORD))ALWiFiScanResult._accessPoints.modify(&v238);
      v165 = v164;
      v166 = *v164;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v164);
      *v165 = v166;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v166 = sub_100017F80(0, *(_QWORD *)(v166 + 16) + 1, 1, v166, &qword_100380C30, (uint64_t (*)(_QWORD))&type metadata accessor for ALWiFiScanSingleAccessPoint);
        *v165 = v166;
      }
      v169 = *(_QWORD *)(v166 + 16);
      v168 = *(_QWORD *)(v166 + 24);
      if (v169 >= v168 >> 1)
      {
        v166 = sub_100017F80(v168 > 1, v169 + 1, 1, v166, &qword_100380C30, (uint64_t (*)(_QWORD))&type metadata accessor for ALWiFiScanSingleAccessPoint);
        *v165 = v166;
      }
      v102 = v224;
      *(_QWORD *)(v166 + 16) = v169 + 1;
      v170 = v233;
      v171 = v166
           + ((*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80))
           + *(_QWORD *)(v233 + 72) * v169;
      v172 = v234;
      (*(void (**)(unint64_t, char *, uint64_t))(v233 + 32))(v171, v232, v234);
      v163(&v238, 0);
      swift_release(v118);
      (*(void (**)(char *, uint64_t))(v170 + 8))(v237, v172);
      v115 = v158 + 1;
      v173 = v225;
    }
    while (v230 != v225);
    v174 = swift_bridgeObjectRelease(v110);
    ALTimeStamp.init(cfAbsoluteTimeSec:)(v174, v109);
    v175 = v173 - 1;
    if (__OFSUB__(v173, 1))
      goto LABEL_108;
    if (v228)
    {
      v176 = specialized _ArrayBuffer._getElementSlowPath(_:)(v175, v110);
      v177 = v236;
      v40 = v213;
      v38 = v209;
      v103 = v206;
    }
    else
    {
      v177 = v236;
      v40 = v213;
      v38 = v209;
      v103 = v206;
      if ((v175 & 0x8000000000000000) != 0)
        goto LABEL_109;
      if (v175 >= *(_QWORD *)((v110 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_110;
      v176 = *(_QWORD *)(v202 + 8 * v175);
      swift_retain(v176);
    }
    swift_bridgeObjectRelease(v110);
    v238 = (char *)v176;
    v178 = swift_getKeyPath(&unk_1002F0018);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v238, v178, v121);
    swift_release(v178);
    v179 = swift_getKeyPath(&unk_1002F0018);
    v180 = sub_1002B8B90(&qword_1003828F0, &qword_1003828F8, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <A> A?);
    PersistentModel.getValue<A>(forKey:)(&v238, v179, v177, v180);
    swift_release(v176);
    swift_release(v179);
    v181 = v222;
    ALTimeStamp._machContinuousTimeSec.setter(v238, v239);
    v182 = v216;
    v183 = v210;
    v184 = v217;
    (*(void (**)(char *, char *, uint64_t))(v216 + 16))(v210, v181, v217);
    v185 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56);
    v185(v183, 0, 1, v184);
    v186 = v229;
    v187 = ALWiFiScanResult._scanTimestamp.setter(v183);
    v188 = v218;
    v189 = ALWiFiNotification.init()(v187);
    static ALTimeStamp.now()(v189);
    v185(v183, 0, 1, v184);
    ALWiFiNotification._timestamp.setter(v183);
    v190 = v214;
    v191 = v211;
    v192 = v215;
    (*(void (**)(char *, char *, uint64_t))(v214 + 16))(v211, v186, v215);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v190 + 56))(v191, 0, 1, v192);
    ALWiFiNotification._scanResult.setter(v191);
    ALWiFiNotification._available.setter(1);
    v193 = type metadata accessor for ALWiFiNotification.ScanType(0);
    v194 = *(_QWORD *)(v193 - 8);
    v195 = v212;
    (*(void (**)(char *, _QWORD, uint64_t))(v194 + 104))(v212, v204, v193);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v194 + 56))(v195, 0, 1, v193);
    ALWiFiNotification._scanType.setter(v195);
    (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v219, v188, v221);
    if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
      v38 = (_QWORD *)sub_100017F80(0, v38[2] + 1, 1, (unint64_t)v38, &qword_10036E1D0, (uint64_t (*)(_QWORD))&type metadata accessor for ALWiFiNotification);
    v197 = v38[2];
    v196 = v38[3];
    if (v197 >= v196 >> 1)
      v38 = (_QWORD *)sub_100017F80(v196 > 1, v197 + 1, 1, (unint64_t)v38, &qword_10036E1D0, (uint64_t (*)(_QWORD))&type metadata accessor for ALWiFiNotification);
    v38[2] = v197 + 1;
    v198 = v220;
    v199 = v221;
    (*(void (**)(unint64_t, char *, uint64_t))(v220 + 32))((unint64_t)v38+ ((*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80))+ *(_QWORD *)(v198 + 72) * v197, v219, v221);
    (*(void (**)(char *, uint64_t))(v198 + 8))(v218, v199);
    (*(void (**)(char *, uint64_t))(v216 + 8))(v222, v217);
    (*(void (**)(char *, uint64_t))(v214 + 8))(v229, v215);
    v43 = v207;
    v98 = v208;
    v99 = v205;
    if (v102)
      goto LABEL_48;
LABEL_49:
    v69 = __OFADD__(v98++, 1);
    if (v69)
    {
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    if (v98 >= v103)
      goto LABEL_103;
    v106 = *(_QWORD *)&v99[8 * v98];
    if (!v106)
      break;
LABEL_59:
    v102 = (v106 - 1) & v106;
  }
  v107 = v98 + 1;
  if (v98 + 1 >= v103)
    goto LABEL_103;
  v106 = *(_QWORD *)&v99[8 * v107];
  if (v106)
    goto LABEL_58;
  v107 = v98 + 2;
  if (v98 + 2 >= v103)
    goto LABEL_103;
  v106 = *(_QWORD *)&v99[8 * v107];
  if (v106)
    goto LABEL_58;
  v107 = v98 + 3;
  if (v98 + 3 >= v103)
  {
LABEL_103:
    swift_release(v203);
    swift_release(v43);
    return v38;
  }
  v106 = *(_QWORD *)&v99[8 * v107];
  if (v106)
  {
LABEL_58:
    v98 = v107;
    goto LABEL_59;
  }
  while (1)
  {
    v98 = v107 + 1;
    if (__OFADD__(v107, 1))
      break;
    if (v98 >= v103)
      goto LABEL_103;
    v106 = *(_QWORD *)&v99[8 * v98];
    ++v107;
    if (v106)
      goto LABEL_59;
  }
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Double);
  __break(1u);
  return result;
}

uint64_t sub_1002BE8E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for Logger(0);
  __chkstk_darwin(v3);
  v4 = sub_1000039AC(&qword_100382D00);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 128))(v5);
  if (result)
  {
    v9 = result;
    v10 = type metadata accessor for ALWiFiScanRow(0);
    v11 = sub_1000039AC(&qword_100382988);
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v7, a1, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v11);
    v13 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v10, v7, 1, v10, v13);
    v14 = sub_100015704((uint64_t)v7, &qword_100382D00);
    dispatch thunk of ModelContext.save()(v14);
    return swift_release(v9);
  }
  return result;
}

_QWORD *sub_1002BEAF4(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _BYTE v10[16];
  double v11;
  double v12;
  uint64_t v13;

  v4 = sub_1000039AC(&qword_100382988);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = a1;
  v12 = a2;
  v13 = type metadata accessor for ALWiFiScanRow(0);
  Predicate.init(_:)(sub_1002C0BA0, v10, 1, &v13);
  v8 = sub_1002BD0A8((uint64_t)v7);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t sub_1002BEBB4(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];
  double v10;
  double v11;
  uint64_t v12;

  v4 = sub_1000039AC(&qword_100382988);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = a1;
  v11 = a2;
  v12 = type metadata accessor for ALWiFiScanRow(0);
  Predicate.init(_:)(sub_1002C0258, v9, 1, &v12);
  sub_1002BE8E0((uint64_t)v7);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1002BEC6C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, _QWORD, uint64_t);
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD v59[2];

  v57 = a2;
  v58 = type metadata accessor for PredicateExpressions.ComparisonOperator(0);
  v42 = *(_QWORD *)(v58 - 8);
  v7 = v42;
  __chkstk_darwin(v58);
  v45 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_1000039AC(&qword_100382D08);
  v54 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000039AC(&qword_100382D10);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_1000039AC(&qword_100382D18);
  v51 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000039AC(&qword_100382D20);
  v18 = *(_QWORD *)(v17 - 8);
  v55 = v17;
  v56 = v18;
  v19 = __chkstk_darwin(v17);
  v53 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v50 = (char *)&v41 - v21;
  v22 = *a1;
  v48 = v22;
  v23 = sub_1002A8D3C(&qword_100382D28, &qword_100382D10, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v22, v11, v23);
  KeyPath = swift_getKeyPath(&unk_1002EFFF0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v14, KeyPath, v11, v23);
  swift_release(KeyPath);
  v47 = *(void (**)(char *, uint64_t))(v12 + 8);
  v47(v14, v11);
  *(double *)v59 = a3;
  static PredicateExpressions.build_Arg<A>(_:)(v59, &type metadata for Double);
  v46 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
  v25 = v45;
  v26 = v58;
  v46(v45, enum case for PredicateExpressions.ComparisonOperator.greaterThanOrEqual(_:), v58);
  v27 = sub_1002A8D3C(&qword_100382D30, &qword_100382D18, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  v44 = v27;
  v43 = sub_1002A8D3C(&qword_100382D38, &qword_100382D08, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  v28 = v49;
  v29 = v52;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)(v16, v10, v25, v49, v52, v27, v43, &protocol witness table for Double);
  v42 = *(_QWORD *)(v42 + 8);
  ((void (*)(char *, uint64_t))v42)(v25, v26);
  v54 = *(_QWORD *)(v54 + 8);
  ((void (*)(char *, uint64_t))v54)(v10, v29);
  v30 = *(void (**)(char *, uint64_t))(v51 + 8);
  v30(v16, v28);
  static PredicateExpressions.build_Arg<A>(_:)(v48, v11, v23);
  v31 = swift_getKeyPath(&unk_1002EFFF0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v14, v31, v11, v23);
  swift_release(v31);
  v47(v14, v11);
  *(double *)v59 = a4;
  static PredicateExpressions.build_Arg<A>(_:)(v59, &type metadata for Double);
  v32 = v58;
  v46(v25, enum case for PredicateExpressions.ComparisonOperator.lessThanOrEqual(_:), v58);
  v33 = v53;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)(v16, v10, v25, v28, v29, v44, v43, &protocol witness table for Double);
  ((void (*)(char *, uint64_t))v42)(v25, v32);
  ((void (*)(char *, uint64_t))v54)(v10, v29);
  v30(v16, v28);
  v34 = sub_1000039AC(&qword_100382D40);
  v35 = v57;
  v57[3] = v34;
  v35[4] = sub_1002C0834();
  sub_100297680(v35);
  v36 = sub_1002A8D3C(&qword_100382D70, &qword_100382D20, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Comparison<A, B>);
  v37 = v50;
  v38 = v55;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v50, v33, v55, v55, v36, v36);
  v39 = *(void (**)(char *, uint64_t))(v56 + 8);
  v39(v33, v38);
  return ((uint64_t (*)(char *, uint64_t))v39)(v37, v38);
}

uint64_t sub_1002BF110()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
  if (result)
  {
    v2 = result;
    dispatch thunk of ModelContainer.erase()();
    return swift_release(v2);
  }
  return result;
}

uint64_t sub_1002BF158()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 40, 7);
}

Swift::Int ALWiFiScanRow.hashValue.getter()
{
  return sub_1002BF390(&qword_100382990, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
}

uint64_t sub_1002BF1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002BF418(a1, a2, a3, (void (*)(uint64_t))ALWiFiScanRow.init(backingData:));
}

void sub_1002BF1AC(uint64_t *a1, char a2)
{
  __int128 *v2;
  __int128 *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (__int128 *)*a1;
  v3 = (__int128 *)(*a1 + 40);
  if ((a2 & 1) != 0)
  {
    v4 = (_QWORD *)(*((_QWORD *)v2 + 16) + 32);
    sub_1000875F0(*a1, (uint64_t)v3);
    swift_beginAccess(v4, (char *)v2 + 104, 33, 0);
    sub_1000187CC(v4);
    sub_100284760(v3, (uint64_t)v4);
    swift_endAccess((char *)v2 + 104);
    sub_1000187CC(v2);
  }
  else
  {
    v5 = (_QWORD *)(*((_QWORD *)v2 + 16) + 32);
    swift_beginAccess(v5, v3, 33, 0);
    sub_1000187CC(v5);
    sub_100284760(v2, (uint64_t)v5);
    swift_endAccess(v3);
  }
  free(v2);
}

uint64_t sub_1002BF26C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_1002BF2C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_1002BF320(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = *a2;
  v5 = sub_10000FD38(&qword_100382870, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

Swift::Int ALBTScanRow.hashValue.getter()
{
  return sub_1002BF390(&qword_100382998, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
}

Swift::Int sub_1002BF390(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v7 = *v3;
  Hasher.init(_seed:)(v10, 0);
  v8 = sub_10000FD38(a1, a2, a3);
  dispatch thunk of Hashable.hash(into:)(v10, v7, v8);
  return Hasher._finalize()();
}

uint64_t sub_1002BF40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002BF418(a1, a2, a3, (void (*)(uint64_t))ALBTScanRow.init(backingData:));
}

uint64_t sub_1002BF418(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v7;

  v7 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  a4(a1);
  return v7;
}

uint64_t (*sub_1002BF460(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess(v1 + 16, v3 + 10, 0, 0);
  sub_1000875F0(v1 + 16, (uint64_t)v3);
  return sub_1002BF4C8;
}

void sub_1002BF4CC(uint64_t *a1, char a2)
{
  __int128 *v2;
  __int128 *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (__int128 *)*a1;
  v3 = (__int128 *)(*a1 + 40);
  if ((a2 & 1) != 0)
  {
    v4 = (_QWORD *)(*((_QWORD *)v2 + 16) + 16);
    sub_1000875F0(*a1, (uint64_t)v3);
    swift_beginAccess(v4, (char *)v2 + 104, 33, 0);
    sub_1000187CC(v4);
    sub_100284760(v3, (uint64_t)v4);
    swift_endAccess((char *)v2 + 104);
    sub_1000187CC(v2);
  }
  else
  {
    v5 = (_QWORD *)(*((_QWORD *)v2 + 16) + 16);
    swift_beginAccess(v5, v3, 33, 0);
    sub_1000187CC(v5);
    sub_100284760(v2, (uint64_t)v5);
    swift_endAccess(v3);
  }
  free(v2);
}

Swift::Int sub_1002BF590(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD v6[10];

  v6[9] = *v2;
  Hasher.init(_seed:)(v6, 0);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_1002BF5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1002BF648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_1002BF6A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_1002BF6FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = *a2;
  v5 = sub_10000FD38(&qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

unint64_t sub_1002BF750(double a1)
{
  uint64_t v1;
  double v3;
  uint64_t v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = a1;
  else
    v3 = 0.0;
  v4 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), *(_QWORD *)&v3);
  return sub_1002BF784(v4, a1);
}

unint64_t sub_1002BF784(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1002BF81C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000039AC(&qword_100382D80);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v34 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v35 = 1 << *(_BYTE *)(v5 + 32);
    v36 = v3;
    v37 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v21 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v22 = v21 | (v9 << 6);
      }
      else
      {
        v23 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return result;
        }
        if (v23 >= v37)
          goto LABEL_39;
        v24 = v10[v23];
        ++v9;
        if (!v24)
        {
          v9 = v23 + 1;
          if (v23 + 1 >= v37)
            goto LABEL_39;
          v24 = v10[v9];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v37)
            {
LABEL_39:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v36;
                goto LABEL_46;
              }
              if (v35 >= 64)
                bzero((void *)(v5 + 64), 8 * v37);
              else
                *v10 = v34;
              v3 = v36;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                v9 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_48;
                if (v9 >= v37)
                  goto LABEL_39;
                v24 = v10[v9];
                ++v25;
                if (v24)
                  goto LABEL_36;
              }
            }
            v9 = v25;
          }
        }
LABEL_36:
        v13 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v9 << 6);
      }
      v30 = 8 * v22;
      v31 = *(_QWORD *)(v5 + 56);
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *(_QWORD *)(v31 + v30);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v31 + v30));
      if ((v32 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v15 = v32;
      else
        v15 = 0;
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v15);
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          v28 = v18 == v27;
          if (v18 == v27)
            v18 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v18);
        }
        while (v29 == -1);
        v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(_QWORD *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_46:
  *v3 = v8;
  return result;
}

uint64_t _s8ALDaemon13ALWiFiScanRowC14schemaMetadataSay9SwiftData6SchemaC08PropertyG0VGvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v0 = sub_1000039AC(&qword_100382D88);
  v1 = *(_QWORD *)(type metadata accessor for Schema.PropertyMetadata(0) - 8);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ 12 * *(_QWORD *)(v1 + 72), *(unsigned __int8 *)(v1 + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_1002D94A0;
  KeyPath = swift_getKeyPath(&unk_1002EFE60);
  v19 = 0u;
  v20 = 0u;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1667329375, 0xE400000000000000, KeyPath, &v19, &v16);
  v4 = swift_getKeyPath(&unk_1002EFE88);
  v19 = 0u;
  v20 = 0u;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x646973735FLL, 0xE500000000000000, v4, &v19, &v16);
  v5 = swift_getKeyPath(&unk_1002EFEB0);
  v19 = 0u;
  v20 = 0u;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6244697373725FLL, 0xE700000000000000, v5, &v19, &v16);
  v6 = swift_getKeyPath(&unk_1002EFED8);
  v19 = 0u;
  v20 = 0u;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x65646F6D5FLL, 0xE500000000000000, v6, &v19, &v16);
  v7 = swift_getKeyPath(&unk_1002EFF00);
  v19 = 0u;
  v20 = 0u;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6C656E6E6168635FLL, 0xE800000000000000, v7, &v19, &v16);
  v8 = swift_getKeyPath(&unk_1002EFF28);
  v19 = 0u;
  v20 = 0u;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6365536567615FLL, 0xE700000000000000, v8, &v19, &v16);
  v9 = swift_getKeyPath(&unk_1002EFF50);
  v19 = 0u;
  v20 = 0u;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x656C70704173695FLL, 0xEF746F7073746F48, v9, &v19, &v16);
  v10 = swift_getKeyPath(&unk_1002EFF78);
  v19 = 0u;
  v20 = 0u;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6E69766F4D73695FLL, 0xE900000000000067, v10, &v19, &v16);
  v11 = swift_getKeyPath(&unk_1002EFFA0);
  v19 = 0u;
  v20 = 0u;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x646E61625FLL, 0xE500000000000000, v11, &v19, &v16);
  v12 = swift_getKeyPath(&unk_1002EFFC8);
  v19 = 0u;
  v20 = 0u;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6E6575716572665FLL, 0xED00007A684B7963, v12, &v19, &v16);
  v13 = swift_getKeyPath(&unk_1002EFFF0);
  *((_QWORD *)&v20 + 1) = &type metadata for Int;
  *(_QWORD *)&v19 = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000012, 0x8000000100306C40, v13, &v19, &v16);
  v14 = swift_getKeyPath(&unk_1002F0018);
  v19 = 0u;
  v20 = 0u;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000016, 0x8000000100306C60, v14, &v19, &v16);
  return v2;
}

uint64_t type metadata accessor for ALBTScanRow(uint64_t a1)
{
  return sub_10000E62C(a1, (uint64_t *)&unk_1003DB818, (uint64_t)&nominal type descriptor for ALBTScanRow);
}

uint64_t sub_1002BFF14()
{
  uint64_t v0;

  return sub_1002B9980(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1002BFF3C()
{
  uint64_t v0;

  return sub_1002B9EF4(*(double *)(v0 + 24), *(_QWORD *)(v0 + 16), (uint64_t)&unk_1002F0068, &qword_100382960, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
}

uint64_t sub_1002BFF88()
{
  uint64_t v0;

  return sub_1002BA6D0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), (uint64_t)&unk_1002F0090, (uint64_t)&protocol witness table for UInt8);
}

uint64_t sub_1002BFFC4()
{
  uint64_t v0;

  return sub_1002BA6D0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), (uint64_t)&unk_1002F00B8, (uint64_t)&protocol witness table for Int8);
}

uint64_t sub_1002C0000()
{
  uint64_t v0;

  return sub_1002BAC20(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t _s8ALDaemon11ALBTScanRowC14schemaMetadataSay9SwiftData6SchemaC08PropertyE0VGvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v0 = sub_1000039AC(&qword_100382D88);
  v1 = type metadata accessor for Schema.PropertyMetadata(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ 5 * *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_1002C3100;
  KeyPath = swift_getKeyPath(&unk_1002F0040);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(6513005, 0xE300000000000000, KeyPath, &v12, &v9);
  v4 = swift_getKeyPath(&unk_1002F0068);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6D617473656D6974, 0xE900000000000070, v4, &v12, &v9);
  v5 = swift_getKeyPath(&unk_1002F0090);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6C656E6E616863, 0xE700000000000000, v5, &v12, &v9);
  v6 = swift_getKeyPath(&unk_1002F00B8);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1769173874, 0xE400000000000000, v6, &v12, &v9);
  v7 = swift_getKeyPath(&unk_1002F00E0);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x66664F7361577061, 0xE800000000000000, v7, &v12, &v9);
  return v2;
}

uint64_t sub_1002C0218()
{
  return sub_1002C0A04(41, 0xD000000000000027, (void *)0x8000000100306C10);
}

uint64_t sub_1002C0238()
{
  return sub_1002C0A04(39, 0xD000000000000025, (void *)0x8000000100306BC0);
}

uint64_t sub_1002C0258@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1002BEC6C(a1, a2, *(double *)(v2 + 16), *(double *)(v2 + 24));
}

unint64_t sub_1002C0274()
{
  unint64_t result;

  result = qword_1003829A0;
  if (!qword_1003829A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ALWiFiScanRow.Mode, &type metadata for ALWiFiScanRow.Mode);
    atomic_store(result, (unint64_t *)&qword_1003829A0);
  }
  return result;
}

unint64_t sub_1002C02BC()
{
  unint64_t result;

  result = qword_1003829A8;
  if (!qword_1003829A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ALWiFiScanRow.Band, &type metadata for ALWiFiScanRow.Band);
    atomic_store(result, (unint64_t *)&qword_1003829A8);
  }
  return result;
}

uint64_t sub_1002C0300()
{
  return sub_10000FD38(&qword_100382868, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
}

uint64_t sub_1002C032C()
{
  return sub_10000FD38(&qword_100382990, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
}

uint64_t sub_1002C0358()
{
  return sub_10000FD38(&qword_1003829B0, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
}

uint64_t sub_1002C0384()
{
  return sub_10000FD38(&qword_1003829B8, type metadata accessor for ALWiFiScanRow, (uint64_t)&protocol conformance descriptor for ALWiFiScanRow);
}

uint64_t sub_1002C03B0()
{
  return sub_10000FD38(&qword_1003829C0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistentIdentifier, (uint64_t)&protocol conformance descriptor for PersistentIdentifier);
}

uint64_t sub_1002C03DC()
{
  return sub_10000FD38(&qword_100382958, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
}

uint64_t sub_1002C0408()
{
  return sub_10000FD38(&qword_100382998, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
}

uint64_t sub_1002C0434()
{
  return sub_10000FD38(&qword_1003829C8, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
}

uint64_t sub_1002C0460()
{
  return sub_10000FD38(&qword_1003829D0, type metadata accessor for ALBTScanRow, (uint64_t)&protocol conformance descriptor for ALBTScanRow);
}

uint64_t sub_1002C048C()
{
  return type metadata accessor for ALWiFiScanRow(0);
}

uint64_t sub_1002C0494(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[14];

  v4[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[8] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[9] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[10] = (char *)&value witness table for () + 64;
  v4[11] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[12] = &unk_1002F05B8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[13] = *(_QWORD *)(result - 8) + 64;
    return swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 80);
  }
  return result;
}

uint64_t method lookup function for ALWiFiScanRow(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALWiFiScanRow);
}

uint64_t dispatch thunk of ALWiFiScanRow.__allocating_init(mac:ssid:rssiDb:mode:channel:ageSec:isAppleHotspot:isMoving:band:frequencyKhz:cfAbsoluteTimeSec:machContinuousTimeSec:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  LOBYTE(a13) = a13 & 1;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v14 + 192))(a1, a2 & 1, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32), a6, a7 | ((HIDWORD(a7) & 1) << 32), a8 | ((HIDWORD(a8) & 1) << 32), a9, a10, a11 | ((HIDWORD(a11) & 1) << 32), a12, a13, a14);
}

uint64_t dispatch thunk of ALWiFiScanRow.__allocating_init(backingData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

ValueMetadata *type metadata accessor for ALWiFiScanRow.Mode()
{
  return &type metadata for ALWiFiScanRow.Mode;
}

uint64_t _s8ALDaemon13ALWiFiScanRowC4ModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1002C062C + 4 * byte_1002EFE55[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1002C0660 + 4 * byte_1002EFE50[v4]))();
}

uint64_t sub_1002C0660(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002C0668(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002C0670);
  return result;
}

uint64_t sub_1002C067C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002C0684);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1002C0688(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002C0690(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ALWiFiScanRow.Band()
{
  return &type metadata for ALWiFiScanRow.Band;
}

ValueMetadata *type metadata accessor for ALWiFiScanRow._SwiftDataNoType()
{
  return &type metadata for ALWiFiScanRow._SwiftDataNoType;
}

uint64_t sub_1002C06BC()
{
  return type metadata accessor for ALBTScanRow(0);
}

uint64_t sub_1002C06C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = &unk_1002F05B8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ALBTScanRow(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALBTScanRow);
}

ValueMetadata *type metadata accessor for ALBTScanRow._SwiftDataNoType()
{
  return &type metadata for ALBTScanRow._SwiftDataNoType;
}

uint64_t type metadata accessor for ALDatabase()
{
  return objc_opt_self(_TtC8ALDaemon10ALDatabase);
}

unint64_t sub_1002C078C()
{
  unint64_t result;

  result = qword_100382CF0;
  if (!qword_100382CF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ALWiFiScanRow.Band, &type metadata for ALWiFiScanRow.Band);
    atomic_store(result, (unint64_t *)&qword_100382CF0);
  }
  return result;
}

unint64_t sub_1002C07D0()
{
  unint64_t result;

  result = qword_100382CF8;
  if (!qword_100382CF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ALWiFiScanRow.Mode, &type metadata for ALWiFiScanRow.Mode);
    atomic_store(result, (unint64_t *)&qword_100382CF8);
  }
  return result;
}

uint64_t sub_1002C0814()
{
  return sub_1002C0A04(38, 0xD000000000000024, (void *)0x8000000100306B40);
}

unint64_t sub_1002C0834()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100382D48;
  if (!qword_100382D48)
  {
    v1 = sub_10000FE74(&qword_100382D40);
    sub_1002C0898();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100382D48);
  }
  return result;
}

unint64_t sub_1002C0898()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100382D50;
  if (!qword_100382D50)
  {
    v1 = sub_10000FE74(&qword_100382D20);
    sub_1002C0904();
    sub_1002C0980();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Comparison<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100382D50);
  }
  return result;
}

unint64_t sub_1002C0904()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100382D58;
  if (!qword_100382D58)
  {
    v1 = sub_10000FE74(&qword_100382D18);
    sub_1002A8D3C(&qword_100382D60, &qword_100382D10, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100382D58);
  }
  return result;
}

unint64_t sub_1002C0980()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100382D68;
  if (!qword_100382D68)
  {
    v1 = sub_10000FE74(&qword_100382D08);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100382D68);
  }
  return result;
}

uint64_t sub_1002C09E4()
{
  return sub_1002C0A04(36, 0xD000000000000022, (void *)0x8000000100306B90);
}

uint64_t sub_1002C0A04(Swift::Int a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v11;
  _QWORD v12[2];

  v6 = *(_QWORD *)(v3 + 16);
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(a1);
  v7._countAndFlagsBits = a2;
  v7._object = a3;
  String.append(_:)(v7);
  v11 = v6;
  v8 = sub_1000039AC(&qword_100380878);
  _print_unlocked<A, B>(_:_:)(&v11, v12, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  String.append(_:)(v9);
  return v12[0];
}

uint64_t sub_1002C0AAC()
{
  return sub_1002B47C0();
}

uint64_t sub_1002C0AC0()
{
  return sub_1002B7C24();
}

uint64_t sub_1002C0AD8()
{
  return sub_1002B546C();
}

uint64_t sub_1002C0AEC()
{
  return sub_1002B5C20();
}

uint64_t sub_1002C0B00()
{
  return sub_1002B61C0();
}

uint64_t sub_1002C0B14()
{
  return sub_1002B6910();
}

uint64_t sub_1002C0B28()
{
  return sub_1002B754C();
}

uint64_t sub_1002C0B3C()
{
  return sub_1002BFF14();
}

uint64_t sub_1002C0B50()
{
  return sub_1002BFF3C();
}

uint64_t sub_1002C0B64()
{
  return sub_1002BFF88();
}

uint64_t sub_1002C0B78()
{
  return sub_1002BFFC4();
}

uint64_t sub_1002C0B8C()
{
  return sub_1002C0000();
}

uint64_t sub_1002C0BA4()
{
  return sub_1002B4E48();
}

uint64_t sub_1002C0BB8(uint64_t a1)
{
  Swift::UInt64 v1;
  unint64_t v2;
  uint64_t result;
  int v4;
  int v5;

  ALBtAdvertisement.init()(a1);
  v1 = machContTimeNs()();
  ALBtAdvertisement._machContTimeNs.setter(v1, 0);
  v2 = sub_1002B0E4C(0xFFFFFFFFFFFFFFFFLL);
  ALBtAdvertisement._mac.setter(v2);
  result = sub_1002B0DC0(61);
  if (__OFSUB__(0, result + 20))
  {
    __break(1u);
  }
  else
  {
    ALBtAdvertisement._rssidB.setter(-(result + 20));
    v4 = sub_1002B0DC0(14);
    ALBtAdvertisement._channel.setter((v4 + 1));
    v5 = sub_1002B0DC0(20);
    return ALBtAdvertisement._antennaIndex.setter((v5 + 1));
  }
  return result;
}

uint64_t sub_1002C0C60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(uint64_t, char *, uint64_t);
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  uint64_t result;
  uint64_t v27;
  Swift::UInt64 v28;
  unint64_t i;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(unint64_t *, _QWORD);
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;

  v2 = type metadata accessor for ALBtAdvertisement(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v45 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v42 - v6;
  v8 = sub_1000039AC(&qword_10036A6D8);
  __chkstk_darwin(v8);
  v42 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ALBtNotification(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotification.init()(v16);
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v44 = a1;
  v19(a1, v18, v14);
  v20 = sub_1002B0E4C(0x29uLL);
  v21 = corelog.getter((uint64_t)v13);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  v24 = os_log_type_enabled(v22, v23);
  v43 = v20;
  if (v24)
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v25 = 134217984;
    v20 = v43;
    v46 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v25 + 4, v25 + 12);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Simulating BT advertisement count %ld", v25, 0xCu);
    swift_slowDealloc(v25, -1, -1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (!v20)
    {
LABEL_20:
      v40 = v42;
      static ALTimeStamp.now()(result);
      v41 = type metadata accessor for ALTimeStamp(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 0, 1, v41);
      ALBtNotification._timestamp.setter(v40);
      return ALBtNotification._simulated.setter(1);
    }
    v27 = 0;
    while (v27 != v20)
    {
      ALBtAdvertisement.init()(result);
      v28 = machContTimeNs()();
      ALBtAdvertisement._machContTimeNs.setter(v28, 0);
      v46 = 0;
      swift_stdlib_random(&v46, 8);
      for (i = v46; !v46; i = v46)
      {
        v46 = 0;
        swift_stdlib_random(&v46, 8);
      }
      ALBtAdvertisement._mac.setter((i * (unsigned __int128)0xFFFFFFFFFFFFFFFFLL) >> 64);
      v46 = 0;
      swift_stdlib_random(&v46, 8);
      v30 = 61 * v46;
      if (v30 <= 0x38)
      {
        do
        {
          v46 = 0;
          swift_stdlib_random(&v46, 8);
          v30 = 61 * v46;
        }
        while (v30 < 0x39);
      }
      LOBYTE(v46) = 0;
      ALBtAdvertisement._rssidB.setter(4294967276u - HIDWORD(v30));
      do
      {
        v46 = 0;
        swift_stdlib_random(&v46, 8);
        v31 = 14 * v46;
      }
      while ((v31 & 0xFFFFFFFC) == 0);
      LOBYTE(v46) = 0;
      ALBtAdvertisement._channel.setter(HIDWORD(v31) + 1);
      do
      {
        v46 = 0;
        swift_stdlib_random(&v46, 8);
        v32 = 20 * v46;
      }
      while ((v32 & 0xFFFFFFF0) == 0);
      LOBYTE(v46) = 0;
      ALBtAdvertisement._antennaIndex.setter(((__int128)(unint64_t)v32 >> 32) + 1);
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v45, v7, v2);
      v33 = (void (*)(unint64_t *, _QWORD))ALBtNotification._advertisements.modify(&v46);
      v35 = v34;
      v36 = *v34;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
      *v35 = v36;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v36 = sub_10029BC64(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
        *v35 = v36;
      }
      v39 = *(_QWORD *)(v36 + 16);
      v38 = *(_QWORD *)(v36 + 24);
      if (v39 >= v38 >> 1)
      {
        v36 = sub_10029BC64(v38 > 1, v39 + 1, 1, v36);
        *v35 = v36;
      }
      ++v27;
      *(_QWORD *)(v36 + 16) = v39 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v36+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v39, v45, v2);
      v33(&v46, 0);
      result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v2);
      v20 = v43;
      if (v27 == v43)
        goto LABEL_20;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002C1118(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  swift_allocObject(v3, 40, 7);
  v7 = sub_1002C126C(a1, a2, a3);
  swift_release(a3);
  return v7;
}

uint64_t sub_1002C1178(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = sub_1002C126C(a1, a2, a3);
  swift_release(a3);
  return v4;
}

uint64_t sub_1002C11A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v1 = type metadata accessor for ALBtNotification(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002C0C60((uint64_t)v4);
  (*(void (**)(char *))(v0 + 24))(v4);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_1002C1240()
{
  _swift_stdlib_reportUnimplementedInitializer("ALDaemon.ALBtSimulated", 22, "init(queue:interval:)", 21, 0);
  __break(1u);
}

uint64_t sub_1002C126C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  void (*v14)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  double v21;
  _BYTE v22[8];

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_retain(v3);
  v12 = sub_1002A951C();
  v13 = *v12;
  v14 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(_QWORD *)*v12 + 112);
  swift_retain(*v12);
  v14(&v21, 0xD000000000000017, 0x8000000100306CC0, &type metadata for Double);
  swift_release(v13);
  if (v22[0])
    v15 = 6.0;
  else
    v15 = v21;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  swift_retain(a3);
  swift_release(v4);
  v16 = corelog.getter((uint64_t)v11);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v19 = 134217984;
    v21 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v19 + 4, v19 + 12);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "ALBtSimulated,interval,%f,sec", v19, 0xCu);
    swift_slowDealloc(v19, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return ALDataGenerationBase.init(queue:interval:)(a1, v15);
}

uint64_t type metadata accessor for ALBtSimulated()
{
  return objc_opt_self(_TtC8ALDaemon13ALBtSimulated);
}
