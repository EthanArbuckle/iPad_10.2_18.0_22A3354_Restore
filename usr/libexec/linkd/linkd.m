uint64_t sub_1000034CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = sub_10001BE7C(&qword_100128D58);
  v11 = sub_100017848(v10);
  *(_OWORD *)(v11 + 16) = xmmword_1000EFAE0;
  sub_100019A60(a1, v11 + 32);
  sub_10000C020();
  sub_100019E08(a2);
  sub_10000762C(a5, v11, a3, a3, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 8));
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_10000358C()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = (id)AFPreferencesMobileUserSessionLanguage();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void sub_1000035E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL(0);
  if (!sub_10001C93C(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

}

uint64_t sub_100003658()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_1000167E4();
  if (v0)
  {
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {
    sub_1000BDF60();
    v2 = sub_1000BDC20();
    return sub_10001C0B0(v2, v3);
  }
}

uint64_t sub_10000369C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a2;
  v7[11] = a5;
  v7[9] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[15] = v9;
  v7[16] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10000393C, 0, 0);
}

uint64_t sub_100003704(void *a1, int a2, void *aBlock, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v6 = _Block_copy(aBlock);
  v7 = sub_10001C088(a4);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = a1;
  v8 = a1;
  v9 = sub_100019430();
  return sub_100004C84(v9, v10);
}

uint64_t sub_100003754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = swift_allocObject(&unk_10011FFA0, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = sub_10001BE7C(&qword_10012C460);
  v8 = swift_allocObject(v7, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_10001ED48;
  *(_QWORD *)(v8 + 24) = v6;
  *a3 = v8;
  swift_retain();
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000037D0(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012A2AC;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100005724;
  return sub_1000200D4();
}

uint64_t QueryType.filter(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100016714();
  sub_10001C284(v1, v2);
  sub_10000BFF4();
  sub_10001B6EC();
  sub_1000101FC();
  return sub_10001ADA4(v0);
}

uint64_t sub_100003860()
{
  uint64_t *v0;
  _QWORD *v1;

  swift_bridgeObjectRetain(v0[26]);
  v1 = (_QWORD *)sub_100013540();
  v0[32] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_1000056D0;
  return sub_100097E58(v0[25], v0[26]);
}

uint64_t sub_1000038B8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (__OFADD__(*(_QWORD *)(a2 + 16), *(_QWORD *)(result + 16)))
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    sub_100004458();
    v6 = v4;
    v5 = swift_bridgeObjectRetain(v3);
    sub_100003CB0(v5);
    swift_bridgeObjectRetain(a2);
    sub_10000426C();
    return v6;
  }
  return result;
}

uint64_t sub_10000393C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];

  sub_10000795C(0, &qword_100129D80, AFPreferences_ptr);
  v1 = sub_10000358C();
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v2;
  if (v2)
  {
    v3 = v1;
    v4 = v2;
    v5 = *(void **)(v0 + 96);
    v6 = qword_100127C38;
    sub_10001DCC4();
    v7 = v5;
    sub_1000101B0();
    if (v6 != -1)
    {
      swift_once(&qword_100127C38, sub_100020FE0);
      v7 = *(id *)(v0 + 96);
    }
    v8 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 80);
    v11 = sub_100012A40(*(_QWORD *)(v0 + 112), (uint64_t)qword_10012C9A0);
    sub_100027450(v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
    swift_release();

    sub_1000059A8();
    swift_bridgeObjectRetain_n(v10, 2);
    v12 = swift_bridgeObjectRetain_n(v4, 2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter();
    v15 = sub_10001CE20(v14);
    v17 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 80);
    if (v15)
    {
      v34 = v3;
      v20 = *(_QWORD *)(v0 + 72);
      v35 = *(_QWORD *)(v0 + 120);
      v21 = sub_100011780(22);
      v22 = sub_100011780(64);
      v36[0] = v22;
      *(_DWORD *)v21 = 136315394;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(v0 + 56) = sub_10000FBEC(v20, v19, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
      swift_bridgeObjectRelease_n(v19, 3);
      *(_WORD *)(v21 + 12) = 2080;
      sub_10000EC68();
      *(_QWORD *)(v0 + 64) = sub_10000FBEC(v34, v4, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
      swift_bridgeObjectRelease_n(v4, 3);
      swift_arrayDestroy(v22, 2);
      sub_1000133FC(v22);
      sub_1000133FC(v21);

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v16, v18);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 80), 2);
      swift_bridgeObjectRelease_n(v4, 2);

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    }
    v27 = *(_QWORD *)(v0 + 72);
    v26 = *(_QWORD *)(v0 + 80);
    v28 = objc_allocWithZone((Class)LSApplicationRecord);
    sub_1000101B0();
    v29 = sub_100070EC8(v27, v26, 0);
    *(_QWORD *)(v0 + 152) = v29;
    *(_QWORD *)(v0 + 160) = 0;
    v31 = v29;
    v32 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 40) = sub_10000795C(0, &qword_1001281F8, LSApplicationRecord_ptr);
    *(_QWORD *)(v0 + 48) = &off_10011AED8;
    *(_QWORD *)(v0 + 16) = v31;
    v33 = v31;
    return swift_task_switch(sub_100021FAC, v32, 0);
  }
  else
  {
    v23 = sub_100020CA4();
    v24 = swift_allocError(&type metadata for DonationError, v23, 0, 0);
    *v25 = 1;
    swift_willThrow(v24);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100003CB0(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t *v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  int64_t v24;
  int64_t v25;
  int64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t *v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  int64_t *v42;
  void *v43;
  void *v44;
  int64_t v45;
  id v46;
  id v47;
  BOOL v48;
  int64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  id v58;
  int64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  id v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  void *v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  int64_t v75;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  _QWORD v89[3];
  int64_t v90;
  unint64_t v91;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = result;
  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || (v6 = *(_QWORD *)(v3 + 24) >> 1, v6 < v4 + v2))
  {
    sub_100004458();
    v3 = v7;
    v6 = *(_QWORD *)(v7 + 24) >> 1;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = v6 - v8;
  result = (uint64_t)sub_10001FC10(v89, (_QWORD *)(v3 + 104 * v8 + 32), v6 - v8, v5);
  if (result < v2)
    goto LABEL_13;
  if (result)
  {
    v12 = *(_QWORD *)(v3 + 16);
    v13 = __OFADD__(v12, result);
    v14 = v12 + result;
    if (v13)
    {
      __break(1u);
      goto LABEL_49;
    }
    *(_QWORD *)(v3 + 16) = v14;
  }
  if (result != v9)
  {
    v15 = v89[0];
    goto LABEL_11;
  }
LABEL_14:
  v11 = *(_QWORD *)(v3 + 16);
  v65 = v89[0];
  v62 = v89[1];
  v10 = v90;
  v60 = v89[2];
  if (!v91)
  {
LABEL_49:
    v39 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      return result;
    }
    v30 = (unint64_t)(v60 + 64) >> 6;
    if (v39 >= v30)
      goto LABEL_55;
    v87 = v11;
    v55 = *(_QWORD *)(v62 + 8 * v39);
    if (!v55)
    {
      v56 = v10 + 2;
      if (v10 + 2 >= v30)
        goto LABEL_55;
      v55 = *(_QWORD *)(v62 + 8 * v56);
      if (v55)
      {
LABEL_58:
        v39 = v56;
      }
      else
      {
        if (v10 + 3 >= v30)
          goto LABEL_55;
        v55 = *(_QWORD *)(v62 + 8 * (v10 + 3));
        if (!v55)
          goto LABEL_64;
        v39 = v10 + 3;
      }
    }
LABEL_52:
    v16 = (v55 - 1) & v55;
    v17 = __clz(__rbit64(v55)) + (v39 << 6);
    v84 = v39;
    goto LABEL_16;
  }
  v84 = v90;
  v87 = *(_QWORD *)(v3 + 16);
  v16 = (v91 - 1) & v91;
  v17 = __clz(__rbit64(v91)) | (v90 << 6);
LABEL_16:
  v18 = (int64_t *)(*(_QWORD *)(v65 + 48) + 104 * v17);
  v19 = v18[1];
  v21 = v18[2];
  v20 = v18[3];
  v22 = v18[5];
  v23 = v18[6];
  v80 = v18[7];
  v82 = *v18;
  v24 = v18[10];
  v75 = v18[8];
  v78 = v18[9];
  v25 = v18[12];
  v67 = (void *)v18[4];
  v71 = (void *)v18[11];
  sub_100016794();
  sub_10000BFF4();
  v63 = v67;
  v68 = v23;
  v26 = v23;
  v27 = v75;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v24);
  v58 = v71;
  v72 = v25;
  sub_10000C020();
  if (!v19)
    goto LABEL_55;
  v28 = (int64_t)v58;
  v61 = (unint64_t)(v60 + 64) >> 6;
  v10 = v84;
  v29 = v87;
  v31 = v80;
  v30 = v82;
  v33 = v68;
  v32 = v72;
  v34 = v78;
  v35 = (int64_t)v63;
  while (1)
  {
    v66 = *(_QWORD *)(v3 + 24) >> 1;
    if (v66 < v29 + 1)
    {
      v70 = v33;
      v74 = v32;
      v64 = v35;
      v59 = v28;
      v86 = v10;
      v88 = v24;
      v50 = v29;
      v51 = v30;
      v77 = v27;
      v52 = v31;
      v53 = v34;
      sub_100004458();
      v28 = v59;
      v34 = v53;
      v10 = v86;
      v24 = v88;
      v31 = v52;
      v32 = v74;
      v27 = v77;
      v30 = v51;
      v29 = v50;
      v3 = v54;
      v35 = v64;
      v33 = v70;
      v66 = *(_QWORD *)(v3 + 24) >> 1;
    }
    if (v29 < v66)
      break;
LABEL_46:
    *(_QWORD *)(v3 + 16) = v29;
    if (!v19)
      goto LABEL_55;
  }
  while (1)
  {
    v36 = (int64_t *)(v3 + 32 + 104 * v29);
    *v36 = v30;
    v36[1] = v19;
    v36[2] = v21;
    v36[3] = v20;
    v36[4] = v35;
    v36[5] = v22;
    v36[6] = v33;
    v36[7] = v31;
    v36[8] = v27;
    v36[9] = v34;
    v36[10] = v24;
    v36[11] = v28;
    v37 = v29 + 1;
    v36[12] = v32;
    v87 = v37;
    if (!v16)
      break;
    v76 = (v16 - 1) & v16;
    v85 = v10;
    v38 = __clz(__rbit64(v16)) | (v10 << 6);
LABEL_33:
    v42 = (int64_t *)(*(_QWORD *)(v65 + 48) + 104 * v38);
    v19 = v42[1];
    v20 = v42[3];
    v43 = (void *)v42[4];
    v69 = v42[5];
    v73 = v42[2];
    v33 = v42[6];
    v81 = v42[7];
    v83 = *v42;
    v27 = v42[8];
    v79 = v42[9];
    v24 = v42[10];
    v44 = (void *)v42[11];
    v45 = v42[12];
    sub_100016794();
    sub_10000BFF4();
    v46 = v43;
    sub_10000C020();
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v24);
    v47 = v44;
    swift_bridgeObjectRetain(v45);
    v28 = (int64_t)v44;
    v35 = (int64_t)v43;
    v32 = v45;
    v34 = v79;
    v31 = v81;
    v30 = v83;
    v10 = v85;
    v22 = v69;
    v21 = v73;
    v29 = v87;
    if (v19)
      v48 = v87 < v66;
    else
      v48 = 0;
    v16 = v76;
    if (!v48)
      goto LABEL_46;
  }
  v39 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v39 >= v61)
      goto LABEL_54;
    v40 = *(_QWORD *)(v62 + 8 * v39);
    if (v40)
      goto LABEL_32;
    v41 = v10 + 2;
    if (v10 + 2 >= v61)
      goto LABEL_54;
    v40 = *(_QWORD *)(v62 + 8 * v41);
    if (!v40)
    {
      if (v10 + 3 >= v61)
        goto LABEL_54;
      v40 = *(_QWORD *)(v62 + 8 * (v10 + 3));
      if (v40)
      {
        v39 = v10 + 3;
        goto LABEL_32;
      }
      v41 = v10 + 4;
      if (v10 + 4 >= v61)
        goto LABEL_54;
      v40 = *(_QWORD *)(v62 + 8 * v41);
      if (!v40)
      {
        v39 = v10 + 5;
        if (v10 + 5 >= v61)
          goto LABEL_54;
        v40 = *(_QWORD *)(v62 + 8 * v39);
        if (!v40)
        {
          v49 = v10 + 6;
          while (v49 < v61)
          {
            v40 = *(_QWORD *)(v62 + 8 * v49++);
            if (v40)
            {
              v39 = v49 - 1;
              goto LABEL_32;
            }
          }
LABEL_54:
          *(_QWORD *)(v3 + 16) = v37;
          goto LABEL_55;
        }
        goto LABEL_32;
      }
    }
    v39 = v41;
LABEL_32:
    v76 = (v40 - 1) & v40;
    v38 = __clz(__rbit64(v40)) + (v39 << 6);
    v85 = v39;
    goto LABEL_33;
  }
  __break(1u);
LABEL_64:
  v56 = v39 + 3;
  if (v39 + 3 < v30)
  {
    v55 = *(_QWORD *)(v62 + 8 * v56);
    if (v55)
      goto LABEL_58;
    v39 += 4;
    if (v39 >= v30)
      goto LABEL_55;
    v55 = *(_QWORD *)(v62 + 8 * v39);
    if (!v55)
    {
      v57 = v10 + 6;
      while (v57 < v30)
      {
        v55 = *(_QWORD *)(v62 + 8 * v57++);
        if (v55)
        {
          v39 = v57 - 1;
          goto LABEL_52;
        }
      }
      goto LABEL_55;
    }
    goto LABEL_52;
  }
LABEL_55:
  v15 = v65;
LABEL_11:
  result = sub_1000358EC(v15);
  *v1 = v3;
  return result;
}

void sub_10000426C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000183B8();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100013654() || (sub_100019AF8(), !(v6 ^ v4 | v5)))
  {
    sub_100011848();
    sub_100004458();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000176CC();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10001E1F0();
  sub_100004724();
  if (!v3)
  {
LABEL_11:
    sub_1000117B4();
    *v1 = v2;
    sub_10001ADFC();
    return;
  }
  sub_10001C028();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_100004304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  v5 = sub_10001BE7C(&qword_10012ADD0);
  v4[22] = sub_100071FB8(v5);
  v6 = type metadata accessor for LSLinkBundleRecord(0);
  v4[23] = v6;
  v4[24] = sub_100071FB8(v6);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_10000435C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 104 * a1 + 32;
  v7 = a3 + 104 * v4;
  if (v6 >= v7 || v6 + 104 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100004458()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  sub_10001F830();
  if ((v2 & 1) != 0)
  {
    sub_100018654();
    if (v3 != v4)
    {
      sub_1000158DC();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013784();
  if (v1)
  {
    v5 = sub_10001BE7C(&qword_100128AE8);
    v6 = (_QWORD *)sub_1000100C8(v5, 104 * v1 + 32);
    sub_100036350(v6);
  }
  if ((v0 & 1) != 0)
  {
    v7 = (char *)sub_100036294();
    sub_1000312C0(v7, v8, v9);
    sub_10001ABDC();
  }
  else
  {
    v10 = sub_10001C1CC();
    sub_10000435C(v10, v11, v12, v13);
  }
  sub_10001ADFC();
}

void sub_1000044F4()
{
  sub_10001E014();
  sub_10000C030();
  sub_1000134B8();
  sub_100006220();
  sub_100019B14();
}

_QWORD *sub_100004570(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001BE7C(&qword_10012C228);
    v11 = (_QWORD *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &a4[11 * v8 + 4] <= v11 + 4)
      memmove(v11 + 4, a4 + 4, 88 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_10001BE7C(&qword_10012C230);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_100004694()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  sub_10001DCCC();
  *v1 = *v0;
  *(_QWORD *)(v2 + 184) = *(_QWORD *)(v2 + 48);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_100004724()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  sub_10001357C();
  if (v3 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    v4 = v0 + 104 * v1;
    if (v2 + 104 * v1 > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_100017C80(v2);
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.run(_:)(SQLite::Update a1)
{
  return sub_10001D04C(a1.template._countAndFlagsBits, (uint64_t)a1.template._object, (uint64_t)a1.bindings._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10001E430);
}

uint64_t sub_1000047DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RegistryError(0);
  v7[14] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_10000487C, 0, 0);
}

#error "10000499C: call analysis failed (funcsize=127)"

uint64_t sub_100004AA8(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "bundleIdentifier");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100004B14()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  SEL *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  sub_10000FE70();
  v1 = (_QWORD *)(v0[21] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
  v0[25] = *v1;
  v0[26] = v1[1];
  v2 = objc_allocWithZone((Class)LSApplicationRecord);
  sub_10000C030();
  v3 = sub_100071FF8();
  v0[27] = sub_1000077AC(v3, v4, 0, v5);
  v0[28] = sub_100005E98();
  v6 = dword_10012ACFC;
  sub_10000C030();
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[29] = v7;
  *v7 = v0;
  v7[1] = sub_10000567C;
  v8 = sub_100071FF8();
  return sub_100097DAC(v8, v9);
}

uint64_t sub_100004C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[7] = a3;
  v8[8] = a4;
  v8[5] = a1;
  v8[6] = a2;
  v9 = type metadata accessor for Logger(0);
  v8[13] = v9;
  v8[14] = *(_QWORD *)(v9 - 8);
  v8[15] = sub_100013540();
  v8[16] = sub_100013540();
  v8[17] = sub_100013540();
  return swift_task_switch(sub_1000205D4, 0, 0);
}

uint64_t sub_100004C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = sub_10001BE7C(&qword_10012AD50);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  sub_100014360((uint64_t)v6, 1, 1, v7);
  v8 = (_QWORD *)sub_10001ABD0((uint64_t)&unk_10011E718);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  v9 = (_QWORD *)sub_10001ABD0((uint64_t)&unk_10011E740);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = &unk_10012B7E0;
  v9[5] = v8;
  sub_1000C3054((uint64_t)v6, (uint64_t)&unk_10012B7F0, (uint64_t)v9);
  return swift_release();
}

char *sub_100004D50(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001BE7C(&qword_100128AE8);
    v11 = (char *)swift_allocObject(v10, 104 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 104);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    sub_1000312C0((char *)(a4 + 32), v8, v11 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100004724();
  }
  swift_release();
  return v11;
}

uint64_t sub_100004E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RegistryError(0);
  v7[14] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_100004F8C, 0, 0);
}

uint64_t sub_100004ED8(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "name");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_100004F38()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  v1 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  sub_100005878();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "1000050AC: call analysis failed (funcsize=127)"

uint64_t Connection.prepare(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_10001E98C(a1);
  sub_1000E10F8(v2, v3, (uint64_t)_swiftEmptyArrayStorage);
  if (v1)
  {
    sub_10000E038();
    return sub_10000C028();
  }
  else
  {
    v5 = sub_1000E10DC();
    sub_10000E038();
    sub_10000C028();
    sub_1000073B0();
    v6 = sub_10001EF20();
    v7 = sub_10001C088((uint64_t)&unk_10011F770);
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = v6;
    v8 = sub_10001BE7C(&qword_10012C268);
    result = sub_10001C088(v8);
    *(_QWORD *)(result + 16) = sub_10001FF6C;
    *(_QWORD *)(result + 24) = v7;
  }
  return result;
}

uint64_t sub_100005278(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  Connection.prepareRowIterator(_:)(a1);
  if (!v1)
  {
    type metadata accessor for LNActionRecord(0);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    v2 = v4;
    sub_1000059C4();
    sub_1000058DC();
    sub_1000073B0();
  }
  return v2;
}

uint64_t sub_10000531C()
{
  void *v0;
  uint64_t v1;

  sub_100071FE4();
  sub_1000059A8();
  sub_1000117B4();

  return sub_100010278(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100005380()
{
  uint64_t v0;

  sub_10001ABAC();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000053A8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000053D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000362E8();
  sub_1000BE22C();
  v0 = sub_1000BE0C8();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000053F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10000541C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;

  Connection.run(_:_:)(a2, a3, (uint64_t)_swiftEmptyArrayStorage);
  if (!v7)
  {
    v11 = swift_release();
    a4(v11);
    Connection.run(_:_:)(a6, a7, (uint64_t)_swiftEmptyArrayStorage);
    swift_release();
  }
}

void sub_100005510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, _QWORD *), uint64_t a7, void (*a8)(uint64_t, uint64_t, _QWORD *, uint64_t))
{
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  _QWORD *v21;
  uint64_t v22;

  v12 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100018654();
    if (v14 != v15)
    {
      sub_1000158DC();
      if (v14)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  else
  {
    v13 = a2;
  }
  v16 = *(_QWORD *)(a4 + 16);
  if (v13 <= v16)
    v17 = *(_QWORD *)(a4 + 16);
  else
    v17 = v13;
  if (v17)
  {
    v18 = sub_1000101F4(a1, a2, a3, a4, a5);
    v19 = (_QWORD *)sub_1000100C8(v18, 24 * v17 + 32);
    v20 = j__malloc_size(v19);
    v19[2] = v16;
    v19[3] = 2 * ((uint64_t)(v20 - 32) / 24);
  }
  else
  {
    v19 = _swiftEmptyArrayStorage;
  }
  v21 = v19 + 4;
  v22 = a4 + 32;
  if ((v12 & 1) != 0)
  {
    a6(v22, v16, v21);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a8(v22, v16, v21, a7);
  }
  sub_10001BFF8();
  sub_1000110FC();
}

uint64_t sub_1000055DC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;

  swift_retain();
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a8);
  return sub_100006E88(v8, v8, a1, a2, a3, a4, a5, a6, v17, a7, a8);
}

uint64_t sub_10000567C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000143EC();
  sub_100013478();
  v0[30] = v2;
  v0[31] = v1;
  sub_10000EB14(v3);
  if (!v1)
    swift_bridgeObjectRelease(v0[26]);
  sub_1000167A8();
  return sub_100019418(v4, v5, v6);
}

uint64_t sub_1000056D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000143EC();
  sub_100013478();
  v0[33] = v2;
  v0[34] = v1;
  sub_10000EB14(v3);
  if (!v1)
    swift_bridgeObjectRelease(v0[26]);
  sub_1000167A8();
  return sub_100019418(v4, v5, v6);
}

uint64_t sub_100005724()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v4 = sub_1000721A0();
  v5 = *(void **)(v3 + 16);
  sub_10001F6C8(v4, v6);

  if (v0)
  {
    sub_100072010();
    sub_10001CE50();
    sub_1000137E4();

  }
  else
  {
    sub_10001C240();
  }
  sub_100072198();
  return sub_100018C20(*(uint64_t (**)(void))(v2 + 8));
}

void sub_10000577C()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;

  sub_1000189B0();
  if ((v5 & 1) != 0)
  {
    sub_100018654();
    if (v7 != v8)
    {
      if (v6 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  else
  {
    v6 = v3;
  }
  v9 = *(_QWORD *)(v0 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(v0 + 16);
  else
    v10 = v6;
  if (v10)
  {
    v11 = sub_10001BE7C(v4);
    v12 = (_QWORD *)sub_1000100C8(v11, 40 * v10 + 32);
    v13 = j__malloc_size(v12);
    v12[2] = v9;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  if ((v2 & 1) != 0)
  {
    sub_10001AD68();
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10001BE7C(v1);
    sub_10001AF9C();
  }
  sub_10001BFF8();
  sub_1000110FC();
}

uint64_t sub_100005840()
{
  uint64_t v0;

  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_100005848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_100005850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for Expression(0, v4, a3, a4);
}

uint64_t sub_10000585C()
{
  return sub_10001E778();
}

void sub_100005864()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0[2];
  *(_QWORD *)(v1 - 168) = v0[1];
  *(_QWORD *)(v1 - 160) = v2;
  *(_QWORD *)(v1 - 152) = v0[3];
}

uint64_t sub_100005878()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

void sub_100005880(uint64_t a1@<X8>)
{

}

uint64_t sub_1000058A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10001BE7C(a3);
}

uint64_t sub_1000058B4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000058BC()
{
  return 0;
}

uint64_t sub_1000058C8()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_1000058D0(uint64_t a1)
{
  return swift_allocObject(a1, 184, 7);
}

uint64_t sub_1000058DC()
{
  uint64_t v0;

  return swift_release(v0);
}

unint64_t sub_1000058E4()
{
  return (unint64_t)Statement.failableNext()();
}

void sub_1000058F0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_100005900()
{
  return Logger.logObject.getter();
}

uint64_t sub_100005908()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 312));
}

void sub_100005918()
{
  sub_10002FD7C();
}

uint64_t sub_10000592C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_100005938()
{
  uint64_t v0;

  return v0;
}

id sub_100005948()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t sub_100005950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for Expression(0, v4, a3, a4);
}

uint64_t sub_10000595C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 - 144);
  v2 = *(_QWORD *)(v0 - 136);
  v3 = sub_10000E858((_QWORD *)(v0 - 168), v1);
  return sub_10001C528(v3, 0, 0xE000000000000000, v1, v2);
}

uint64_t sub_100005988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 - 128) = 0;
  *(_QWORD *)(v4 - 120) = 0xE000000000000000;
  return swift_bridgeObjectRetain(a4);
}

uint64_t sub_1000059A0()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000059A8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000059B0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000059B8()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1000059C4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000059D4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 72));
}

uint64_t sub_1000059DC()
{
  return static os_log_type_t.error.getter();
}

id sub_1000059E4()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v0 + 48) + 8 * v1);
}

uint64_t sub_100005A04()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

id sub_100005A0C(id a1, SEL a2)
{
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(a1, a2, v2, v3);
}

void sub_100005A18(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10001A118(a1, 8236, 0xE200000000000000, a2);
}

uint64_t sub_100005A24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

uint64_t sub_100005A58@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 136) = result;
  *(_QWORD *)(v5 - 128) = a2;
  *(_QWORD *)(v5 - 160) = v4;
  *(_QWORD *)(v5 - 152) = v3;
  *(_QWORD *)(v5 - 144) = v2;
  return result;
}

uint64_t sub_100005A68()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100005A78()
{
  return swift_bridgeObjectRelease(0x8000000000000000);
}

uint64_t sub_100005A80()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100005A8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_10000FBEC(a1, v3, a3);
}

uint64_t sub_100005A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_100005AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t countAndFlagsBits;
  void *object;
  void *rawValue;
  uint64_t v18;
  _BYTE v19[168];
  _QWORD __src[21];
  _QWORD __dst[21];
  _QWORD v22[22];
  SQLite::Delete v23;
  SQLite::Update v24;

  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  swift_retain();
  sub_100009570();
  result = swift_release();
  if (!v3)
  {
    swift_retain();
    sub_10000989C();
    swift_release();
    v8 = qword_100127DD8;
    swift_retain();
    if (v8 != -1)
      swift_once(&qword_100127DD8, sub_100076E54);
    memcpy(__dst, &unk_10012A3F8, sizeof(__dst));
    sub_1000379AC(__dst);
    if (qword_100127DE8 != -1)
      swift_once(&qword_100127DE8, sub_100076F5C);
    __src[0] = a2;
    __src[1] = a3;
    == infix<A>(_:_:)();
    v10 = v9;
    v12 = v11;
    v14 = v13;
    memcpy(v19, __dst, sizeof(v19));
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    QueryType.filter(_:)(v10, v12, v14, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)__src);
    swift_bridgeObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease_n(v12, 2);
    sub_100037A7C(__dst);
    memcpy(v22, __src, 0xA8uLL);
    memcpy(v19, __src, sizeof(v19));
    v23 = QueryType.delete()();
    countAndFlagsBits = v23.template._countAndFlagsBits;
    object = v23.template._object;
    rawValue = v23.bindings._rawValue;
    sub_100037A7C(v22);
    v24.template._countAndFlagsBits = countAndFlagsBits;
    v24.template._object = object;
    v24.bindings._rawValue = rawValue;
    Connection.run(_:)(v24);
    if (v18)
    {
      swift_release();
      swift_bridgeObjectRelease(rawValue);
      return swift_bridgeObjectRelease(object);
    }
    else
    {
      swift_bridgeObjectRelease(rawValue);
      swift_bridgeObjectRelease(object);
      swift_retain();
      sub_1000096F0(a2, a3);
      return swift_release_n(v6, 2);
    }
  }
  return result;
}

uint64_t Connection.transaction(_:block:)(char a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;

  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(0xE000000000000000);
  if (a1)
  {
    if (a1 == 1)
      v6 = 0x54414944454D4D49;
    else
      v6 = 0x564953554C435845;
    v7 = 0xE900000000000045;
  }
  else
  {
    v7 = 0xE800000000000000;
    v6 = 0x4445525245464544;
  }
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  sub_10000C028();
  v9._countAndFlagsBits = 0x4341534E41525420;
  v9._object = (void *)0xEC0000004E4F4954;
  String.append(_:)(v9);
  sub_1000055DC(0x204E49474542, 0xE600000000000000, a2, a3, 0xD000000000000012, 0x80000001000F48B0, 0xD000000000000014, 0x80000001000F4890);
  return sub_10000C028();
}

void *sub_100005E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  char v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned __int8 v14;
  uint64_t v15;
  _BYTE v17[24];
  void *v18;
  char v19;

  v1 = v0;
  v2 = sub_1000179D8();
  sub_10001A8C4(v2, "lock");
  v3 = swift_beginAccess(v0 + 48, v17, 1, 0);
  v4 = *(void **)(v0 + 48);
  v5 = *(unsigned __int8 *)(v0 + 56);
  if (v5 == 255)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(v0 + 24))(&v18, v3);
    v7 = v18;
    v6 = v19;
    v8 = *(void **)(v1 + 48);
    *(_QWORD *)(v1 + 48) = v18;
    v9 = *(_BYTE *)(v1 + 56);
    *(_BYTE *)(v1 + 56) = v6;
    sub_10001F9D8(v7, v6);
    sub_1000719DC(v8, v9);
  }
  else
  {
    v6 = v5 & 1;
    v7 = *(void **)(v0 + 48);
  }
  v10 = sub_10001FFA4(v4, v5);
  sub_10001A8C4((uint64_t)v10, "unlock");
  v11 = swift_release();
  if ((v6 & 1) != 0)
  {
    if (*(_BYTE *)(v1 + 40) == 1)
    {
      v12 = sub_1000166E8();
      sub_10001A8C4(v12, "lock");
      v13 = *(void **)(v1 + 48);
      *(_QWORD *)(v1 + 48) = 0;
      v14 = *(_BYTE *)(v1 + 56);
      *(_BYTE *)(v1 + 56) = -1;
      sub_1000719DC(v13, v14);
      sub_10001A8C4(v15, "unlock");
      v11 = swift_release();
    }
    swift_willThrow(v11);
  }
  return v7;
}

uint64_t sub_100005FDC()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_opt_self(NSXPCConnection);
  sub_1000BE17C();
  v1 = sub_1000101B0();
  v2 = sub_10001AA38(v1, "currentConnection");
  sub_1000BDF2C((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012AD04);
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_100003658;
  v4 = sub_10001B334();
  return sub_100004E38(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100006060()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_opt_self(NSXPCConnection);
  sub_1000BE17C();
  v1 = sub_1000101B0();
  v2 = sub_10001AA38(v1, "currentConnection");
  sub_1000BDF2C((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012B0F4);
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_100003658;
  v4 = sub_10001B334();
  return sub_1000047DC(v4, v5, v6, v7, v8, v9, v10);
}

void *sub_1000060E4(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v15;
  void *v16;

  v4 = v3;
  v7 = a1;
  v16 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    for (i = 4; ; ++i)
    {
      v10 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : *(id *)(a2 + 8 * i);
      v7 = v10;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v15 = v10;
      sub_100006830(&v16, &v15, (uint64_t)a3);
      if (v4)
      {
        v12 = v16;

        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v12);
        return v7;
      }

      if (v11 == v8)
      {

        swift_bridgeObjectRelease(a2);
        return v16;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v13 = a2;
    else
      v13 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }

  swift_bridgeObjectRelease(a2);
  return v7;
}

void sub_100006220()
{
  NSObject *v0;
  void *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  id v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD v43[4];

  sub_10000C038();
  sub_100018F34();
  v4 = sub_100018C54(__stack_chk_guard);
  v41 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001B738();
  sub_10001EF54();
  if (!v28
    || (v5 = (void *)objc_opt_self(RBSProcessHandle),
        objc_msgSend(sub_10001A99C(v5), "isApplication"),
        sub_10008C9B4(),
        !v2))
  {
    sub_10008C9A0(OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection);
    v17 = sub_100010128();
    if (v0)
    {
      sub_1000117B4();

      sub_10001105C();
LABEL_28:
      sub_10001F188();
      sub_1000117E8();
      return;
    }
    v18 = v17;
    sub_10001105C();
    sub_1000812D0(v18);

    sub_1000059B0();
LABEL_10:
    sub_1000117B4();
    goto LABEL_28;
  }
  v6 = (void *)objc_opt_self(RBSTarget);
  v7 = sub_10001A99C(v6);
  v8 = sub_10001BE7C(&qword_100128750);
  v9 = sub_1000100C8(v8, 40);
  *(_OWORD *)(v9 + 16) = xmmword_1000EFAF0;
  sub_1000100D8(v9, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  sub_100018A5C();
  sub_100011870();
  *(_QWORD *)(v9 + 32) = sub_100018458(v10, v11, (uint64_t)"FinishTaskInterruptable");
  sub_100019074();
  v12 = objc_allocWithZone((Class)RBSAssertion);
  v13 = sub_10001AE90((uint64_t)"AppIntents Query");
  v43[0] = 0;
  if (sub_100019D98(v13, "acquireWithError:"))
  {
    v14 = 0;
    swift_retain();
    v15 = sub_1000133C0();
    v16 = v0;
    if (v0)
    {
      sub_10001F97C();
      objc_msgSend(v13, "invalidate");
      goto LABEL_12;
    }
    v37 = v15;
    sub_10001F97C();
    sub_1000812D0(v37);
    swift_bridgeObjectRelease(v37);
    objc_msgSend(v13, "invalidate");

    goto LABEL_10;
  }
  v19 = 0;
  v16 = sub_100016638();

  sub_100013E4C();
LABEL_12:
  sub_1000135B8();
  v20 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v21 = sub_1000100D8(v20, &qword_10012A728, NSError_ptr);
  v23 = sub_10001EFD8((uint64_t)&v42, (uint64_t)v43, v22, v21);
  if (!(_DWORD)v23)
  {

    goto LABEL_27;
  }
  v24 = v42;
  v25 = sub_10001A454(v23, "domain");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  sub_10008C9BC();
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  v28 = v13 == (id)v26 && v3 == v27;
  if (v28)
  {
    sub_10000592C();
  }
  else
  {
    LOBYTE(v25) = sub_100015978(v26, v27);
    sub_100007398();
    sub_10000EC84();
    if ((v25 & 1) == 0)
    {

LABEL_27:
      sub_10001AA80();
      sub_1000117B4();

      goto LABEL_28;
    }
  }
  v29 = sub_100010120();
  if ((id)getLNLogCategoryMetadata(v29))
  {
    sub_10001B5EC();
    v30 = v24;
    sub_10001EFD0();
    v31 = sub_10000BFD4();
    if (sub_1000101D0(v31))
    {
      v39 = v25;
      v32 = (uint8_t *)sub_100011780(12);
      v40 = sub_100011780(32);
      v43[2] = v40;
      *(_DWORD *)v32 = 136315138;
      v33 = sub_100013328(v40, "localizedDescription");
      sub_1000190F0((uint64_t)v33);
      sub_10000ECF4();
      v34 = sub_1000187B8();
      v35 = sub_10001B4F0(v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v36);

      sub_100007398();
      sub_1000100C0((void *)&_mh_execute_header, v16, v39, "Failed to acquire assertions: %s", v32);
      swift_arrayDestroy(v40, 1);
      sub_1000133FC(v40);
      sub_1000133FC((uint64_t)v32);

    }
    else
    {

    }
    sub_10001EE58(v41);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v38 = objc_allocWithZone((Class)NSError);
    sub_10001AC78();
    sub_10000C0E4();

    goto LABEL_27;
  }
  __break(1u);
}

void sub_1000066A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  if (!*(_QWORD *)(a1 + 16)
    || (sub_10001BE7C((uint64_t *)&unk_100128960), v2 = sub_100072018(), v3 = v2, (v27 = *(_QWORD *)(a1 + 16)) == 0))
  {
LABEL_23:
    sub_1000117B4();
    sub_100013414();
    return;
  }
  v4 = 0;
  v5 = v2 + 56;
  while (v4 < *(_QWORD *)(a1 + 16))
  {
    v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    v8 = *v6;
    v7 = v6[1];
    Hasher.init(_seed:)(v28, *(_QWORD *)(v3 + 40));
    swift_bridgeObjectRetain(v7);
    String.hash(into:)(v28, v8, v7);
    v9 = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v3 + 32);
    v11 = v9 & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      v15 = *(_QWORD *)(v3 + 48);
      v16 = (uint64_t *)(v15 + 16 * v11);
      v17 = v16[1];
      v18 = *v16 == v8 && v17 == v7;
      if (v18 || (sub_100072028(*v16, v17) & 1) != 0)
      {
LABEL_11:
        swift_bridgeObjectRelease(v7);
        goto LABEL_22;
      }
      v19 = ~v10;
      while (1)
      {
        v11 = (v11 + 1) & v19;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
        v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0)
          break;
        v20 = (uint64_t *)(v15 + 16 * v11);
        v21 = v20[1];
        v22 = *v20 == v8 && v21 == v7;
        if (v22 || (sub_100072028(*v20, v21) & 1) != 0)
          goto LABEL_11;
      }
    }
    *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
    v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    *v23 = v8;
    v23[1] = v7;
    v24 = *(_QWORD *)(v3 + 16);
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_25;
    *(_QWORD *)(v3 + 16) = v26;
LABEL_22:
    if (++v4 == v27)
      goto LABEL_23;
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

uint64_t sub_100006830(_QWORD *a1, id *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  double v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  int *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int *v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v6 = type metadata accessor for LNAppShortcutParameterRecord(0);
  v77 = *(_QWORD *)(v6 - 8);
  v78 = (int *)v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(*a2, "basePhraseTemplateSubstitutions");
  sub_10000795C(0, (unint64_t *)&unk_10012A280, LNBasePhraseTemplateSubstitution_ptr);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9);

  v11 = v10;
  v67 = v10;
  if (v10 >> 62)
    goto LABEL_48;
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v12)
  {
LABEL_3:
    v13 = 0;
    v71 = (uint64_t *)(a3 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
    v66 = v11 & 0xC000000000000001;
    v64 = v11 & 0xFFFFFFFFFFFFFF8;
    v63 = v11 + 32;
    v65 = v12;
    v72 = a1;
    while (1)
    {
      if (v66)
      {
        v14 = v13;
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
      }
      else
      {
        if (v13 >= *(_QWORD *)(v64 + 16))
          goto LABEL_47;
        v14 = v13;
        v15 = *(id *)(v63 + 8 * v13);
      }
      v79 = v15;
      v16 = __OFADD__(v14, 1);
      a3 = v14 + 1;
      if (v16)
        goto LABEL_46;
      v68 = a3;
      a3 = (uint64_t)objc_msgSend(v79, "parameterSubstitutions");
      sub_10000795C(0, &qword_100128E48, LNParameterSubstitution_ptr);
      v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3);

      if ((unint64_t)v17 >> 62)
        break;
      v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v18)
        goto LABEL_11;
LABEL_36:

      swift_bridgeObjectRelease(v17);
      v13 = v68;
      v11 = v67;
      if (v68 == v65)
        return swift_bridgeObjectRelease(v11);
    }
    if (v17 < 0)
      v59 = v17;
    else
      v59 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v18 = _CocoaArrayWrapper.endIndex.getter(v59);
    swift_bridgeObjectRelease(v17);
    if (!v18)
      goto LABEL_36;
LABEL_11:
    v19 = 0;
    v74 = v17;
    v75 = v17 & 0xC000000000000001;
    v11 = v17 & 0xFFFFFFFFFFFFFF8;
    v69 = v17 + 32;
    v70 = v17 & 0xFFFFFFFFFFFFFF8;
    v73 = v18;
    while (1)
    {
      if (v75)
      {
        v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
      }
      else
      {
        if (v19 >= *(_QWORD *)(v70 + 16))
          goto LABEL_45;
        v20 = *(id *)(v69 + 8 * v19);
      }
      v85 = v20;
      v16 = __OFADD__(v19++, 1);
      if (v16)
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        if (v11 < 0)
          v60 = v11;
        else
          v60 = v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v11);
        v12 = _CocoaArrayWrapper.endIndex.getter(v60);
        swift_bridgeObjectRelease(v67);
        v11 = v67;
        if (!v12)
          return swift_bridgeObjectRelease(v11);
        goto LABEL_3;
      }
      v21 = objc_msgSend(v85, "substitutionValues");
      sub_10000795C(0, &qword_10012A290, LNSubstitutionValue_ptr);
      v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21);

      if ((unint64_t)v22 >> 62)
      {
        if (v22 < 0)
          v58 = v22;
        else
          v58 = v22 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v22);
        a3 = _CocoaArrayWrapper.endIndex.getter(v58);
        swift_bridgeObjectRelease(v22);
        if (!a3)
        {
LABEL_34:

          swift_bridgeObjectRelease(v22);
          goto LABEL_35;
        }
      }
      else
      {
        a3 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!a3)
          goto LABEL_34;
      }
      if (a3 < 1)
        goto LABEL_44;
      v76 = v19;
      v23 = 0;
      v24 = *v71;
      v82 = v71[1];
      v83 = v24;
      v80 = a3;
      v81 = v22 & 0xC000000000000001;
      v25 = *a1;
      v84 = v22;
      do
      {
        v89 = v25;
        if (v81)
          v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v22);
        else
          v26 = *(id *)(v22 + 8 * v23 + 32);
        v27 = v26;
        v28 = objc_msgSend(v26, "parameterIdentifier");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v29 = v82;
        *(_QWORD *)&v30 = swift_bridgeObjectRetain(v82).n128_u64[0];
        v31 = objc_msgSend(v79, "basePhraseTemplate", v30);
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v87 = v33;
        v88 = v32;

        v86 = objc_msgSend(v27, "title");
        v34 = objc_msgSend(v27, "titleKey");
        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        v37 = v36;

        v38 = objc_msgSend(v85, "parameterIdentifier");
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
        v41 = v40;

        v42 = objc_msgSend(v27, "value");
        v43 = objc_allocWithZone((Class)LNProperty);
        v44 = sub_100016F00(v39, v41, v42);
        v45 = objc_msgSend(v27, "optionsCollectionTitle");
        v46 = sub_10007141C(v27);
        v47 = v78;
        v48 = &v8[v78[5]];
        *(_QWORD *)v48 = v83;
        *((_QWORD *)v48 + 1) = v29;
        v49 = &v8[v47[6]];
        v50 = v87;
        *(_QWORD *)v49 = v88;
        *((_QWORD *)v49 + 1) = v50;
        *(_QWORD *)&v8[v47[7]] = v86;
        v51 = (uint64_t *)&v8[v47[8]];
        *v51 = v35;
        v51[1] = v37;
        *(_QWORD *)&v8[v47[9]] = v44;
        *(_QWORD *)&v8[v47[10]] = v45;
        v52 = (uint64_t *)&v8[v47[11]];
        *v52 = v46;
        v52[1] = v53;
        v25 = v89;
        if ((swift_isUniquelyReferenced_nonNull_native(v89) & 1) == 0)
        {
          sub_10001E084();
          v25 = v56;
        }
        v54 = v80;
        v55 = *(_QWORD *)(v25 + 16);
        a3 = v55 + 1;
        v22 = v84;
        if (v55 >= *(_QWORD *)(v25 + 24) >> 1)
        {
          sub_10001E084();
          v25 = v57;
        }
        ++v23;
        *(_QWORD *)(v25 + 16) = a3;
        sub_100020488((uint64_t)v8, v25+ ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))+ *(_QWORD *)(v77 + 72) * v55, (void (*)(_QWORD))type metadata accessor for LNAppShortcutParameterRecord);

      }
      while (v54 != v23);

      swift_bridgeObjectRelease(v22);
      a1 = v72;
      v18 = v73;
      *v72 = v25;
      v17 = v74;
      v19 = v76;
LABEL_35:
      if (v19 == v18)
        goto LABEL_36;
    }
  }
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_100006E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v33 = a2;
  v34 = a3;
  v35 = a4;
  v36 = a5;
  v37 = a6;
  v38 = a7;
  v39 = a8;
  v40 = a10;
  v41 = a11;
  sub_10001D33C();
  if (qword_10012BF88 != -1)
    swift_once(&qword_10012BF88, sub_1000E3DF4);
  static OS_dispatch_queue.getSpecific<A>(key:)(&v42);
  v16 = v42;
  v17 = v43;
  v18 = sub_10001D378();
  if ((v17 & 1) != 0 || v16 != v18)
  {
    v24 = *(id *)(a1 + 104);
    v25 = v44;
    OS_dispatch_queue.sync<A>(execute:)(a9, sub_10001FF74, v32);
    if (v25)
    {
      swift_bridgeObjectRelease(a4);
      swift_release();

      v19 = a11;
      v22 = a8;
      goto LABEL_9;
    }
    swift_release();

    v19 = a11;
    v22 = a8;
    v20 = a4;
LABEL_12:
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v22);
    v26 = v20;
    return swift_bridgeObjectRelease(v26);
  }
  v20 = a4;
  v19 = a11;
  v21 = a3;
  v22 = a8;
  v23 = v44;
  sub_10000541C(a2, v21, a4, a5, a6, a7, a8);
  if (!v23)
  {
    swift_release();
    goto LABEL_12;
  }
  swift_bridgeObjectRelease(a4);
  swift_release();
LABEL_9:
  swift_bridgeObjectRelease(v19);
  v26 = v22;
  return swift_bridgeObjectRelease(v26);
}

id sub_100007058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  objc_class *v15;
  char *v16;
  uint64_t *v17;
  id v18;
  char *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  id v27;
  objc_super v29;

  v15 = (objc_class *)sub_10007225C();
  v16 = &v7[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken];
  *(_QWORD *)v16 = a1;
  *((_QWORD *)v16 + 1) = a2;
  *((_QWORD *)v16 + 2) = a3;
  *((_QWORD *)v16 + 3) = a4;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_registrySource] = a7;
  v17 = (uint64_t *)&v7[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_sourceBundleIdentifier];
  *v17 = a5;
  v17[1] = a6;
  v18 = objc_allocWithZone((Class)LSApplicationExtensionRecord);
  sub_1000101EC(a6);
  v19 = v7;
  sub_1000166E8();
  v20 = sub_1000077AC(a5, a6, 1, (SEL *)&selRef_initWithBundleIdentifier_requireValid_error_);
  v21 = objc_msgSend(v20, "containingBundleRecord");

  if (v21)
  {
    v22 = sub_100004AA8(v21);
    if (v23)
    {
      v24 = v22;
      v25 = v23;
      sub_1000059C4();
      a5 = v24;
      a6 = v25;
    }
  }
  v26 = (uint64_t *)&v19[OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier];
  *v26 = a5;
  v26[1] = a6;

  v29.receiver = v19;
  v29.super_class = v15;
  v27 = objc_msgSendSuper2(&v29, "init");
  sub_10001BFF8();
  return v27;
}

void QueryType.join(_:_:on:)(char a1@<W0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[32];
  _BYTE __src[88];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  __int128 v37[2];
  _QWORD v38[9];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(a8, v8, a6);
  sub_100019A60((uint64_t)a2, (uint64_t)v37);
  v15 = a2[3];
  v14 = a2[4];
  sub_10000E858(a2, v15);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v14 + 16))(v38, v15, v14);
  v16 = sub_10001F9C8();
  sub_100018298(v16, v17, v18);
  sub_1000E0204(v38);
  sub_100016794();
  sub_1000100E0();
  v19 = sub_10001F9C8();
  sub_1000DBBD0(v19, v20, v21, a3, a4, a5, v22);
  v23 = sub_10001F9C8();
  sub_100018818(v23, v24, v25);
  if (*(_QWORD *)&__src[24])
  {
    sub_100019A48((__int128 *)__src, (uint64_t)&v33);
  }
  else
  {
    v35 = sub_10001BE7C(&qword_10012C158);
    v36 = &protocol witness table for Expression<A>;
    *(_QWORD *)&v33 = a3;
    *((_QWORD *)&v33 + 1) = a4;
    v34 = a5;
    sub_100016794();
    sub_1000100E0();
    sub_1000131A8((uint64_t)__src, &qword_10012C140);
  }
  __src[0] = a1;
  sub_100019A48(v37, (uint64_t)&__src[8]);
  sub_100019A48(&v33, (uint64_t)&__src[48]);
  sub_1000E10B8((uint64_t)v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a7 + 32));
  v27 = v26;
  sub_10001FC04();
  v28 = *(_QWORD *)(*(_QWORD *)(v27 + 64) + 16);
  sub_10001FBF8(v28);
  v29 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v29 + 16) = v28 + 1;
  memcpy((void *)(v29 + 88 * v28 + 32), __src, 0x58uLL);
  sub_10001EE80((uint64_t)v31);
  sub_100013628();
}

uint64_t sub_10000737C()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100007398()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000073A0()
{
  return 0;
}

uint64_t sub_1000073B0()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000073CC()
{
  return 0;
}

uint64_t sub_100007404(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2);
}

void sub_10000740C(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t *v4;
  uint64_t *v5;

  sub_10001A720(a1, a2, a3, a4, v4, v5);
}

uint64_t sub_100007418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  return sub_1000132C4((uint64_t)&a29, v29 + 72);
}

BOOL sub_100007424@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100007438(uint64_t a1)
{
  uint64_t v1;

  return BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v1, a1);
}

uint64_t sub_100007450()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  id v11;
  uint64_t v12;

  v1 = (void *)objc_opt_self(LNConnectionPolicy);
  sub_100019430();
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "policyWithBundleIdentifier:", v2);

  *(_QWORD *)(v0 + 144) = 0;
  v4 = objc_msgSend(v3, "connectionWithError:", v0 + 144);
  *(_QWORD *)(v0 + 176) = v4;

  v5 = *(void **)(v0 + 144);
  if (v4)
  {
    v6 = v0 + 16;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100004694;
    v7 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v8 = (_QWORD *)(v0 + 80);
    v8[1] = 0x40000000;
    v8[2] = sub_10000D0C8;
    v8[3] = &unk_10011CD20;
    v8[4] = v7;
    v9 = v5;
    objc_msgSend(v4, "fetchAppShortcutParametersWithCompletionHandler:", v8);
    return swift_continuation_await(v6);
  }
  else
  {
    v11 = v5;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v12);
    return sub_10001A480(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_10000762C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t (*v16)(_BYTE *, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _BYTE v23[32];
  _QWORD v24[3];
  uint64_t v25;
  _QWORD v26[7];
  uint64_t v27;
  _QWORD v28[22];

  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a5 + 16);
  v10(v24, a3, a5);
  v11 = v25;
  v20 = v24[2];
  swift_bridgeObjectRetain(v25);
  sub_1000E0204(v24);
  v10(v26, a3, a5);
  v13 = v26[6];
  v12 = v27;
  swift_bridgeObjectRetain(v27);
  sub_1000E0204(v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 40))(v20, v11, v13, v12, a4, a6);
  v10(v28, a3, a5);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a6 + 24))(v28, a4, a6);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, __n128))(a6 + 32);
  v15 = swift_bridgeObjectRetain(a2);
  v16 = (uint64_t (*)(_BYTE *, _QWORD))v14(v23, a4, a6, v15);
  *(_BYTE *)v17 = a1;
  v18 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v17 + 8) = a2;
  swift_bridgeObjectRelease(v18);
  return v16(v23, 0);
}

uint64_t sub_100007774()
{
  uint64_t v0;

  sub_10001DCCC();
  sub_100017C10(*(_QWORD *)(v0 + 96));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

id sub_1000077AC(uint64_t a1, uint64_t a2, char a3, SEL *a4)
{
  void *v4;
  NSString v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v14;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v14 = 0;
  v9 = objc_msgSend(v4, *a4, v8, a3 & 1, &v14);

  v10 = v14;
  if (v9)
  {
    v11 = v14;
  }
  else
  {
    v12 = v14;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow();
  }
  return v9;
}

id sub_100007884(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), unint64_t *a6, _QWORD *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v13 = v12;
  v14 = a1;
  a5(v11, v13);
  sub_10000C028();

  sub_10000795C(0, a6, a7);
  Array._bridgeToObjectiveC()();
  sub_1000137F4();
  return 0;
}

uint64_t sub_10000795C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

_QWORD *sub_100007994(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  id v12;
  unsigned int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  unsigned int v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *result;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint8_t *v69;
  _QWORD *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  _QWORD v78[2];
  uint8_t *v79;
  _QWORD *v80;
  id v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  char v86[8];
  _QWORD *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  id v91[3];
  uint64_t v92;
  uint64_t v93;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD **)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v12 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v13 = objc_msgSend(v12, "isApplication"),
        v12,
        !v13))
  {
    v33 = a2;
    v9 = *(_QWORD **)&a2[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    swift_retain();
    sub_10004D7B8((uint64_t)v91);
    v34 = v92;
    v35 = v93;
    sub_10000E858(v91, v92);
    if (qword_100127CD8 != -1)
      swift_once(&qword_100127CD8, sub_10004D6D4);
    *(_QWORD *)&v88 = a3;
    *((_QWORD *)&v88 + 1) = a4;
    == infix<A>(_:_:)();
    v37 = v36;
    v39 = v38;
    v89 = v34;
    v90 = v35;
    sub_10001795C(&v88);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v37);
    sub_10000E87C(v91);
    sub_100019A48(&v88, (uint64_t)v91);
    v40 = v84;
    v41 = sub_100005278(v91);
    if (v40)
    {
      sub_10000E87C(v91);
      swift_bridgeObjectRelease(a4);

      swift_release();
      return v9;
    }
    v42 = v41;
    sub_10000E87C(v91);
    swift_release();
    v9 = sub_100081200(v42);

    swift_bridgeObjectRelease(v42);
LABEL_13:
    swift_bridgeObjectRelease(a4);
    return v9;
  }
  v83 = a2;
  v14 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v15 = sub_10001BE7C(&qword_100128750);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v17 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v16 + 32) = v17;
  v91[0] = (id)v16;
  specialized Array._endMutation()(v17);
  v18 = v91[0];
  v19 = objc_allocWithZone((Class)RBSAssertion);
  v20 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v14, (uint64_t)v18);
  v91[0] = 0;
  v21 = objc_msgSend(v20, "acquireWithError:", v91);
  v22 = v91[0];
  v81 = v20;
  if (v21)
  {
    v82 = a4;
    v23 = v91[0];
    swift_retain();
    sub_10004D7B8((uint64_t)v91);
    v24 = v92;
    v25 = v93;
    v80 = sub_10000E858(v91, v92);
    if (qword_100127CD8 != -1)
      swift_once(&qword_100127CD8, sub_10004D6D4);
    *(_QWORD *)&v88 = a3;
    *((_QWORD *)&v88 + 1) = v82;
    == infix<A>(_:_:)();
    v27 = v26;
    v29 = v28;
    v89 = v24;
    v90 = v25;
    sub_10001795C(&v88);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v27);
    sub_10000E87C(v91);
    sub_100019A48(&v88, (uint64_t)v91);
    v30 = (void *)v84;
    v31 = sub_100005278(v91);
    v32 = v30;
    if (v30)
    {
      sub_10000E87C(v91);
      swift_release();
      v20 = v81;
      objc_msgSend(v81, "invalidate");
      a4 = v82;
      goto LABEL_15;
    }
    v71 = v31;
    sub_10000E87C(v91);
    swift_release();
    v9 = sub_100081200(v71);
    swift_bridgeObjectRelease(v71);
    v72 = v81;
    objc_msgSend(v81, "invalidate");

    a4 = v82;
    goto LABEL_13;
  }
  v43 = v91[0];
  v32 = (void *)_convertNSErrorToError(_:)(v22);

  swift_willThrow(v44);
LABEL_15:
  v45 = v83;
  v91[0] = v32;
  swift_errorRetain(v32);
  v46 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v47 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v88, v91, v46, v47, 0))
  {

    swift_errorRelease(v91[0]);
    v58 = a4;
LABEL_30:
    swift_bridgeObjectRelease(v58);

    return v9;
  }
  v84 = v8;
  v48 = (void *)v88;
  v49 = objc_msgSend((id)v88, "domain");
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
  v52 = v51;

  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v50 == v53 && v52 == v54)
  {
    swift_bridgeObjectRelease_n(v52, 2);
  }
  else
  {
    v56 = v54;
    v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v52, v53, v54, 0);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v56);
    if ((v57 & 1) == 0)
    {

      swift_errorRelease(v91[0]);
      swift_bridgeObjectRelease(a4);

      return v9;
    }
  }
  v82 = a4;
  v59 = swift_errorRelease(v32);
  result = (id)getLNLogCategoryMetadata(v59);
  if (result)
  {
    Logger.init(_:)();
    v61 = v48;
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(12, -1);
      v80 = (_QWORD *)swift_slowAlloc(32, -1);
      v87 = v80;
      v79 = v64;
      *(_DWORD *)v64 = 136315138;
      v78[1] = v64 + 4;
      v65 = objc_msgSend(v61, "localizedDescription");
      v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
      v68 = v67;

      v85 = sub_10000FBEC(v66, v68, (uint64_t *)&v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);

      swift_bridgeObjectRelease(v68);
      v69 = v79;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Failed to acquire assertions: %s", v79, 0xCu);
      v70 = v80;
      swift_arrayDestroy(v80, 1);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {

    }
    ((void (*)(char *, uint64_t))v9[1])(v11, v84);
    v45 = v83;
    v9 = v81;
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v75 = v74;
    v76 = objc_allocWithZone((Class)NSError);
    v77 = sub_10008C1AC(v73, v75, 9006, 0);
    swift_willThrow(v77);

    swift_errorRelease(v91[0]);
    v58 = v82;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

void sub_1000081F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = sub_10001F258();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10001F350();
  v9 = sub_10001C088((uint64_t)&unk_10011CAD8);
  *(_QWORD *)(v9 + 16) = v1;
  *(_QWORD *)(v9 + 24) = a1;
  v10 = sub_100072140((uint64_t)sub_10001FEF4);
  sub_1000100E0();
  v11 = sub_1000179D8();
  static DispatchQoS.unspecified.getter(v11);
  sub_10002A8E4();
  sub_10001BE7C(&qword_100128178);
  v12 = sub_10001FBB4();
  sub_100071F48(v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v3, v2, v10);
  _Block_release(v10);
  sub_10007214C(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_10001BF78(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  swift_release();
  sub_100013308();
}

const char *sub_10000833C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100008354(v1, a1);
}

const char *sub_100008354@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  const char *result;
  _BYTE v7[24];

  sub_100017758(a1 + 16, (uint64_t)v7, 0);
  v5 = sqlite3_step(*(sqlite3_stmt **)(a1 + 16));
  result = sub_10001E9C0(v5);
  if (!v2)
    *a2 = (_DWORD)result == 100;
  return result;
}

void sub_1000083B8(void *a1)
{
  uint64_t v2;
  unsigned int v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD aBlock[3];
  _QWORD *v15;
  uint64_t (*v16)();
  uint64_t v17;

  v2 = sub_10007225C();
  v3 = objc_msgSend(a1, "processIdentifier");
  v4 = (id)LNDaemonApplicationXPCInterface();
  sub_100072230((uint64_t)v4, "setExportedInterface:");

  sub_100008A28(a1, (uint64_t)aBlock);
  v6 = v15;
  if (v15)
  {
    v7 = sub_10000E858(aBlock, (uint64_t)v15);
    v8 = *(v6 - 1);
    __chkstk_darwin(v7);
    v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v8 + 16))(v10);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v6);
    (*(void (**)(char *, _QWORD *))(v8 + 8))(v10, v6);
    v5 = sub_10000E87C(aBlock);
  }
  else
  {
    v11 = 0;
  }
  sub_100072230(v5, "setExportedObject:");
  swift_unknownObjectRelease(v11);
  v12 = sub_10001C088((uint64_t)&unk_10011CA38);
  *(_DWORD *)(v12 + 16) = v3;
  *(_QWORD *)(v12 + 24) = v2;
  v16 = sub_100020544;
  v17 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001FF18;
  v15 = &unk_10011CA50;
  v13 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a1, "setInvalidationHandler:", v13);
  _Block_release(v13);
}

uint64_t sub_100008558@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t inited;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v19[2];
  __int128 v20[2];
  _QWORD v21[5];
  _QWORD v22[4];

  v4 = *a1;
  sub_100019A60((uint64_t)(a1 + 8), (uint64_t)v19);
  sub_100019A60((uint64_t)(a1 + 48), (uint64_t)v20);
  sub_100019A48(v19, (uint64_t)v22);
  sub_100019A48(v20, (uint64_t)v21);
  v5 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v5, &v17);
  *(_OWORD *)(inited + 16) = xmmword_1000F05A0;
  v18 = 0;
  *(_QWORD *)&v19[0] = 0xE000000000000000;
  v7 = 0xE500000000000000;
  v8 = 0x52454E4E49;
  if (v4 != 1)
  {
    v8 = 0x54554F205446454CLL;
    v7 = 0xEA00000000005245;
  }
  if (v4)
    v9 = v8;
  else
    v9 = 0x53534F5243;
  if (v4)
    v10 = v7;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0x4E494F4A20;
  v12._object = (void *)0xE500000000000000;
  String.append(_:)(v12);
  v13 = v18;
  v14 = *(_QWORD *)&v19[0];
  v15 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 56) = v15;
  sub_10000E858(v22, v22[3]);
  sub_1000180D0();
  *(_QWORD *)(inited + 136) = v15;
  *(_QWORD *)(inited + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 112) = 20047;
  *(_QWORD *)(inited + 120) = 0xE200000000000000;
  *(_QWORD *)(inited + 128) = _swiftEmptyArrayStorage;
  sub_100019A60((uint64_t)v21, inited + 152);
  sub_10001A118(inited, 32, 0xE100000000000000, a2);
  swift_setDeallocating(inited);
  sub_10001E778();
  sub_10000E87C(v21);
  return sub_10000E87C(v22);
}

#error "1000087A4: call analysis failed (funcsize=45)"

uint64_t sub_100008804(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a2;
  v8 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v10 = String.init<A>(describing:)(&v23, v8);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v12 = v9;
    v13 = String.init(cString:)(LNLogSubsystem);
    v15 = Logger.init(subsystem:category:)(v13, v14, v10, v12);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(18, -1);
      v19 = swift_slowAlloc(32, -1);
      v23 = v19;
      *(_DWORD *)v18 = 67109378;
      LODWORD(v22) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 4);
      *(_WORD *)(v18 + 8) = 2080;
      if (qword_100127DA8 != -1)
        swift_once(&qword_100127DA8, sub_10006BC34);
      v20 = qword_10012CE50;
      v21 = *(_QWORD *)algn_10012CE58;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10012CE58);
      v22 = sub_10000FBEC(v20, v21, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invalidated XPC connection from PID %d for service \"%s\"", (uint8_t *)v18, 0x12u);
      swift_arrayDestroy(v19, 1);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100008A28(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __SecTask *v13;
  __SecTask *v14;
  CFStringRef v15;
  __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  uint8_t *v25;
  NSObject *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  audit_token_t token;

  v5 = sub_10000C05C();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, "auditToken");
  v10 = token.val[0];
  v9 = token.val[1];
  v11 = token.val[3];
  v12 = token.val[7];
  v49 = token.val[4];
  v50 = token.val[2];
  v47 = token.val[6];
  v48 = token.val[5];
  v13 = SecTaskCreateWithAuditToken(0, &token);
  if (!v13)
    goto LABEL_9;
  v14 = v13;
  v45 = v9;
  v15 = SecTaskCopySigningIdentifier(v13, 0);
  if (!v15
    || (v16 = (__CFString *)v15,
        *(_QWORD *)token.val = 0,
        *(_QWORD *)&token.val[2] = 0,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(v15, &token),
        v16,
        !*(_QWORD *)&token.val[2]))
  {

LABEL_9:
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    goto LABEL_12;
  }
  v46 = *(_QWORD *)&token.val[2];
  v43 = v10;
  v44 = *(_QWORD *)token.val;
  v17 = v2;
  v18 = qword_100127DA0;
  sub_1000179D8();
  if (v18 != -1)
    swift_once(&qword_100127DA0, sub_10006BB90);
  v19 = sub_100012A40(v5, (uint64_t)qword_10012CE38);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v19, v5);
  sub_10001EE50();
  v20 = sub_1000101EC(v46);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v24 = sub_100011780(12);
    v41 = v23;
    v25 = (uint8_t *)v24;
    v42 = sub_100011780(32);
    *(_QWORD *)token.val = v42;
    v39 = v25;
    v40 = v17;
    *(_DWORD *)v25 = 136315138;
    v38 = v25 + 4;
    v26 = v21;
    v27 = v46;
    sub_1000101B0();
    v51 = sub_10000FBEC(v44, v27, (uint64_t *)&token);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &token);
    sub_100011800(v27);
    v28 = v39;
    sub_1000100C0((void *)&_mh_execute_header, v26, (os_log_type_t)v41, "Created AppShortcutClient with bundleId: %s", v39);
    v29 = v42;
    sub_100013320(v42);
    sub_1000133FC(v29);
    sub_1000133FC((uint64_t)v28);

    v17 = v40;
  }
  else
  {

    sub_1000117AC(v46);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v30 = v43;
  v31 = *(_QWORD *)(v17 + 112);
  v32 = (objc_class *)type metadata accessor for ApplicationServiceInstance();
  objc_allocWithZone(v32);
  v33 = v30 | (v45 << 32);
  v34 = v50 | (v11 << 32);
  v35 = v49 | (v48 << 32);
  v36 = v47 | (v12 << 32);
  sub_1000179D8();
  v37 = sub_100007058(v33, v34, v35, v36, v44, v46, v31);
  *(_QWORD *)(a2 + 24) = v32;

  *(_QWORD *)a2 = v37;
LABEL_12:
  sub_100013308();
}

_QWORD *sub_100008D10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a2;
  swift_retain(a2);
  v9 = swift_retain(a1);
  v10 = dispatch thunk of _AnySequenceBox._makeIterator()(v9);
  v11 = swift_release(a1);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v29, v11);
  v12 = v29;
  if (v29)
  {
    v27 = _swiftEmptyArrayStorage;
    v13 = v30;
    do
    {
      while (1)
      {
        if (qword_100127C58 != -1)
          swift_once(&qword_100127C58, sub_10003641C);
        Row.get<A>(_:)();
        if (!v3)
          break;
        swift_errorRelease(v3);
        swift_bridgeObjectRelease(v13);
        v3 = 0;
        v14 = swift_bridgeObjectRelease(v12);
        dispatch thunk of _AnyIteratorBoxBase.next()(&v29, v14);
        v12 = v29;
        v13 = v30;
        if (!v29)
          goto LABEL_19;
      }
      v28 = v29;
      v31 = v30;
      if (qword_100127C60 != -1)
        swift_once(&qword_100127C60, sub_100036440);
      Row.get<A>(_:)();
      v3 = 0;
      v15 = v29;
      v16 = v30;
      sub_10000795C(0, (unint64_t *)&unk_100129F00, LNAutoShortcutMetadata_ptr);
      v17 = type metadata accessor for URL(0);
      sub_100014360((uint64_t)v8, 1, 1, v17);
      v18 = static LNAutoShortcutMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v15, v16, v8, 0);
      sub_1000131E0((uint64_t)v8, &qword_100128740);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v16);
      v19 = v27;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10001FAEC();
        v19 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v21 = v19[2];
      if (v21 >= v19[3] >> 1)
      {
        sub_10001FAEC();
        v19 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v19[2] = v21 + 1;
      v27 = v19;
      v22 = &v19[3 * v21];
      v23 = v31;
      v22[4] = v28;
      v22[5] = v23;
      v22[6] = v18;
      dispatch thunk of _AnyIteratorBoxBase.next()(&v29, isUniquelyReferenced_nonNull_native);
      v12 = v29;
      v13 = v30;
    }
    while (v29);
  }
  else
  {
    v27 = _swiftEmptyArrayStorage;
  }
LABEL_19:
  swift_release_n(v26, 2);
  swift_release(v10);
  return v27;
}

uint64_t sub_1000090A4()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t sub_1000090C0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[6] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v4);
  v1[10] = swift_task_alloc(v4);
  return swift_task_switch(sub_100011C88, 0, 0);
}

uint64_t sub_100009130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[21];
  _BYTE v17[168];
  _QWORD v18[22];

  if (qword_100127FE8 != -1)
    swift_once(&qword_100127FE8, sub_1000CA9F4);
  sub_1000189C4(v18, &unk_10012BC40);
  if (a2)
  {
    sub_1000379AC(v18);
    if (qword_100127FF0 != -1)
      swift_once(&qword_100127FF0, sub_1000CAA40);
    v16[0] = a1;
    v16[1] = a2;
    == infix<A>(_:_:)();
    v7 = v6;
    v3 = v8;
    v10 = v9;
    sub_1000189C4(&v15, v18);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v10);
    QueryType.filter(_:)(v7, v3, v10, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v16);
    swift_bridgeObjectRelease_n(v10, 2);
    swift_bridgeObjectRelease_n(v3, 2);
    sub_100037A7C(v18);
    v11 = v16;
  }
  else
  {
    sub_1000379AC(v18);
    v11 = v18;
  }
  sub_1000189C4(v17, v11);
  v16[3] = &type metadata for Table;
  v16[4] = &protocol witness table for Table;
  v16[0] = swift_allocObject(&unk_10011EBD0, 184, 7);
  sub_1000189C4((void *)(v16[0] + 16), v17);
  Connection.prepareRowIterator(_:)(v16);
  v12 = sub_10000E87C(v16);
  if (!v2)
  {
    __chkstk_darwin(v12);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    v3 = v14;
    swift_release();
    sub_100017810();
    swift_release();
  }
  return v3;
}

void sub_1000093AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  ValueMetadata *v114;
  _UNKNOWN **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[168];
  _QWORD v133[21];

  sub_10000C038();
  sub_1000073E4();
  v2 = qword_100127C50;
  sub_1000166E8();
  if (v2 != -1)
    swift_once(&qword_100127C50, sub_1000363C4);
  sub_1000189C4(v133, &unk_10012C9D0);
  if (v0)
  {
    sub_1000379AC(v133);
    if (qword_100127C58 != -1)
      swift_once(&qword_100127C58, sub_10003641C);
    sub_1000167B4((uint64_t)&qword_10012CA78);
    sub_10001EE48();
    sub_10001E21C(v3, v4, v5, v6, v7, v8, v9, v10, v47);
    sub_10000C020();
    v11 = sub_1000100E0();
    sub_100017E90(v11, v12, v13, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v14, v15, v16, v48, v51, v54, v57, v60, v63, v66, v69, v72, v75, v78,
      v81,
      v84,
      v87,
      v90,
      v93,
      v96,
      v99,
      v102,
      v105,
      v108,
      v111);
    sub_1000117AC(v1);
    sub_1000117AC(v0);
    v17 = sub_10001EDE4();
    v25 = sub_10006B27C((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24, v49, v52, v55, v58, v61, v64, v67, v70, v73, v76, v79,
            v82,
            v85,
            v88,
            v91,
            v94,
            v97,
            v100,
            v103,
            v106,
            v109,
            v111,
            v112,
            v113,
            (uint64_t)v114,
            (uint64_t)v115,
            v116,
            v117,
            v118,
            v119,
            v120,
            v121,
            v122,
            v123,
            v124,
            v125,
            v126,
            v127,
            v128,
            v129,
            v130,
            v131,
            v132[0]);
  }
  else
  {
    v27 = sub_1000379AC(v133);
    v25 = sub_10001BF24((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, v47, v51, v54, v57, v60, v63, v66, v69, v72, v75, v78,
            v81,
            v84,
            v87,
            v90,
            v93,
            v96,
            v99,
            v102,
            v105,
            v108,
            v111,
            v112,
            v113,
            (uint64_t)v114,
            (uint64_t)v115,
            v116,
            v117,
            v118,
            v119,
            v120,
            v121,
            v122,
            v123,
            v124,
            v125,
            v126,
            v127,
            v128,
            v129,
            v130,
            v131,
            v132[0]);
  }
  sub_1000189C4(v25, v26);
  v114 = &type metadata for Table;
  v115 = &protocol witness table for Table;
  v111 = sub_1000058D0((uint64_t)&unk_10011C820);
  v35 = sub_1000189C4((void *)(v111 + 16), v132);
  sub_10001DD78((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42, v50, v53, v56, v59, v62, v65, v68, v71, v74, v77, v80,
    v83,
    v86,
    v89,
    v92,
    v95,
    v98,
    v101,
    v104,
    v107,
    v110,
    v111);
  if (v2)
  {
    sub_10001F4D4(&v111);
    v43 = (_QWORD *)sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0((uint64_t)v43, v44);
    sub_10001F764();
    sub_100013594(v43);
    sub_1000137DC();
    sub_100010120();
  }
  else
  {
    sub_10000E87C(&v111);
    sub_1000163DC();
    v45 = sub_100018918();
    sub_100008D10(v45, v46);
    sub_100018C00();
    sub_10001105C();
  }
  sub_100014408();
  sub_1000117E8();
}

void sub_100009570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t countAndFlagsBits;
  void *object;
  void *rawValue;
  _QWORD v14[21];
  _QWORD v15[21];
  _QWORD v16[21];
  SQLite::Delete v17;
  SQLite::Update v18;

  sub_10000C038();
  v3 = v2;
  v5 = v4;
  if (qword_100127D00 != -1)
    swift_once(&qword_100127D00, sub_10005444C);
  sub_1000189C4(v15, &unk_1001296E0);
  sub_1000379AC(v15);
  if (qword_100127D10 != -1)
    swift_once(&qword_100127D10, sub_100054510);
  v14[0] = v5;
  v14[1] = v3;
  == infix<A>(_:_:)();
  sub_1000059F0();
  sub_1000189C4(v6, v15);
  sub_10000C020();
  sub_1000100E0();
  v7 = sub_100018E30();
  QueryType.filter(_:)(v7, v8, v9, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v10);
  sub_1000117AC(v1);
  sub_1000117AC(v0);
  sub_100037A7C(v15);
  sub_1000189C4(v16, v14);
  sub_1000189C4(v14, v16);
  v17 = QueryType.delete()();
  countAndFlagsBits = v17.template._countAndFlagsBits;
  object = v17.template._object;
  rawValue = v17.bindings._rawValue;
  sub_100037A7C(v16);
  v18.template._countAndFlagsBits = countAndFlagsBits;
  v18.template._object = object;
  v18.bindings._rawValue = rawValue;
  Connection.run(_:)(v18);
  sub_1000059B0();
  sub_1000059C4();
  sub_1000117E8();
}

void sub_1000096F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t countAndFlagsBits;
  void *object;
  void *rawValue;
  _BYTE v13[168];
  _QWORD v14[21];
  _QWORD v15[21];
  _QWORD v16[21];
  SQLite::Delete v17;
  SQLite::Update v18;

  if (qword_100127D50 != -1)
    swift_once(&qword_100127D50, sub_10005A96C);
  sub_1000189C4(v15, &unk_100129B20);
  sub_1000379AC(v15);
  if (qword_100127D60 != -1)
    swift_once(&qword_100127D60, sub_10005A9E4);
  sub_10001768C((uint64_t)&qword_100129BE0);
  v14[0] = a1;
  v14[1] = a2;
  == infix<A>(_:_:)();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  sub_1000189C4(v13, v15);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  QueryType.filter(_:)(v5, v7, v9, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v14);
  sub_1000117AC(v9);
  sub_1000117AC(v7);
  sub_100037A7C(v15);
  sub_1000189C4(v16, v14);
  sub_1000189C4(v13, v14);
  v17 = QueryType.delete()();
  countAndFlagsBits = v17.template._countAndFlagsBits;
  object = v17.template._object;
  rawValue = v17.bindings._rawValue;
  sub_100037A7C(v16);
  v18.template._countAndFlagsBits = countAndFlagsBits;
  v18.template._object = object;
  v18.bindings._rawValue = rawValue;
  Connection.run(_:)(v18);
  sub_1000059B0();
  swift_bridgeObjectRelease(object);
  sub_1000117E8();
}

void sub_10000989C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t countAndFlagsBits;
  void *object;
  void *rawValue;
  _BYTE v13[168];
  _QWORD v14[21];
  _QWORD v15[21];
  _QWORD v16[21];
  SQLite::Delete v17;
  SQLite::Update v18;

  sub_10000C038();
  v1 = v0;
  v3 = v2;
  if (qword_100127C68 != -1)
    swift_once(&qword_100127C68, sub_1000364D4);
  sub_1000189C4(v15, &unk_100128C10);
  sub_1000379AC(v15);
  if (qword_100127C70 != -1)
    swift_once(&qword_100127C70, sub_100036528);
  sub_10001768C((uint64_t)&qword_100128CB8);
  v14[0] = v3;
  v14[1] = v1;
  == infix<A>(_:_:)();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  sub_1000189C4(v13, v15);
  swift_bridgeObjectRetain(v7);
  sub_1000100E0();
  QueryType.filter(_:)(v5, v7, v9, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v14);
  sub_1000117AC(v9);
  sub_1000117AC(v7);
  sub_100037A7C(v15);
  sub_1000189C4(v16, v14);
  sub_1000189C4(v13, v14);
  v17 = QueryType.delete()();
  countAndFlagsBits = v17.template._countAndFlagsBits;
  object = v17.template._object;
  rawValue = v17.bindings._rawValue;
  sub_100037A7C(v16);
  v18.template._countAndFlagsBits = countAndFlagsBits;
  v18.template._object = object;
  v18.bindings._rawValue = rawValue;
  Connection.run(_:)(v18);
  sub_1000059B0();
  sub_1000059C4();
  sub_1000117E8();
}

uint64_t sub_100009A38()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  void *v24;
  uint64_t v25;
  id v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(void **)(v0 + 224);
  sub_10000C030();
  sub_100071FF8();
  sub_1000093AC();
  *(_QWORD *)(v0 + 280) = v3;
  if (v1)
  {
    v5 = *(void **)(v0 + 216);
    v4 = *(void **)(v0 + 224);
    sub_1000059B0();
    sub_10000C028();
    sub_1000059A8();

    sub_100072180();
    sub_1000158B0();
    v22 = (uint64_t (*)(void))sub_100072158();
    return v22();
  }
  v6 = *(_QWORD *)(v0 + 200);
  v7 = *(void **)(v0 + 208);
  v59 = *(void **)(v0 + 168);
  v60 = *(_QWORD *)(v0 + 160);
  v62 = *(_QWORD *)(v0 + 152);
  v8 = v3;
  v58 = *(_QWORD *)(v0 + 144);
  sub_10000E038();
  sub_100016794();
  v63 = v8;
  v55 = v0 + 120;
  sub_10006B5F8(v8);
  sub_10001BF30();
  sub_10000A850(v9, v10, v11, v12, v13);
  v15 = v14;
  v61 = v16;
  sub_1000059A8();
  sub_1000059B0();
  sub_10000E038();
  type metadata accessor for AppShortcutInterpolator();
  sub_100016794();
  sub_100016844(v6, (uint64_t)v7, v58);
  sub_10000E038();
  sub_1000060E4(_swiftEmptyArrayStorage, v60, v59);
  v57 = v15;
  v65 = v15;
  sub_10000C030();
  sub_100009F28();
  sub_100009F28();
  v17 = v15;
  *(_QWORD *)(v0 + 288) = v15;
  sub_100016794();
  v18 = v6;
  sub_10006B3E0(v62, v6, (uint64_t)v7);
  v19 = sub_100019430();
  v21 = sub_1000038B8(v19, v20);
  *(_QWORD *)(v0 + 296) = v21;
  sub_1000059A8();
  swift_bridgeObjectRelease(v57);
  sub_1000117B4();
  sub_100016794();
  sub_100020B9C(v6, (uint64_t)v7, v17, v21);
  v24 = *(void **)(v0 + 216);
  v25 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
  v26 = v24;
  sub_100097F34();
  sub_10000ECD8(v25);
  if (v27)
  {
    v28 = *(_QWORD *)(v0 + 176);
    v29 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 240));
    sub_10000EB30(v29, v30, v31, v32, v33, v34, v35, v36, v55, v57, v58, (uint64_t)v59, v60, v61, v62, v0 + 104, v63);
    sub_1000059B0();
    sub_10000C028();
    sub_1000131A8(v28, &qword_10012ADD0);
    if (qword_100127E70 != -1)
      swift_once(&qword_100127E70, sub_100090544);
    v37 = *(void **)(v0 + 168);
    v38 = sub_10000C05C();
    v39 = sub_100012A40(v38, (uint64_t)qword_10012D0C8);
    Logger.logObject.getter(v37);
    v40 = sub_10000BFD4();
    if (sub_100013670(v40))
    {
      v18 = v0 + 112;
      v21 = *(_QWORD *)(v0 + 200);
      v64 = *(void **)(v0 + 168);
      v41 = (uint8_t *)sub_100011780(12);
      v7 = (void *)sub_100011780(32);
      v65 = (uint64_t)v7;
      *(_DWORD *)v41 = 136315138;
      v2 = v41 + 12;
      sub_10000C020();
      *(_QWORD *)(v0 + 112) = sub_1000167C4(v21, v42, &v65);
      sub_10001B6B4(v0 + 112, v56);
      sub_1000059B0();

      sub_1000100C0((void *)&_mh_execute_header, v39, (os_log_type_t)v37, "Invalid bundle %s", v41);
      sub_100013320((uint64_t)v7);
      sub_1000133FC((uint64_t)v7);
      sub_1000133FC((uint64_t)v41);
    }
    else
    {

    }
    if (qword_100127CF0 != -1)
      swift_once(&qword_100127CF0, sub_100050AA8);
    sub_10001F338();
    v52 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
    v53 = sub_100072040(v52);
    *(_OWORD *)(v53 + 16) = xmmword_1000EFAE0;
    *(_QWORD *)(v53 + 32) = v21;
    *(_QWORD *)(v53 + 40) = v18;
    sub_1000101EC(v18);
    sub_1000720FC();
    sub_100072128();
    sub_100071FCC(v54);
    sub_10000C028();
    sub_1000059C4();
    sub_10001EE50();

    sub_100010270();
    sub_100005878();
    v22 = (uint64_t (*)(void))sub_1000121E0();
    return v22();
  }
  v43 = *(_QWORD *)(v0 + 224);
  v45 = *(_QWORD *)(v0 + 184);
  v44 = *(_QWORD *)(v0 + 192);
  sub_100020488(*(_QWORD *)(v0 + 176), v44, (void (*)(_QWORD))type metadata accessor for LSLinkBundleRecord);
  v46 = *(_QWORD *)(v43 + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  *(_QWORD *)(v0 + 304) = v46;
  v47 = (void *)objc_opt_self(_INVocabulary);
  swift_retain();
  v48 = objc_msgSend(v47, "sharedVocabulary", v55);
  *(_QWORD *)(v0 + 312) = v48;
  v49 = sub_10000F574();
  *(_QWORD *)(v0 + 320) = v49;
  *(_QWORD *)(v0 + 88) = v45;
  *(_QWORD *)(v0 + 96) = &off_10011DFB0;
  v50 = sub_10001795C((_QWORD *)(v0 + 64));
  sub_100020444(v44, (uint64_t)v50);
  v51 = (_QWORD *)swift_task_alloc(dword_100128154);
  *(_QWORD *)(v0 + 328) = v51;
  *v51 = v0;
  v51[1] = sub_1000200E4;
  return sub_100004C08(v0 + 64, v63, v17, v21, *(_QWORD *)(v0 + 240), v46, (uint64_t)v48, v49);
}

void sub_100009F28()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000183B8();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100013654() || (sub_100019AF8(), !(v6 ^ v4 | v5)))
  {
    sub_100011848();
    sub_10001E084();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  v8 = (*(_QWORD *)(v2 + 24) >> 1) - *(_QWORD *)(v2 + 16);
  v9 = type metadata accessor for LNAppShortcutParameterRecord(0);
  if (v8 < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10001FB9C(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80)), v3);
  if (!v3)
  {
LABEL_11:
    sub_1000117B4();
    *v1 = v2;
    sub_10001ADFC();
    return;
  }
  sub_10001C028();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_100009FEC(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  Swift::String v21;
  void *object;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  void *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t aBlock;
  unint64_t v63[5];

  v59 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v59);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v58 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v57 = (uint64_t *)((char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DispatchTime(0);
  v56 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v55 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v60 = (char *)&v50 - v11;
  v12 = (char *)(a1 + qword_10012D610);
  swift_bridgeObjectRetain(a2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v53 = v8;
    v54 = v12;
    v51 = v6;
    v52 = v5;
    v16 = swift_slowAlloc(22, -1);
    v17 = (_QWORD *)swift_slowAlloc(64, -1);
    v61 = v17;
    *(_DWORD *)v16 = 136315394;
    if (qword_100127CF8 != -1)
      swift_once(&qword_100127CF8, sub_100050D40);
    v18 = qword_10012CCE0;
    v19 = *(_QWORD *)algn_10012CCE8;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10012CCE8);
    aBlock = sub_10000FBEC(v18, v19, (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v63);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v16 + 12) = 2080;
    aBlock = 0x676E697461647075;
    v63[0] = 0xEA0000000000203ALL;
    swift_bridgeObjectRetain(a2);
    v21._countAndFlagsBits = Set.description.getter(v20, &type metadata for String, &protocol witness table for String);
    object = v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(object);
    v23 = v63[0];
    aBlock = sub_10000FBEC(aBlock, v63[0], (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v63);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Queuing notification for %s %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v5 = v52;
    v8 = v53;
    v6 = v51;
  }
  else
  {
    swift_bridgeObjectRelease(a2);

  }
  v24 = *(_QWORD *)a1;
  v54 = *(char **)(*(_QWORD *)a1 + 136);
  if (*(_QWORD *)&v54[a1])
  {
    v25 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v25);
    swift_release();
    v24 = *(_QWORD *)a1;
  }
  v26 = *(_QWORD *)(v24 + 128);
  v27 = *(_QWORD *)(a1 + v26);
  if (v27)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + v26));
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v51 = v6;
      v52 = v5;
      v53 = v8;
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      aBlock = v50;
      *(_DWORD *)v31 = 136315138;
      if (qword_100127CF8 != -1)
        swift_once(&qword_100127CF8, sub_100050D40);
      v33 = qword_10012CCE0;
      v32 = *(_QWORD *)algn_10012CCE8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10012CCE8);
      v61 = (_QWORD *)sub_10000FBEC(v33, v32, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &aBlock);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Existing notification for %s, merging", v31, 0xCu);
      v34 = v50;
      swift_arrayDestroy(v50, 1);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      v5 = v52;
      v8 = v53;
      v6 = v51;
    }
    else
    {

    }
    swift_bridgeObjectRetain(a2);
    v36 = sub_10006B9B8(v27, a2);
    v35 = *(_QWORD *)(a1 + v26);
    *(_QWORD *)(a1 + v26) = v36;
  }
  else
  {
    *(_QWORD *)(a1 + v26) = a2;
    swift_bridgeObjectRetain(a2);
    v35 = 0;
  }
  v37 = swift_bridgeObjectRelease(v35);
  v38 = v55;
  static DispatchTime.now()(v37);
  v40 = v57;
  v39 = v58;
  *v57 = *(_QWORD *)(a1 + 16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v39 + 104))(v40, enum case for DispatchTimeInterval.milliseconds(_:), v6);
  v41 = v60;
  + infix(_:_:)(v38, v40);
  (*(void (**)(_QWORD *, uint64_t))(v39 + 8))(v40, v6);
  v42 = *(void (**)(char *, uint64_t))(v56 + 8);
  v42(v38, v8);
  v63[3] = (unint64_t)sub_1000719D8;
  v63[4] = a1;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v63[0] = 1107296256;
  v63[1] = (unint64_t)sub_10001FF18;
  v63[2] = (unint64_t)&unk_10011CB18;
  v43 = _Block_copy(&aBlock);
  v61 = _swiftEmptyArrayStorage;
  v44 = sub_10002A8E4();
  swift_retain();
  v45 = sub_10001BE7C(&qword_100128178);
  v46 = sub_10001FBB4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v45, v46, v59, v44);
  v47 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
  v48 = DispatchWorkItem.init(flags:block:)(v5, v43);
  swift_release();
  *(_QWORD *)&v54[a1] = v48;
  swift_retain();
  swift_release();
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v41, v48);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v42)(v41, v8);
}

uint64_t sub_10000A648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v8 = v7;
  swift_retain(v4);
  swift_unknownObjectRetain(a3);
  v5(v6, v8, a3);
  swift_release(v4);
  swift_bridgeObjectRelease(v8);
  return swift_unknownObjectRelease(a3);
}

uint64_t sub_10000A6BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;

  v6 = sub_10001BE7C(&qword_10012AD50);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Selector.description.getter("resetWithReply:");
  if (v9 == a1 && v10 == a2)
    return swift_bridgeObjectRelease(a2);
  v12 = v10;
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v9, v10, 0);
  result = swift_bridgeObjectRelease(v12);
  if ((v13 & 1) == 0)
  {
    v15 = type metadata accessor for TaskPriority(0);
    sub_100014360((uint64_t)v8, 1, 1, v15);
    v16 = (_QWORD *)swift_allocObject(&unk_10011D748, 40, 7);
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = a3;
    v17 = a3;
    sub_100029394((uint64_t)v8, (uint64_t)&unk_10012AD60, (uint64_t)v16);
    return swift_release();
  }
  return result;
}

uint64_t sub_10000A7E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001BE7C(&qword_10012AD50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10000A824()
{
  void (*v0)(uint64_t);
  uint64_t v1;

  sub_10001E014();
  sub_10000C030();
  v1 = sub_1000134B8();
  v0(v1);
  sub_100019B14();
}

void sub_10000A850(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t i;
  id v25;
  unint64_t v26;
  char v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  unint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  BOOL v43;
  unint64_t v44;
  void *v45;
  unint64_t v46;
  char v47;
  id v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  id v56;
  unint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  void *v63;
  unint64_t v64;
  char v65;
  id v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  id v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  id v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  _QWORD *v92;
  id v93;
  uint64_t v94;
  char v95;
  _QWORD *v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  id v115;
  id v116;
  int *v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  char v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t, uint64_t, uint64_t);
  uint64_t v138;
  id v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  id v143;
  _QWORD *v144;
  void *v145;
  id v146;
  uint64_t v147;
  id v148;
  id v149;
  id v150;
  int *v151;
  _QWORD *v152;
  uint64_t *v153;
  _QWORD *v154;
  id v155;
  _QWORD *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  id v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  uint64_t v172;
  unint64_t v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  id v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  uint64_t v185;
  _QWORD *v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  uint64_t v191;
  Swift::String v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  id v196;
  uint64_t v197;
  id v198;
  id v199;
  id v200;
  void *v201;
  uint64_t v202;
  id v203;
  uint64_t v204;
  uint64_t v205;
  id v206;
  void *v207;
  void *v208;
  uint64_t v209;
  id v210;
  uint64_t v211;
  void *v212;
  void *v213;
  id v214;
  id v215;
  id v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  id v222;
  id v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  id v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  unint64_t v237;
  char v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  id v252;
  uint64_t v253;
  id v254;
  id v255;
  id v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  id v262;
  uint64_t v263;
  void *v264;
  void *v265;
  id v266;
  id v267;
  id v268;
  id v269;
  int *v270;
  _QWORD *v271;
  uint64_t *v272;
  unint64_t v273;
  uint64_t *v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  id v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  id v294;
  id v295;
  unint64_t v296;
  _QWORD *v297;
  unint64_t v298;
  uint64_t v299;
  id v300;
  _QWORD *v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  id v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  char *v310;
  unint64_t v311;
  id v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  id v316;
  uint64_t v317;
  int *v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  id v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  id v327;
  unint64_t v328;
  id v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  id v333;
  id v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  id v341;
  uint64_t v342;
  uint64_t v343;
  void *v344;
  void *v345;
  void *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  void *v350;
  uint64_t v351;
  _QWORD *v352[2];
  _QWORD *v353;
  void *v354;
  uint64_t v355[14];

  v291 = a4;
  v342 = a2;
  v336 = a1;
  v7 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  __chkstk_darwin(v7);
  sub_1000192A0();
  v289 = v8;
  sub_10001F238();
  __chkstk_darwin(v9);
  v288 = (uint64_t)&v283 - v10;
  sub_10001F238();
  __chkstk_darwin(v11);
  v313 = (uint64_t)&v283 - v12;
  sub_10001F238();
  __chkstk_darwin(v13);
  v15 = (unint64_t)&v283 - v14;
  v16 = type metadata accessor for LNAppShortcutParameterRecord(0);
  v317 = *(_QWORD *)(v16 - 8);
  v318 = (int *)v16;
  __chkstk_darwin(v16);
  sub_1000192A0();
  v290 = v17;
  sub_10001F238();
  __chkstk_darwin(v18);
  v287 = (uint64_t)&v283 - v19;
  sub_10001F238();
  __chkstk_darwin(v20);
  v22 = (unint64_t)&v283 - v21;
  if (a3 >> 62)
    goto LABEL_164;
  v23 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v314 = v22;
    v315 = v15;
    v341 = (id)a5;
    if (v23)
    {
      v355[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_10001FA60(0, v23 & ~(v23 >> 63), 0);
      if ((v23 & 0x8000000000000000) == 0)
      {
        v340 = a3 & 0xC000000000000001;
        for (i = a3; ; a3 = i)
        {
          if (v340)
            v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
          else
            v25 = sub_1000137BC(a3);
          static String._unconditionallyBridgeFromObjectiveC(_:)(objc_msgSend(v25, "identifier"));
          sub_1000143E0();
          sub_100011064();
          if (v27)
          {
            v28 = sub_100013370(v26);
            sub_10001FA60(v28, v29, v30);
          }
          sub_10001F678();
        }
      }
      __break(1u);
      goto LABEL_168;
    }
    v15 = 0;
    v297 = sub_10000C154((uint64_t)_swiftEmptyArrayStorage, &qword_100128A88, (void (*)(void))sub_1000320B0, &qword_1001281B0);
    if (a5 >> 62)
    {
      sub_1000100E0();
      v31 = sub_10001E8F8();
      swift_bridgeObjectRelease(a5);
    }
    else
    {
      v31 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v31)
      break;
    v301 = sub_10000C154((uint64_t)_swiftEmptyArrayStorage, &qword_100128A80, (void (*)(void))sub_1000320A4, &qword_1001282D0);
    v338 = 0;
    v354 = &_swiftEmptySetSingleton;
    if (v291 >> 62)
    {
      swift_bridgeObjectRetain(v291);
      v39 = sub_10001E8F8();
    }
    else
    {
      v38 = *(_QWORD *)((v291 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v291);
      v39 = v38;
    }
    if (!v39)
    {
LABEL_157:
      swift_bridgeObjectRelease(v297);
      swift_bridgeObjectRelease(v291);
      swift_bridgeObjectRelease(v301);
      return;
    }
    v40 = 0;
    v293 = v291 & 0xC000000000000001;
    v285 = v291 & 0xFFFFFFFFFFFFFF8;
    v284 = v291 + 32;
    v295 = (id)LNValueTypeSpecificMetadataKeyLinkEnumerationSupportedValues;
    v306 = (id)LNValueTypeSpecificMetadataKeyBoolTrueDisplayName;
    v294 = (id)LNValueTypeSpecificMetadataKeyBoolFalseDisplayName;
    v310 = (char *)&type metadata for Any + 8;
    a3 = (unint64_t)_swiftEmptyArrayStorage;
    v292 = v39;
    while (1)
    {
      if (v293)
      {
        v41 = v40;
        v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v291);
      }
      else
      {
        if (v40 >= *(_QWORD *)(v285 + 16))
          goto LABEL_163;
        v41 = v40;
        v42 = *(id *)(v284 + 8 * v40);
      }
      v43 = __OFADD__(v41, 1);
      v44 = v41 + 1;
      if (v43)
        goto LABEL_162;
      v296 = v44;
      v45 = v42;
      v22 = (unint64_t)objc_msgSend(v42, "actionIdentifier");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      sub_10001679C();
      if (!v297[2])
      {

LABEL_152:
        sub_1000100D0();
        goto LABEL_153;
      }
      v300 = v45;
      v46 = sub_100013E3C();
      if ((v47 & 1) == 0)
      {

        goto LABEL_152;
      }
      v48 = sub_1000560A4(v46);
      v49 = sub_1000100D0();
      v286 = v48;
      v50 = sub_10000FE4C(v49, "parameters");
      v51 = sub_1000058BC();
      sub_10000795C(v51, &qword_1001286C8, LNActionParameterMetadata_ptr);
      v15 = sub_10001F4B4();

      v52 = v15;
      v309 = v15;
      if (!(v15 >> 62))
      {
        v53 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v53)
          break;
        goto LABEL_149;
      }
      swift_bridgeObjectRetain(v15);
      v53 = sub_10001E8F8();
      swift_bridgeObjectRelease(v309);
      v52 = v309;
      if (v53)
        break;
LABEL_149:

      sub_1000059A8();
LABEL_153:
      v40 = v296;
      if (v296 == v292)
        goto LABEL_157;
    }
    v54 = 0;
    v307 = v53;
    v308 = v52 & 0xC000000000000001;
    v298 = v52 + 32;
    v299 = v52 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v308)
      {
        v55 = v54;
        v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v54, v52);
      }
      else
      {
        if (v54 >= *(_QWORD *)(v299 + 16))
          goto LABEL_160;
        v55 = v54;
        v56 = *(id *)(v298 + 8 * v54);
      }
      v43 = __OFADD__(v55, 1);
      v57 = v55 + 1;
      if (v43)
      {
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
        goto LABEL_161;
      }
      v311 = v57;
      v58 = v56;
      v59 = sub_100004ED8(v56);
      v324 = v59;
      v325 = v60;
      if (!v60)
        goto LABEL_99;
      v353 = &_swiftEmptyDictionarySingleton;
      v312 = v58;
      v61 = sub_10000FE4C(v59, "valueType");
      v62 = objc_opt_self(LNLinkEnumerationValueType);
      v63 = (void *)swift_dynamicCastObjCClass(v61, v62);
      if (!v63)
      {

LABEL_50:
        v58 = v312;
        v22 = (unint64_t)sub_10000FE4C(v69, "valueType");
        v15 = (unint64_t)&_ss15ContiguousArrayV12_endMutationyyFyXl_Ts5_ptr;
        v70 = objc_opt_self(LNPrimitiveValueType);
        v71 = swift_dynamicCastObjCClass(v22, v70);
        if (!v71)
        {

          sub_1000163D4();
LABEL_99:

          goto LABEL_148;
        }
        v72 = v71;
        sub_10000795C(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
        v15 = (unint64_t)objc_msgSend((id)objc_opt_self(LNPrimitiveValueType), "BOOLValueType");
        v73 = static NSObject.== infix(_:_:)(v72, v15);

        if ((v73 & 1) == 0)
        {
          sub_1000163D4();

          sub_10001F15C();
          goto LABEL_148;
        }
        v341 = (id)v22;
        v74 = objc_msgSend(v300, "phraseTemplates");
        v75 = sub_1000058BC();
        v340 = sub_10000795C(v75, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
        v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v73);

        sub_1000107B8();
        v77 = v76;
        v338 = v15;
        sub_1000101FC();
        v78 = *(_QWORD *)(v77 + 16);
        v339 = v77;
        if (!v78)
        {
LABEL_101:

          sub_10001F15C();
          swift_bridgeObjectRelease(v339);
          sub_1000163D4();
LABEL_147:
          swift_bridgeObjectRelease(v353);
          goto LABEL_148;
        }
        v335 = v72;
        v79 = (unint64_t *)(v77 + 40);
        a5 = v340;
        while (2)
        {
          v80 = *(v79 - 1);
          v22 = *v79;
          v343 = v80;
          v344 = (void *)v22;
          sub_10001F3E4();
          sub_10000BFF4();
          sub_1000190D0();
          sub_10001A844(125);
          v81 = sub_10001A980();
          v83 = sub_10001B690((uint64_t)v352, (uint64_t)&type metadata for String, v82, v81);
          sub_1000100D0();
          if ((v83 & 1) != 0)
          {
            v84 = objc_msgSend(v312, "typeSpecificMetadata");
            sub_10001B5A8();
            v86 = v85;
            v87 = sub_100055AC0();
            static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v15, v86, v310, v87);
            sub_10001DFDC();
            if (*(_QWORD *)(v86 + 16))
            {
              v88 = v306;
              v89 = sub_10001AA30();
              if ((v90 & 1) != 0)
                sub_100017E68(v89);
              else
                sub_100056098();

              if (v345)
              {
                if ((sub_100017A48((uint64_t)&type metadata for Any) & 1) != 0)
                {
                  v92 = v352[0];
                  if (*(_QWORD *)(v86 + 16))
                  {
                    v93 = v294;
                    v94 = sub_10001AA30();
                    if ((v95 & 1) != 0)
                      sub_100017E68(v94);
                    else
                      sub_100056098();

                  }
                  else
                  {
                    sub_100056098();
                  }
                  sub_1000059A8();
                  if (v345)
                  {
                    if ((sub_100017A48((uint64_t)&type metadata for Any) & 1) != 0)
                    {
                      v337 = a3;
                      v330 = v352[0];
                      v96 = v353;
                      if (v353[2] && (v97 = sub_100016064(1702195828), (v98 & 1) != 0))
                      {
                        v99 = v97;
                        v100 = v96[7];
                        v101 = (_QWORD *)sub_10001AE20();
                        v102 = *(v101 - 1);
                        v103 = v100 + *(_QWORD *)(v102 + 72) * v99;
                        v104 = v288;
                        sub_100018A00(v288, v103, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 16));
                        sub_100017C88();
                        if (!v105)
                        {
                          v106 = v287;
                          sub_100018A00(v287, v104, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 32));
                          goto LABEL_85;
                        }
                      }
                      else
                      {
                        v101 = (_QWORD *)sub_10001AE20();
                        v104 = v288;
                        sub_10001C000(v288);
                      }
                      sub_1000131A8(v104, (uint64_t *)&unk_1001281C0);
                      v106 = v287;
                      UUID.init()();
                      sub_10001AE20();
                      v107 = sub_10001F244();
                      sub_100018A00(v107, v106, v108);
                      v109 = sub_100013450();
                      sub_100054000(v109, 1702195828, 0xE400000000000000);
LABEL_85:
                      sub_10001876C();
                      sub_10000BFF4();
                      v110 = v92;
                      v111 = sub_10000EB00((uint64_t)objc_msgSend(v110, "key"));
                      v331 = v112;
                      v332 = v111;

                      v345 = &type metadata for Bool;
                      LOBYTE(v343) = 1;
                      v113 = objc_allocWithZone((Class)LNValue);
                      v114 = v325;
                      swift_bridgeObjectRetain(v325);
                      v333 = v341;
                      sub_10000EB08();
                      v115 = objc_allocWithZone((Class)LNProperty);
                      v116 = sub_10001A074(v324, v114);
                      v117 = v318;
                      v118 = (_QWORD *)(v106 + v318[5]);
                      *v118 = v336;
                      v118[1] = v104;
                      v119 = (uint64_t *)(v106 + v117[6]);
                      *v119 = v80;
                      v119[1] = v22;
                      v120 = v117[7];
                      v334 = v110;
                      *(_QWORD *)(v106 + v120) = v110;
                      v121 = (uint64_t *)(v106 + v117[8]);
                      v122 = v331;
                      *v121 = v332;
                      v121[1] = v122;
                      *(_QWORD *)(v106 + v117[9]) = v116;
                      *(_QWORD *)(v106 + v117[10]) = 0;
                      v123 = (_QWORD *)(v106 + v117[11]);
                      *v123 = 0;
                      v123[1] = 0;
                      v124 = v337;
                      if ((swift_isUniquelyReferenced_nonNull_native(v337) & 1) == 0)
                      {
                        sub_10001E084();
                        v124 = v158;
                      }
                      v126 = *(_QWORD *)(v124 + 16);
                      v125 = *(_QWORD *)(v124 + 24);
                      if (v126 >= v125 >> 1)
                      {
                        sub_100019ADC(v125);
                        sub_10001E084();
                        v124 = v159;
                      }
                      *(_QWORD *)(v124 + 16) = v126 + 1;
                      sub_1000073B8();
                      v337 = v124;
                      v332 = v127;
                      v331 = *(_QWORD *)(v128 + 72);
                      sub_10001DF5C(v106, v124 + v127 + v331 * v126);
                      v129 = v353;
                      if (v353[2] && (v130 = sub_100016064(0x65736C6166), (v131 & 1) != 0))
                      {
                        v132 = v130;
                        v133 = v129[7];
                        v134 = (_QWORD *)sub_10001AE20();
                        v135 = *(v134 - 1);
                        v136 = v133 + *(_QWORD *)(v135 + 72) * v132;
                        v15 = v289;
                        sub_100018A00(v289, v136, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 16));
                        sub_100017C88();
                        if (!v105)
                        {
                          v137 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 32);
                          v138 = v290;
                          sub_100018A00(v290, v15, v137);
                          v139 = v330;
                          goto LABEL_95;
                        }
                      }
                      else
                      {
                        v134 = (_QWORD *)sub_10001AE20();
                        v15 = v289;
                        sub_10001C000(v289);
                      }
                      v139 = v330;
                      sub_1000131A8(v15, (uint64_t *)&unk_1001281C0);
                      v138 = v290;
                      UUID.init()();
                      sub_10001AE20();
                      v140 = sub_10001F244();
                      sub_100018A00(v140, v138, v141);
                      v142 = sub_100013450();
                      sub_100054000(v142, 0x65736C6166, 0xE500000000000000);
LABEL_95:
                      sub_10001876C();
                      v143 = v139;
                      v144 = (_QWORD *)sub_10000EB00((uint64_t)objc_msgSend(v143, "key"));
                      v329 = v145;
                      v330 = v144;

                      v345 = &type metadata for Bool;
                      LOBYTE(v343) = 0;
                      v146 = objc_allocWithZone((Class)LNValue);
                      v147 = v325;
                      sub_100016794();
                      v148 = v333;
                      sub_10000EB08();
                      v149 = objc_allocWithZone((Class)LNProperty);
                      v150 = sub_10001A074(v324, v147);
                      v151 = v318;
                      v152 = (_QWORD *)(v138 + v318[5]);
                      *v152 = v336;
                      v152[1] = v15;
                      v153 = (uint64_t *)(v138 + v151[6]);
                      *v153 = v80;
                      v153[1] = v22;
                      *(_QWORD *)(v138 + v151[7]) = v143;
                      v154 = (_QWORD *)(v138 + v151[8]);
                      v155 = v329;
                      *v154 = v330;
                      v154[1] = v155;
                      *(_QWORD *)(v138 + v151[9]) = v150;
                      *(_QWORD *)(v138 + v151[10]) = 0;
                      v156 = (_QWORD *)(v138 + v151[11]);
                      *v156 = 0;
                      v156[1] = 0;
                      v22 = *(_QWORD *)(v337 + 16);
                      v157 = *(_QWORD *)(v337 + 24);
                      if (v22 >= v157 >> 1)
                      {
                        sub_100019ADC(v157);
                        sub_10001E084();
                        v138 = v290;
                        v337 = v160;
                      }
                      a3 = v337;
                      *(_QWORD *)(v337 + 16) = v22 + 1;
                      sub_10001DF5C(v138, a3 + v332 + v22 * v331);

                      a5 = v340;
                    }
                    else
                    {
                      sub_1000101FC();

                    }
LABEL_69:
                    v79 += 2;
                    if (!--v78)
                      goto LABEL_101;
                    continue;
                  }
                  sub_1000101FC();

LABEL_68:
                  sub_1000131A8((uint64_t)&v343, &qword_100128A40);
                  goto LABEL_69;
                }
                sub_1000101FC();
                v91 = v86;
LABEL_59:
                swift_bridgeObjectRelease(v91);
                goto LABEL_69;
              }
            }
            else
            {
              sub_100056098();
            }
            sub_1000101FC();
            sub_1000059A8();
            goto LABEL_68;
          }
          break;
        }
        v91 = v22;
        goto LABEL_59;
      }
      a5 = (unint64_t)v63;
      v22 = (unint64_t)objc_msgSend(v63, "enumerationIdentifier");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      sub_10001679C();
      if (!v301[2] || (v64 = sub_100013E3C(), (v65 & 1) == 0))
      {

        v69 = sub_1000100D0();
        goto LABEL_50;
      }
      v66 = sub_1000560A4(v64);
      v67 = sub_1000100D0();
      v68 = v312;
      if (!sub_10000FE4C(v67, "dynamicOptionsSupport"))
        break;
      sub_1000163D4();

LABEL_148:
      v52 = v309;
      v54 = v311;
      if (v311 == v307)
        goto LABEL_149;
    }
    v161 = objc_msgSend(v300, "phraseTemplates");
    v162 = sub_1000058BC();
    sub_10000795C(v162, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
    sub_10001F4B4();

    sub_1000107B8();
    v164 = v163;
    v338 = v15;
    sub_1000101FC();
    v305 = *(_QWORD *)(v164 + 16);
    if (!v305)
    {
      v22 = v164;
LABEL_146:
      sub_10001F15C();

      sub_1000101FC();
      sub_1000163D4();

      goto LABEL_147;
    }
    v165 = 0;
    v304 = v164 + 32;
    v322 = v61;
    v335 = a5;
    v22 = v164;
    v302 = v164;
    v316 = v66;
    while (1)
    {
      if (v165 >= *(_QWORD *)(v22 + 16))
        goto LABEL_159;
      v166 = (uint64_t *)(v304 + 16 * v165);
      a5 = v166[1];
      v323 = *v166;
      v343 = v323;
      v344 = (void *)a5;
      sub_10001F3E4();
      sub_1000100E0();
      sub_1000190D0();
      sub_10001A844(125);
      v167 = sub_10001A980();
      v169 = sub_10001B690((uint64_t)v352, (uint64_t)&type metadata for String, v168, v167);
      v170 = sub_1000100D0();
      if ((v169 & 1) != 0)
        break;
      v173 = a5;
LABEL_142:
      ++v165;
      swift_bridgeObjectRelease(v173);
      if (v165 == v305)
        goto LABEL_146;
    }
    v171 = sub_100013328(v170, "cases");
    v172 = sub_1000058BC();
    sub_10000795C(v172, &qword_100129868, LNEnumCaseMetadata_ptr);
    v173 = sub_10001F4B4();

    v174 = objc_msgSend(v312, "typeSpecificMetadata");
    sub_10001B5A8();
    v176 = v175;
    v177 = sub_100055AC0();
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v15, v176, (char *)&type metadata for Any + 8, v177);
    sub_10001DFDC();
    if (*(_QWORD *)(v176 + 16))
    {
      v178 = v295;
      v179 = sub_10001AA30();
      if ((v180 & 1) != 0)
        sub_100017E68(v179);
      else
        sub_100056098();

    }
    else
    {
      sub_100056098();
    }
    sub_1000059A8();
    if (v345)
    {
      v181 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
      if ((swift_dynamicCast(v352, &v343, (char *)&type metadata for Any + 8, v181, 6) & 1) != 0)
      {
        v15 = v338;
        v173 = (unint64_t)sub_100053D3C(v173, v352[0]);
        v338 = v15;
      }
    }
    else
    {
      sub_1000131A8((uint64_t)&v343, &qword_100128A40);
    }
    if (v173 >> 62)
    {
      swift_bridgeObjectRetain(v173);
      v182 = sub_10001E8F8();
      swift_bridgeObjectRelease(v173);
    }
    else
    {
      v182 = *(_QWORD *)((v173 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v303 = v165;
    v339 = a5;
    if (!v182)
    {
LABEL_141:
      swift_bridgeObjectRelease(v339);
      v61 = v322;
      v22 = v302;
      v165 = v303;
      goto LABEL_142;
    }
    if (v182 >= 1)
    {
      v183 = 0;
      v320 = v173;
      v321 = v173 & 0xC000000000000001;
      v319 = v182;
      while (1)
      {
        v337 = a3;
        v326 = v183;
        if (v321)
          v184 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v183, v173);
        else
          v184 = sub_1000137BC(v173 + 8 * v183);
        v328 = (unint64_t)v184;
        sub_100055A50(objc_msgSend(v184, "displayRepresentation"));
        if (v185)
          v186 = (_QWORD *)v185;
        else
          v186 = _swiftEmptyArrayStorage;
        v187 = sub_100013328(v185, "identifier");
        v188 = sub_10000EB00((uint64_t)v187);
        sub_100019410();
        v343 = v188;
        v344 = (void *)v22;
        sub_10001A844(46);
        v190 = sub_10001A454(v189, "identifier");
        v191 = sub_10000EB00((uint64_t)v190);
        sub_100019410();
        v192._countAndFlagsBits = v191;
        v192._object = (void *)v22;
        String.append(_:)(v192);
        v193 = sub_1000101FC();
        v195 = v343;
        v194 = v344;
        v196 = sub_10001A454(v193, "displayRepresentation");
        v333 = objc_msgSend(v196, "title");

        v198 = sub_10001A454(v197, "displayRepresentation");
        v199 = objc_msgSend(v198, "title");

        v200 = objc_msgSend(v199, "key");
        sub_10001DFDC();
        v334 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
        v341 = v201;

        v203 = sub_100013328(v202, "identifier");
        v332 = sub_10000EB00((uint64_t)v203);
        v340 = v204;

        v206 = sub_100013328(v205, "identifier");
        v331 = sub_10000EB00((uint64_t)v206);
        v208 = v207;

        v210 = sub_10001A454(v209, "identifier");
        v211 = sub_10000EB00((uint64_t)v210);
        v213 = v212;

        v345 = &type metadata for String;
        v343 = v211;
        v344 = v213;
        v329 = v322;
        v214 = sub_10001A454((uint64_t)v329, "displayRepresentation");
        v215 = objc_allocWithZone((Class)LNValue);
        v216 = sub_10001590C();
        sub_10000BFF4();
        v217 = v342;
        swift_bridgeObjectRetain(v342);
        v218 = v336;
        v219 = v338;
        sub_1000542A0((unint64_t)v186, v195, (uint64_t)v194, v336, v217);
        v221 = v220;
        v338 = v219;
        sub_1000101FC();
        v355[0] = v195;
        v355[1] = (uint64_t)v194;
        v355[2] = v218;
        v355[3] = v217;
        v222 = v333;
        v355[4] = (uint64_t)v333;
        v355[5] = (uint64_t)v334;
        v355[6] = (uint64_t)v341;
        v355[7] = v332;
        v355[8] = v340;
        v355[9] = v331;
        v355[10] = (uint64_t)v208;
        v355[11] = (uint64_t)v216;
        v355[12] = v221;
        swift_bridgeObjectRetain_n(v217, 2);
        v334 = v194;
        swift_bridgeObjectRetain(v194);
        v223 = v222;
        sub_10000BFF4();
        sub_10000C020();
        v333 = v208;
        swift_bridgeObjectRetain(v208);
        v330 = v216;
        v332 = v221;
        v224 = v221;
        v225 = v328;
        swift_bridgeObjectRetain(v224);
        sub_10003311C(&v343, v355);
        v226 = (uint64_t)v345;
        v227 = v346;
        v228 = v347;
        v229 = v348;
        v230 = v349;
        v231 = v350;
        swift_bridgeObjectRelease(v351);

        swift_bridgeObjectRelease(v230);
        swift_bridgeObjectRelease(v229);
        swift_bridgeObjectRelease(v228);

        sub_1000101FC();
        v232 = sub_1000059A8();
        v233 = sub_10001A454(v232, "identifier");
        v234 = sub_10000EB00((uint64_t)v233);
        sub_100019410();
        v235 = v353;
        v236 = v353[2];
        v331 = (uint64_t)v223;
        if (v236)
        {
          sub_10000BFF4();
          v237 = sub_100016064(v234);
          if ((v238 & 1) != 0)
          {
            v239 = v237;
            v240 = v235[7];
            v241 = sub_10001AE20();
            v242 = *(_QWORD *)(v241 - 8);
            v243 = v240 + *(_QWORD *)(v242 + 72) * v239;
            v244 = v315;
            sub_100018A00(v315, v243, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v242 + 16));
            v245 = v244;
            v246 = 0;
          }
          else
          {
            v241 = sub_10001AE20();
            v244 = v315;
            v245 = v315;
            v246 = 1;
          }
          sub_100014360(v245, v246, 1, v241);
          v247 = v314;
          sub_1000101FC();
          sub_10001AE20();
          if (sub_10001C93C(v244, 1, v241) != 1)
          {
            sub_100018A00(v247, v244, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v241 - 8) + 32));
            sub_1000101FC();
            goto LABEL_136;
          }
        }
        else
        {
          v241 = sub_10001AE20();
          v244 = v315;
          sub_10001C000(v315);
          v247 = v314;
        }
        sub_1000131A8(v244, (uint64_t *)&unk_1001281C0);
        UUID.init()();
        sub_10001AE20();
        v248 = v313;
        sub_100018A00(v313, v247, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v241 - 8) + 16));
        sub_100014360(v248, 0, 1, v241);
        sub_100054000(v248, v234, v226);
LABEL_136:
        v249 = v247;
        swift_bridgeObjectRetain(v339);
        v250 = v342;
        swift_bridgeObjectRetain(v342);
        v252 = sub_10001A454(v251, "displayRepresentation");
        v327 = objc_msgSend(v252, "title");

        v254 = sub_10001A454(v253, "displayRepresentation");
        v255 = objc_msgSend(v254, "title");

        v256 = objc_msgSend(v255, "key");
        v257 = static String._unconditionallyBridgeFromObjectiveC(_:)(v256);
        v259 = v258;

        v260 = v325;
        v261 = sub_10000BFF4();
        v262 = sub_10001A454(v261, "identifier");
        v263 = sub_10000EB00((uint64_t)v262);
        v265 = v264;

        v345 = &type metadata for String;
        v343 = v263;
        v344 = v265;
        a5 = v225;
        v266 = sub_10001A454((uint64_t)v329, "displayRepresentation");
        v267 = objc_allocWithZone((Class)LNValue);
        sub_10001590C();
        v268 = objc_allocWithZone((Class)LNProperty);
        v269 = sub_10001A074(v324, v260);
        v270 = v318;
        v271 = (_QWORD *)(v249 + v318[5]);
        *v271 = v336;
        v271[1] = v250;
        v272 = (uint64_t *)(v249 + v270[6]);
        v273 = v339;
        *v272 = v323;
        v272[1] = v273;
        *(_QWORD *)(v249 + v270[7]) = v327;
        v274 = (uint64_t *)(v249 + v270[8]);
        *v274 = v257;
        v274[1] = v259;
        *(_QWORD *)(v249 + v270[9]) = v269;
        *(_QWORD *)(v249 + v270[10]) = 0;
        v275 = (_QWORD *)(v249 + v270[11]);
        *v275 = 0;
        v275[1] = 0;
        a3 = v337;
        v276 = v249;
        if ((swift_isUniquelyReferenced_nonNull_native(v337) & 1) == 0)
        {
          sub_10001E084();
          a3 = v281;
        }
        v66 = v316;
        v15 = v319;
        v173 = v320;
        v277 = v326;
        v22 = *(_QWORD *)(a3 + 16);
        v278 = *(_QWORD *)(a3 + 24);
        if (v22 >= v278 >> 1)
        {
          sub_100019ADC(v278);
          sub_10001E084();
          a3 = v282;
        }
        v183 = v277 + 1;
        *(_QWORD *)(a3 + 16) = v22 + 1;
        sub_1000073B8();
        sub_10001DF5C(v276, a3 + v279 + *(_QWORD *)(v280 + 72) * v22);

        swift_bridgeObjectRelease(v332);
        swift_bridgeObjectRelease(v333);
        swift_bridgeObjectRelease(v340);
        swift_bridgeObjectRelease(v341);

        swift_bridgeObjectRelease(v342);
        swift_bridgeObjectRelease(v334);
        if (v15 == v183)
          goto LABEL_141;
      }
    }
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    sub_100016794();
    v23 = sub_10001E8F8();
    swift_bridgeObjectRelease(a3);
  }
  v355[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000526A0(0, v31 & ~(v31 >> 63), 0);
  if ((v31 & 0x8000000000000000) == 0)
  {
    v340 = 0;
    v32 = a5 & 0xC000000000000001;
    while (1)
    {
      if (v32)
        v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a5);
      else
        v33 = sub_1000137BC(a5);
      static String._unconditionallyBridgeFromObjectiveC(_:)(objc_msgSend(v33, "identifier"));
      sub_1000143E0();
      sub_100011064();
      if (v27)
      {
        v35 = sub_100013370(v34);
        sub_1000526A0(v35, v36, v37);
      }
      sub_10001F678();
      a5 = (unint64_t)v341;
    }
  }
LABEL_168:
  __break(1u);
}

uint64_t sub_10000BFD4()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10000BFDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10000BFF4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10000BFFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, v1, v3, v2);
}

uint64_t sub_10000C020()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10000C028()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000C030()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10000C050()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10001EA88(v0, v1);
}

uint64_t sub_10000C05C()
{
  return type metadata accessor for Logger(0);
}

uint64_t sub_10000C064()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000C078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014360(a1, a2, a3, a4);
}

uint64_t sub_10000C084@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return QueryType.filter(_:)(v1, v2, v3, v4, v5, a1);
}

uint64_t sub_10000C09C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10000C0B4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10000C0C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_retain(*(_QWORD *)(v1 + a1));
}

id sub_10000C0D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v4;

  return sub_100026158(a1, a2, v4, a4);
}

BOOL sub_10000C0D8@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10000C0E4()
{
  return swift_willThrow();
}

uint64_t sub_10000C10C()
{
  return specialized ContiguousArray._endMutation()();
}

void sub_10000C114()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x65756C6176;
  v0._object = (void *)0xE500000000000000;
  String.append(_:)(v0);
}

double sub_10000C128()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 - 128) = 0;
  result = 0.0;
  *(_OWORD *)(v0 - 160) = 0u;
  *(_OWORD *)(v0 - 144) = 0u;
  return result;
}

void sub_10000C138(uint64_t a1)
{
  uint64_t v1;

  Statement.scalar(_:)(a1, v1);
}

_QWORD *sub_10000C144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *(_QWORD *)(a7 + 8);
  *(_QWORD *)(v8 - 96) = v7;
  *(_QWORD *)(v8 - 88) = v9;
  return sub_10001795C((_QWORD *)(v8 - 120));
}

_QWORD *sub_10000C154(uint64_t a1, uint64_t *a2, void (*a3)(void), uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v12;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    sub_10001BE7C(a2);
    v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
  }
  else
  {
    v9 = &_swiftEmptyDictionarySingleton;
  }
  v12 = v9;
  sub_10000C1F4(a1, 1, &v12, a3, a4);
  v10 = v12;
  if (v4)
    swift_release();
  return v10;
}

uint64_t sub_10000C1F4(uint64_t a1, char a2, _QWORD *a3, void (*a4)(void), uint64_t *a5)
{
  uint64_t v6;
  void **i;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  id v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    return sub_1000101FC();
  sub_10000BFF4();
  for (i = (void **)(a1 + 48); ; i += 3)
  {
    v10 = (uint64_t)*(i - 2);
    v9 = (uint64_t)*(i - 1);
    v11 = *i;
    v12 = (_QWORD *)*a3;
    sub_100016794();
    v13 = v11;
    v15 = sub_100016310();
    v16 = v12[2];
    v17 = (v14 & 1) == 0;
    if (__OFADD__(v16, v17))
      break;
    v18 = v14;
    if (v12[3] >= v16 + v17)
    {
      if ((a2 & 1) == 0)
      {
        sub_10001BE7C(a5);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      a4();
      v19 = sub_100016310();
      if ((v18 & 1) != (v20 & 1))
        goto LABEL_18;
      v15 = v19;
    }
    v21 = (_QWORD *)*a3;
    if ((v18 & 1) != 0)
    {
      v22 = *(id *)(v21[7] + 8 * v15);
      swift_bridgeObjectRelease(v9);

      v23 = v21[7];
      *(_QWORD *)(v23 + 8 * v15) = v22;
    }
    else
    {
      v21[(v15 >> 6) + 8] |= 1 << v15;
      v24 = (_QWORD *)(v21[6] + 16 * v15);
      *v24 = v10;
      v24[1] = v9;
      *(_QWORD *)(v21[7] + 8 * v15) = v13;
      v25 = v21[2];
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        goto LABEL_17;
      v21[2] = v27;
    }
    a2 = 1;
    if (!--v6)
    {
      sub_1000101FC();
      return sub_1000101FC();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10000C3AC()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = (void *)v0[39];
  v5 = v0[24];
  swift_release();

  sub_1000117B4();
  sub_100020408(v5);
  sub_100072254();
  if (qword_100127E70 != -1)
    swift_once(&qword_100127E70, sub_100090544);
  v6 = v0[42];
  v7 = (void *)v0[21];
  v8 = sub_10000C05C();
  sub_100012A40(v8, (uint64_t)qword_10012D0C8);
  v9 = v7;
  swift_errorRetain(v6);
  v10 = v9;
  swift_errorRetain(v6);
  sub_10000DDEC();
  v11 = sub_10000BFD4();
  v12 = sub_1000101D0(v11);
  v13 = v0[42];
  if (v12)
  {
    v14 = v0[26];
    v23 = v0[25];
    v15 = (void *)v0[21];
    v16 = sub_100011780(22);
    v24 = (_QWORD *)sub_100011780(8);
    v25 = sub_100011780(32);
    v26 = v25;
    *(_DWORD *)v16 = 136315394;
    swift_bridgeObjectRetain(v14);
    v0[16] = sub_10000FBEC(v23, v14, &v26);
    v1 = v0 + 17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17);
    swift_bridgeObjectRelease(v14);

    *(_WORD *)(v16 + 12) = 2112;
    v2 = (void *)(v16 + 14);
    swift_errorRetain(v13);
    v3 = (void *)_swift_stdlib_bridgeErrorToNSError(v13);
    v0[17] = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18);
    *v24 = v3;
    sub_100005A04();
    sub_100005A04();
    _os_log_impl((void *)&_mh_execute_header, v6, (os_log_type_t)v4, "Error donating App Shortcuts to Siri for %s: %@", (uint8_t *)v16, 0x16u);
    sub_10001BE7C(&qword_100128160);
    sub_100013320((uint64_t)v24);
    sub_1000133FC((uint64_t)v24);
    v4 = (void *)v25;
    sub_100013320(v25);
    sub_1000133FC(v25);
    sub_1000133FC(v16);

    sub_100005A04();
  }
  else
  {
    v17 = (void *)v0[21];
    sub_100005A04();

    sub_100005A04();
    sub_100005A04();

  }
  if (qword_100127CF0 != -1)
    swift_once(&qword_100127CF0, sub_100050AA8);
  sub_10001F338();
  v18 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  v19 = sub_100072040(v18);
  *(_OWORD *)(v19 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v19 + 32) = v1;
  *(_QWORD *)(v19 + 40) = v4;
  sub_1000101EC((uint64_t)v4);
  sub_1000720FC();
  sub_100072128();
  sub_100071FCC(v20);
  sub_10000C028();
  sub_1000059C4();
  sub_10001EE50();

  sub_100010270();
  sub_100005878();
  v21 = (uint64_t (*)(void))sub_1000121E0();
  return v21();
}

unint64_t sub_10000C684@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  unint64_t v6;

  result = (unint64_t)Statement.failableNext()();
  if (v5)
  {
    result = swift_unexpectedError(v5, "SQLite/Statement.swift", 22, 1, 211);
    __break(1u);
  }
  else
  {
    v6 = result;
    if (result)
      result = swift_bridgeObjectRetain(a1);
    else
      a1 = 0;
    *a2 = a1;
    a2[1] = v6;
  }
  return result;
}

void RowIterator.compactMap<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, unint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, unint64_t);
  uint64_t v28;

  sub_10000C038();
  v1 = v0;
  v27 = v2;
  v28 = v3;
  v4 = type metadata accessor for Optional(0, v0);
  v25 = *(_QWORD *)(v4 - 8);
  v26 = v4;
  sub_10001907C();
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v23 - v7;
  v23 = *(_QWORD *)(v1 - 8);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v23 - v12;
  Array.init()(v1);
  v14 = (unint64_t)Statement.failableNext()();
  v16 = v15;
  if (v15)
  {
LABEL_2:
    sub_1000059C4();
  }
  else
  {
    v17 = v14;
    v24 = v11;
    v18 = v23;
    while (v17)
    {
      v19 = sub_10000EC68();
      v27(v19, v17);
      if (v16)
      {
        sub_10000C028();
        sub_1000117B4();
        goto LABEL_2;
      }
      sub_10000C028();
      sub_1000117B4();
      if (sub_10001C93C((uint64_t)v8, 1, v1) == 1)
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v26);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v13, v8, v1);
        v20 = v24;
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v24, v13, v1);
        v21 = type metadata accessor for Array(0, v1);
        Array.append(_:)(v20, v21);
        (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v1);
      }
      v17 = (unint64_t)Statement.failableNext()();
      v16 = v22;
      if (v22)
        goto LABEL_2;
    }
  }
  sub_1000117E8();
}

Swift::OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Statement.failableNext()()
{
  uint64_t v0;
  Swift::Bool v1;
  BOOL v2;
  void *v3;
  sqlite3_stmt *v4;
  uint64_t v5;
  Swift::OpaquePointer_optional result;

  sub_1000179D8();
  v2 = sub_100016488();
  v3 = 0;
  if (!v0 && v2)
  {
    v4 = (sqlite3_stmt *)Statement.row.getter(0);
    v3 = (void *)sub_100011238(v4, v5);
  }
  result.value._rawValue = v3;
  result.is_nil = v1;
  return result;
}

BOOL sub_10000C918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  id v11;
  uint64_t v13;
  char v14;
  _BOOL8 v15;

  sub_10001D33C();
  if (qword_10012BF88 != -1)
    swift_once(&qword_10012BF88, sub_1000E3DF4);
  static OS_dispatch_queue.getSpecific<A>(key:)(&v13);
  v4 = v13;
  v5 = v14;
  v6 = sub_10001D378();
  if ((v5 & 1) != 0 || v4 != v6)
  {
    v11 = *(id *)(a1 + 104);
    OS_dispatch_queue.sync<A>(execute:)(&v15, sub_10000833C, a2);
    sub_10001B708();

    if (!v11)
      return v15;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 24);
    swift_beginAccess(a2 + 16, &v13, 0, 0);
    v8 = sqlite3_step(*(sqlite3_stmt **)(a2 + 16));
    v9 = v8;
    sub_10001D77C(v8, 0);
    sub_10001B708();
    if (!v7)
      return v9 == 100;
  }
  return v10;
}

__n128 initializeWithTake for AppShortcutDonator(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t Statement.row.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[7];
  if (v2)
    return v2;
  result = sub_10001B010(a1);
  v2 = v1[2];
  if (v2)
  {
    v4 = sub_1000179D8();
    Statement.columnCount.getter(v4);
    v6 = v5;
    swift_release();
    v1[7] = v2;
    v1[8] = v6;
    return v2;
  }
  __break(1u);
  return result;
}

_QWORD *initializeWithCopy for LNAppShortcutSpanRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v6 = (void *)a2[4];
  v5 = a2[5];
  a1[4] = v6;
  a1[5] = v5;
  v8 = a2[6];
  v7 = a2[7];
  a1[6] = v8;
  a1[7] = v7;
  v10 = a2[8];
  v9 = a2[9];
  a1[8] = v10;
  a1[9] = v9;
  v11 = a2[10];
  v12 = (void *)a2[11];
  a1[10] = v11;
  a1[11] = v12;
  v13 = a2[12];
  a1[12] = v13;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v14 = v6;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  v15 = v12;
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t destroy for LNAppShortcutSpanRecord(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
}

SQLite::Delete __swiftcall QueryType.delete()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38[3];
  SQLite::Delete result;

  v1 = v0;
  v2 = sub_10001BE7C(&qword_10012C138);
  v10 = sub_1000E1104(v2, v3, v4, v5, v6, v7, v8, v9, v32, *((uint64_t *)&v32 + 1), v33, v34, v35, v36, *((uint64_t *)&v36 + 1), v37);
  *(_OWORD *)(v10 + 16) = xmmword_1000F08A0;
  v11 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(v10 + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v10 + 32) = 0x46204554454C4544;
  *(_QWORD *)(v10 + 40) = 0xEB000000004D4F52;
  v12 = _swiftEmptyArrayStorage;
  *(_QWORD *)(v10 + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v10 + 56) = v11;
  sub_10001EFAC();
  sub_10001CAC4();
  sub_1000180D0();
  sub_10001EFAC();
  sub_10001CACC(v13, v14);
  v15 = sub_10001EFAC();
  sub_10000CF78(v15, v16, v17);
  sub_10001EFAC();
  sub_10000CD98(v18, v19);
  for (i = 32; i != 232; i += 40)
  {
    sub_1000E106C(v10 + i, (uint64_t)v38);
    sub_10001EDCC((uint64_t)v38, (uint64_t)&v32);
    if (v34)
    {
      sub_100019A48(&v32, (uint64_t)&v36);
      sub_100019A48(&v36, (uint64_t)&v32);
      if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      {
        sub_100019DF4(0, v12[2] + 1, 1, v12);
        v12 = v24;
      }
      v21 = v12[2];
      sub_1000E0FBC();
      if (v23)
      {
        v25 = sub_100007424(v22);
        sub_100019DF4(v25, v26, v27, v12);
        v12 = v28;
      }
      v12[2] = v1;
      sub_1000D6A64((uint64_t)&v12[5 * v21], v32);
    }
    else
    {
      sub_1000D6888((uint64_t)&v32);
    }
  }
  sub_1000117B4();
  sub_100018F74((uint64_t)v12, v38);
  sub_1000100D0();
  sub_10001AFC8(v38);
  sub_10000E87C(v38);
  v29 = sub_10001C134();
  result.bindings._rawValue = v31;
  result.template._object = v30;
  result.template._countAndFlagsBits = v29;
  return result;
}

void sub_10000CD98(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  Swift::String v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[17];
  uint64_t v20;
  _BYTE v21[24];
  _QWORD v22[2];
  char v23;
  char v24;

  (*(void (**)(_QWORD *__return_ptr))(a1 + 16))(v19);
  sub_1000E0204(v19);
  sub_100019EB8((uint64_t)&v20, (uint64_t)v21, &qword_10012C270);
  sub_100019EB8((uint64_t)v21, (uint64_t)v22, &qword_10012C270);
  if ((v24 & 1) != 0)
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    v3 = v22[1];
    v4 = v23;
    v17 = 0x2054494D494CLL;
    v18 = 0xE600000000000000;
    v16 = v22[0];
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    if ((v4 & 1) != 0)
    {
      v7 = sub_10001BE7C(&qword_10012BFA8);
      *(_QWORD *)(a2 + 32) = &protocol witness table for Expression<A>;
      *(_QWORD *)a2 = 0x2054494D494CLL;
      *(_QWORD *)(a2 + 8) = 0xE600000000000000;
      *(_QWORD *)(a2 + 16) = _swiftEmptyArrayStorage;
      *(_QWORD *)(a2 + 24) = v7;
    }
    else
    {
      v8 = sub_10001BE7C(&qword_100128D58);
      inited = swift_initStackObject(v8, &v15);
      *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
      v10 = sub_10001BE7C(&qword_10012BFA8);
      *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
      *(_QWORD *)(inited + 32) = 0x2054494D494CLL;
      *(_QWORD *)(inited + 40) = 0xE600000000000000;
      *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
      *(_QWORD *)(inited + 56) = v10;
      v17 = 0x2054455346464FLL;
      v18 = 0xE700000000000000;
      v16 = v3;
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v12 = v11._object;
      String.append(_:)(v11);
      swift_bridgeObjectRelease(v12);
      v13 = v17;
      v14 = v18;
      *(_QWORD *)(inited + 96) = v10;
      *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
      *(_QWORD *)(inited + 72) = v13;
      *(_QWORD *)(inited + 80) = v14;
      *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
      sub_10001A118(inited, 32, 0xE100000000000000, (uint64_t *)a2);
      swift_setDeallocating(inited);
      sub_10001E778();
    }
  }
}

double sub_10000CF78@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v6)(_QWORD *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  double result;
  _BYTE v14[112];
  _QWORD v15[16];
  uint64_t v16;
  _QWORD v17[16];
  uint64_t v18;
  uint64_t v19;

  v6 = *(void (**)(_QWORD *__return_ptr))(a2 + 16);
  v6(v15);
  v7 = v16;
  v19 = v16;
  swift_bridgeObjectRetain(v16);
  sub_1000E0204(v15);
  v8 = *(_QWORD *)(v7 + 16);
  sub_10001E05C(&v19);
  if (v8)
  {
    v9 = sub_10001BE7C(&qword_100128D58);
    inited = swift_initStackObject(v9, v14);
    *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
    v11 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
    *(_QWORD *)(inited + 32) = 0x594220524544524FLL;
    *(_QWORD *)(inited + 40) = 0xE800000000000000;
    *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(inited + 56) = v11;
    ((void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))v6)(v17, a1, a2);
    v12 = v18;
    swift_bridgeObjectRetain(v18);
    sub_1000E0204(v17);
    sub_10001A118(v12, 8236, 0xE200000000000000, (uint64_t *)(inited + 72));
    swift_bridgeObjectRelease(v12);
    sub_10001A118(inited, 32, 0xE100000000000000, (uint64_t *)a3);
    swift_setDeallocating(inited);
    sub_10001E778();
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10000D0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 32);
  if (a5)
    return sub_1000C267C(v5, a5);
  sub_10000795C(0, &qword_10012A260, LNAutoShortcutSubstitution_ptr);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2);
  sub_10000795C(0, &qword_10012A268, LNAppShortcutSpanData_ptr);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4);
  return sub_10001F9E4(v5, v10, v11, v12);
}

double sub_10000D194@<D0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;

  v44 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v13 = UUID.init()(v9);
  v14 = UUID.uuidString.getter(v13);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v43 = objc_msgSend(v12, "propertyTitle");
  v17 = objc_msgSend(v12, "propertyTitleKey");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v41 = v19;
  v42 = v18;

  v20 = objc_msgSend(v12, "providerClassName");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v39 = v22;
  v40 = v21;

  v23 = objc_msgSend(v12, "parameterTypeIdentifier");
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v37 = v25;
  v38 = v24;

  v26 = objc_msgSend(v12, "value");
  v27 = objc_msgSend(v12, "synonyms");
  sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27);

  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(a3);
  v29 = v44;
  sub_1000542A0(v28, v14, v16, v44, a3);
  v31 = v30;
  swift_bridgeObjectRelease(v28);
  *a4 = v14;
  a4[1] = v16;
  a4[2] = v29;
  a4[3] = a3;
  v32 = v42;
  a4[4] = (uint64_t)v43;
  a4[5] = v32;
  v33 = v40;
  a4[6] = v41;
  a4[7] = v33;
  v34 = v38;
  a4[8] = v39;
  a4[9] = v34;
  a4[10] = v37;
  a4[11] = (uint64_t)v26;
  a4[12] = v31;
  *(_QWORD *)&result = swift_bridgeObjectRetain(a3).n128_u64[0];
  return result;
}

uint64_t sub_10000D3C4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  uint64_t v7;
  char v8;

  v5 = a3;
  v6 = a4;
  v7 = swift_retain();
  v8 = sub_10000D424(v7, v6);

  swift_release();
  return v8 & 1;
}

uint64_t sub_10000D424(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t ObjectType;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  ObjectType = swift_getObjectType(v2);
  v46[0] = swift_isaMask & *v2;
  v4 = *(_QWORD *)(v46[0] + 80);
  v46[1] = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(ObjectType);
  v6 = (char *)v46 - v5;
  v7 = type metadata accessor for Logger(0);
  v48 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = v4;
  v54 = v4;
  v10 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v12 = String.init<A>(describing:)(&v54, v10);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v14 = v11;
    v15 = String.init(cString:)(LNLogSubsystem);
    Logger.init(subsystem:category:)(v15, v16, v12, v14);
    v17 = a2;
    v51 = v9;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter();
    v20 = os_log_type_enabled(v18, v19);
    v47 = v7;
    if (v20)
    {
      v21 = (uint8_t *)sub_100011780(12);
      v22 = sub_100011780(32);
      v54 = v22;
      *(_DWORD *)v21 = 136315138;
      v23 = sub_10000E994(v17);
      v52 = sub_10001B36C(v23, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

      sub_1000059A8();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Incoming %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1);
      sub_1000133FC(v22);
      sub_1000133FC((uint64_t)v21);
    }
    else
    {

    }
    v25 = v50;
    sub_10000E1AC((uint64_t)v6);
    v26 = v51;
    v27 = *(_QWORD *)(v46[0] + 88);
    (*(void (**)(id, uint64_t, uint64_t))(v27 + 16))(v17, v25, v27);
    v29 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v27 + 24))(v17, v25, v27);
    sub_100017EF0();
    v30 = v17;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    v33 = os_log_type_enabled(v31, v32);
    if ((v29 & 1) != 0)
    {
      if (v33)
      {
        v34 = sub_100011780(12);
        v35 = sub_100011780(32);
        v54 = v35;
        v36 = sub_10001B154(4.8149e-34);
        v38 = sub_10001B36C(v36, v37);
        sub_10001ACC4(v38);

        sub_1000059A8();
        sub_100011890((void *)&_mh_execute_header, v39, v32, "Accepting %s");
        v28 = 1;
        sub_10001D9D8();
        sub_1000133FC(v35);
        sub_1000133FC(v34);

        sub_10001C0C0();
      }
      else
      {

        sub_10001C0C0();
        return 1;
      }
    }
    else
    {
      if (v33)
      {
        v40 = sub_100011780(12);
        v41 = sub_100011780(32);
        v54 = v41;
        v42 = sub_10001B154(4.8149e-34);
        v44 = sub_10001B36C(v42, v43);
        sub_10001ACC4(v44);

        sub_1000059A8();
        sub_100011890((void *)&_mh_execute_header, v45, v32, "Rejecting %s");
        sub_10001D9D8();
        sub_1000133FC(v41);
        sub_1000133FC(v40);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v48 + 8))(v26, v47);
      return 0;
    }
    return v28;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10000D9B4(void *a1)
{
  sub_10000E664(a1);
  sub_10000BFBC();
}

uint64_t sub_10000D9D0()
{
  sub_10000D9F4();
  return 1;
}

uint64_t sub_10000D9F4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_10000C038();
  v41 = v3;
  v42 = v4;
  v6 = v5;
  v7 = type metadata accessor for RegistryError(0);
  sub_1000179E8();
  __chkstk_darwin(v8);
  v9 = sub_1000BDCA4();
  v10 = type metadata accessor for Logger(v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_1000BE5A0();
  sub_10000DDF4(v12);
  if ((v13 & 1) == 0)
  {
    v37 = v7;
    sub_10006052C();
    v14 = qword_100127EC8;
    v15 = v0;
    if (v14 != -1)
      swift_once(&qword_100127EC8, sub_100099764);
    v16 = sub_100012A40(v10, (uint64_t)qword_10012D1A8);
    v17 = v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v1, v16, v10);

    sub_1000100E0();
    v18 = v6;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(28, -1);
      v35 = swift_slowAlloc(64, -1);
      v40 = v35;
      *(_DWORD *)v21 = 136315650;
      v34 = v20;
      v36 = v17;
      sub_1000100E0();
      v22 = sub_10001EEE0();
      v38 = sub_10000FBEC(v22, v23, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      sub_10001A0B8();
      sub_1000059A8();
      *(_WORD *)(v21 + 12) = 1024;
      v25 = objc_msgSend(v18, "processIdentifier");

      LODWORD(v38) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, (char *)&v38 + 4);

      *(_WORD *)(v21 + 18) = 2080;
      swift_storeEnumTagMultiPayload(v2, v37, 5);
      sub_10009A328();
      v27 = v26;
      v29 = v28;
      sub_10001DBC8(v2, type metadata accessor for RegistryError);
      v38 = sub_10000FBEC(v27, v29, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      sub_10000E038();
      _os_log_impl((void *)&_mh_execute_header, v19, v34, "%s with PID %d needs access to Registry: %s", (uint8_t *)v21, 0x1Cu);
      swift_arrayDestroy(v35, 2);
      sub_1000133FC(v35);
      sub_1000133FC(v21);

      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v1, v10);
    }
    else
    {

      sub_10001A0B8();
      v30 = sub_1000BE650();
      v32(v30, v31);
    }
  }
  objc_msgSend(v6, "resume");
  return 1;
}

unint64_t sub_10000DD28(uint64_t a1)
{
  return sub_100016064(a1);
}

uint64_t sub_10000DD30()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10000DD44()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

id sub_10000DD4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;

  return objc_msgSend(v9, a2, v11, v10, &a9);
}

id sub_10000DD74@<X0>(uint64_t a1@<X8>)
{
  void *v1;

  return objc_msgSend(v1, *(SEL *)(a1 + 192));
}

uint64_t sub_10000DD80()
{
  return static os_log_type_t.error.getter();
}

void sub_10000DD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,__int128 a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)(v36 - 128) = a1;
  *(_QWORD *)(v36 - 120) = v32;
  *(_QWORD *)(v36 - 152) = v31;
  *(_QWORD *)(v36 - 144) = v34;
  *(_QWORD *)(v36 - 136) = v33;
  a31 = 0;
  a29 = 0u;
  a30 = 0u;
  sub_100019A60(v35, (uint64_t)&a19);
}

uint64_t sub_10000DDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return type metadata accessor for Expression(0, a5, a3, a4);
}

void sub_10000DDE0()
{
  uint64_t v0;
  uint64_t v1;

  sub_100019A60(v0, v1);
}

uint64_t sub_10000DDEC()
{
  return Logger.logObject.getter();
}

void sub_10000DDF4(uint64_t a1)
{
  Class isa;

  sub_1000BDB9C(a1, (unint64_t *)&qword_10012AD40, NSNumber_ptr);
  isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  sub_10000DEC8(0xD000000000000018, 0x80000001000F5DA0, isa);

  sub_10001000C();
}

void sub_10000DE64(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v4;

  if (!*a2)
  {
    v4 = objc_opt_self(*a3);
    atomic_store(swift_getObjCClassMetadata(v4), a2);
  }
  sub_10000BFBC();
}

uint64_t sub_10000DE98(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_10000DEC8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v5;
  id v6;
  unint64_t v7;
  id v8;
  id v9;
  char v10;
  id v12;
  _OWORD v13[2];
  _BYTE v14[24];
  uint64_t v15;

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v3, "valueForEntitlement:", v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v13, v6);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_10000DFD0((uint64_t)v13, (uint64_t)v14);
  if (!v15)
  {
    sub_10000E0D4((uint64_t)v14);
    goto LABEL_9;
  }
  v7 = sub_10000E114();
  if ((swift_dynamicCast(&v12, v14, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
  {
LABEL_9:
    v10 = 0;
    return v10 & 1;
  }
  v8 = v12;
  if (a3)
  {
    v9 = a3;
    v10 = static NSObject.== infix(_:_:)(v8, v9);

  }
  else
  {

    v10 = 1;
  }
  return v10 & 1;
}

uint64_t sub_10000DFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_100128A40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E018@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  _QWORD *v12;

  v12[86] = v11;
  v12[85] = a11;
  return v12[83] + 40 * a1 + 32;
}

uint64_t sub_10000E038()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_10000E040()
{
  uint64_t v0;

}

uint64_t sub_10000E048(uint64_t a1, char a2)
{
  return sub_1000A0168(a1, a2);
}

uint64_t sub_10000E064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  return v3(a1, a2, a3, v4);
}

uint64_t sub_10000E074()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10006AF68(v0, v1);
}

uint64_t sub_10000E080()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_10000E090()
{
  uint64_t v0;

  return v0;
}

void sub_10000E0A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 160) = v2;
  *(_QWORD *)(v3 - 152) = v1;
  *(_QWORD *)(v3 - 144) = v0;
}

uint64_t sub_10000E0AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

__n128 sub_10000E0C0()
{
  __n128 *v0;
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  result = *v1;
  *v0 = *v1;
  v0[1].n128_u64[0] = v2;
  return result;
}

uint64_t sub_10000E0D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001BE7C(&qword_100128A40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10000E114()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10012A760;
  if (!qword_10012A760)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10012A760);
  }
  return result;
}

void sub_10000E150(uint64_t a1, uint64_t a2)
{
  sub_10000E158(a1, a2);
}

void sub_10000E158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void (*v4)(uint64_t);
  id v5;

  if (a2)
    _convertErrorToNSError(_:)(a2);
  v2 = sub_100019430();
  v5 = v3;
  v4(v2);

}

uint64_t sub_10000E1AC@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t EnumCaseMultiPayload;
  uint64_t v10;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v5 = type metadata accessor for Result(0, v4, *(_QWORD *)(*(_QWORD *)v1 + 88), &protocol self-conformance witness table for Error);
  __chkstk_darwin(v5);
  v7 = (char *)&v10 - v6;
  sub_10000E2AC();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v5);
  if ((_DWORD)EnumCaseMultiPayload != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, v7, v4);
  if (v1[40] == 1)
    sub_10000E314((void (*)(void))sub_100091178, (uint64_t)v1, v3, (uint64_t)&type metadata for () + 8, (uint64_t)&off_10011D520);
  return swift_willThrow(EnumCaseMultiPayload);
}

void sub_10000E2AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)v0;
  v2 = type metadata accessor for Result(0, *(_QWORD *)(*(_QWORD *)v0 + 80), *(_QWORD *)(*(_QWORD *)v0 + 88), *(_QWORD *)(*(_QWORD *)v0 + 96));
  sub_10000E314((void (*)(void))sub_10000E3BC, v0, v1, v2, (uint64_t)&off_10011D520);
}

void sub_10000E314(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v11;

  v6 = v5;
  v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  objc_msgSend(v11, "lock");

  a1();
  sub_10000E614(v6, a3, a4, a5);
}

uint64_t sub_10000E3BC@<X0>(uint64_t a1@<X8>)
{
  void (**v1)(void);

  return sub_10000E3D4(v1, a1);
}

uint64_t sub_10000E3D4@<X0>(void (**a1)(void)@<X0>, uint64_t a2@<X8>)
{
  void (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  char v21[24];

  v19 = a2;
  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 10);
  v5 = *((_QWORD *)*a1 + 11);
  v6 = *((_QWORD *)*a1 + 12);
  v7 = type metadata accessor for LazyTask.State(0, v4, v5, v6);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v18 - v12;
  v14 = (char *)a1 + *((_QWORD *)v3 + 16);
  swift_beginAccess(v14, v21, 0, 0);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
  v15 = type metadata accessor for Result(0, v4, v5, v6);
  if (sub_10001C93C((uint64_t)v13, 1, v15) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v19, v13, v15);
  v16 = v19;
  a1[3]();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v16, v15);
  sub_100014360((uint64_t)v11, 0, 1, v15);
  swift_beginAccess(v14, v20, 33, 0);
  (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v14, v11, v7);
  return swift_endAccess(v20);
}

void *sub_10000E578(void *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = a2[v6];
  if (v7 > 1)
  {
    memcpy(__dst, a2, v6 + 1);
  }
  else if (v7 == 1)
  {
    (*(void (**)(void *))(v5 + 16))(__dst);
    *((_BYTE *)__dst + v6) = 1;
  }
  else
  {
    (*(void (**)(void *))(v4 + 16))(__dst);
    *((_BYTE *)__dst + v6) = 0;
  }
  return __dst;
}

uint64_t type metadata accessor for LazyTask.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyTask.State);
}

void sub_10000E614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4;

  v4 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a4);
  objc_msgSend(v4, "unlock");

}

id sub_10000E65C()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void sub_10000E664(void *a1)
{
  uint64_t v1;
  unsigned int v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[3];
  _QWORD *v16;
  void (*v17)();
  uint64_t v18;

  v3 = objc_msgSend(a1, "processIdentifier");
  v4 = (id)LNDaemonRegistryXPCInterface();
  objc_msgSend(a1, "setExportedInterface:", v4);

  sub_10000E89C(aBlock);
  v5 = v16;
  if (v16)
  {
    v6 = sub_10000E858(aBlock, (uint64_t)v16);
    v7 = *(v5 - 1);
    __chkstk_darwin(v6);
    v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v7 + 16))(v9);
    v10 = _bridgeAnythingToObjectiveC<A>(_:)(v9, v5);
    (*(void (**)(char *, _QWORD *))(v7 + 8))(v9, v5);
    sub_10000E87C(aBlock);
  }
  else
  {
    v10 = 0;
  }
  objc_msgSend(a1, "setExportedObject:", v10);
  swift_unknownObjectRelease(v10);
  v11 = swift_allocObject(&unk_10011E570, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v1);
  v12 = swift_allocObject(&unk_10011E480, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, a1);
  v13 = swift_allocObject(&unk_10011E598, 40, 7);
  *(_DWORD *)(v13 + 16) = v3;
  *(_QWORD *)(v13 + 24) = v11;
  *(_QWORD *)(v13 + 32) = v12;
  v17 = sub_1000C16D4;
  v18 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001FF18;
  v16 = &unk_10011E5B0;
  v14 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a1, "setInvalidationHandler:", v14);
  _Block_release(v14);
}

_QWORD *sub_10000E858(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000E87C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10000E89C(_QWORD *a1@<X8>)
{
  void *v1;
  id v3;

  objc_allocWithZone((Class)LNWeakProxy);
  v3 = sub_10000E8F8(v1, (uint64_t)sub_10000A6BC, 0);
  a1[3] = sub_10001BE7C(&qword_1001293E0);
  *a1 = v3;
  sub_10001000C();
}

id sub_10000E8F8(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  _QWORD v8[6];

  v8[4] = a2;
  v8[5] = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10000A648;
  v8[3] = &unk_10011D710;
  v5 = _Block_copy(v8);
  v6 = objc_msgSend(v3, "initWithValue:wrapper:", a1, v5);

  _Block_release(v5);
  swift_release();
  return v6;
}

unint64_t sub_10000E994(void *a1)
{
  uint64_t v1;
  Swift::String v3;
  void *object;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;

  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease(0xE000000000000000);
  objc_msgSend(a1, "processIdentifier");
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0x72657320726F6620;
  v5._object = (void *)0xEE00222065636976;
  String.append(_:)(v5);
  v6._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 88) + 8))();
  v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  v8._countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0xD000000000000018;
}

void sub_10000EA9C()
{
  sub_10000EAB0();
}

void sub_10000EAB0()
{
  if (qword_100127ED8 != -1)
    swift_once(&qword_100127ED8, sub_1000A257C);
  sub_1000101B0();
  sub_100019430();
  sub_10000BFBC();
}

uint64_t sub_10000EB00(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

id sub_10000EB08()
{
  uint64_t v0;

  return sub_100055748((_QWORD *)(v0 + 480), *(void **)(v0 + 416));
}

uint64_t sub_10000EB14@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_10000EB1C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10000FBEC(a1, a2, (uint64_t *)(v2 - 104));
}

uint64_t sub_10000EB28()
{
  uint64_t v0;

  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_10000EB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_bridgeObjectRelease(a17);
}

uint64_t sub_10000EB38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

double sub_10000EB5C(uint64_t a1, uint64_t a2)
{
  return sub_1000D6068(a1, a2);
}

uint64_t sub_10000EB64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

uint64_t sub_10000EB78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000132C4(v2 - 168, a2);
}

void sub_10000EB80(char a1, uint64_t a2)
{
  _QWORD *v2;

  sub_100019DF4(a1, a2, 1, v2);
}

uint64_t type metadata accessor for RegistryError(uint64_t a1)
{
  return sub_10000DE98(a1, qword_10012B450, (uint64_t)&nominal type descriptor for RegistryError);
}

uint64_t Connection.prepareRowIterator(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_10001E98C(a1);
  sub_1000E10F8(v3, v4, (uint64_t)_swiftEmptyArrayStorage);
  if (v1)
  {
    sub_10000E038();
    sub_10000C028();
  }
  else
  {
    v2 = sub_1000E10DC();
    sub_10000E038();
    sub_10000C028();
    sub_1000073B0();
    sub_10001EF20();
  }
  return v2;
}

uint64_t sub_10000EC34()
{
  uint64_t (**v0)(void);

  sub_100017C10(*((_QWORD *)*v0 + 2));
  return sub_1000107A0(v0[1]);
}

uint64_t sub_10000EC68()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

id sub_10000EC70(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10000EC78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return static _DictionaryStorage.resize(original:capacity:move:)(a1, a2, v2);
}

uint64_t sub_10000EC84()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

id sub_10000EC8C()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v1 - 176) + 8 * v0);
}

uint64_t sub_10000ECB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t sub_10000ECC0()
{
  uint64_t v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_10000ECD8(uint64_t a1)
{
  uint64_t v1;

  return sub_10001C93C(a1, 1, v1);
}

void sub_10000ECF4()
{
  void *v0;

}

uint64_t sub_10000ECFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

uint64_t sub_10000ED0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_1000D5F44(a1, a2, a3, 2u, 0, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

id sub_10000ED50()
{
  uint64_t v0;

  return *(id *)(v0 + 104);
}

_QWORD *sub_10000ED70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  _BYTE __dst[104];

  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v8 = *(_QWORD *)(type metadata accessor for LNAppShortcutParameterRecord(0) - 8);
    v9 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    swift_retain();
    swift_bridgeObjectRetain(a2);
    while (1)
    {
      sub_100016F60();
      if (v3)
        break;
      v9 += v10;
      if (!--v6)
      {
        swift_bridgeObjectRelease(a2);
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(a2);
    return (_QWORD *)swift_release();
  }
  swift_retain();
LABEL_7:
  v11 = *(_QWORD *)(a3 + 16);
  if (!v11)
    return (_QWORD *)swift_release();
  swift_retain();
  swift_bridgeObjectRetain(a3);
  for (i = 32; ; i += 104)
  {
    memcpy(__dst, (const void *)(a3 + i), sizeof(__dst));
    sub_10000F49C(__dst);
    sub_10000EEDC((__int128 *)__dst, v5);
    if (v3)
      break;
    sub_10000F418(__dst);
    if (!--v11)
    {
      swift_release_n(v5, 2);
      return (_QWORD *)swift_bridgeObjectRelease(a3);
    }
  }
  swift_release_n(v5, 2);
  swift_bridgeObjectRelease(a3);
  return sub_10000F418(__dst);
}

void sub_10000EEDC(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  Swift::String v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119[10];
  _BYTE v120[168];
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  _QWORD v125[22];
  uint64_t v126;
  SQLite::Insert v127;

  if (qword_100127DD8 != -1)
    swift_once(&qword_100127DD8, sub_100076E54);
  sub_1000189C4(v125, &unk_10012A3F8);
  sub_1000189C4(v120, &unk_10012A3F8);
  sub_1000379AC(v125);
  if (qword_100127DE0 != -1)
    swift_once(&qword_100127DE0, sub_100076F30);
  v5 = sub_10001768C((uint64_t)&qword_10012A4A0);
  v98 = *a1;
  <- infix<A>(_:_:)(v5, v6, v7, (uint64_t)&v98, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  v8 = sub_10001BE7C(&qword_100128D08);
  v9 = sub_1000100C8(v8, 512);
  *(_OWORD *)(v9 + 16) = xmmword_1000F0F50;
  if (qword_100127DE8 != -1)
    swift_once(&qword_100127DE8, sub_100076F5C);
  v93 = a2;
  v10 = sub_10001768C((uint64_t)&qword_10012A4B8);
  v98 = a1[1];
  v95 = v9 + 32;
  sub_100017D08(v10, v11, v12, (uint64_t)&v98, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_100127DF0 != -1)
    swift_once(&qword_100127DF0, sub_100076F80);
  v13 = qword_10012A4D0;
  v14 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  JSONEncoder.init()();
  v15 = LNStaticDeferredLocalizedString.asLocalizedStringResourceJSON(encoder:)();
  if (v2)
  {
    v17 = sub_10001B770();
    sub_1000186F0(v17, v18, v19, v20, v21, v22, v23, v24, v87, v90, a2, v95, v97._countAndFlagsBits, (uint64_t)v97._object, v98, *((uint64_t *)&v98 + 1), v99, v100, v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110,
      v111,
      v112,
      v113,
      v114,
      v115,
      v116,
      v117,
      v118,
      v119[0]);
    v25 = sub_1000189C4(&v98, v120);
    sub_100015970((uint64_t)v25, v26, v27, v28, v29, v30);
LABEL_21:
    sub_100019F20(v96);
    *(_QWORD *)(v9 + 16) = 0;
    swift_setDeallocating(v9);
    sub_10001CC3C();
    goto LABEL_22;
  }
  v31 = v15;
  v32 = v16;
  sub_10001B770();
  *(_QWORD *)&v98 = v31;
  *((_QWORD *)&v98 + 1) = v32;
  v88 = v9 + 112;
  sub_10001D9A4(v13, v33, v34, (uint64_t)&v98, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_1000059A8();
  if (qword_100127DF8 != -1)
    swift_once(&qword_100127DF8, sub_100076FAC);
  v35 = sub_10001768C((uint64_t)&qword_10012A4E8);
  v98 = *(__int128 *)((char *)a1 + 40);
  v91 = v9 + 192;
  sub_100017D08(v35, v36, v37, (uint64_t)&v98, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_100127E00 != -1)
    swift_once(&qword_100127E00, sub_100076FD0);
  v38 = sub_10001768C((uint64_t)&qword_10012A500);
  v98 = *(__int128 *)((char *)a1 + 56);
  sub_100017D08(v38, v39, v40, (uint64_t)&v98, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_100127E08 != -1)
    swift_once(&qword_100127E08, sub_100076FF4);
  v41 = sub_10001768C((uint64_t)&qword_10012A518);
  v98 = *(__int128 *)((char *)a1 + 72);
  sub_100017D08(v41, v42, v43, (uint64_t)&v98, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_100127E10 != -1)
    swift_once(&qword_100127E10, sub_100077018);
  v44 = qword_10012A530;
  v51 = LNValue.asJson()();
  if (v52)
  {
    sub_1000186F0(v51._countAndFlagsBits, (uint64_t)v51._object, v45, v46, v47, v48, v49, v50, v88, v91, v93, v95, v97._countAndFlagsBits, (uint64_t)v97._object, v98, *((uint64_t *)&v98 + 1), v99, v100, v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110,
      v111,
      v112,
      v113,
      v114,
      v115,
      v116,
      v117,
      v118,
      v119[0]);
    v53 = sub_1000189C4(&v98, v120);
    sub_100015970((uint64_t)v53, v54, v55, v56, v57, v58);
    sub_100019F20((_QWORD *)(v9 + 352));
    sub_100019F20((_QWORD *)(v9 + 272));
    sub_100019F20(v92);
    sub_100019F20(v89);
    goto LABEL_21;
  }
  v97 = v51;
  sub_10001D9A4(v44, (uint64_t)v51._object, v45, (uint64_t)&v97, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_1000059A8();
  v59 = QueryType.insert(_:_:)((uint64_t)v119);
  v61 = v60;
  v63 = v62;
  swift_setDeallocating(v9);
  v64 = sub_10001CC3C();
  sub_1000186F0(v64, v65, v66, v67, v68, v69, v70, v71, v88, v91, v93, v95, v97._countAndFlagsBits, (uint64_t)v97._object, v98, *((uint64_t *)&v98 + 1), v99, v100, v101,
    v102,
    v103,
    v104,
    v105,
    v106,
    v107,
    v108,
    v109,
    v110,
    v111,
    v112,
    v113,
    v114,
    v115,
    v116,
    v117,
    v118,
    v119[0]);
  v72 = sub_1000189C4(&v98, v120);
  sub_100015970((uint64_t)v72, v73, v74, v75, v76, v77);
  v127.template._countAndFlagsBits = v59;
  v127.template._object = v61;
  v127.bindings._rawValue = v63;
  Connection.run(_:)(v127);
  if (v78)
  {
    swift_bridgeObjectRelease(v63);
    sub_1000117B4();
  }
  else
  {
    swift_bridgeObjectRelease(v63);
    sub_1000117B4();
    v79 = *((_QWORD *)a1 + 12);
    v126 = v79;
    v80 = *(_QWORD *)(v79 + 16);
    if (v80)
    {
      swift_retain();
      sub_10005A6D8(&v126);
      v81 = (void **)(v79 + 64);
      do
      {
        v82 = (uint64_t)*(v81 - 3);
        v83 = (uint64_t)*(v81 - 2);
        v84 = (uint64_t)*(v81 - 1);
        v85 = *v81;
        *(_QWORD *)&v121 = *(v81 - 4);
        *((_QWORD *)&v121 + 1) = v82;
        v122 = v83;
        v123 = v84;
        v124 = v85;
        swift_bridgeObjectRetain(v82);
        swift_bridgeObjectRetain(v84);
        v86 = v85;
        sub_10005AA28(&v121, v94);

        sub_1000059A8();
        sub_1000117B4();
        v81 += 5;
        --v80;
      }
      while (v80);
      sub_10001E05C(&v126);
      sub_10001B770();
    }
  }
LABEL_22:
  sub_1000117E8();
}

_QWORD *sub_10000F418(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = a1[1];
  v3 = a1[3];
  v4 = (void *)a1[4];
  v5 = a1[6];
  v6 = a1[8];
  v7 = a1[10];
  v8 = (void *)a1[11];
  swift_bridgeObjectRelease(a1[12]);

  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

_QWORD *sub_10000F49C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;

  v2 = a1[3];
  v3 = (void *)a1[4];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[10];
  v7 = (void *)a1[11];
  v8 = a1[12];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  v9 = v3;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v10 = v7;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t Statement.__deallocating_deinit(uint64_t a1)
{
  uint64_t v1;

  Statement.deinit(a1);
  return swift_deallocClassInstance(v1, 72, 7);
}

void Statement.deinit(uint64_t a1)
{
  uint64_t v1;

  sub_10001B010(a1);
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 16));
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 48));
  sub_10001B3F4();
}

uint64_t sub_10000F574()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[200];

  v0 = sub_10001BE7C(&qword_10012A990);
  inited = swift_initStackObject(v0, v12);
  *(_OWORD *)(inited + 16) = xmmword_1000F0670;
  sub_1000143FC();
  *(_QWORD *)(v2 + 32) = 0xD000000000000010;
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(inited + 48) = sub_100011574((uint64_t)&off_10011A220);
  *(_QWORD *)(inited + 56) = 0xD000000000000015;
  sub_1000143FC();
  *(_QWORD *)(inited + 64) = v4;
  *(_QWORD *)(inited + 72) = sub_100011574((uint64_t)&off_10011A250);
  *(_QWORD *)(inited + 80) = 0xD000000000000015;
  sub_1000143FC();
  *(_QWORD *)(inited + 88) = v5;
  *(_QWORD *)(inited + 96) = sub_100011574((uint64_t)&off_10011A290);
  *(_QWORD *)(inited + 104) = 0xD00000000000001ALL;
  sub_1000143FC();
  *(_QWORD *)(inited + 112) = v6;
  *(_QWORD *)(inited + 120) = sub_100011574((uint64_t)&off_10011A300);
  *(_QWORD *)(inited + 128) = 0xD000000000000013;
  sub_1000143FC();
  *(_QWORD *)(inited + 136) = v7;
  *(_QWORD *)(inited + 144) = sub_100011574((uint64_t)&off_10011A330);
  *(_QWORD *)(inited + 152) = 0xD00000000000001ALL;
  sub_1000143FC();
  *(_QWORD *)(inited + 160) = v8;
  *(_QWORD *)(inited + 168) = sub_100011574((uint64_t)&off_10011A380);
  *(_QWORD *)(inited + 176) = 0xD000000000000010;
  sub_1000143FC();
  *(_QWORD *)(inited + 184) = v9;
  *(_QWORD *)(inited + 192) = sub_100011574((uint64_t)&off_10011A400);
  v10 = sub_10001BE7C(&qword_10012A998);
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v10, &protocol witness table for String);
}

#error "10000F9A8: call analysis failed (funcsize=304)"

uint64_t sub_10000FBEC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  void *ObjectType;

  v6 = sub_10000FCBC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10000FE10((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10000FE10((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10000E87C(v12);
  return v7;
}

_QWORD *sub_10000FCBC(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_10002A3FC((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_10002A4C0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (_QWORD *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000FE10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_10000FE4C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10000FE68()
{
  uint64_t v0;

  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_10000FE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return swift_bridgeObjectRelease(a21);
}

uint64_t sub_10000FE9C()
{
  return sub_1000D88DC();
}

uint64_t sub_10000FEA4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = a1;
  return swift_bridgeObjectRetain(a1);
}

void sub_10000FEB0()
{
  sub_1000DEBE8();
}

void sub_10000FEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  _QWORD *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];

  sub_100016714();
  v1 = sub_10001BE7C(&qword_10012C138);
  v9 = sub_1000E1104(v1, v2, v3, v4, v5, v6, v7, v8, v41, *((uint64_t *)&v41 + 1), v42, v43, v44, v45, *((uint64_t *)&v45 + 1), v46);
  *(_OWORD *)(v9 + 16) = xmmword_1000F0670;
  sub_100010688();
  sub_100010F1C();
  sub_100010B68((uint64_t *)(v9 + 112));
  sub_1000104E4((uint64_t *)(v9 + 152));
  sub_100010C40();
  sub_100010E58((uint64_t *)(v9 + 232));
  sub_100010338((uint64_t *)(v9 + 272));
  v18 = _swiftEmptyArrayStorage;
  for (i = 32; i != 312; i += 40)
  {
    sub_100013690(v10, v11, v12, v13, v14, v15, v16, v17, v41, *((uint64_t *)&v41 + 1));
    sub_1000E0F58(v20, v21, v22, v23, v24, v25, v26, v27, v41, *((uint64_t *)&v41 + 1), v42, v43, v44, v45, *((uint64_t *)&v45 + 1), v46, v47, v48, v49[0]);
    if (v43)
    {
      sub_100019A48(&v41, (uint64_t)&v45);
      if ((sub_10001BF10(&v45, (uint64_t)&v41) & 1) == 0)
      {
        sub_100019BAC();
        v18 = v39;
      }
      v36 = v18[2];
      sub_1000E0FBC();
      if (v38)
      {
        sub_10001CDE0(v37 > 1, v0);
        v18 = v40;
      }
      v18[2] = v0;
      v10 = sub_1000D6A64((uint64_t)&v18[5 * v36], v41);
    }
    else
    {
      sub_1000E1010(v28, v29, v30, v31, v32, v33, v34, v35, v41);
    }
  }
  sub_1000117B4();
  sub_100018F74((uint64_t)v18, v49);
  sub_1000059A8();
  sub_10001AFC8(v49);
  sub_10000E87C(v49);
  sub_1000E0FC8();
  sub_1000110FC();
}

uint64_t sub_100010028()
{
  uint64_t v0;

  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_100010034()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

unint64_t sub_10001003C(uint64_t a1)
{
  return sub_100016064(a1);
}

id sub_100010044@<X0>(uint64_t a1@<X8>)
{
  void *v1;

  return objc_msgSend(v1, *(SEL *)(a1 + 192));
}

BOOL sub_100010050(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

double sub_100010058()
{
  return 0.0;
}

uint64_t sub_100010068(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000E858(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_10001008C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000132C4(v1 - 144, v0 + 72);
}

_QWORD *sub_100010098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v2 - 104) = v0;
  *(_QWORD *)(v2 - 96) = v3;
  return sub_10001795C((_QWORD *)(v2 - 128));
}

void sub_1000100C0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_1000100C8(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7);
}

uint64_t sub_1000100D0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000100D8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  return sub_10000795C(0, a2, a3);
}

uint64_t sub_1000100E0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_1000100E8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1000100FC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001010C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = v2;
  return swift_task_dealloc(a1);
}

void sub_100010114()
{
  void *v0;

}

uint64_t sub_100010120()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_100010128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v3, v0, v1);
}

uint64_t sub_10001013C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  return sub_10000FBEC(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000101B0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000101B8(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL sub_1000101D0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000101E0()
{
  return swift_task_alloc(48);
}

uint64_t sub_1000101EC(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2);
}

uint64_t sub_1000101F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_10001BE7C(a5);
}

uint64_t sub_1000101FC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

unint64_t sub_100010204()
{
  return (unint64_t)Statement.failableNext()();
}

uint64_t sub_10001022C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return QueryType.namespace<A>(_:)(v5, v6, v7, a4, a5);
}

id sub_100010240()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(v0 + 8 * v1 + 32);
}

uint64_t sub_10001024C()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100010260()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_100010270()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100010278(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100010284()
{
  uint64_t v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

_QWORD *sub_10001029C()
{
  return sub_1000379AC(&STACK[0x2E0]);
}

uint64_t sub_1000102A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  unint64_t v8;
  va_list va;

  va_start(va, a7);
  return sub_10000FBEC(v7, v8, (uint64_t *)va);
}

uint64_t sub_1000102B4()
{
  uint64_t v0;

  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

void sub_1000102C0(uint64_t a1@<X8>)
{
  uint64_t v1;
  Swift::String v2;

  v2._object = (void *)((a1 - 32) | 0x8000000000000000);
  v2._countAndFlagsBits = v1;
  String.append(_:)(v2);
}

uint64_t sub_1000102D0()
{
  uint64_t v0;
  uint64_t v1;

  if (v1 >= 0)
    return _CocoaArrayWrapper.endIndex.getter(v0);
  else
    return _CocoaArrayWrapper.endIndex.getter(v1);
}

uint64_t sub_1000102DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t sub_100010304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, a5, a6, 23, 2);
}

uint64_t sub_100010318()
{
  return Statement.run(_:)();
}

void sub_100010320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000EAD14(a1, a2, a3, a4, 0x2050584547455220, 0xE800000000000000);
}

void sub_100010338(uint64_t *a1@<X8>)
{
  const void *v1;
  char v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  _BYTE v18[136];
  uint64_t v19;
  _BYTE v20[24];
  uint64_t v21;
  char v22;
  char v23;

  sub_1000189C4(v18, v1);
  sub_10001EDCC((uint64_t)&v19, (uint64_t)v20);
  sub_10001EDCC((uint64_t)v20, (uint64_t)&v21);
  if ((v23 & 1) != 0)
  {
    sub_1000E0E88();
  }
  else
  {
    v3 = v22;
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v4);
    sub_1000100D0();
    if ((v3 & 1) != 0)
    {
      v5 = sub_10001BE7C(&qword_10012BFA8);
      a1[4] = (uint64_t)&protocol witness table for Expression<A>;
      *a1 = 0x2054494D494CLL;
      a1[1] = 0xE600000000000000;
      a1[2] = (uint64_t)_swiftEmptyArrayStorage;
      a1[3] = v5;
    }
    else
    {
      v6 = sub_10001BE7C(&qword_100128D58);
      v14 = sub_100015A10(v6, v7, v8, v9, v10, v11, v12, v13, v17);
      *(_OWORD *)(v14 + 16) = xmmword_1000EFD90;
      v15 = sub_10001BE7C(&qword_10012BFA8);
      *(_QWORD *)(v14 + 64) = &protocol witness table for Expression<A>;
      *(_QWORD *)(v14 + 32) = 0x2054494D494CLL;
      *(_QWORD *)(v14 + 40) = 0xE600000000000000;
      *(_QWORD *)(v14 + 48) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v14 + 56) = v15;
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      String.append(_:)(v16);
      sub_1000059C4();
      *(_QWORD *)(v14 + 96) = v15;
      *(_QWORD *)(v14 + 104) = &protocol witness table for Expression<A>;
      *(_QWORD *)(v14 + 72) = 0x2054455346464FLL;
      *(_QWORD *)(v14 + 80) = 0xE700000000000000;
      *(_QWORD *)(v14 + 88) = _swiftEmptyArrayStorage;
      sub_100018F74(v14, a1);
      sub_100018640();
      sub_10000585C();
    }
  }
}

void sub_1000104E4(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[112];
  _BYTE v15[112];
  _BYTE v16[112];
  __int128 v17[3];

  v3 = v1[12];
  if (v3)
  {
    v4 = v1[13];
    v5 = v1[14];
    v6 = v1[15];
    v7 = sub_10001BE7C(&qword_100128D58);
    inited = swift_initStackObject(v7, v16);
    *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
    v9 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
    *(_QWORD *)(inited + 32) = 0x59422050554F5247;
    *(_QWORD *)(inited + 40) = 0xE800000000000000;
    *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(inited + 56) = v9;
    sub_100016794();
    sub_100018298(v4, v5, v6);
    sub_100005A18(v3, (uint64_t *)(inited + 72));
    sub_100018F74(inited, (uint64_t *)v17);
    sub_100019D18();
    sub_10001E778();
    v10 = sub_10000E038();
    if (v5)
    {
      v11 = sub_10001F878(v10, (uint64_t)v15);
      *(_OWORD *)(v11 + 16) = xmmword_1000EFD90;
      sub_100019A60((uint64_t)v17, v11 + 32);
      v13 = sub_10001F878(v12, (uint64_t)v14);
      *(_OWORD *)(v13 + 16) = xmmword_1000EFD90;
      *(_QWORD *)(v13 + 56) = v9;
      *(_QWORD *)(v13 + 64) = &protocol witness table for Expression<A>;
      *(_QWORD *)(v13 + 32) = 0x474E49564148;
      *(_QWORD *)(v13 + 40) = 0xE600000000000000;
      *(_QWORD *)(v13 + 48) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v13 + 96) = sub_10001BE7C(&qword_10012C158);
      *(_QWORD *)(v13 + 104) = &protocol witness table for Expression<A>;
      *(_QWORD *)(v13 + 72) = v4;
      *(_QWORD *)(v13 + 80) = v5;
      *(_QWORD *)(v13 + 88) = v6;
      sub_100018F74(v13, (uint64_t *)(v11 + 72));
      sub_1000E10F0();
      sub_1000E0F84();
      sub_100018F74(v11, a1);
      sub_10001BFB8();
      sub_1000E1050();
      sub_10000E87C(v17);
    }
    else
    {
      sub_100019A48(v17, (uint64_t)a1);
    }
  }
  else
  {
    sub_1000E0E88();
  }
  sub_100013628();
}

uint64_t sub_100010688()
{
  _BYTE *v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  sub_1000E0F1C();
  v2 = v1;
  v4 = v3;
  v5 = sub_10001BE7C(&qword_100128D58);
  v13 = sub_100015A10(v5, v6, v7, v8, v9, v10, v11, v12, v19);
  *(_OWORD *)(v13 + 16) = xmmword_1000F05A0;
  if ((*v0 & 1) != 0)
    v14 = 0x44205443454C4553;
  else
    v14 = 0x5443454C4553;
  if ((*v0 & 1) != 0)
    v15 = 0xEF54434E49545349;
  else
    v15 = 0xE600000000000000;
  v16 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(v13 + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v15;
  *(_QWORD *)(v13 + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v13 + 56) = v16;
  v17 = sub_10000C030();
  sub_100005A18(v17, (uint64_t *)(v13 + 72));
  sub_1000059C4();
  *(_QWORD *)(v13 + 136) = v16;
  *(_QWORD *)(v13 + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v13 + 112) = 1297044038;
  *(_QWORD *)(v13 + 120) = 0xE400000000000000;
  *(_QWORD *)(v13 + 128) = _swiftEmptyArrayStorage;
  v2(1);
  sub_100018F74(v13, v4);
  sub_100018640();
  return sub_10000585C();
}

uint64_t sub_1000107A0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000107AC()
{
  return 0;
}

void sub_1000107B8()
{
  uint64_t v0;

  sub_100054130(v0);
}

uint64_t sub_1000107C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v2, v0, v1);
}

uint64_t sub_1000107D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_bridgeObjectRelease(a20);
}

uint64_t sub_1000107E0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  return v1(v0);
}

uint64_t sub_1000107F0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

double sub_1000107FC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000D6068(v1, v0);
}

uint64_t sub_100010828()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100010848()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(v0, v1);
}

void sub_100010860()
{
  _QWORD *v0;
  char v1;
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[112];
  char v32[152];
  uint64_t v33;

  sub_1000100A8();
  v3 = v2;
  v4 = v0[5];
  v5 = v0[7];
  if (!v4)
  {
    sub_100013E10();
LABEL_6:
    sub_10000BFF4();
    sub_100013E10();
    v16 = sub_1000D693C();
    v18 = v17;
    sub_1000100D0();
    if (v5)
    {
      v19 = sub_10001BE7C(&qword_100128D58);
      inited = swift_initStackObject(v19, &v33);
      *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
      v21 = sub_10001BE7C(&qword_10012BFA8);
      *(_QWORD *)(inited + 56) = v21;
      *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
      sub_1000100E0();
      v22 = sub_10001A930();
      v24 = v23;
      sub_10000C028();
      *(_QWORD *)(inited + 32) = v22;
      *(_QWORD *)(inited + 40) = v24;
      *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
      *(_QWORD *)(inited + 96) = v21;
      *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
      *(_QWORD *)(inited + 72) = v16;
      *(_QWORD *)(inited + 80) = v18;
      *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
      sub_10001B3D8(inited, 46, v3);
      sub_100019D18();
      sub_1000D5D08(&qword_100129F18);
      sub_1000100D0();
    }
    else
    {
      v3[3] = sub_10001BE7C(&qword_10012BFA8);
      v3[4] = (uint64_t)&protocol witness table for Expression<A>;
      sub_1000100D0();
      *v3 = v16;
      v3[1] = v18;
      v3[2] = (uint64_t)_swiftEmptyArrayStorage;
    }
    goto LABEL_11;
  }
  v6 = v0[4];
  if ((v1 & 1) == 0)
    goto LABEL_6;
  v7 = sub_10001BE7C(&qword_100128D58);
  v8 = swift_initStackObject(v7, v32);
  *(_OWORD *)(v8 + 16) = xmmword_1000EFDA0;
  sub_100013E10();
  sub_10000BFF4();
  v9 = sub_1000D693C();
  v30 = v10;
  if (v5)
  {
    v11 = swift_initStackObject(v7, v31);
    *(_OWORD *)(v11 + 16) = xmmword_1000EFD90;
    v29 = v6;
    v12 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(v11 + 56) = v12;
    *(_QWORD *)(v11 + 64) = &protocol witness table for Expression<A>;
    sub_1000100E0();
    v13 = sub_10001A930();
    v15 = v14;
    sub_10000C028();
    *(_QWORD *)(v11 + 32) = v13;
    *(_QWORD *)(v11 + 40) = v15;
    *(_QWORD *)(v11 + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v11 + 96) = v12;
    *(_QWORD *)(v11 + 104) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v11 + 72) = v9;
    *(_QWORD *)(v11 + 80) = v30;
    *(_QWORD *)(v11 + 88) = _swiftEmptyArrayStorage;
    sub_10001B3D8(v11, 46, (uint64_t *)(v8 + 32));
    sub_1000D6B44();
    sub_1000D6B3C(&qword_100129F18);
    v6 = v29;
  }
  else
  {
    *(_QWORD *)(v8 + 56) = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(v8 + 64) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v8 + 32) = v9;
    *(_QWORD *)(v8 + 40) = v30;
    *(_QWORD *)(v8 + 48) = _swiftEmptyArrayStorage;
  }
  sub_1000100D0();
  v25 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(v8 + 96) = v25;
  *(_QWORD *)(v8 + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v8 + 72) = 21313;
  *(_QWORD *)(v8 + 80) = 0xE200000000000000;
  *(_QWORD *)(v8 + 88) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v8 + 136) = v25;
  *(_QWORD *)(v8 + 144) = &protocol witness table for Expression<A>;
  v26 = sub_100019350(34, 0xE100000000000000, v6, v4);
  v28 = v27;
  sub_1000101FC();
  *(_QWORD *)(v8 + 112) = v26;
  *(_QWORD *)(v8 + 120) = v28;
  *(_QWORD *)(v8 + 128) = _swiftEmptyArrayStorage;
  sub_100018F74(v8, v3);
  swift_setDeallocating(v8);
  sub_1000D5D08(&qword_100129F18);
LABEL_11:
  sub_100013308();
}

uint64_t sub_100010B24()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_100010B2C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100010B48@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 120) = result;
  *(_QWORD *)(v5 - 112) = a2;
  *(_QWORD *)(v5 - 144) = v4;
  *(_QWORD *)(v5 - 136) = v3;
  *(_QWORD *)(v5 - 128) = v2;
  return result;
}

uint64_t sub_100010B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

double sub_100010B68@<D0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v3 = v1[10];
  if (!v3)
    return sub_1000E0E88();
  v4 = v1[11];
  v5 = v1[9];
  v6 = sub_10001BE7C(&qword_100128D58);
  v14 = sub_100015A10(v6, v7, v8, v9, v10, v11, v12, v13, v17);
  *(_OWORD *)(v14 + 16) = xmmword_1000EFD90;
  v15 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(v14 + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v14 + 32) = 0x4552454857;
  *(_QWORD *)(v14 + 40) = 0xE500000000000000;
  *(_QWORD *)(v14 + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 96) = sub_10001BE7C(&qword_10012C158);
  *(_QWORD *)(v14 + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v14 + 72) = v5;
  *(_QWORD *)(v14 + 80) = v3;
  *(_QWORD *)(v14 + 88) = v4;
  sub_100013E10();
  sub_10000BFF4();
  sub_100018F74(v14, a1);
  sub_100019D18();
  sub_10001E778();
  return result;
}

void sub_100010C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[5];
  _QWORD *v22;
  uint64_t v23;

  sub_1000100A8();
  v2 = *(_QWORD *)(v0 + 160);
  v23 = v2;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v16 = (uint64_t *)v1;
    v22 = _swiftEmptyArrayStorage;
    sub_10000BFF4();
    sub_1000E0EF4();
    v4 = v2 + 32;
    v5 = _swiftEmptyArrayStorage;
    do
    {
      sub_100019A60(v4, (uint64_t)v18);
      v6 = sub_10001BE7C(&qword_100128D58);
      inited = swift_initStackObject(v6, &v17);
      *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
      *(_QWORD *)(inited + 56) = sub_10001BE7C(&qword_10012BFA8);
      *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
      *(_QWORD *)(inited + 32) = 0x4E4F494E55;
      *(_QWORD *)(inited + 40) = 0xE500000000000000;
      *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
      v9 = v19;
      v8 = v20;
      v10 = sub_10000E858(v18, v19);
      *(_QWORD *)(inited + 96) = v9;
      *(_QWORD *)(inited + 104) = *(_QWORD *)(v8 + 8);
      v11 = sub_10001795C((_QWORD *)(inited + 72));
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v11, v10, v9);
      sub_100018F74(inited, v21);
      sub_100019D18();
      sub_10001E778();
      sub_10000E87C(v18);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      {
        sub_100018F80();
        v5 = v22;
      }
      v12 = v5[2];
      if (v12 >= v5[3] >> 1)
        sub_100018F80();
      sub_1000E1064((uint64_t)v21);
      sub_1000E0EE4();
      __chkstk_darwin(v13);
      sub_10001017C();
      sub_100018A00(v9, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
      sub_10001BF6C(v12, v9, (uint64_t *)&v22);
      sub_10000E87C(v21);
      v5 = v22;
      v4 += 40;
      --v3;
    }
    while (v3);
    sub_10001E05C(&v23);
    sub_100018F74((uint64_t)v5, v16);
    swift_release();
  }
  else
  {
    *(_QWORD *)(v1 + 32) = 0;
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  sub_100013308();
}

double sub_100010E58@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  if (!*(_QWORD *)(*(_QWORD *)(v1 + 128) + 16))
    return sub_1000E0E88();
  v3 = sub_10001BE7C(&qword_100128D58);
  v11 = sub_100015A10(v3, v4, v5, v6, v7, v8, v9, v10, v15);
  *(_OWORD *)(v11 + 16) = xmmword_1000EFD90;
  v12 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(v11 + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v11 + 32) = 0x594220524544524FLL;
  *(_QWORD *)(v11 + 40) = 0xE800000000000000;
  *(_QWORD *)(v11 + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v11 + 56) = v12;
  v13 = sub_1000101B0();
  sub_100005A18(v13, (uint64_t *)(v11 + 72));
  sub_1000059A8();
  sub_100018F74(v11, a1);
  sub_100018640();
  sub_10000585C();
  return result;
}

void sub_100010F1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[5];
  _QWORD *v14;
  uint64_t v15;

  sub_1000100A8();
  v3 = v2;
  v4 = *(_QWORD *)(v0 + 64);
  v15 = v4;
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v14 = _swiftEmptyArrayStorage;
    sub_10000C030();
    sub_1000E0EF4();
    v6 = _swiftEmptyArrayStorage;
    v7 = (unsigned __int8 *)(v4 + 32);
    do
    {
      sub_100008558(v7, v13);
      v14 = v6;
      v9 = v6[2];
      v8 = v6[3];
      if (v9 >= v8 >> 1)
      {
        sub_10000C0D8(v8);
        sub_100018F80();
      }
      sub_1000E1064((uint64_t)v13);
      sub_1000E0EE4();
      __chkstk_darwin(v10);
      sub_1000BE908();
      sub_100018A00(v1, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
      sub_10001BF6C(v9, v1, (uint64_t *)&v14);
      sub_10000E87C(v13);
      v6 = v14;
      v7 += 88;
      --v5;
    }
    while (v5);
    sub_10001E05C(&v15);
    sub_100018F74((uint64_t)v6, v3);
    swift_release();
  }
  else
  {
    sub_1000E0E88();
  }
  sub_100013308();
}

uint64_t sub_100011038()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100011040()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_100011050(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return sub_10000FBEC(v4, v3, a3);
}

uint64_t sub_10001105C()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_100011064()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 192) = v0;
}

uint64_t sub_100011078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_10001108C()
{
  uint64_t v0;

  return specialized ContiguousArray.reserveCapacity(_:)(v0);
}

NSString sub_10001109C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000110A4()
{
  uint64_t v0;

  return swift_setDeallocating(v0);
}

_QWORD *sub_1000110AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  v7 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(v6 - 80) = a5;
  *(_QWORD *)(v6 - 72) = v7;
  return sub_10001795C((_QWORD *)(v6 - 104));
}

_QWORD *sub_1000110E4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = result;
  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000110F0(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

uint64_t sub_100011110@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void sub_100011118()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 488) + 144) = 1;
}

uint64_t sub_100011128()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 152);
  *v4 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_100011148()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 144);
  *v4 = *v1;
  *(_QWORD *)(v3 + 152) = v0;
  return swift_task_dealloc(v5);
}

NSDictionary sub_100011168()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_100011170()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10001118C(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000111A8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = *(_QWORD *)(a1 + v1);
}

uint64_t sub_1000111B4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_1000111C0(uint64_t a1, char a2)
{
  return sub_1000A0168(a1, a2);
}

void sub_1000111DC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 - 8);
  *v2 = *v0;
  *v2 = *v0;
}

uint64_t sub_100011208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, a2, a3, 6, 0);
}

NSArray sub_100011214()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_100011220()
{
  uint64_t v0;

  return type metadata accessor for Optional(255, v0);
}

uint64_t sub_10001122C()
{
  uint64_t v0;

  return type metadata accessor for Optional(255, v0);
}

uint64_t sub_100011238(sqlite3_stmt *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE v28[40];
  _BYTE v29[40];
  char v30[24];
  char v31[40];

  v4 = swift_allocObject(&unk_100120550, 24, 7);
  *(_QWORD *)(v4 + 16) = 0;
  v5 = (uint64_t *)(v4 + 16);
  v6 = (_QWORD *)swift_allocObject(&unk_100120660, 40, 7);
  v6[2] = v4;
  v6[3] = a1;
  v6[4] = a2;
  v7 = sub_10001BE7C(&qword_10012C670);
  inited = swift_initStackObject(v7, v31);
  *(_QWORD *)(inited + 16) = sub_1000E6F98;
  *(_QWORD *)(inited + 24) = v6;
  swift_retain();
  swift_beginAccess(v4 + 16, v30, 1, 0);
  v9 = *(_QWORD *)(v4 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9 < a2)
  {
    v11 = 0;
    v12 = &_swiftEmptyArrayStorage[4];
    while (1)
    {
      *v5 = v9 + 1;
      Cursor.subscript.getter(v9, a1, (uint64_t)v28);
      result = sub_100011470((uint64_t)v28, (uint64_t)v29, &qword_100129578);
      if (!v11)
      {
        v14 = v10[3];
        if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_26;
        v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (v15 <= 1)
          v16 = 1;
        else
          v16 = v15;
        v17 = sub_10001BE7C(&qword_1001296C8);
        v18 = (_QWORD *)swift_allocObject(v17, 40 * v16 + 32, 7);
        v19 = (uint64_t)(j__malloc_size(v18) - 32) / 40;
        v18[2] = v16;
        v18[3] = 2 * v19;
        v20 = (unint64_t)(v18 + 4);
        v21 = v10[3];
        v22 = v21 >> 1;
        if (v10[2])
        {
          if (v18 != v10 || v20 >= (unint64_t)&v10[5 * v22 + 4])
            memmove(v18 + 4, v10 + 4, 40 * v22);
          v10[2] = 0;
        }
        v12 = (_QWORD *)(v20 + 40 * v22);
        v11 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - (v21 >> 1);
        result = swift_release();
        v10 = v18;
      }
      v24 = __OFSUB__(v11--, 1);
      if (v24)
        break;
      sub_100011470((uint64_t)v29, (uint64_t)v12, &qword_100129578);
      v12 += 5;
      v9 = *v5;
      if (*v5 >= a2)
        goto LABEL_21;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v11 = 0;
LABEL_21:
  swift_release();
  result = swift_release();
  v25 = v10[3];
  if (v25 < 2)
    return (uint64_t)v10;
  v26 = v25 >> 1;
  v24 = __OFSUB__(v26, v11);
  v27 = v26 - v11;
  if (!v24)
  {
    v10[2] = v27;
    return (uint64_t)v10;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100011470(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t);

  sub_10001BE7C(a3);
  v4 = sub_100019430();
  v5(v4);
  return a2;
}

void sub_1000114B0(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000114BC(*(_QWORD *)(v1 + 16), *(sqlite3_stmt **)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

void sub_1000114BC(uint64_t a1@<X0>, sqlite3_stmt *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v8 = (uint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v11, 0, 0);
  if (*(_QWORD *)(a1 + 16) >= a3)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_OWORD *)(a4 + 24) = xmmword_1000F2D40;
  }
  else
  {
    swift_beginAccess(v8, &v10, 1, 0);
    v9 = *v8 + 1;
    if (__OFADD__(*v8, 1))
    {
      __break(1u);
    }
    else
    {
      *v8 = v9;
      Cursor.subscript.getter(v9 - 1, a2, a4);
    }
  }
}

uint64_t sub_100011574(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;

  v2 = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  v10 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10001161C(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1]);
      v4 += 2;
      --v3;
    }
    while (v3);
    sub_1000117B4();
    return v10;
  }
  else
  {
    v7 = v2;
    sub_1000117B4();
  }
  return v7;
}

uint64_t sub_10001161C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26[9];

  v7 = *v3;
  sub_10001875C(*(_QWORD *)(*v3 + 40), a2);
  sub_1000100E0();
  String.hash(into:)(v26, a2, a3);
  v8 = sub_10001333C();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  sub_100018664();
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 48);
    v13 = (uint64_t *)(v12 + 16 * v10);
    v14 = v13[1];
    v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_100017E14(*v13, v14, a2, a3) & 1) != 0)
    {
LABEL_7:
      sub_1000101FC();
      sub_10000C028();
      v16 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0;
    }
    v19 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v19;
      sub_100018664();
      if ((v20 & 1) == 0)
        break;
      v21 = (uint64_t *)(v12 + 16 * v10);
      v22 = v21[1];
      v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_100017E14(*v21, v22, a2, a3) & 1) != 0)
        goto LABEL_7;
    }
  }
  sub_10000C028();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  sub_10003638C();
  sub_10000BFF4();
  sub_100011928(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v25 = *v3;
  *v3 = v26[0];
  swift_bridgeObjectRelease(v25);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100011780(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

uint64_t sub_100011788()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_100011798@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_1000117AC(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2);
}

uint64_t sub_1000117B4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000117BC(uint64_t a1)
{
  uint64_t v1;

  return sub_100014360(v1, 1, 1, a1);
}

uint64_t sub_1000117D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  return v4(0, v5, a3, v3);
}

uint64_t sub_1000117E0()
{
  return type metadata accessor for LNBundleRecord(0);
}

uint64_t sub_100011800(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3);
}

BOOL sub_100011808(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100011818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return QueryType.namespace<A>(_:)(v6, v7, v8, v5, a5);
}

uint64_t sub_100011854(uint64_t a1, uint64_t a2)
{
  return swift_task_switch(a1, a2, 0);
}

uint64_t sub_10001185C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001187C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_arrayDestroy(a11, 2);
}

void sub_100011890(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;
  NSObject *v5;

  _os_log_impl(a1, v5, a3, a4, v4, 0xCu);
}

id sub_1000118A0(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 1080));
}

void sub_1000118D4(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001A118(v1, v2, v3, a1);
}

uint64_t Expression.bindings.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

uint64_t sub_1000118EC()
{
  uint64_t v0;

  return swift_allocObject(v0, 121, 7);
}

uint64_t sub_10001190C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(*(_QWORD *)(v1 - 88), v0);
}

void sub_100011920()
{
  sub_1000E7DB8();
}

void sub_100011928(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1000336B8();
  }
  else
  {
    if (v10 > v9)
    {
      sub_1000345C4();
      goto LABEL_22;
    }
    sub_100034B40();
  }
  v11 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, a1, a2);
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v12 & ~v13;
  v14 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v11 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == a1 && v17 == a2;
    if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        v22 = *v20 == a1 && v21 == a2;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (_QWORD *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = a1;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
}

void Cursor.subscript.getter(uint64_t iCol@<X0>, sqlite3_stmt *a2@<X1>, uint64_t a3@<X8>)
{
  sqlite3_int64 v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;
  const unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  Swift::String v13;
  void *object;
  uint64_t v15;
  uint64_t v16;

  if (iCol < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(0xE000000000000000);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(object);
    sub_100017F74((uint64_t)"Fatal error", v15, v16, 0xD000000000000019, 0x80000001000F7020, (uint64_t)"SQLite/Statement.swift");
    __break(1u);
    return;
  }
  if (iCol > 0x7FFFFFFF)
    goto LABEL_13;
  switch(sqlite3_column_type(a2, iCol))
  {
    case 1:
      v6 = sqlite3_column_int64(a2, iCol);
      v7 = (ValueMetadata *)&type metadata for Int64;
      v8 = &protocol witness table for Int64;
      goto LABEL_9;
    case 2:
      v12 = sqlite3_column_double(a2, iCol);
      *(_QWORD *)(a3 + 24) = &type metadata for Double;
      *(_QWORD *)(a3 + 32) = &protocol witness table for Double;
      *(double *)a3 = v12;
      return;
    case 3:
      v9 = sqlite3_column_text(a2, iCol);
      if (!v9)
        goto LABEL_14;
      v10 = String.init(cString:)(v9);
      *(_QWORD *)(a3 + 24) = &type metadata for String;
      *(_QWORD *)(a3 + 32) = &protocol witness table for String;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v11;
      return;
    case 4:
      Cursor.subscript.getter(iCol, a2);
      v7 = &type metadata for Blob;
      v8 = &protocol witness table for Blob;
LABEL_9:
      *(_QWORD *)(a3 + 24) = v7;
      *(_QWORD *)(a3 + 32) = v8;
      *(_QWORD *)a3 = v6;
      break;
    case 5:
      *(_QWORD *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      break;
    default:
      goto LABEL_15;
  }
}

#error "100011F84: call analysis failed (funcsize=315)"

NSString sub_1000121D4()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000121E0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1000121EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100012214()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100019350(34, 0xE100000000000000, v0, v1);
}

uint64_t sub_100012228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  unsigned __int8 v14;
  uint64_t v15;

  return sub_1000D793C((uint64_t)&a14, (uint64_t)&a9, 1, v14, v15);
}

__n128 sub_100012240(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __n128 a17)
{
  __n128 result;

  result = a17;
  a1[1] = a17;
  return result;
}

void sub_100012254(char *a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  id v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  id v86;
  unint64_t v87;
  uint64_t v88;
  id v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[2];
  char v101[32];

  v4 = sub_10001BE7C(&qword_10012AD50);
  __chkstk_darwin(v4);
  v92 = (uint64_t)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v94 = v6;
  v95 = v7;
  __chkstk_darwin(v6);
  v93 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.Encoding(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v13);
  v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v91 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v90 = (char *)&v84 - v21;
  v22 = __chkstk_darwin(v20);
  v96 = (char *)&v84 - v23;
  __chkstk_darwin(v22);
  v97 = (char *)&v84 - v24;
  v98 = swift_allocObject(&unk_10011DDA8, 24, 7);
  *(_QWORD *)(v98 + 16) = a2;
  v25 = (void *)objc_opt_self(NSXPCConnection);
  _Block_copy(a2);
  v26 = objc_msgSend(v25, "currentConnection");
  if (!v26)
    goto LABEL_4;
  v27 = v26;
  v89 = a1;
  v28 = *(_QWORD *)&a1[OBJC_IVAR____TtC10LinkDaemon8Registry_store] + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_URL;
  swift_beginAccess(v28, v101, 0, 0);
  sub_100019FA0(v28, (uint64_t)v15, &qword_100128740);
  if (sub_10001C93C((uint64_t)v15, 1, v16) == 1)
  {

    sub_1000131E0((uint64_t)v15, &qword_100128740);
LABEL_4:
    v29 = type metadata accessor for RegistryError(0);
    sub_10007EC94(&qword_10012AD08, type metadata accessor for RegistryError);
    v31 = swift_allocError(v29, v30, 0, 0);
    swift_storeEnumTagMultiPayload(v32, v29, 4);
    v33 = (void *)_convertErrorToNSError(_:)(v31);
    ((void (**)(_QWORD, _QWORD, void *))a2)[2](a2, 0, v33);

    swift_errorRelease(v31);
    goto LABEL_7;
  }
  v34 = v17;
  v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v97, v15, v16);
  v36 = (uint64_t)v96;
  URL.deletingLastPathComponent()(v35);
  v37 = sub_100012AF0(v36, 0);
  v39 = v38;
  static String.Encoding.utf8.getter();
  v88 = String.data(using:allowLossyConversion:)(v12, 0, v37, v39);
  v41 = v40;
  swift_bridgeObjectRelease(v39);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v41 >> 60 == 15)
  {
    v42 = type metadata accessor for RegistryError(0);
    sub_10007EC94(&qword_10012AD08, type metadata accessor for RegistryError);
    v44 = swift_allocError(v42, v43, 0, 0);
    swift_storeEnumTagMultiPayload(v45, v42, 4);
    v46 = (void *)_convertErrorToNSError(_:)(v44);
    ((void (**)(_QWORD, _QWORD, void *))a2)[2](a2, 0, v46);

    swift_errorRelease(v44);
    v47 = *(void (**)(char *, uint64_t))(v34 + 8);
    v47(v96, v16);
    v47(v97, v16);
  }
  else
  {
    v48 = qword_100127EC8;
    v49 = v89;
    if (v48 != -1)
      swift_once(&qword_100127EC8, sub_100099764);
    v50 = v94;
    v51 = sub_100012A40(v94, (uint64_t)qword_10012D1A8);
    v52 = v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v93, v51, v50);
    v86 = v49;

    v53 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v54 = v90;
    v55 = v16;
    v53(v90, v96, v16);
    v89 = v27;
    v56 = Logger.logObject.getter(v89);
    v57 = static os_log_type_t.default.getter();
    v58 = os_log_type_enabled(v56, v57);
    v87 = v41;
    if (v58)
    {
      v59 = swift_slowAlloc(18, -1);
      v60 = swift_slowAlloc(32, -1);
      v100[0] = v60;
      *(_DWORD *)v59 = 67240450;
      v85 = v53;
      v61 = v89;
      LODWORD(v99) = objc_msgSend(v89, "processIdentifier");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 4);

      *(_WORD *)(v59 + 8) = 2080;
      sub_10007EC94((unint64_t *)&qword_1001286B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
      v63 = dispatch thunk of CustomStringConvertible.description.getter(v55, v62);
      v65 = v64;
      v99 = sub_10000FBEC(v63, v64, v100);
      v53 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
      swift_bridgeObjectRelease(v65);
      v90 = *(char **)(v34 + 8);
      ((void (*)(char *, uint64_t))v90)(v54, v55);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Granting %{public}d read access to %s", (uint8_t *)v59, 0x12u);
      swift_arrayDestroy(v60, 1);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      (*(void (**)(char *, uint64_t))(v95 + 8))(v93, v94);
    }
    else
    {

      v90 = *(char **)(v34 + 8);
      ((void (*)(char *, uint64_t))v90)(v54, v55);

      (*(void (**)(char *, uint64_t))(v95 + 8))(v52, v50);
    }
    v53(v91, v97, v55);
    v66 = objc_allocWithZone((Class)NSSecurityScopedURLWrapper);
    v68 = v87;
    v67 = v88;
    sub_10001EBF8(v88, v87);
    sub_100012A58();
    v70 = v69;
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    v73 = v72;
    v74 = v55;
    v75 = v89;
    v76 = sub_10000DEC8(v71, v72, 0);
    swift_bridgeObjectRelease(v73);
    v77 = type metadata accessor for TaskPriority(0);
    v78 = v92;
    sub_100014360(v92, 1, 1, v77);
    v79 = swift_allocObject(&unk_10011DDD0, 72, 7);
    *(_QWORD *)(v79 + 16) = 0;
    *(_QWORD *)(v79 + 24) = 0;
    *(_BYTE *)(v79 + 32) = v76 & 1;
    v80 = v86;
    *(_QWORD *)(v79 + 40) = v86;
    *(_QWORD *)(v79 + 48) = sub_10000E150;
    *(_QWORD *)(v79 + 56) = v98;
    *(_QWORD *)(v79 + 64) = v70;
    v81 = v80;
    swift_retain();
    v82 = v70;
    sub_100029394(v78, (uint64_t)&unk_10012B2E0, v79);

    swift_release();
    sub_100013158(v67, v68);

    v83 = (void (*)(char *, uint64_t))v90;
    ((void (*)(char *, uint64_t))v90)(v96, v74);
    v83(v97, v74);
  }
LABEL_7:
  swift_release();
  _Block_release(a2);
}

uint64_t sub_100012A40(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

void sub_100012A58()
{
  void *v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSURL *v10;
  void *v11;
  void *v12;
  Class isa;
  uint64_t v14;

  sub_100016714();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "initWithURL:readonly:scope:", v12, v7 & 1, isa);

  sub_10001EA88(v5, v3);
  v14 = sub_10001DCF0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v9, v14);
  sub_1000110FC();
}

uint64_t sub_100012AF0(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t *)&APP_SANDBOX_READ;
  if ((a2 & 1) != 0)
    v11 = (uint64_t *)&APP_SANDBOX_READ_WRITE;
  v12 = *v11;
  v13 = URL.path.getter(v8);
  v15 = v14;
  v16 = SANDBOX_EXTENSION_DEFAULT;
  objc_msgSend(v3, "auditToken");
  v56 = v59;
  v57 = v58;
  v17 = String.utf8CString.getter(v13, v15);
  swift_bridgeObjectRelease(v15);
  v58 = v57;
  v59 = v56;
  v18 = (void *)sandbox_extension_issue_file_to_process(v12, v17 + 32, v16, &v58);
  v19 = swift_release();
  if (v18)
  {
    v20 = String.init(cString:)(v18);
    free(v18);
  }
  else
  {
    v21 = v3;
    v22 = errno.getter(v19);
    v23 = v22;
    if (v22 == 2)
      v24 = 0;
    else
      v24 = v22;
    if (qword_100127E70 != -1)
      swift_once(&qword_100127E70, sub_100090544);
    v25 = type metadata accessor for Logger(0);
    sub_100012A40(v25, (uint64_t)qword_10012D0C8);
    v26 = v10;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
    v27 = v21;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      v54 = v7;
      v55 = v6;
      v31 = sub_100011780(32);
      v32 = (_QWORD *)sub_100011780(8);
      *(_QWORD *)&v56 = sub_100011780(64);
      v60 = v56;
      *(_DWORD *)v31 = 138412802;
      v53 = v30;
      v33 = sub_100060768();
      v34 = sub_1000176B0((uint64_t)&type metadata for IssueSandboxExceptionError, v33);
      *(_DWORD *)v35 = v24;
      *(_BYTE *)(v35 + 4) = v23 == 2;
      v36 = _swift_stdlib_bridgeErrorToNSError(v34);
      LODWORD(v57) = v24;
      v37 = v36;
      *(_QWORD *)&v58 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, (char *)&v58 + 8);
      *v32 = v37;
      *(_WORD *)(v31 + 12) = 2080;
      objc_msgSend(v27, "auditToken");
      type metadata accessor for audit_token_t(0);
      v39 = String.init<A>(describing:)(&v58, v38);
      v41 = v40;
      *(_QWORD *)&v58 = sub_10000FBEC(v39, v40, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, (char *)&v58 + 8);

      v42 = v41;
      v24 = v57;
      v43 = swift_bridgeObjectRelease(v42);
      *(_WORD *)(v31 + 22) = 2080;
      v44 = URL.path.getter(v43);
      v46 = v45;
      *(_QWORD *)&v58 = sub_10000FBEC(v44, v45, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, (char *)&v58 + 8);
      swift_bridgeObjectRelease(v46);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v26, v55);
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v53, "Failed to issue sandbox extension: %@. auditToken %s, path %s", (uint8_t *)v31, 0x20u);
      sub_10001BE7C(&qword_100128160);
      swift_arrayDestroy(v32, 1);
      sub_1000133FC((uint64_t)v32);
      v47 = v56;
      swift_arrayDestroy(v56, 2);
      sub_1000133FC(v47);
      sub_1000133FC(v31);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v6);
    }

    v20 = v23 == 2;
    v48 = sub_100060768();
    v49 = sub_1000176B0((uint64_t)&type metadata for IssueSandboxExceptionError, v48);
    *(_DWORD *)v50 = v24;
    *(_BYTE *)(v50 + 4) = v20;
    swift_willThrow(v49);
  }
  return v20;
}

unint64_t sub_100012F00()
{
  unint64_t result;

  result = qword_100128748;
  if (!qword_100128748)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100128748);
  }
  return result;
}

double sub_100012F3C()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  _QWORD v13[3];

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_100011870();
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v11, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_100013120((uint64_t)v11, (uint64_t)&v12, &qword_100128A40);
  if (!v13[2])
  {
    sub_1000131E0((uint64_t)&v12, &qword_100128A40);
    return 300.0;
  }
  if ((swift_dynamicCast(&v10, &v12, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
    return 300.0;
  v3 = v10;
  if (qword_100127D80 != -1)
    swift_once(&qword_100127D80, sub_100063EF0);
  v4 = sub_10000C05C();
  v5 = sub_100012A40(v4, (uint64_t)qword_10012CD38);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)sub_100011780(12);
    *(_DWORD *)v8 = 134217984;
    v12 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, v13);
    sub_1000100C0((void *)&_mh_execute_header, v6, v7, "Using user defined audit delay %lds", v8);
    sub_1000133FC((uint64_t)v8);
  }

  return (double)v3;
}

void sub_100013120(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10001BE7C(a3);
  sub_1000137A0(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_10000BFBC();
}

uint64_t sub_100013158(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10001EA88(result, a2);
  return result;
}

uint64_t sub_10001316C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10001BE7C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1000131A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10001BE7C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_10000BFBC();
}

void sub_1000131E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_10001BE7C(a2);
  sub_10001A46C(v2);
  sub_10000BFBC();
}

void == infix<A>(_:_:)()
{
  sub_1000DB824();
  sub_100013224();
  sub_100017714();
}

{
  sub_1000DB4F0();
  sub_100008744();
  sub_10001B3F4();
}

{
  sub_1000DB4F0();
  sub_1000D92DC();
  sub_10001B3F4();
}

{
  sub_1000DB4F0();
  sub_1000D93D0();
  sub_10001B3F4();
}

{
  sub_1000DB4F0();
  sub_1000D94C4();
  sub_10001B3F4();
}

#error "100013244: call analysis failed (funcsize=37)"

uint64_t sub_1000132C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100013320(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1);
}

id sub_100013328(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_100013330(uint64_t a1)
{
  uint64_t v1;

  return swift_dynamicCastObjCClass(v1, a1);
}

Swift::Int sub_10001333C()
{
  return Hasher._finalize()();
}

uint64_t sub_100013354()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = v0;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100013360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 7);
}

uint64_t sub_100013368()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

BOOL sub_100013370@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100013394(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  return sub_10000FBEC(a1, a2, (uint64_t *)va);
}

id sub_1000133A0(id a1)
{
  return a1;
}

uint64_t sub_1000133B4()
{
  uint64_t v0;
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_1000133C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v3, v0, v1);
}

uint64_t sub_1000133D4()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

uint64_t sub_1000133E0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

void sub_1000133E8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_1000131A8((uint64_t)va, a2);
}

uint64_t sub_1000133F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DB4BC(a1, a2, a3, 0, 0xE000000000000000);
}

uint64_t sub_1000133FC(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

uint64_t sub_100013408()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 136));
}

void sub_100013430()
{
  uint64_t v0;

}

void sub_100013438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t *v5;
  va_list va;

  va_start(va, a5);
  sub_100019FCC(a1, (uint64_t)va, v5);
}

uint64_t sub_100013444()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100013450()
{
  uint64_t v0;
  uint64_t v1;

  sub_100014360(v1, 0, 1, v0);
  return v1;
}

void sub_100013478()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_100013488(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, a1, v2);
}

uint64_t sub_10001349C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 8);
}

uint64_t sub_1000134B8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000134D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for Expression(0, v4, a3, a4);
}

uint64_t sub_100013534()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_100013540()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_100013548(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return String.hash(into:)(va, v2, v1);
}

uint64_t sub_100013558(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0);
}

uint64_t sub_100013568()
{
  uint64_t v0;

  return v0;
}

BOOL sub_100013588(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100013594@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000C939C(v1, a1);
}

uint64_t sub_10001359C()
{
  uint64_t v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_1000135A4()
{
  uint64_t v0;

  return swift_arrayInitWithCopy(v0);
}

uint64_t sub_1000135B8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_1000135C4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

uint64_t sub_1000135D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

uint64_t sub_1000135FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 96) = result;
  *(_QWORD *)(v5 - 88) = a2;
  *(_QWORD *)(v5 - 120) = v4;
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 104) = v2;
  return result;
}

uint64_t sub_100013644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0);
}

uint64_t sub_100013654()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

BOOL sub_100013660(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

BOOL sub_100013670(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_100013680()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
  sub_10009A328();
}

void sub_100013690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a10);
  sub_100019FA0(v10 + v12, (uint64_t)va, v11);
}

uint64_t sub_1000136A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _UNKNOWN **v20;

  v19 = sub_1000DB7A4(a1, a2, a3, a4, a5, a6);
  v20 = &protocol witness table for Expression<A>;
  v16 = a1;
  v17 = (void *)a2;
  v18 = a3;
  sub_10000BFF4();
  sub_100013E10();
  sub_10000EC68();
  v10._countAndFlagsBits = 40;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  sub_10000E858(&v16, v19);
  v11 = v16;
  v12 = v17;
  sub_10000BFF4();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  sub_1000101FC();
  v14._countAndFlagsBits = 41;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  sub_10000EC68();
  sub_10000E87C(&v16);
  return a4;
}

uint64_t sub_10001377C(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100013794()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 280));
}

uint64_t sub_1000137A0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void sub_1000137AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

id sub_1000137BC@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_1000137C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0);
}

uint64_t sub_1000137D0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10000FBEC(a1, a2, (uint64_t *)(v2 - 80));
}

uint64_t sub_1000137DC()
{
  return swift_willThrow();
}

uint64_t sub_1000137E4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16))(v0, v1);
}

uint64_t sub_1000137F4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

BOOL sub_100013800(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001381C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  unsigned __int8 v15;

  return sub_1000D793C((uint64_t)&a14, (uint64_t)&a9, 1, v15, v14);
}

double sub_100013834@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double result;

  v8[7] = a1;
  v8[8] = a4;
  v8[4] = v7;
  v8[5] = v6;
  v8[6] = v5;
  type metadata accessor for ScalarQuery(0, v4, a2, a3);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_100013864(__n128 *a1, __n128 a2)
{
  uint64_t v2;

  a1[1] = a2;
  return type metadata accessor for Optional(255, v2);
}

uint64_t sub_100013874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = sub_10001BE7C(&qword_100128740);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v28 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v28 - v13;
  if (qword_100127F50 != -1)
    swift_once(&qword_100127F50, sub_1000C45D8);
  Row.get<A>(_:)();
  v15 = v29;
  if (qword_100127CD8 != -1)
    swift_once(&qword_100127CD8, sub_10004D6D4);
  Row.get<A>(_:)();
  v18 = v29;
  v17 = v30;
  if (qword_100127F38 != -1)
    swift_once(&qword_100127F38, sub_1000C441C);
  Row.get<A>(_:)(qword_10012D490, qword_10012D498, qword_10012D4A0, a1, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v16, (uint64_t)v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38,
    v39);
  v28 = v18;
  v19 = v30;
  if (v30)
  {
    URL.init(fileURLWithPath:)(v29, v30);
    v20 = type metadata accessor for URL(0);
    sub_100014360((uint64_t)v14, 0, 1, v20);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v21 = type metadata accessor for URL(0);
    sub_100014360((uint64_t)v14, 1, 1, v21);
  }
  if (qword_100127CE8 != -1)
    swift_once(&qword_100127CE8, sub_10004D798);
  Row.get<A>(_:)();
  v24 = v29;
  v25 = v30;
  sub_100019FCC((uint64_t)v14, (uint64_t)v12, &qword_100128740);
  sub_10000795C(0, &qword_10012A710, LNActionMetadata_ptr);
  v26 = type metadata accessor for URL(0);
  sub_100014360((uint64_t)v9, 1, 1, v26);
  v27 = (void *)static LNActionMetadata.fromJSON(_:bundleMetadataVersion:bundleURL:effectiveBundleIdentifier:)(v24, v25, v15, v9, 0);
  sub_1000131A8((uint64_t)v9, &qword_100128740);
  swift_bridgeObjectRelease(v25);
  sub_10004D080((uint64_t)v28, v17, (uint64_t)v12, v27, a3);
  sub_1000131A8((uint64_t)v14, &qword_100128740);
  v22 = type metadata accessor for LNActionRecord(0);
  return sub_100014360((uint64_t)a3, 0, 1, v22);
}

void Row.get<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_10000C038();
  v37 = v1;
  v38 = v2;
  v4 = v3;
  v36 = v5;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v34 = v12;
  v13 = type metadata accessor for Optional(0, v3);
  v14 = *(_QWORD *)(v13 - 8);
  sub_10001907C();
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - v16;
  v20 = type metadata accessor for Expression(0, v13, v18, v19);
  v35 = v11;
  v39 = v11;
  v40 = v9;
  v41 = v7;
  v23 = type metadata accessor for Expression(0, v4, v21, v22);
  sub_10000EC68();
  swift_bridgeObjectRetain(v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v20);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v23);
  ExpressionType.init<A>(_:)((uint64_t)&v39, v20, v23, WitnessTable, v25);
  Row.get<A>(_:)(v42, v43, v44, v36, v37, v4, v38, v26, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
  sub_100007398();
  sub_1000059B0();
  if (!v0)
  {
    v27 = v14;
    v29 = v34;
    v28 = v35;
    if (sub_10001C93C((uint64_t)v17, 1, v4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v13);
      v30 = sub_1000E02D0();
      sub_1000176B0((uint64_t)&type metadata for QueryError, v30);
      *(_QWORD *)v31 = v28;
      *(_QWORD *)(v31 + 8) = v9;
      *(_QWORD *)(v31 + 16) = 0;
      *(_BYTE *)(v31 + 24) = 3;
      v32 = sub_10000EC68();
      swift_willThrow(v32);
    }
    else
    {
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v29, v17, v4);
    }
  }
  sub_1000117E8();
}

uint64_t sub_100013DF4(uint64_t a1, uint64_t a2)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
}

uint64_t sub_100013E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_100013E10()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

unint64_t sub_100013E3C()
{
  uint64_t v0;

  return sub_100016064(v0);
}

uint64_t sub_100013E4C()
{
  return swift_willThrow();
}

id sub_100013E54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;

  return objc_msgSend(v9, a2, v10, &a9);
}

BOOL sub_100013E64(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100013E74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000132C4(v2, a2);
}

void sub_100013E7C(char a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  sub_10001A720(a1, a2, 1, v2, v3, v4);
}

void sub_100013EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_10001A118(v7, 542001440, 0xE400000000000000, (uint64_t *)va);
}

void Row.get<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD v61[9];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  sub_10000C038();
  a19 = v21;
  a20 = v22;
  v65 = v23;
  v66 = v20;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_1000133E0(v34, v32);
  v38 = sub_1000140E4(v35, v33, v31);
  v40 = v39;
  sub_1000117B4();
  if ((v40 & 1) == 0)
  {
    sub_100014128(v38, v29, v27, v25, v37);
LABEL_11:
    sub_1000117E8();
    return;
  }
  v62 = v37;
  v63 = v29;
  v41 = sub_1000101B0();
  v42 = sub_10001448C(v41);
  v43 = sub_1000059A8();
  __chkstk_darwin(v43);
  v61[2] = v27;
  v61[3] = v25;
  v64 = v35;
  v61[4] = v35;
  v61[5] = v33;
  v44 = v66;
  v61[6] = v65;
  sub_10001455C((uint64_t (*)(_QWORD *))sub_1000146CC, (uint64_t)v61, (uint64_t)v42);
  v46 = v45;
  v47 = v45[2];
  if (v47 == 1)
  {
    v53 = v27;
    v54 = v45[4];
    v55 = v45[5];
    sub_10000BFF4();
    sub_10000EC84();
    v56 = sub_1000140E4(v54, v55, v31);
    v58 = v57;
    sub_1000101FC();
    if ((v58 & 1) == 0)
    {
      sub_100014128(v56, v63, v53, v25, v62);
      goto LABEL_11;
    }
    __break(1u);
  }
  else
  {
    if (v47)
    {
      v59 = sub_1000E02D0();
      sub_1000176B0((uint64_t)&type metadata for QueryError, v59);
      *(_QWORD *)v60 = v64;
      *(_QWORD *)(v60 + 8) = v33;
      *(_QWORD *)(v60 + 16) = v46;
      *(_BYTE *)(v60 + 24) = 2;
      sub_10000EC68();
      goto LABEL_10;
    }
    sub_10000EC84();
    sub_1000101EC(v31);
    sub_10000EC68();
    v48 = sub_10001448C(v31);
    sub_1000059A8();
    a10 = v48;
    sub_1000DF8F4(&a10);
    v49 = v64;
    if (!v44)
    {
      sub_1000059A8();
      v50 = a10;
      v51 = sub_1000E02D0();
      sub_1000176B0((uint64_t)&type metadata for QueryError, v51);
      *(_QWORD *)v52 = v49;
      *(_QWORD *)(v52 + 8) = v33;
      *(_QWORD *)(v52 + 16) = v50;
      *(_BYTE *)(v52 + 24) = 1;
LABEL_10:
      swift_willThrow();
      goto LABEL_11;
    }
  }
  swift_release(a10);
  __break(1u);
}

uint64_t sub_1000140E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = sub_100016064(a1), (v5 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v4);
  else
    return 0;
}

uint64_t sub_100014128@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  _BYTE v27[40];

  v26 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3);
  __chkstk_darwin(AssociatedTypeWitness);
  v24 = (char *)&v24 - v9;
  v10 = swift_getAssociatedTypeWitness(255, a4, a3);
  v11 = type metadata accessor for Optional(0, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v24 - v14;
  v16 = *(_QWORD *)(v10 - 8);
  result = __chkstk_darwin(v13);
  v19 = (char *)&v24 - v18;
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(a2 + 16) <= a1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  sub_100019FA0(a2 + 40 * a1 + 32, (uint64_t)v27, &qword_100129578);
  v20 = sub_10001BE7C(&qword_100129578);
  if (swift_dynamicCast(v15, v27, v20, v10, 6))
  {
    sub_100014360((uint64_t)v15, 0, 1, v10);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v15, v10);
    v21 = v24;
    (*(void (**)(char *, uint64_t, uint64_t))(a4 + 48))(v19, a3, a4);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v10);
    v22 = v26;
    v23 = swift_dynamicCast(v26, v21, AssociatedTypeWitness, a3, 6) ^ 1;
  }
  else
  {
    v23 = 1;
    sub_100014360((uint64_t)v15, 1, 1, v10);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    v22 = v26;
  }
  return sub_100014360(v22, v23, 1, a3);
}

uint64_t sub_100014360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

void sub_10001436C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  static String.fromDatatypeValue(_:)(*a1, a1[1]);
  *a2 = v3;
  a2[1] = v4;
}

void static String.fromDatatypeValue(_:)(uint64_t a1, uint64_t a2)
{
  sub_10001AD3C(a1, a2);
  sub_10001B840();
  sub_10000BFBC();
}

uint64_t sub_1000143B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000143D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014360(a1, 1, 1, a4);
}

void sub_1000143E0()
{
  void *v0;

}

void sub_1000143EC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_100014408()
{
  uint64_t v0;

  return v0;
}

id sub_100014430()
{
  void *v0;

  return v0;
}

uint64_t sub_10001443C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(a2 - 256) = result;
  *(_QWORD *)(v2 - 96) = result;
  return result;
}

double sub_100014448(uint64_t a1, uint64_t a2)
{
  return sub_1000D6068(a1, a2);
}

void sub_100014468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Connection.run(_:_:)(a2, a3, a4);
}

uint64_t sub_100014480(uint64_t a1)
{
  return sub_1000E9F7C(a1, 0x13u);
}

_QWORD *sub_10001448C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  v4 = (_QWORD *)sub_1000100C8(v3, 16 * v1 + 32);
  j__malloc_size(v4);
  sub_10001B178();
  v4[2] = v1;
  v4[3] = v5;
  v6 = sub_100014784((uint64_t)&v9, v4 + 4, v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_1000358EC(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

void sub_10001455C(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD *v20;

  v4 = a3;
  v18 = *(_QWORD *)(a3 + 16);
  if (v18)
  {
    v5 = a1;
    v6 = 0;
    v7 = (uint64_t *)(a3 + 40);
    v8 = _swiftEmptyArrayStorage;
    while (v6 < *(_QWORD *)(v4 + 16))
    {
      v10 = *(v7 - 1);
      v9 = *v7;
      v19[0] = v10;
      v19[1] = v9;
      swift_bridgeObjectRetain(v9);
      v11 = v5(v19);
      if (v3)
      {
        swift_release(v8);
        swift_bridgeObjectRelease(v4);
        v15 = v9;
        goto LABEL_15;
      }
      if ((v11 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
        v20 = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10001573C();
          v8 = v20;
        }
        v13 = v8[2];
        if (v13 >= v8[3] >> 1)
        {
          sub_10001573C();
          v8 = v20;
        }
        v8[2] = v13 + 1;
        v14 = &v8[2 * v13];
        v14[4] = v10;
        v14[5] = v9;
        v4 = a3;
        v5 = a1;
      }
      else
      {
        swift_bridgeObjectRelease(v9);
      }
      ++v6;
      v7 += 2;
      if (v18 == v6)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    v15 = v4;
LABEL_15:
    swift_bridgeObjectRelease(v15);
  }
}

uint64_t sub_1000146CC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000146F0(a1, *(_QWORD *)(v1 + 32), *(void **)(v1 + 40)) & 1;
}

uint64_t sub_1000146F0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  Swift::String v5;
  Swift::String v6;

  v3 = a3;
  swift_bridgeObjectRetain(a3);
  v5._countAndFlagsBits = a2;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v3);
  v6._countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  LOBYTE(v3) = String.hasSuffix(_:)(v6);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v3 & 1;
}

uint64_t sub_100014784(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100014980(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  _BOOL8 v73;
  Swift::Int v74;
  unint64_t v75;
  char v76;
  Swift::Bool v77;
  unint64_t v78;
  char v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(_QWORD **, _QWORD);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t result;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD v147[5];
  _QWORD *v148;
  uint64_t v149[3];
  uint64_t v150;
  __int128 v151[2];
  _QWORD *v152;
  _QWORD v153[3];
  uint64_t v154;
  uint64_t v155;
  _QWORD v156[3];
  uint64_t v157;
  uint64_t v158;
  char v159[24];
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[8];
  uint64_t v163;
  _QWORD v164[8];
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v2 = v1;
  v4 = swift_allocObject(&unk_10011FFC8, 24, 7);
  v5 = swift_allocObject(&unk_10011FFF0, 24, 7);
  *(_QWORD *)(v4 + 16) = &_swiftEmptyDictionarySingleton;
  v129 = (_QWORD *)(v4 + 16);
  v134 = (_QWORD *)v5;
  *(_QWORD *)(v5 + 16) = 0;
  v6 = (_QWORD *)(v5 + 16);
  v7 = a1[3];
  v8 = a1[4];
  v139 = a1;
  sub_10000E858(a1, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v160, v7, v8);
  v9 = v161;
  swift_bridgeObjectRetain(v161);
  sub_1000E0204(&v160);
  v130 = *(_QWORD *)(v9 + 16);
  if (!v130)
  {
    swift_bridgeObjectRelease(v9);
LABEL_90:
    swift_beginAccess(v129, &v148, 0, 0);
    v93 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRetain(v93);
    swift_release();
    swift_release();
    return v93;
  }
  v133 = v9 + 32;
  v127 = v6;
  swift_beginAccess(v6, v159, 1, 0);
  v10 = 0;
  v131 = v9;
  v132 = (_QWORD *)v4;
  while (2)
  {
    if (v10 >= *(_QWORD *)(v9 + 16))
    {
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
      goto LABEL_102;
    }
    v135 = v10;
    sub_100019A60(v133 + 40 * v10, (uint64_t)v156);
    v11 = v157;
    v12 = v158;
    sub_10000E858(v156, v157);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    v15 = v14;
    swift_bridgeObjectRelease(v16);
    v17 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0)
      v17 = v13 & 0xFFFFFFFFFFFFLL;
    if (!v17)
    {
      swift_bridgeObjectRelease(v15);
      v141 = _swiftEmptyArrayStorage;
      goto LABEL_36;
    }
    v136 = v2;
    v18 = 7;
    if (((v15 >> 60) & ((v13 & 0x800000000000000) == 0)) != 0)
      v18 = 11;
    v128 = v18 | (v17 << 16);
    v19 = 4 * v17;
    v20 = 15;
    v21 = 15;
    v22 = 15;
    v141 = _swiftEmptyArrayStorage;
    v140 = 4 * v17;
    do
    {
      v23 = String.subscript.getter(v20, v13, v15);
      if (v23 == 46 && v24 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease(0xE100000000000000);
      }
      else
      {
        v26 = v24;
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, 46, 0xE100000000000000, 0);
        swift_bridgeObjectRelease(v26);
        if ((v27 & 1) == 0)
        {
          v20 = String.index(after:)(v20, v13, v15);
          continue;
        }
      }
      if (v21 >> 14 != v20 >> 14)
      {
        if (v20 >> 14 < v21 >> 14)
        {
          __break(1u);
          goto LABEL_97;
        }
        v28 = String.subscript.getter(v21, v20);
        v30 = v29;
        v32 = v31;
        v34 = v33;
        if ((swift_isUniquelyReferenced_nonNull_native(v141) & 1) == 0)
        {
          sub_100015674();
          v141 = v37;
        }
        v35 = v141[2];
        if (v35 >= v141[3] >> 1)
        {
          sub_100015674();
          v141 = v38;
        }
        v141[2] = v35 + 1;
        v36 = &v141[4 * v35];
        v36[4] = v28;
        v36[5] = v30;
        v36[6] = v32;
        v36[7] = v34;
        v19 = v140;
      }
      v20 = String.index(after:)(v20, v13, v15);
      v21 = v20;
      v22 = v20;
    }
    while (v19 != v20 >> 14);
    if (v19 == v21 >> 14)
    {
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      if (v19 < v22 >> 14)
        goto LABEL_100;
      v39 = String.subscript.getter(v22, v128);
      v41 = v40;
      v43 = v42;
      v45 = v44;
      swift_bridgeObjectRelease(v15);
      if ((swift_isUniquelyReferenced_nonNull_native(v141) & 1) == 0)
      {
        sub_100015674();
        v141 = v121;
      }
      v46 = v141[2];
      if (v46 >= v141[3] >> 1)
      {
        sub_100015674();
        v141 = v122;
      }
      v141[2] = v46 + 1;
      v47 = &v141[4 * v46];
      v47[4] = v39;
      v47[5] = v41;
      v47[6] = v43;
      v47[7] = v45;
    }
    v2 = v136;
LABEL_36:
    v48 = sub_1000DB99C((uint64_t)v141);
    swift_bridgeObjectRelease(v141);
    if (!v48[2])
      goto LABEL_98;
    if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
    {
      sub_1000E0E04();
      v48 = v120;
    }
    v49 = v48[2];
    if (!v49)
      goto LABEL_99;
    v137 = v2;
    v50 = v49 - 1;
    v51 = &v48[2 * v50];
    v53 = v51[4];
    v52 = v51[5];
    v48[2] = v50;
    v148 = v48;
    swift_bridgeObjectRetain(v48);
    v54 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
    sub_10001C2C0((unint64_t *)&qword_100129568, (uint64_t *)&unk_10012AD80, (uint64_t)&protocol conformance descriptor for [A]);
    v56 = BidirectionalCollection<>.joined(separator:)(46, 0xE100000000000000, v54, v55);
    v58 = v57;
    swift_bridgeObjectRelease(v48);
    if (v53 == 42 && v52 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease(0xE100000000000000);
LABEL_52:
      sub_100019A60((uint64_t)v139, (uint64_t)v153);
      v81 = sub_10001BE7C(&qword_100128D58);
      v82 = swift_allocObject(v81, 72, 7);
      *(_OWORD *)(v82 + 16) = xmmword_1000EFAE0;
      *(_QWORD *)(v82 + 56) = sub_10001BE7C(&qword_10012BFA8);
      *(_QWORD *)(v82 + 64) = &protocol witness table for Expression<A>;
      *(_QWORD *)(v82 + 32) = 42;
      *(_QWORD *)(v82 + 40) = 0xE100000000000000;
      *(_QWORD *)(v82 + 48) = _swiftEmptyArrayStorage;
      v83 = v154;
      v84 = v155;
      sub_100016184((uint64_t)v153, v154);
      v85 = (void (*)(_QWORD **, _QWORD))(*(uint64_t (**)(_QWORD **, uint64_t, uint64_t))(v84 + 32))(&v148, v83, v84);
      *(_BYTE *)v86 = 0;
      v87 = *(_QWORD *)(v86 + 8);
      *(_QWORD *)(v86 + 8) = v82;
      swift_bridgeObjectRelease(v87);
      v85(&v148, 0);
      v88 = sub_10001BE7C(&qword_10012C218);
      v89 = swift_allocObject(v88, 72, 7);
      *(_OWORD *)(v89 + 16) = xmmword_1000EFAE0;
      v142 = v89;
      sub_100019A60((uint64_t)v153, v89 + 32);
      v90 = v139[3];
      v91 = v139[4];
      sub_10000E858(v139, v90);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v91 + 16))(v162, v90, v91);
      v92 = v163;
      v167 = v163;
      swift_bridgeObjectRetain(v163);
      sub_1000E0204(v162);
      v93 = *(_QWORD *)(v92 + 16);
      if (v93)
      {
        v152 = _swiftEmptyArrayStorage;
        sub_1000D6E84();
        v94 = v92 + 32;
        v95 = v152;
        do
        {
          sub_100019FA0(v94, (uint64_t)&v148, &qword_10012C230);
          LOBYTE(v143) = (_BYTE)v148;
          sub_100019A60((uint64_t)v149, (uint64_t)&v144);
          sub_100019A60((uint64_t)&v150, (uint64_t)v147);
          sub_100019A48(&v144, (uint64_t)v151);
          sub_10000E87C(v147);
          sub_1000131A8((uint64_t)&v148, &qword_10012C230);
          if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0)
          {
            sub_1000D6E84();
            v95 = v152;
          }
          v96 = v95[2];
          if (v96 >= v95[3] >> 1)
          {
            sub_1000D6E84();
            v95 = v152;
          }
          v95[2] = v96 + 1;
          sub_100019A48(v151, (uint64_t)&v95[5 * v96 + 4]);
          v94 += 88;
          --v93;
        }
        while (v93);
        sub_10001E05C(&v167);
        swift_bridgeObjectRelease(v48);
      }
      else
      {
        sub_10001E05C(&v167);
        swift_bridgeObjectRelease(v48);
        v95 = _swiftEmptyArrayStorage;
      }
      v148 = (_QWORD *)v142;
      sub_100015A38((uint64_t)v95);
      v97 = v148;
      v98 = HIBYTE(v58) & 0xF;
      if ((v58 & 0x2000000000000000) == 0)
        v98 = v56 & 0xFFFFFFFFFFFFLL;
      if (v98)
      {
        v99 = v148[2];
        if (v99)
        {
          v93 = (uint64_t)(v148 + 4);
          while (1)
          {
            sub_100019A60(v93, (uint64_t)&v148);
            sub_10000E858(&v148, v149[2]);
            sub_10001CAC4();
            sub_1000180D0();
            v100 = v145;
            v101 = v146;
            sub_10000E858(&v143, v145);
            v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 8))(v100, v101);
            v104 = v103;
            swift_bridgeObjectRelease(v105);
            if (v102 == v56 && v104 == v58)
              break;
            v107 = _stringCompareWithSmolCheck(_:_:expecting:)(v102, v104, v56, v58, 0);
            swift_bridgeObjectRelease(v104);
            sub_10000E87C(&v143);
            if ((v107 & 1) != 0)
              goto LABEL_79;
            sub_10000E87C(&v148);
            v93 += 40;
            if (!--v99)
              goto LABEL_91;
          }
          swift_bridgeObjectRelease(v58);
          sub_10000E87C(&v143);
LABEL_79:
          swift_bridgeObjectRelease(v58);
          swift_bridgeObjectRelease(v97);
          v93 = (uint64_t)v138;
          swift_retain();
          v4 = (uint64_t)v132;
          sub_100015A4C(&v148, v138, 1, v132, v134);
          v2 = v137;
          v9 = v131;
          v114 = v135;
          if (!v137)
          {
            swift_release();
            sub_10000E87C(&v148);
            sub_10000E87C(v153);
            goto LABEL_87;
          }
          swift_retain();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease(v131);
          sub_10000E87C(&v148);
        }
        else
        {
LABEL_91:
          swift_bridgeObjectRelease(v131);
          swift_bridgeObjectRelease(v97);
          v123 = sub_1000E02D0();
          v124 = swift_allocError(&type metadata for QueryError, v123, 0, 0);
          *(_QWORD *)v125 = v56;
          *(_QWORD *)(v125 + 8) = v58;
          *(_QWORD *)(v125 + 16) = 0;
          *(_BYTE *)(v125 + 24) = 0;
          swift_willThrow(v124);
        }
LABEL_93:
        sub_10000E87C(v153);
        sub_10000E87C(v156);
        swift_release();
        swift_release();
        return v93;
      }
      swift_bridgeObjectRelease(v58);
      v108 = v97[2];
      v2 = v137;
      if (v108)
      {
        v93 = (uint64_t)(v97 + 4);
        v4 = (uint64_t)v132;
        while (1)
        {
          sub_100019A60(v93, (uint64_t)&v148);
          v109 = v2;
          v110 = v139[3];
          v111 = v139[4];
          sub_10000E858(v139, v110);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v111 + 16))(v164, v110, v111);
          v112 = v165;
          v166 = v165;
          swift_bridgeObjectRetain(v165);
          sub_1000E0204(v164);
          v113 = *(_QWORD *)(v112 + 16);
          sub_10001E05C(&v166);
          swift_retain();
          sub_100015A4C(&v148, v138, v113 != 0, v132, v134);
          v2 = v109;
          if (v109)
            break;
          swift_retain();
          swift_retain();
          sub_10000E87C(&v148);
          swift_release();
          swift_release();
          swift_release();
          v93 += 40;
          if (!--v108)
          {
            swift_bridgeObjectRelease(v97);
            goto LABEL_86;
          }
        }
        swift_release();
        sub_10000E87C(&v148);
        swift_bridgeObjectRelease(v131);
        swift_bridgeObjectRelease(v97);
        goto LABEL_93;
      }
      swift_bridgeObjectRelease(v97);
      v4 = (uint64_t)v132;
LABEL_86:
      sub_10000E87C(v153);
      v114 = v135;
      v9 = v131;
LABEL_87:
      v10 = v114 + 1;
      sub_10000E87C(v156);
      if (v10 == v130)
      {
        swift_bridgeObjectRelease(v9);
        goto LABEL_90;
      }
      continue;
    }
    break;
  }
  v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v52, 42, 0xE100000000000000, 0);
  swift_bridgeObjectRelease(v52);
  if ((v60 & 1) != 0)
    goto LABEL_52;
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(v48);
  v61 = v157;
  v62 = v158;
  sub_10000E858(v156, v157);
  v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v61, v62);
  v65 = v64;
  swift_bridgeObjectRelease(v66);
  v67 = *v127;
  swift_beginAccess(v129, &v148, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v129);
  v143 = (_QWORD *)*v129;
  v69 = v143;
  *v129 = 0x8000000000000000;
  v70 = sub_100016064(v63);
  v72 = v69[2];
  v73 = (v71 & 1) == 0;
  v74 = v72 + v73;
  if (__OFADD__(v72, v73))
    goto LABEL_101;
  v75 = v70;
  v76 = v71;
  sub_10001BE7C(&qword_10012C468);
  v77 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v74);
  v4 = (uint64_t)v132;
  if (!v77)
    goto LABEL_49;
  v78 = sub_100016064(v63);
  if ((v76 & 1) == (v79 & 1))
  {
    v75 = v78;
LABEL_49:
    v80 = v143;
    if ((v76 & 1) != 0)
    {
      *(_QWORD *)(v143[7] + 8 * v75) = v67;
      goto LABEL_83;
    }
    v143[(v75 >> 6) + 8] |= 1 << v75;
    v115 = (uint64_t *)(v80[6] + 16 * v75);
    *v115 = v63;
    v115[1] = v65;
    *(_QWORD *)(v80[7] + 8 * v75) = v67;
    v116 = v80[2];
    v117 = __OFADD__(v116, 1);
    v118 = v116 + 1;
    if (!v117)
    {
      v80[2] = v118;
      swift_bridgeObjectRetain(v65);
LABEL_83:
      v119 = *v129;
      *v129 = v80;
      swift_bridgeObjectRelease(v65);
      swift_bridgeObjectRelease(v119);
      swift_endAccess(&v148);
      v2 = v137;
      v9 = v131;
      v114 = v135;
      if (!__OFADD__(*v127, 1))
      {
        ++*v127;
        goto LABEL_87;
      }
LABEL_102:
      __break(1u);
    }
    __break(1u);
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100015674()
{
  char *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;

  sub_10001F830();
  if ((v4 & 1) != 0)
  {
    sub_100018654();
    if (v5 != v6)
    {
      sub_1000158DC();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013784();
  if (v3)
  {
    v7 = sub_10001BE7C(&qword_1001296A8);
    v8 = (char *)sub_1000100C8(v7, 32 * v3 + 32);
    v9 = j__malloc_size(v8);
    *((_QWORD *)v8 + 2) = v2;
    *((_QWORD *)v8 + 3) = 2 * ((uint64_t)(v9 - 32) / 32);
  }
  else
  {
    v8 = (char *)_swiftEmptyArrayStorage;
  }
  v10 = v8 + 32;
  v11 = v0 + 32;
  if ((v1 & 1) != 0)
  {
    if (v8 != v0 || &v11[32 * v2] <= v10)
      memmove(v10, v11, 32 * v2);
    *((_QWORD *)v0 + 2) = 0;
  }
  else
  {
    sub_1000D69C8((uint64_t)v10);
  }
  sub_1000117B4();
  sub_10001000C();
}

void sub_10001573C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100015770();
  *v0 = v1;
}

void sub_100015770()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_100011834();
  if ((v5 & 1) != 0)
  {
    sub_100018654();
    if (v6 != v7)
    {
      sub_1000158DC();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013344();
  if (v4)
  {
    v13 = sub_1000101F4(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_1000100C8(v13, 16 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_1000058F0(v15 - 32);
  }
  v16 = sub_10001B454();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_10001BFF8();
  sub_10001ADFC();
}

uint64_t sub_10001580C()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  sub_10001357C();
  if (v3 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    v4 = v0 + 16 * v1;
    if (v2 + 16 * v1 > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_100017C80(v2);
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_1000158B0()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1000158B8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100014360(v0, 1, 1, v1);
}

unint64_t sub_1000158E8()
{
  uint64_t v0;

  return sub_100016064(v0);
}

id sub_1000158F8(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_100015900()
{
  return Logger.logObject.getter();
}

id sub_10001590C()
{
  uint64_t v0;
  void *v1;

  return sub_1000556C0((_QWORD *)(v0 + 480), *(void **)(v0 + 416), v1);
}

uint64_t sub_100015924()
{
  return Logger.logObject.getter();
}

uint64_t sub_100015930()
{
  uint64_t v0;

  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

uint64_t sub_100015944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a12 + 8))(a14, a13);
}

uint64_t sub_100015954(uint64_t a1, uint64_t a2)
{
  return sub_100097DAC(a1, a2);
}

_QWORD *sub_100015970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return sub_100037A7C((uint64_t *)va);
}

uint64_t sub_100015978(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, a1, a2, 0);
}

uint64_t sub_100015994()
{
  uint64_t v0;

  return v0;
}

void sub_1000159A4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

id sub_1000159B8()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(v0 + 8 * v1 + 32);
}

void sub_1000159C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  Collection<>.contains(_:)(v5, v6, v7, v8, a5);
}

void sub_1000159D8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6E6564496E617073;
  v0._object = (void *)0xEE00726569666974;
  String.append(_:)(v0);
}

uint64_t sub_1000159FC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return sub_10000E87C((uint64_t *)va);
}

uint64_t sub_100015A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_initStackObject(a1, &a9);
}

void *sub_100015A18@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  a4 = a1;
  a5 = v5;
  return _Block_copy(&a2);
}

uint64_t sub_100015A24()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_100015A30()
{
  sub_1000E7E40();
}

void sub_100015A38(uint64_t a1)
{
  sub_100019BE8(a1, (uint64_t (*)(void))sub_1000D5E78, &qword_10012C220);
}

uint64_t sub_100015A4C(_QWORD *a1, _QWORD *a2, int a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t DynamicType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  _BOOL8 v75;
  Swift::Int v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  char v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t result;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _BYTE v94[24];
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD v98[3];
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[3];
  uint64_t v102;
  _QWORD v103[7];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;

  v92 = a2;
  v89 = a4;
  v90 = a5;
  LODWORD(v88) = a3;
  v6 = a1[3];
  v7 = sub_10000E858(a1, v6);
  DynamicType = swift_getDynamicType(v7, v6, 1);
  v10 = a1[3];
  v9 = a1[4];
  sub_10000E858(a1, v10);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 16))(v101, v10, v9);
  v11 = v102;
  v91 = v101[2];
  swift_bridgeObjectRetain(v102);
  sub_1000E0204(v101);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000E858(a1, v12);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 16))(v103, v12, v13);
  v14 = v103[6];
  v15 = v104;
  swift_bridgeObjectRetain(v104);
  sub_1000E0204(v103);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 40);
  v99 = DynamicType;
  v100 = v9;
  sub_10001795C(v98);
  v16(v91, v11, v14, v15, DynamicType, v9);
  v17 = a1[3];
  v18 = a1[4];
  sub_10000E858(a1, v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v18 + 16))(&v105, v17, v18);
  LOBYTE(v16) = v105;
  v19 = v106;
  swift_bridgeObjectRetain(v106);
  sub_1000E0204(&v105);
  v20 = v99;
  v21 = v100;
  sub_100016184((uint64_t)v98, v99);
  v22 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v21 + 32))(&v96, v20, v21);
  *(_BYTE *)v23 = (_BYTE)v16;
  v24 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v23 + 8) = v19;
  swift_bridgeObjectRelease(v24);
  v22(&v96, 0);
  v25 = v99;
  v26 = v100;
  v27 = sub_10000E858(v98, v99);
  v28 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v88 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v28 + 16))(v30);
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 + 8) + 8))(v25);
  v33 = v32;
  v35 = v34;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v25);
  v36 = v93;
  Connection.prepare(_:_:)(v31, v33, (uint64_t)_swiftEmptyArrayStorage);
  v93 = v36;
  if (v36)
  {
    swift_bridgeObjectRelease(v35);
    v38 = v33;
LABEL_25:
    swift_bridgeObjectRelease(v38);
    return sub_10000E87C(v98);
  }
  v39 = v37;
  v92 = a1;
  v40 = Statement.bind(_:)(v35);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v33);
  swift_release(v39);
  Statement.columnNames.getter();
  v42 = v41;
  swift_release(v40);
  v43 = *(_QWORD *)(v42 + 16);
  if (v43)
  {
    v95 = _swiftEmptyArrayStorage;
    sub_10001573C();
    v44 = v95;
    v91 = v42;
    v45 = (unint64_t *)(v42 + 40);
    do
    {
      v46 = *(v45 - 1);
      v47 = *v45;
      swift_bridgeObjectRetain(*v45);
      v48 = v46;
      v49 = v93;
      v50 = sub_10001C970(0, 0xE000000000000000, v48, v47, 34, 0xE100000000000000);
      v52 = v51;
      v93 = v49;
      v96 = 0;
      v97 = 0xE000000000000000;
      Character.write<A>(to:)(&v96, 34, 0xE100000000000000, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v53._countAndFlagsBits = v50;
      v53._object = v52;
      String.append(_:)(v53);
      swift_bridgeObjectRelease(v52);
      Character.write<A>(to:)(&v96, 34, 0xE100000000000000, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      swift_bridgeObjectRelease(v47);
      v54 = v96;
      v55 = v97;
      v95 = v44;
      v56 = v44[2];
      if (v56 >= v44[3] >> 1)
      {
        sub_10001573C();
        v44 = v95;
      }
      v45 += 2;
      v44[2] = v56 + 1;
      v57 = &v44[2 * v56];
      v57[4] = v54;
      v57[5] = v55;
      --v43;
    }
    while (v43);
    v58 = swift_bridgeObjectRelease(v91);
  }
  else
  {
    v58 = swift_bridgeObjectRelease(v42);
    v44 = _swiftEmptyArrayStorage;
  }
  if ((v88 & 1) != 0)
  {
    __chkstk_darwin(v58);
    *(&v88 - 2) = v59;
    v60 = v93;
    v61 = sub_1000DBA98((void (*)(_QWORD *__return_ptr, _QWORD *))sub_1000E0E18, (uint64_t)(&v88 - 4), (uint64_t)v44);
    v62 = v44;
    v44 = v61;
    v93 = v60;
    swift_bridgeObjectRelease(v62);
  }
  v63 = v44[2];
  v88 = v44;
  if (!v63)
  {
LABEL_24:
    v38 = (uint64_t)v88;
    goto LABEL_25;
  }
  v64 = v89 + 2;
  v65 = v90 + 2;
  swift_beginAccess(v90 + 2, &v96, 0, 0);
  swift_beginAccess(v65, &v95, 1, 0);
  v66 = v44 + 5;
  v89 = v65;
  v90 = v64;
  while (1)
  {
    v68 = *(v66 - 1);
    v67 = *v66;
    v69 = (_QWORD *)*v65;
    v91 = v63;
    v92 = v69;
    swift_beginAccess(v64, v94, 33, 0);
    swift_bridgeObjectRetain(v67);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v64);
    v107 = (_QWORD *)*v64;
    v71 = v107;
    *v64 = 0x8000000000000000;
    v72 = sub_100016064(v68);
    v74 = v71[2];
    v75 = (v73 & 1) == 0;
    v76 = v74 + v75;
    if (__OFADD__(v74, v75))
      break;
    v77 = v72;
    v78 = v73;
    sub_10001BE7C(&qword_10012C468);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v76))
    {
      v79 = sub_100016064(v68);
      if ((v78 & 1) != (v80 & 1))
        goto LABEL_29;
      v77 = v79;
    }
    v81 = v107;
    if ((v78 & 1) != 0)
    {
      *(_QWORD *)(v107[7] + 8 * v77) = v92;
    }
    else
    {
      v107[(v77 >> 6) + 8] |= 1 << v77;
      v82 = (uint64_t *)(v81[6] + 16 * v77);
      *v82 = v68;
      v82[1] = v67;
      *(_QWORD *)(v81[7] + 8 * v77) = v92;
      v83 = v81[2];
      v84 = __OFADD__(v83, 1);
      v85 = v83 + 1;
      if (v84)
        goto LABEL_28;
      v81[2] = v85;
      swift_bridgeObjectRetain(v67);
    }
    v64 = v90;
    v86 = *v90;
    *v90 = v81;
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(v86);
    swift_endAccess(v94);
    v65 = v89;
    if (__OFADD__(*v89, 1))
      goto LABEL_27;
    v66 += 2;
    ++*v89;
    v63 = v91 - 1;
    if (v91 == 1)
      goto LABEL_24;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_100016064(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  Swift::Int v4;

  v3 = sub_10001B648(a1);
  sub_100013548((uint64_t)v3);
  v4 = sub_10001333C();
  return sub_1000160A4(v2, v1, v4);
}

unint64_t sub_1000160A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_100016184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void Statement.columnNames.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 48);
  if (v1)
    goto LABEL_6;
  Statement.columnCount.getter(0);
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v2 & 0x80000000) == 0)
  {
    sub_1000179D8();
    v3 = sub_100019430();
    sub_1000E56C4(v3, v4);
    v5 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 48) = v6;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRelease(v5);
    v1 = 0;
LABEL_6:
    swift_bridgeObjectRetain(v1);
    return;
  }
LABEL_9:
  __break(1u);
}

void Statement.columnCount.getter(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 40) == 1)
  {
    sub_10001B010(a1);
    *(_QWORD *)(v1 + 32) = sqlite3_column_count(*(sqlite3_stmt **)(v1 + 16));
    *(_BYTE *)(v1 + 40) = 0;
  }
  sub_10001B3F4();
}

void ScalarQuery.init(_:database:)()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001EEBC();
  v0 = sub_10001BE7C(&qword_100128D58);
  *(_OWORD *)(sub_100017848(v0) + 16) = xmmword_1000EFAE0;
  sub_10001BE7C(&qword_10012BFA8);
  sub_1000E1030((uint64_t)&protocol witness table for Expression<A>);
  sub_10001B1BC(v1, (uint64_t)_swiftEmptyArrayStorage);
  sub_10001AFEC();
}

unint64_t sub_100016310()
{
  uint64_t v0;

  return sub_100016064(v0);
}

uint64_t sub_10001631C()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100016324()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_100016340()
{
  uint64_t v0;

  return sub_100016064(v0);
}

_BYTE *sub_10001634C(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_100016360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

uint64_t sub_100016374()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

id sub_100016380(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v1 + 56) + 8 * a1);
}

uint64_t sub_10001638C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(v1, ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v2, *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) | 7);
}

void sub_1000163B0()
{
  uint64_t v0;

}

_QWORD *sub_1000163BC()
{
  return sub_1000379AC(&STACK[0x238]);
}

uint64_t sub_1000163D4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 336));
}

uint64_t sub_1000163DC()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_1000163E8(uint64_t a1)
{
  return swift_allocObject(a1, 120, 15);
}

uint64_t sub_1000163F4(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100016408()
{
  sub_10002FF04();
}

id sub_100016414()
{
  void *v0;

  return v0;
}

void sub_10001641C()
{
  void *v0;

}

uint64_t sub_100016428()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10000DEC8(v0, v1, 0);
}

uint64_t sub_10001643C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return ExpressionType.init(_:)(a1, a2, v4, a4);
}

void sub_100016444(uint64_t a1@<X8>)
{
  uint64_t v1;
  Swift::String v2;

  v2._object = (void *)((a1 - 32) | 0x8000000000000000);
  v2._countAndFlagsBits = v1;
  String.append(_:)(v2);
}

uint64_t sub_100016454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  return sub_1000D5F44(a1, a2, v14, 2u, 1, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

_QWORD *sub_100016464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  a11 = a1;
  a12 = a2;
  a8 = v16;
  a9 = v15;
  a10 = v14;
  v17 = *(_QWORD *)(v12 + 8);
  a6 = v13;
  a7 = v17;
  return sub_10001795C(&a3);
}

void sub_100016480(void *a1)
{
  free(a1);
}

BOOL sub_100016488()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10000C918(v0, v1);
}

uint64_t QueryType.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[32];
  _QWORD v34[9];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a6, v6, a4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a5 + 16))(v34, a4, a5);
  v12 = sub_10001A4EC();
  sub_100018298(v12, v13, v14);
  sub_1000E0204(v34);
  sub_1000100E0();
  sub_100013E10();
  v15 = sub_10001A4EC();
  v31 = a1;
  v32 = a3;
  v18 = sub_1000DBCB8(v15, v16, v17, a1, a2, a3);
  v20 = v19;
  v22 = v21;
  v23 = sub_10001A4EC();
  sub_100018818(v23, v24, v25);
  if (!v20)
  {
    sub_1000100E0();
    v22 = v32;
    sub_100016794();
    v20 = a2;
    v18 = v31;
  }
  sub_1000E10B8((uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 32));
  v27 = v26[9];
  v28 = v26[10];
  v29 = v26[11];
  v26[9] = v18;
  v26[10] = v20;
  v26[11] = v22;
  sub_100018818(v27, v28, v29);
  return sub_10001EE80((uint64_t)v33);
}

uint64_t sub_1000165C0()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

void *sub_1000165D4(void *a1)
{
  const void *v1;

  return memcpy(a1, v1, 0xA8uLL);
}

uint64_t sub_1000165E0()
{
  return 0;
}

void sub_1000165F4()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

BOOL sub_10001660C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100016624@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_100091424(0xD000000000000010, (a3 - 32) | 0x8000000000000000, a1, a2);
}

uint64_t sub_100016638()
{
  uint64_t v0;

  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_100016640@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

_QWORD *sub_100016660(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, 0);
}

uint64_t sub_10001666C()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000166AC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  return sub_1000E9948(a1, (uint64_t)va, v11, a4, a5, v10, a7, a8);
}

uint64_t sub_1000166C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100014360(a1, a2, 1, v2);
}

uint64_t sub_1000166E8()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000166F0()
{
  uint64_t v0;

  return v0;
}

void sub_100016700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

}

id sub_100016708()
{
  void *v0;

  return v0;
}

void sub_100016728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,__int128 a30,uint64_t a31)
{
  a31 = 0;
  a29 = 0u;
  a30 = 0u;
  sub_100019A60(a15, (uint64_t)&a19);
}

void sub_100016744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_1000DB24C(a1, a2, a3, a4, a5, 0x20444E4120, 0xE500000000000000, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

uint64_t sub_100016758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  return swift_initStackObject(a1, &a37);
}

uint64_t (*Update.template.modify())()
{
  return Int64.datatypeValue.getter;
}

uint64_t sub_100016774(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100016794()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_10001679C()
{
  void *v0;

}

uint64_t sub_1000167B4@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1000167C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_10000FBEC(a1, v3, a3);
}

uint64_t sub_1000167CC()
{
  return 0;
}

uint64_t sub_1000167E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 48);
  *v4 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_100016808(uint64_t a1, uint64_t a2)
{
  return swift_arrayDestroy(a1, a2);
}

uint64_t sub_100016810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  void *v10;

  return sub_1000DACF0(a1, a2, a3, a4, a5, a6, a7, a8, a9, v9 & 0xFFFF00000000FFFFLL | 0x3F203D0000, v10);
}

_QWORD *sub_100016844(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *result;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  id v18;
  BOOL v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  int *v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  id v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;

  v98 = a1;
  v99 = a2;
  v4 = type metadata accessor for LNAppShortcutParameterRecord(0);
  v96 = *(_QWORD *)(v4 - 8);
  v97 = (int *)v4;
  sub_100013E18();
  v6 = __chkstk_darwin(v5);
  v8 = (unint64_t)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v11 = (char *)&v75 - v10;
  v80 = a3;
  if (a3 >> 62)
    goto LABEL_54;
  v12 = *(_QWORD **)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v9);
  result = v12;
  if (!v12)
  {
LABEL_55:
    swift_bridgeObjectRelease(v80);
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  v14 = 0;
  v15 = v80;
  v79 = v80 & 0xC000000000000001;
  v77 = v80 & 0xFFFFFFFFFFFFFF8;
  v16 = _swiftEmptyArrayStorage;
  v76 = v80 + 32;
  v95 = v8;
  v78 = result;
  while (1)
  {
    if (v79)
    {
      v17 = v14;
      v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v15);
    }
    else
    {
      if (v14 >= *(_QWORD *)(v77 + 16))
      {
        __break(1u);
        return result;
      }
      v17 = v14;
      v18 = *(id *)(v76 + 8 * v14);
    }
    v82 = v18;
    v19 = __OFADD__(v17, 1);
    v20 = (_QWORD *)(v17 + 1);
    if (v19)
    {
LABEL_53:
      __break(1u);
LABEL_54:
      swift_bridgeObjectRetain(v9);
      result = (_QWORD *)sub_10000737C();
      if (!result)
        goto LABEL_55;
      goto LABEL_3;
    }
    v81 = v20;
    v21 = objc_msgSend(v82, "basePhraseTemplateSubstitutions");
    v22 = sub_1000107AC();
    sub_10000795C(v22, (unint64_t *)&unk_10012A280, LNBasePhraseTemplateSubstitution_ptr);
    sub_10001A01C();
    sub_100017E30();
    v23 = v8;
    v87 = v8;
    if (v8 >> 62)
      break;
    v24 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v24)
      goto LABEL_11;
LABEL_43:
    v74 = v23;

    result = (_QWORD *)swift_bridgeObjectRelease(v74);
    v14 = (unint64_t)v81;
    v15 = v80;
    if (v81 == v78)
      goto LABEL_50;
  }
  swift_bridgeObjectRetain(v8);
  v24 = sub_10000737C();
  swift_bridgeObjectRelease(v87);
  v23 = v87;
  if (!v24)
    goto LABEL_43;
LABEL_11:
  v25 = 0;
  v86 = v23 & 0xC000000000000001;
  v84 = v23 & 0xFFFFFFFFFFFFFF8;
  v83 = v23 + 32;
  v85 = v24;
  while (1)
  {
    if (v86)
    {
      v26 = v25;
      v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v23);
    }
    else
    {
      if (v25 >= *(_QWORD *)(v84 + 16))
        goto LABEL_52;
      v26 = v25;
      v27 = *(id *)(v83 + 8 * v25);
    }
    v100 = v27;
    v19 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v19)
    {
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v88 = v28;
    v29 = objc_msgSend(v100, "parameterSubstitutions");
    v30 = sub_1000107AC();
    sub_10000795C(v30, &qword_100128E48, LNParameterSubstitution_ptr);
    sub_10001A01C();
    sub_100017E30();
    if (v8 >> 62)
      break;
    v31 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v31)
      goto LABEL_19;
LABEL_42:

    sub_1000059A8();
    v23 = v87;
    v25 = v88;
    if (v88 == v85)
      goto LABEL_43;
  }
  sub_1000101B0();
  v31 = sub_10000737C();
  sub_1000059A8();
  if (!v31)
    goto LABEL_42;
LABEL_19:
  v32 = 0;
  v92 = v8;
  v93 = v8 & 0xC000000000000001;
  v89 = v8 + 32;
  v90 = v8 & 0xFFFFFFFFFFFFFF8;
  v91 = v31;
  while (1)
  {
    if (v93)
    {
      v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v8);
    }
    else
    {
      v15 = *(_QWORD *)(v90 + 16);
      if (v32 >= v15)
        goto LABEL_49;
      v33 = *(id *)(v89 + 8 * v32);
    }
    v104 = v33;
    v19 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v19)
      break;
    v35 = objc_msgSend(v104, "substitutionValues");
    v36 = sub_1000107AC();
    sub_10000795C(v36, &qword_10012A290, LNSubstitutionValue_ptr);
    sub_10001A01C();
    sub_100017E30();
    if (v8 >> 62)
    {
      sub_1000101B0();
      v37 = sub_10000737C();
      sub_1000059A8();
    }
    else
    {
      v15 = v8 & 0xFFFFFFFFFFFFF8;
      v37 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v94 = v34;
    if (v37)
    {
      if (v37 < 1)
        goto LABEL_48;
      v38 = 0;
      v101 = v8 & 0xC000000000000001;
      v102 = v37;
      v103 = v8;
      do
      {
        v107 = v16;
        if (v101)
          v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v8);
        else
          v39 = *(id *)(v8 + 8 * v38 + 32);
        v40 = v39;
        v41 = objc_msgSend(v39, "parameterIdentifier");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v42 = v99;
        sub_10000EC68();
        v43 = sub_10000EB00((uint64_t)objc_msgSend(v100, "basePhraseTemplate"));
        v105 = v44;
        v106 = v43;

        v46 = sub_1000158F8(v45, "title");
        v47 = sub_1000158F8((uint64_t)v46, "titleKey");
        v48 = sub_10000EB00((uint64_t)v47);
        v50 = v49;

        v51 = (uint64_t)v11;
        v52 = sub_10000EB00((uint64_t)objc_msgSend(v104, "parameterIdentifier"));
        v54 = v53;

        v56 = sub_1000158F8(v55, "value");
        v57 = objc_allocWithZone((Class)LNProperty);
        v58 = v52;
        v11 = (char *)v51;
        v59 = sub_100016F00(v58, v54, v56);
        v60 = v97;
        v61 = (_QWORD *)(v51 + v97[5]);
        *v61 = v98;
        v61[1] = v42;
        v62 = (uint64_t *)(v51 + v60[6]);
        v63 = v105;
        *v62 = v106;
        v62[1] = v63;
        *(_QWORD *)(v51 + v60[7]) = v46;
        v64 = (uint64_t *)(v51 + v60[8]);
        *v64 = v48;
        v64[1] = v50;
        *(_QWORD *)(v51 + v60[9]) = v59;
        *(_QWORD *)(v51 + v60[10]) = 0;
        v65 = (_QWORD *)(v51 + v60[11]);
        *v65 = 0;
        v65[1] = 0;
        v66 = v95;
        sub_10001DE28(v51, v95);
        v16 = v107;
        if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0)
        {
          sub_1000073A0();
          sub_10001E084();
          v16 = v72;
        }
        v67 = v102;
        v69 = v16[2];
        v68 = v16[3];
        if (v69 >= v68 >> 1)
        {
          sub_1000190BC(v68);
          sub_10001E084();
          v16 = v73;
        }
        ++v38;
        v16[2] = v69 + 1;
        sub_100017C38();
        sub_10001DF5C(v66, (uint64_t)v16 + v70 + *(_QWORD *)(v71 + 72) * v69);

        sub_10001DBA4();
        v8 = v103;
      }
      while (v67 != v38);
    }

    sub_1000059A8();
    v8 = v92;
    v32 = v94;
    if (v94 == v91)
      goto LABEL_42;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  swift_bridgeObjectRelease(v15);
  return v16;
}

id sub_100016F00(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v6;
  id v7;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v7 = objc_msgSend(v3, "initWithIdentifier:value:", v6, a3);

  return v7;
}

void sub_100016F60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144[10];
  _BYTE v145[168];
  _QWORD v146[22];
  uint64_t v147;
  SQLite::Insert v148;

  sub_10000C038();
  v121 = v0;
  v114 = v1;
  v3 = v2;
  if (qword_100127D00 != -1)
    swift_once(&qword_100127D00, sub_10005444C);
  sub_1000189C4(v146, &unk_1001296E0);
  sub_1000189C4(v145, &unk_1001296E0);
  sub_1000379AC(v146);
  if (qword_100127D08 != -1)
    swift_once(&qword_100127D08, sub_1000544A0);
  v4 = qword_100129788;
  v5 = unk_100129790;
  v6 = qword_100129798;
  v7 = type metadata accessor for UUID(0);
  <- infix<A>(_:_:)(v4, v5, v6, v3, v7, (uint64_t)&protocol witness table for UUID);
  v8 = sub_10001BE7C(&qword_100128D08);
  v9 = swift_allocObject(v8, 592, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1000F0670;
  if (qword_100127D10 != -1)
    swift_once(&qword_100127D10, sub_100054510);
  v10 = qword_1001297A0;
  v11 = *(_QWORD *)algn_1001297A8;
  v12 = qword_1001297B0;
  v13 = (int *)sub_1000192B4();
  v14 = (uint64_t *)(v3 + v13[5]);
  v16 = *v14;
  v15 = (void *)v14[1];
  v124._countAndFlagsBits = v16;
  v124._object = v15;
  <- infix<A>(_:_:)(v10, v11, v12, (uint64_t)&v124, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_100127D18 != -1)
    swift_once(&qword_100127D18, sub_100054580);
  v118 = v9 + 32;
  v147 = v9;
  v17 = (uint64_t *)(v3 + v13[6]);
  v19 = *v17;
  v18 = (void *)v17[1];
  v124._countAndFlagsBits = v19;
  v124._object = v18;
  v115 = v9 + 112;
  <- infix<A>(_:_:)(qword_1001297B8, unk_1001297C0, qword_1001297C8, (uint64_t)&v124, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_100127D20 != -1)
    swift_once(&qword_100127D20, sub_1000545F0);
  v20 = qword_1001297D0;
  v21 = *(_QWORD *)algn_1001297D8;
  v22 = qword_1001297E0;
  v23 = v3;
  v24 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  JSONEncoder.init()();
  v25 = LNStaticDeferredLocalizedString.asLocalizedStringResourceJSON(encoder:)();
  if (v0)
  {
    v27 = sub_10001105C();
    sub_100018EF8(v27, v28, v29, v30, v31, v32, v33, v34, v100, v104, v110, v113, v114, v115, v118, v0, v122, v123, v124._countAndFlagsBits,
      (uint64_t)v124._object,
      v125,
      v126,
      v127,
      v128,
      v129,
      v130,
      v131,
      v132,
      v133,
      v134,
      v135,
      v136,
      v137,
      v138,
      v139,
      v140,
      v141,
      v142,
      v143,
      v144[0]);
    v35 = sub_1000189C4(&v124, v145);
    sub_1000188E0((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42, v101, v105);
    sub_100019F20(v116);
    sub_100019F20(v119);
    *(_QWORD *)(v147 + 16) = 0;
    swift_setDeallocating(v147);
    sub_10001CC3C();
  }
  else
  {
    v43 = v25;
    v44 = v26;
    sub_10001105C();
    v124._countAndFlagsBits = v43;
    v124._object = v44;
    v111 = v147 + 192;
    <- infix<A>(_:_:)(v20, v21, v22, (uint64_t)&v124, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    sub_1000059A8();
    if (qword_100127D28 != -1)
      swift_once(&qword_100127D28, sub_100054668);
    v45 = (uint64_t *)(v23 + v13[8]);
    v47 = *v45;
    v46 = (void *)v45[1];
    v124._countAndFlagsBits = v47;
    v124._object = v46;
    v106 = v147 + 272;
    <- infix<A>(_:_:)(qword_1001297E8, unk_1001297F0, qword_1001297F8, (uint64_t)&v124, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    if (qword_100127D30 != -1)
      swift_once(&qword_100127D30, sub_1000546D8);
    v48 = qword_100129800;
    v49 = *(_QWORD *)algn_100129808;
    v50 = qword_100129810;
    v57 = LNProperty.asJson()();
    if (v58)
    {
      sub_100018EF8(v57._countAndFlagsBits, (uint64_t)v57._object, v51, v52, v53, v54, v55, v56, v100, v106, v111, v23, v114, v115, v118, 0, v122, v123, v124._countAndFlagsBits,
        (uint64_t)v124._object,
        v125,
        v126,
        v127,
        v128,
        v129,
        v130,
        v131,
        v132,
        v133,
        v134,
        v135,
        v136,
        v137,
        v138,
        v139,
        v140,
        v141,
        v142,
        v143,
        v144[0]);
      v59 = sub_1000189C4(&v124, v145);
      sub_1000188E0((uint64_t)v59, v60, v61, v62, v63, v64, v65, v66, v102, v107);
      sub_100019F20(v108);
      sub_100019F20(v112);
      sub_100019F20(v117);
      sub_100019F20(v120);
      *(_QWORD *)(v147 + 16) = 0;
      swift_setDeallocating(v147);
      sub_10001CC3C();
    }
    else
    {
      v124 = v57;
      <- infix<A>(_:_:)(v48, v49, v50, (uint64_t)&v124, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      sub_1000059A8();
      if (qword_100127D38 != -1)
        swift_once(&qword_100127D38, sub_100054744);
      v68 = qword_100129818;
      v67 = unk_100129820;
      v69 = qword_100129828;
      v70 = *(_QWORD *)(v23 + v13[10]);
      if (v70)
      {
        v100 = qword_100129828;
        v71 = unk_100129820;
        v121 = v147 + 352;
        swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
        JSONEncoder.init()();
        v70 = LNStaticDeferredLocalizedString.asLocalizedStringResourceJSON(encoder:)();
        v73 = v72;
        sub_10001105C();
        v67 = v71;
        v69 = v100;
      }
      else
      {
        v73 = 0;
      }
      v122 = v70;
      v123 = v73;
      <- infix<A>(_:_:)(v68, v67, v69, (uint64_t)&v122, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      sub_1000059A8();
      if (qword_100127D40 != -1)
        swift_once(&qword_100127D40, sub_1000547B4);
      v74 = qword_100129830;
      v75 = *(_QWORD *)algn_100129838;
      v76 = qword_100129840;
      v77 = (uint64_t *)(v23 + v13[11]);
      v78 = v77[1];
      v122 = *v77;
      v123 = v78;
      sub_10000C020();
      <- infix<A>(_:_:)(v74, v75, v76, (uint64_t)&v122, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      sub_1000059B0();
      v79 = QueryType.insert(_:_:)((uint64_t)v144);
      v81 = v80;
      v83 = v82;
      swift_setDeallocating(v147);
      v84 = sub_10001CC3C();
      sub_100018EF8(v84, v85, v86, v87, v88, v89, v90, v91, v100, v106, v111, v23, v114, v115, v118, v121, v122, v123, v124._countAndFlagsBits,
        (uint64_t)v124._object,
        v125,
        v126,
        v127,
        v128,
        v129,
        v130,
        v131,
        v132,
        v133,
        v134,
        v135,
        v136,
        v137,
        v138,
        v139,
        v140,
        v141,
        v142,
        v143,
        v144[0]);
      v92 = sub_1000189C4(&v124, v145);
      sub_1000188E0((uint64_t)v92, v93, v94, v95, v96, v97, v98, v99, v103, v109);
      v148.template._countAndFlagsBits = v79;
      v148.template._object = v81;
      v148.bindings._rawValue = v83;
      Connection.run(_:)(v148);
      sub_1000059B0();
      sub_1000101FC();
    }
  }
  sub_1000117E8();
}

void <- infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_100018B20();
  __chkstk_darwin(v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v14, v16, v17);
  sub_1000178D0(v8, v7, v6, (uint64_t)v14, a5, a6, v9);
  sub_10000BFF4();
  sub_100013E10();
  sub_1000110FC();
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  sub_10001CE0C();
  v10 = type metadata accessor for Optional(0, v9);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - v11;
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)&v18 - v11, a4);
  sub_10000C030();
  sub_10000BFF4();
  v14 = sub_10001DE00();
  sub_100017FA4(v14, v15, v16, (uint64_t)v12, a5, a6, v17);
  sub_1000110FC();
}

uint64_t sub_100017630(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100017648(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_100017650(uint64_t a1)
{
  return swift_allocObject(a1, 40, 7);
}

uint64_t sub_100017680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 25, a9, a10, a11);
}

uint64_t sub_10001768C@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)a1;
}

void sub_100017698(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_1000176A0(uint64_t a1)
{
  uint64_t v1;

  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_1000176B0(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0, 0);
}

uint64_t sub_1000176BC()
{
  uint64_t v0;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 - 240, v0 - 232);
}

uint64_t sub_1000176E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  *(_WORD *)(v12 + 12) = 2080;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a11, v11);
}

uint64_t sub_100017704()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

id sub_10001771C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_100017724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return AnyHashable.init<A>(_:)(v0 + 208, v1, v2);
}

uint64_t sub_100017738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return AnyHashable.init<A>(_:)(v0 + 208, v2, v1);
}

unint64_t sub_10001774C()
{
  uint64_t v0;

  return sub_100016064(v0);
}

uint64_t sub_100017758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0);
}

id sub_100017760()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(v0, *(SEL *)(v2 + 3168), v1);
}

uint64_t sub_100017770(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000177A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 0);
}

uint64_t sub_1000177A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return QueryType.namespace<A>(_:)(a1, a2, a3, v5, a5);
}

uint64_t sub_1000177B4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000177C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return QueryType.filter(_:)(v1, v2, v3, v4, v5, a1);
}

id sub_1000177DC()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 3736));
}

void sub_1000177E8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x202020200A2820;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
}

void sub_100017800()
{
  RowIterator.compactMap<A>(_:)();
}

uint64_t sub_100017810()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001781C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 - 112) = a1;
  *(_QWORD *)(v3 - 104) = a2;
  *(_QWORD *)(v3 - 96) = a3;
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100017830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t _s6SQLite5TableV7clausesAA12QueryClausesVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000E01D0(v1, a1);
}

uint64_t sub_100017848(uint64_t a1)
{
  return swift_allocObject(a1, 72, 7);
}

uint64_t sub_100017870(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0, 0);
}

uint64_t sub_10001787C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  return v8(v7, v6, v5, a1, a2, a3, v4, v3);
}

uint64_t sub_1000178AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E8260(a1, a2, a3, a4, 0xE400000000000000);
}

uint64_t sub_1000178B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(a10);
}

uint64_t sub_1000178BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))
{
  return sub_1000EA980(a1, a2, 0x6874676E656CLL, 0xE600000000000000, a5);
}

uint64_t sub_1000178D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  _QWORD *v15;

  a7[3] = type metadata accessor for Expression(0, a5, a3, a4);
  a7[4] = &protocol witness table for Expression<A>;
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  v14 = *(_QWORD *)(a6 + 8);
  a7[8] = a5;
  a7[9] = v14;
  v15 = sub_10001795C(a7 + 5);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v15, a4, a5);
}

_QWORD *sub_10001795C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100017998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t type metadata accessor for Expression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Expression);
}

uint64_t sub_1000179D0(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000179D8()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000179E0()
{
  return type metadata accessor for TaskPriority(0);
}

uint64_t sub_1000179F8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100036968(v0, v1);
}

uint64_t sub_100017A04()
{
  return type metadata accessor for AppShortcutInterpolator.Builder(0);
}

_QWORD *sub_100017A0C()
{
  return sub_100037A7C(&STACK[0x238]);
}

uint64_t sub_100017A20()
{
  uint64_t v0;

  return sub_1000358EC(v0);
}

uint64_t sub_100017A48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return swift_dynamicCast(v3 - 240, v1 + 480, a1 + 8, v2, 6);
}

void sub_100017A60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10005A164(0, a2, v2);
}

uint64_t sub_100017A70(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

id sub_100017A7C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  return objc_msgSend(v2, *(SEL *)(v1 + 3168), v0);
}

id sub_100017A8C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_100017A94()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100017AB4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(a1);
}

_QWORD *sub_100017AC0()
{
  return sub_100037A7C(&STACK[0x2E0]);
}

void sub_100017ACC()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
  sub_10009A328();
}

id sub_100017ADC()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(v0 + 8 * v1);
}

void sub_100017AE4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a2 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100017AEC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10000FBEC(a1, a2, (uint64_t *)(v2 - 72));
}

uint64_t sub_100017AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0, a1, a3, a4);
}

uint64_t sub_100017B20(__n128 *a1, __n128 a2)
{
  uint64_t v2;

  a1[1] = a2;
  return sub_1000132C4(v2 - 120, (uint64_t)&a1[2]);
}

uint64_t sub_100017B30()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

unint64_t sub_100017BD4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  *(_QWORD *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  v5 = (_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t sub_100017C10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_100017C20(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x746567726174, 0xE600000000000000, 0);
}

uint64_t sub_100017C48()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_100017C80(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_100017C88()
{
  uint64_t v0;
  uint64_t v1;

  sub_100014360(v1, 0, 1, v0);
  return sub_10001C93C(v1, 1, v0);
}

void sub_100017CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  sub_10005A238(v21, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
}

uint64_t sub_100017CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v13 + 56) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a13, v14);
}

uint64_t sub_100017CE0()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 216))(1);
}

void sub_100017D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  <- infix<A>(_:_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100017D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return QueryType.namespace<A>(_:)(v5, v6, v7, a4, a5);
}

uint64_t sub_100017D24(uint64_t a1)
{
  uint64_t v1;

  return swift_allocError(v1, a1, 0, 0);
}

void sub_100017D64()
{
  void *v0;

}

void sub_100017D70()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x696669746E656469;
  v0._object = (void *)0xEA00000000007265;
  String.append(_:)(v0);
}

uint64_t sub_100017D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return sub_10000E87C((uint64_t *)va);
}

uint64_t _s6SQLite9StatementC29___lazy_storage___columnCount33_BBABA35034D0672F50B2547BC77385B8LLSiSgvpfi_0()
{
  return 0;
}

uint64_t sub_100017DA0(_QWORD *a1)
{
  uint64_t v1;

  sub_10000E87C(a1);
  return v1;
}

uint64_t sub_100017DD0(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  return Character.write<A>(to:)(va, 34, 0xE100000000000000, v3, v4);
}

uint64_t sub_100017E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t sub_100017E1C(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

void sub_100017E30()
{
  void *v0;

}

void sub_100017E38(id a1)
{

}

uint64_t sub_100017E48()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 120));
}

uint64_t sub_100017E54(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t sub_100017E68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10000FE10(*(_QWORD *)(v2 + 56) + 32 * a1, v1 + 480);
}

void sub_100017E78(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_log_t log, uint64_t a13, int a14, os_log_type_t type)
{
  uint8_t *v15;

  _os_log_impl(a1, log, type, a4, v15, 0x16u);
}

uint64_t sub_100017E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  return QueryType.filter(_:)(v30, v31, v32, a4, a5, (uint64_t)&a30);
}

uint64_t sub_100017EA8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100014360(v0, 1, 1, v1);
}

void sub_100017EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  <- infix<A>(_:_:)(a1, a2, a3, (uint64_t)&a9, a5, a6);
}

uint64_t sub_100017EC8()
{
  return ((uint64_t (*)(void))Task<>.value.getter)();
}

uint64_t sub_100017EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(v1, v0);
}

uint64_t sub_100017F04()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100017F0C()
{
  uint64_t v0;

  return swift_continuation_init(v0, 1);
}

uint64_t sub_100017F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  return Connection.prepareRowIterator(_:)(&a30);
}

void sub_100017F28()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x617461646174656DLL;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
}

uint64_t sub_100017F40()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 96));
}

uint64_t sub_100017F64()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100017F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, a5, a6, 22, 2);
}

uint64_t sub_100017F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *v5 = v4;
  v5[1] = v3;
  v5[2] = v2;
  v5[3] = a1;
  v5[8] = a1;
  v5[9] = a2;
  v5[4] = a2;
  v5[5] = v6;
  v5[6] = v7;
  v5[7] = v8;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_100017FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _UNKNOWN **v25;

  v22 = a6;
  v12 = type metadata accessor for Optional(0, a5);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v22 - v14;
  v18 = type metadata accessor for Expression(0, v12, v16, v17);
  a7[3] = v18;
  a7[4] = &protocol witness table for Expression<A>;
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4, v12);
  v24 = v18;
  v25 = &protocol witness table for Expression<A>;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v18);
  v20 = swift_getWitnessTable(",g", v12);
  ExpressionType<>.init(value:)((uint64_t)v15, v18, WitnessTable, v20, v22, (uint64_t)&v23);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a4, v12);
  return sub_100019A48(&v23, (uint64_t)(a7 + 5));
}

void sub_1000180D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD v28[21];
  _QWORD v29[21];
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  sub_1000100A8();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v26 = v7;
  v8 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v5);
  sub_10001017C();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 16))(v28, v10, v9);
  v11 = v28[4];
  v12 = v28[5];
  sub_1000100E0();
  sub_1000E0204(v28);
  if (v12)
  {
    if ((v6 & 1) != 0)
    {
      v13 = sub_10001BE7C(&qword_100128D58);
      inited = swift_initStackObject(v13, &v27);
      *(_OWORD *)(inited + 16) = xmmword_1000EFDA0;
      v15 = v11;
      sub_10001A6EC();
      v16 = v31;
      v17 = v32;
      sub_100013E10();
      sub_1000E0204(v30);
      sub_1000E0F38(v16, v17, (uint64_t *)(inited + 32));
      sub_1000100D0();
      v18 = sub_10001BE7C(&qword_10012BFA8);
      *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
      *(_QWORD *)(inited + 72) = 21313;
      *(_QWORD *)(inited + 80) = 0xE200000000000000;
      *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
      *(_QWORD *)(inited + 96) = v18;
      *(_QWORD *)(inited + 136) = v18;
      *(_QWORD *)(inited + 144) = &protocol witness table for Expression<A>;
      v19 = sub_1000D6A28();
      v21 = sub_1000E10E8(v19, v20, v15);
      v23 = v22;
      sub_10000C028();
      *(_QWORD *)(inited + 112) = v21;
      *(_QWORD *)(inited + 120) = v23;
      *(_QWORD *)(inited + 128) = _swiftEmptyArrayStorage;
      sub_100018F74(inited, v26);
      swift_setDeallocating(inited);
      sub_10001E778();
      goto LABEL_9;
    }
    sub_10000C028();
  }
  sub_10001A6EC();
  v24 = v29[4];
  v25 = v29[5];
  sub_1000100E0();
  sub_1000E0204(v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v1, v2, v4);
  if (v25)
  {
    sub_1000E0F0C();
  }
  else
  {
    sub_10001A6EC();
    sub_1000E0F0C();
    v24 = v31;
    v25 = v32;
    sub_1000100E0();
    sub_1000E0204(v30);
  }
  sub_1000E0F38(v24, v25, v26);
  sub_10000C028();
LABEL_9:
  sub_100013308();
}

uint64_t sub_100018298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_1000182C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return sub_100018298(a2, a3, a4);
  }
  return result;
}

_QWORD *sub_10001830C(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result[2] = *(_QWORD *)(v4 - 72);
  result[3] = v1;
  result[4] = v3;
  result[5] = v2;
  return result;
}

uint64_t sub_100018320(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100018348(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_10000FE10(*(_QWORD *)(v1 + 56) + 32 * a1, v2 - 112);
}

uint64_t sub_100018358()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

BOOL sub_100018370(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000183A8()
{
  return QueryType.filter(_:)();
}

uint64_t sub_1000183CC()
{
  return swift_slowAlloc(22, -1);
}

uint64_t sub_1000183F4(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_1000183FC()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = *(void **)(v0 + 216);
  v2 = sub_10000E858(*(_QWORD **)(v0 + 224), *(_QWORD *)(*(_QWORD *)(v0 + 224) + 24));
  return sub_10006AAF8(v1, (uint64_t)v2);
}

uint64_t sub_100018428()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 248));
}

void sub_100018440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  <- infix<A>(_:_:)(a1, a2, a3, (uint64_t)&a33, a5, a6);
}

id sub_100018458@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1000882A8(0xD000000000000010, a1, a2, (a3 - 32) | 0x8000000000000000);
}

_QWORD *sub_10001846C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_100037A7C(&a59);
}

uint64_t sub_100018480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 120) = v0;
  *(_QWORD *)(v4 - 112) = v1;
  *(_QWORD *)(v4 - 136) = v3;
  *(_QWORD *)(v4 - 128) = v2;
  return v4 - 120;
}

void sub_100018498()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x73656C646E7562;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1000184B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v1);
}

uint64_t sub_1000184C4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_1000CF304(a1, a2, a3, a3 + 1);
}

void sub_1000184E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v11;
  Swift::String v12;

  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
}

uint64_t sub_1000184F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return sub_1000136A0(v6, v7, v8, 0, 0xE000000000000000, a6);
}

uint64_t sub_100018510(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100018528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return swift_dynamicCast(v5 - 200, v5 - 144, v4, a4, 0);
}

void sub_10001853C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 542327072;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
}

uint64_t sub_100018550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(void);

  return sub_1000E7998(a1, a2, a3, a4, a5, a6, a7, a8, v8);
}

void sub_100018558()
{
  Swift::String v0;

  v0._countAndFlagsBits = 41;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void sub_100018564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_1000E9264(a1, a2, a3, v3, v4);
}

void sub_100018574(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10001857C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  return sub_1000EA6D4(a1, a2, a3, a4 & 0xFFFF00000000FFFFLL | 0x6D69720000, 0xE500000000000000, a6);
}

uint64_t sub_10001859C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0 + 32, v2);
}

_QWORD *sub_1000185A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_1000379AC(&a59);
}

uint64_t sub_1000185B0()
{
  uint64_t v0;

  return sub_100094ED0(*(_QWORD *)(v0 - 280));
}

uint64_t sub_1000185BC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void sub_1000185C8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_10001DBC8(v2, a2);
}

uint64_t sub_1000185D0()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_1000185F8()
{
  uint64_t v0;

  return objc_opt_self(*(_QWORD *)(v0 + 1696));
}

void sub_100018600(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  sub_10001C2C0(a1, v3, a3);
}

void sub_100018608(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, Swift::String a17)
{
  Swift::String v17;

  v17._object = (void *)((a1 - 32) | 0x8000000000000000);
  v17._countAndFlagsBits = a17._countAndFlagsBits;
  String.append(_:)(v17);
}

uint64_t sub_100018618(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_100018630(__n128 *a1, __n128 a2)
{
  uint64_t v2;

  a1[1] = a2;
  return sub_1000132C4(v2 - 104, (uint64_t)&a1[2]);
}

uint64_t sub_100018640()
{
  uint64_t v0;

  return swift_setDeallocating(v0);
}

uint64_t sub_100018648(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return specialized Array._endMutation()();
}

unint64_t sub_100018678()
{
  uint64_t v0;

  return sub_100016064(v0);
}

uint64_t sub_100018688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  return swift_dynamicCast(va1, (uint64_t *)va, v5, v4, 6);
}

uint64_t sub_1000186A0()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_1000186A8()
{
  return swift_willThrow();
}

uint64_t sub_1000186B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000E858(a1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v2);
}

uint64_t sub_1000186D4(uint64_t (*a1)(void))
{
  return a1();
}

_QWORD *sub_1000186F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  return sub_100019F20(&a37);
}

uint64_t sub_1000186F8(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100018700(float a1)
{
  uint64_t v1;
  float *v2;

  *v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

void sub_100018728()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x7079547972657571;
  v0._object = (void *)0xE900000000000065;
  String.append(_:)(v0);
}

uint64_t sub_100018744()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 104));
}

_QWORD *sub_10001874C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return OS_dispatch_queue.sync<A>(execute:)(&a18, a1, &a9);
}

_QWORD *sub_10001875C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

void sub_100018764()
{
  uint64_t v0;

}

uint64_t sub_10001876C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 472));
}

uint64_t sub_100018778(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v2, a2);
}

uint64_t sub_100018798()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[21] + 8))(v0[27], v0[20]);
}

void sub_1000187A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void *v16;
  Swift::String v17;

  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
}

uint64_t sub_1000187B8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_10000FBEC(v0, v1, (uint64_t *)(v2 - 96));
}

uint64_t sub_1000187C8()
{
  return ((uint64_t (*)(void))Task<>.value.getter)();
}

uint64_t sub_1000187D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for Expression(0, v4, a3, a4);
}

uint64_t sub_1000187E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t a7, uint64_t a8, unint64_t a9)
{
  return sub_1000D02C0(a1, a2, a3, 2u, 0, 0, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1000187F4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10000762C(a1, a2, a4, a4, a5, a5);
}

uint64_t sub_100018818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_100018848(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return sub_100018818(a2, a3, a4);
  }
  return result;
}

void sub_10001888C()
{
  sub_10002F988();
}

unint64_t sub_1000188B4()
{
  return sub_10003155C();
}

uint64_t sub_1000188C4()
{
  uint64_t v0;
  uint64_t v1;

  return __CocoaSet.contains(_:)(v0, *(_QWORD *)(v1 - 136));
}

uint64_t sub_1000188D0(uint64_t a1)
{
  uint64_t v1;

  return static NSObject.== infix(_:_:)(a1, v1);
}

_QWORD *sub_1000188E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return sub_100037A7C((uint64_t *)va);
}

uint64_t sub_1000188E8()
{
  uint64_t v0;

  return sub_10000E87C((_QWORD *)(v0 - 240));
}

uint64_t sub_1000188F0(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000188F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v0 + 16) = v4;
  v6 = (_QWORD *)(v0 + 24 * v5);
  v6[4] = v2;
  v6[5] = v3;
  v6[6] = v1;
}

uint64_t sub_100018918()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100018928(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_10000FBEC(a1, v3, a3);
}

uint64_t sub_100018930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

double sub_100018954()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000D6068(v1, v0);
}

uint64_t sub_100018974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return type metadata accessor for Optional(255, a7);
}

uint64_t sub_10001898C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10001899C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000189A8(uint64_t a1)
{
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

void *sub_1000189C4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

uint64_t sub_1000189CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  return swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(a10 + 48) + 16 * v10 + 8));
}

_QWORD *sub_1000189E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;

  a12 = v13;
  a13 = v14;
  return sub_10001795C(&a9);
}

void *sub_1000189EC()
{
  return malloc(0x28uLL);
}

uint64_t sub_100018A00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_100018A08(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000E858(a1, a2);
  return v2;
}

uint64_t sub_100018A28(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return String.hash(into:)(va, v1, v2);
}

uint64_t sub_100018A38()
{
  return type metadata accessor for Schema.RuntimeError(0);
}

void sub_100018A70()
{
  sub_10002FD7C();
}

uint64_t sub_100018A7C()
{
  return swift_slowAlloc(22, -1);
}

uint64_t sub_100018A9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return a3;
}

uint64_t sub_100018AAC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

NSString sub_100018AC0()
{
  return String._bridgeToObjectiveC()();
}

void sub_100018AD0(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100018AD8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 56));
}

uint64_t sub_100018AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

uint64_t sub_100018AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return sub_1000136A0(a1, a2, a3, 0, 0xE000000000000000, a6);
}

void sub_100018AF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  Connection.run(_:_:)(v2, v0, v1);
}

void sub_100018B10()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_100018B34()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10001EBF8(v0, v1);
}

uint64_t sub_100018B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return Dictionary.init(dictionaryLiteral:)(v5, v3, a3, v4);
}

uint64_t sub_100018B6C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100018B88@<X0>(uint64_t a1@<X1>, unint64_t a2@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a2 > 1, a1, 1);
}

float *sub_100018B98(float *result, float a2)
{
  *result = a2;
  return result;
}

void sub_100018BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10004D7B8((uint64_t)va);
}

BOOL sub_100018BF0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100018C00()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_100018C14(uint64_t a1)
{
  return swift_task_switch(a1, 0, 0);
}

uint64_t sub_100018C20(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100018C3C()
{
  uint64_t v0;

  return NSObject.hash(into:)(v0);
}

uint64_t sub_100018C48()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

uint64_t sub_100018C54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return type metadata accessor for Logger(0);
}

void sub_100018C60()
{
  sub_100058E4C();
}

uint64_t sub_100018C6C()
{
  uint64_t v0;

  return swift_retain(v0);
}

void sub_100018C78()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x79747265706F7270;
  v0._object = (void *)0xED0000656C746954;
  String.append(_:)(v0);
}

uint64_t sub_100018C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v1);
}

uint64_t sub_100018CCC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100018CE0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *v4 = v6;
  v4[1] = v7;
  v4[2] = v8;
  v4[3] = v5;
  v4[8] = v5;
  v4[9] = a4;
  v4[4] = a4;
  v4[5] = result;
  v4[6] = a2;
  v4[7] = a3;
  return result;
}

uint64_t sub_100018CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return dispatch thunk of Collection.count.getter(a4, a5);
}

uint64_t _s6SQLite12QueryClausesVwcp_0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  sub_100016714();
  sub_10001634C(v2, v3);
  v5 = v4[1];
  v6 = v4[2];
  *(_QWORD *)(v0 + 8) = v5;
  *(_QWORD *)(v0 + 16) = v6;
  v7 = v4[4];
  *(_QWORD *)(v0 + 24) = v4[3];
  *(_QWORD *)(v0 + 32) = v7;
  v8 = v4[6];
  *(_QWORD *)(v0 + 40) = v4[5];
  *(_QWORD *)(v0 + 48) = v8;
  v9 = v4[8];
  *(_QWORD *)(v0 + 56) = v4[7];
  *(_QWORD *)(v0 + 64) = v9;
  v10 = v4[10];
  swift_bridgeObjectRetain(v5);
  sub_10000BFF4();
  sub_10000C030();
  sub_10000C020();
  sub_1000100E0();
  if (v10)
  {
    *(_QWORD *)(v0 + 72) = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v0 + 80) = v10;
    *(_QWORD *)(v0 + 88) = *(_QWORD *)(v1 + 88);
    sub_100013E10();
    sub_10000BFF4();
  }
  else
  {
    sub_1000E0FE8((__n128 *)(v0 + 72));
  }
  v11 = *(_QWORD *)(v1 + 96);
  if (v11)
  {
    sub_10000FEA4(v11);
    if (v10)
    {
      *(_QWORD *)(v0 + 104) = *(_QWORD *)(v1 + 104);
      *(_QWORD *)(v0 + 112) = v10;
      *(_QWORD *)(v0 + 120) = *(_QWORD *)(v1 + 120);
      sub_100013E10();
      sub_10000BFF4();
    }
    else
    {
      sub_1000E0FE8((__n128 *)(v0 + 104));
    }
  }
  else
  {
    v12 = *(_OWORD *)(v1 + 112);
    *(_OWORD *)(v0 + 96) = *(_OWORD *)(v1 + 96);
    *(_OWORD *)(v0 + 112) = v12;
  }
  *(_QWORD *)(v0 + 128) = *(_QWORD *)(v1 + 128);
  sub_1000E0FA8();
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v1 + 160);
  swift_bridgeObjectRetain(v13);
  sub_1000101B0();
  return v0;
}

_QWORD *sub_100018E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return sub_10004017C((uint64_t *)va);
}

uint64_t sub_100018E30()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100018E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  return static String._fromSubstring(_:)(a59, a58, a62, a6);
}

uint64_t sub_100018E74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

uint64_t sub_100018EDC()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeFrontToBack)();
}

Swift::Int sub_100018EEC()
{
  uint64_t v0;

  return NSObject._rawHashValue(seed:)(*(_QWORD *)(v0 + 40));
}

_QWORD *sub_100018EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  return sub_100019F20(&a40);
}

id sub_100018F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  return *(id *)(a10 + 8 * v10);
}

uint64_t sub_100018F0C()
{
  return sub_100097E6C();
}

uint64_t sub_100018F28(uint64_t a1)
{
  uint64_t v1;

  return swift_dynamicCastObjCClass(v1, a1);
}

void sub_100018F50()
{
  uint64_t v0;

}

void sub_100018F74(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10001A118(a1, 32, 0xE100000000000000, a2);
}

void sub_100018F80()
{
  sub_10001FA9C();
}

uint64_t sub_100018F88()
{
  return Connection.handle.getter();
}

_QWORD *sub_100018F90(__n128 *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  a1[1] = a2;
  *(_QWORD *)(v3 + 56) = v2;
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(v4 + 8);
  return sub_10001795C((__n128 *)a1[2].n128_u64);
}

uint64_t _s6SQLite12QueryClausesVwxx_0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100035E24((uint64_t)a1);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  v2 = a1[10];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[11]);
  }
  v3 = a1[12];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    v4 = a1[14];
    if (v4)
    {
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(a1[15]);
    }
  }
  swift_bridgeObjectRelease(a1[16]);
  return sub_1000179D0(a1[20]);
}

void sub_100019044()
{
  void *v0;

}

uint64_t sub_100019050()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 8) + 8))(v1);
}

_QWORD *sub_100019064@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_100019074()
{
  return specialized Array._endMutation()();
}

uint64_t sub_10001909C()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getAssociatedTypeWitness(0, v0, v1);
}

void sub_1000190AC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * (a1 / v3);
}

BOOL sub_1000190BC@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_1000190D0()
{
  uint64_t v0;

  String.append(_:)(*(Swift::String *)(v0 + 328));
}

uint64_t sub_1000190DC()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000190E4@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v3, a1, v2);
}

uint64_t sub_1000190F0(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void sub_1000190F8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t sub_100019100()
{
  uint64_t v0;

  sub_10000E87C((_QWORD *)(v0 - 168));
  return sub_1000D0768(v0 - 128);
}

uint64_t sub_10001911C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100019128(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000E858(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_10001914C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  char v25[112];
  _QWORD v26[21];

  sub_1000133E0(a1, a2);
  v9 = sub_1000D6A28();
  v11 = sub_1000E10E8(v9, v10, a1);
  v13 = v12;
  sub_10000C028();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 16))(v26, a3, a4);
  v15 = v26[6];
  v14 = v26[7];
  sub_1000101B0();
  sub_1000E0204(v26);
  if (v14)
  {
    v16 = sub_10001BE7C(&qword_100128D58);
    inited = swift_initStackObject(v16, v25);
    *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
    v18 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(inited + 56) = v18;
    *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
    v19 = sub_1000D6A28();
    v21 = sub_100019350(v19, v20, v15, v14);
    v23 = v22;
    sub_1000059A8();
    *(_QWORD *)(inited + 32) = v21;
    *(_QWORD *)(inited + 40) = v23;
    *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(inited + 96) = v18;
    *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
    *(_QWORD *)(inited + 72) = v11;
    *(_QWORD *)(inited + 80) = v13;
    *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
    sub_10001B3D8(inited, 46, a5);
    sub_1000E10F0();
    return sub_1000E0F84();
  }
  else
  {
    result = sub_10001BE7C(&qword_10012BFA8);
    a5[4] = (uint64_t)&protocol witness table for Expression<A>;
    *a5 = v11;
    a5[1] = v13;
    a5[2] = (uint64_t)_swiftEmptyArrayStorage;
    a5[3] = result;
  }
  return result;
}

uint64_t sub_1000192B4()
{
  return type metadata accessor for LNAppShortcutParameterRecord(0);
}

uint64_t sub_1000192BC()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_1000192C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_1000192E8(uint64_t a1@<X8>)
{
  char v1;

  *(_QWORD *)(a1 + 64) |= 1 << v1;
}

id sub_100019300()
{
  void *v0;

  return v0;
}

uint64_t sub_100019308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t a7, uint64_t a8, unint64_t a9)
{
  return sub_1000D02C0(a1, a2, a3, 2u, 1, 0, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_100019318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for Expression(0, v4, a3, a4);
}

uint64_t sub_100019324()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_100019338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Connection.scalar(_:_:)(a1, a2, a3, (uint64_t)va);
}

uint64_t sub_100019350(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  char v20[8];

  swift_bridgeObjectRetain(a2);
  v8 = sub_10001C970(0, 0xE000000000000000, a3, a4, a1, a2);
  v9 = sub_10001AFB0(v8);
  sub_1000184E8(v9, v10, v11, v12, v13, v14, v15, v16, v19, 0);
  v17 = sub_1000100D0();
  sub_10001AFB0(v17);
  return *(_QWORD *)v20;
}

void sub_100019408(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100019EB8(a1, a2, v2);
}

void sub_100019410()
{
  void *v0;

}

uint64_t sub_100019418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void sub_100019424(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_100019430()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001943C()
{
  return _s7BuilderVMa(0);
}

id sub_100019444()
{
  void *v0;

  return v0;
}

uint64_t sub_10001944C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a7(a1, a2, a3, a4);
}

uint64_t sub_10001947C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v1);
}

void sub_100019490(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t inited;
  unint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _UNKNOWN **v34;
  Swift::String v35;
  void *object;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t i;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v64;
  uint64_t v65;
  __int128 v66[2];
  _BYTE v67[352];
  _BYTE v68[72];
  _BYTE v69[72];
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v4 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v7 = a2 + 32;
    swift_bridgeObjectRetain(a2);
    v8 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_100019EE4(v7, (uint64_t)&v70);
      v9 = sub_10001BE7C(&qword_100128D58);
      inited = swift_initStackObject(v9, v69);
      *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
      sub_100019A60((uint64_t)&v70, inited + 32);
      v11 = v8[2];
      swift_bridgeObjectRetain(v8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
      if (!isUniquelyReferenced_nonNull_native || (v14 = v8[3] >> 1, v15 = v8, v14 <= v11))
      {
        sub_100019DF4(isUniquelyReferenced_nonNull_native, v11 + 1, 1, v8);
        v15 = v16;
        v14 = v16[3] >> 1;
      }
      v17 = v15[2];
      if (v14 <= v17)
        break;
      v18 = (uint64_t)&v15[5 * v17 + 4];
      sub_10001BE7C(&qword_100129F18);
      swift_arrayInitWithCopy(v18);
      ++v15[2];
      swift_bridgeObjectRelease(inited);
      v19 = swift_initStackObject(v9, v68);
      *(_OWORD *)(v19 + 16) = xmmword_1000EFAE0;
      sub_100019A60((uint64_t)&v74, v19 + 32);
      v20 = v6[2];
      swift_bridgeObjectRetain(v6);
      v22 = swift_isUniquelyReferenced_nonNull_native(v21);
      if (!v22 || (v23 = v6[3] >> 1, v24 = v6, v23 <= v20))
      {
        sub_100019DF4(v22, v20 + 1, 1, v6);
        v24 = v25;
        v23 = v25[3] >> 1;
      }
      v26 = v24[2];
      if (v23 <= v26)
        goto LABEL_28;
      swift_arrayInitWithCopy(&v24[5 * v26 + 4]);
      ++v24[2];
      swift_bridgeObjectRelease(v19);
      sub_100019F20(&v70);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v8);
      v7 += 80;
      v6 = v24;
      v8 = v15;
      if (!--v5)
      {
        swift_bridgeObjectRelease(a2);
        v4 = a1;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
    v15 = _swiftEmptyArrayStorage;
    v24 = _swiftEmptyArrayStorage;
LABEL_14:
    v27 = sub_10001BE7C(&qword_10012C138);
    v28 = swift_initStackObject(v27, v67);
    *(_OWORD *)(v28 + 16) = xmmword_1000F14E0;
    v29 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(v28 + 56) = v29;
    *(_QWORD *)(v28 + 64) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v28 + 32) = 0x545245534E49;
    *(_QWORD *)(v28 + 40) = 0xE600000000000000;
    *(_QWORD *)(v28 + 48) = _swiftEmptyArrayStorage;
    if (v4 == 5)
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v70 = 2118223;
      v71 = 0xE300000000000000;
      v35._countAndFlagsBits = OnConflict.rawValue.getter(v4);
      object = v35._object;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(object);
      v30 = v70;
      v31 = v71;
      v34 = &protocol witness table for Expression<A>;
      v33 = v29;
      v32 = _swiftEmptyArrayStorage;
    }
    *(_QWORD *)(v28 + 72) = v30;
    *(_QWORD *)(v28 + 80) = v31;
    *(_QWORD *)(v28 + 88) = v32;
    *(_QWORD *)(v28 + 96) = v33;
    *(_QWORD *)(v28 + 136) = v29;
    *(_QWORD *)(v28 + 144) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v28 + 104) = v34;
    *(_QWORD *)(v28 + 112) = 1330925129;
    *(_QWORD *)(v28 + 120) = 0xE400000000000000;
    *(_QWORD *)(v28 + 128) = _swiftEmptyArrayStorage;
    sub_10001CAC4();
    sub_1000180D0();
    sub_10001A118((uint64_t)v15, 8236, 0xE200000000000000, &v70);
    v37 = v72;
    v38 = v73;
    v39 = sub_10000E858(&v70, v72);
    v40 = sub_10001C528(v39, 0, 0xE000000000000000, v37, v38);
    v42 = v41;
    v44 = v43;
    sub_10000E87C(&v70);
    *(_QWORD *)(v28 + 192) = v40;
    *(_QWORD *)(v28 + 200) = v42;
    *(_QWORD *)(v28 + 208) = v44;
    *(_QWORD *)(v28 + 216) = v29;
    *(_QWORD *)(v28 + 256) = v29;
    *(_QWORD *)(v28 + 264) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v28 + 224) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v28 + 232) = 0x5345554C4156;
    *(_QWORD *)(v28 + 240) = 0xE600000000000000;
    *(_QWORD *)(v28 + 248) = _swiftEmptyArrayStorage;
    sub_10001A118((uint64_t)v24, 8236, 0xE200000000000000, &v70);
    v45 = v72;
    v46 = v73;
    v47 = sub_10000E858(&v70, v72);
    v48 = sub_10001C528(v47, 0, 0xE000000000000000, v45, v46);
    v50 = v49;
    v52 = v51;
    sub_10000E87C(&v70);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v15);
    *(_QWORD *)(v28 + 296) = v29;
    *(_QWORD *)(v28 + 304) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v28 + 272) = v48;
    *(_QWORD *)(v28 + 280) = v50;
    *(_QWORD *)(v28 + 288) = v52;
    v53 = _swiftEmptyArrayStorage;
    sub_10001CACC(a4, v28 + 312);
    for (i = 32; i != 352; i += 40)
    {
      sub_100019FA0(v28 + i, (uint64_t)&v70, &qword_10012C140);
      sub_100019EB8((uint64_t)&v70, (uint64_t)&v64, &qword_10012C140);
      if (v65)
      {
        sub_100019A48(&v64, (uint64_t)v66);
        sub_100019A48(v66, (uint64_t)&v64);
        if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0)
        {
          sub_100019DF4(0, v53[2] + 1, 1, v53);
          v53 = v57;
        }
        v56 = v53[2];
        v55 = v53[3];
        if (v56 >= v55 >> 1)
        {
          sub_100019DF4(v55 > 1, v56 + 1, 1, v53);
          v53 = v58;
        }
        v53[2] = v56 + 1;
        sub_100019A48(&v64, (uint64_t)&v53[5 * v56 + 4]);
      }
      else
      {
        sub_1000131A8((uint64_t)&v64, &qword_10012C140);
      }
    }
    swift_bridgeObjectRelease(v28);
    sub_10001A118((uint64_t)v53, 32, 0xE100000000000000, &v70);
    swift_bridgeObjectRelease(v53);
    v59 = v72;
    v60 = v73;
    sub_10000E858(&v70, v72);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v60);
    sub_10000E87C(&v70);
  }
}

uint64_t sub_100019A48(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_100019A60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_10000BFBC();
}

unint64_t sub_100019AA0()
{
  uint64_t v0;

  return sub_100016064(v0);
}

uint64_t sub_100019AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return String.hash(into:)(v2, a1, a2);
}

BOOL sub_100019ADC@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100019AF0()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

BOOL sub_100019B04(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100019B20(uint64_t a1)
{
  uint64_t v1;

  return sub_10002D9CC(a1, v1);
}

uint64_t sub_100019B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, a9);
}

uint64_t sub_100019B48()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

void sub_100019B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  <- infix<A>(_:_:)(a1, a2, a3, v6 + 32, a5, a6);
}

void sub_100019B5C()
{
  void *v0;
  Swift::String v1;

  v1._countAndFlagsBits = 0xD000000000000010;
  v1._object = v0;
  String.append(_:)(v1);
}

uint64_t sub_100019B6C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100019B78(_QWORD *a1)
{
  uint64_t v1;

  sub_10000E858(a1, v1);
  return Expressible.asSQL()()._countAndFlagsBits;
}

uint64_t sub_100019B9C(__n128 *a1, __n128 a2)
{
  uint64_t v2;

  a1[1] = a2;
  return sub_1000132C4(v2 - 128, (uint64_t)&a1[2]);
}

void sub_100019BAC()
{
  _QWORD *v0;

  sub_100019DF4(0, v0[2] + 1, 1, v0);
}

uint64_t sub_100019BC4()
{
  return sub_10001D378();
}

uint64_t sub_100019BD4()
{
  uint64_t *v0;

  return sub_10001BE7C(v0);
}

void sub_100019BE8(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100013654() || v7 + v5 > *(_QWORD *)(v6 + 24) >> 1)
  {
    sub_100011848();
    v6 = a2();
  }
  if (!*(_QWORD *)(v3 + 16))
  {
    if (!v5)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000176CC();
  if (v11 != v12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v6 + 40 * v10 + 32;
  sub_10001BE7C(a3);
  sub_10001BFB0(v13);
  if (!v5)
  {
LABEL_11:
    sub_1000117B4();
    *v4 = v6;
    return;
  }
  sub_10001C028();
  if (!v12)
  {
    *(_QWORD *)(v6 + 16) = v14;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_100019CC4(uint64_t a1, uint64_t a2)
{
  return sub_10000FE10(a1, a2);
}

void sub_100019CCC(Swift::String a1)
{
  String.append(_:)(a1);
}

id sub_100019CD8()
{
  void *v0;

  return v0;
}

uint64_t sub_100019CE0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_10000FBEC(v1, v0, (uint64_t *)(v2 - 88));
}

uint64_t sub_100019D18()
{
  uint64_t v0;

  return swift_setDeallocating(v0);
}

uint64_t sub_100019D20()
{
  uint64_t v0;

  return sub_10000E87C((_QWORD *)(v0 + 160));
}

uint64_t sub_100019D34()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100014360(v0, 1, 1, v1);
}

void sub_100019D48()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_100019D58()
{
  uint64_t v0;

  return v0;
}

void sub_100019D84(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

id sub_100019D98(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2 - 112);
}

uint64_t sub_100019DA0()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_100019DE4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return sub_1000E9F10((uint64_t *)va, 0);
}

void sub_100019DF4(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  sub_10001A720(a1, a2, a3, a4, &qword_100128D58, &qword_100129F18);
}

void sub_100019E08(uint64_t a1)
{
  sub_100019BE8(a1, (uint64_t (*)(void))sub_100019DF4, &qword_100129F18);
}

uint64_t initializeWithCopy for Setter(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

_QWORD *sub_100019E78(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void sub_100019EB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1000058A4(a1, a2, a3);
  sub_1000137A0(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_10000BFBC();
}

uint64_t sub_100019EE4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Setter(a2, a1);
  return a2;
}

_QWORD *sub_100019F20(_QWORD *a1)
{
  destroy for Setter(a1);
  return a1;
}

uint64_t destroy for Setter(_QWORD *a1)
{
  sub_10000E87C(a1);
  return sub_10000E87C(a1 + 5);
}

uint64_t _s18ExpectedInvocationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

void sub_100019FA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1000058A4(a1, a2, a3);
  sub_1000137A0(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_10000BFBC();
}

void sub_100019FCC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001BE7C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_10000BFBC();
}

void sub_10001A00C(uint64_t a1, id *a2)
{

}

uint64_t sub_10001A01C()
{
  uint64_t v0;

  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_10001A028(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10001BE7C(a3);
}

uint64_t sub_10001A048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return _NativeDictionary._delete(at:)(v4, v3, a3, v5);
}

id sub_10001A074(uint64_t a1, uint64_t a2)
{
  void *v2;

  return sub_100016F00(a1, a2, v2);
}

uint64_t sub_10001A080()
{
  return Logger.logObject.getter();
}

uint64_t sub_10001A088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return a16;
}

uint64_t sub_10001A098()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 3);
}

void sub_10001A0A4()
{
  void *v0;

}

uint64_t sub_10001A0AC(uint64_t a1)
{
  uint64_t v1;

  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_10001A0B8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10001A0C4()
{
  uint64_t *v0;

  return sub_10001BE7C(v0);
}

void sub_10001A0CC()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

__n128 sub_10001A0D8@<Q0>(uint64_t a1@<X8>)
{
  int v1;
  _DWORD *v2;
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(a1 - 256);
  *v2 = result.n128_u32[0];
  *(_DWORD *)(v3 - 364) = v1;
  return result;
}

uint64_t sub_10001A0F0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10001A0F8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_10001A118(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a3;
  v5 = a2;
  v6 = a4;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain(a1);
    v9 = _swiftEmptyArrayStorage;
    v10 = _swiftEmptyArrayStorage;
    while (1)
    {
      v11 = v8[3];
      v12 = v8[4];
      sub_10000E858(v8, v11);
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
      v15 = v14;
      v17 = v16;
      swift_bridgeObjectRetain(v14);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        sub_10001B84C();
        v9 = v28;
      }
      v18 = v9[2];
      if (v18 >= v9[3] >> 1)
      {
        sub_10001B84C();
        v9 = v29;
      }
      v9[2] = v18 + 1;
      v19 = &v9[2 * v18];
      v19[4] = v13;
      v19[5] = v15;
      v20 = *(_QWORD *)(v17 + 16);
      v21 = v10[2];
      if (__OFADD__(v21, v20))
        break;
      swift_bridgeObjectRetain(v17);
      if (!swift_isUniquelyReferenced_nonNull_native(v10) || v21 + v20 > v10[3] >> 1)
      {
        sub_10001A5C4();
        v10 = v22;
      }
      if (*(_QWORD *)(v17 + 16))
      {
        v23 = v10[2];
        if ((v10[3] >> 1) - v23 < v20)
          goto LABEL_23;
        v24 = (uint64_t)&v10[5 * v23 + 4];
        sub_10001BE7C(&qword_100129578);
        swift_arrayInitWithCopy(v24);
        if (v20)
        {
          v25 = v10[2];
          v26 = __OFADD__(v25, v20);
          v27 = v25 + v20;
          if (v26)
            goto LABEL_24;
          v10[2] = v27;
        }
      }
      else if (v20)
      {
        goto LABEL_22;
      }
      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease(v15);
      v8 += 5;
      if (!--v7)
      {
        swift_bridgeObjectRelease(a1);
        v4 = a3;
        v6 = a4;
        v5 = a2;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  else
  {
    v9 = _swiftEmptyArrayStorage;
    v10 = _swiftEmptyArrayStorage;
LABEL_20:
    v30 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
    v31 = sub_10001C2FC((unint64_t *)&qword_100129568, (uint64_t *)&unk_10012AD80, (uint64_t)&protocol conformance descriptor for [A]);
    v32 = BidirectionalCollection<>.joined(separator:)(v5, v4, v30, v31);
    v34 = v33;
    swift_bridgeObjectRelease(v9);
    v6[3] = sub_10001BE7C(&qword_10012BFA8);
    v6[4] = (uint64_t)&protocol witness table for Expression<A>;
    *v6 = v32;
    v6[1] = v34;
    v6[2] = (uint64_t)v10;
  }
}

void sub_10001A39C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000183B8();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100013654() || v4 > *(_QWORD *)(v2 + 24) >> 1)
  {
    sub_100011848();
    sub_10001A5C4();
    v2 = v6;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000176CC();
  if (v8 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v2 + 40 * v7 + 32;
  sub_10001BE7C(&qword_100129578);
  sub_10001BFB0(v9);
  if (!v3)
  {
LABEL_11:
    sub_1000117B4();
    *v1 = v2;
    sub_10001ADFC();
    return;
  }
  sub_10001C028();
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

id sub_10001A454(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void sub_10001A45C(char a1@<W8>)
{
  _QWORD *v1;

  *v1 = -1 << a1;
}

uint64_t sub_10001A46C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_10001A480(uint64_t (*a1)(void))
{
  return a1();
}

unint64_t sub_10001A48C()
{
  uint64_t v0;

  return sub_100016064(v0);
}

uint64_t sub_10001A4B4()
{
  uint64_t v0;

  return v0 - 168;
}

uint64_t sub_10001A4EC()
{
  uint64_t v0;

  return v0;
}

void sub_10001A4FC()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

void ExpressionType.expression.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  sub_10001ADFC();
}

uint64_t sub_10001A55C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_10001A588()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

void sub_10001A590(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, a1);
  ExpressionType.expression.getter(a1, WitnessTable);
}

void sub_10001A5C4()
{
  _QWORD *v0;
  char v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  sub_10001F830();
  if ((v4 & 1) != 0)
  {
    sub_100018654();
    if (v5 != v6)
    {
      sub_1000158DC();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013784();
  if (v3)
  {
    v7 = sub_10001BE7C(&qword_1001296C8);
    v8 = (_QWORD *)sub_1000100C8(v7, 40 * (_QWORD)v3 + 32);
    sub_100036350(v8);
  }
  else
  {
    v3 = _swiftEmptyArrayStorage;
  }
  if ((v1 & 1) != 0)
  {
    if (v3 != v0 || &v0[5 * v2 + 4] <= v3 + 4)
      memmove(v3 + 4, v0 + 4, 40 * v2);
    v0[2] = 0;
  }
  else
  {
    sub_10001BE7C(&qword_100129578);
    sub_1000D69C8((uint64_t)(v3 + 4));
  }
  sub_1000117B4();
  sub_10001ADFC();
}

uint64_t sub_10001A6B8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t sub_10001A6C4()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

void sub_10001A6CC()
{
  uint64_t v0;

}

double sub_10001A6D4()
{
  return 0.0;
}

uint64_t sub_10001A6EC()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_10001A6F8()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000E87C((_QWORD *)(v1 - 144));
  sub_10000E87C((_QWORD *)(v1 - 104));
  return v0;
}

void sub_10001A720(char a1, uint64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;

  if ((a3 & 1) != 0)
  {
    sub_100018654();
    if (v10 != v11)
    {
      sub_1000158DC();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = a4[2];
  if (v9 <= v12)
    v13 = a4[2];
  else
    v13 = v9;
  if (v13)
  {
    v14 = sub_10001BE7C(a5);
    v15 = (_QWORD *)sub_1000100C8(v14, 40 * v13 + 32);
    v16 = j__malloc_size(v15);
    v15[2] = v12;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 40);
  }
  else
  {
    v15 = _swiftEmptyArrayStorage;
  }
  if ((a1 & 1) != 0)
  {
    if (v15 != a4 || &a4[5 * v12 + 4] <= v15 + 4)
      memmove(v15 + 4, a4 + 4, 40 * v12);
    a4[2] = 0;
  }
  else
  {
    sub_10001BE7C(a6);
    swift_arrayInitWithCopy(v15 + 4);
  }
  sub_1000117B4();
}

void sub_10001A82C()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

uint64_t sub_10001A83C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_10001A844(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10001A84C()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

void sub_10001A854()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  *v2 = v0;

}

uint64_t sub_10001A874(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_1000D5F44(a1, a2, a3, a4, 0, 0, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10001A880()
{
  return sub_10001E778();
}

uint64_t sub_10001A8A8()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v1, v2, v3, 0, 0xE000000000000000);
}

id sub_10001A8C4(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10001A8CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10001A8E8()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

void sub_10001A8F8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_10001A118(a1, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_10001A900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v1 + 72);
  result = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v0 + 80) = result;
  return result;
}

uint64_t sub_10001A928()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10001A930()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100019350(34, 0xE100000000000000, v0, v1);
}

uint64_t sub_10001A944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  unsigned __int8 v14;
  uint64_t v15;

  return sub_1000D793C((uint64_t)&a14, (uint64_t)&a9, 1, v14, v15);
}

uint64_t sub_10001A970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

unint64_t sub_10001A980()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 232);
  *(_QWORD *)(v0 - 240) = *(_QWORD *)(v0 - 240);
  *(_QWORD *)(v0 - 232) = v1;
  return sub_100012F00();
}

unint64_t sub_10001A98C()
{
  return sub_10003155C();
}

id sub_10001A99C(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 712));
}

void sub_10001A9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  sub_1000207A8(v2, a2, v3);
}

uint64_t sub_10001A9B4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

double sub_10001A9C8()
{
  return 0.0;
}

uint64_t sub_10001A9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10000E87C(&a9);
}

uint64_t sub_10001A9EC()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_10001AA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  v14 = *(_QWORD *)(a2 + 8);
  a13 = a1;
  a14 = v14;
  return sub_10001795C(&a10);
}

void sub_10001AA24(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_10001AA30()
{
  return sub_10003149C();
}

id sub_10001AA38(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10001AA40(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000E858(a1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v2);
}

uint64_t sub_10001AA64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v1 + 120);
}

uint64_t sub_10001AA80()
{
  uint64_t v0;

  return swift_errorRelease(*(_QWORD *)(v0 - 112));
}

uint64_t sub_10001AA88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100012A40(v3, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
}

uint64_t sub_10001AAAC()
{
  uint64_t v0;

  return v0 - 112;
}

uint64_t sub_10001AADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  void *v10;

  return sub_1000DACF0(a1, a2, a3, a4, a5, a6, a7, a8, a9, v9, v10);
}

void sub_10001AAE8(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v1);
}

void sub_10001AAFC()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  sub_1000189B0();
  if ((v2 & 1) != 0)
  {
    sub_100018654();
    if (v3 != v4)
    {
      sub_1000158DC();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013344();
  if (v1)
  {
    v10 = sub_1000101F4(v5, v6, v7, v8, v9);
    v11 = (_QWORD *)sub_1000100C8(v10, 16 * v1 + 32);
    v12 = j__malloc_size(v11);
    sub_1000362A0((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v0 & 1) != 0)
  {
    sub_10001859C();
    sub_10001ABDC();
  }
  else
  {
    sub_1000117D0(v5, v6, (uint64_t)(v11 + 4));
  }
  sub_10001ADFC();
}

uint64_t sub_10001ABAC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10001ABB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100029BE4(a1, a2, a3, a4, a5);
}

uint64_t sub_10001ABC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6);
}

uint64_t sub_10001ABD0(uint64_t a1)
{
  return swift_allocObject(a1, 48, 7);
}

uint64_t sub_10001ABDC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001ABF8()
{
  return swift_slowAlloc(8, -1);
}

uint64_t sub_10001AC08()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_10001AC14()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

void sub_10001AC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10005A164(0, a2, v2);
}

uint64_t sub_10001AC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(v0, v1, v2);
}

uint64_t sub_10001AC3C()
{
  return swift_slowAlloc(22, -1);
}

void sub_10001AC5C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000732D4(a1, v2, v1);
}

uint64_t sub_10001AC6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return Set.description.getter(a1, v1, v2);
}

id sub_10001AC78()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10008C1AC(v0, v1, 9006, 0);
}

void sub_10001AC94()
{
  sub_10001B71C();
}

uint64_t sub_10001ACA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100012A40(v4, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v5, v4);
}

uint64_t sub_10001ACC4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 104, v1 - 96);
}

uint64_t sub_10001ACE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(a12 + 16));
}

uint64_t sub_10001AD10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, a3, v5, 0);
}

void sub_10001AD24()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x4449656C646E7562;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10001AD3C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10001AD68()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v3, v1, v2);
}

uint64_t sub_10001AD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  return swift_dynamicCast(a1, va, v12, a4, 0);
}

uint64_t sub_10001AD88(_QWORD *a1)
{
  uint64_t v1;

  sub_10000E87C(a1);
  return v1;
}

uint64_t sub_10001ADA4(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

unint64_t sub_10001ADB8(uint64_t a1, uint64_t a2)
{
  return sub_100016064(a2);
}

id sub_10001ADDC(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10001ADE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11, 2, a4, 55, 2, a7, 25, a9, a10, a11);
}

void sub_10001AE0C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 8u);
}

uint64_t sub_10001AE20()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_10001AE28(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_10001AE38@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 - 256));
}

uint64_t sub_10001AE40(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10001AE5C(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10001AE78()
{
  sub_10002FD68();
}

id sub_10001AE90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;

  return sub_10008C324(0xD000000000000010, (a1 - 32) | 0x8000000000000000, v2, v1);
}

void sub_10001AEB0()
{
  Row.get<A>(_:)();
}

unint64_t sub_10001AEC0(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_10001AED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(a1, a2, 0, 0, 0, 1, v2, v2);
}

_QWORD *sub_10001AEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_100037A7C(&a59);
}

void sub_10001AF08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  sub_1000C1954(v8, v11, v9, v10, a1, a6, a7, a8);
}

uint64_t sub_10001AF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void sub_10001AF38()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x4552454645522029;
  v0._object = (void *)0xED0000205345434ELL;
  String.append(_:)(v0);
}

uint64_t sub_10001AF64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(a1, v2, v1);
}

void sub_10001AF70(uint64_t a1)
{
  sub_1000CF2C4(a1);
}

void sub_10001AF78(uint64_t a1)
{
  uint64_t *v1;

  sub_1000131A8(a1, v1);
}

uint64_t sub_10001AF9C()
{
  uint64_t v0;

  return swift_arrayInitWithCopy(v0);
}

uint64_t sub_10001AFB0(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a1);
  return Character.write<A>(to:)(va, v2, v1, v3, v4);
}

uint64_t sub_10001AFC8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000E858(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

void sub_10001B000(const void *aBlock)
{
  _Block_release(aBlock);
}

uint64_t sub_10001B010(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return swift_beginAccess(v1 + 16, va, 0, 0);
}

uint64_t sub_10001B024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t);

  return sub_1000E759C(a1, a2, a3, a4, a5, a6, a7, a8, v8, v9);
}

uint64_t sub_10001B030(uint64_t a1)
{
  return sub_1000E8584(a1, 0xE400000000000000);
}

void sub_10001B048()
{
  Swift::String v0;

  v0._countAndFlagsBits = 41;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10001B058()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_10001B078(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10001B098()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_10001B0A4()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x736E6F69746361;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10001B0C0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001B0D4(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10001B0E8(uint64_t a1)
{
  return swift_allocObject(a1, 128, 15);
}

uint64_t sub_10001B0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v10);
}

uint64_t sub_10001B120()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_10001B128()
{
  uint64_t v0;

  return swift_arrayDestroy(*(_QWORD *)(v0 - 152), 1);
}

id sub_10001B13C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  uint64_t v31;

  return objc_msgSend(a31, *(SEL *)(v31 + 3120));
}

uint64_t sub_10001B148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

unint64_t sub_10001B154(float a1)
{
  float *v1;
  void *v2;

  *v1 = a1;
  return sub_10000E994(v2);
}

void sub_10001B16C(void *a1@<X8>)
{

}

uint64_t sub_10001B18C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getAssociatedTypeWitness(a1, a2, v2);
}

uint64_t sub_10001B198(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000E858(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

double sub_10001B1BC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  *(_QWORD *)(v7 + 48) = a2;
  *(_QWORD *)(v7 + 56) = a1;
  *(_BYTE *)v2 = 0;
  *(_QWORD *)(v2 + 8) = v7;
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)(v2 + 24) = v5;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = v4;
  *(_QWORD *)(v2 + 56) = v3;
  *(_QWORD *)(v2 + 64) = a2;
  result = 0.0;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = a2;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_WORD *)(v2 + 152) = 256;
  *(_QWORD *)(v2 + 160) = a2;
  return result;
}

uint64_t sub_10001B21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  return sub_1000E6FA4(a12, a13, a14, 1, v14);
}

void sub_10001B23C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x2045504143534520;
  v0._object = (void *)0xEA0000000000293FLL;
  String.append(_:)(v0);
}

BOOL sub_10001B258()
{
  Swift::Int v0;
  char v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

void sub_10001B26C()
{
  sub_10002F96C();
}

id sub_10001B278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10007D300(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_10001B284(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 96, v1 - 88);
}

BOOL sub_10001B2A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_10001B2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return sub_100005278((uint64_t *)va);
}

uint64_t sub_10001B2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return sub_100019A48(&a9, (uint64_t)&a13);
}

unint64_t sub_10001B2D0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1000530A8(a2, (a3 & 0xC000000000000001) == 0, a3);
}

uint64_t sub_10001B2EC()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_1000C939C(v0, v1);
}

uint64_t sub_10001B2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, a1, a2, 0);
}

id sub_10001B314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008C1AC(a1, a2, a3, 0);
}

_QWORD *sub_10001B320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_100037A7C(&a59);
}

uint64_t sub_10001B328()
{
  return swift_bridgeObjectRetain_n(0xE000000000000000, 2);
}

uint64_t sub_10001B334()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001B364(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_10001B36C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10000FBEC(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_10001B378()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001B38C()
{
  uint64_t v0;

  return v0;
}

void sub_10001B3A4()
{
  RowIterator.compactMap<A>(_:)();
}

void sub_10001B3BC()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_10001B3C8()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

void sub_10001B3D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10001A118(a1, a2, 0xE100000000000000, a3);
}

uint64_t sub_10001B3E0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001B3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100014360(a1, a2, 1, v2);
}

uint64_t sub_10001B408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))
{
  return sub_1000EA980(a1, a2, a3 & 0xFFFF0000FFFFFFFFLL | 0x7200000000, 0xE500000000000000, a5);
}

void sub_10001B414()
{
  void *v0;

}

void *sub_10001B41C@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_10001B42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  return swift_dynamicCast(&a9, &a10, v10, a4, 0);
}

_QWORD *sub_10001B440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  return sub_100037A7C(&a59);
}

uint64_t sub_10001B454()
{
  uint64_t v0;

  return v0 + 32;
}

BOOL sub_10001B464@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10001B47C@<X0>(uint64_t a1@<X8>)
{
  return a1 + 8 * *(_QWORD *)(a1 + 16) + 32;
}

uint64_t sub_10001B494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  unint64_t v9;
  va_list va;

  va_start(va, a8);
  return sub_10000FBEC(v8, v9, (uint64_t *)va);
}

uint64_t sub_10001B4A4()
{
  uint64_t v0;

  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_10001B4B0()
{
  uint64_t v0;

  return v0;
}

void sub_10001B4C8()
{
  uint64_t v0;
  unint64_t v1;

  *(_QWORD *)(v0 + 8 * (v1 >> 6) + 64) |= 1 << v1;
}

uint64_t sub_10001B4F0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = a1;
  return v1 - 128;
}

void sub_10001B520(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 0xD000000000000010;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_10001B52C()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 3);
}

_QWORD *sub_10001B538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;

  v18 = *(_QWORD *)(a6 + 8);
  a17 = a5;
  a18 = v18;
  return sub_10001795C(&a14);
}

uint64_t sub_10001B570(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 104) = a1;
  *(_QWORD *)(v5 - 96) = v4;
  *(_QWORD *)(v5 - 128) = v3;
  *(_QWORD *)(v5 - 120) = v2;
  *(_QWORD *)(v5 - 112) = v1;
  *(_QWORD *)(v5 - 168) = 40;
  *(_QWORD *)(v5 - 160) = 0xE100000000000000;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10001B594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return Logger.init(subsystem:category:)(a1, a2, v3, v2);
}

uint64_t sub_10001B5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_bridgeObjectRelease(a4);
}

void sub_10001B5A8()
{
  type metadata accessor for LNValueTypeSpecificMetadataKey(0);
}

uint64_t sub_10001B5B4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_10001B5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0);
}

uint64_t sub_10001B5EC()
{
  return Logger.init(_:)();
}

uint64_t sub_10001B5F4()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10001B600@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 152));
}

void sub_10001B608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,__int128 a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)(v36 - 128) = a1;
  *(_QWORD *)(v36 - 120) = v31;
  *(_QWORD *)(v36 - 152) = v35;
  *(_QWORD *)(v36 - 144) = v33;
  *(_QWORD *)(v36 - 136) = v32;
  a31 = 0;
  a29 = 0u;
  a30 = 0u;
  sub_100019A60(v34, (uint64_t)&a19);
}

uint64_t sub_10001B630()
{
  uint64_t v0;

  sub_10000E87C((_QWORD *)(v0 - 160));
  return sub_10000E87C((_QWORD *)(v0 - 120));
}

_QWORD *sub_10001B648(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, *(_QWORD *)(v1 + 40));
}

void sub_10001B660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(*(_QWORD *)(v1 + 56) + 16 * v0);
  v4 = *(_QWORD *)(v2 - 192);
  *v3 = *(_QWORD *)(v2 - 200);
  v3[1] = v4;
}

id sub_10001B678()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v0 + 48) + 8 * v1);
}

uint64_t sub_10001B684(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return AnyHashable.init<A>(_:)(a1, v1, v2);
}

uint64_t sub_10001B690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StringProtocol.contains<A>(_:)(a1, a2, a2, a4, a4);
}

uint64_t sub_10001B69C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10001B6AC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_10001B6B4(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_10001B6C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

void sub_10001B6D0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

double sub_10001B6DC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000D6068(v1, v0);
}

uint64_t sub_10001B6EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return QueryType.filter(_:)(v4, v3, v2, v1, v0, v5);
}

uint64_t sub_10001B708()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001B714(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000132C4(v2 - 160, a2);
}

void sub_10001B71C()
{
  sub_10001AAFC();
}

uint64_t sub_10001B750(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10001B770()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001B778()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001B788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return sub_10000E87C((uint64_t *)va);
}

uint64_t sub_10001B7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100012A40(v3, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
}

uint64_t sub_10001B7D8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001B7F0()
{
  return swift_slowAlloc(32, -1);
}

uint64_t sub_10001B800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return QueryType.namespace<A>(_:)(a1, a2, a3, v5, a5);
}

uint64_t sub_10001B80C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v2);
}

void sub_10001B824(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10001B830()
{
  uint64_t v0;
  uint64_t v1;

  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t sub_10001B840()
{
  uint64_t v0;

  return v0;
}

void sub_10001B84C()
{
  sub_10001B71C();
}

uint64_t sub_10001B858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  return ExpressionType.init<A>(_:)((uint64_t)&a9, v9, v10, v11, a1);
}

uint64_t sub_10001B874(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1, v2);
}

char *sub_10001B888(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001766C();
    result = (char *)sub_10001ADE4((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_10001B41C(a3, result);
  }
  return result;
}

uint64_t sub_10001B8E0(uint64_t a1, uint64_t a2)
{
  sqlite3_stmt **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  void (__cdecl *v13)(void *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  Swift::String v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[3];
  void *v24;
  _UNKNOWN **v25;

  if (!*(_QWORD *)(a1 + 24))
  {
    swift_beginAccess(v2 + 2, v23, 0, 0);
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a2 <= 0x7FFFFFFF)
    {
      return sqlite3_bind_null(v2[2], a2);
    }
    __break(1u);
    goto LABEL_46;
  }
  v6 = a1;
  sub_10001BE34(a1, (uint64_t)v23);
  if (v24)
  {
    v7 = sub_10001BE7C((uint64_t *)&unk_10012A020);
    if ((swift_dynamicCast(&v21, v23, v7, &type metadata for Blob, 6) & 1) != 0)
    {
      v3 = v21;
      swift_beginAccess(v2 + 2, v23, 0, 0);
      if (a2 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (a2 <= 0x7FFFFFFF)
        {
          v4 = *(_QWORD *)(v3 + 16);
          if (!(v4 >> 31))
          {
            v2 = (sqlite3_stmt **)v2[2];
            if (qword_10012BF80 == -1)
            {
LABEL_8:
              sqlite3_bind_blob((sqlite3_stmt *)v2, a2, (const void *)(v3 + 32), v4, (void (__cdecl *)(void *))qword_10012D640);
              return swift_bridgeObjectRelease(v3);
            }
LABEL_49:
            swift_once(&qword_10012BF80, sub_1000D7388);
            goto LABEL_8;
          }
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
  }
  else
  {
    sub_10001316C((uint64_t)v23, &qword_100129578);
  }
  sub_10001BE34(v6, (uint64_t)v23);
  if (v24)
  {
    v9 = sub_10001BE7C((uint64_t *)&unk_10012A020);
    if ((swift_dynamicCast(&v21, v23, v9, &type metadata for Double, 6) & 1) != 0)
    {
      v10 = *(double *)&v21;
      swift_beginAccess(v2 + 2, v23, 0, 0);
      if (a2 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
      }
      else if (a2 <= 0x7FFFFFFF)
      {
        return sqlite3_bind_double(v2[2], a2, v10);
      }
      __break(1u);
      goto LABEL_52;
    }
  }
  else
  {
    sub_10001316C((uint64_t)v23, &qword_100129578);
  }
  sub_10001BE34(v6, (uint64_t)v23);
  if (v24)
  {
    v11 = sub_10001BE7C((uint64_t *)&unk_10012A020);
    if ((swift_dynamicCast(&v21, v23, v11, &type metadata for Int64, 6) & 1) != 0)
    {
      v6 = v21;
      swift_beginAccess(v2 + 2, v23, 0, 0);
      if (a2 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (a2 <= 0x7FFFFFFF)
          return sqlite3_bind_int64(v2[2], a2, v6);
        goto LABEL_53;
      }
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
  }
  else
  {
    sub_10001316C((uint64_t)v23, &qword_100129578);
  }
  sub_10001BE34(v6, (uint64_t)v23);
  if (v24)
  {
    v12 = sub_10001BE7C((uint64_t *)&unk_10012A020);
    if ((swift_dynamicCast(&v21, v23, v12, &type metadata for String, 6) & 1) != 0)
    {
      v6 = *((_QWORD *)&v21 + 1);
      v4 = v21;
      swift_beginAccess(v2 + 2, v23, 0, 0);
      if (a2 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (a2 <= 0x7FFFFFFF)
        {
          v2 = (sqlite3_stmt **)v2[2];
          if (qword_10012BF80 == -1)
          {
LABEL_30:
            v13 = (void (__cdecl *)(void *))qword_10012D640;
            v14 = String.utf8CString.getter(v4, v6);
            swift_bridgeObjectRelease(v6);
            sqlite3_bind_text((sqlite3_stmt *)v2, a2, (const char *)(v14 + 32), -1, v13);
            return swift_release(v14);
          }
LABEL_56:
          swift_once(&qword_10012BF80, sub_1000D7388);
          goto LABEL_30;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
  }
  else
  {
    sub_10001316C((uint64_t)v23, &qword_100129578);
  }
  sub_10001BE34(v6, (uint64_t)v23);
  if (v24)
  {
    v15 = sub_10001BE7C((uint64_t *)&unk_10012A020);
    if ((swift_dynamicCast(&v21, v23, v15, &type metadata for Int, 6) & 1) != 0)
    {
      v16 = v21;
LABEL_39:
      v24 = &type metadata for Int64;
      v25 = &protocol witness table for Int64;
      v23[0] = v16;
      sub_10001B8E0(v23, a2);
      v18 = (__int128 *)v23;
      return sub_10001316C((uint64_t)v18, &qword_100129578);
    }
  }
  else
  {
    sub_10001316C((uint64_t)v23, &qword_100129578);
  }
  sub_10001BE34(v6, (uint64_t)v23);
  if (v24)
  {
    v17 = sub_10001BE7C((uint64_t *)&unk_10012A020);
    if ((swift_dynamicCast(&v21, v23, v17, &type metadata for Bool, 6) & 1) != 0)
    {
      v16 = v21;
      goto LABEL_39;
    }
  }
  else
  {
    sub_10001316C((uint64_t)v23, &qword_100129578);
  }
  sub_10001BE34(v6, (uint64_t)&v21);
  if (!v22)
  {
    v18 = &v21;
    return sub_10001316C((uint64_t)v18, &qword_100129578);
  }
  sub_100019A48(&v21, (uint64_t)v23);
  *(_QWORD *)&v21 = 0;
  *((_QWORD *)&v21 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  v19._object = (void *)0x80000001000F70C0;
  v19._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v19);
  v20 = sub_10001BE7C((uint64_t *)&unk_10012A020);
  _print_unlocked<A, B>(_:_:)(v23, &v21, v20, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v21, *((_QWORD *)&v21 + 1), "SQLite/Statement.swift", 22, 2);
  __break(1u);
  return result;
}

uint64_t sub_10001BE34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_100129578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001BE7C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10001BEBC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  return sub_10000FBEC(a1, a2, (uint64_t *)va);
}

uint64_t sub_10001BEC8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 312));
}

uint64_t sub_10001BED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a14 + 8))(a16, a15);
}

uint64_t sub_10001BEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100012A40(v3, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
}

uint64_t sub_10001BF08(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  return sub_1000D5F44(a1, a2, a3, a4, a5, a19, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10001BF10(__int128 *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100019A48(a1, a2);
  return swift_isUniquelyReferenced_nonNull_native(v2);
}

char *sub_10001BF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  return &a51;
}

uint64_t sub_10001BF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  unsigned __int8 v14;
  uint64_t v15;

  return sub_1000D793C((uint64_t)&a14, (uint64_t)&a9, 1, v14, v15);
}

uint64_t sub_10001BF6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  return sub_10001F9E8(a1, a2, a3, v3, v4);
}

uint64_t sub_10001BF78@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10001BF84(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10001BFA0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_10001BFB0(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_10001BFB8()
{
  uint64_t v0;

  return swift_setDeallocating(v0);
}

uint64_t sub_10001BFC0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t sub_10001BFE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001BFF8()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001C000(uint64_t a1)
{
  uint64_t v1;

  return sub_100014360(a1, 1, 1, v1);
}

uint64_t sub_10001C010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 280) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 280, v1);
}

uint64_t sub_10001C034(uint64_t a1)
{
  uint64_t v1;

  return String.init<A>(describing:)(v1, a1);
}

uint64_t sub_10001C040()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = *(void **)(v0 + 216);
  v2 = sub_10000E858(*(_QWORD **)(v0 + 224), *(_QWORD *)(*(_QWORD *)(v0 + 224) + 24));
  return sub_10006AAF8(v1, (uint64_t)v2);
}

uint64_t sub_10001C06C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001C088(uint64_t a1)
{
  return swift_allocObject(a1, 32, 7);
}

uint64_t sub_10001C094()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

id sub_10001C0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10008E4CC(a1, a2, a3, a4, 0, 0, v4);
}

uint64_t sub_10001C0B0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10001C0C0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 136) + 8))(v0, *(_QWORD *)(v1 - 144));
}

void sub_10001C0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

}

void sub_10001C0D8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x200A2C5458455420;
  v0._object = (void *)0xEB00000000202020;
  String.append(_:)(v0);
}

uint64_t sub_10001C0F8(uint64_t a1)
{
  uint64_t v1;

  return String.init<A>(describing:)(v1 - 96, a1);
}

uint64_t sub_10001C10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for Expression(0, v4, a3, a4);
}

uint64_t sub_10001C118(_QWORD *a1)
{
  uint64_t v1;

  sub_10000E87C(a1);
  return v1;
}

uint64_t sub_10001C134()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001C144(uint64_t a1, uint64_t a2)
{
  return sub_1000E56B4(a1, a2, sub_10001C150);
}

uint64_t sub_10001C150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_10001BE7C(&qword_1001296C8);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = &protocol witness table for String;
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  return 63;
}

uint64_t sub_10001C1CC()
{
  return 0;
}

uint64_t sub_10001C1EC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001C200()
{
  return 0;
}

uint64_t sub_10001C21C@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  unint64_t v2;

  return sub_10000FBEC(*(_QWORD *)(a2 - 256), v2, a1);
}

void sub_10001C228()
{
  void *v0;

}

uint64_t sub_10001C234(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return sub_10000FBEC(a1, a2, (uint64_t *)va);
}

uint64_t sub_10001C240()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 16))(v0, 0);
}

uint64_t sub_10001C250()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

unint64_t sub_10001C25C()
{
  uint64_t v0;

  return sub_100016064(v0);
}

uint64_t sub_10001C26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  unsigned __int8 v14;
  uint64_t v15;

  return sub_1000D793C((uint64_t)&a14, (uint64_t)&a9, 1, v14, v15);
}

uint64_t sub_10001C284(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

void sub_10001C2C0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = sub_100025A6C(a2);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_10000BFBC();
}

uint64_t sub_10001C2FC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100025A6C(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001C33C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10001C430(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22[8];
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v24 = a4;
  v25 = a5;
  v9 = sub_10001795C(v23);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v9, a1, a4);
  swift_bridgeObjectRetain();
  sub_10001A844(40);
  sub_10000E858(v23, v24);
  (*(void (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  v10 = swift_bridgeObjectRelease();
  sub_1000184E8(v10, v11, v12, v13, v14, v15, v16, v17, v21, a2);
  sub_1000100D0();
  sub_10001A844(41);
  v18 = sub_100017830();
  sub_10001E2F0(v18, v19);
  sub_10000E87C(v23);
  return *(_QWORD *)v22;
}

uint64_t ExpressionType<>.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a3;
  v26[1] = a6;
  v27 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2);
  v10 = swift_getAssociatedTypeWitness(255, a4, AssociatedTypeWitness);
  v11 = type metadata accessor for Optional(0, v10);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v26 - v13;
  v26[0] = a5;
  v15 = swift_getAssociatedTypeWitness(0, a5, v10);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)v26 - v17;
  v19 = sub_10001BE7C(&qword_1001296C8);
  v20 = sub_100017848(v19);
  *(_OWORD *)(v20 + 16) = xmmword_1000EFAE0;
  v21 = (_QWORD *)(v20 + 32);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v29 = a1;
  v22(v14, a1, v11);
  if (sub_10001C93C((uint64_t)v14, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *(_QWORD *)(v20 + 64) = 0;
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
  }
  else
  {
    v23 = v26[0];
    (*(void (**)(uint64_t, _QWORD))(v26[0] + 56))(v10, v26[0]);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v14, v10);
    *(_QWORD *)(v20 + 56) = v15;
    *(_QWORD *)(v20 + 64) = swift_getAssociatedConformanceWitness(v23, v10, v15, &protocol requirements base descriptor for Value, &associated conformance descriptor for Value.Value.Datatype: Binding);
    v24 = sub_10001795C(v21);
    (*(void (**)(_QWORD *, char *, uint64_t))(v16 + 32))(v24, v18, v15);
  }
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v28 + 40))(63, 0xE100000000000000, v20, v27);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v29, v11);
}

uint64_t sub_10001C758(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10001C76C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12)
{
  a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, &a12);
}

uint64_t sub_10001C788()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

uint64_t sub_10001C798()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100013158(v1, v0);
}

uint64_t sub_10001C7A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(v0, v1, v2);
}

uint64_t sub_10001C7B4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 168, v1 - 160);
}

unint64_t sub_10001C7D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v0;
  return v3
       + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
       + *(_QWORD *)(v2 + 72) * v1;
}

uint64_t sub_10001C800(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

NSString sub_10001C810()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10001C81C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_10001C830()
{
  void *v0;
  Swift::String v1;

  v1._countAndFlagsBits = 0xD000000000000010;
  v1._object = v0;
  String.append(_:)(v1);
}

void sub_10001C840()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 64) = 0;
  *(_QWORD *)(v0 - 56) = 0xE000000000000000;
}

uint64_t _s10Foundation4UUIDV6SQLiteE16declaredDatatypeSSvgZ_0()
{
  return 1415071060;
}

uint64_t _s6SQLite9StatementC6handle33_BBABA35034D0672F50B2547BC77385B8LLs13OpaquePointerVSgvpfi_0()
{
  return 0;
}

unint64_t sub_10001C884()
{
  return sub_10001D33C();
}

uint64_t sub_10001C8AC(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10001C8D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E86E8(a1, a2, a3, a4 & 0xFFFF0000FFFFFFFFLL | 0x2800000000);
}

void sub_10001C8E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;
  Swift::String v12;

  v12._countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
}

void sub_10001C8FC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10001A118(a1, 0x20454B494C20, 0xE600000000000000, a2);
}

uint64_t sub_10001C92C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100019350(34, 0xE100000000000000, a1, a4);
}

uint64_t sub_10001C93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_10001C948@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = Int64.datatypeValue.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_10001C970(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String_optional v11;
  uint64_t countAndFlagsBits;
  void *object;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String_optional v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = a2;
  v9 = a1;
  v10 = HIBYTE(a4) & 0xF;
  v24 = a3;
  v25 = a4;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  v26 = 0;
  v27 = v10;
  sub_1000133E0(a1, a2);
  sub_100013E10();
  v11 = String.Iterator.next()();
  if (v11.value._object)
  {
    countAndFlagsBits = v11.value._countAndFlagsBits;
    object = v11.value._object;
    do
    {
      v14 = countAndFlagsBits == a5 && object == (void *)a6;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, a5, a6, 0) & 1) != 0)
      {
        v22 = 0;
        v23 = 0xE000000000000000;
        sub_10001F8D8((uint64_t)&v22, a5, a6);
        v15 = a5;
        v16 = a6;
      }
      else
      {
        v22 = 0;
        v23 = 0xE000000000000000;
        v15 = countAndFlagsBits;
        v16 = (uint64_t)object;
      }
      sub_10001F8D8((uint64_t)&v22, v15, v16);
      v18 = v22;
      v17 = (void *)v23;
      v22 = v9;
      v23 = v8;
      sub_10000C030();
      v19._countAndFlagsBits = v18;
      v19._object = v17;
      String.append(_:)(v19);
      sub_1000059C4();
      sub_10000EC84();
      sub_1000117B4();
      v9 = v22;
      v8 = v23;
      v20 = String.Iterator.next()();
      countAndFlagsBits = v20.value._countAndFlagsBits;
      object = v20.value._object;
    }
    while (v20.value._object);
  }
  sub_1000101FC();
  sub_1000117B4();
  return v9;
}

uint64_t sub_10001CAC4()
{
  return 0;
}

double sub_10001CACC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  double result;
  _BYTE v7[112];
  _QWORD v8[9];
  uint64_t v9;
  uint64_t v10[3];
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  (*(void (**)(_QWORD *__return_ptr))(a1 + 16))(v8);
  sub_100019EB8((uint64_t)&v9, (uint64_t)v10, &qword_10012C478);
  sub_10001CC10(v10);
  sub_1000E0204(v8);
  sub_100019EB8((uint64_t)v10, (uint64_t)&v11, &qword_10012C478);
  if (*((_QWORD *)&v11 + 1))
  {
    v13 = v11;
    v14 = v12;
    v3 = sub_10001BE7C(&qword_100128D58);
    inited = swift_initStackObject(v3, v7);
    *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
    v5 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
    *(_QWORD *)(inited + 32) = 0x4552454857;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(inited + 56) = v5;
    *(_QWORD *)(inited + 96) = sub_10001BE7C(&qword_10012C158);
    *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
    *(_OWORD *)(inited + 72) = v13;
    *(_QWORD *)(inited + 88) = v14;
    sub_10001A118(inited, 32, 0xE100000000000000, (uint64_t *)a2);
    swift_setDeallocating(inited);
    sub_10001E778();
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t *sub_10001CC10(uint64_t *a1)
{
  sub_100018298(*a1, a1[1], a1[2]);
  return a1;
}

uint64_t sub_10001CC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_arrayDestroy(v0 + 32, *(_QWORD *)(v0 + 16));
  v1 = sub_10001F96C();
  return swift_deallocClassInstance(v1, v2, v3);
}

uint64_t QueryType.insert(_:_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  _BYTE v6[112];

  v2 = sub_10001BE7C(&qword_100128D08);
  inited = swift_initStackObject(v2, v6);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  sub_100019EE4(a1, inited + 32);
  sub_10000C030();
  sub_10001CEBC();
  v4 = sub_10001EFAC();
  QueryType.insert(_:)((Swift::OpaquePointer)v4);
  sub_10001F604();
  sub_1000059C4();
  return sub_10001C134();
}

BOOL sub_10001CD0C()
{
  Swift::Int v0;
  char v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

_QWORD *sub_10001CD20()
{
  uint64_t v0;

  return sub_100037A7C((_QWORD *)(v0 - 256));
}

BOOL sub_10001CD28(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void sub_10001CD30(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  sub_100063B7C(a1, a2, v3, v2);
}

uint64_t sub_10001CD40()
{
  uint64_t v0;

  return Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10001CD4C(float a1)
{
  uint64_t v1;
  float *v2;

  *v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10001CD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_bridgeObjectRetain(a4);
}

unint64_t sub_10001CD9C()
{
  uint64_t v0;

  return sub_100016064(v0);
}

void sub_10001CDA8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x72506D6574737973;
  v0._object = (void *)0xEE006C6F636F746FLL;
  String.append(_:)(v0);
}

uint64_t sub_10001CDCC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_10000FBEC(v0, v1, (uint64_t *)(v2 - 96));
}

void sub_10001CDE0(char a1, uint64_t a2)
{
  _QWORD *v2;

  sub_100019DF4(a1, a2, 1, v2);
}

uint64_t sub_10001CDEC()
{
  int v0;
  unint64_t v1;
  uint64_t v2;

  return Connection.init(_:readonly:)(v2, v1, v0);
}

BOOL sub_10001CE20(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001CE30()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 240));
}

id sub_10001CE38()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v0 + 48) + 8 * v1);
}

uint64_t sub_10001CE50()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10001CE5C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001CE6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

uint64_t sub_10001CEA8()
{
  uint64_t v0;

  return v0;
}

void sub_10001CEBC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  sub_1000183B8();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100013654() || v4 > *(_QWORD *)(v2 + 24) >> 1)
  {
    sub_100011848();
    sub_10001CF64();
    v2 = v6;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000176CC();
  if (v8 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10001BFB0(v2 + 80 * v7 + 32);
  if (!v3)
  {
LABEL_11:
    sub_1000117B4();
    *v1 = v2;
    sub_10001ADFC();
    return;
  }
  sub_10001C028();
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_10001CF64()
{
  _QWORD *v0;
  char v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;

  sub_10001F830();
  if ((v4 & 1) != 0)
  {
    sub_100018654();
    if (v5 != v6)
    {
      sub_1000158DC();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013784();
  if (v3)
  {
    v7 = sub_10001BE7C(&qword_100128D08);
    v8 = (_QWORD *)sub_1000100C8(v7, 80 * (_QWORD)v3 + 32);
    sub_100036350(v8);
  }
  else
  {
    v3 = _swiftEmptyArrayStorage;
  }
  v9 = (char *)(v3 + 4);
  v10 = (char *)(v0 + 4);
  if ((v1 & 1) != 0)
  {
    if (v3 != v0 || &v10[80 * v2] <= v9)
      memmove(v9, v10, 80 * v2);
    v0[2] = 0;
  }
  else
  {
    sub_1000D69C8((uint64_t)v9);
  }
  sub_1000117B4();
  sub_10001ADFC();
}

SQLite::Insert __swiftcall QueryType.insert(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  SQLite::Insert result;

  v3 = sub_1000DCEC8((uint64_t)a1._rawValue, v1, v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100019490);
  result.bindings._rawValue = v5;
  result.template._object = v4;
  result.template._countAndFlagsBits = v3;
  return result;
}

Swift::Int64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.run(_:)(SQLite::Insert a1)
{
  return sub_10001D04C(a1.template._countAndFlagsBits, (uint64_t)a1.template._object, (uint64_t)a1.bindings._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10001D0D0);
}

uint64_t sub_10001D04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;

  sub_1000101EC(a2);
  sub_1000101EC(a3);
  v9 = swift_retain();
  v10 = a4(v9, v4, a1, a2, a3);
  sub_1000059C4();
  sub_1000059B0();
  return v10;
}

#error "10001D144: call analysis failed (funcsize=53)"

uint64_t Statement.run(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  id v13;
  uint64_t v15;
  char v16;
  _BYTE v17[24];
  uint64_t v18;

  v3 = v2;
  v4 = v1;
  if (*(_QWORD *)(a1 + 16))
  {
    Statement.bind(_:)(a1);
    v5 = sub_100010318();
    sub_100015A24();
    if (!v2)
      return v5;
  }
  else
  {
    sub_10001D580(0);
    sub_10001D33C();
    v6 = *(_QWORD *)(v1 + 24);
    sub_100017758(v1 + 16, (uint64_t)v17, 0);
    do
    {
      while (1)
      {
        v7 = qword_10012BF88;
        swift_retain();
        if (v7 != -1)
          swift_once(&qword_10012BF88, sub_1000E3DF4);
        static OS_dispatch_queue.getSpecific<A>(key:)(&v15);
        v8 = v15;
        v9 = v16;
        v10 = sub_10001D378();
        if ((v9 & 1) != 0 || v8 != v10)
          break;
        v11 = sqlite3_step(*(sqlite3_stmt **)(v4 + 16));
        v12 = sub_10001D77C(v11, 0);
        sub_100015A24();
        if (v3)
          return v4;
        if (v12 != 100)
          goto LABEL_16;
      }
      v13 = *(id *)(v6 + 104);
      OS_dispatch_queue.sync<A>(execute:)(&v18, sub_10000833C, v4);
      sub_100015A24();

      if (v3)
        return v4;
    }
    while ((v18 & 1) != 0);
LABEL_16:
    swift_retain();
  }
  return v4;
}

{
  uint64_t v1;

  Statement.bind(_:)(a1);
  v1 = sub_100010318();
  sub_1000073B0();
  return v1;
}

{
  uint64_t v1;

  Statement.bind(_:)(a1);
  v1 = sub_100010318();
  sub_1000073B0();
  return v1;
}

unint64_t sub_10001D33C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001289B0;
  if (!qword_1001289B0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001289B0);
  }
  return result;
}

uint64_t sub_10001D378()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  if (*(_BYTE *)(v0 + 120) != 1)
    return *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 112) = v0;
  *(_BYTE *)(v0 + 120) = 0;
  return result;
}

void sub_10001D39C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;

  Connection.prepare(_:_:)(a1, a2, (uint64_t)_swiftEmptyArrayStorage);
  if (!v4)
  {
    a4(a3);
    Statement.run(_:)((uint64_t)_swiftEmptyArrayStorage);
    sub_1000058DC();
    sub_10001105C();
  }
  sub_10001B110();
}

uint64_t Statement.bind(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  void *object;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return sub_1000179D8();
  sub_10001D580(1);
  sub_100017870(v1 + 16, (uint64_t)v17);
  if (v2 == sqlite3_bind_parameter_count(*(sqlite3_stmt **)(v1 + 16)))
  {
    v4 = 0;
    v5 = a1 + 32;
    do
    {
      sub_10001B8E0(v5, ++v4);
      v5 += 40;
    }
    while (v2 != v4);
    return sub_1000179D8();
  }
  _StringGuts.grow(_:)(29);
  sqlite3_bind_parameter_count(*(sqlite3_stmt **)(v1 + 16));
  v7 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  v9 = v8;
  swift_bridgeObjectRelease(0xE000000000000000);
  v16 = v7;
  v10._object = (void *)0x80000001000F6FE0;
  v10._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._countAndFlagsBits = 0x64657373617020;
  v13._object = (void *)0xE700000000000000;
  String.append(_:)(v13);
  result = sub_100017F74((uint64_t)"Fatal error", v14, v15, v16, v9, (uint64_t)"SQLite/Statement.swift");
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  sqlite3_stmt *v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  __int128 v26;
  _OWORD v27[2];
  uint64_t v28;
  char v29[24];
  uint64_t v30;
  void *v31;
  uint64_t v32;

  sub_10001D580(1);
  v24 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  sub_10000EC68();
  sub_100017870(v1 + 16, (uint64_t)v29);
  v8 = 0;
  v25 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_6;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v10 = v9 | (v8 << 6);
LABEL_5:
  v11 = *(_QWORD *)(a1 + 56);
  v12 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v10);
  v13 = v12[1];
  *(_QWORD *)&v26 = *v12;
  *((_QWORD *)&v26 + 1) = v13;
  sub_10001BE34(v11 + 40 * v10, (uint64_t)v27);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100011470((uint64_t)&v26, (uint64_t)&v30, &qword_10012C668);
    v2 = v31;
    if (!v31)
    {
      swift_release();
      return sub_1000179D8();
    }
    v3 = v30;
    sub_100011470((uint64_t)&v32, (uint64_t)&v26, &qword_100129578);
    v17 = *(sqlite3_stmt **)(v1 + 16);
    v18 = String.utf8CString.getter(v3, v2);
    v19 = sqlite3_bind_parameter_index(v17, (const char *)(v18 + 32));
    swift_release();
    if (v19 < 1)
      goto LABEL_31;
    swift_bridgeObjectRelease();
    sub_10001B8E0((uint64_t)&v26, v19);
    sub_10001316C((uint64_t)&v26, &qword_100129578);
    if (v7)
      goto LABEL_4;
LABEL_6:
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v14 < v25)
    {
      v15 = *(_QWORD *)(v24 + 8 * v14);
      if (v15)
        goto LABEL_9;
      v16 = v8 + 2;
      ++v8;
      if (v14 + 1 < v25)
      {
        v15 = *(_QWORD *)(v24 + 8 * v16);
        if (v15)
          goto LABEL_12;
        v8 = v14 + 1;
        if (v14 + 2 < v25)
        {
          v15 = *(_QWORD *)(v24 + 8 * (v14 + 2));
          if (v15)
          {
            v14 += 2;
            goto LABEL_9;
          }
          v16 = v14 + 3;
          v8 = v14 + 2;
          if (v14 + 3 < v25)
          {
            v15 = *(_QWORD *)(v24 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v14 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_30;
                if (v14 >= v25)
                {
                  v8 = v25 - 1;
                  goto LABEL_23;
                }
                v15 = *(_QWORD *)(v24 + 8 * v14);
                ++v16;
                if (v15)
                  goto LABEL_9;
              }
            }
LABEL_12:
            v14 = v16;
LABEL_9:
            v7 = (v15 - 1) & v15;
            v10 = __clz(__rbit64(v15)) + (v14 << 6);
            v8 = v14;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    v7 = 0;
    v28 = 0;
    memset(v27, 0, sizeof(v27));
    v26 = 0u;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = v3;
  v21._object = v2;
  String.append(_:)(v21);
  result = sub_100017F74((uint64_t)"Fatal error", v22, v23, 0xD000000000000015, 0x80000001000F7000, (uint64_t)"SQLite/Statement.swift");
  __break(1u);
  return result;
}

uint64_t sub_10001D580(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  swift_beginAccess(v1 + 16, v4, 0, 0);
  result = sqlite3_reset(*(sqlite3_stmt **)(v1 + 16));
  if ((a1 & 1) != 0)
    return sqlite3_clear_bindings(*(sqlite3_stmt **)(v1 + 16));
  return result;
}

void Connection.prepare(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;

  if (*(_QWORD *)(a3 + 16))
  {
    Connection.prepare(_:_:)(a1, a2, _swiftEmptyArrayStorage);
    if (!v4)
    {
      Statement.bind(_:)(a3);
      sub_1000073B0();
    }
  }
  else
  {
    v8 = type metadata accessor for Statement();
    sub_1000100C8(v8, 72);
    sub_1000179D8();
    swift_bridgeObjectRetain(a2);
    sub_10001D68C(v3, a1, a2);
  }
  sub_10001B110();
}

{
  sub_1000E2694(a1, a2, a3, (void (*)(uint64_t))Statement.bind(_:));
}

{
  sub_1000E2694(a1, a2, a3, (void (*)(uint64_t))Statement.bind(_:));
}

uint64_t sub_10001D68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  sqlite3 *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 40) = 1;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = 0;
  v7 = (sqlite3 *)Connection.handle.getter();
  v8 = String.utf8CString.getter(a2, a3);
  sub_1000179D8();
  swift_bridgeObjectRelease(a3);
  sub_100017758(v3 + 16, (uint64_t)v11, 33);
  v9 = sqlite3_prepare_v2(v7, (const char *)(v8 + 32), -1, (sqlite3_stmt **)(v3 + 16), 0);
  swift_endAccess(v11);
  swift_release(v8);
  sub_10001E9C0(v9);
  if (v4)
    swift_release(v3);
  sub_1000073B0();
  return v3;
}

const char *sub_10001D77C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  sqlite3 *v6;
  const char *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = qword_10012BFA0;
  sub_1000179D8();
  swift_retain(a2);
  if (v4 != -1)
    swift_once(&qword_10012BFA0, sub_1000EBB10);
  sub_10001D860(a1, qword_10012C988);
  if ((v5 & 1) != 0)
  {
    sub_1000073B0();
    sub_1000058DC();
    return (const char *)a1;
  }
  v6 = (sqlite3 *)Connection.handle.getter();
  result = sqlite3_errmsg(v6);
  if (result)
  {
    v8 = String.init(cString:)();
    v10 = v9;
    sub_1000073B0();
    v11 = sub_10004FC40();
    v12 = swift_allocError(&type metadata for Result, v11, 0, 0);
    *(_QWORD *)v13 = v8;
    *(_QWORD *)(v13 + 8) = v10;
    *(_DWORD *)(v13 + 16) = a1;
    *(_QWORD *)(v13 + 24) = a2;
    swift_willThrow(v12);
    return (const char *)a1;
  }
  __break(1u);
  return result;
}

void sub_10001D860(unsigned int a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  if (*(_QWORD *)(a2 + 16))
  {
    v4 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(a2 + 40), a1, 4) & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0
      && *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v4) != a1)
    {
      sub_10001C910();
      if ((v7 & 1) != 0)
      {
        do
        {
          if (*(_DWORD *)(v5 + 4 * v6) == a1)
            break;
          sub_10001C910();
        }
        while ((v8 & 1) != 0);
      }
    }
  }
}

uint64_t Connection.handle.getter()
{
  uint64_t v0;
  uint64_t result;
  _BYTE v2[24];

  sub_100017758(v0 + 16, (uint64_t)v2, 0);
  result = *(_QWORD *)(v0 + 16);
  if (!result)
    __break(1u);
  return result;
}

uint64_t sub_10001D938()
{
  return ((uint64_t (*)(void))withTaskGroup<A, B>(of:returning:isolation:body:))();
}

uint64_t sub_10001D944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return QueryType.namespace<A>(_:)(a1, a2, v6, v5, a5);
}

uint64_t sub_10001D954()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

id sub_10001D978(float a1)
{
  void *v1;
  uint64_t v2;
  float *v3;

  *v3 = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return v1;
}

void sub_10001D990(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

void sub_10001D9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  <- infix<A>(_:_:)(a1, v6, v7, a4, a5, a6);
}

uint64_t sub_10001D9B0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return swift_dynamicCast(v2 - 144, v2 - 136, a2 + 8, a1, 6);
}

uint64_t sub_10001D9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return QueryType.namespace<A>(_:)(v5, v6, v7, a4, a5);
}

uint64_t sub_10001D9D8()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

id sub_10001D9E4()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(v0 + 8 * v1 + 32);
}

void sub_10001D9F0(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE800000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10001D9F8()
{
  uint64_t v0;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(0, v0);
}

uint64_t _s6SQLite9StatementC21___lazy_storage___row33_BBABA35034D0672F50B2547BC77385B8LLAA6CursorVSgvpfi_0()
{
  return 0;
}

uint64_t sub_10001DA10(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10000E87C(a1);
  return sub_1000136A0(v2, v3, v4, 0, 0xE000000000000000, v1);
}

sqlite3_int64 sub_10001DA38@<X0>(sqlite3_stmt *a1@<X1>, int a2@<W8>)
{
  return sqlite3_column_int64(a1, a2);
}

uint64_t sub_10001DA60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

uint64_t type metadata accessor for Statement()
{
  return objc_opt_self(_TtC6SQLite9Statement);
}

void Connection.run(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10001D39C(a1, a2, a3, (void (*)(uint64_t))Statement.bind(_:));
}

{
  Connection.run(_:_:)(a1, a2, a3);
}

{
  sub_10001D39C(a1, a2, a3, (void (*)(uint64_t))Statement.bind(_:));
}

uint64_t sub_10001DAB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, v0);
  return sub_10001DB1C((uint64_t)v3);
}

uint64_t sub_10001DB1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_10001BE7C(&qword_1001296C8);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v3 + 56) = &type metadata for String;
  *(_QWORD *)(v3 + 64) = &protocol witness table for String;
  *(_QWORD *)(v3 + 32) = UUID.uuidString.getter(v3);
  *(_QWORD *)(v3 + 40) = v4;
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return 63;
}

void sub_10001DBA4()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v0 = sub_1000107AC();
  v2 = v1(v0);
  sub_10001A46C(v2);
  sub_10000BFBC();
}

void sub_10001DBC8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_10001A46C(v2);
  sub_10000BFBC();
}

uint64_t type metadata accessor for LNAppShortcutParameterRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1001298C8;
  if (!qword_1001298C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LNAppShortcutParameterRecord);
  return result;
}

uint64_t sub_10001DC28(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
}

uint64_t sub_10001DCC4()
{
  uint64_t v0;

  return swift_retain(v0);
}

void sub_10001DCCC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10001DCF0()
{
  return type metadata accessor for URL(0);
}

void sub_10001DCF8()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_10001DD30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v0, v2+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
}

uint64_t sub_10001DD54()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 280) = v0;
  return specialized Array._endMutation()();
}

uint64_t sub_10001DD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  return Connection.prepare(_:)(&a30);
}

uint64_t sub_10001DD88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_10001DDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return QueryType.namespace<A>(_:)(a1, a2, a3, a4, v4);
}

BOOL sub_10001DDAC(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001DDBC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10000FBEC(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_10001DDC8()
{
  uint64_t v0;
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

void sub_10001DDD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10001DDDC()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_10001DDEC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return sub_10000E87C((uint64_t *)va);
}

uint64_t sub_10001DDF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_10001DE00()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001DE14()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001DE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LNAppShortcutParameterRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001DE6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = a3[9];
  v22 = a3[10];
  v23 = *(void **)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v23;
  v24 = *(void **)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v24;
  v25 = a3[11];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  v29 = v17;
  swift_bridgeObjectRetain(v20);
  v30 = v23;
  v31 = v24;
  swift_bridgeObjectRetain(v28);
  return a1;
}

uint64_t sub_10001DF5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LNAppShortcutParameterRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001DFA4()
{
  return 0;
}

uint64_t sub_10001DFD4()
{
  return static os_log_type_t.debug.getter();
}

void sub_10001DFDC()
{
  void *v0;

}

uint64_t sub_10001DFE4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001DFF4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

id sub_10001E014()
{
  void *v0;

  return v0;
}

uint64_t sub_10001E028()
{
  uint64_t v0;

  return sub_10000E0D4(v0 - 136);
}

void sub_10001E030(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_10001E038()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 328);
}

void sub_10001E048(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_1000131A8((uint64_t)va, a2);
}

_QWORD *sub_10001E05C(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

void sub_10001E084()
{
  sub_10001E098();
}

void sub_10001E098()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD);
  uint64_t v25;
  const char *v26;
  uint64_t v27;

  sub_10001F31C();
  if ((v7 & 1) != 0)
  {
    sub_100018654();
    if (v11 != v12)
    {
      sub_1000158DC();
      if (v11)
      {
        __break(1u);
LABEL_22:
        sub_10001766C();
        v26 = "Division by zero";
        v27 = 16;
LABEL_24:
        sub_100036380((uint64_t)"Fatal error", 11, 2, (uint64_t)v26, v27, v25, (uint64_t)"Swift/IntegerTypes.swift");
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  else
  {
    v10 = v6;
  }
  v13 = *(_QWORD *)(v0 + 16);
  if (v10 <= v13)
    v14 = *(_QWORD *)(v0 + 16);
  else
    v14 = v10;
  if (!v14)
    goto LABEL_17;
  sub_1000101F4(v5, v6, v7, v8, v9);
  v15 = v1(0);
  v16 = (const void *)sub_10001638C(v15);
  v17 = j__malloc_size(v16);
  if (!v3)
    goto LABEL_22;
  if (v17 - v4 == 0x8000000000000000 && v3 == -1)
  {
    sub_10001766C();
    v26 = "Division results in an overflow";
    v27 = 31;
    goto LABEL_24;
  }
  sub_1000190AC(v17 - v4);
LABEL_17:
  v1(0);
  sub_10003624C();
  if ((v2 & 1) != 0)
  {
    sub_10001E34C(v0 + v19, v13);
    sub_10001ABDC();
  }
  else
  {
    v20 = sub_10001DFA4();
    sub_10001E578(v20, v21, v22, v23, v24);
  }
  sub_10001677C();
}

uint64_t sub_10001E1D0(uint64_t a1)
{
  uint64_t v1;

  return static NSObject.== infix(_:_:)(a1, v1);
}

uint64_t sub_10001E1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014360(a1, a2, a3, a4);
}

uint64_t sub_10001E1F0()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t sub_10001E200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v13 + 12) = 2080;
  return swift_getErrorValue(v11, v12, a11);
}

void *sub_10001E21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return memcpy(&a9, (const void *)(v9 - 248), 0xA8uLL);
}

void sub_10001E238()
{
  sub_100084AE4();
}

unint64_t sub_10001E244(uint64_t a1)
{
  return sub_100016064(a1);
}

uint64_t sub_10001E250()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

id sub_10001E25C()
{
  void *v0;

  return v0;
}

void sub_10001E270()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 - 8);
  *v2 = *v0;
  *v2 = *v0;
}

uint64_t sub_10001E288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  return sub_10000E87C(&a30);
}

uint64_t sub_10001E29C(uint64_t a1)
{
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

void sub_10001E2A4()
{
  Swift::String v0;

  v0._countAndFlagsBits = 40;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void sub_10001E2B0()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_10001E2BC()
{
  return swift_slowAlloc(12, -1);
}

uint64_t sub_10001E2CC(uint64_t a1)
{
  uint64_t v1;

  sub_10000E87C((_QWORD *)(v1 - 128));
  return a1;
}

uint64_t sub_10001E2F0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

void sub_10001E2FC()
{
  Swift::String v0;

  v0._countAndFlagsBits = 41;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10001E30C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_unexpectedError(v2, a2, 22, 1, 211);
}

double sub_10001E320()
{
  uint64_t v0;
  double result;

  sub_10000E87C((_QWORD *)(v0 - 160));
  sub_10000E87C((_QWORD *)(v0 - 120));
  *(_QWORD *)(v0 - 120) = 40;
  *(_QWORD *)(v0 - 112) = 0xE100000000000000;
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

void sub_10001E34C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  if (a2 < 0)
  {
    sub_10001766C();
    sub_10001ADE4((uint64_t)"Fatal error", v7, v8, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v9, v10, (uint64_t)"Swift/UnsafePointer.swift", v11, v12, v13, v14);
    __break(1u);
  }
  else
  {
    sub_1000166D0();
    if (v5 && (v4(0), sub_100036308(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_10001C1DC();
      }
      else
      {
        sub_10001F714();
        sub_1000361F0();
      }
    }
    else
    {
      v4(0);
      sub_10001F714();
      sub_100018EDC();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_10001E408(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

#error "10001E4A4: call analysis failed (funcsize=54)"

void sub_10001E514()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 0;
  *(_QWORD *)(v0 - 96) = 0xE000000000000000;
}

__n128 sub_10001E524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  _DWORD *v19;
  uint64_t v20;
  __n128 result;

  *(_QWORD *)(v20 - 88) = a1;
  result = a19;
  *v19 = a19.n128_u32[0];
  return result;
}

void sub_10001E538(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v12;
  Swift::String v13;

  v13._countAndFlagsBits = v12;
  v13._object = v11;
  String.append(_:)(v13);
}

uint64_t sub_10001E554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for Expression(0, v4, a3, a4);
}

_QWORD *sub_10001E560()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10000E858((_QWORD *)(v0 + 160), v1);
}

uint64_t sub_10001E56C(uint64_t result, int a2)
{
  *(_QWORD *)(result + 8) = (a2 - 1);
  return result;
}

void sub_10001E578(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  unint64_t v6;
  char v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_10001766C();
    sub_10001ABE8();
    goto LABEL_11;
  }
  a5(0);
  sub_10001E89C();
  if (v7)
    v8 = 0;
  else
    v8 = v6 > a3;
  if (!v8)
  {
    sub_10001ED6C();
    sub_1000117B4();
    sub_10001C1DC();
    return;
  }
  sub_10001766C();
  sub_100018360();
LABEL_11:
  sub_100017680(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
}

uint64_t QueryType.namespace<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  _QWORD v17[3];
  _BYTE v18[112];
  uint64_t v19[6];

  v8 = type metadata accessor for Expression(0, a5, a3, a4);
  v9 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v9, v18);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  sub_1000E1074();
  sub_1000E10C4();
  *(_QWORD *)(inited + 96) = v8;
  *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 72) = a1;
  *(_QWORD *)(inited + 80) = a2;
  *(_QWORD *)(inited + 88) = a3;
  sub_10000C020();
  sub_10000C030();
  sub_10001B3D8(inited, 46, v19);
  sub_10001BFB8();
  sub_1000E1050();
  v17[0] = sub_100010068(v19);
  v17[1] = v11;
  v17[2] = v12;
  v13 = sub_10001BE7C(&qword_10012BFA8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v8);
  sub_10001C2C0(&qword_10012C260, &qword_10012BFA8, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.init<A>(_:)((uint64_t)v17, v8, v13, WitnessTable, v15);
  sub_10000E87C(v19);
  return v19[5];
}

uint64_t sub_10001E778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  sub_10001BE7C(&qword_100129F18);
  swift_arrayDestroy(v0 + 32, v1);
  v2 = sub_10001F96C();
  return swift_deallocClassInstance(v2, v3, v4);
}

uint64_t ExpressionType.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a3, a5);
  v12 = v11;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40))(v10, v12, v13, a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t sub_10001E878()
{
  uint64_t *v0;

  return sub_10001BE7C(v0);
}

uint64_t sub_10001E8CC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100013158(v1, v0);
}

id sub_10001E8D8(uint64_t a1, uint64_t a2)
{
  void *v2;

  sub_100012A40(a1, a2);
  return v2;
}

uint64_t sub_10001E8EC()
{
  uint64_t v0;
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_10001E8F8()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_10001E914()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

void sub_10001E920()
{
  uint64_t v0;
  unint64_t v1;

  *(_QWORD *)(v0 + 8 * (v1 >> 6) + 64) |= 1 << v1;
}

uint64_t sub_10001E944()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

_QWORD *sub_10001E94C()
{
  return sub_100037A7C(&STACK[0x238]);
}

uint64_t sub_10001E954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  return QueryType.filter(_:)(a1, v4, v5, a2, a3, a4);
}

void sub_10001E960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10001E98C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = a1[3];
  v1 = a1[4];
  sub_10000E858(a1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v2);
}

const char *sub_10001E9C0(uint64_t a1)
{
  return sub_10001D77C(a1, 0);
}

double sub_10001E9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(void);

  return sub_1000E73E8(a1, a2, a3, a4, a5, a6, a7, a8, v8);
}

void sub_10001E9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000EAD14(a1, a2, a3, a4, 0x20484354414D20, 0xE700000000000000);
}

uint64_t sub_10001E9EC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL(0);
  if (!sub_10001C93C(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  sub_10001EA88(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  v6 = a1 + a2[7];
  v7 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t sub_10001EA88(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

_QWORD *sub_10001EACC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain(v6);
  if (sub_10001C93C((uint64_t)v9, 1, v10))
  {
    v11 = sub_10001BE7C(&qword_100128740);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    sub_100014360((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  sub_10001EBF8(*v14, v16);
  *v13 = v15;
  v13[1] = v16;
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
  return a1;
}

uint64_t sub_10001EBF8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001EC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001EC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001EC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001EC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001EC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001EC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001EC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001ECAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001ECBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001ECCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001ECDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001ECEC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001ECF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001ECFC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001ED04(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001ED0C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001ED14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001ED1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001ED24(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001ED2C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001ED34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001ED3C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10001ED48@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10000C684(*(_QWORD *)(v1 + 24), a1);
}

_BYTE *initializeBufferWithCopyOfBuffer for DonationError(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_10001ED6C()
{
  uint64_t v0;

  return swift_arrayInitWithCopy(v0);
}

uint64_t sub_10001ED7C()
{
  uint64_t v0;

  return v0;
}

void sub_10001ED88()
{
  uint64_t v0;

}

uint64_t sub_10001ED90(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_10001ED9C(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

_QWORD *sub_10001EDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)(v39 - 128) = a1;
  *(_QWORD *)(v39 - 120) = v33;
  *(_QWORD *)(v39 - 152) = v37;
  *(_QWORD *)(v39 - 144) = v35;
  *(_QWORD *)(v39 - 136) = v34;
  v40 = *(_QWORD *)(v38 + 8);
  a32 = v36;
  a33 = v40;
  return sub_10001795C(&a29);
}

void sub_10001EDCC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100019EB8(a1, a2, v2);
}

_QWORD *sub_10001EDE4()
{
  uint64_t v0;

  return sub_100037A7C((_QWORD *)(v0 - 248));
}

void *sub_10001EE00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = a1;
  *(_QWORD *)(v2 - 112) = v1;
  return _Block_copy((const void *)(v2 - 136));
}

uint64_t sub_10001EE20()
{
  uint64_t v0;

  return sub_10000E87C((_QWORD *)(v0 + 160));
}

void sub_10001EE48()
{
  == infix<A>(_:_:)();
}

uint64_t sub_10001EE50()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001EE58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void sub_10001EE64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  sub_1000207A8(v2, a2, v3);
}

void sub_10001EE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_100019A60(a7, (uint64_t)va);
}

uint64_t sub_10001EE80(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD);

  return v1(a1, 0);
}

void sub_10001EE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

}

void sub_10001EE90()
{
  sub_10001B71C();
}

uint64_t sub_10001EE9C()
{
  uint64_t v0;

  return type metadata accessor for Optional(255, v0);
}

void sub_10001EEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_1000DB158(a1, a2, a3, a4, a5, 0x20444E4120, 0xE500000000000000, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void sub_10001EED4()
{
  _StringGuts.grow(_:)(20);
}

uint64_t sub_10001EEE0()
{
  uint64_t v0;

  return v0;
}

BOOL sub_10001EEEC(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

double sub_10001EEFC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000D6068(v0, v1);
}

uint64_t sub_10001EF20()
{
  _QWORD *v0;

  return sub_100014980(v0);
}

void sub_10001EF60(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_10001EF74()
{
  uint64_t v0;

  return v0 - 168;
}

uint64_t sub_10001EFAC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001EFB8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10001EFD0()
{
  return Logger.logObject.getter();
}

uint64_t sub_10001EFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return swift_dynamicCast(a1, a2, v4, a4, 0);
}

_QWORD *sub_10001EFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_10000E858(&a23, a26);
}

uint64_t sub_10001F008(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return String.hash(into:)(va, v1, v2);
}

uint64_t sub_10001F018@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_retain(*(_QWORD *)(v1 + a1));
}

uint64_t sub_10001F024()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

NSDictionary sub_10001F02C()
{
  return Dictionary._bridgeToObjectiveC()();
}

void sub_10001F038()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_10001DBC8(v0, v1);
}

uint64_t sub_10001F058()
{
  return 0;
}

_QWORD *sub_10001F074(uint64_t a1)
{
  return sub_1000E846C((_QWORD *)0x3F, 0xE100000000000000, a1);
}

id sub_10001F084()
{
  void *v0;

  return v0;
}

uint64_t sub_10001F08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  unint64_t v21;
  uint64_t v22;

  return sub_10000FBEC(a21, v21, (uint64_t *)(v22 - 88));
}

void sub_10001F09C()
{
  uint64_t v0;

}

uint64_t sub_10001F0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return type metadata accessor for Optional(255, a5);
}

uint64_t sub_10001F0E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001F110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  uint64_t v19;

  return sub_1000D5F44(a1, a2, v19, 2u, 1, a19, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10001F124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  return swift_initStackObject(a1, va);
}

uint64_t sub_10001F12C()
{
  uint64_t v0;

  return sub_10000E87C((_QWORD *)(v0 - 168));
}

void sub_10001F15C()
{
  uint64_t v0;

}

uint64_t sub_10001F164()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 232));
}

BOOL sub_10001F170@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10001F1C8()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_10001F1E4()
{
  return swift_slowAlloc(2, -1);
}

uint64_t sub_10001F1F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10001F204()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

void sub_10001F230()
{
  sub_10001A39C();
}

uint64_t sub_10001F244()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 240);
}

uint64_t sub_10001F258()
{
  return type metadata accessor for DispatchQoS(0);
}

uint64_t sub_10001F274()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 32);
  *v4 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10001F298()
{
  uint64_t v0;

  return v0 - 112;
}

uint64_t sub_10001F2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  return a12(a10, v14, v12, a1, a2, a3, v13);
}

uint64_t sub_10001F2F4(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a1);
  return sub_1000D7898((uint64_t)va, v2, v1, v3);
}

uint64_t sub_10001F308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

void sub_10001F32C()
{
  void *v0;

}

void sub_10001F384(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t *v4;
  uint64_t *v5;

  sub_10001A720(a1, a2, a3, a4, v4, v5);
}

uint64_t sub_10001F390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return type metadata accessor for Expression(0, a5, a3, a4);
}

void sub_10001F3BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1000131A8(v2, a2);
}

id sub_10001F3D8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

void sub_10001F3E4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 240) = 31524;
  *(_QWORD *)(v0 - 232) = 0xE200000000000000;
}

uint64_t sub_10001F3F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 112);
}

uint64_t sub_10001F40C()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_10001F41C()
{
  uint64_t v0;

  return sub_100016064(v0);
}

double sub_10001F42C()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 - 272) = 0u;
  *(_OWORD *)(v0 - 288) = 0u;
  *(_OWORD *)(v0 - 304) = 0u;
  *(_OWORD *)(v0 - 320) = 0u;
  *(_OWORD *)(v0 - 336) = 0u;
  return result;
}

uint64_t sub_10001F460()
{
  uint64_t v0;

  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_10001F468()
{
  uint64_t v0;
  uint64_t v1;

  return static NSObject.== infix(_:_:)(v1, v0);
}

uint64_t sub_10001F474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return static _DictionaryStorage.resize(original:capacity:move:)(v1, v0, v2);
}

uint64_t sub_10001F490()
{
  uint64_t v0;
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

void sub_10001F49C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = a1;
}

uint64_t sub_10001F4B4()
{
  uint64_t v0;

  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_10001F4C0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001F4D4(_QWORD *a1)
{
  sub_10000E87C(a1);
  return swift_release();
}

void sub_10001F4E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_1000207A8(v3, v4, a3);
}

uint64_t sub_10001F4F4()
{
  return Logger.logObject.getter();
}

uint64_t sub_10001F4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return type metadata accessor for Expression(0, a7, a3, a4);
}

uint64_t sub_10001F508(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33, 0);
}

_QWORD *sub_10001F514(__n128 *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  a1[1] = a2;
  *(_QWORD *)(v2 + 56) = v3;
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(v4 + 8);
  return sub_10001795C((__n128 *)a1[2].n128_u64);
}

void sub_10001F52C(uint64_t a1)
{
  os_unfair_lock_s *v1;
  uint64_t v2;

  sub_100014360(v2, 0, 1, a1);
  os_unfair_lock_unlock(v1);
}

BOOL sub_10001F550(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001F55C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(a2 + 8))(v2);
}

uint64_t sub_10001F56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return Dictionary.init(dictionaryLiteral:)(a1, v3, a3, v4);
}

uint64_t sub_10001F578(uint64_t a1, uint64_t a2)
{
  return sub_100042A1C(0xD000000000000024, a2);
}

uint64_t sub_10001F584()
{
  uint64_t v0;
  uint64_t v1;

  return *(_QWORD *)(v0 + *(int *)(*(_QWORD *)(v1 - 184) + 24));
}

_QWORD *sub_10001F5AC()
{
  uint64_t v0;

  return sub_10000E858((_QWORD *)(v0 - 240), *(_QWORD *)(v0 - 216));
}

uint64_t sub_10001F5B8()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10001F5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  unint64_t v21;
  uint64_t v22;

  return sub_10000FBEC(a21, v21, (uint64_t *)(v22 - 88));
}

void sub_10001F5DC()
{
  sub_100087E70();
}

uint64_t sub_10001F5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  return sub_1000D5F44(a1, v15, v14, 2u, 0, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10001F614()
{
  return type metadata accessor for OSSignpostID(0);
}

uint64_t sub_10001F61C()
{
  return type metadata accessor for OSSignposter(0);
}

uint64_t sub_10001F638@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_10003286C(0, (unint64_t)(a1 + 63) >> 6, v1);
}

void sub_10001F64C()
{
  == infix<A>(_:_:)();
}

size_t sub_10001F654(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

void sub_10001F678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v0 + 16) = v5;
  v6 = (_QWORD *)(v0 + 24 * v1);
  v6[4] = v3;
  v6[5] = v4;
  v6[6] = v2;
}

uint64_t sub_10001F694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_10002D8B0(v2, v1, v0);
}

uint64_t sub_10001F6B8()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_10001F6C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2;
  return swift_task_dealloc(a1);
}

_QWORD *sub_10001F6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  return sub_1000379AC(&a35);
}

void sub_10001F6DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_10001F700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000EAD14(a1, a2, a3, a4, 0x20424F4C4720, 0xE600000000000000);
}

uint64_t sub_10001F714()
{
  uint64_t v0;

  return v0;
}

void sub_10001F728(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1000131E0(*(_QWORD *)(v2 - 264), a2);
}

uint64_t sub_10001F734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_10001F744()
{
  uint64_t v0;

  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_10001F754()
{
  uint64_t v0;
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 280, v0);
}

uint64_t sub_10001F764()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_10001F774@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10001F790(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_dynamicCast(v2 - 120, v2 - 112, v1, a1, 0);
}

_QWORD *sub_10001F7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  return sub_100037A7C(&a35);
}

void sub_10001F7B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_10001F7B8(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v1;

}

uint64_t sub_10001F7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

void sub_10001F7E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void *v11;
  Swift::String v12;

  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
}

uint64_t sub_10001F7FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = 40;
  *(_QWORD *)(v2 - 120) = 0xE100000000000000;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v0, v1);
}

_WORD *sub_10001F81C(_WORD *result)
{
  *result = 0;
  return result;
}

void sub_10001F828(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_10007EC94(a1, v1);
}

uint64_t sub_10001F83C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  v1[82] = a1;
  result = *(_QWORD *)(v1[60] + 8);
  v1[83] = result;
  v1[59] = result;
  v1[84] = *(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_10001F85C(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_10001F864(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  return sub_1000D5F44(a1, a2, a3, a4, a5, a17, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10001F86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  return sub_1000132C4((uint64_t)&a29, v29 + 72);
}

uint64_t sub_10001F878(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_initStackObject(v2, a2);
}

uint64_t sub_10001F880()
{
  uint64_t v0;
  uint64_t v1;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v0));
}

uint64_t sub_10001F88C()
{
  uint64_t v0;

  return v0;
}

__n128 sub_10001F898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  _DWORD *v19;
  uint64_t v20;
  __n128 result;

  *(_QWORD *)(v20 - 88) = a1;
  result = a19;
  *v19 = a19.n128_u32[0];
  return result;
}

void sub_10001F8B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 160) = v2;
  *(_QWORD *)(v3 - 152) = v1;
  *(_QWORD *)(v3 - 144) = v0;
}

uint64_t sub_10001F8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return Character.write<A>(to:)(a1, a2, a3, v3, v4);
}

uint64_t sub_10001F8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return swift_dynamicCast(a1, va, a3, a4, 6);
}

NSString sub_10001F8F0()
{
  return String._bridgeToObjectiveC()();
}

double sub_10001F8F8()
{
  return 0.0;
}

uint64_t sub_10001F90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  return sub_1000132C4((uint64_t)&a28, v28 + 72);
}

void sub_10001F918(__n128 *a1, __n128 a2)
{
  uint64_t v2;

  a1[1] = a2;
  sub_100019A60(v2, (uint64_t)&a1[2]);
}

uint64_t sub_10001F93C(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_10001F944(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10001F94C()
{
  uint64_t v0;

  return v0 - 112;
}

uint64_t sub_10001F96C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001F97C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001F984(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000E858(a1, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 8))(v1);
}

uint64_t sub_10001F9A8()
{
  uint64_t v0;

  return v0 - 168;
}

uint64_t sub_10001F9C8()
{
  uint64_t v0;

  return v0;
}

id sub_10001F9D8(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

uint64_t sub_10001F9E8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  v9 = sub_10001795C(&v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v9, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_100019A48(&v12, v10 + 40 * a1 + 32);
}

void sub_10001FA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_100005510(a1, a2, a3, *v3, &qword_100129658, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100031128, (uint64_t)&unk_100129660, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))sub_10001FB00);
  *v3 = v4;
}

void sub_10001FA9C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10000577C();
  *v0 = v1;
}

char *sub_10001FAD0(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100004D50(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_10001FAEC()
{
  sub_10002F99C();
}

uint64_t sub_10001FB00(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  if (a2 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    sub_1000163C4();
    v6 = v4 + 24 * v5;
    if (v2 + 24 * v5 > v4)
    {
      v7 = v6 >= v2;
      v8 = v6 == v2;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      sub_10001BE7C(v3);
      v9 = sub_10001B0C0();
      return sub_10001AE28(v9);
    }
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_10001FB9C(uint64_t a1, uint64_t a2)
{
  return sub_100051B34(a1, a2);
}

_QWORD *sub_10001FBA8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t sub_10001FBB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100128180;
  if (!qword_100128180)
  {
    v1 = sub_100025A6C(&qword_100128178);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100128180);
  }
  return result;
}

uint64_t sub_10001FBF8(uint64_t a1)
{
  return sub_1000B7A10(a1, (uint64_t (*)(BOOL))sub_100004570);
}

void sub_10001FC04()
{
  sub_1000D5DBC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100004570);
}

_QWORD *sub_10001FC10(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v40;
  int64_t v41;

  v6 = *(_QWORD *)(a4 + 56);
  v4 = a4 + 56;
  v5 = v6;
  v38 = v4;
  v7 = -1 << *(_BYTE *)(v4 - 24);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  if (!a2)
  {
    v11 = 0;
    a3 = 0;
LABEL_38:
    *result = a4;
    result[1] = v38;
    result[2] = ~v7;
    result[3] = v11;
    result[4] = v9;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v11 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v10 = a2;
  v35 = -1 << *(_BYTE *)(v4 - 24);
  v36 = result;
  v11 = 0;
  v12 = 0;
  v37 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v40 = (v9 - 1) & v9;
  v41 = v11;
  for (i = __clz(__rbit64(v9)) | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v14 << 6))
  {
    ++v12;
    v17 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 104 * i);
    v18 = v17[1];
    v19 = v17[2];
    v20 = v17[3];
    v22 = (void *)v17[4];
    v21 = v17[5];
    v24 = v17[6];
    v23 = v17[7];
    v26 = v17[8];
    v25 = v17[9];
    v28 = v17[10];
    v27 = (void *)v17[11];
    v29 = v17[12];
    *v10 = *v17;
    v10[1] = v18;
    v10[2] = v19;
    v10[3] = v20;
    v10[4] = v22;
    v10[5] = v21;
    v10[6] = v24;
    v10[7] = v23;
    v10[8] = v26;
    v10[9] = v25;
    v10[10] = v28;
    v10[11] = v27;
    v10[12] = v29;
    v30 = a3;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v20);
      v33 = v22;
      sub_100016794();
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v28);
      v34 = v27;
      swift_bridgeObjectRetain(v29);
      v7 = v35;
      result = v36;
      a3 = v30;
      v9 = v40;
      v11 = v41;
      goto LABEL_38;
    }
    v10 += 13;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    v31 = v22;
    sub_100016794();
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v28);
    v32 = v27;
    result = (_QWORD *)swift_bridgeObjectRetain(v29);
    a3 = v30;
    v9 = v40;
    v11 = v41;
    if (v40)
      goto LABEL_8;
LABEL_9:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v14 >= v37)
      goto LABEL_33;
    v15 = *(_QWORD *)(v38 + 8 * v14);
    if (!v15)
      break;
LABEL_18:
    v40 = (v15 - 1) & v15;
    v41 = v14;
  }
  v11 += 2;
  if (v14 + 1 >= v37)
  {
    v9 = 0;
    v11 = v14;
    goto LABEL_37;
  }
  v15 = *(_QWORD *)(v38 + 8 * v11);
  if (v15)
    goto LABEL_14;
  v16 = v14 + 2;
  if (v14 + 2 >= v37)
    goto LABEL_33;
  v15 = *(_QWORD *)(v38 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v11 = v14 + 3;
  if (v14 + 3 >= v37)
  {
    v9 = 0;
    v11 = v14 + 2;
    goto LABEL_37;
  }
  v15 = *(_QWORD *)(v38 + 8 * v11);
  if (v15)
  {
LABEL_14:
    v14 = v11;
    goto LABEL_18;
  }
  v16 = v14 + 4;
  if (v14 + 4 >= v37)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    a3 = v12;
    v7 = v35;
    result = v36;
    goto LABEL_38;
  }
  v15 = *(_QWORD *)(v38 + 8 * v16);
  if (v15)
  {
LABEL_17:
    v14 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v14 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v14 >= v37)
    {
      v9 = 0;
      v11 = v37 - 1;
      goto LABEL_37;
    }
    v15 = *(_QWORD *)(v38 + 8 * v14);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10001FEF4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = sub_1000179D8();
  v1(v3);
  return sub_10001F944(v2);
}

uint64_t sub_10001FF18(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t SchemaType.select(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000034CC(a1, a2, a3, a4, 0);
}

uint64_t sub_10001FF6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100003754(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_10001FF74()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  v1 = sub_100013534();
  sub_10000541C(v1, v2, v3, v4, v0[6], v0[7], v0[8]);
}

id sub_10001FFA4(id result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_10001F9D8(result, a2 & 1);
  return result;
}

uint64_t type metadata accessor for ApplicationServiceInstance()
{
  return objc_opt_self(_TtC10LinkDaemon26ApplicationServiceInstance);
}

uint64_t sub_10001FFE0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10001FFDC);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_100020034()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_sourceBundleIdentifier);
  v3 = *v1;
  v2 = v1[1];
  v4 = (_QWORD *)swift_task_alloc(dword_10012A2B4);
  *(_QWORD *)(v0 + 24) = v4;
  *v4 = v0;
  v4[1] = sub_1000200A0;
  return sub_1000202C0(v3, v2);
}

uint64_t sub_1000200A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_10001DCCC();
  v2 = *v0;
  sub_10001010C(*(_QWORD *)(v1 + 24), &v4);
  return sub_1000107A0(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000200D4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_100018C14((uint64_t)sub_100020034);
}

uint64_t sub_1000200E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  sub_10000FE70();
  v11 = v2;
  v12 = v3;
  v10 = v1;
  v10 = (_QWORD *)*v1;
  v4 = v10;
  sub_100072058(&v10);
  v4[42] = v0;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(v4[30]);
  if (v0)
  {
    sub_1000100D0();
    sub_1000117B4();
    sub_1000059A8();
  }
  else
  {
    sub_1000059C4();
    sub_1000100D0();
    sub_1000117B4();
    sub_100072254();
  }
  sub_1000167A8();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_10002018C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[15];
  v1 = v0[16];
  v0[24] = v2;
  v0[25] = v1;
  v3 = v0[17];
  v0[26] = v3;
  v4 = (_QWORD *)swift_task_alloc(dword_10012A274);
  v0[27] = v4;
  *v4 = v0;
  v4[1] = sub_10002022C;
  return sub_100004304(v2, v1, v3);
}

uint64_t sub_10002022C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_10001DCCC();
  v3 = *(_QWORD *)(v2 + 216);
  *v4 = *v1;
  *(_QWORD *)(v2 + 224) = v0;
  swift_task_dealloc(v3);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000202C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  sub_1000167A8();
  return sub_1000059B8();
}

void _LNMetadataProviderDirect.actions(forBundleIdentifier:)()
{
  sub_10000A824();
}

void _LNMetadataProviderDirect.enums(forBundleIdentifier:)()
{
  sub_1000044F4();
}

uint64_t type metadata accessor for AppShortcutInterpolator()
{
  return objc_opt_self(_TtC10LinkDaemon23AppShortcutInterpolator);
}

uint64_t sub_1000203AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100013874(a1, a2, a3);
}

uint64_t sub_1000203B4()
{
  uint64_t v0;

  return sub_1000203C0(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_1000203C0(unint64_t a1, uint64_t *a2)
{
  return sub_100009FEC(a1, *a2);
}

void destroy for LNAppShortcutRecord(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

uint64_t sub_1000203F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BD708);
}

uint64_t sub_1000203FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BD678);
}

uint64_t sub_100020408(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LSLinkBundleRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100020444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LSLinkBundleRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100020488(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  void (*v4)(uint64_t);

  a3(0);
  v3 = sub_100019430();
  v4(v3);
  sub_10000BFBC();
}

uint64_t type metadata accessor for LSLinkBundleRecord(uint64_t a1)
{
  return sub_10000DE98(a1, qword_10012B4E0, (uint64_t)&nominal type descriptor for LSLinkBundleRecord);
}

void sub_1000204D8()
{
  sub_1000101B0();
  sub_100019430();
  sub_10000BFBC();
}

void sub_1000204F8(void *a1)
{
  sub_1000083B8(a1);
}

uint64_t sub_100020518(void *a1)
{
  sub_100020550(a1);
  return 1;
}

uint64_t sub_100020530()
{
  return sub_100020580();
}

uint64_t sub_100020544()
{
  uint64_t v0;

  return sub_100008804(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100020550(void *a1)
{
  objc_msgSend(a1, "resume");
  return 1;
}

uint64_t sub_100020580()
{
  if (qword_100127DA8 != -1)
    swift_once(&qword_100127DA8, sub_10006BC34);
  sub_1000101B0();
  return sub_100019430();
}

uint64_t sub_1000205D4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (_QWORD *)v0[5];
  v2 = v1[4];
  v3 = sub_10000E858(v1, v1[3]);
  v4 = sub_10001F55C((uint64_t)v3, *(_QWORD *)(v2 + 8));
  v6 = v5;
  v0[18] = v5;
  v7 = (_QWORD *)swift_task_alloc(dword_10012815C);
  v0[19] = v7;
  *v7 = v0;
  v7[1] = sub_100020650;
  return sub_10000369C(v4, v6, v0[6], v0[7], v0[10], v0[11], v0[12]);
}

uint64_t sub_100020650(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 152);
  *(_QWORD *)(*v2 + 160) = v1;
  swift_task_dealloc(v5);
  if (!v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 144));
    *(_QWORD *)(v4 + 168) = a1;
  }
  return sub_100011788();
}

uint64_t sub_1000206C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000502E0);
}

_QWORD *sub_1000206CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain(v6);
  if (sub_10001C93C((uint64_t)v9, 1, v10))
  {
    v11 = sub_10001BE7C(&qword_100128740);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    sub_100014360((uint64_t)v8, 0, 1, v10);
  }
  v12 = *(int *)(a3 + 24);
  v13 = *(void **)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + v12) = v13;
  v14 = v13;
  return a1;
}

void sub_1000207A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_10001B6C0(a1, a2, a3);
  sub_1000137A0(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_10000BFBC();
}

void sub_1000207D4(uint64_t a1, uint64_t a2)
{
  sub_100063364(a1, a2, (SEL *)&selRef_actionsForBundleIdentifier_error_, &qword_10012A710, LNActionMetadata_ptr);
  sub_100017714();
}

void sub_100020830(uint64_t a1, uint64_t a2)
{
  sub_100063364(a1, a2, (SEL *)&selRef_enumsForBundleIdentifier_error_, (unint64_t *)&qword_100129F40, LNEnumMetadata_ptr);
  sub_100017714();
}

void sub_10002088C()
{
  uint64_t *v0;

  sub_1000208AC(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

void sub_1000208AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;

  v9 = type metadata accessor for Logger(0);
  __chkstk_darwin(v9);
  sub_100020C1C();
  if (!v5)
    sub_10000ED70(a1, a4, a5);
}

uint64_t sub_100020B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;

  sub_10006B24C();
  v11 = v4;
  v12 = v7;
  v13 = v6;
  v14 = v5;
  v15 = a4;
  ObjectType = swift_getObjectType(v4);
  return Connection.transaction(_:block:)(0, (void (*)(uint64_t))sub_10002088C, (uint64_t)&v10);
}

void sub_100020C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_10006B324();
  sub_100005AA0(v1, v2, v3);
  if (v0)
  {
    v4 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v4, v5);
    sub_100017704();
    sub_10001B2EC();
    sub_100013E4C();
    sub_100005A04();
  }
  sub_10001F5C0();
}

uint64_t sub_100020C90(unsigned __int8 *a1)
{
  return *a1;
}

unint64_t sub_100020CA4()
{
  unint64_t result;

  result = qword_1001281F0;
  if (!qword_1001281F0)
  {
    result = swift_getWitnessTable(&unk_1000EF898, &type metadata for DonationError);
    atomic_store(result, (unint64_t *)&qword_1001281F0);
  }
  return result;
}

unint64_t sub_100020CE0(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000021;
  else
    return 0xD00000000000001BLL;
}

unint64_t sub_100020D1C()
{
  char *v0;

  return sub_100020CE0(*v0);
}

uint64_t sub_100020D24(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001BE7C(&qword_100128740);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

int main(int argc, const char **argv, const char **envp)
{
  LNSetUserDirSuffix(LNDaemonBundleIdentifier, argv, envp);
  static Daemon.main()((uint64_t)&type metadata for LinkDaemon, (uint64_t)&protocol witness table for LinkDaemon);
}

uint64_t sub_100020D98()
{
  return 0;
}

__n128 sub_100020DA8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100020DB4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100020DD4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
  sub_100026ED4(a1, &qword_1001280E8, (uint64_t)&unk_10011A5B0);
}

uint64_t sub_100020E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000795C(0, (unint64_t *)&qword_1001289B0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter();
  v16 = _swiftEmptyArrayStorage;
  sub_100025AFC((unint64_t *)&qword_100128190, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = v10;
  v12 = sub_10001BE7C((uint64_t *)&unk_1001289C0);
  sub_100025B38((unint64_t *)&qword_1001281A0, (uint64_t *)&unk_1001289C0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000013, 0x80000001000F3530, v9, v6, v3, 0);
  qword_10012C998 = result;
  return result;
}

uint64_t sub_100020FE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ValueMetadata *v8;

  v0 = type metadata accessor for Logger(0);
  sub_1000269D8(v0, qword_10012C9A0);
  sub_100012A40(v0, (uint64_t)qword_10012C9A0);
  v8 = &type metadata for AppShortcutDonator;
  v1 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v3 = String.init<A>(describing:)(&v8, v1);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v5 = v2;
    v6 = String.init(cString:)();
    return Logger.init(subsystem:category:)(v6, v7, v3, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100021088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD aBlock[6];
  _QWORD *v47;

  v44 = a6;
  v42 = a4;
  v43 = a5;
  type metadata accessor for DispatchWorkItemFlags(0);
  sub_100018EC8();
  __chkstk_darwin(v12);
  sub_10001B738();
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000795C(0, &qword_100128168, KVDonator_ptr);
  swift_bridgeObjectRetain(a2);
  v17 = v45;
  result = sub_1000213B8(a3, a1, a2);
  if (!v17)
  {
    v19 = result;
    v37[0] = 0;
    v38 = v16;
    v39 = v7;
    v40 = v14;
    v41 = v13;
    v45 = v8;
    if (qword_100127C30 != -1)
      swift_once(&qword_100127C30, sub_100020E14);
    v37[1] = qword_10012C998;
    sub_1000165C8();
    v23 = (_QWORD *)swift_allocObject(v20, v21, v22);
    v25 = v42;
    v24 = v43;
    v23[2] = v19;
    v23[3] = v25;
    v26 = v44;
    v23[4] = v24;
    v23[5] = v26;
    v23[6] = a1;
    v23[7] = a2;
    aBlock[4] = sub_100025A5C;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001FEF4;
    aBlock[3] = &unk_10011A5F0;
    v27 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a2);
    v28 = v19;
    swift_retain();
    v29 = v24;
    v30 = sub_10000EC68();
    v31 = v38;
    static DispatchQoS.unspecified.getter(v30);
    v47 = _swiftEmptyArrayStorage;
    sub_100025AFC((unint64_t *)&qword_100128170, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v33 = v32;
    v34 = sub_10001BE7C(&qword_100128178);
    sub_100025B38((unint64_t *)&qword_100128180, &qword_100128178);
    v35 = v39;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v34, v36, v6, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v31, v35, v27);
    _Block_release(v27);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v35, v6);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v41);
    return (id)swift_release();
  }
  return result;
}

void sub_100021314()
{
  id v0;
  NSString v1;

  if (objc_msgSend((id)objc_opt_self(LNFeatureFlags), "isLowPowerDeviceEnabled"))
  {
    v0 = objc_msgSend((id)objc_opt_self(_INVocabulary), "sharedVocabulary");
    v1 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "removeAllVocabularyStringsOnBehalfOf:", v1);

  }
  else
  {
    sub_10001858C();
  }
}

id sub_1000213B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v12 = 0;
  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v3), "donatorWithItemType:originAppId:error:", a1, v6, &v12);

  v8 = v12;
  if (v7)
  {
    v9 = v12;
  }
  else
  {
    v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
  return v7;
}

void sub_1000214A4(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  void *v13;
  id v14;
  _QWORD v15[6];

  v12 = (_QWORD *)swift_allocObject(&unk_10011A628, 56, 7);
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = a6;
  v15[4] = sub_100025AEC;
  v15[5] = v12;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_1000218DC;
  v15[3] = &unk_10011A640;
  v13 = _Block_copy(v15);
  swift_retain();
  v14 = a3;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  swift_release();
  objc_msgSend(a1, "donateWithOptions:usingStream:", 2, v13);
  _Block_release(v13);
}

id sub_1000215A0(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  id result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  result = (id)__chkstk_darwin(v13);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v31 = a6;
    swift_errorRetain(a2);
    v18 = qword_100127C38;
    swift_retain();
    v19 = a4;
    swift_bridgeObjectRetain(a5);
    if (v18 != -1)
      swift_once(&qword_100127C38, sub_100020FE0);
    v20 = sub_100012A40(v13, (uint64_t)qword_10012C9A0);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v20, v13);
    swift_bridgeObjectRelease(a5);

    swift_release();
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a7);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a7);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(22, -1);
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      v30 = swift_slowAlloc(32, -1);
      v33 = v30;
      *(_DWORD *)v24 = 136315394;
      swift_bridgeObjectRetain(a7);
      v32 = sub_10000FBEC(v31, a7, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_bridgeObjectRelease_n(a7, 3);
      *(_WORD *)(v24 + 12) = 2112;
      swift_errorRetain(a2);
      v25 = _swift_stdlib_bridgeErrorToNSError(a2);
      v32 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      v26 = v29;
      *v29 = v25;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Could not clear auto shortcuts vocabulary for %s. Error: %@", (uint8_t *)v24, 0x16u);
      sub_10001BE7C(&qword_100128160);
      swift_arrayDestroy(v26, 1);
      swift_slowDealloc(v26, -1, -1);
      v27 = v30;
      swift_arrayDestroy(v30, 1);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_bridgeObjectRelease_n(a7, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
    return (id)(*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  else if (a1)
  {
    return objc_msgSend(a1, "finish:", 0);
  }
  return result;
}

void sub_1000218DC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_100021950()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  _QWORD *v33;
  uint64_t *v34;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v4 = *(void **)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 80);
  sub_10001DCC4();
  v6 = v4;
  sub_10000EC68();
  v7 = (uint64_t)sub_100022650(v1, v5, v6, v3);
  v8 = (void *)v7;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 >= 0)
      v7 &= 0xFFFFFFFFFFFFFF8uLL;
    v9 = _CocoaArrayWrapper.endIndex.getter(v7);
  }
  else
  {
    v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v10 = *(_QWORD **)(v0 + 40);
  v12 = *(void **)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  v13 = *(_QWORD *)(v0 + 80);
  if (v9)
  {
    v34 = (uint64_t *)(v0 + 32);
    sub_100022824((uint64_t)v10, (uint64_t)v8, v13, v12, v11);
    if (v2)
    {
      v14 = *(void **)(v0 + 88);
      v15 = qword_100127C38;
      swift_retain();
      v16 = v14;
      sub_1000101B0();
      if (v15 != -1)
      {
        swift_once(&qword_100127C38, sub_100020FE0);
        v16 = *(id *)(v0 + 88);
      }
      v17 = *(NSObject **)(v0 + 136);
      v19 = *(_QWORD *)(v0 + 104);
      v18 = *(_QWORD *)(v0 + 112);
      v20 = sub_100012A40(v19, (uint64_t)qword_10012C9A0);
      (*(void (**)(NSObject *, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
      swift_release();

      sub_1000059A8();
      sub_1000165C0();
      v21 = sub_1000165C0();
      v22 = v17;
      Logger.logObject.getter(v21);
      v23 = sub_10000BFD4();
      if (os_log_type_enabled(v17, v23))
      {
        v24 = (uint8_t *)sub_100011780(12);
        v33 = (_QWORD *)sub_100011780(8);
        *(_DWORD *)v24 = 138412290;
        sub_1000165C0();
        v25 = sub_10001F460();
        *v34 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v0 + 40);
        *v33 = v25;
        sub_1000059A0();
        sub_1000059A0();
        sub_1000100C0((void *)&_mh_execute_header, v22, v23, "Failed to donate Auto Shortcuts to SiriVocabulary: %@", v24);
        sub_10001BE7C(&qword_100128160);
        sub_100013320((uint64_t)v33);
        sub_1000133FC((uint64_t)v33);
        sub_1000133FC((uint64_t)v24);

        sub_1000059A0();
      }
      else
      {
        sub_1000059A0();
        sub_1000059A0();
        sub_1000059A0();

      }
      sub_100011110(*(_QWORD *)(v0 + 112));
    }
    if (objc_msgSend((id)objc_opt_self(LNFeatureFlags), "isLowPowerDeviceEnabled"))
      sub_100022C84(*(_QWORD **)(v0 + 40), v8, *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(void **)(v0 + 88), *(void **)(v0 + 96));
    sub_1000059B0();
    sub_100023068(*(_QWORD **)(v0 + 40), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 80), *(void **)(v0 + 88), *(_QWORD *)(v0 + 96));
    goto LABEL_17;
  }
  sub_1000059B0();
  v26 = v10[4];
  v27 = sub_10000E858(v10, v10[3]);
  v28 = sub_10001F55C((uint64_t)v27, *(_QWORD *)(v26 + 8));
  v30 = v29;
  sub_100021088(v28, v29, 8, v13, v12, v11);
  if (!v2)
  {
    sub_100021088(v28, v30, 18, *(_QWORD *)(v0 + 80), *(void **)(v0 + 88), *(_QWORD *)(v0 + 96));
    sub_100021314();
    sub_1000059A8();
LABEL_17:
    sub_100013408();
    sub_1000158B0();
    sub_100005878();
    v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
  sub_1000059A8();
  sub_100013408();
  sub_1000158B0();
  sub_100005878();
  v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_100021FAC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[20];
  v0[21] = sub_100038BB8((uint64_t)(v0 + 2), v0[17], v0[18]);
  v0[22] = v1;
  swift_bridgeObjectRelease(v0[18]);
  if (!v1)
    sub_10000E87C(v0 + 2);
  return sub_100011788();
}

uint64_t sub_100022018()
{
  uint64_t v0;

  sub_1000158B0();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 168));
}

uint64_t sub_100022058()
{
  uint64_t v0;

  sub_10000E87C((_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000220A0(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  char v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  os_log_t v31;
  uint64_t v32;
  uint64_t v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = sub_100094DFC(*a1, a4);
  if ((v12 & 1) == 0)
  {
    v13 = qword_100127C38;
    swift_retain();
    v14 = a3;
    swift_bridgeObjectRetain(a4);
    if (v13 != -1)
      swift_once(&qword_100127C38, sub_100020FE0);
    v15 = sub_100012A40(v7, (uint64_t)qword_10012C9A0);
    v16 = v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v15, v7);
    swift_bridgeObjectRelease(a4);

    swift_release();
    v17 = v11;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter();
    v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      v21 = swift_slowAlloc(22, -1);
      v38 = v20;
      v22 = v21;
      v39 = swift_slowAlloc(64, -1);
      v42 = v39;
      *(_DWORD *)v22 = 136315394;
      v36 = v22 + 4;
      v23 = objc_msgSend(v17, "actionIdentifier");
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v37 = v16;
      v26 = v25;

      v40 = sub_10000FBEC(v24, v26, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);

      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v22 + 12) = 2080;
      v36 = v22 + 14;
      v27 = objc_msgSend(v17, "bundleIdentifier");
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v35 = v18;
      v30 = v29;

      v40 = sub_10000FBEC(v28, v30, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);

      swift_bridgeObjectRelease(v30);
      v31 = v35;
      _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v38, "%s in %s is denylisted, skipping donation.", (uint8_t *)v22, 0x16u);
      v32 = v39;
      swift_arrayDestroy(v39, 2);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v7);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  return v12 & 1;
}

_QWORD *sub_1000223B8(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_24;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v34 = a2;
  if (v4)
  {
    v5 = 0;
    v33 = v3 & 0xC000000000000001;
    v31 = (void *)LNSystemProtocolIdentifierConditionallyEnabled;
    v32 = v3 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v33)
      {
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      }
      else
      {
        if (v5 >= *(_QWORD *)(v32 + 16))
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          if (v3 < 0)
            v30 = v3;
          else
            v30 = v3 & 0xFFFFFFFFFFFFFF8;
          v4 = _CocoaArrayWrapper.endIndex.getter(v30);
          goto LABEL_3;
        }
        v6 = *(id *)(v3 + 8 * v5 + 32);
      }
      v7 = v6;
      v8 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_23;
      v9 = v3;
      v10 = v4;
      v11 = objc_msgSend(v6, "actionIdentifier");
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      if (!*(_QWORD *)(a2 + 16))
        break;
      v15 = sub_100016064(v12);
      if ((v16 & 1) == 0)
        break;
      v17 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v15);
      swift_bridgeObjectRelease(v14);
      v18 = objc_msgSend(v17, "systemProtocolMetadata");
      type metadata accessor for LNSystemProtocolIdentifier(0);
      v20 = v19;
      v21 = sub_10001BE7C(&qword_100128730);
      sub_100025AFC((unint64_t *)&unk_1001281D0, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&unk_1000EF8D8);
      v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v18, v20, v21, v22);

      if (!*(_QWORD *)(v23 + 16))
        goto LABEL_16;
      v24 = v31;
      sub_10003149C();
      if ((v25 & 1) == 0)
      {

LABEL_16:
        swift_bridgeObjectRelease(v23);

LABEL_17:
        v4 = v10;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
        v27 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
        v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v7);
        specialized ContiguousArray._endMutation()(v28);
        goto LABEL_18;
      }

      swift_bridgeObjectRelease(v23);
      v4 = v10;
LABEL_18:
      v3 = v9;
      ++v5;
      a2 = v34;
      if (v8 == v4)
        goto LABEL_21;
    }
    v26 = swift_bridgeObjectRelease(v14);
    goto LABEL_17;
  }
LABEL_21:
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v3);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100022650(unint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  id v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  _QWORD *v29;

  v5 = v4;
  v9 = a1;
  v29 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  v10 = *(_QWORD **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v10)
  {
    while (1)
    {
      v11 = 0;
      v26 = v9 & 0xFFFFFFFFFFFFFF8;
      v27 = v9 & 0xC000000000000001;
      v25 = v10;
      while (v27)
      {
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9);
LABEL_7:
        v13 = v12;
        v14 = (_QWORD *)(v11 + 1);
        if (__OFADD__(v11, 1))
          goto LABEL_17;
        v28 = v12;
        v15 = sub_1000220A0(&v28, a2, a3, a4);
        if (v5)
        {
          swift_bridgeObjectRelease(v9);

          swift_release();
          goto LABEL_24;
        }
        if ((v15 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          v16 = v9;
          v17 = a4;
          v18 = a3;
          v19 = a2;
          v20 = v29[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
          v21 = v20;
          a2 = v19;
          a3 = v18;
          a4 = v17;
          v9 = v16;
          v5 = 0;
          v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v13);
          specialized ContiguousArray._endMutation()(v22);
          v10 = v25;
        }
        else
        {

        }
        ++v11;
        if (v14 == v10)
        {
          v10 = v29;
          goto LABEL_23;
        }
      }
      if (v11 < *(_QWORD *)(v26 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v9 < 0)
        v23 = v9;
      else
        v23 = v9 & 0xFFFFFFFFFFFFFF8;
      v10 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v23);
      if (!v10)
        goto LABEL_22;
    }
    v12 = *(id *)(v9 + 8 * v11 + 32);
    goto LABEL_7;
  }
LABEL_22:
  v10 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v9);
LABEL_24:
  swift_bridgeObjectRelease(a4);

  swift_release();
  return v10;
}

void sub_100022824(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[6];
  __int128 v51[2];
  _QWORD *v52;

  v49 = a1;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  __chkstk_darwin(v8);
  v46 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v44 = *(_QWORD *)(v10 - 8);
  v45 = v10;
  __chkstk_darwin(v10);
  v43 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = qword_100127C38;
  swift_retain();
  v17 = a4;
  swift_bridgeObjectRetain(a5);
  if (v16 != -1)
    swift_once(&qword_100127C38, sub_100020FE0);
  v18 = sub_100012A40(v12, (uint64_t)qword_10012C9A0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v18, v12);
  swift_bridgeObjectRelease(a5);

  v19 = swift_release();
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Donating Auto Shortcuts to SiriVocabulary", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_1000C1764();
  if (!v5)
  {
    v24 = v23;
    if ((unint64_t)v23 >> 62)
    {
      if (v23 < 0)
        v42 = v23;
      else
        v42 = v23 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v23);
      v25 = _CocoaArrayWrapper.endIndex.getter(v42);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v26 = (_QWORD *)v49;
    if (v25)
    {
      sub_10000795C(0, &qword_100128168, KVDonator_ptr);
      v28 = v26[3];
      v27 = v26[4];
      sub_10000E858(v26, v28);
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v27 + 8) + 8))(v28);
      v31 = sub_1000213B8(8, v29, v30);
      if (qword_100127C30 != -1)
        swift_once(&qword_100127C30, sub_100020E14);
      v49 = qword_10012C998;
      sub_1000132C4((uint64_t)v26, (uint64_t)v51);
      v32 = swift_allocObject(&unk_10011A718, 72, 7);
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = v24;
      sub_100019A48(v51, v32 + 32);
      aBlock[4] = sub_100026A50;
      aBlock[5] = v32;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10001FEF4;
      aBlock[3] = &unk_10011A730;
      v33 = _Block_copy(aBlock);
      v34 = v31;
      v35 = v43;
      static DispatchQoS.unspecified.getter(v34);
      v52 = _swiftEmptyArrayStorage;
      sub_100025AFC((unint64_t *)&qword_100128170, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v37 = v36;
      v38 = sub_10001BE7C(&qword_100128178);
      sub_100025B38((unint64_t *)&qword_100128180, &qword_100128178);
      v39 = v46;
      v40 = v48;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v38, v41, v48, v37);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v35, v39, v33);
      _Block_release(v33);

      (*(void (**)(char *, uint64_t))(v47 + 8))(v39, v40);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v35, v45);
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease(v24);
    }
  }
}

void sub_100022C84(_QWORD *a1, void *a2, unint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSString v56;
  unint64_t v57;
  id v58;
  __int128 v59;
  id v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[3];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[5];

  v61 = a3;
  v60 = a2;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10000E858(a1, v14);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 8))(v14);
  v17 = v16;
  v18 = v62;
  v19 = sub_1000245E0(v15, v16, (uint64_t)v60, v61);
  if (v18)
  {
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v60 = a6;
    v61 = 0;
    v62 = (uint64_t)v19;
    swift_bridgeObjectRelease(v17);
    v20 = v62;
    if ((unint64_t)v62 >> 62)
    {
      if (v62 < 0)
        v57 = v62;
      else
        v57 = v62 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v62);
      v21 = _CocoaArrayWrapper.endIndex.getter(v57);
      swift_bridgeObjectRelease(v62);
      v20 = v62;
    }
    else
    {
      v21 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v22 = v9;
    v23 = a1;
    v24 = v10;
    v25 = v12;
    if (v21)
    {
      v26 = qword_100127C38;
      swift_retain();
      v27 = a5;
      v28 = v60;
      swift_bridgeObjectRetain(v60);
      if (v26 != -1)
        swift_once(&qword_100127C38, sub_100020FE0);
      v29 = sub_100012A40(v22, (uint64_t)qword_10012C9A0);
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v25, v29, v22);
      swift_bridgeObjectRelease(v28);
      v60 = v27;

      swift_release();
      v30 = sub_1000132C4((uint64_t)a1, (uint64_t)v64);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc(12, -1);
        *(_QWORD *)&v59 = v25;
        v34 = (uint8_t *)v33;
        v35 = swift_slowAlloc(32, -1);
        v68[0] = v35;
        *(_DWORD *)v34 = 136315138;
        v58 = v34 + 4;
        *((_QWORD *)&v59 + 1) = v24;
        v37 = v65;
        v36 = v66;
        sub_10000E858(v64, v65);
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 + 8) + 8))(v37);
        v40 = v39;
        v63 = sub_10000FBEC(v38, v39, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
        swift_bridgeObjectRelease(v40);
        sub_10000E87C(v64);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Calling INVocabulary to sync App Shortcuts to Siri server for %s", v34, 0xCu);
        swift_arrayDestroy(v35, 1);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v34, -1, -1);

        (*(void (**)(_QWORD, uint64_t))(*((_QWORD *)&v59 + 1) + 8))(v59, v22);
      }
      else
      {
        sub_10000E87C(v64);

        (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v22);
      }
      sub_10000795C(0, &qword_1001281A8, NSOrderedSet_ptr);
      v41 = v62;
      sub_1000504D4(v62, v42, v43, v44, v45, v46, v47, v48, v58, v59, (uint64_t)v60, v61, (_QWORD *)v62, v63, v64[0], v64[1], v64[2], v65, v66,
        v67,
        v68[0],
        v68[1],
        v68[2],
        v68[3],
        v68[4]);
      v50 = v49;
      swift_bridgeObjectRelease(v41);
      v51 = sub_100024AC8(v50);
      v53 = v23[3];
      v52 = v23[4];
      sub_10000E858(v23, v53);
      (*(void (**)(uint64_t))(*(_QWORD *)(v52 + 8) + 8))(v53);
      v55 = v54;
      v56 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v55);
      objc_msgSend(v60, "setVocabulary:ofType:onBehalfOf:", v51, 50003, v56);

    }
    else
    {
      swift_bridgeObjectRelease(v20);
    }
  }
}

void sub_100023068(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void **v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  void (*v30)();
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  const char *v51;
  id v52;
  uint64_t v53;
  void *v54;
  id v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  void **aBlock;
  _QWORD v77[2];
  void *v78;
  void (*v79)();
  uint64_t v80;
  __int128 v81[3];
  _QWORD *v82;
  uint64_t v83;

  v73 = a1;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v72 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v71 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v69 = *(_QWORD *)(v10 - 8);
  v70 = v10;
  __chkstk_darwin(v10);
  v68 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = a2;
  v16 = *(void ***)(a2 + 16);
  v17 = qword_100127C38;
  if (v16)
  {
    v67 = v8;
    swift_retain();
    v18 = a4;
    swift_bridgeObjectRetain(a5);
    if (v17 != -1)
      swift_once(&qword_100127C38, sub_100020FE0);
    v19 = sub_100012A40(v12, (uint64_t)qword_10012C9A0);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v19, v12);
    swift_bridgeObjectRelease(a5);

    swift_release();
    v20 = v74;
    swift_bridgeObjectRetain(v74);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v24 = 134217984;
      v20 = v74;
      aBlock = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v77);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Donating %ld AppShortcuts spans to SiriVocabulary", v24, 0xCu);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease(v20);
    }
    v35 = v75;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    sub_10000795C(0, &qword_100129D80, AFPreferences_ptr);
    v36 = sub_10000358C();
    if (v37)
    {
      v38 = v36;
      v39 = v37;
      v40 = objc_msgSend(objc_allocWithZone((Class)KVItemBuilder), "init");
      *(&v66 - 4) = __chkstk_darwin(v40);
      *(&v66 - 3) = v38;
      *(&v66 - 2) = v39;
      swift_bridgeObjectRetain(v20);
      v42 = sub_100025274(v41, (uint64_t (*)(uint64_t, _QWORD *))sub_100026970);

      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v39);
      if (v35)
        return;
      if ((unint64_t)v42 >> 62)
      {
        if (v42 < 0)
          v63 = v42;
        else
          v63 = v42 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v42);
        v64 = _CocoaArrayWrapper.endIndex.getter(v63);
        swift_bridgeObjectRelease(v42);
        if (v64)
          goto LABEL_15;
      }
      else if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_15:
        sub_10000795C(0, &qword_100128168, KVDonator_ptr);
        v43 = v73;
        v45 = v73[3];
        v44 = v73[4];
        sub_10000E858(v73, v45);
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v44 + 8) + 8))(v45);
        v52 = sub_1000213B8(18, v46, v47);
        if (qword_100127C30 != -1)
          swift_once(&qword_100127C30, sub_100020E14);
        v75 = qword_10012C998;
        sub_1000132C4((uint64_t)v43, (uint64_t)v81);
        v53 = swift_allocObject(&unk_10011A678, 72, 7);
        *(_QWORD *)(v53 + 16) = v52;
        *(_QWORD *)(v53 + 24) = v42;
        sub_100019A48(v81, v53 + 32);
        v79 = sub_100026990;
        v80 = v53;
        aBlock = _NSConcreteStackBlock;
        v77[0] = 1107296256;
        v77[1] = sub_10001FEF4;
        v78 = &unk_10011A690;
        v54 = _Block_copy(&aBlock);
        v55 = v52;
        v56 = v68;
        static DispatchQoS.unspecified.getter(v55);
        v82 = _swiftEmptyArrayStorage;
        sub_100025AFC((unint64_t *)&qword_100128170, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v58 = v57;
        v59 = sub_10001BE7C(&qword_100128178);
        sub_100025B38((unint64_t *)&qword_100128180, &qword_100128178);
        v60 = v71;
        v61 = v67;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v82, v59, v62, v67, v58);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v56, v60, v54);
        _Block_release(v54);

        (*(void (**)(char *, uint64_t))(v72 + 8))(v60, v61);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v56, v70);
        swift_release();
        return;
      }
      v65 = swift_bridgeObjectRelease(v42);
      v48 = Logger.logObject.getter(v65);
      v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v50 = 0;
        v51 = "Spans produced no kvItems, exiting early.";
        goto LABEL_18;
      }
    }
    else
    {
      v48 = Logger.logObject.getter(v36);
      v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v50 = 0;
        v51 = "Cannot get Siri language to register app entity span data.";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v48, v49, v51, v50, 2u);
        swift_slowDealloc(v50, -1, -1);
      }
    }

    return;
  }
  if (qword_100127C38 != -1)
    swift_once(&qword_100127C38, sub_100020FE0);
  sub_100012A40(v12, (uint64_t)qword_10012C9A0);
  v25 = sub_1000132C4((uint64_t)v73, (uint64_t)&aBlock);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v81[0] = v29;
    *(_DWORD *)v28 = 136315138;
    v31 = v78;
    v30 = v79;
    sub_10000E858(&aBlock, (uint64_t)v78);
    v32 = (*(uint64_t (**)(void *))(*((_QWORD *)v30 + 1) + 8))(v31);
    v34 = v33;
    v82 = (_QWORD *)sub_10000FBEC(v32, v33, (uint64_t *)v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
    swift_bridgeObjectRelease(v34);
    sub_10000E87C(&aBlock);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Empty spans, will not donate for %s", v28, 0xCu);
    swift_arrayDestroy(v29, 1);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    sub_10000E87C(&aBlock);
  }

}

void sub_1000237FC(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char **v21;
  id v22;
  void *v23;
  unsigned int v24;
  id v25;
  id v26;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  NSObject **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  NSObject *oslog;
  os_log_t osloga;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68[3];
  uint64_t v69;
  uint64_t v70;

  if (a2)
  {
    if (qword_100127C38 != -1)
LABEL_45:
      swift_once(&qword_100127C38, sub_100020FE0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100012A40(v4, (uint64_t)qword_10012C9A0);
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v6))
      goto LABEL_32;
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "Could not get a donator from SiriVocabulary, skipping span donations";
    goto LABEL_31;
  }
  if (!a1 || (v12 = objc_opt_self(KVFullDatasetStream), (v13 = swift_dynamicCastObjCClass(a1, v12)) == 0))
  {
    if (qword_100127C38 != -1)
      swift_once(&qword_100127C38, sub_100020FE0);
    v41 = type metadata accessor for Logger(0);
    v42 = sub_100012A40(v41, (uint64_t)qword_10012C9A0);
    oslog = Logger.logObject.getter(v42);
    v6 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v6))
      goto LABEL_32;
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "Got unexpected stream type from SiriVocabulary, skipping span donations";
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, v8, v7, 2u);
    swift_slowDealloc(v7, -1, -1);
LABEL_32:

    return;
  }
  v14 = (void *)v13;
  v15 = a3 >> 62;
  if (a3 >> 62)
  {
    if ((a3 & 0x8000000000000000) != 0)
      v57 = a3;
    else
      v57 = a3 & 0xFFFFFFFFFFFFFF8;
    v58 = a1;
    swift_bridgeObjectRetain(a3);
    v16 = _CocoaArrayWrapper.endIndex.getter(v57);
  }
  else
  {
    v16 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v17 = a1;
    swift_bridgeObjectRetain(a3);
  }
  v62 = a3;
  v61 = a1;
  if (v16)
  {
    v59 = a4;
    v60 = a3 >> 62;
    if (v16 < 1)
      __break(1u);
    v18 = 0;
    v19 = 0;
    v20 = a3 & 0xC000000000000001;
    v21 = &off_100126000;
    osloga = (os_log_t)v16;
    do
    {
      if (v20)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, a3);
      else
        v22 = *(id *)(a3 + 8 * v19 + 32);
      v23 = v22;
      v68[0] = 0;
      v24 = objc_msgSend(v14, v21[399], v22, v68);
      v25 = v68[0];
      if (v24)
      {
        v26 = v68[0];

        if (__OFADD__(v18++, 1))
        {
          __break(1u);
          goto LABEL_45;
        }
      }
      else
      {
        v28 = v14;
        v29 = v68[0];
        v30 = _convertNSErrorToError(_:)(v25);

        swift_willThrow(v31);
        if (qword_100127C38 != -1)
          swift_once(&qword_100127C38, sub_100020FE0);
        v32 = type metadata accessor for Logger(0);
        sub_100012A40(v32, (uint64_t)qword_10012C9A0);
        swift_errorRetain(v30);
        v33 = v23;
        v34 = swift_errorRetain(v30);
        v35 = Logger.logObject.getter(v34);
        v36 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = swift_slowAlloc(22, -1);
          v38 = (NSObject **)swift_slowAlloc(16, -1);
          *(_DWORD *)v37 = 138412546;
          *(_QWORD *)(v37 + 4) = v33;
          *v38 = v33;
          *(_WORD *)(v37 + 12) = 2112;
          swift_errorRetain(v30);
          v39 = _swift_stdlib_bridgeErrorToNSError(v30);
          *(_QWORD *)(v37 + 14) = v39;
          v38[1] = v39;
          swift_errorRelease(v30);
          swift_errorRelease(v30);
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "Cannot register %@ with SiriVocabulary. Error: %@", (uint8_t *)v37, 0x16u);
          sub_10001BE7C(&qword_100128160);
          swift_arrayDestroy(v38, 2);
          swift_slowDealloc(v38, -1, -1);
          v40 = v37;
          a3 = v62;
          swift_slowDealloc(v40, -1, -1);

        }
        else
        {
          swift_errorRelease(v30);

          swift_errorRelease(v30);
          v33 = v35;
        }
        v21 = &off_100126000;
        swift_errorRelease(v30);

        v14 = v28;
        v16 = (uint64_t)osloga;
      }
      ++v19;
    }
    while (v16 != v19);
    swift_bridgeObjectRelease(a3);
    a4 = v59;
    v15 = v60;
  }
  else
  {
    swift_bridgeObjectRelease(a3);
    v18 = 0;
  }
  objc_msgSend(v14, "finish:", 0);
  if (qword_100127C38 != -1)
    swift_once(&qword_100127C38, sub_100020FE0);
  v43 = type metadata accessor for Logger(0);
  sub_100012A40(v43, (uint64_t)qword_10012C9A0);
  sub_1000132C4(a4, (uint64_t)v68);
  v44 = swift_bridgeObjectRetain_n(a3, 2);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = swift_slowAlloc(32, -1);
    v48 = swift_slowAlloc(32, -1);
    v67 = v48;
    *(_DWORD *)v47 = 134218498;
    v65 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
    *(_WORD *)(v47 + 12) = 2048;
    if (v15)
    {
      v49 = v62;
      if (v62 < 0)
        v51 = v62;
      else
        v51 = v62 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v62);
      v50 = _CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease(v62);
    }
    else
    {
      v49 = v62;
      v50 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v49);
    v65 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
    swift_bridgeObjectRelease(v49);
    *(_WORD *)(v47 + 22) = 2080;
    v53 = v69;
    v52 = v70;
    sub_10000E858(v68, v69);
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v52 + 8) + 8))(v53);
    v56 = v55;
    v65 = sub_10000FBEC(v54, v55, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
    swift_bridgeObjectRelease(v56);
    sub_10000E87C(v68);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Completed SiriVocabulary %ld of %ld span donations for %s.", (uint8_t *)v47, 0x20u);
    swift_arrayDestroy(v48, 1);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(a3, 2);
    sub_10000E87C(v68);

  }
}

void sub_100023EF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int16 a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD aBlock[6];
  __int128 v18[2];

  sub_1000132C4(a3, (uint64_t)v18);
  sub_1000165C8();
  v15 = swift_allocObject(v12, v13, v14);
  *(_QWORD *)(v15 + 16) = a2;
  sub_100019A48(v18, v15 + 24);
  aBlock[4] = a5;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000218DC;
  aBlock[3] = a6;
  v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_release();
  objc_msgSend(a1, "donateWithOptions:usingStream:", a7, v16);
  _Block_release(v16);
}

void sub_100023FCC(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  id v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  id v15;
  void *v16;
  unsigned int v17;
  id v18;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  unint64_t v57;
  id v58;
  void *v59;
  void *v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66[3];
  uint64_t v67;
  uint64_t v68;

  if (!a2)
  {
    v4 = a1;
    if (a1)
    {
      v7 = objc_opt_self(KVFullDatasetStream);
      v8 = swift_dynamicCastObjCClass(v4, v7);
      if (v8)
      {
        v9 = (void *)v8;
        v57 = (unint64_t)a3 >> 62;
        if ((unint64_t)a3 >> 62)
        {
LABEL_38:
          if (a3 < 0)
            v54 = a3;
          else
            v54 = a3 & 0xFFFFFFFFFFFFFF8;
          v55 = v4;
          swift_bridgeObjectRetain(a3);
          v10 = _CocoaArrayWrapper.endIndex.getter(v54);
        }
        else
        {
          v10 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
          v11 = v4;
          swift_bridgeObjectRetain(a3);
        }
        v58 = v4;
        if (v10)
        {
          v56 = a4;
          if (v10 < 1)
            __break(1u);
          v12 = 0;
          v13 = 0;
          a4 = a3 & 0xC000000000000001;
          v14 = &off_100126000;
          v59 = v9;
          v62 = a3 & 0xC000000000000001;
          do
          {
            if (a4)
              v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a3);
            else
              v15 = *(id *)(a3 + 8 * v13 + 32);
            v16 = v15;
            v66[0] = 0;
            v17 = objc_msgSend(v9, v14[399], v15, v66, v56);
            v4 = v66[0];
            if (v17)
            {
              v18 = v66[0];

              if (__OFADD__(v12++, 1))
              {
                __break(1u);
                goto LABEL_38;
              }
            }
            else
            {
              v20 = v66[0];
              v21 = _convertNSErrorToError(_:)(v4);

              swift_willThrow(v22);
              if (qword_100127C38 != -1)
                swift_once(&qword_100127C38, sub_100020FE0);
              v23 = type metadata accessor for Logger(0);
              sub_100012A40(v23, (uint64_t)qword_10012C9A0);
              swift_errorRetain(v21);
              v24 = v16;
              v25 = swift_errorRetain(v21);
              v26 = Logger.logObject.getter(v25);
              v27 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v26, v27))
              {
                v28 = swift_slowAlloc(22, -1);
                v29 = (_QWORD *)swift_slowAlloc(8, -1);
                v60 = (void *)swift_slowAlloc(32, -1);
                v65 = v21;
                v66[0] = v60;
                *(_DWORD *)v28 = 138412546;
                *(_QWORD *)(v28 + 4) = v24;
                *v29 = v24;
                *(_WORD *)(v28 + 12) = 2080;
                swift_errorRetain(v21);
                v30 = sub_10001BE7C((uint64_t *)&unk_100129420);
                v31 = String.init<A>(describing:)(&v65, v30);
                v61 = v24;
                v32 = v10;
                v33 = v12;
                v34 = a3;
                v36 = v35;
                *(_QWORD *)(v28 + 14) = sub_10000FBEC(v31, v35, (uint64_t *)v66);
                v37 = v36;
                a3 = v34;
                v12 = v33;
                v10 = v32;
                swift_bridgeObjectRelease(v37);
                swift_errorRelease(v21);
                swift_errorRelease(v21);
                _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to register %@ with SiriVocabulary with error: %s.\nContinuing donation.", (uint8_t *)v28, 0x16u);
                sub_10001BE7C(&qword_100128160);
                swift_arrayDestroy(v29, 1);
                v38 = v29;
                v9 = v59;
                swift_slowDealloc(v38, -1, -1);
                swift_arrayDestroy(v60, 1);
                swift_slowDealloc(v60, -1, -1);
                swift_slowDealloc(v28, -1, -1);

                swift_errorRelease(v21);
              }
              else
              {
                swift_errorRelease(v21);

                swift_errorRelease(v21);
                swift_errorRelease(v21);

              }
              a4 = v62;
              v14 = &off_100126000;
            }
            ++v13;
          }
          while (v10 != v13);
          swift_bridgeObjectRelease(a3);
          a4 = v56;
        }
        else
        {
          swift_bridgeObjectRelease(a3);
          v12 = 0;
        }
        if (qword_100127C38 != -1)
          swift_once(&qword_100127C38, sub_100020FE0);
        v39 = type metadata accessor for Logger(0);
        sub_100012A40(v39, (uint64_t)qword_10012C9A0);
        sub_1000132C4(a4, (uint64_t)v66);
        v40 = swift_bridgeObjectRetain_n(a3, 2);
        v41 = Logger.logObject.getter(v40);
        v42 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v41, v42))
        {
          v43 = swift_slowAlloc(32, -1);
          v44 = swift_slowAlloc(32, -1);
          v65 = v44;
          *(_DWORD *)v43 = 134218498;
          v63 = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
          *(_WORD *)(v43 + 12) = 2048;
          if (v57)
          {
            v45 = v9;
            if (a3 < 0)
              v48 = a3;
            else
              v48 = a3 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(a3);
            v46 = _CocoaArrayWrapper.endIndex.getter(v48);
            swift_bridgeObjectRelease(a3);
          }
          else
          {
            v45 = v9;
            v46 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          v47 = v58;
          swift_bridgeObjectRelease(a3);
          v63 = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
          swift_bridgeObjectRelease(a3);
          *(_WORD *)(v43 + 22) = 2080;
          v50 = v67;
          v49 = v68;
          sub_10000E858(v66, v67);
          v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v49 + 8) + 8))(v50);
          v53 = v52;
          v63 = sub_10000FBEC(v51, v52, &v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
          swift_bridgeObjectRelease(v53);
          sub_10000E87C(v66);
          swift_arrayDestroy(v44, 1);
          swift_slowDealloc(v44, -1, -1);
          swift_slowDealloc(v43, -1, -1);

          v9 = v45;
        }
        else
        {
          swift_bridgeObjectRelease_n(a3, 2);
          sub_10000E87C(v66);

          v47 = v58;
        }
        objc_msgSend(v9, "finish:", 0);

      }
    }
  }
}

_QWORD *sub_1000245E0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  Swift::Int v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;

  v4 = a4;
  if (a4 >> 62)
    goto LABEL_49;
  v5 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a4);
  while (1)
  {
    v6 = &_swiftEmptyDictionarySingleton;
    if (v5)
    {
      v58 = v4;
      v59 = v4 & 0xC000000000000001;
      v7 = 4;
      v56 = v5;
      do
      {
        if (v59)
          v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v4);
        else
          v8 = *(id *)(v4 + 8 * v7);
        if (__OFADD__(v7 - 4, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        v61 = v7 - 3;
        v9 = v8;
        v10 = objc_msgSend(v8, "identifier");
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v13 = v12;

        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
        v66 = v6;
        v15 = sub_100016064(v11);
        v17 = v6[2];
        v18 = (v16 & 1) == 0;
        v19 = v17 + v18;
        if (__OFADD__(v17, v18))
          goto LABEL_45;
        v20 = v15;
        v4 = v16;
        sub_10001BE7C(&qword_1001281B0);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v19))
        {
          v21 = sub_100016064(v11);
          if ((v4 & 1) != (v22 & 1))
          {
LABEL_60:
            result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }
          v20 = v21;
        }
        v6 = v66;
        if ((v4 & 1) != 0)
        {
          v23 = v66[7];
          v24 = *(void **)(v23 + 8 * v20);
          *(_QWORD *)(v23 + 8 * v20) = v9;

        }
        else
        {
          v66[(v20 >> 6) + 8] |= 1 << v20;
          v25 = (uint64_t *)(v6[6] + 16 * v20);
          *v25 = v11;
          v25[1] = v13;
          *(_QWORD *)(v6[7] + 8 * v20) = v9;
          v26 = v6[2];
          v27 = __OFADD__(v26, 1);
          v28 = v26 + 1;
          if (v27)
            goto LABEL_47;
          v6[2] = v28;
          swift_bridgeObjectRetain(v13);
        }
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(0x8000000000000000);
        ++v7;
        v4 = v58;
      }
      while (v61 != v56);
    }
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRetain(a3);
    v30 = (uint64_t)sub_1000223B8(v29, (uint64_t)v6);
    v31 = v30;
    v32 = v55;
    v66 = _swiftEmptyArrayStorage;
    if ((unint64_t)v30 >> 62)
      break;
    v33 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v30);
    if (!v33)
      goto LABEL_57;
LABEL_20:
    v34 = 0;
    v55 = v31;
    v57 = v31 & 0xC000000000000001;
    v53 = v31 + 32;
    a3 = v33;
    while (1)
    {
      v35 = v57 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v31) : *(id *)(v53 + 8 * v34);
      v36 = v35;
      v27 = __OFADD__(v34++, 1);
      if (v27)
        break;
      v37 = objc_msgSend(v35, "actionIdentifier");
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v62 = v39;

      v40 = objc_msgSend(v36, "orderedPhrases");
      sub_10000795C(0, (unint64_t *)&qword_1001281B8, LNAutoShortcutLocalizedPhrase_ptr);
      v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v40);

      if ((unint64_t)v41 >> 62)
      {
        if (v41 < 0)
          v49 = v41;
        else
          v49 = v41 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v41);
        v4 = _CocoaArrayWrapper.endIndex.getter(v49);
        swift_bridgeObjectRelease(v41);
        if (v4)
        {
LABEL_27:
          v65 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v4);
          if (v4 < 0)
            goto LABEL_48;
          v60 = v34;
          v42 = 0;
          while (1)
          {
            if (v4 == v42)
            {
              __break(1u);
              goto LABEL_44;
            }
            v43 = (v41 & 0xC000000000000001) != 0
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v41)
                : *(id *)(v41 + 8 * v42 + 32);
            v44 = v43;
            v63 = v43;
            sub_100024B3C(&v63, v38, v62, &v64);
            if (v32)
              break;
            v32 = 0;
            ++v42;

            v45 = v64;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v46);
            v47 = v65[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v47);
            v48 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v45);
            specialized ContiguousArray._endMutation()(v48);
            if (v4 == v42)
            {
              v4 = (uint64_t)v65;

              swift_bridgeObjectRelease(v62);
              swift_bridgeObjectRelease(v41);
              v33 = a3;
              v31 = v55;
              v34 = v60;
              goto LABEL_41;
            }
          }

          swift_release();
          __break(1u);
          goto LABEL_60;
        }
      }
      else
      {
        v4 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v4)
          goto LABEL_27;
      }

      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v41);
      v4 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_41:
      sub_100058E70();
      if (v34 == v33)
      {
        swift_bridgeObjectRelease_n(v31, 2);
        return v66;
      }
    }
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    if (v4 < 0)
      v51 = v4;
    else
      v51 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v51);
  }
  if (v30 < 0)
    v52 = v30;
  else
    v52 = v30 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v30);
  v33 = _CocoaArrayWrapper.endIndex.getter(v52);
  if (v33)
    goto LABEL_20;
LABEL_57:
  swift_bridgeObjectRelease_n(v31, 2);
  return _swiftEmptyArrayStorage;
}

id sub_100024AC8(uint64_t a1)
{
  uint64_t v1;
  id v3;
  Class isa;
  id v5;

  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v5 = objc_msgSend(v3, "initWithArray:", isa);

  return v5;
}

id sub_100024B3C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id result;
  uint64_t v47;
  uint64_t v48;

  v8 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v47 - v12;
  v14 = *a1;
  v15 = objc_msgSend(v14, "parameterIdentifier");
  if (v15)
  {
    v16 = v15;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v17 = type metadata accessor for UUID(0);
    v18 = (uint64_t)v11;
    v19 = 0;
  }
  else
  {
    v17 = type metadata accessor for UUID(0);
    v18 = (uint64_t)v11;
    v19 = 1;
  }
  sub_100014360(v18, v19, 1, v17);
  sub_1000268D4((uint64_t)v11, (uint64_t)v13);
  type metadata accessor for UUID(0);
  v20 = sub_10001C93C((uint64_t)v13, 1, v17);
  if ((_DWORD)v20 == 1)
  {
    sub_10002691C((uint64_t)v13);
    v47 = a2;
    v48 = a3;
    swift_bridgeObjectRetain(a3);
    v21._countAndFlagsBits = 8995;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    v22 = objc_msgSend(v14, "basePhraseTemplate");
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    v26._countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    v27 = v25;
  }
  else
  {
    v28 = UUID.uuidString.getter(v20);
    v30 = v29;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v13, v17);
    v47 = a2;
    v48 = a3;
    swift_bridgeObjectRetain(a3);
    v31._countAndFlagsBits = 8995;
    v31._object = (void *)0xE200000000000000;
    String.append(_:)(v31);
    v32 = objc_msgSend(v14, "basePhraseTemplate");
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    v36._countAndFlagsBits = v33;
    v36._object = v35;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(v35);
    v37._countAndFlagsBits = 8995;
    v37._object = (void *)0xE200000000000000;
    String.append(_:)(v37);
    v38._countAndFlagsBits = v28;
    v38._object = v30;
    String.append(_:)(v38);
    v27 = v30;
  }
  swift_bridgeObjectRelease(v27);
  v39 = v47;
  v40 = v48;
  v41 = objc_msgSend(v14, "localizedPhrase");
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v44 = v43;

  v45 = objc_allocWithZone((Class)INSpeakableString);
  result = sub_100025398(v39, v40, v42, v44, 0, 0);
  *a4 = result;
  return result;
}

BOOL static PrimaryKey.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_100024DF4(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
  sub_10000BFBC();
}

Swift::Int PrimaryKey.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL sub_100024E58(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PrimaryKey.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100024E64()
{
  char *v0;

  return PrimaryKey.hashValue.getter(*v0);
}

void sub_100024E6C(uint64_t a1)
{
  char *v1;

  sub_100024DF4(a1, *v1);
}

Swift::Int sub_100024E74(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

id sub_100024EC4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, NSString a5)
{
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  id v11;
  id v12;
  id v13;
  NSString v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  NSString v52;
  id v53;
  uint64_t v54;

  dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v9 = v8;
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v53 = 0;
  v11 = objc_msgSend(a3, "setItemType:itemId:error:", 18, v10, &v53);

  v12 = v53;
  if (!v11)
  {
    v15 = v53;
    v16 = v12;
LABEL_20:
    _convertNSErrorToError(_:)(v16);

LABEL_21:
    swift_willThrow(v47);
    return v12;
  }
  v13 = v53;

  if (a5)
    v14 = String._bridgeToObjectiveC()();
  else
    v14 = 0;
  v17 = objc_msgSend(*(id *)(a2 + 32), "localizedStringForLocaleIdentifier:", v14);

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v53 = 0;
  v12 = sub_1000266F4(801, v18, v20, (uint64_t)&v53, a3);
  v16 = v53;
  if (!v12)
  {
LABEL_19:
    v15 = v16;
    goto LABEL_20;
  }

  v21 = *(_QWORD *)(a2 + 96);
  v54 = v21;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
  {
LABEL_14:
    v36 = *(_QWORD *)(a2 + 56);
    v37 = *(_QWORD *)(a2 + 64);
    v53 = 0;
    v12 = sub_100026774(803, v36, v37, (uint64_t)&v53, a3);
    v16 = v53;
    if (v12)
    {

      v38 = *(_QWORD *)a2;
      v39 = *(_QWORD *)(a2 + 8);
      v53 = 0;
      v40 = sub_100026774(800, v38, v39, (uint64_t)&v53, a3);
      v41 = v53;
      if (!v40)
      {
        v12 = v41;
LABEL_26:
        _convertNSErrorToError(_:)(v41);

        goto LABEL_21;
      }

      v42 = *(_QWORD *)(a2 + 72);
      v43 = *(_QWORD *)(a2 + 80);
      v53 = 0;
      v12 = sub_100026774(802, v42, v43, (uint64_t)&v53, a3);
      v16 = v53;
      if (v12)
      {

        v53 = 0;
        v44 = objc_msgSend(a3, "buildItemWithError:", &v53);
        v45 = v53;
        if (v44)
        {
          v12 = v44;
          v46 = v53;
          return v12;
        }
        v12 = v53;
        v41 = v45;
        goto LABEL_26;
      }
    }
    goto LABEL_19;
  }
  v51 = a2;
  swift_bridgeObjectRetain(v21);
  v24 = (void **)(v23 + 64);
  v25 = a3;
  v52 = a5;
  while (1)
  {
    v12 = *(v24 - 3);
    v27 = (uint64_t)*(v24 - 1);
    v26 = *v24;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v27);
    v28 = v26;
    if (a5)
      a5 = String._bridgeToObjectiveC()();
    v29 = objc_msgSend(v28, "localizedStringForLocaleIdentifier:", a5);

    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v53 = 0;
    v33 = v32;
    a3 = v25;
    v34 = sub_1000266F4(804, v30, v33, (uint64_t)&v53, v25);
    v35 = v53;
    if (!v34)
      break;

    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v12);

    v24 += 5;
    --v22;
    a5 = v52;
    if (!v22)
    {
      sub_10001E05C(&v54);
      a2 = v51;
      goto LABEL_14;
    }
  }
  v49 = v35;
  sub_10001E05C(&v54);
  _convertNSErrorToError(_:)(v49);

  swift_willThrow(v50);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v12);
  return v12;
}

uint64_t sub_100025274(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD *))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD __dst[13];
  _QWORD *v15;

  v15 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(0);
  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v5)
  {
    v6 = 0;
    v7 = 32;
    while (1)
    {
      memcpy(__dst, (const void *)(a1 + v7), sizeof(__dst));
      sub_10000F49C(__dst);
      v8 = a2(v6, __dst);
      if (v2)
        break;
      v9 = v8;
      ++v6;
      v10 = sub_10000F418(__dst);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v11 = v15[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized ContiguousArray._endMutation()(v12);
      v7 += 104;
      if (v5 == v6)
        goto LABEL_5;
    }
    sub_10000F418(__dst);
    swift_bridgeObjectRelease(a1);
    return swift_release();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v15;
  }
}

id sub_100025398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  NSString v10;
  NSString v11;
  NSString v12;
  id v13;

  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(v6, "initWithVocabularyIdentifier:spokenPhrase:pronunciationHint:", v10, v11, v12);

  return v13;
}

uint64_t sub_100025458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_100013DF4(a1, a2);
  sub_100019AB0(v3, v4);
  return sub_1000179D0(v2);
}

uint64_t sub_100025478(uint64_t a1)
{
  _QWORD *v1;

  return sub_100035584(a1, *v1);
}

void sub_100025480(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  sub_1000059A8();
  sub_10000BFBC();
}

void sub_1000254B0(uint64_t a1, id *a2)
{
  sub_100027368(a1, a2);
}

uint64_t sub_1000254C4(uint64_t a1, id *a2)
{
  return sub_1000272F8(a1, a2) & 1;
}

uint64_t sub_1000254DC(_QWORD *a1, _QWORD *a2)
{
  return sub_10003546C(*a1, *a2);
}

void sub_1000254E8()
{
  uint64_t *v0;

  sub_100025480(*v0, (void (*)(uint64_t))&String._bridgeToObjectiveC());
}

void sub_100025508(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_1000273D0(a1);
  *a2 = v3;
}

uint64_t sub_10002552C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = sub_10002555C(*a1);
  *(_WORD *)a2 = result;
  *(_BYTE *)(a2 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t sub_10002555C(uint64_t result)
{
  return (unsigned __int16)result;
}

void sub_10002556C(uint64_t a1@<X1>, _WORD *a2@<X8>)
{
  unsigned __int16 *v2;

  *a2 = Int64.datatypeValue.getter(*v2, a1);
  sub_10000BFBC();
}

uint64_t sub_100025590(uint64_t a1)
{
  _QWORD *v1;

  return sub_100070F18(a1, *v1);
}

void sub_100025598()
{
  uint64_t *v0;

  sub_100025480(*v0, (void (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000255B8(uint64_t a1)
{
  uint64_t *v1;

  return sub_100025458(a1, *v1);
}

Swift::Int sub_1000255D0(uint64_t a1)
{
  uint64_t *v1;

  return sub_100026864(a1, *v1);
}

uint64_t sub_1000255DC@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100025604(_QWORD *a1, _QWORD *a2)
{
  return sub_100081528(*a1, *a2);
}

uint64_t sub_100025610(uint64_t *a1, uint64_t *a2)
{
  return sub_1000267E0(*a1, *a2);
}

uint64_t sub_10002561C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100025AFC((unint64_t *)&unk_1001281D0, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&unk_1000EF8D8);
  v3 = v2;
  sub_100025AFC((unint64_t *)&unk_100128470, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&unk_1000EEE9C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_1000256A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100025AFC(&qword_100128408, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemEntityProtocolIdentifier, (uint64_t)&unk_1000EF744);
  v3 = v2;
  sub_100025AFC(&qword_100128410, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemEntityProtocolIdentifier, (uint64_t)&unk_1000EF65C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100025728(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100025AFC(&qword_100128418, (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName, (uint64_t)&unk_1000EF788);
  v3 = v2;
  sub_100025AFC(&qword_100128420, (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName, (uint64_t)&unk_1000EF548);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_1000257AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100025AFC((unint64_t *)&qword_100128448, (uint64_t (*)(uint64_t))type metadata accessor for LNValueTypeSpecificMetadataKey, (uint64_t)&unk_1000EF854);
  v3 = v2;
  sub_100025AFC((unint64_t *)&unk_100128450, (uint64_t (*)(uint64_t))type metadata accessor for LNValueTypeSpecificMetadataKey, (uint64_t)&unk_1000EF1FC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100025830(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100025AFC(&qword_100128428, (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey, (uint64_t)&unk_1000EF810);
  v3 = v2;
  sub_100025AFC(&qword_100128430, (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey, (uint64_t)&unk_1000EF434);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_1000258B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_100016374();
  *v0 = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  v0[1] = v2;
  sub_10000BFBC();
}

uint64_t sub_1000258D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100025AFC(&qword_100128438, (uint64_t (*)(uint64_t))type metadata accessor for LNSuggestedActionDialogParameterKey, (uint64_t)&unk_1000EF7CC);
  v3 = v2;
  sub_100025AFC(&qword_100128440, (uint64_t (*)(uint64_t))type metadata accessor for LNSuggestedActionDialogParameterKey, (uint64_t)&unk_1000EF320);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100025958@<X0>(_QWORD *a1@<X8>)
{
  NSString v2;
  uint64_t result;

  v2 = String._bridgeToObjectiveC()();
  result = sub_1000059A8();
  *a1 = v2;
  return result;
}

uint64_t sub_100025998(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100025AFC(&qword_100128460, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1000EF104);
  v3 = v2;
  sub_100025AFC(&qword_100128468, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1000EF0A4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100025A1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  sub_1000165C8();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100025A5C()
{
  uint64_t v0;

  sub_1000214A4(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_100025A6C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100025AB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

id sub_100025AEC(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000215A0(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

void sub_100025AFC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_10000BFBC();
}

void sub_100025B38(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100025A6C(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }
  sub_10000BFBC();
}

void sub_100025B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  sub_100016064(a2);
  sub_10001AB98();
  if (v9)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v10 = v7;
  v11 = v8;
  sub_10001BE7C(&qword_1001281B0);
  if (sub_10001B258())
  {
    sub_100016064(a2);
    sub_100027434();
    if (!v13)
      goto LABEL_10;
    v10 = v12;
  }
  v14 = *v3;
  if ((v11 & 1) != 0)
  {
    v15 = *(_QWORD *)(v14 + 56);
    v16 = *(void **)(v15 + 8 * v10);
    *(_QWORD *)(v15 + 8 * v10) = a1;

  }
  else
  {
    sub_1000266D8(v10, a2, a3, a1, v14);
    sub_10001C758(a3);
  }
}

void sub_100025C50()
{
  _QWORD **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  sub_1000100A8();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  sub_1000101B8(v9, v7);
  sub_1000315C4();
  sub_10001AB98();
  if (v13)
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v11;
  v15 = v12;
  sub_10001BE7C(&qword_1001282B0);
  v16 = sub_10001CD0C();
  if ((v16 & 1) == 0)
    goto LABEL_5;
  v16 = sub_1000315C4();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AppShortcutInterpolator.Builder.RecordIdentifier);
    __break(1u);
    return;
  }
  v14 = v16;
LABEL_5:
  v22 = *v0;
  if ((v15 & 1) != 0)
  {
    sub_100027444(v16, v17, v18, v19, v20, v21, (uint64_t)v22);
    *(_QWORD *)(v2 + 8 * v14) = v10;
    sub_100013308();
  }
  else
  {
    sub_100026468(v14, v8, v6, v4, v2, v10, v22);
    swift_bridgeObjectRetain(v6);
    sub_100017630(v2);
  }
}

void sub_100025D34()
{
  sub_100025D4C();
}

void sub_100025D40()
{
  sub_100025D4C();
}

void sub_100025D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1000100A8();
  sub_10001ADB8(v5, v6);
  sub_10001AB98();
  if (v7)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  sub_10001E878();
  if (sub_10001B258())
  {
    sub_100019AA0();
    sub_10000BFC4();
    if (!v9)
      goto LABEL_10;
    v3 = v8;
  }
  if ((v4 & 1) != 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)v2 + 56);
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8 * v3));
    *(_QWORD *)(v10 + 8 * v3) = v0;
    sub_100013308();
  }
  else
  {
    sub_1000158A0();
    sub_1000266D8(v11, v12, v13, v14, v15);
    sub_100017630(v1);
  }
}

uint64_t sub_100025DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10002626C(a1, a2, a3, a4, a5, a6, &qword_1001282A0);
}

void sub_100025DE4()
{
  Swift::Int *v0;
  Swift::Int *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;

  sub_1000100A8();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = *v0;
  sub_100016064(v6);
  sub_10001AB98();
  if (v15)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
    __break(1u);
    return;
  }
  v16 = v13;
  v17 = v14;
  sub_10001BE7C(&qword_100128220);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v12))
  {
    sub_100016064(v7);
    sub_10000BFC4();
    if (!v19)
      goto LABEL_10;
    v16 = v18;
  }
  v20 = (_QWORD *)*v1;
  if ((v17 & 1) != 0)
  {
    v21 = (uint64_t *)(v20[7] + 16 * v16);
    swift_bridgeObjectRelease();
    *v21 = v11;
    v21[1] = v9;
    sub_100013308();
  }
  else
  {
    sub_1000264B4(v16, v7, v5, v11, v9, v20);
    sub_100017630(v5);
  }
}

void sub_100025ECC()
{
  sub_1000263A0();
}

void sub_100025ED8()
{
  Swift::Int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;

  sub_1000100A8();
  v4 = v0;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  type metadata accessor for UUID(0);
  sub_100018EC8();
  __chkstk_darwin(v11);
  sub_10001B738();
  v12 = *v0;
  sub_10003162C(v8);
  sub_10001AB98();
  if (v15)
  {
    __break(1u);
    goto LABEL_10;
  }
  v16 = v13;
  v17 = v14;
  sub_10001BE7C(&qword_100128290);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v6 & 1, v12))
  {
    v18 = sub_10003162C(v8);
    if ((v17 & 1) == (v19 & 1))
    {
      v16 = v18;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v1);
    __break(1u);
    return;
  }
LABEL_5:
  v20 = (_QWORD *)*v4;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];

    *(_QWORD *)(v21 + 8 * v16) = v10;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v8, v1);
    sub_100026500(v16, v2, v10, v20);
  }
  sub_100013308();
}

_OWORD *sub_100025FD8(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _OWORD *result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _QWORD *v18;

  sub_10001ADB8(a1, a2);
  sub_10001AB98();
  if (v7)
  {
    __break(1u);
LABEL_10:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v8 = v5;
  v9 = v6;
  sub_10001BE7C((uint64_t *)&unk_100129470);
  if (sub_10001B258())
  {
    sub_100019AA0();
    sub_100027434();
    if (!v11)
      goto LABEL_10;
    v8 = v10;
  }
  if ((v9 & 1) != 0)
  {
    v12 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 56) + 32 * v8);
    sub_10000E87C(v12);
    return sub_1000273C0(v2, v12);
  }
  else
  {
    sub_1000158A0();
    sub_100026598(v14, v15, v16, v17, v18);
    return (_OWORD *)sub_10001C758(v3);
  }
}

void sub_10002608C()
{
  sub_100025D4C();
}

uint64_t sub_100026098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  sub_10001ADB8(a1, a2);
  sub_10001AB98();
  if (v7)
  {
    __break(1u);
LABEL_10:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v8 = v5;
  v9 = v6;
  sub_10001BE7C(&qword_100128200);
  if (sub_10001B258())
  {
    sub_100019AA0();
    sub_10000BFC4();
    if (!v11)
      goto LABEL_10;
    v8 = v10;
  }
  if ((v9 & 1) != 0)
  {
    v12 = *(_QWORD *)(*(_QWORD *)v4 + 56);
    v13 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v8, v2, v13);
  }
  else
  {
    sub_1000158A0();
    sub_100026600(v15, v16, v17, v18, v19);
    return sub_10001C758(v3);
  }
}

id sub_100026158(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  Swift::Int *v4;
  Swift::Int *v5;
  Swift::Int v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t *v18;
  id result;
  uint64_t v20;

  v5 = v4;
  v9 = *v4;
  sub_100031698((uint64_t)a3);
  sub_10001AB98();
  if (v12)
  {
    __break(1u);
LABEL_10:
    type metadata accessor for LNSuggestedActionDialogParameterKey(0);
    result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
    __break(1u);
    return result;
  }
  v13 = v10;
  v14 = v11;
  sub_10001BE7C(&qword_100128218);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v9))
  {
    sub_100031698((uint64_t)a3);
    sub_100027434();
    if (!v16)
      goto LABEL_10;
    v13 = v15;
  }
  v17 = (_QWORD *)*v5;
  if ((v14 & 1) != 0)
  {
    v18 = (uint64_t *)(v17[7] + 16 * v13);
    result = (id)swift_bridgeObjectRelease(v18[1]);
    *v18 = a1;
    v18[1] = a2;
  }
  else
  {
    sub_100026690(v13, (uint64_t)a3, a1, a2, v17);
    return a3;
  }
  return result;
}

uint64_t sub_100026260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10002626C(a1, a2, a3, a4, a5, a6, &qword_100128228);
}

uint64_t sub_10002626C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  _QWORD **v7;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t result;

  sub_1000101B8(a1, a2);
  sub_10003155C();
  sub_10001AB98();
  if (v15)
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v13;
  v17 = v14;
  sub_10001BE7C(a7);
  v18 = sub_10001CD0C();
  if ((v18 & 1) == 0)
    goto LABEL_5;
  v18 = sub_10003155C();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Substring);
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v24 = *v7;
  if ((v17 & 1) != 0)
  {
    result = sub_100027444(v18, v19, v20, v21, v22, v23, (uint64_t)v24);
    *(_QWORD *)(a5 + 8 * v16) = a1;
  }
  else
  {
    sub_100026468(v16, a2, a3, a4, a5, a1, v24);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

void sub_100026388()
{
  sub_100025D4C();
}

void sub_100026394()
{
  sub_1000263A0();
}

void sub_1000263A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1000100A8();
  sub_10001ADB8(v5, v6);
  sub_10001AB98();
  if (v7)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  sub_10001E878();
  if (sub_10001B258())
  {
    sub_100019AA0();
    sub_10000BFC4();
    if (!v9)
      goto LABEL_10;
    v3 = v8;
  }
  if ((v4 & 1) != 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)v2 + 56);

    *(_QWORD *)(v10 + 8 * v3) = v0;
    sub_100013308();
  }
  else
  {
    sub_1000158A0();
    sub_1000266D8(v11, v12, v13, v14, v15);
    sub_100017630(v1);
  }
}

void sub_10002642C()
{
  sub_100025D4C();
}

void sub_100026438()
{
  sub_1000263A0();
}

void sub_100026444()
{
  sub_100025D4C();
}

void sub_100026450()
{
  sub_1000263A0();
}

void sub_10002645C()
{
  sub_100025D4C();
}

unint64_t sub_100026468(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 32 * result);
  *v7 = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  *(_QWORD *)(a7[7] + 8 * result) = a6;
  v8 = a7[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a7[2] = v10;
  return result;
}

unint64_t sub_1000264B4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

uint64_t sub_100026500(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_100026598(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1000273C0(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_100026600(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

unint64_t sub_100026690(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_1000266D8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;

  result = sub_100017BD4(a1, a2, a3, a4, a5);
  if (v8)
    __break(1u);
  else
    *(_QWORD *)(v6 + 16) = v7;
  return result;
}

id sub_1000266F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v9;
  id v10;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v10 = objc_msgSend(a5, "addFieldWithType:value:error:", a1, v9, a4);

  return v10;
}

id sub_100026774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8;
  id v9;

  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(a5, "addFieldWithType:value:error:", a1, v8, a4);

  return v9;
}

uint64_t sub_1000267E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100026864(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_1000268D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002691C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for LNSystemProtocolIdentifier(uint64_t a1)
{
  sub_100026ED4(a1, &qword_100128338, (uint64_t)&unk_10011AA28);
}

id sub_100026970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100024EC4(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(NSString *)(v2 + 32));
}

void sub_100026990()
{
  uint64_t v0;

  sub_100023EF0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + 32, (uint64_t)&unk_10011A6C8, (uint64_t)sub_1000269CC, (uint64_t)&unk_10011A6E0, 0);
}

void sub_1000269CC(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000237FC(a1, a2, *(_QWORD *)(v2 + 16), v2 + 24);
}

uint64_t *sub_1000269D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100026A1C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  sub_10000E87C((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

void sub_100026A50()
{
  uint64_t v0;

  sub_100023EF0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + 32, (uint64_t)&unk_10011A768, (uint64_t)sub_100026AB4, (uint64_t)&unk_10011A780, 2u);
}

uint64_t sub_100026A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10000E87C((_QWORD *)(v0 + 24));
  sub_1000165C8();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100026AB4(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100023FCC(a1, a2, *(_QWORD *)(v2 + 16), v2 + 24);
}

void type metadata accessor for LNSuggestedActionDialogParameterKey(uint64_t a1)
{
  sub_100026ED4(a1, &qword_100128318, (uint64_t)&unk_10011A878);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_100026ED4(a1, &qword_1001282F0, (uint64_t)&unk_10011A7B8);
}

void type metadata accessor for LNTranscriptActionSource(uint64_t a1)
{
  sub_100026ED4(a1, &qword_1001282F8, (uint64_t)&unk_10011A7E0);
}

void type metadata accessor for LNSystemEntityProtocolIdentifier(uint64_t a1)
{
  sub_100026ED4(a1, &qword_100128300, (uint64_t)&unk_10011A800);
}

void type metadata accessor for LNPlatformName(uint64_t a1)
{
  sub_100026ED4(a1, &qword_100128308, (uint64_t)&unk_10011A828);
}

void type metadata accessor for LNActionTypeSpecificMetadataKey(uint64_t a1)
{
  sub_100026ED4(a1, &qword_100128310, (uint64_t)&unk_10011A850);
}

void type metadata accessor for LNValueTypeSpecificMetadataKey(uint64_t a1)
{
  sub_100026ED4(a1, &qword_100128320, (uint64_t)&unk_10011A8A0);
}

void type metadata accessor for LogicalType(uint64_t a1)
{
  sub_100026ED4(a1, &qword_100128328, (uint64_t)&unk_10011A8C8);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_100026ED4(a1, &qword_100128330, (uint64_t)&unk_10011A8E8);
}

uint64_t getEnumTagSinglePayload for DonationError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DonationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100026C48 + 4 * byte_1000EEBC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100026C7C + 4 * byte_1000EEBC0[v4]))();
}

uint64_t sub_100026C7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100026C84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100026C8CLL);
  return result;
}

uint64_t sub_100026C98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100026CA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100026CA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100026CAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100026CB8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DonationError()
{
  return &type metadata for DonationError;
}

uint64_t destroy for AppShortcutDonator(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s10LinkDaemon18AppShortcutDonatorVwCP_0(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  v4 = v3;
  sub_1000101B0();
  return a1;
}

uint64_t *assignWithCopy for AppShortcutDonator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = (uint64_t)v6;
  v8 = v6;

  v9 = a2[2];
  v10 = a1[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

_QWORD *assignWithTake for AppShortcutDonator(_QWORD *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = (void *)a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutDonator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutDonator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutDonator()
{
  return &type metadata for AppShortcutDonator;
}

void type metadata accessor for Result(uint64_t a1)
{
  sub_100026ED4(a1, &qword_100128340, (uint64_t)&unk_10011AA50);
}

void type metadata accessor for LNBundleMetadataVersion(uint64_t a1)
{
  sub_100026ED4(a1, &qword_100128348, (uint64_t)&unk_10011AA70);
}

void type metadata accessor for LNShortcutTileColor(uint64_t a1)
{
  sub_100026ED4(a1, &qword_100128350, (uint64_t)&unk_10011AA90);
}

void sub_100026ED4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void sub_100026F18()
{
  sub_100025AFC(&qword_100128358, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&unk_1000EEE60);
}

void sub_100026F44()
{
  sub_100025AFC(&qword_100128360, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&unk_1000EEE34);
}

unint64_t sub_100026F78()
{
  unint64_t result;

  result = qword_100128368;
  if (!qword_100128368)
  {
    result = swift_getWitnessTable(&unk_1000EF008, &type metadata for DonationError);
    atomic_store(result, (unint64_t *)&qword_100128368);
  }
  return result;
}

void sub_100026FB4()
{
  sub_100025AFC(&qword_100128370, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1000EF068);
}

void sub_100026FE0()
{
  sub_100025AFC(&qword_100128378, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1000EF03C);
}

void sub_10002700C()
{
  sub_100025AFC(&qword_100128380, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1000EF0D8);
}

void sub_100027038()
{
  sub_100025AFC(&qword_100128388, (uint64_t (*)(uint64_t))type metadata accessor for LNValueTypeSpecificMetadataKey, (uint64_t)&unk_1000EF1C0);
}

void sub_100027064()
{
  sub_100025AFC(&qword_100128390, (uint64_t (*)(uint64_t))type metadata accessor for LNValueTypeSpecificMetadataKey, (uint64_t)&unk_1000EF194);
}

void sub_100027090()
{
  sub_100025AFC(&qword_100128398, (uint64_t (*)(uint64_t))type metadata accessor for LNSuggestedActionDialogParameterKey, (uint64_t)&unk_1000EF2E4);
}

void sub_1000270BC()
{
  sub_100025AFC(&qword_1001283A0, (uint64_t (*)(uint64_t))type metadata accessor for LNSuggestedActionDialogParameterKey, (uint64_t)&unk_1000EF2B8);
}

void sub_1000270E8()
{
  sub_100025AFC(&qword_1001283A8, (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey, (uint64_t)&unk_1000EF3F8);
}

void sub_100027114()
{
  sub_100025AFC(&qword_1001283B0, (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey, (uint64_t)&unk_1000EF3CC);
}

void sub_100027140()
{
  sub_100025AFC(&qword_1001283B8, (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName, (uint64_t)&unk_1000EF50C);
}

void sub_10002716C()
{
  sub_100025AFC(&qword_1001283C0, (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName, (uint64_t)&unk_1000EF4E0);
}

void sub_100027198()
{
  sub_100025AFC(&qword_1001283C8, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemEntityProtocolIdentifier, (uint64_t)&unk_1000EF620);
}

void sub_1000271C4()
{
  sub_100025AFC(&qword_1001283D0, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemEntityProtocolIdentifier, (uint64_t)&unk_1000EF5F4);
}

void sub_1000271F0()
{
  sub_100025AFC(&qword_1001283D8, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemEntityProtocolIdentifier, (uint64_t)&unk_1000EF690);
}

void sub_10002721C()
{
  sub_100025AFC(&qword_1001283E0, (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName, (uint64_t)&unk_1000EF57C);
}

void sub_100027248()
{
  sub_100025AFC(&qword_1001283E8, (uint64_t (*)(uint64_t))type metadata accessor for LNSuggestedActionDialogParameterKey, (uint64_t)&unk_1000EF354);
}

void sub_100027274()
{
  sub_100025AFC(&qword_1001283F0, (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey, (uint64_t)&unk_1000EF468);
}

void sub_1000272A0()
{
  sub_100025AFC(&qword_1001283F8, (uint64_t (*)(uint64_t))type metadata accessor for LNValueTypeSpecificMetadataKey, (uint64_t)&unk_1000EF230);
}

void sub_1000272CC()
{
  sub_100025AFC(&qword_100128400, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&unk_1000EEED0);
}

uint64_t sub_1000272F8(uint64_t a1, id *a2)
{
  _QWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  sub_10001A00C(a1, a2);
  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *v2 = v6;
  return v4 & 1;
}

void sub_100027368(uint64_t a1, id *a2)
{
  _QWORD *v2;
  uint64_t v3;
  NSString v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001A00C(a1, a2);
  v5 = 0;
  v6 = 0;
  static String._forceBridgeFromObjectiveC(_:result:)(v3, &v5);
  if (v6)
  {
    v4 = String._bridgeToObjectiveC()();
    sub_1000059A8();
  }
  else
  {
    v4 = 0;
  }
  *v2 = v4;
  sub_10001858C();
}

_OWORD *sub_1000273C0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_1000273D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v2 = v1;
  String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  sub_10000BFBC();
}

uint64_t sub_100027444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  return swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(a7 + 56) + 8 * v7));
}

uint64_t sub_100027450@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t (*sub_10002745C())(uint64_t a1)
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*result)(uint64_t);
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v1 = v0;
  v2 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v40 - v10;
  v12 = sub_10004B868(v0);
  if (v13)
  {
    v14 = v13;
    v41 = v12;
    v15 = sub_10001ADDC(v12, "type");
    switch((unint64_t)v15)
    {
      case 0uLL:
        v16 = swift_bridgeObjectRelease(v14);
        v17 = sub_10001ADDC(v16, "executionUUID");
        if (v17)
        {
          v18 = v17;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_100017648((uint64_t)v4, (uint64_t)v9);
          sub_1000166C4((uint64_t)v4, 0);
          if (sub_10001C93C((uint64_t)v4, 1, v5) != 1)
          {
            sub_100017648((uint64_t)v11, (uint64_t)v4);
            sub_100017648((uint64_t)v9, (uint64_t)v11);
            v19 = *(unsigned __int8 *)(v6 + 80);
            v20 = (v19 + 16) & ~v19;
            v21 = swift_allocObject(&unk_10011AC88, v20 + v7, v19 | 7);
            sub_100017648(v21 + v20, (uint64_t)v9);
            return (uint64_t (*)(uint64_t))sub_1000285A4;
          }
        }
        else
        {
          sub_1000166C4((uint64_t)v4, 1);
        }
        sub_10001316C((uint64_t)v4, (uint64_t *)&unk_1001281C0);
        break;
      case 1uLL:
        v23 = sub_10001ADDC((uint64_t)v15, "entityIdentifier");
        if (!v23)
          goto LABEL_13;
        v24 = v23;
        v25 = (_QWORD *)sub_1000100C8((uint64_t)&unk_10011AC60, 40);
        v25[2] = v41;
        v25[3] = v14;
        v25[4] = v24;
        return sub_100028538;
      case 2uLL:
        v26 = sub_100028464(v1, (SEL *)&selRef_actionType);
        if (!v27)
          goto LABEL_13;
        v28 = sub_10001ADDC(v26, "entityIdentifier");
        if (v28)
        {
          v29 = v28;
          v30 = (_QWORD *)sub_1000100C8((uint64_t)&unk_10011AC38, 56);
          sub_10001830C(v30);
          result = (uint64_t (*)(uint64_t))sub_100028500;
          *((_QWORD *)v4 + 6) = v29;
        }
        else
        {
          v39 = (_QWORD *)sub_1000100C8((uint64_t)&unk_10011AC10, 48);
          sub_10001830C(v39);
          return (uint64_t (*)(uint64_t))sub_1000284C4;
        }
        return result;
      case 3uLL:
        v31 = sub_100028464(v1, (SEL *)&selRef_entityType);
        if (!v32)
          goto LABEL_13;
        v33 = v31;
        v34 = v32;
        v35 = (_QWORD *)sub_1000100C8((uint64_t)&unk_10011ABE8, 48);
        v35[2] = v41;
        v35[3] = v14;
        v35[4] = v33;
        v35[5] = v34;
        return sub_100028458;
      default:
LABEL_13:
        swift_bridgeObjectRelease(v14);
        break;
    }
  }
  v36 = sub_100028418();
  v37 = swift_allocError(&type metadata for StreamManagerError, v36, 0, 0);
  *v38 = 2;
  return (uint64_t (*)(uint64_t))swift_willThrow(v37);
}

uint64_t sub_1000277A0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v10;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, "executionUUID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(a2) = static UUID.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

uint64_t sub_100027858(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v7 = sub_10004B868();
  if (!v8)
    return 0;
  v9 = v8;
  if (v7 == a2 && v8 == a3)
  {
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a2, a3, 0);
    swift_bridgeObjectRelease(v9);
    if ((v11 & 1) == 0)
      return 0;
  }
  return sub_1000278E8(a4) & 1;
}

uint64_t sub_1000278E8(void *a1)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  char v13;
  id v16;
  _BYTE v17[40];

  v2 = objc_msgSend(v1, "resolvedAction");
  v3 = objc_msgSend(v2, "parameters");

  sub_10000795C(0, &qword_1001284E0, LNProperty_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3);

  v5 = sub_100027E84(v4);
  swift_bridgeObjectRelease(v4);
  v6 = v5[2];
  if (v6)
  {
    v7 = (uint64_t)(v5 + 4);
    swift_bridgeObjectRetain(v5);
    while (1)
    {
      sub_10000FE10(v7, (uint64_t)v17);
      v8 = sub_10000795C(0, &qword_1001284E8, LNEntity_ptr);
      if (swift_dynamicCast(&v16, v17, (char *)&type metadata for Any + 8, v8, 6))
      {
        v9 = v16;
        v10 = objc_msgSend(v16, "identifier");

        if (v10)
        {
          sub_10000795C(0, qword_1001284F0, LNEntityIdentifier_ptr);
          v11 = a1;
          v12 = v10;
          v13 = static NSObject.== infix(_:_:)(v12, v11);

          if ((v13 & 1) != 0)
            break;
        }
      }
      v7 += 32;
      if (!--v6)
      {
        swift_bridgeObjectRelease_n(v5, 2);
        return 0;
      }
    }
    swift_bridgeObjectRelease_n(v5, 2);
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    return 0;
  }
}

uint64_t sub_100027AC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;

  v12 = sub_10004B868();
  if (!v13)
    return 0;
  v14 = v13;
  if (v12 == a2 && v13 == a3)
  {
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0);
    swift_bridgeObjectRelease(v14);
    if ((v16 & 1) == 0)
      return 0;
  }
  v17 = objc_msgSend(a1, "resolvedAction");
  v18 = objc_msgSend(v17, "identifier");

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  if (v19 == a4 && v21 == a5)
  {
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, a4, a5, 0);
    swift_bridgeObjectRelease(v21);
    if ((v23 & 1) == 0)
      return 0;
  }
  return sub_1000278E8(a6) & 1;
}

uint64_t sub_100027BF4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v10 = sub_10004B868();
  v12 = v11;
  if (v11)
  {
    if (v10 == a2 && v11 == a3)
    {
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, a2, a3, 0);
      swift_bridgeObjectRelease(v12);
      LOBYTE(v12) = 0;
      if ((v14 & 1) == 0)
        return v12 & 1;
    }
    v15 = objc_msgSend(a1, "resolvedAction");
    v16 = objc_msgSend(v15, "identifier");

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v18 = v17;

    if (v12 == a4 && v18 == a5)
    {
      LOBYTE(v12) = 1;
    }
    else
    {
      LOBYTE(v12) = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v18, a4, a5, 0);
      a5 = v18;
    }
    swift_bridgeObjectRelease(a5);
  }
  return v12 & 1;
}

uint64_t sub_100027D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v9 = sub_10004B868();
  if (!v10)
    return 0;
  v11 = v10;
  if (v9 == a2 && v10 == a3)
  {
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a2, a3, 0);
    swift_bridgeObjectRelease(v11);
    if ((v13 & 1) == 0)
      return 0;
  }
  return sub_100027DA4(a4, a5) & 1;
}

uint64_t sub_100027DA4(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;

  v3 = v2;
  v6 = objc_msgSend(v3, "resolvedAction");
  v7 = objc_msgSend(v6, "parameters");

  sub_10000795C(0, &qword_1001284E0, LNProperty_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7);

  v9 = sub_1000280B8(v8);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRetain(a2);
  LOBYTE(a2) = sub_100028260((unint64_t)v9, a1, a2);
  swift_bridgeObjectRelease(v9);
  return a2 & 1;
}

_QWORD *sub_100027E84(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t i;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[4];
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];
  unint64_t v20;

  if ((unint64_t)a1 >> 62)
    goto LABEL_21;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v3 = _swiftEmptyArrayStorage;
    v20 = a1 & 0xC000000000000001;
    for (i = 4; ; ++i)
    {
      v5 = v20 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1) : *(id *)(a1 + 8 * i);
      v6 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v7 = v5;
      v8 = objc_msgSend(v7, "value");
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v9, "value");
        _bridgeAnyObjectToAny(_:)(v16, v10);
        swift_unknownObjectRelease(v10);
        sub_10000FE10((uint64_t)v16, (uint64_t)v19);
        sub_10000E87C(v16);

      }
      else
      {
        memset(v19, 0, sizeof(v19));
      }
      sub_10000DFD0((uint64_t)v19, (uint64_t)&v17);

      if (v18)
      {
        sub_1000273C0(&v17, v19);
        sub_1000273C0(v19, &v17);
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        {
          sub_10002F884();
          v3 = v12;
        }
        v11 = v3[2];
        if (v11 >= v3[3] >> 1)
        {
          sub_10002F884();
          v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_1000273C0(&v17, &v3[4 * v11 + 4]);
      }
      else
      {
        sub_10001316C((uint64_t)&v17, &qword_100128A40);
      }
      if (v6 == v2)
      {
        swift_bridgeObjectRelease(a1);
        return v3;
      }
    }
    __break(1u);
LABEL_21:
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void *sub_1000280B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    v3 = 4;
    while (1)
    {
      v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1)
         : *(id *)(a1 + 8 * v3);
      v5 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v6 = v4;
      v7 = objc_msgSend(v6, "value");
      if (v7)
      {
        v8 = v7;
        v9 = objc_msgSend(v7, "valueType");

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v11 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v10 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v11 >= v10 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
        specialized Array._endMutation()(v12);
      }
      else
      {

      }
      ++v3;
      if (v5 == v2)
        goto LABEL_20;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_20:
  swift_bridgeObjectRelease(a1);
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100028260(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_21;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v6)
  {
    do
    {
      v7 = 4;
      while (1)
      {
        v8 = (v5 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5)
           : *(id *)(v5 + 8 * v7);
        v9 = v8;
        v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        v11 = objc_opt_self(LNEntityValueType);
        v12 = (void *)swift_dynamicCastObjCClass(v9, v11);
        if (v12)
        {
          v13 = a3;
          v14 = objc_msgSend(v12, "identifier");
          v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          v17 = v16;

          a3 = v13;
          if (v15 == a2 && v17 == v13)
          {
            swift_bridgeObjectRelease(v5);

            v6 = 1;
            v5 = v13;
            goto LABEL_19;
          }
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, a2, v13, 0);

          swift_bridgeObjectRelease(v17);
          if ((v19 & 1) != 0)
          {
            v6 = 1;
            goto LABEL_19;
          }
        }
        else
        {

        }
        ++v7;
        if (v10 == v6)
        {
          v6 = 0;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_21:
      v21 = a2;
      if (v5 < 0)
        v22 = v5;
      else
        v22 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v23 = _CocoaArrayWrapper.endIndex.getter(v22);
      a2 = v21;
      v6 = v23;
    }
    while (v23);
  }
LABEL_19:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v5);
  return v6;
}

unint64_t sub_100028418()
{
  unint64_t result;

  result = qword_1001293F0;
  if (!qword_1001293F0)
  {
    result = swift_getWitnessTable(&unk_1000F206C, &type metadata for StreamManagerError);
    atomic_store(result, (unint64_t *)&qword_1001293F0);
  }
  return result;
}

uint64_t sub_100028458(uint64_t a1)
{
  uint64_t *v1;

  return sub_100027D08(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100028464(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t sub_1000284C4(void *a1)
{
  uint64_t *v1;

  return sub_100027BF4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1000284D0()
{
  uint64_t v0;

  sub_10001ABAC();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100028500(void *a1)
{
  uint64_t v1;

  return sub_100027AC8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t sub_100028510()
{
  uint64_t v0;

  sub_10001ABAC();

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100028538(uint64_t a1)
{
  uint64_t v1;

  return sub_100027858(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100028544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000285A4(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1000277A0(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1000285E4(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[3] = &unk_1000EF970;
  return swift_initClassMetadata2(a1, 0, 4, v2, a1 + 96);
}

void sub_100028640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  _BYTE v24[24];

  v22 = a1;
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v20 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(a1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Optional(255, v2);
  v21 = type metadata accessor for CheckedContinuation(0, v5, &type metadata for Never, &protocol witness table for Never);
  v6 = *(_QWORD *)(v21 - 8);
  v7 = __chkstk_darwin(v21);
  v9 = (char *)&v19 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v19 - v10;
  v12 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v12);
  swift_beginAccess(v1 + 24, v24, 0, 0);
  v23[0] = *(_QWORD *)(v1 + 24);
  v13 = type metadata accessor for Array(0, v2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
  if ((Collection.isEmpty.getter(v13, WitnessTable) & 1) != 0)
  {
    v15 = v21;
    if (*(_BYTE *)(v1 + 40) == 1)
    {
      sub_100014360((uint64_t)v11, 1, 1, v2);
      CheckedContinuation.resume(returning:)(v11, v15);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v22, v21);
      swift_beginAccess(v1 + 32, v23, 33, 0);
      v18 = type metadata accessor for Array(0, v15);
      Array.append(_:)(v9, v18);
      swift_endAccess(v23);
    }
    os_unfair_lock_unlock(v12);
  }
  else
  {
    swift_beginAccess(v1 + 24, v23, 33, 0);
    v16 = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
    RangeReplaceableCollection.removeFirst()(v13, v16);
    swift_endAccess(v23);
    os_unfair_lock_unlock(v12);
    v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v11, v4, v2);
    sub_100014360((uint64_t)v11, 0, 1, v2);
    CheckedContinuation.resume(returning:)(v11, v21);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v2);
  }
}

uint64_t sub_1000288C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_1000288DC, 0, 0);
}

uint64_t sub_1000288DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = v0[3];
  v1 = v0[4];
  v3 = (_QWORD *)swift_task_alloc(48);
  v0[5] = v3;
  v4 = *(_QWORD *)(v2 + 16);
  v3[2] = v4;
  v3[3] = *(_QWORD *)(v2 + 24);
  v3[4] = v1;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v5;
  v6 = type metadata accessor for Optional(0, v4);
  *v5 = v0;
  v5[1] = sub_10002898C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0[2], 0, 0, 0x29287478656ELL, 0xE600000000000000, sub_100028BEC, v3, v6);
}

uint64_t sub_10002898C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 40);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000289DC(uint64_t a1)
{
  swift_retain();
  sub_100028640(a1);
  return swift_release();
}

uint64_t sub_100028A10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10012858C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100028A70;
  return sub_1000288C0(a1, a2);
}

uint64_t sub_100028A70()
{
  uint64_t v0;

  sub_10001B058();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100028A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;

  v12 = (_QWORD *)swift_task_alloc(_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTu[1]);
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_100028B1C;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, a6);
}

uint64_t sub_100028B1C()
{
  uint64_t v0;

  sub_10001B058();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

_QWORD *sub_100028B48()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return v0;
}

uint64_t sub_100028B74()
{
  uint64_t v0;

  sub_100028B48();
  return swift_deallocClassInstance(v0, 41, 7);
}

uint64_t type metadata accessor for AsyncWorkQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncWorkQueue);
}

uint64_t sub_100028BA0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000EF9F8, a1);
}

uint64_t sub_100028BB0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  sub_1000179D8();
  result = swift_release();
  *a1 = v3;
  return result;
}

void *sub_100028BE0()
{
  return &protocol witness table for Never;
}

uint64_t sub_100028BEC(uint64_t a1)
{
  return sub_1000289DC(a1);
}

uint64_t sub_100028BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for AsyncWorkQueue.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncWorkQueue.AsyncIterator);
}

uint64_t sub_100028C0C()
{
  uint64_t v0;

  return sub_10002A8DC(*(uint64_t (**)(void))(v0 + 8));
}

void static Daemon.main()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void (__cdecl *v41)(int);
  uint64_t v42;
  uint64_t ObjectType;
  _QWORD *v44;
  void *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t aBlock[6];

  v53 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v8 - 8);
  v57 = v8;
  __chkstk_darwin(v8);
  v55 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001BE7C(&qword_10012AD50);
  v11 = __chkstk_darwin(v10);
  v51 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = a1;
  __chkstk_darwin(v11);
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v2;
  aBlock[0] = v2;
  v17 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v19 = String.init<A>(describing:)(aBlock, v17);
  v20 = LNLogSubsystem;
  if (!LNLogSubsystem)
    __break(1u);
  v21 = v18;
  v22 = String.init(cString:)(v20);
  v24 = Logger.init(subsystem:category:)(v22, v23, v19, v21);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = sub_100011780(12);
    v48 = v7;
    v28 = (uint8_t *)v27;
    v29 = sub_100011780(32);
    v50 = v4;
    v30 = v29;
    aBlock[0] = v29;
    v49 = v5;
    *(_DWORD *)v28 = 136315138;
    v58 = sub_10000FBEC(0xD000000000000024, 0x80000001000F35D0, aBlock);
    v5 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, aBlock);
    sub_1000100C0((void *)&_mh_execute_header, v25, v26, "%s launched, checking in", v28);
    swift_arrayDestroy(v30, 1);
    v31 = v30;
    v4 = v50;
    sub_1000133FC(v31);
    v32 = (uint64_t)v28;
    v7 = v48;
    sub_1000133FC(v32);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v34 = v52;
  v33 = v53;
  (*(void (**)(uint64_t, uint64_t))(v53 + 16))(v52, v53);
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v34, v33);
  v36 = sub_1000179E0();
  v37 = v51;
  sub_100014360(v51, 1, 1, v36);
  v38 = (_QWORD *)sub_1000100C8((uint64_t)&unk_10011ADD0, 64);
  v38[2] = 0;
  v38[3] = 0;
  v38[4] = v34;
  v38[5] = v33;
  v39 = v54;
  v38[6] = v35;
  v38[7] = v39;
  swift_bridgeObjectRetain(v35);
  sub_100029394(v37, (uint64_t)&unk_100128618, (uint64_t)v38);
  v40 = swift_release();
  v41 = (void (__cdecl *)(int))SIG_IGN.getter(v40);
  signal(15, v41);
  sub_1000294C8();
  v42 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15, 0);
  ObjectType = swift_getObjectType(v42);
  v44 = (_QWORD *)sub_1000100C8((uint64_t)&unk_10011ADF8, 48);
  v44[2] = v34;
  v44[3] = v33;
  v44[4] = v39;
  v44[5] = v35;
  aBlock[4] = (uint64_t)sub_1000297F4;
  aBlock[5] = (uint64_t)v44;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10001FF18;
  aBlock[3] = (uint64_t)&unk_10011AE10;
  v45 = _Block_copy(aBlock);
  v46 = v55;
  static DispatchQoS.unspecified.getter(v45);
  sub_100029B68();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v46, v7, v45, ObjectType);
  _Block_release(v45);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v46, v57);
  swift_release();
  OS_dispatch_source.activate()();
  dispatch_main();
}

uint64_t sub_100029038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[4] = a4;
  v5[5] = a5;
  v6 = type metadata accessor for Logger(0);
  v5[6] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[7] = v7;
  v5[8] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100029098, 0, 0);
}

uint64_t sub_100029098()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)sub_1000101E0();
  *(_QWORD *)(v1 + 72) = v2;
  v2[2] = v0;
  v2[3] = &unk_1001286A0;
  v2[4] = 0;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v1 + 80) = v3;
  *v3 = v1;
  v3[1] = sub_10002910C;
  sub_100018B40();
  return sub_10001D938();
}

uint64_t sub_10002910C()
{
  uint64_t v0;

  sub_10001DCCC();
  sub_100017C10(*(_QWORD *)(v0 + 80));
  sub_1000158B0();
  return sub_1000059B8();
}

uint64_t sub_100029148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint8_t *v14;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  v1 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v3 = String.init<A>(describing:)(v0 + 16, v1);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v5 = v2;
    v6 = *(_QWORD *)(v0 + 32);
    v7 = String.init(cString:)(LNLogSubsystem);
    Logger.init(subsystem:category:)(v7, v8, v3, v5);
    swift_bridgeObjectRetain(v6);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    v12 = sub_1000101D0(v11);
    v13 = *(_QWORD *)(v0 + 32);
    if (v12)
    {
      v14 = (uint8_t *)sub_100011780(12);
      *(_DWORD *)v14 = 134217984;
      *(_QWORD *)(v0 + 24) = *(_QWORD *)(v13 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
      swift_bridgeObjectRelease(v13);
      sub_1000100C0((void *)&_mh_execute_header, v10, (os_log_type_t)v5, "Finished checking in %ld entry points", v14);
      sub_1000133FC((uint64_t)v14);
    }
    else
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
    }

    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    sub_1000158B0();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000292A0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001DCDC();
  v0 = swift_task_alloc(dword_100128614);
  v1 = (_QWORD *)sub_10001BFC0(v0);
  v2 = sub_100018320(v1);
  return sub_100029038(v2, v3, v4, v5, v6);
}

uint64_t sub_1000292FC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100029314, 0, 0);
}

uint64_t sub_100029314()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[4];
  sub_10000E858(v1, v1[3]);
  v3 = (_QWORD *)sub_100011798(*(_QWORD *)(v2 + 8));
  *(_QWORD *)(v0 + 24) = v3;
  v4 = sub_10000BFDC(v3, (uint64_t)sub_100029360);
  return sub_10001898C(v4, v5, v6);
}

uint64_t sub_100029360()
{
  uint64_t (**v0)(void);

  sub_100017C10(*((_QWORD *)*v0 + 3));
  return sub_1000107A0(v0[1]);
}

uint64_t sub_100029394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];

  v6 = sub_1000179E0();
  if (sub_10001C93C(a1, 1, v6) == 1)
  {
    sub_10000A7E4(a1);
    v7 = 7168;
  }
  else
  {
    v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v7 = v8 | 0x1C00;
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    v14 = v13;
    swift_unknownObjectRelease(v9);
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = sub_1000100C8((uint64_t)&unk_10011AEC0, 32);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0;
    v18[1] = 0;
    v16 = v18;
    v18[2] = v12;
    v18[3] = v14;
  }
  else
  {
    v16 = 0;
  }
  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_100128698, v15);
}

unint64_t sub_1000294C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100128620;
  if (!qword_100128620)
  {
    v1 = objc_opt_self(OS_dispatch_source);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100128620);
  }
  return result;
}

uint64_t sub_100029504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD v38[2];
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v8 = sub_10001BE7C(&qword_10012AD50);
  __chkstk_darwin(v8);
  v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v42 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a1;
  v14 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v16 = String.init<A>(describing:)(&v44, v14);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v18 = v15;
    v19 = String.init(cString:)(LNLogSubsystem);
    v21 = Logger.init(subsystem:category:)(v19, v20, v16, v18);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v39 = v11;
      v24 = swift_slowAlloc(12, -1);
      v41 = a4;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc(32, -1);
      v44 = v26;
      v40 = v10;
      *(_DWORD *)v25 = 136315138;
      v38[1] = v25 + 4;
      v27 = _typeName(_:qualified:)(a3, 0);
      v28 = a3;
      v29 = a1;
      v30 = a2;
      v32 = v31;
      v43 = sub_10000FBEC(v27, v31, &v44);
      v10 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      v33 = v32;
      a2 = v30;
      a1 = v29;
      a3 = v28;
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s received SIGTERM, shutting down gracefully", v25, 0xCu);
      swift_arrayDestroy(v26, 1);
      swift_slowDealloc(v26, -1, -1);
      v34 = v25;
      a4 = v41;
      swift_slowDealloc(v34, -1, -1);

      v35 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v13, v39);
    }
    else
    {

      v35 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v13, v11);
    }
    static TaskPriority.userInitiated.getter(v35);
    v36 = type metadata accessor for TaskPriority(0);
    sub_100014360((uint64_t)v10, 0, 1, v36);
    v37 = (_QWORD *)swift_allocObject(&unk_10011AE48, 64, 7);
    v37[2] = 0;
    v37[3] = 0;
    v37[4] = a3;
    v37[5] = a4;
    v37[6] = a2;
    v37[7] = a1;
    swift_bridgeObjectRetain(a2);
    sub_100029394((uint64_t)v10, (uint64_t)&unk_100128648, (uint64_t)v37);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000297D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000297F4()
{
  uint64_t *v0;

  return sub_100029504(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t sub_100029800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  v7 = type metadata accessor for Logger(0);
  v6[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[8] = v8;
  v6[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100029864, 0, 0);
}

uint64_t sub_100029864()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)sub_1000101E0();
  *(_QWORD *)(v1 + 80) = v2;
  v2[2] = v0;
  v2[3] = &unk_100128650;
  v2[4] = 0;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v1 + 88) = v3;
  *v3 = v1;
  v3[1] = sub_1000298D8;
  sub_100018B40();
  return sub_10001D938();
}

uint64_t sub_1000298D8()
{
  uint64_t v0;

  sub_10001DCCC();
  sub_100017C10(*(_QWORD *)(v0 + 88));
  sub_1000158B0();
  return sub_1000059B8();
}

uint64_t sub_100029914()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  v2 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v4 = String.init<A>(describing:)(v0 + 16, v2);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v6 = v3;
    v7 = String.init(cString:)(LNLogSubsystem);
    v9 = Logger.init(subsystem:category:)(v7, v8, v4, v6);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    v12 = sub_1000101D0(v11);
    v13 = *(_QWORD *)(v0 + 64);
    v14 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 56);
    if (v12)
    {
      v16 = *(_QWORD *)(v0 + 48);
      v17 = (uint8_t *)sub_100011780(12);
      v23 = v14;
      v24 = sub_100011780(32);
      v18 = v24;
      *(_DWORD *)v17 = 136315138;
      v19 = _typeName(_:qualified:)(v16, 0);
      v21 = v20;
      *(_QWORD *)(v0 + 24) = sub_10000FBEC(v19, v20, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
      swift_bridgeObjectRelease(v21);
      sub_1000100C0((void *)&_mh_execute_header, v10, v1, "%s successfully shut down, terminating", v17);
      swift_arrayDestroy(v18, 1);
      sub_1000133FC(v18);
      sub_1000133FC((uint64_t)v17);

      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v23, v15);
    }
    else
    {

      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
    }
    xpc_transaction_exit_clean(v22);
    sub_1000158B0();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100029AC4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100029ADC, 0, 0);
}

uint64_t sub_100029ADC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[4];
  sub_10000E858(v1, v1[3]);
  v3 = (_QWORD *)sub_100011798(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(v0 + 24) = v3;
  v4 = sub_10000BFDC(v3, (uint64_t)sub_100029B28);
  return sub_10001898C(v4, v5, v6);
}

uint64_t sub_100029B28()
{
  uint64_t v0;
  uint64_t (**v1)(void);

  sub_100017C10(*((_QWORD *)*v1 + 3));
  if (v0)
    swift_errorRelease(v0);
  return sub_1000107A0(v1[1]);
}

uint64_t sub_100029B68()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_10002A8E4();
  v2 = sub_10001BE7C(&qword_100128178);
  v3 = sub_10001FBB4();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_100029BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[16] = a4;
  v5[17] = a5;
  v5[14] = a2;
  v5[15] = a3;
  return swift_task_switch(sub_100029C00, 0, 0);
}

uint64_t sub_100029C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v28 = (__int128 *)(v0 + 16);
    v3 = v1 + 32;
    swift_bridgeObjectRetain(v1);
    do
    {
      v29 = v2;
      v4 = *(_QWORD *)(v0 + 128);
      v5 = *(_QWORD *)(v0 + 136);
      v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001BE7C(&qword_10012AD50) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
      v7 = swift_task_alloc(v6);
      v8 = sub_1000179E0();
      sub_100014360(v7, 1, 1, v8);
      sub_1000132C4(v3, (uint64_t)v28);
      v9 = (_QWORD *)sub_1000100C8((uint64_t)&unk_10011AE70, 88);
      v9[2] = 0;
      v10 = v9 + 2;
      v9[3] = 0;
      v9[4] = v4;
      v9[5] = v5;
      sub_100019A48(v28, (uint64_t)(v9 + 6));
      v11 = swift_task_alloc(v6);
      sub_10002AA78(v7, v11);
      LODWORD(v4) = sub_10001C93C(v11, 1, v8);
      v12 = swift_retain();
      if ((_DWORD)v4 == 1)
      {
        sub_10000A7E4(v11);
        v13 = 0;
      }
      else
      {
        v14 = TaskPriority.rawValue.getter(v12);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v11, v8);
        v13 = v14;
      }
      sub_1000158B0();
      v15 = *v10;
      if (*v10)
      {
        v16 = v9[3];
        ObjectType = swift_getObjectType(*v10);
        swift_unknownObjectRetain(v15);
        v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
        v20 = v19;
        swift_unknownObjectRelease(v15);
      }
      else
      {
        v18 = 0;
        v20 = 0;
      }
      v21 = **(_QWORD **)(v0 + 112);
      v22 = sub_1000100C8((uint64_t)&unk_10011AE98, 32);
      *(_QWORD *)(v22 + 16) = &unk_100128670;
      *(_QWORD *)(v22 + 24) = v9;
      v23 = v20 | v18;
      if (v20 | v18)
      {
        v23 = v0 + 56;
        *(_QWORD *)(v0 + 56) = 0;
        *(_QWORD *)(v0 + 64) = 0;
        *(_QWORD *)(v0 + 72) = v18;
        *(_QWORD *)(v0 + 80) = v20;
      }
      *(_QWORD *)(v0 + 88) = 1;
      *(_QWORD *)(v0 + 96) = v23;
      *(_QWORD *)(v0 + 104) = v21;
      swift_task_create(v13 | 0x3100, v0 + 88, (char *)&type metadata for () + 8, &unk_100128678, v22);
      swift_release();
      sub_10000A7E4(v7);
      swift_task_dealloc(v7);
      v3 += 40;
      v2 = v29 - 1;
    }
    while (v29 != 1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  }
  if (sub_1000EC0D8(2, 18, 0, 0))
  {
    v24 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
    *(_QWORD *)(v0 + 144) = v24;
    v25 = sub_10001BE7C(&qword_100128680);
    *v24 = v0;
    v24[1] = sub_100029F0C;
    return TaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, v25);
  }
  else
  {
    v30 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100128688 + dword_100128688);
    v27 = (_QWORD *)swift_task_alloc(unk_10012868C);
    *(_QWORD *)(v0 + 152) = v27;
    *v27 = v0;
    v27[1] = sub_100029F38;
    return v30(0, 0);
  }
}

uint64_t sub_100029F0C()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DCCC();
  sub_100017C10(*(_QWORD *)(v1 + 144));
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100029F38()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DCCC();
  sub_100017C10(*(_QWORD *)(v1 + 152));
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100029F64(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  v10 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v8 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v6 + 16) = v8;
  *v8 = v6;
  v8[1] = sub_10002AB74;
  return v10(a6);
}

uint64_t sub_100029FC8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100128634);
  *(_QWORD *)(v1 + 16) = v3;
  swift_getWitnessTable(&unk_1000F1B68, a1);
  *v3 = v1;
  v3[1] = sub_10002AB74;
  return sub_10000EC34();
}

uint64_t sub_10002A024(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10002A088;
  return v6(a1);
}

uint64_t sub_10002A088()
{
  uint64_t (**v0)(void);

  sub_100017C10(*((_QWORD *)*v0 + 2));
  return sub_1000107A0(v0[1]);
}

uint64_t sub_10002A0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v3 + 64) = a2;
  *(_QWORD *)(v3 + 72) = v2;
  *(_QWORD *)(v3 + 56) = a1;
  v4 = sub_1000EC0D8(2, 18, 0, 0);
  *(_DWORD *)(v3 + 112) = v4;
  if (v4)
  {
    v5 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.next(isolation:)[1]);
    *(_QWORD *)(v3 + 104) = v5;
    v6 = sub_10001BE7C(&qword_100128680);
    *v5 = v3;
    v5[1] = sub_10002A2F0;
    return TaskGroup.next(isolation:)(v3 + 116, *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), v6);
  }
  else
  {
    if (*(_QWORD *)(v3 + 56))
    {
      v8 = *(_QWORD *)(v3 + 64);
      ObjectType = swift_getObjectType(*(_QWORD *)(v3 + 56));
      v10 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v8);
      v12 = v11;
    }
    else
    {
      v10 = 0;
      v12 = 0;
    }
    *(_QWORD *)(v3 + 80) = v10;
    *(_QWORD *)(v3 + 88) = v12;
    return swift_task_switch(sub_10002A1AC, v10, v12);
  }
}

uint64_t sub_10002A1AC()
{
  uint64_t v0;

  return swift_taskGroup_wait_next_throwing(v0 + 117, **(_QWORD **)(v0 + 72), sub_10002A1C8, v0 + 16);
}

uint64_t sub_10002A1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v1 + 96) = v0;
  if (v0)
  {
    v2 = *(_QWORD *)(v1 + 80);
    v3 = *(_QWORD *)(v1 + 88);
    v4 = sub_10002A2D4;
    return swift_task_switch(v4, v2, v3);
  }
  if ((*(_BYTE *)(v1 + 117) & 1) != 0)
    return (*(uint64_t (**)(void))(v1 + 8))();
  if (!*(_DWORD *)(v1 + 112))
  {
    if (*(_QWORD *)(v1 + 56))
    {
      v8 = *(_QWORD *)(v1 + 64);
      ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 56));
      v10 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v8);
      v3 = v11;
    }
    else
    {
      v10 = 0;
      v3 = 0;
    }
    *(_QWORD *)(v1 + 80) = v10;
    *(_QWORD *)(v1 + 88) = v3;
    v4 = sub_10002A1AC;
    v2 = v10;
    return swift_task_switch(v4, v2, v3);
  }
  v6 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.next(isolation:)[1]);
  *(_QWORD *)(v1 + 104) = v6;
  v7 = sub_10001BE7C(&qword_100128680);
  *v6 = v1;
  v6[1] = sub_10002A2F0;
  return TaskGroup.next(isolation:)(v1 + 116, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), v7);
}

uint64_t sub_10002A2D4()
{
  uint64_t v0;

  return swift_unexpectedError(*(_QWORD *)(v0 + 96), "_Concurrency/TaskGroup.swift", 28, 1, 648);
}

uint64_t sub_10002A2F0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(*v0 + 104);
  v2 = *v0;
  swift_task_dealloc(v1);
  if ((*(_BYTE *)(v2 + 116) & 1) != 0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  if (*(_DWORD *)(v2 + 112))
  {
    v4 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.next(isolation:)[1]);
    *(_QWORD *)(v2 + 104) = v4;
    v5 = sub_10001BE7C(&qword_100128680);
    *v4 = v2;
    v4[1] = sub_10002A2F0;
    return TaskGroup.next(isolation:)(v2 + 116, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), v5);
  }
  else
  {
    if (*(_QWORD *)(v2 + 56))
    {
      v6 = *(_QWORD *)(v2 + 64);
      ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 56));
      v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v6);
      v10 = v9;
    }
    else
    {
      v8 = 0;
      v10 = 0;
    }
    *(_QWORD *)(v2 + 80) = v8;
    *(_QWORD *)(v2 + 88) = v10;
    return swift_task_switch(sub_10002A1AC, v8, v10);
  }
}

void *sub_10002A3FC(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory with negative count", 60, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1170, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1173, 0);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10002A4C0(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_10002A554(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10002A6C4(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_10002A6C4((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

_QWORD *sub_10002A554(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return _swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return _swiftEmptyArrayStorage;
LABEL_6:
  v5 = sub_100091CCC(v4, 0);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 71, 0);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    v9 = "Insufficient space allocated to copy string contents";
    v10 = "Swift/StringUTF8View.swift";
    v11 = 52;
    v12 = 26;
    goto LABEL_15;
  }
  if (v7 == v4)
    return v6;
  v9 = "invalid Collection: less than 'count' elements in collection";
  v10 = "Swift/ContiguousArrayBuffer.swift";
  v11 = 60;
  v12 = 33;
LABEL_15:
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v9, v11, 2, v10, v12);
  __break(1u);
  return result;
}

char *sub_10002A6C4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001BE7C(&qword_100128638);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10002A85C(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10002A798(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_10002A798(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

char *sub_10002A85C(char *__src, size_t __len, char *__dst)
{
  char v4;

  if ((__len & 0x8000000000000000) != 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_10002A8DC(uint64_t (*a1)(void))
{
  return a1();
}

unint64_t sub_10002A8E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100128170;
  if (!qword_100128170)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100128170);
  }
  return result;
}

uint64_t sub_10002A928()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10001DCDC();
  v0 = swift_task_alloc(dword_100128644);
  v1 = (_QWORD *)sub_10001BFC0(v0);
  v2 = sub_100018320(v1);
  return sub_100029800(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10002A984()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001E888();
  v0 = swift_task_alloc(dword_10012865C);
  v1 = (_QWORD *)sub_10001BFC0(v0);
  v2 = sub_10001B078(v1);
  return sub_10001ABB4(v2, v3, v4, v5, v6);
}

uint64_t sub_10002A9C8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  sub_10000E87C((_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10002A9FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = v1[5];
  v8 = swift_task_alloc(dword_10012866C);
  v9 = (_QWORD *)sub_10001BFC0(v8);
  *v9 = v2;
  v9[1] = sub_10002AB74;
  return sub_100029F64(a1, v4, v5, v6, v7, (uint64_t)(v1 + 6));
}

uint64_t sub_10002AA78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_10012AD50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002AAC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002AAE4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v0 = swift_task_alloc(dword_10012899C);
  v1 = (_QWORD *)sub_10001BFC0(v0);
  v2 = sub_10001B750(v1);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_10002AB2C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v0 = swift_task_alloc(dword_100128694);
  v1 = (_QWORD *)sub_10001BFC0(v0);
  v2 = sub_10001B750(v1);
  return sub_100013E00(v2, v3, v4, v5);
}

_QWORD *sub_10002AB7C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  _QWORD *v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100052518();
    v4 = (unsigned __int8 *)(a1 + 48);
    do
    {
      v6 = *((_QWORD *)v4 - 2);
      v5 = *((_QWORD *)v4 - 1);
      v7 = *v4;
      v8 = swift_bridgeObjectRetain(v5);
      v9 = a2(v6, v5, v7, v8);
      v11 = v10;
      v13 = v12;
      swift_bridgeObjectRelease(v5);
      v14 = _swiftEmptyArrayStorage[2];
      if (v14 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_100052518();
      v4 += 24;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = &_swiftEmptyArrayStorage[3 * v14];
      v15[4] = v9;
      v15[5] = v11;
      *((_BYTE *)v15 + 48) = v13 & 1;
      --v2;
    }
    while (v2);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10002AC94()
{
  void *v0;
  id v1;
  NSString v2;
  unint64_t v3;
  id v4;
  unsigned __int8 v6;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v1 = objc_msgSend(v0, "entitlements");
  v2 = String._bridgeToObjectiveC()();
  v3 = sub_10002B484();
  v4 = objc_msgSend(v1, "objectForKey:ofClass:", v2, swift_getObjCClassFromMetadata(v3));

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v7, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_10000DFD0((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    if ((sub_10001ABC8((uint64_t)&v6, (uint64_t)v8, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Bool) & 1) != 0)return v6;
  }
  else
  {
    sub_10000E0D4((uint64_t)v8);
  }
  return 0;
}

void sub_10002ADA0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  NSURL *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  __chkstk_darwin(v2);
  v3 = (void *)objc_opt_self(NSBundle);
  v4 = objc_msgSend(v0, "URL");
  sub_10001B098();

  URL._bridgeToObjectiveC()(v5);
  v7 = v6;
  sub_10001899C();
  v8 = objc_msgSend(v3, "ln_uniqueBundleWithURL:", v7);

  if (v8)
  {
    sub_10002B020();

  }
  else
  {
    if (qword_100127E80 != -1)
      swift_once(&qword_100127E80, sub_10009056C);
    v9 = type metadata accessor for Logger(0);
    sub_100012A40(v9, (uint64_t)qword_10012D0F8);
    v10 = v1;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)sub_100011780(12);
      v19 = sub_100011780(32);
      v21 = v19;
      *(_DWORD *)v13 = 136315138;
      v14 = objc_msgSend(v10, "URL", v13 + 4);
      sub_10001B098();

      v15 = sub_10002B598();
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v2, v15);
      v18 = v17;
      sub_10001899C();
      v20 = sub_10000FBEC(v16, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);

      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unable to load bundle at %s while fetching SiriKit alternative app names", v13, 0xCu);
      swift_arrayDestroy(v19, 1);
      sub_1000133FC(v19);
      sub_1000133FC((uint64_t)v13);

    }
    else
    {

    }
  }
  sub_100013308();
}

void sub_10002B020()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  __int128 v28;

  v1 = sub_10002B5D8(v0);
  if (!v1)
  {
    v27 = 0u;
    v28 = 0u;
    goto LABEL_22;
  }
  sub_10002D8B4(0xD000000000000015, v1, &v27);
  sub_1000059A8();
  if (!*((_QWORD *)&v28 + 1))
  {
LABEL_22:
    sub_10000E0D4((uint64_t)&v27);
    goto LABEL_23;
  }
  v2 = sub_10001BE7C(&qword_1001286B8);
  if ((sub_10001ABC8((uint64_t)v26, (uint64_t)&v27, (uint64_t)&type metadata for Any + 8, v2) & 1) == 0)
  {
LABEL_23:
    if (qword_100127E80 != -1)
      swift_once(&qword_100127E80, sub_10009056C);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100012A40(v20, (uint64_t)qword_10012D0F8);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)sub_100011780(2);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "App declares no INAlternativeAppNames", v24, 2u);
      sub_1000133FC((uint64_t)v24);
    }

    goto LABEL_28;
  }
  v3 = v26[0];
  v4 = *(_QWORD *)(v26[0] + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(v26[0]);
    v5 = 0;
    v6 = _swiftEmptyArrayStorage;
    v7 = (char *)&type metadata for Any + 8;
    while (1)
    {
      v8 = *(_QWORD *)(v3 + 8 * v5 + 32);
      if (*(_QWORD *)(v8 + 16))
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v3 + 8 * v5 + 32));
        v9 = sub_100016064(0xD000000000000014);
        if ((v10 & 1) != 0)
        {
          sub_100018348(v9);
          if ((sub_10001ABC8((uint64_t)v26, (uint64_t)&v27, (uint64_t)v7, (uint64_t)&type metadata for String) & 1) != 0)
          {
            v11 = v26[0];
            v12 = v26[1];
            if (*(_QWORD *)(v8 + 16)
              && (v13 = sub_100016064(0xD00000000000001ALL), (v14 & 1) != 0)
              && (sub_100018348(v13),
                  (sub_10001ABC8((uint64_t)v26, (uint64_t)&v27, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Bool) & 1) != 0))
            {
              v15 = v26[0];
              sub_1000059A8();
              if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
                goto LABEL_13;
            }
            else
            {
              sub_1000059A8();
              v15 = 0;
              if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
              {
LABEL_13:
                sub_10001B26C();
                v6 = v16;
              }
            }
            v17 = v6[2];
            if (v17 >= v6[3] >> 1)
            {
              sub_10001B26C();
              v6 = v19;
            }
            v6[2] = v17 + 1;
            v18 = &v6[3 * v17];
            v18[4] = v11;
            v18[5] = v12;
            *((_BYTE *)v18 + 48) = v15;
            v7 = (char *)&type metadata for Any + 8;
            goto LABEL_19;
          }
        }
        sub_1000059A8();
      }
LABEL_19:
      if (v4 == ++v5)
      {
        swift_bridgeObjectRelease(v3);
        goto LABEL_30;
      }
    }
  }
  v6 = _swiftEmptyArrayStorage;
LABEL_30:
  v25 = swift_bridgeObjectRelease(v3);
  __chkstk_darwin(v25);
  sub_10002AB7C((uint64_t)v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10002B640);
  swift_bridgeObjectRelease(v6);
LABEL_28:
  sub_100013308();
}

uint64_t sub_10002B388()
{
  return sub_10002B3A8();
}

uint64_t sub_10002B3A8()
{
  void *v0;

  return sub_1000B98C0(v0);
}

uint64_t sub_10002B3B0()
{
  return sub_10002AC94() & 1;
}

uint64_t sub_10002B3D4()
{
  return sub_10002B3F4();
}

uint64_t sub_10002B3F4()
{
  void *v0;
  Class isa;
  id v2;
  uint64_t v3;

  isa = Array._bridgeToObjectiveC()().super.isa;
  v2 = objc_msgSend(v0, "localizedNameWithPreferredLocalizations:", isa);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

void sub_10002B464()
{
  sub_10002ADA0();
}

unint64_t sub_10002B484()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10012AD40;
  if (!qword_10012AD40)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10012AD40);
  }
  return result;
}

id sub_10002B4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = objc_msgSend((id)objc_opt_self(AFLocalization), "sharedInstance");
  if (result)
  {
    v12 = result;
    v13 = sub_10002B64C(a1, a2, 0x73696C506F666E49, 0xE900000000000074, a4, a5, a6, result);
    v15 = v14;

    if (v15)
      return (id)v13;
    swift_bridgeObjectRetain(a2);
    return (id)a1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10002B598()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001286B0;
  if (!qword_1001286B0)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1001286B0);
  }
  return result;
}

uint64_t sub_10002B5D8(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "infoDictionary");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  return v3;
}

id sub_10002B640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_10002B4C0(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t sub_10002B64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  NSString v11;
  NSString v12;
  NSString v13;
  id v14;
  uint64_t v15;

  v11 = String._bridgeToObjectiveC()();
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(a8, "localizedStringForKey:table:bundle:languageCode:", v11, v12, a5, v13);

  if (!v14)
    return 0;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);

  return v15;
}

ValueMetadata *type metadata accessor for PlatformAssistantIntentGenerator()
{
  return &type metadata for PlatformAssistantIntentGenerator;
}

uint64_t sub_10002B738()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for Logger(0);
  sub_1000269D8(v0, qword_10012C9B8);
  sub_100012A40(v0, (uint64_t)qword_10012C9B8);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v2 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v2, v3, 0xD000000000000020, 0x80000001000EFAE0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10002B7B4(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char **v7;
  id v8;
  void *v9;
  BOOL v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  unint64_t v46;
  char v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  char v66;
  id v67;
  uint64_t v68;
  void *v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  id v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  char v83;
  char v84;
  uint64_t v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;
  void *v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  id v115;
  uint64_t v116;
  id v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  char v124;
  char v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  id v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  id v142;
  void *v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  NSObject *v174;
  os_log_type_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  void *v184;
  void *v185;
  uint64_t v186;
  void *v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v194;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199[3];
  _QWORD *v200;

  v200 = _swiftEmptyArrayStorage;
  if (a4 >> 62)
    goto LABEL_190;
  v4 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v5 = v4;
  if (!v4)
  {
LABEL_178:
    swift_bridgeObjectRelease();
    if (qword_100127C40 != -1)
      swift_once(&qword_100127C40, sub_10002B738);
    v171 = type metadata accessor for Logger(0);
    sub_100012A40(v171, (uint64_t)qword_10012C9B8);
    v172 = v200;
    sub_1000101EC((uint64_t)v200);
    v173 = sub_1000101EC(a2);
    v174 = Logger.logObject.getter(v173);
    v175 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v174, v175))
    {
      v176 = swift_slowAlloc(22, -1);
      v177 = swift_slowAlloc(32, -1);
      v199[0] = v177;
      *(_DWORD *)v176 = 134218242;
      v178 = v172[2];
      swift_bridgeObjectRelease();
      v198 = v178;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199);
      swift_bridgeObjectRelease();
      *(_WORD *)(v176 + 12) = 2080;
      swift_bridgeObjectRetain();
      v198 = sub_10000FBEC(a1, a2, v199);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v174, v175, "Generated %ld AssistantIntents on behalf of %s", (uint8_t *)v176, 0x16u);
      swift_arrayDestroy(v177, 1);
      sub_1000133FC(v177);
      sub_1000133FC(v176);

    }
    else
    {

      sub_1000117AC(a2);
      sub_1000117AC((uint64_t)v200);
    }
    swift_beginAccess(&v200, v199, 0, 0);
    return;
  }
LABEL_3:
  v194 = v5;
  objc_opt_self(LNSystemProtocol);
  v6 = 0;
  v185 = (void *)LNSystemEntityProtocolIdentifierUniqueEntity;
  v188 = (void *)LNSystemProtocolIdentifierPropertyUpdater;
  v187 = (void *)LNSystemProtocolIdentifierEntityUpdating;
  v7 = &off_100126000;
  while (1)
  {
    if ((a4 & 0xC000000000000001) != 0)
    {
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a4);
    }
    else
    {
      if (v6 >= *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_186;
      v8 = *(id *)(a4 + 32 + 8 * v6);
    }
    v9 = v8;
    v10 = __OFADD__(v6, 1);
    v11 = v6 + 1;
    if (v10)
    {
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      swift_bridgeObjectRetain();
      v5 = sub_10000737C();
      if (!v5)
        goto LABEL_178;
      goto LABEL_3;
    }
    v12 = sub_10000EC70((uint64_t)v8, v7[429]);
    sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
    v13 = sub_10001377C((uint64_t)v12);

    v15 = sub_100013328(v14, "entityUpdatingProtocol");
    if ((unint64_t)v13 >> 62)
    {
      if (v13 < 0)
        v146 = v13;
      else
        v146 = v13 & 0xFFFFFFFFFFFFFF8;
      sub_10000EC68();
      v16 = _CocoaArrayWrapper.endIndex.getter(v146);
    }
    else
    {
      v16 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      sub_10000EC68();
    }
    v196 = v11;
    v197 = v9;
    if (v16)
    {
      v17 = v13 & 0xC000000000000001;
      if ((v13 & 0xC000000000000001) != 0)
        v18 = (id)sub_1000189A8(0);
      else
        v18 = *(id *)(v13 + 32);
      sub_10001E1D0((uint64_t)v18);
      sub_10001B414();
      if ((v9 & 1) != 0)
        goto LABEL_15;
      if (v16 != 1)
      {
        if (v17)
          v21 = (id)sub_1000189A8(1);
        else
          v21 = *(id *)(v13 + 40);
        sub_10001E1D0((uint64_t)v21);
        sub_10001B414();
        v19 = v9;
        if ((v9 & 1) != 0)
          goto LABEL_16;
        if (v16 != 2)
        {
          v22 = 6;
          while (1)
          {
            if (v17)
              v23 = (id)sub_1000189A8(v22 - 4);
            else
              v23 = *(id *)(v13 + 8 * v22);
            v9 = v23;
            v24 = v22 - 3;
            if (__OFADD__(v22 - 4, 1))
              goto LABEL_185;
            v25 = sub_10001F468();

            if ((v25 & 1) != 0)
              break;
            ++v22;
            v65 = v24 == v16;
            v7 = &off_100126000;
            if (v65)
              goto LABEL_31;
          }
          v7 = &off_100126000;
LABEL_15:
          v19 = v197;
LABEL_16:

          v20 = sub_1000117AC(v13);
          goto LABEL_32;
        }
      }
    }
LABEL_31:

    v26 = sub_1000117AC(v13);
    v19 = v197;
    v27 = sub_10001A454(v26, v7[429]);
    sub_10001377C((uint64_t)v27);

    v29 = sub_100013328(v28, "propertyUpdaterProtocol");
    v30 = sub_100096C80();
    sub_1000100D0();

    if ((v30 & 1) == 0)
    {
      v48 = sub_10001A454(v20, v7[429]);
      v49 = sub_10001377C((uint64_t)v48);

      v51 = sub_100013328(v50, "openEntitySystemProtocol");
      if ((unint64_t)v49 >> 62)
      {
        if (v49 < 0)
          v147 = v49;
        else
          v147 = v49 & 0xFFFFFFFFFFFFFF8;
        sub_10000EC68();
        v52 = _CocoaArrayWrapper.endIndex.getter(v147);
        if (!v52)
        {
LABEL_102:

          sub_1000117AC(v49);
          goto LABEL_176;
        }
      }
      else
      {
        v52 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
        sub_10000EC68();
        if (!v52)
          goto LABEL_102;
      }
      v53 = v49 & 0xC000000000000001;
      if ((v49 & 0xC000000000000001) != 0)
        v54 = (id)sub_1000189A8(0);
      else
        v54 = *(id *)(v49 + 32);
      sub_10001E1D0((uint64_t)v54);
      sub_10001B414();
      v55 = v197;
      if ((v9 & 1) == 0)
      {
        if (v52 == 1)
          goto LABEL_102;
        v140 = v53 ? (id)sub_1000189A8(1) : *(id *)(v49 + 40);
        sub_10001E1D0((uint64_t)v140);
        sub_10001B414();
        v55 = v197;
        if ((v9 & 1) == 0)
        {
          if (v52 == 2)
            goto LABEL_102;
          v141 = 6;
          while (1)
          {
            if (v53)
              v142 = (id)sub_1000189A8(v141 - 4);
            else
              v142 = *(id *)(v49 + 8 * v141);
            v143 = v142;
            v144 = v141 - 3;
            if (__OFADD__(v141 - 4, 1))
              goto LABEL_188;
            v145 = sub_10001F468();

            if ((v145 & 1) != 0)
              break;
            ++v141;
            v65 = v144 == v52;
            v7 = &off_100126000;
            if (v65)
              goto LABEL_102;
          }
          v7 = &off_100126000;
          v55 = v197;
        }
      }

      v56 = sub_1000117AC(v49);
      v57 = sub_10001A454(v56, "parameters");
      sub_10000795C(0, &qword_1001286C8, LNActionParameterMetadata_ptr);
      v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v57);

      v6 = v196;
      if (!((unint64_t)v58 >> 62))
      {
        v59 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v59)
          goto LABEL_45;
LABEL_142:

        goto LABEL_143;
      }
      if (v58 < 0)
        v148 = v58;
      else
        v148 = v58 & 0xFFFFFFFFFFFFFF8;
      sub_10000EC68();
      v59 = _CocoaArrayWrapper.endIndex.getter(v148);
      sub_1000117B4();
      if (!v59)
        goto LABEL_142;
LABEL_45:
      if (v59 >= 1)
      {
        v60 = 0;
        while (1)
        {
          if ((v58 & 0xC000000000000001) != 0)
            v61 = (id)sub_1000189A8(v60);
          else
            v61 = *(id *)(v58 + 8 * v60 + 32);
          v62 = v61;
          v63 = sub_100004ED8(v61);
          if (!v64)
            goto LABEL_71;
          v65 = v63 == 0x746567726174 && v64 == 0xE600000000000000;
          if (v65)
          {
            sub_1000059A8();
          }
          else
          {
            v66 = sub_100017C20(v63, v64);
            sub_1000059A8();
            if ((v66 & 1) == 0)
              goto LABEL_71;
          }
          v67 = objc_msgSend(v62, "valueType", v179);
          v68 = objc_opt_self(LNEntityValueType);
          v69 = (void *)sub_100013330(v68);
          if (!v69)
          {

            goto LABEL_68;
          }
          v70 = objc_msgSend(v69, "identifier");
          v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);

          if (!a3[2] || (v72 = sub_100016064(v71), (v73 & 1) == 0))
          {

            goto LABEL_65;
          }
          v74 = *(id *)(a3[7] + 8 * v72);
          v75 = swift_bridgeObjectRelease();
          v76 = sub_10000EC70(v75, "systemProtocolMetadata");
          type metadata accessor for LNSystemEntityProtocolIdentifier(0);
          v78 = v77;
          v79 = sub_10001BE7C(&qword_100128730);
          v80 = sub_10002D80C(&qword_100128408, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemEntityProtocolIdentifier, (uint64_t)&unk_1000EF744);
          v81 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v76, v78, v79, v80);

          if (!*(_QWORD *)(v81 + 16))
          {

LABEL_65:
            swift_bridgeObjectRelease();
LABEL_66:
            v55 = v197;
LABEL_68:
            v95 = objc_msgSend(v62, "valueType");
            v96 = objc_opt_self(LNLinkEnumerationValueType);
            if (swift_dynamicCastObjCClass(v95, v96))
            {

              v98 = sub_10001A454(v97, "identifier");
              v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
              v101 = v100;

              sub_10002CFF4(a1, a2, v99, v101, 0);
              swift_bridgeObjectRelease();
              sub_100058F28();
            }
            else
            {

              v62 = v95;
            }
            goto LABEL_71;
          }
          v82 = v185;
          sub_10003149C();
          v84 = v83;
          sub_1000059A8();

          if ((v84 & 1) == 0)
          {

            goto LABEL_66;
          }
          v86 = sub_10000EC70(v85, "displayRepresentation");
          v87 = objc_msgSend(v86, "name");

          v88 = objc_msgSend(v197, "identifier");
          v189 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
          v90 = v89;

          v91 = v87;
          v92 = v87;
          v93 = v74;
          v94 = v92;
          sub_10002CFF4(a1, a2, v189, v90, v91);
          v55 = v197;
          swift_bridgeObjectRelease();

          sub_100058F28();
LABEL_71:
          ++v60;

          if (v59 == v60)
          {

            sub_1000117B4();
            v139 = v194;
            v6 = v196;
            v7 = &off_100126000;
            goto LABEL_177;
          }
        }
      }
      goto LABEL_189;
    }
LABEL_32:
    v31 = sub_10001A454(v20, "systemProtocolMetadata");
    type metadata accessor for LNSystemProtocolIdentifier(0);
    v32 = sub_10001BE7C(&qword_100128730);
    sub_10002D80C((unint64_t *)&unk_1001281D0, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&unk_1000EF8D8);
    v33 = sub_10000BFFC((uint64_t)v31);

    if (!*(_QWORD *)(v33 + 16))
      goto LABEL_76;
    v34 = v188;
    v35 = sub_10003149C();
    if ((v36 & 1) == 0)
    {

LABEL_76:
      v102 = sub_1000059A8();
      goto LABEL_77;
    }
    v37 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v35);
    swift_unknownObjectRetain(v37);

    sub_1000059A8();
    v38 = objc_opt_self(LNPropertyUpdaterSystemProtocolMetadata);
    v39 = (void *)sub_100013330(v38);
    if (v39)
    {
      v40 = v39;
      v41 = objc_msgSend(v39, "entityIdentifier");
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v44 = v43;

      if (a3[2] && (v45 = a3, v46 = sub_100016064(v42), (v47 & 1) != 0))
        sub_100016380(v46);
      else
        v45 = 0;
      sub_1000117B4();
      v186 = sub_100016774((uint64_t)objc_msgSend(v40, "entityProperty"));
      v190 = v116;
      swift_unknownObjectRelease(v37);

      if (!v45)
      {

        goto LABEL_107;
      }
      v115 = v45;
      goto LABEL_88;
    }
    v102 = swift_unknownObjectRelease(v37);
LABEL_77:
    v103 = sub_10001A454(v102, "systemProtocolMetadata");
    v104 = sub_10000BFFC((uint64_t)v103);

    if (!*(_QWORD *)(v104 + 16))
      goto LABEL_84;
    v105 = v187;
    v106 = sub_10003149C();
    if ((v107 & 1) == 0)
    {

LABEL_84:
      sub_1000059A8();

LABEL_176:
      v139 = v194;
      v6 = v196;
      goto LABEL_177;
    }
    v108 = *(_QWORD *)(*(_QWORD *)(v104 + 56) + 8 * v106);
    swift_unknownObjectRetain(v108);

    sub_1000059A8();
    v109 = objc_opt_self(LNEntityUpdatingSystemProtocolMetadata);
    v110 = (void *)swift_dynamicCastObjCClass(v108, v109);
    if (!v110)
    {

      sub_100018358();
LABEL_107:
      swift_bridgeObjectRelease();
      goto LABEL_176;
    }
    v111 = objc_msgSend(v110, "entityIdentifier");
    v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);

    if (!a3[2] || (v45 = a3, v113 = sub_100016064(v112), (v114 & 1) == 0))
    {

      sub_1000100D0();
      sub_100018358();
      goto LABEL_176;
    }
    v115 = sub_100016380(v113);
    sub_1000100D0();
    sub_100018358();
    v186 = 0;
    v190 = 0;
LABEL_88:
    v117 = v115;
    v118 = objc_msgSend(v117, "systemProtocolMetadata");
    type metadata accessor for LNSystemEntityProtocolIdentifier(0);
    v120 = v119;
    v121 = sub_10002D80C(&qword_100128408, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemEntityProtocolIdentifier, (uint64_t)&unk_1000EF744);
    v122 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v118, v120, v32, v121);

    if (*(_QWORD *)(v122 + 16))
      break;

    sub_1000059A8();
    v6 = v196;
LABEL_112:

LABEL_143:
    swift_bridgeObjectRelease();
    v139 = v194;
LABEL_177:
    if (v6 == v139)
      goto LABEL_178;
  }
  v123 = v185;
  sub_10003149C();
  v125 = v124;
  sub_1000059A8();

  v6 = v196;
  if ((v125 & 1) == 0)
  {

    goto LABEL_112;
  }
  v184 = v117;
  v183 = v45;
  v127 = sub_10001A454(v126, "parameters");
  sub_10000795C(0, &qword_1001286C8, LNActionParameterMetadata_ptr);
  v128 = sub_10001A01C();

  if (!((unint64_t)v128 >> 62))
  {
    v129 = *(_QWORD *)((v128 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v129)
      goto LABEL_92;
LABEL_148:
    sub_1000100D0();
    v131 = _swiftEmptyArrayStorage;
LABEL_149:
    v149 = sub_10002C8A8((uint64_t)v131);
    v150 = sub_10001A454((uint64_t)v149, "identifier");
    v181 = sub_100016774((uint64_t)v150);
    v182 = v151;

    v153 = sub_10000FE4C(v152, "identifier");
    v180 = sub_100016774((uint64_t)v153);
    v155 = v154;

    v157 = sub_10000FE4C(v156, "properties");
    sub_10000795C(0, &qword_100128738, LNPropertyMetadata_ptr);
    v158 = sub_10001A01C();

    if (!(v158 >> 62))
    {
      v159 = *(_QWORD *)((v158 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v159)
        goto LABEL_151;
      goto LABEL_174;
    }
    swift_bridgeObjectRetain();
    v159 = sub_10000737C();
    if (!v159)
    {
LABEL_174:
      v169 = sub_1000117AC(v158);
      v162 = 0;
      v168 = a2;
LABEL_175:
      v170 = sub_10000FE4C(v169, "title");

      sub_10002C934(a1, v168, v181, v182, v180, v155, v170, (uint64_t)v149);
      sub_1000059A8();
      sub_1000100D0();

      swift_bridgeObjectRelease();
      sub_100058F28();
      swift_bridgeObjectRelease();

      goto LABEL_176;
    }
LABEL_151:
    v179 = v149;
    v160 = 4;
    while (2)
    {
      if ((v158 & 0xC000000000000001) != 0)
        v161 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v160 - 4, v158);
      else
        v161 = *(id *)(v158 + 8 * v160);
      v162 = v161;
      v163 = v160 - 3;
      if (__OFADD__(v160 - 4, 1))
        goto LABEL_187;
      v164 = sub_10002D7AC(v161);
      if (v165)
      {
        if (v190)
        {
          if (v164 == v186 && v165 == v190)
          {
            sub_1000117AC(v158);
            v169 = sub_1000117B4();
LABEL_171:
            v168 = a2;
LABEL_172:
            v19 = v197;
            goto LABEL_175;
          }
          v167 = _stringCompareWithSmolCheck(_:_:expecting:)(v164, v165, v186, v190, 0);
          sub_1000117B4();
          if ((v167 & 1) != 0)
            goto LABEL_169;
LABEL_165:

        }
        else
        {

          sub_1000117B4();
        }
        ++v160;
        v168 = a2;
        if (v163 == v159)
        {
          v169 = sub_1000117AC(v158);
          v162 = 0;
          goto LABEL_172;
        }
        continue;
      }
      break;
    }
    if (!v190)
    {
LABEL_169:
      v169 = sub_1000117AC(v158);
      goto LABEL_171;
    }
    goto LABEL_165;
  }
  if (v128 < 0)
    v127 = (id)v128;
  else
    v127 = (id)(v128 & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  v129 = sub_10000737C();
  sub_1000100D0();
  if (!v129)
    goto LABEL_148;
LABEL_92:
  v199[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_10005254C();
  if ((v129 & 0x8000000000000000) == 0)
  {
    v130 = 0;
    v131 = (_QWORD *)v199[0];
    do
    {
      if ((v128 & 0xC000000000000001) != 0)
        v132 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v130, v128);
      else
        v132 = *(id *)(v128 + 8 * v130 + 32);
      v133 = v132;
      v127 = (id)sub_100004ED8(v132);
      v135 = v134;
      v136 = objc_msgSend(v133, "title");

      v199[0] = (uint64_t)v131;
      v137 = v131[2];
      if (v137 >= v131[3] >> 1)
      {
        sub_10005254C();
        v131 = (_QWORD *)v199[0];
      }
      ++v130;
      v131[2] = v137 + 1;
      v138 = &v131[3 * v137];
      v138[4] = v127;
      v138[5] = v135;
      v138[6] = v136;
      v7 = &off_100126000;
      v19 = v197;
    }
    while (v129 != v130);
    sub_1000100D0();
    goto LABEL_149;
  }
  __break(1u);
}

_QWORD *sub_10002C8A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_10001BE7C(&qword_100128770);
    v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  }
  else
  {
    v4 = _swiftEmptyDictionarySingleton;
  }
  v7 = v4;
  sub_10002D5D8(a1, 1, &v7);
  v5 = v7;
  if (v1)
    swift_release();
  return v5;
}

void sub_10002C934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  BOOL v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t inited;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  id v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  _QWORD *v83;
  char v84[48];
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[2];
  _QWORD v88[2];

  sub_10001BE7C(&qword_100128740);
  sub_1000179E8();
  __chkstk_darwin(v11);
  sub_10001765C();
  v77 = v13 - v12;
  v14 = a8 + 64;
  v15 = 1 << *(_BYTE *)(a8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(a8 + 64);
  v18 = (unint64_t)(v15 + 63) >> 6;
  sub_10000EC68();
  v19 = 0;
  v83 = _swiftEmptyArrayStorage;
  while (v17)
  {
    v20 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v21 = v20 | (v19 << 6);
LABEL_20:
    v25 = (uint64_t *)(*(_QWORD *)(a8 + 48) + 16 * v21);
    v26 = v25[1];
    if (v26)
    {
      v27 = *(void **)(*(_QWORD *)(a8 + 56) + 8 * v21);
      if (v27)
      {
        v28 = *v25;
        v29 = *v25 == 0x746567726174 && v26 == 0xE600000000000000;
        if (!v29 && (sub_100017C20(*v25, v25[1]) & 1) == 0)
        {
          v75 = a6;
          v71 = sub_10001DCF0();
          sub_100014360(v77, 1, 1, v71);
          v30 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
          v76 = a7;
          v72 = v27;
          swift_bridgeObjectRetain();
          sub_100017E00();
          v73 = sub_10008E4CC(v31, v32, v33, v34, v35, v36, v77);
          v88[0] = 0xD000000000000024;
          v88[1] = 0x80000001000F39E0;
          v86 = v26;
          v87[0] = 0x65756C6176;
          v87[1] = 0xE500000000000000;
          v85 = v28;
          sub_100012F00();
          v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v87, &v85, 0, 0, 0, 1, type metadata for String, type metadata for String);
          v39 = v38;
          swift_bridgeObjectRelease();
          sub_100014360(v77, 1, 1, v71);
          objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
          sub_10000BFF4();
          v40 = sub_10008E4CC(v37, v39, v37, v39, 0, 0, v77);
          v41 = v76;
          if (!v76)
            v41 = v72;
          v68 = v41;
          v42 = sub_10001BE7C(&qword_100128750);
          v43 = sub_10001ABD0(v42);
          *(_OWORD *)(v43 + 16) = xmmword_1000EFAD0;
          *(_QWORD *)(v43 + 32) = v73;
          *(_QWORD *)(v43 + 40) = v40;
          v88[0] = v43;
          specialized Array._endMutation()(v43);
          v69 = v88[0];
          v44 = sub_10001BE7C(&qword_100128758);
          inited = swift_initStackObject(v44, v84);
          *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
          *(_QWORD *)(inited + 32) = 0xD000000000000011;
          *(_QWORD *)(inited + 40) = 0x80000001000F3A10;
          v46 = sub_100017650(v42);
          *(_OWORD *)(v46 + 16) = xmmword_1000EFAF0;
          *(_QWORD *)(v46 + 32) = v68;
          v88[0] = v46;
          v47 = v76;
          swift_bridgeObjectRetain();
          v73;
          specialized Array._endMutation()(v40);
          *(_QWORD *)(inited + 48) = v88[0];
          v74 = v68;
          v48 = sub_10001BE7C(&qword_100128760);
          v49 = Dictionary.init(dictionaryLiteral:)(inited, type metadata for String, v48, &protocol witness table for String);
          v50 = sub_10000795C(0, &qword_100128768, LNValue_ptr);
          v51 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, type metadata for String, v50, &protocol witness table for String);
          v52 = objc_allocWithZone((Class)LNAssistantIntentMetadata);
          v53 = sub_10001B278(a3, a4, v69, v49, v51);
          sub_1000101EC(a2);
          v54 = v53;
          if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
          {
            sub_10002F988();
            v83 = v65;
          }
          v55 = v83[2];
          if (v55 >= v83[3] >> 1)
          {
            sub_10001888C();
            v83 = v66;
          }
          v83[2] = v55 + 1;
          v56 = &v83[3 * v55];
          v56[4] = a1;
          v56[5] = a2;
          v70 = v54;
          v56[6] = v54;
          sub_10002D3A4(a1, a2, a5, v75, v74);
          v58 = v57;
          v60 = v59;
          v61 = v83[2];
          v62 = v83[3];
          swift_bridgeObjectRetain();
          v63 = v60;
          if (v61 >= v62 >> 1)
          {
            sub_10001888C();
            v83 = v67;
          }
          v83[2] = v61 + 1;
          v64 = &v83[3 * v61];
          v64[4] = a1;
          v64[5] = v58;
          v64[6] = v63;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          sub_100005880((uint64_t)v88);
          sub_100005880((uint64_t)&v86);
          sub_100005880((uint64_t)v87);

          a7 = v76;
          a6 = v75;
        }
      }
    }
  }
  v22 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v22 >= v18)
    goto LABEL_36;
  v23 = *(_QWORD *)(v14 + 8 * v22);
  ++v19;
  if (v23)
    goto LABEL_19;
  v19 = v22 + 1;
  if (v22 + 1 >= v18)
    goto LABEL_36;
  v23 = *(_QWORD *)(v14 + 8 * v19);
  if (v23)
    goto LABEL_19;
  v19 = v22 + 2;
  if (v22 + 2 >= v18)
    goto LABEL_36;
  v23 = *(_QWORD *)(v14 + 8 * v19);
  if (v23)
  {
LABEL_19:
    v17 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v19 << 6);
    goto LABEL_20;
  }
  v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_36:
    swift_release();
    sub_100013308();
    return;
  }
  v23 = *(_QWORD *)(v14 + 8 * v24);
  if (v23)
  {
    v19 = v24;
    goto LABEL_19;
  }
  while (1)
  {
    v19 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v19 >= v18)
      goto LABEL_36;
    v23 = *(_QWORD *)(v14 + 8 * v19);
    ++v24;
    if (v23)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
}

void sub_10002CFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[56];
  uint64_t v72;

  sub_10001BE7C(&qword_100128740);
  sub_1000179E8();
  __chkstk_darwin(v10);
  sub_10001765C();
  v13 = v12 - v11;
  if (a5)
  {
    v70 = a1;
    v14 = sub_10001DCF0();
    sub_1000117BC(v14);
    v15 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
    v16 = a5;
    sub_10001BFCC();
    v23 = sub_10008E4CC(v17, v18, v19, v20, v21, v22, v13);
    v24 = sub_10001BE7C(&qword_100128750);
    v25 = sub_100017650(v24);
    *(_OWORD *)(v25 + 16) = xmmword_1000EFAF0;
    *(_QWORD *)(v25 + 32) = v23;
    sub_100018648(v25);
    v26 = v72;
    v27 = sub_10001BE7C(&qword_100128758);
    inited = swift_initStackObject(v27, v71);
    *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
    *(_QWORD *)(inited + 32) = 0xD000000000000011;
    *(_QWORD *)(inited + 40) = 0x80000001000F3A10;
    v29 = sub_100017650(v24);
    *(_OWORD *)(v29 + 16) = xmmword_1000EFAF0;
    *(_QWORD *)(v29 + 32) = v16;
    v72 = v29;
    sub_10000BFF4();
    v30 = v23;
    specialized Array._endMutation()(v30);
    *(_QWORD *)(inited + 48) = v72;
    v31 = v16;
    v32 = sub_10001BE7C(&qword_100128760);
    v34 = sub_10001F56C(inited, v33, v32);
    v35 = sub_1000100D8(v34, &qword_100128768, LNValue_ptr);
    v37 = sub_10001F56C((uint64_t)_swiftEmptyArrayStorage, v36, v35);
    v38 = objc_allocWithZone((Class)LNAssistantIntentMetadata);
    v39 = sub_10001B278(a3, a4, v26, v34, v37);
    sub_10000EC68();
    v40 = v39;
    sub_10002F988();
    v42 = v41;
    v43 = *(_QWORD *)(v41 + 16);
    if (v43 >= *(_QWORD *)(v41 + 24) >> 1)
    {
      sub_10002D858();
      v42 = v68;
    }
    *(_QWORD *)(v42 + 16) = v43 + 1;
    v44 = (_QWORD *)(v42 + 24 * v43);
    v44[4] = v70;
    v44[5] = a2;
    v44[6] = v40;

  }
  else
  {
    v45 = sub_10001DCF0();
    sub_1000117BC(v45);
    v46 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
    sub_100017E00();
    v53 = sub_10008E4CC(v47, v48, v49, v50, v51, v52, v13);
    v54 = sub_10001BE7C(&qword_100128750);
    v55 = sub_100017650(v54);
    *(_OWORD *)(v55 + 16) = xmmword_1000EFAF0;
    *(_QWORD *)(v55 + 32) = v53;
    sub_100018648(v55);
    sub_10000BFF4();
    v30 = v53;
    v56 = sub_10001BE7C(&qword_100128760);
    v58 = sub_100018B5C(v56, v57, v56);
    v59 = sub_1000100D8(v58, &qword_100128768, LNValue_ptr);
    v61 = sub_100018B5C(v59, v60, v59);
    v62 = objc_allocWithZone((Class)LNAssistantIntentMetadata);
    v63 = sub_10001B278(a3, a4, v72, v58, v61);
    sub_10000EC68();
    v31 = v63;
    sub_10002F988();
    v65 = v64;
    v66 = *(_QWORD *)(v64 + 16);
    if (v66 >= *(_QWORD *)(v64 + 24) >> 1)
    {
      sub_10002D858();
      v65 = v69;
    }
    *(_QWORD *)(v65 + 16) = v66 + 1;
    v67 = (_QWORD *)(v65 + 24 * v66);
    v67[4] = a1;
    v67[5] = a2;
    v67[6] = v31;
  }

  sub_100013308();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_10002D3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  _BYTE v44[56];
  uint64_t v45;

  sub_10001BE7C(&qword_100128740);
  sub_1000179E8();
  __chkstk_darwin(v7);
  sub_10001765C();
  v10 = v9 - v8;
  sub_10001DCF0();
  sub_1000158B8();
  v11 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  sub_100017E00();
  v18 = sub_10008E4CC(v12, v13, v14, v15, v16, v17, v10);
  sub_1000158B8();
  v19 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  sub_10001BFCC();
  v26 = sub_10008E4CC(v20, v21, v22, v23, v24, v25, v10);
  v27 = sub_10001BE7C(&qword_100128750);
  v28 = sub_10001ABD0(v27);
  *(_OWORD *)(v28 + 16) = xmmword_1000EFAD0;
  *(_QWORD *)(v28 + 32) = v18;
  *(_QWORD *)(v28 + 40) = v26;
  sub_100018648(v28);
  v29 = v45;
  v30 = sub_10001BE7C(&qword_100128758);
  inited = swift_initStackObject(v30, v44);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(inited + 32) = 0xD000000000000011;
  *(_QWORD *)(inited + 40) = 0x80000001000F3A10;
  v32 = sub_100017650(v27);
  *(_OWORD *)(v32 + 16) = xmmword_1000EFAF0;
  *(_QWORD *)(v32 + 32) = a5;
  v45 = v32;
  sub_10000BFF4();
  v33 = v18;
  v34 = v26;
  specialized Array._endMutation()(v34);
  *(_QWORD *)(inited + 48) = v45;
  v35 = a5;
  v36 = sub_10001BE7C(&qword_100128760);
  v38 = sub_10002D84C(inited, v37, v36);
  v39 = sub_1000100D8(v38, &qword_100128768, LNValue_ptr);
  v41 = sub_10002D84C((uint64_t)_swiftEmptyArrayStorage, v40, v39);
  v42 = objc_allocWithZone((Class)LNAssistantIntentMetadata);
  sub_10001B278(a3, a4, v29, v38, v41);

  sub_10000EC68();
}

uint64_t sub_10002D5D8(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  id *i;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  id v28;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  for (i = (id *)(a1 + 48); ; i += 3)
  {
    v8 = (uint64_t)*(i - 2);
    v7 = (uint64_t)*(i - 1);
    v9 = *i;
    v10 = (_QWORD *)*a3;
    v28 = *i;
    swift_bridgeObjectRetain();
    v12 = sub_1000314A0(v8);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    if (__OFADD__(v13, v14))
      break;
    v15 = v11;
    if (v10[3] >= v13 + v14)
    {
      if ((a2 & 1) == 0)
      {
        sub_10001BE7C(&qword_100128778);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_100031EF8();
      v16 = sub_1000314A0(v8);
      if ((v15 & 1) != (v17 & 1))
        goto LABEL_18;
      v12 = v16;
    }
    v18 = (_QWORD *)*a3;
    if ((v15 & 1) != 0)
    {
      v19 = *(void **)(v18[7] + 8 * v12);
      v20 = v19;
      swift_bridgeObjectRelease();

      v21 = v18[7];
      *(_QWORD *)(v21 + 8 * v12) = v19;
    }
    else
    {
      v18[(v12 >> 6) + 8] |= 1 << v12;
      v22 = (uint64_t *)(v18[6] + 16 * v12);
      *v22 = v8;
      v22[1] = v7;
      *(_QWORD *)(v18[7] + 8 * v12) = v9;
      v23 = v18[2];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (v24)
        goto LABEL_17;
      v18[2] = v25;
    }
    a2 = 1;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  v27 = sub_10001BE7C((uint64_t *)&unk_100128780);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v27);
  __break(1u);
  return result;
}

uint64_t sub_10002D7AC(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "identifier");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_10002D80C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002D84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return Dictionary.init(dictionaryLiteral:)(a1, v3, a3, v4);
}

void sub_10002D858()
{
  sub_10002F988();
}

uint64_t sub_10002D864(uint64_t a1)
{
  _QWORD v2[2];

  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 96);
}

void sub_10002D8B4(uint64_t a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  char v6;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_10000DD28(a1), (v6 & 1) != 0))
  {
    sub_100019CC4(*(_QWORD *)(v3 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    sub_10000BFBC();
  }
}

uint64_t sub_10002D8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  char v7;

  if (*(_QWORD *)(a5 + 16) && (v6 = sub_10003155C(), (v7 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(a5 + 56) + 16 * v6);
  else
    return 0;
}

uint64_t sub_10002D944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = sub_10000DD28(a1);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  sub_1000101B0();
  return v6;
}

void sub_10002D990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  id v6;

  if (*(_QWORD *)(a3 + 16))
  {
    v4 = sub_10000DD28(a1);
    if ((v5 & 1) != 0)
      v6 = *(id *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  }
  sub_10000BFBC();
}

void sub_10002D9D0(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  char v6;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_100031504(a1), (v6 & 1) != 0))
  {
    sub_100019CC4(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    sub_10000BFBC();
  }
}

void sub_10002DA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16))
  {
    v4 = sub_10000DD28(a1);
    if ((v5 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4));
  }
  sub_10000BFBC();
}

uint64_t sub_10002DA50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_10000DD28(a1), (v6 & 1) != 0))
  {
    v7 = v5;
    v8 = *(_QWORD *)(v3 + 56);
    v9 = sub_1000117E0();
    sub_100035D70(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v7, a3);
    v10 = a3;
    v11 = 0;
    v12 = v9;
  }
  else
  {
    v12 = sub_1000117E0();
    v10 = a3;
    v11 = 1;
  }
  return sub_100014360(v10, v11, 1, v12);
}

uint64_t sub_10002DAD0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = Int64.datatypeValue.getter(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10002DAFC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10002DB08()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = _CFXPCCreateCFObjectFromXPCObject(*v0);
  if (result)
  {
    v4 = result;
    v2 = sub_10001BE7C(&qword_100128A48);
    if (swift_dynamicCast(&v3, &v4, (char *)&type metadata for Swift.AnyObject + 8, v2, 6))
      return v3;
    else
      return 0;
  }
  return result;
}

uint64_t sub_10002DB68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v0 = sub_10002DB08();
  if (!v0)
  {
    v6 = 0u;
    v7 = 0u;
    goto LABEL_8;
  }
  sub_10002D8B4(1701667150, v0, &v6);
  sub_1000117B4();
  if (!*((_QWORD *)&v7 + 1))
  {
LABEL_8:
    sub_1000131A8((uint64_t)&v6, &qword_100128A40);
    return 0;
  }
  if (sub_10001F8E4((uint64_t)&v5, v1, (uint64_t)&type metadata for Any + 8, (uint64_t)type metadata for String, v2, v3))return v5;
  else
    return 0;
}

uint64_t sub_10002DC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v0 = sub_10002DB08();
  if (!v0)
  {
    v7 = 0u;
    v8 = 0u;
    goto LABEL_7;
  }
  sub_10002D8B4(0x6F666E4972657355, v0, &v7);
  sub_1000117B4();
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_7:
    sub_1000131A8((uint64_t)&v7, &qword_100128A40);
    return 0;
  }
  v1 = sub_10001BE7C(&qword_100128A48);
  if (sub_10001F8E4((uint64_t)&v6, v2, (uint64_t)&type metadata for Any + 8, v1, v3, v4))
    return v6;
  else
    return 0;
}

uint64_t sub_10002DCB0()
{
  _QWORD *v0;
  _QWORD *v1;

  v1[3] = v0;
  v1[4] = *v0;
  v1[5] = *v0;
  return swift_task_switch(sub_10002DCD8, v0, 0);
}

uint64_t sub_10002DCD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 88) + 8))();
  v1 = *(_QWORD *)(v10 + 16);
  if (v1)
  {
    v2 = type metadata accessor for XPCEventDispatcher();
    v3 = (uint64_t *)(v10 + 56);
    do
    {
      v4 = *(_QWORD *)(v0 + 32);
      v5 = *(v3 - 3);
      v6 = *(v3 - 2);
      v8 = *(v3 - 1);
      v7 = *v3;
      *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 24);
      swift_bridgeObjectRetain(v6);
      sub_1000101B0();
      swift_retain();
      sub_1000355F0(v5, v6, v8, v7, v0 + 16, v2, v4, (uint64_t)&off_10011B000);
      swift_bridgeObjectRelease(v6);
      sub_1000059A8();
      swift_release();
      v3 += 4;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002DDD0(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[26] = a1;
  v2[27] = v1;
  v3 = *v1;
  v2[28] = *v1;
  v4 = *(_QWORD *)(v3 + 80);
  v2[29] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[30] = v5;
  v2[31] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v2[32] = v6;
  v2[33] = *(_QWORD *)(v6 - 8);
  v2[34] = sub_10003628C();
  v2[35] = sub_10003628C();
  v2[36] = sub_10003628C();
  v2[37] = sub_10003628C();
  return swift_task_switch(sub_10002DE74, v1, 0);
}

uint64_t sub_10002DE74()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t MetatypeMetadata;
  Swift::String v25;
  Swift::String v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_log_t log;
  os_log_t loga;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t type;
  uint64_t typea;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;

  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 232);
  v98 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  String.init<A>(describing:)(v0 + 160, v98);
  result = LNLogSubsystem;
  if (!LNLogSubsystem)
  {
    __break(1u);
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  v92 = v0 + 120;
  v2 = *(_QWORD *)(v0 + 208);
  v3 = String.init(cString:)(LNLogSubsystem);
  sub_10001B594(v3, v4);
  sub_100019A60(v2, v0 + 16);
  sub_100019A60(v2, v0 + 56);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  LODWORD(type) = v7;
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 296);
  v10 = *(_QWORD *)(v0 + 256);
  v94 = *(_QWORD *)(v0 + 264);
  if (v8)
  {
    v80 = v0 + 192;
    log = v6;
    v88 = *(_QWORD *)(v0 + 296);
    v11 = sub_100011780(22);
    v84 = sub_100011780(64);
    v100 = v84;
    *(_DWORD *)v11 = 136315394;
    v86 = v10;
    v12 = sub_10000E858((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v14 = v12[3];
    v13 = v12[4];
    sub_10000EC68();
    *(_QWORD *)(v0 + 192) = sub_10000FBEC(v14, v13, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200);
    sub_1000117B4();
    sub_10000E87C((_QWORD *)(v0 + 16));
    *(_WORD *)(v11 + 12) = 2080;
    v15 = sub_10000E858((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v16 = v15[1];
    v17 = v15[2];
    sub_100016794();
    *(_QWORD *)(v0 + 200) = sub_10000FBEC(v16, v17, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208);
    swift_bridgeObjectRelease(v17);
    sub_10000E87C((_QWORD *)(v0 + 56));
    _os_log_impl((void *)&_mh_execute_header, v6, (os_log_type_t)type, "Received incoming XPC event \"%s\" from stream \"%s\"", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v84, 2);
    sub_1000133FC(v84);
    sub_1000133FC(v11);

    v18 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
    v20 = v86;
    v19 = v88;
  }
  else
  {
    sub_10000E87C((_QWORD *)(v0 + 16));
    sub_10000E87C((_QWORD *)(v0 + 56));

    v18 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
    v19 = v9;
    v20 = v10;
  }
  v95 = (uint64_t)v18;
  v18(v19, v20);
  v21 = *(_QWORD *)(v0 + 248);
  v22 = *(_QWORD *)(v0 + 232);
  v23 = *(_QWORD **)(v0 + 208);
  v100 = 0;
  v101 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v101);
  v100 = 0xD000000000000010;
  v101 = 0x80000001000F3BB0;
  *(_QWORD *)(v0 + 120) = v22;
  MetatypeMetadata = swift_getMetatypeMetadata(v22);
  v25._countAndFlagsBits = String.init<A>(describing:)(v92, MetatypeMetadata);
  String.append(_:)(v25);
  sub_1000059B0();
  v26._countAndFlagsBits = 46;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27 = sub_10000E858(v23, v23[3]);
  v28 = v27[3];
  v29 = (void *)v27[4];
  sub_10000C020();
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  sub_1000059B0();
  v31 = String.utf8CString.getter(v100, v101);
  sub_1000059A8();
  v32 = os_transaction_create(v31 + 32);
  sub_100018B6C();
  sub_10000E1AC(v21);
  *(_QWORD *)(v0 + 176) = *(_QWORD *)(v0 + 232);
  v41 = sub_1000362CC(v0 + 176, v33, v34, v35, v36, v37, v38, v39, v78, v80, (uint64_t)log, v84, v86, v88, type, v92, v95, v98);
  result = LNLogSubsystem;
  if (!LNLogSubsystem)
    goto LABEL_13;
  v42 = v40;
  v43 = v32;
  v44 = String.init(cString:)(LNLogSubsystem);
  v46 = Logger.init(subsystem:category:)(v44, v45, v41, v42);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)sub_100011780(2);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "[XPCEventService] Deferring to service handler", v49, 2u);
    sub_1000133FC((uint64_t)v49);
  }
  v50 = *(_QWORD *)(v0 + 288);
  v51 = *(_QWORD *)(v0 + 256);
  v53 = *(_QWORD *)(v0 + 224);
  v52 = *(_QWORD *)(v0 + 232);
  v54 = *(_QWORD *)(v0 + 208);

  v96(v50, v51);
  v55 = v54;
  v56 = v43;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 + 88) + 16))(v55, v43, v52);
  *(_QWORD *)(v0 + 184) = v52;
  sub_1000362CC(v0 + 184, v57, v58, v59, v60, v61, v62, v63, v79, v81, (uint64_t)loga, v85, v87, v89, typea, v93, (uint64_t)v96, v99);
  result = LNLogSubsystem;
  if (!LNLogSubsystem)
    goto LABEL_14;
  v64 = String.init(cString:)(LNLogSubsystem);
  v66 = sub_10001B594(v64, v65);
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v67, v68))
  {
    v69 = (uint8_t *)sub_100011780(2);
    *(_WORD *)v69 = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "[XPCEventService] Event serviced", v69, 2u);
    sub_1000133FC((uint64_t)v69);
  }
  v70 = *(_QWORD *)(v0 + 280);
  v72 = *(_QWORD *)(v0 + 248);
  v71 = *(_QWORD *)(v0 + 256);
  v73 = *(_QWORD *)(v0 + 232);
  v74 = *(_QWORD *)(v0 + 240);
  swift_unknownObjectRelease(v56);

  v97(v70, v71);
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v73);
  v76 = *(_QWORD *)(v0 + 272);
  v75 = *(_QWORD *)(v0 + 280);
  v77 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  sub_1000158B0();
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002E594()
{
  uint64_t v0;

  return sub_10002F624(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10002E5A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10002E5C8()
{
  uint64_t v0;

  sub_10002E5A4();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for XPCEventEntryPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCEventEntryPoint);
}

void sub_10002E5EC()
{
  sub_1000059CC();
}

void sub_10002E5F4()
{
  sub_10002E5EC();
}

uint64_t sub_10002E60C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1001289D4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000361DC;
  return sub_10002DDD0(a1);
}

uint64_t sub_10002E65C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10012890C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000361DC;
  return sub_10002DCB0();
}

uint64_t sub_10002E6A4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100128904);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10002E6E8;
  return sub_10002E594();
}

uint64_t sub_10002E6E8()
{
  uint64_t v0;

  sub_10001B058();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

_QWORD *sub_10002E70C()
{
  uint64_t v0;
  _QWORD *result;

  v0 = type metadata accessor for XPCEventDispatcher();
  swift_allocObject(v0, 40, 7);
  result = sub_10002E748();
  qword_100128790 = (uint64_t)result;
  return result;
}

_QWORD *sub_10002E748()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = &_swiftEmptySetSingleton;
  v12 = sub_10001BE7C(&qword_100128930);
  v1[3] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v12, &protocol witness table for String);
  v13 = sub_10000795C(0, (unint64_t *)&qword_1001289B0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v13);
  v20 = _swiftEmptyArrayStorage;
  sub_100025AFC((unint64_t *)&qword_100128190, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = v14;
  v16 = sub_10001BE7C((uint64_t *)&unk_1001289C0);
  v17 = sub_100035D2C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v6, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000021, 0x80000001000F3B80, v11, v8, v5, 0);
  return v1;
}

uint64_t sub_10002E940(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[24];
  _BYTE v23[56];
  _BYTE v24[56];

  sub_10002EAC4(a2, a3);
  v12 = sub_10001BE7C(&qword_100128910);
  inited = swift_initStackObject(v12, v24);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  v14 = sub_10001BE7C(&qword_100128918);
  v15 = swift_initStackObject(v14, v23);
  *(_OWORD *)(v15 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v15 + 32) = a4;
  *(_QWORD *)(v15 + 40) = a5;
  v16 = sub_10001BE7C(&qword_100128920);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1000EFAE0;
  sub_100019A60(a6, v17 + 32);
  *(_QWORD *)(v15 + 48) = v17;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  v18 = sub_10001BE7C(&qword_100128928);
  *(_QWORD *)(inited + 48) = Dictionary.init(dictionaryLiteral:)(v15, &type metadata for String, v18, &protocol witness table for String);
  v19 = sub_10001BE7C(&qword_100128930);
  v20 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v19, &protocol witness table for String);
  a1 += 3;
  swift_beginAccess(a1, v22, 33, 0);
  sub_100032E78(v20, (uint64_t)sub_1000358A0, 0, a1);
  return swift_endAccess(v22);
}

uint64_t sub_10002EAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  NSObject *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  char v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v20[2];
  _QWORD aBlock[6];
  _BYTE v22[24];

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 32);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  v11 = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) != 0)
  {
    swift_beginAccess(v2 + 16, v22, 0, 0);
    v13 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRetain(v13);
    sub_10002ECDC(a1, a2, v13);
    v15 = v14;
    result = swift_bridgeObjectRelease(v13);
    if ((v15 & 1) == 0)
    {
      v16 = (_QWORD *)swift_allocObject(&unk_10011B0B0, 40, 7);
      v16[2] = v2;
      v16[3] = a1;
      v16[4] = a2;
      aBlock[4] = sub_100035AEC;
      aBlock[5] = v16;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10002F048;
      aBlock[3] = &unk_10011B0C8;
      v17 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain(a2);
      swift_release();
      v18 = String.utf8CString.getter(a1, a2);
      xpc_set_event_stream_handler((const char *)(v18 + 32), v10, v17);
      swift_release();
      _Block_release(v17);
      swift_beginAccess(v2 + 16, aBlock, 33, 0);
      swift_bridgeObjectRetain(a2);
      sub_10001161C(v20, a1, a2);
      swift_endAccess(aBlock);
      return swift_bridgeObjectRelease(v20[1]);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002ECBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_10002ECDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  char v20;
  _BYTE v21[72];

  if (*(_QWORD *)(a3 + 16))
  {
    sub_10001875C(*(_QWORD *)(a3 + 40), a2);
    String.hash(into:)(v21, a1, a2);
    v6 = sub_10001333C();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    sub_100018664();
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (uint64_t *)(v10 + 16 * v8);
      v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_100017E14(*v11, v12, a1, a2) & 1) == 0)
      {
        v14 = ~v7;
        v15 = (v8 + 1) & v14;
        sub_100018664();
        if ((v16 & 1) != 0)
        {
          do
          {
            v17 = (uint64_t *)(v10 + 16 * v15);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((sub_100017E14(*v17, v18, a1, a2) & 1) != 0)
              break;
            v15 = (v15 + 1) & v14;
            sub_100018664();
          }
          while ((v20 & 1) != 0);
        }
      }
    }
  }
}

uint64_t sub_10002EDDC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t result;
  const char *string;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _BYTE v29[24];

  v7 = sub_10001BE7C(&qword_10012AD50);
  __chkstk_darwin(v7);
  v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = *(void **)(v3 + 32);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    swift_unknownObjectRetain(a1);
    swift_bridgeObjectRetain(a3);
    string = xpc_dictionary_get_string(a1, _xpc_event_key_name);
    if (string)
    {
      v18 = String.init(cString:)(string);
      v20 = v19;
      swift_beginAccess(v3 + 24, v29, 32, 0);
      v21 = *(_QWORD *)(v3 + 24);
      swift_bridgeObjectRetain(a3);
      sub_10002DA18(a2, a3, v21);
      v23 = v22;
      swift_bridgeObjectRelease(a3);
      if (v23)
      {
        swift_endAccess(v29);
        swift_bridgeObjectRetain(v20);
        sub_10002DA18(v18, v20, v23);
        v25 = v24;
        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v23);
        if (v25)
        {
          v26 = type metadata accessor for TaskPriority(0);
          sub_100014360((uint64_t)v9, 1, 1, v26);
          v27 = (_QWORD *)swift_allocObject(&unk_10011B100, 80, 7);
          v27[2] = 0;
          v27[3] = 0;
          v27[4] = v25;
          v27[5] = a1;
          v27[6] = a2;
          v27[7] = a3;
          v27[8] = v18;
          v27[9] = v20;
          swift_unknownObjectRetain(a1);
          swift_bridgeObjectRetain(a3);
          swift_bridgeObjectRetain(v20);
          sub_100029394((uint64_t)v9, (uint64_t)&unk_100128978, (uint64_t)v27);
          swift_bridgeObjectRelease(v20);
          swift_bridgeObjectRelease(a3);
          swift_unknownObjectRelease(a1);
          return swift_release();
        }
      }
      else
      {
        swift_endAccess(v29);
      }
      swift_bridgeObjectRelease(v20);
    }
    swift_bridgeObjectRelease(a3);
    return swift_unknownObjectRelease(a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002F048(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10002F090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch(sub_10002F0AC, 0, 0);
}

uint64_t sub_10002F0AC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002F140;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(*(_QWORD *)(v0 + 16), (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, 0, 0, &unk_100128988, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002F140()
{
  uint64_t (**v0)(void);

  sub_100017C10(*((_QWORD *)*v0 + 6));
  sub_1000158B0();
  return sub_1000107A0(v0[1]);
}

uint64_t sub_10002F178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;

  v4[19] = a3;
  v4[20] = a4;
  v4[18] = a2;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001BE7C(&qword_10012AD50) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[21] = swift_task_alloc(v5);
  v4[22] = swift_task_alloc(v5);
  return swift_task_switch(sub_10002F1E8, 0, 0);
}

uint64_t sub_10002F1E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  __int128 *v29;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v29 = (__int128 *)(v0 + 16);
    v3 = *(uint64_t **)(v0 + 160);
    v28 = *v3;
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v3 + 1);
    *(_OWORD *)(v0 + 128) = *(_OWORD *)(v3 + 3);
    v4 = v1 + 32;
    v5 = type metadata accessor for TaskPriority(0);
    sub_1000101B0();
    do
    {
      v7 = *(_QWORD *)(v0 + 168);
      v6 = *(_QWORD *)(v0 + 176);
      v8 = *(_QWORD *)(v0 + 160);
      sub_100014360(v6, 1, 1, v5);
      sub_100019A60(v4, (uint64_t)v29);
      v9 = sub_1000100C8((uint64_t)&unk_10011B128, 112);
      *(_QWORD *)(v9 + 16) = 0;
      v10 = (_QWORD *)(v9 + 16);
      *(_QWORD *)(v9 + 24) = 0;
      sub_100019A48(v29, v9 + 32);
      v11 = *(_QWORD *)(v8 + 32);
      v12 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(v9 + 72) = *(_OWORD *)v8;
      *(_OWORD *)(v9 + 88) = v12;
      *(_QWORD *)(v9 + 104) = v11;
      sub_10002AA78(v6, v7);
      LODWORD(v7) = sub_10001C93C(v7, 1, v5);
      swift_unknownObjectRetain(v28);
      sub_100035CB4(v0 + 112);
      v13 = sub_100035CB4(v0 + 128);
      v14 = *(_QWORD *)(v0 + 168);
      if ((_DWORD)v7 == 1)
      {
        sub_1000131A8(*(_QWORD *)(v0 + 168), &qword_10012AD50);
        v15 = 0;
      }
      else
      {
        v16 = TaskPriority.rawValue.getter(v13);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v14, v5);
        v15 = v16;
      }
      v17 = *v10;
      if (*v10)
      {
        v18 = *(_QWORD *)(v9 + 24);
        ObjectType = swift_getObjectType(*v10);
        swift_unknownObjectRetain(v17);
        v20 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v18);
        v22 = v21;
        swift_unknownObjectRelease(v17);
      }
      else
      {
        v20 = 0;
        v22 = 0;
      }
      v23 = **(_QWORD **)(v0 + 144);
      v24 = sub_1000100C8((uint64_t)&unk_10011B150, 32);
      *(_QWORD *)(v24 + 16) = &unk_1001289A0;
      *(_QWORD *)(v24 + 24) = v9;
      v25 = v22 | v20;
      if (v22 | v20)
      {
        v25 = v0 + 56;
        *(_QWORD *)(v0 + 56) = 0;
        *(_QWORD *)(v0 + 64) = 0;
        *(_QWORD *)(v0 + 72) = v20;
        *(_QWORD *)(v0 + 80) = v22;
      }
      v26 = *(_QWORD *)(v0 + 176);
      *(_QWORD *)(v0 + 88) = 1;
      *(_QWORD *)(v0 + 96) = v25;
      *(_QWORD *)(v0 + 104) = v23;
      swift_task_create(v15 | 0x3100, v0 + 88, (char *)&type metadata for () + 8, &unk_100128678, v24);
      swift_release();
      sub_1000131A8(v26, &qword_10012AD50);
      v4 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  sub_1000158B0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002F468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 88) = a4;
  *(_QWORD *)(v5 + 96) = a5;
  return swift_task_switch(sub_10002F480, 0, 0);
}

uint64_t sub_10002F480()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 88);
  v2 = *(uint64_t **)(v0 + 96);
  v3 = v1[3];
  v4 = v1[4];
  sub_10000E858(v1, v3);
  *(_QWORD *)(v0 + 40) = &unk_10011B278;
  *(_QWORD *)(v0 + 48) = &off_10011B298;
  v5 = sub_1000100C8((uint64_t)&unk_10011B178, 56);
  *(_QWORD *)(v0 + 16) = v5;
  v6 = v2[4];
  v7 = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 48) = v6;
  v8 = *(int **)(v4 + 8);
  v9 = *v2;
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v2 + 1);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v2 + 3);
  swift_unknownObjectRetain(v9);
  sub_100035CB4(v0 + 56);
  sub_100035CB4(v0 + 72);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  v10 = (_QWORD *)swift_task_alloc(v8[1]);
  *(_QWORD *)(v0 + 104) = v10;
  *v10 = v0;
  v10[1] = sub_10002F57C;
  return v12(v0 + 16, v3, v4);
}

uint64_t sub_10002F57C()
{
  uint64_t (**v0)(void);
  _QWORD *v1;

  v1 = (_QWORD *)((char *)*v0 + 16);
  sub_100017C10(*((_QWORD *)*v0 + 13));
  sub_10000E87C(v1);
  return sub_1000107A0(v0[1]);
}

uint64_t sub_10002F5BC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return v0;
}

uint64_t sub_10002F5E8()
{
  uint64_t v0;

  v0 = sub_10002F5BC();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for XPCEventDispatcher()
{
  return objc_opt_self(_TtC10LinkDaemonP33_D58D573A84F8D3FCCDFC47FE284514D618XPCEventDispatcher);
}

uint64_t sub_10002F624(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10002F630(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  v2 = a1[2];
  if (v2 == a2[2]
    && v2
    && a1 != a2
    && ((v5 = a1[4], v6 = a1[5], v7 = a2[4], v8 = a2[5], v5 == v7) ? (v9 = v6 == v8) : (v9 = 0),
        (v9 || (sub_100017E14(v5, v6, v7, v8) & 1) != 0) && v2 != 1))
  {
    v10 = a2 + 7;
    v11 = a1 + 7;
    v12 = 1;
    while (v12 < v2)
    {
      v13 = *(v11 - 1);
      v14 = *v11;
      v15 = *(v10 - 1);
      v16 = *v10;
      v17 = v13 == v15 && v14 == v16;
      if (v17 || (sub_100017E14(v13, v14, v15, v16) & 1) != 0)
      {
        ++v12;
        v10 += 2;
        v11 += 2;
        if (v2 != v12)
          continue;
      }
      goto LABEL_18;
    }
    __break(1u);
  }
  else
  {
LABEL_18:
    sub_10001000C();
  }
}

void sub_10002F6EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  id v16;
  id v17;
  char v18;
  void *v19;

  sub_10001A69C();
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 == *(_QWORD *)(v1 + 16) && v2 && v0 != v1)
  {
    v3 = (void **)(v1 + 64);
    v4 = (void **)(v0 + 64);
    do
    {
      v5 = (uint64_t)*(v4 - 4);
      v6 = (uint64_t)*(v4 - 3);
      v7 = (uint64_t)*(v4 - 2);
      v8 = (uint64_t)*(v4 - 1);
      v9 = *v4;
      v10 = (uint64_t)*(v3 - 4);
      v11 = (uint64_t)*(v3 - 3);
      v13 = (uint64_t)*(v3 - 2);
      v12 = (uint64_t)*(v3 - 1);
      v19 = *v3;
      v14 = v5 == v10 && v6 == v11;
      if (!v14 && (sub_100017E14(v5, v6, v10, v11) & 1) == 0)
        break;
      v15 = v7 == v13 && v8 == v12;
      if (!v15 && (sub_100017E14(v7, v8, v13, v12) & 1) == 0)
        break;
      sub_10000795C(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
      sub_10000C030();
      sub_1000100E0();
      v16 = v9;
      sub_10000BFF4();
      sub_10000C020();
      v17 = v19;
      v18 = static NSObject.== infix(_:_:)(v16, v17);

      sub_10000C028();
      sub_1000059C4();

      sub_1000059B0();
      sub_1000101FC();
      if ((v18 & 1) == 0)
        break;
      v4 += 5;
      v3 += 5;
      --v2;
    }
    while (v2);
  }
  sub_100018898();
}

uint64_t sub_10002F810(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = swift_task_alloc(a2[1]);
  v5 = (_QWORD *)sub_10001BFC0(v4);
  *v5 = v2;
  v5[1] = sub_100028A70;
  return v7(a1);
}

void sub_10002F870()
{
  sub_10001E098();
}

void sub_10002F884()
{
  sub_10002F8D0();
}

void sub_10002F8A0()
{
  sub_10002FA8C();
}

void sub_10002F8B4()
{
  sub_10002F8D0();
}

void sub_10002F8D0()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  sub_1000189B0();
  if ((v2 & 1) != 0)
  {
    sub_100018654();
    if (v3 != v4)
    {
      sub_1000158DC();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013344();
  if (v1)
  {
    v10 = sub_1000101F4(v5, v6, v7, v8, v9);
    v11 = (_QWORD *)sub_1000100C8(v10, 32 * v1 + 32);
    v12 = j__malloc_size(v11);
    sub_1000362A0((uint64_t)(v12 - 32) / 32);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v0 & 1) != 0)
  {
    sub_10001859C();
    sub_10001ABDC();
  }
  else
  {
    sub_1000117D0(v5, v6, (uint64_t)(v11 + 4));
  }
  sub_10001ADFC();
}

void sub_10002F96C()
{
  sub_10002FE50();
}

void sub_10002F988()
{
  sub_10002F99C();
}

void sub_10002F99C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  sub_10001F31C();
  if ((v4 & 1) != 0)
  {
    sub_100018654();
    if (v8 != v9)
    {
      sub_1000158DC();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    v12 = sub_1000101F4(v2, v3, v4, v5, v6);
    v13 = (char *)sub_1000100C8(v12, 24 * v11 + 32);
    v14 = j__malloc_size(v13);
    sub_1000190AC(v14 - 32);
  }
  else
  {
    v13 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v1 & 1) != 0)
  {
    sub_10003112C((char *)(v0 + 32), v10, v13 + 32);
    sub_10001ABDC();
  }
  else
  {
    v15 = sub_10001DFA4();
    sub_100030918(v15, v16, v17, v18);
  }
  sub_10001ADFC();
}

void sub_10002FA48()
{
  sub_10002FC08();
}

void sub_10002FA5C()
{
  sub_10002FD98();
}

void sub_10002FA78()
{
  sub_10002FA8C();
}

void sub_10002FA8C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  sub_10001F31C();
  if ((v4 & 1) != 0)
  {
    sub_100018654();
    if (v8 != v9)
    {
      sub_1000158DC();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    v12 = sub_1000101F4(v2, v3, v4, v5, v6);
    v13 = (char *)sub_1000100C8(v12, 40 * v11 + 32);
    v14 = j__malloc_size(v13);
    sub_1000190AC(v14 - 32);
  }
  else
  {
    v13 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v1 & 1) != 0)
  {
    sub_1000311F4((char *)(v0 + 32), v10, v13 + 32);
    sub_10001ABDC();
  }
  else
  {
    v15 = sub_10001DFA4();
    sub_100030F0C(v15, v16, v17, v18, v19);
  }
  sub_10001ADFC();
}

void sub_10002FB38()
{
  sub_10002FB54();
}

void sub_10002FB54()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  sub_1000189B0();
  if ((v2 & 1) != 0)
  {
    sub_100018654();
    if (v3 != v4)
    {
      sub_1000158DC();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013344();
  if (v1)
  {
    v10 = sub_1000101F4(v5, v6, v7, v8, v9);
    v11 = (_QWORD *)sub_1000100C8(v10, 40 * v1 + 32);
    v12 = j__malloc_size(v11);
    sub_1000362A0((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v0 & 1) != 0)
  {
    sub_10001859C();
    sub_10001ABDC();
  }
  else
  {
    sub_1000117D0(v5, v6, (uint64_t)(v11 + 4));
  }
  sub_1000110FC();
}

void sub_10002FBF4()
{
  sub_10002FC08();
}

void sub_10002FC08()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;

  sub_10001F31C();
  if ((v7 & 1) != 0)
  {
    sub_100018654();
    if (v11 != v12)
    {
      sub_1000158DC();
      if (v11)
      {
        __break(1u);
LABEL_22:
        sub_10001766C();
        v26 = "Division by zero";
        v27 = 16;
LABEL_24:
        sub_100036380((uint64_t)"Fatal error", 11, 2, (uint64_t)v26, v27, v25, (uint64_t)"Swift/IntegerTypes.swift");
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  else
  {
    v10 = v6;
  }
  v13 = *(_QWORD *)(v0 + 16);
  if (v10 <= v13)
    v14 = *(_QWORD *)(v0 + 16);
  else
    v14 = v10;
  if (!v14)
    goto LABEL_17;
  sub_1000101F4(v5, v6, v7, v8, v9);
  v15 = sub_10001BE7C(v1);
  v16 = (const void *)sub_10001638C(v15);
  v17 = j__malloc_size(v16);
  if (!v3)
    goto LABEL_22;
  if (v17 - v4 == 0x8000000000000000 && v3 == -1)
  {
    sub_10001766C();
    v26 = "Division results in an overflow";
    v27 = 31;
    goto LABEL_24;
  }
  sub_1000190AC(v17 - v4);
LABEL_17:
  sub_10001BE7C(v1);
  sub_10003624C();
  if ((v2 & 1) != 0)
  {
    sub_100031414(v0 + v19, v13);
    sub_10001ABDC();
  }
  else
  {
    v20 = sub_10001DFA4();
    sub_100030660(v20, v21, v22, v23, v24);
  }
  sub_10001677C();
}

void sub_10002FD40()
{
  sub_10002F99C();
}

void sub_10002FD54()
{
  sub_10002F99C();
}

void sub_10002FD68()
{
  sub_10001E098();
}

void sub_10002FD7C()
{
  sub_10002FD98();
}

void sub_10002FD98()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  sub_1000189B0();
  if ((v2 & 1) != 0)
  {
    sub_100018654();
    if (v3 != v4)
    {
      sub_1000158DC();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013344();
  if (v1)
  {
    v10 = sub_1000101F4(v5, v6, v7, v8, v9);
    v11 = (_QWORD *)sub_1000100C8(v10, (v1 << 6) | 0x20);
    v12 = j__malloc_size(v11);
    sub_1000362A0((uint64_t)(v12 - 32) / 64);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v0 & 1) != 0)
  {
    sub_10001859C();
    sub_10001ABDC();
  }
  else
  {
    sub_1000117D0(v5, v6, (uint64_t)(v11 + 4));
  }
  sub_10001ADFC();
}

void sub_10002FE34()
{
  sub_10002FE50();
}

void sub_10002FE50()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  sub_1000189B0();
  if ((v2 & 1) != 0)
  {
    sub_100018654();
    if (v3 != v4)
    {
      sub_1000158DC();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013344();
  if (v1)
  {
    v10 = sub_1000101F4(v5, v6, v7, v8, v9);
    v11 = (_QWORD *)sub_1000100C8(v10, 24 * v1 + 32);
    v12 = j__malloc_size(v11);
    sub_1000362A0((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v0 & 1) != 0)
  {
    sub_10001859C();
    sub_10001ABDC();
  }
  else
  {
    sub_1000117D0(v5, v6, (uint64_t)(v11 + 4));
  }
  sub_1000110FC();
}

void sub_10002FEF0()
{
  sub_10002F99C();
}

void sub_10002FF04()
{
  sub_10001AAFC();
}

void sub_10002FF20()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  sub_10001F830();
  if ((v2 & 1) != 0)
  {
    sub_100018654();
    if (v3 != v4)
    {
      sub_1000158DC();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013784();
  if (v1)
  {
    v5 = sub_10001BE7C(&qword_100128AA8);
    v6 = (_QWORD *)sub_1000100C8(v5, 8 * v1 + 32);
    sub_100036264(v6);
  }
  if ((v0 & 1) != 0)
  {
    v7 = (char *)sub_100036294();
    sub_100031320(v7, v8, v9);
    sub_10001ABDC();
  }
  else
  {
    v10 = sub_10001C1CC();
    sub_100030AF0(v10, v11, v12, v13);
  }
  sub_10001000C();
}

void sub_10002FFB4()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  sub_10001F830();
  if ((v2 & 1) != 0)
  {
    sub_100018654();
    if (v3 != v4)
    {
      sub_1000158DC();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013784();
  if (v1)
  {
    v5 = sub_10001BE7C(&qword_100128AB0);
    v6 = (_QWORD *)sub_1000100C8(v5, 8 * v1 + 32);
    sub_100036264(v6);
  }
  if ((v0 & 1) != 0)
  {
    v7 = (char *)sub_100036294();
    sub_100031320(v7, v8, v9);
    sub_10001ABDC();
  }
  else
  {
    v10 = sub_10001C1CC();
    sub_100030BE0(v10, v11, v12, v13);
  }
  sub_10001000C();
}

void sub_100030048()
{
  sub_10002FB54();
}

void sub_100030064()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  sub_10001F830();
  if ((v2 & 1) != 0)
  {
    sub_100018654();
    if (v3 != v4)
    {
      sub_1000158DC();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013784();
  if (v1)
  {
    v5 = sub_10001BE7C(&qword_10012A770);
    v6 = (_QWORD *)sub_1000100C8(v5, 48 * v1 + 32);
    sub_100036350(v6);
  }
  if ((v0 & 1) != 0)
  {
    v7 = (char *)sub_100036294();
    sub_10003137C(v7, v8, v9);
    sub_10001ABDC();
  }
  else
  {
    v10 = sub_10001C1CC();
    sub_100030E10(v10, v11, v12, v13);
  }
  sub_10001ADFC();
}

void sub_100030100()
{
  sub_10002FA8C();
}

void sub_100030114()
{
  sub_10001E098();
}

uint64_t sub_100030128(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030220(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    sub_10001BE7C(&qword_100128A58);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030334(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 24 * a1 + 32;
  v8 = a3 + 24 * v4;
  if (v7 >= v8 || v7 + 24 * v4 <= a3)
  {
    sub_10001BE7C(&qword_100128B78);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030450(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + (a1 << 6) + 32;
  v7 = a3 + (v4 << 6);
  if (v6 >= v7 || v6 + (v4 << 6) <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030544(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v4;
  if (v7 >= v8 || v7 + 40 * v4 <= a3)
  {
    sub_10001BE7C((uint64_t *)&unk_10012B3A0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100030660(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v6;
  char v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_10001766C();
    sub_10001ABE8();
    goto LABEL_11;
  }
  sub_1000101F4(a1, a2, a3, a4, a5);
  sub_10001E89C();
  if (v7)
    v8 = 0;
  else
    v8 = v6 > a3;
  if (!v8)
  {
    sub_10001ED6C();
    sub_1000117B4();
    sub_10001C1DC();
    return;
  }
  sub_10001766C();
  sub_100018360();
LABEL_11:
  sub_100017680(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
}

uint64_t sub_100030708(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + (a1 << 6) + 32;
  v7 = a3 + (v4 << 6);
  if (v6 >= v7 || v6 + (v4 << 6) <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000307FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 24 * a1 + 32;
  v8 = a3 + 24 * v4;
  if (v7 >= v8 || v7 + 24 * v4 <= a3)
  {
    sub_10001BE7C(&qword_100128AD0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030918(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_10001766C();
    sub_10001ABE8();
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_1000117B4();
    return v6;
  }
  sub_10001766C();
  sub_100018360();
LABEL_11:
  result = sub_100017680(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

uint64_t sub_1000309DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 16 * a1 + 32;
  v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_10001BE7C(&qword_100128AE0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100030AF0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 8 * a1 + 32);
  v7 = &__dst[8 * v4];
  if (v6 >= v7 || &v6[8 * v4] <= __dst)
  {
    memcpy(__dst, v6, 8 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030BE0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 8 * a1 + 32;
  v8 = a3 + 8 * v4;
  if (v7 >= v8 || v7 + 8 * v4 <= a3)
  {
    sub_10001BE7C(&qword_100128AB8);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030CF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  const char *v10;
  uint64_t v11;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v10 = "UnsafeMutablePointer.initialize with negative count";
    v11 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_10001BE7C(&qword_100128B18);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v7;
  }
  v10 = "UnsafeMutablePointer.initialize overlapping range";
  v11 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_100030E10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 48 * a1 + 32;
  v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030F0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_10001766C();
    sub_10001ABE8();
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_1000101F4(a1, a2, a3, a4, a5);
    swift_arrayInitWithCopy(a3);
    sub_1000117B4();
    return v8;
  }
  sub_10001766C();
  sub_100018360();
LABEL_11:
  result = sub_100017680(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

char *sub_100030FEC(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001766C();
    result = (char *)sub_10001ADE4((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_10001B41C(a3, result);
  }
  return result;
}

char *sub_100031044(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

char *sub_1000310CC(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001766C();
    result = (char *)sub_10001ADE4((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_10001B41C(a3, result);
  }
  return result;
}

char *sub_10003112C(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001766C();
    result = (char *)sub_10001ADE4((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_10001B41C(a3, result);
  }
  return result;
}

void sub_10003118C(uint64_t a1, uint64_t a2)
{
  sub_100031414(a1, a2);
}

char *sub_100031198(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001766C();
    result = (char *)sub_10001ADE4((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)sub_10001B41C(a3, result);
  }
  return result;
}

char *sub_1000311F4(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001766C();
    result = (char *)sub_10001ADE4((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_10001B41C(a3, result);
  }
  return result;
}

char *sub_100031254(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001766C();
    result = (char *)sub_10001ADE4((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_10001B41C(a3, result);
  }
  return result;
}

void sub_1000312B4(uint64_t a1, uint64_t a2)
{
  sub_10001E34C(a1, a2);
}

char *sub_1000312C0(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001766C();
    result = (char *)sub_10001ADE4((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[104 * a2] <= a3)
  {
    return (char *)sub_10001B41C(a3, result);
  }
  return result;
}

char *sub_100031320(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10001766C();
    result = (char *)sub_10001ADE4((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10001B41C(a3, result);
  }
  return result;
}

char *sub_10003137C(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

void sub_100031408(uint64_t a1, uint64_t a2)
{
  sub_100031414(a1, a2);
}

void sub_100031414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  if (a2 < 0)
  {
    sub_10001766C();
    sub_10001ADE4((uint64_t)"Fatal error", v7, v8, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v9, v10, (uint64_t)"Swift/UnsafePointer.swift", v11, v12, v13, v14);
    __break(1u);
  }
  else
  {
    sub_1000166D0();
    if (v5 && (sub_10001BE7C(v4), sub_100036308(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_10001C1DC();
      }
      else
      {
        sub_10001F714();
        sub_1000361F0();
      }
    }
    else
    {
      sub_10001BE7C(v4);
      sub_10001F714();
      sub_100018EDC();
    }
  }
}

unint64_t sub_1000314A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;

  sub_10001B648(a1);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v3 = sub_100013E10();
    sub_100013548(v3);
    sub_1000100D0();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v4 = sub_10001333C();
  return sub_100031714(v2, v1, v4);
}

uint64_t sub_100031504(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100036234(a1);
  v2 = sub_100036220(v1);
  sub_10001F008((uint64_t)v2);
  sub_10001333C();
  sub_1000059C4();
  v3 = sub_10001EEE0();
  return sub_100031B54(v3, v4);
}

unint64_t sub_10003155C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001902C();
  dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v0 + 40), &type metadata for Substring, &protocol witness table for Substring);
  v1 = sub_100019D58();
  return sub_1000317DC(v1, v2, v3, v4, v5);
}

unint64_t sub_1000315C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[72];

  sub_10001902C();
  sub_10001875C(*(_QWORD *)(v0 + 40), v3);
  sub_10000C030();
  String.hash(into:)(v11, v2, v1);
  sub_1000059C4();
  v4 = sub_100013E10();
  sub_100013548(v4);
  sub_1000100D0();
  sub_10001333C();
  v5 = sub_100019D58();
  return sub_10003191C(v5, v6, v7, v8, v9);
}

unint64_t sub_10003162C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  sub_100025AFC(&qword_1001289E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100031A14(a1, v7);
}

unint64_t sub_100031698(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100036234(a1);
  v2 = sub_100036220(v1);
  sub_10001F008((uint64_t)v2);
  sub_10001333C();
  sub_1000059C4();
  v3 = sub_10001EEE0();
  return sub_100031C6C(v3, v4);
}

unint64_t sub_1000316E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100031DE0(a1, v4);
}

unint64_t sub_100031714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = ~v5;
    v10 = *(_QWORD *)(v3 + 48);
    do
    {
      v11 = (_QWORD *)(v10 + 16 * v6);
      v12 = v11[1];
      if (v12)
      {
        if (a2)
        {
          v13 = *v11 == a1 && v12 == a2;
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
            return v6;
        }
      }
      else if (!a2)
      {
        return v6;
      }
      v6 = (v6 + 1) & v9;
    }
    while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t sub_1000317DC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v13 = *(_QWORD *)(v5 + 48);
    if ((sub_10007EBF0(*(_QWORD *)(v13 + 32 * v8), *(_QWORD *)(v13 + 32 * v8 + 8), *(_QWORD *)(v13 + 32 * v8 + 16), *(_QWORD *)(v13 + 32 * v8 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      v14 = ~v7;
      v8 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        v15 = a2 >> 16;
        do
        {
          v16 = (_QWORD *)(v13 + 32 * v8);
          v17 = v16[2];
          if (v17 == a3 && v16[3] == a4 && *v16 >> 16 == a1 >> 16 && v16[1] >> 16 == v15)
            break;
          if ((_stringCompareInternal(_:_:_:_:expecting:)(v17) & 1) != 0)
            break;
          v8 = (v8 + 1) & v14;
        }
        while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
      }
    }
  }
  return v8;
}

unint64_t sub_10003191C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v13 = ~v7;
    v14 = *(_QWORD *)(v5 + 48);
    do
    {
      v15 = (_QWORD *)(v14 + 32 * v8);
      v16 = v15[1];
      v17 = v15[2];
      v18 = v15[3];
      v19 = *v15 == a1 && v16 == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, a1, a2, 0) & 1) != 0)
      {
        v20 = v17 == a3 && v18 == a4;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a3, a4, 0) & 1) != 0)
          break;
      }
      v8 = (v8 + 1) & v13;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t sub_100031A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_100025AFC(&qword_1001289E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_100031B54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  char v19;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  sub_1000193F4();
  if ((v6 & 1) != 0)
  {
    v7 = sub_10001F880();
    v8 = sub_1000363A0();
    if (v7 == v8 && v3 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v3, 2);
      return v5;
    }
    v11 = sub_100017E14(v7, v3, v8, v9);
    sub_1000101FC();
    sub_1000059C4();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      sub_1000193F4();
      if ((v13 & 1) != 0)
      {
        while (1)
        {
          v14 = sub_10001F880();
          v15 = sub_1000363A0();
          if (v14 == v15 && v3 == v16)
            break;
          v18 = sub_100017E14(v14, v3, v15, v16);
          sub_1000101FC();
          sub_1000059B0();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            sub_1000193F4();
            if ((v19 & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100031C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100031DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
    v7 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_100031EF8()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t *v30;

  sub_10001A69C();
  v2 = v0;
  v4 = v3;
  sub_100036330();
  sub_10001BE7C(&qword_100128770);
  v5 = sub_10001EEE0();
  v7 = sub_10000EC78(v5, v6);
  if (v1[2])
  {
    v30 = v2;
    sub_1000362AC();
    v8 = v1 + 8;
    sub_1000121C0();
    v11 = v10 & v9;
    v13 = (unint64_t)(v12 + 63) >> 6;
    result = sub_100011038();
    v15 = 0;
    if (!v11)
      goto LABEL_4;
LABEL_3:
    v16 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
    {
      v21 = (uint64_t *)(v1[6] + 16 * i);
      v23 = *v21;
      v22 = v21[1];
      v24 = *(void **)(v1[7] + 8 * i);
      if ((v4 & 1) == 0)
      {
        v25 = v24;
        sub_1000100E0();
      }
      result = sub_100032780(v23, v22, (uint64_t)v24, v7);
      if (v11)
        goto LABEL_3;
LABEL_4:
      v18 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }
      if (v18 >= v13)
        goto LABEL_20;
      v19 = v8[v18];
      ++v15;
      if (!v19)
      {
        v15 = v18 + 1;
        if (v18 + 1 >= v13)
          goto LABEL_20;
        v19 = v8[v15];
        if (!v19)
        {
          v20 = v18 + 2;
          if (v20 >= v13)
          {
LABEL_20:
            sub_100018B6C();
            v2 = v30;
            if ((v4 & 1) != 0)
            {
              sub_10001A914();
              if (v28 ^ v29 | v27)
                *v8 = -1 << v26;
              else
                sub_10003286C(0, (unint64_t)(v26 + 63) >> 6, v1 + 8);
              v1[2] = 0;
            }
            break;
          }
          v19 = v8[v20];
          if (!v19)
          {
            while (1)
            {
              v15 = v20 + 1;
              if (__OFADD__(v20, 1))
                goto LABEL_27;
              if (v15 >= v13)
                goto LABEL_20;
              v19 = v8[v15];
              ++v20;
              if (v19)
                goto LABEL_15;
            }
          }
          v15 = v20;
        }
      }
LABEL_15:
      v11 = (v19 - 1) & v19;
    }
  }
  result = sub_100018B6C();
  *v2 = v7;
  return result;
}

void sub_1000320A4(uint64_t a1, uint64_t a2)
{
  sub_1000320E0(a1, a2, &qword_100128A80);
}

void sub_1000320B0(uint64_t a1, uint64_t a2)
{
  sub_1000320E0(a1, a2, &qword_100128A88);
}

void sub_1000320BC(uint64_t a1, uint64_t a2)
{
  sub_1000320E0(a1, a2, &qword_100128AF8);
}

void sub_1000320C8(uint64_t a1, uint64_t a2)
{
  sub_1000322F8(a1, a2, &qword_100128AF0);
}

void sub_1000320D4(uint64_t a1, uint64_t a2)
{
  sub_1000320E0(a1, a2, &qword_100128AC0);
}

void sub_1000320E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  _BYTE v43[72];

  sub_10001A028(a1, a2, a3);
  sub_10001F474();
  sub_100036344();
  if (v6)
  {
    sub_10001F140();
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & v8;
    v39 = v3;
    v40 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 64;
    v12 = (id)sub_100011038();
    v17 = 0;
    if (!v10)
      goto LABEL_7;
LABEL_6:
    sub_10000FE54();
    for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
    {
      v23 = (uint64_t *)(v4[6] + 16 * i);
      v25 = *v23;
      v24 = v23[1];
      v26 = *(void **)(v4[7] + 8 * i);
      if ((v42 & 1) == 0)
      {
        sub_1000100E0();
        v12 = v26;
      }
      sub_1000363B8((uint64_t)v12, v13, v14, v15, v16);
      String.hash(into:)(v43, v25, v24);
      v27 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v5 + 32));
      if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        sub_100018B74();
        while (1)
        {
          sub_10001EE3C();
          if (v31)
          {
            if ((v28 & 1) != 0)
              break;
          }
          if (v29 == v30)
            v29 = 0;
          if (*(_QWORD *)(v11 + 8 * v29) != -1)
          {
            sub_100019AC8();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }
      sub_10000C00C();
LABEL_31:
      sub_10001F3C4();
      *(_QWORD *)(v11 + v32) |= v33;
      v35 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v34);
      *v35 = v25;
      v35[1] = v24;
      *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v34) = v26;
      sub_10001A82C();
      if (v10)
        goto LABEL_6;
LABEL_7:
      v20 = v17 + 1;
      if (__OFADD__(v17, 1))
        goto LABEL_40;
      if (v20 >= v40)
        goto LABEL_33;
      v21 = *(_QWORD *)(v41 + 8 * v20);
      ++v17;
      if (!v21)
      {
        v17 = v20 + 1;
        if (v20 + 1 >= v40)
          goto LABEL_33;
        v21 = *(_QWORD *)(v41 + 8 * v17);
        if (!v21)
        {
          v22 = v20 + 2;
          if (v22 >= v40)
          {
LABEL_33:
            sub_100018B6C();
            v3 = v39;
            if ((v42 & 1) != 0)
            {
              sub_100007384();
              if (v37 != v38)
                sub_10001A45C(v36);
              else
                sub_10001F638(v36);
              v4[2] = 0;
            }
            break;
          }
          v21 = *(_QWORD *)(v41 + 8 * v22);
          if (!v21)
          {
            while (1)
            {
              v17 = v22 + 1;
              if (__OFADD__(v22, 1))
                goto LABEL_41;
              if (v17 >= v40)
                goto LABEL_33;
              v21 = *(_QWORD *)(v41 + 8 * v17);
              ++v22;
              if (v21)
                goto LABEL_18;
            }
          }
          v17 = v22;
        }
      }
LABEL_18:
      v10 = (v21 - 1) & v21;
    }
  }
  sub_100018B6C();
  *v3 = v5;
  sub_100005888();
}

void sub_1000322EC(uint64_t a1, uint64_t a2)
{
  sub_1000322F8(a1, a2, (uint64_t *)&unk_100128B80);
}

void sub_1000322F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _BYTE v38[72];

  sub_10001A028(a1, a2, a3);
  sub_10001F474();
  sub_100036344();
  if (v7)
  {
    sub_10001F140();
    sub_10001EDD4();
    v35 = v8;
    v9 = v5 + 64;
    sub_100011038();
    v10 = 0;
    if (!v6)
      goto LABEL_4;
LABEL_3:
    sub_10001A95C();
    for (i = v16 | (v10 << 6); ; i = v20 + (v10 << 6))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * i);
      if ((v37 & 1) == 0)
      {
        sub_100016794();
        v11 = sub_1000100E0();
      }
      sub_1000363B8(v11, v12, v13, v14, v15);
      sub_1000363AC((uint64_t)v38);
      v22 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v5 + 32));
      if (((-1 << v22) & ~*(_QWORD *)(v9 + 8 * (v22 >> 6))) == 0)
      {
        sub_100018B74();
        while (1)
        {
          sub_10001EE3C();
          if (v26)
          {
            if ((v23 & 1) != 0)
              break;
          }
          if (v24 == v25)
            v24 = 0;
          if (*(_QWORD *)(v9 + 8 * v24) != -1)
          {
            sub_100019AC8();
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        return;
      }
      sub_10000C00C();
LABEL_28:
      sub_10001F3C4();
      *(_QWORD *)(v9 + v27) |= v28;
      sub_10003631C(v29);
      *(_QWORD *)(v31 + 8 * v30) = v21;
      sub_10001A82C();
      if (v6)
        goto LABEL_3;
LABEL_4:
      v18 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_37;
      if (v18 >= v35)
        goto LABEL_30;
      ++v10;
      if (!*(_QWORD *)(v36 + 8 * v18))
      {
        v10 = v18 + 1;
        if (v18 + 1 >= v35)
          goto LABEL_30;
        if (!*(_QWORD *)(v36 + 8 * v10))
        {
          v19 = v18 + 2;
          if (v19 >= v35)
          {
LABEL_30:
            sub_100018B6C();
            if ((v37 & 1) != 0)
            {
              sub_100007384();
              if (v33 != v34)
                sub_10001A45C(v32);
              else
                sub_10001F638(v32);
              *(_QWORD *)(v4 + 16) = 0;
            }
            break;
          }
          if (!*(_QWORD *)(v36 + 8 * v19))
          {
            while (1)
            {
              v10 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_38;
              if (v10 >= v35)
                goto LABEL_30;
              ++v19;
              if (*(_QWORD *)(v36 + 8 * v10))
                goto LABEL_15;
            }
          }
          v10 = v19;
        }
      }
LABEL_15:
      sub_1000362D4();
    }
  }
  sub_100018B6C();
  *v3 = v5;
  sub_100005888();
}

void sub_1000324E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD v41[9];

  v4 = v2;
  v6 = sub_1000117E0();
  v39 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  sub_10001BE7C(&qword_100128A30);
  v10 = sub_10001EEE0();
  v40 = a2;
  sub_10000EC78(v10, v11);
  sub_100036344();
  if (v12)
  {
    v38 = v9 + 64;
    sub_10001EDD4();
    v36 = v2;
    v37 = v13;
    v14 = a2 + 64;
    sub_100011038();
    v15 = 0;
    if (!v3)
      goto LABEL_4;
LABEL_3:
    sub_10001A95C();
    for (i = v16 | (v15 << 6); ; i = v20 + (v15 << 6))
    {
      v21 = *(_QWORD *)(v39 + 72);
      v22 = *(_QWORD *)(v9 + 56) + v21 * i;
      if ((v40 & 1) != 0)
      {
        sub_100035DB4(v22, (uint64_t)v8);
      }
      else
      {
        sub_100035D70(v22, (uint64_t)v8);
        sub_100016794();
      }
      Hasher.init(_seed:)(v41, *(_QWORD *)(a2 + 40));
      sub_1000363AC((uint64_t)v41);
      v23 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) == 0)
      {
        sub_100018B74();
        while (1)
        {
          sub_10001EE3C();
          if (v27)
          {
            if ((v24 & 1) != 0)
              break;
          }
          if (v25 == v26)
            v25 = 0;
          if (*(_QWORD *)(v14 + 8 * v25) != -1)
          {
            sub_100019AC8();
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }
      sub_10000C00C();
LABEL_29:
      sub_10001F3C4();
      *(_QWORD *)(v14 + v28) |= v29;
      sub_10003631C(v30);
      sub_100035DB4((uint64_t)v8, v32 + v21 * v31);
      sub_10001A82C();
      if (v3)
        goto LABEL_3;
LABEL_4:
      v18 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_38;
      if (v18 >= v37)
        goto LABEL_31;
      ++v15;
      if (!*(_QWORD *)(v38 + 8 * v18))
      {
        v15 = v18 + 1;
        if (v18 + 1 >= v37)
          goto LABEL_31;
        if (!*(_QWORD *)(v38 + 8 * v15))
        {
          v19 = v18 + 2;
          if (v19 >= v37)
          {
LABEL_31:
            sub_100018B6C();
            v4 = v36;
            if ((v40 & 1) != 0)
            {
              sub_100007384();
              if (v34 != v35)
                sub_10001A45C(v33);
              else
                sub_10001F638(v33);
              *(_QWORD *)(v9 + 16) = 0;
            }
            break;
          }
          if (!*(_QWORD *)(v38 + 8 * v19))
          {
            while (1)
            {
              v15 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_39;
              if (v15 >= v37)
                goto LABEL_31;
              ++v19;
              if (*(_QWORD *)(v38 + 8 * v15))
                goto LABEL_15;
            }
          }
          v15 = v19;
        }
      }
LABEL_15:
      sub_1000362D4();
    }
  }
  sub_100018B6C();
  *v4 = a2;
}

unint64_t sub_100032780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v8;
  unint64_t result;
  _QWORD *v10;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, *(_QWORD *)(a4 + 40));
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v11, a1, a2);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v8 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v8 & ~(-1 << *(_BYTE *)(a4 + 32)), a4 + 64, ~(-1 << *(_BYTE *)(a4 + 32)));
  *(_QWORD *)(a4 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v10 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
  *v10 = a1;
  v10[1] = a2;
  *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * result) = a3;
  ++*(_QWORD *)(a4 + 16);
  return result;
}

uint64_t sub_10003286C(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t sub_100032888(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  v6 = v5;
  sub_1000358B0(a1, a2, a3, &v41);
  v40 = v41;
  v39 = a1;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v10 = sub_1000358F4();
  if (v11)
  {
    v13 = v10;
    v14 = v11;
    v15 = v12;
    while (1)
    {
      v16 = (_QWORD *)*a5;
      v18 = sub_100016064(v13);
      v19 = v16[2];
      v20 = (v17 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
        break;
      v22 = v17;
      if (v16[3] >= v21)
      {
        if ((a4 & 1) == 0)
        {
          sub_10001BE7C(&qword_100128938);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        sub_1000322F8(v21, a4 & 1, &qword_100128940);
        v23 = sub_100016064(v13);
        if ((v22 & 1) != (v24 & 1))
          goto LABEL_18;
        v18 = v23;
      }
      v25 = (_QWORD *)*a5;
      if ((v22 & 1) != 0)
      {
        v26 = *(_QWORD *)(v25[7] + 8 * v18);
        swift_bridgeObjectRetain(v26);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
        v42 = v26;
        sub_100032AF0(v15, (uint64_t)sub_100035A74, 0, isUniquelyReferenced_nonNull_native, &v42);
        if (v6)
          goto LABEL_19;
        v6 = 0;
        v29 = v42;
        swift_bridgeObjectRelease(0x8000000000000000);
        swift_bridgeObjectRelease(v14);
        v30 = v25[7];
        swift_bridgeObjectRelease(*(_QWORD *)(v30 + 8 * v18));
        *(_QWORD *)(v30 + 8 * v18) = v29;
      }
      else
      {
        v25[(v18 >> 6) + 8] |= 1 << v18;
        v31 = (uint64_t *)(v25[6] + 16 * v18);
        *v31 = v13;
        v31[1] = v14;
        *(_QWORD *)(v25[7] + 8 * v18) = v15;
        v32 = v25[2];
        v33 = __OFADD__(v32, 1);
        v34 = v32 + 1;
        if (v33)
          goto LABEL_17;
        v25[2] = v34;
      }
      v13 = sub_1000358F4();
      v14 = v35;
      v15 = v36;
      a4 = 1;
      if (!v35)
        goto LABEL_15;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
LABEL_19:
    v38 = v42;
    swift_bridgeObjectRelease(0x8000000000000000);
    result = swift_bridgeObjectRelease(v38);
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(v39);
    swift_release();
    sub_1000358EC(v40);
    return swift_release();
  }
  return result;
}

uint64_t sub_100032AF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;

  sub_1000358B0(a1, a2, a3, &v45);
  v44 = v45;
  v43 = a1;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v8 = sub_1000358F4();
  if (v9)
  {
    v11 = v8;
    v12 = v9;
    v13 = v10;
    while (1)
    {
      v14 = (_QWORD *)*a5;
      v16 = sub_100016064(v11);
      v17 = v14[2];
      v18 = (v15 & 1) == 0;
      v19 = v17 + v18;
      if (__OFADD__(v17, v18))
        break;
      v20 = v15;
      if (v14[3] >= v19)
      {
        if ((a4 & 1) == 0)
        {
          sub_10001BE7C(&qword_100128948);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        sub_1000322F8(v19, a4 & 1, &qword_100128958);
        v21 = sub_100016064(v11);
        if ((v20 & 1) != (v22 & 1))
          goto LABEL_36;
        v16 = v21;
      }
      v23 = (_QWORD *)*a5;
      if ((v20 & 1) != 0)
      {
        v24 = v23[7];
        v25 = *(_QWORD *)(v24 + 8 * v16);
        v26 = *(_QWORD *)(v13 + 16);
        v27 = *(_QWORD *)(v25 + 16);
        if (__OFADD__(v27, v26))
          goto LABEL_31;
        swift_bridgeObjectRetain(*(_QWORD *)(v24 + 8 * v16));
        if (!swift_isUniquelyReferenced_nonNull_native(v28) || v27 + v26 > *(_QWORD *)(v25 + 24) >> 1)
        {
          sub_10002FA8C();
          v25 = v29;
        }
        if (*(_QWORD *)(v13 + 16))
        {
          v30 = *(_QWORD *)(v25 + 16);
          if ((*(_QWORD *)(v25 + 24) >> 1) - v30 < v26)
            goto LABEL_34;
          v31 = v25 + 40 * v30 + 32;
          if (v13 + 32 < v31 + 40 * v26 && v31 < v13 + 32 + 40 * v26)
            goto LABEL_37;
          sub_10001BE7C(&qword_100128950);
          swift_arrayInitWithCopy(v31);
          if (v26)
          {
            v33 = *(_QWORD *)(v25 + 16);
            v34 = __OFADD__(v33, v26);
            v35 = v33 + v26;
            if (v34)
              goto LABEL_35;
            *(_QWORD *)(v25 + 16) = v35;
          }
        }
        else if (v26)
        {
          goto LABEL_33;
        }
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v12);
        v39 = v23[7];
        swift_bridgeObjectRelease(*(_QWORD *)(v39 + 8 * v16));
        *(_QWORD *)(v39 + 8 * v16) = v25;
      }
      else
      {
        v23[(v16 >> 6) + 8] |= 1 << v16;
        v36 = (uint64_t *)(v23[6] + 16 * v16);
        *v36 = v11;
        v36[1] = v12;
        *(_QWORD *)(v23[7] + 8 * v16) = v13;
        v37 = v23[2];
        v34 = __OFADD__(v37, 1);
        v38 = v37 + 1;
        if (v34)
          goto LABEL_32;
        v23[2] = v38;
      }
      v11 = sub_1000358F4();
      v12 = v40;
      v13 = v41;
      a4 = 1;
      if (!v40)
        goto LABEL_29;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
LABEL_37:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
    __break(1u);
  }
  else
  {
LABEL_29:
    swift_bridgeObjectRelease(v43);
    swift_release();
    sub_1000358EC(v44);
    return swift_release();
  }
  return result;
}

uint64_t sub_100032E30(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  return a2;
}

uint64_t sub_100032E78(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v11;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  v11 = *a4;
  *a4 = 0x8000000000000000;
  sub_100032888(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v11);
  v9 = *a4;
  *a4 = v11;
  return swift_bridgeObjectRelease(v9);
}

void sub_100032F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, Swift::Int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void *v27;
  void *v28;
  Swift::Int *v29;
  Swift::Int *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  Swift::Int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  id v41;
  char v42;
  uint64_t v43;
  char v44;
  id v45;
  char v46;
  void *v47;
  id v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  id v52;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v54;
  id v55;

  sub_10001A69C();
  a21 = v24;
  a22 = v25;
  v26 = v22;
  v28 = v27;
  v30 = v29;
  v31 = *v22;
  if ((*v22 & 0xC000000000000001) == 0)
  {
    v36 = *(_QWORD *)(v31 + 40);
    sub_10000BFF4();
    v37 = NSObject._rawHashValue(seed:)(v36);
    v38 = -1 << *(_BYTE *)(v31 + 32);
    v39 = v37 & ~v38;
    sub_10001F928();
    if ((v40 & 1) != 0)
    {
      sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
      v41 = sub_1000362F0();
      v42 = sub_1000362FC((uint64_t)v41);

      if ((v42 & 1) != 0)
      {
LABEL_12:

        sub_1000101FC();
        v47 = *(void **)(*(_QWORD *)(*v26 + 48) + 8 * v39);
        *v30 = (Swift::Int)v47;
        v48 = v47;
        goto LABEL_21;
      }
      v43 = ~v38;
      while (1)
      {
        v39 = (v39 + 1) & v43;
        sub_10001F928();
        if ((v44 & 1) == 0)
          break;
        v45 = sub_1000362F0();
        v46 = sub_1000362FC((uint64_t)v45);

        if ((v46 & 1) != 0)
          goto LABEL_12;
      }
    }
    sub_1000101FC();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
    sub_10003638C();
    v33 = v28;
    sub_10003409C((uint64_t)v33, v39, isUniquelyReferenced_nonNull_native);
    v54 = *v26;
    *v26 = a10;
    goto LABEL_20;
  }
  if (v31 < 0)
    v32 = *v22;
  else
    v32 = v31 & 0xFFFFFFFFFFFFFF8;
  sub_10000BFF4();
  v33 = v28;
  v34 = __CocoaSet.member(for:)();

  if (v34)
  {
    sub_1000101FC();

    a9 = v34;
    v35 = sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
    swift_unknownObjectRetain(v34);
    swift_dynamicCast(&a10, &a9, (char *)&type metadata for Swift.AnyObject + 8, v35, 7);
    *v30 = a10;
    swift_unknownObjectRelease(v34);
LABEL_21:
    sub_100018898();
    return;
  }
  v49 = __CocoaSet.count.getter(v32);
  if (!__OFADD__(v49, 1))
  {
    v50 = sub_1000334D4(v32, v49 + 1);
    a10 = v50;
    if (*(_QWORD *)(v50 + 24) <= *(_QWORD *)(v50 + 16))
    {
      v55 = v33;
      sub_1000338D0();
      v51 = a10;
    }
    else
    {
      v51 = v50;
      v52 = v33;
    }
    sub_10003401C((uint64_t)v33, v51);
    v54 = *v26;
    *v26 = v51;
LABEL_20:
    swift_bridgeObjectRelease(v54);
    *v30 = (Swift::Int)v33;
    goto LABEL_21;
  }
  __break(1u);
}

uint64_t sub_10003311C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  char v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  id v52;
  _QWORD *v54;
  _QWORD *__dst;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[10];

  v5 = *v2;
  Hasher.init(_seed:)(v66, *(_QWORD *)(*v2 + 40));
  sub_10000C020();
  sub_100076C1C((uint64_t)v66);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  v58 = v5 + 56;
  v59 = v5;
  v54 = v2;
  __dst = a1;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v57 = ~v7;
    v9 = *a2;
    v63 = a2[1];
    v56 = *a2;
    do
    {
      v10 = (uint64_t *)(*(_QWORD *)(v59 + 48) + 104 * v8);
      v12 = v10[2];
      v11 = v10[3];
      v13 = (void *)v10[4];
      v14 = v10[6];
      v61 = v10[7];
      v62 = v10[5];
      v15 = v10[8];
      v60 = v10[9];
      v16 = v10[10];
      v17 = (void *)v10[11];
      v64 = v10[1];
      v18 = *v10 == v9 && v10[1] == v63;
      v65 = v10[3];
      if (v18 || (sub_100017E14(*v10, v64, v9, v63) & 1) != 0)
      {
        v19 = a2[2];
        v20 = a2[3];
        v21 = v12 == v19 && v11 == v20;
        if (v21 || (sub_100017E14(v12, v11, v19, v20) & 1) != 0)
        {
          sub_10000795C(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
          v22 = a2[4];
          swift_bridgeObjectRetain(v64);
          sub_10000EC68();
          v23 = v13;
          sub_10000C020();
          sub_1000100E0();
          sub_1000100E0();
          v24 = v17;
          sub_10000EC68();
          if ((static NSObject.== infix(_:_:)(v23, v22) & 1) == 0)
            goto LABEL_32;
          v25 = a2[5];
          v26 = a2[6];
          v27 = v62 == v25 && v14 == v26;
          if ((v27 || (sub_100017E14(v62, v14, v25, v26) & 1) != 0)
            && ((v28 = a2[7], v29 = a2[8], v61 == v28) ? (v30 = v15 == v29) : (v30 = 0),
                (v30 || (sub_100017E14(v61, v15, v28, v29) & 1) != 0)
             && ((v31 = a2[9], v32 = a2[10], v60 == v31) ? (v33 = v16 == v32) : (v33 = 0),
                 (v33 || (sub_100017E14(v60, v16, v31, v32) & 1) != 0)
              && (static NSObject.== infix(_:_:)(v24, a2[11]) & 1) != 0)))
          {
            sub_10002F6EC();
            v35 = v34;
            sub_1000117B4();

            sub_10000C028();
            sub_1000059B0();
            swift_bridgeObjectRelease(v14);

            swift_bridgeObjectRelease(v65);
            swift_bridgeObjectRelease(v64);
            v9 = v56;
            if ((v35 & 1) != 0)
            {
              swift_bridgeObjectRelease(v59);
              sub_10000F418(a2);
              v38 = (_QWORD *)(*(_QWORD *)(*v54 + 48) + 104 * v8);
              v39 = v38[1];
              v40 = v38[2];
              v41 = v38[3];
              v43 = (void *)v38[4];
              v42 = v38[5];
              v45 = v38[6];
              v44 = v38[7];
              v47 = v38[8];
              v46 = v38[9];
              v48 = v38[10];
              v49 = (void *)v38[11];
              v50 = v38[12];
              *__dst = *v38;
              __dst[1] = v39;
              __dst[2] = v40;
              __dst[3] = v41;
              __dst[4] = v43;
              __dst[5] = v42;
              __dst[6] = v45;
              __dst[7] = v44;
              __dst[8] = v47;
              __dst[9] = v46;
              __dst[10] = v48;
              __dst[11] = v49;
              __dst[12] = v50;
              swift_bridgeObjectRetain(v39);
              sub_10000EC68();
              v51 = v43;
              sub_1000101B0();
              sub_100013E10();
              sub_10000BFF4();
              v52 = v49;
              sub_10000C030();
              return 0;
            }
          }
          else
          {
LABEL_32:
            sub_1000117B4();

            sub_10000C028();
            sub_1000059B0();
            swift_bridgeObjectRelease(v14);

            swift_bridgeObjectRelease(v65);
            swift_bridgeObjectRelease(v64);
            v9 = v56;
          }
        }
      }
      v8 = (v8 + 1) & v57;
    }
    while (((*(_QWORD *)(v58 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  swift_bridgeObjectRelease(v59);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v54);
  v66[0] = *v54;
  *v54 = 0x8000000000000000;
  sub_10000F49C(a2);
  sub_100034220(a2, v8, isUniquelyReferenced_nonNull_native);
  v37 = *v54;
  *v54 = v66[0];
  swift_bridgeObjectRelease(v37);
  memcpy(__dst, a2, 0x68uLL);
  return 1;
}

Swift::Int sub_1000334D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  sub_10001BE7C(&qword_100128B38);
  v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  v21 = v4;
  __CocoaSet.makeIterator()(a1);
  v5 = __CocoaSet.Iterator.next()();
  if (!v5)
  {
LABEL_16:
    swift_release();
    return v4;
  }
  v6 = v5;
  v7 = sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
  while (1)
  {
    v19 = v6;
    swift_dynamicCast(&v20, &v19, (char *)&type metadata for Swift.AnyObject + 8, v7, 7);
    v4 = v21;
    if (*(_QWORD *)(v21 + 24) <= *(_QWORD *)(v21 + 16))
    {
      sub_1000338D0();
      v4 = v21;
    }
    v8 = v20;
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
    v10 = v4 + 56;
    v11 = -1 << *(_BYTE *)(v4 + 32);
    v12 = result & ~v11;
    v13 = v12 >> 6;
    if (((-1 << v12) & ~*(_QWORD *)(v4 + 56 + 8 * (v12 >> 6))) == 0)
      break;
    v14 = __clz(__rbit64((-1 << v12) & ~*(_QWORD *)(v4 + 56 + 8 * (v12 >> 6)))) | v12 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(_QWORD *)(v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14) = v8;
    ++*(_QWORD *)(v4 + 16);
    v6 = __CocoaSet.Iterator.next()();
    if (!v6)
      goto LABEL_16;
  }
  v15 = 0;
  v16 = (unint64_t)(63 - v11) >> 6;
  while (++v13 != v16 || (v15 & 1) == 0)
  {
    v17 = v13 == v16;
    if (v13 == v16)
      v13 = 0;
    v15 |= v17;
    v18 = *(_QWORD *)(v10 + 8 * v13);
    if (v18 != -1)
    {
      v14 = __clz(__rbit64(~v18)) + (v13 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

void sub_1000336B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t i;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD *v31;
  _QWORD v32[9];

  sub_100036330();
  sub_10001BE7C((uint64_t *)&unk_100128960);
  v3 = sub_10001EEE0();
  static _SetStorage.resize(original:capacity:move:)(v3);
  sub_100036344();
  if (v4)
  {
    v31 = v1 + 7;
    sub_1000362B8();
    v7 = v6 & v5;
    v9 = (unint64_t)(v8 + 63) >> 6;
    sub_100011038();
    v10 = 0;
    if (!v7)
      goto LABEL_4;
LABEL_3:
    sub_10000FE54();
    for (i = v11 | (v10 << 6); ; i = v17 + (v10 << 6))
    {
      v18 = (uint64_t *)(v1[6] + 16 * i);
      v19 = *v18;
      v20 = v18[1];
      Hasher.init(_seed:)(v32, *(_QWORD *)(v2 + 40));
      String.hash(into:)(v32, v19, v20);
      Hasher._finalize()();
      sub_1000162F4();
      if (v21)
      {
        sub_100018B74();
        while (1)
        {
          sub_10001EE3C();
          if (v21)
          {
            if ((v23 & 1) != 0)
              break;
          }
          if (v24 == v25)
            v24 = 0;
          if (*(_QWORD *)(v2 + 56 + 8 * v24) != -1)
          {
            sub_100019AC8();
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      sub_10000C00C();
LABEL_28:
      sub_100036200(v22);
      v27 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v26);
      *v27 = v19;
      v27[1] = v20;
      sub_10001A82C();
      if (v7)
        goto LABEL_3;
LABEL_4:
      v13 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_36;
      if (v13 >= v9)
        goto LABEL_30;
      ++v10;
      if (!v31[v13])
      {
        v10 = v13 + 1;
        if (v13 + 1 >= v9)
          goto LABEL_30;
        if (!v31[v10])
        {
          v10 = v13 + 2;
          if (v13 + 2 >= v9)
            goto LABEL_30;
          if (!v31[v10])
          {
            v14 = v13 + 3;
            if (v14 >= v9)
            {
LABEL_30:
              sub_100018B6C();
              sub_10001A914();
              if (v29 ^ v30 | v21)
                *v31 = -1 << v28;
              else
                sub_10003286C(0, (unint64_t)(v28 + 63) >> 6, v31);
              v1[2] = 0;
              break;
            }
            if (!v31[v14])
            {
              while (1)
              {
                v10 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_37;
                if (v10 >= v9)
                  goto LABEL_30;
                ++v14;
                if (v31[v10])
                  goto LABEL_17;
              }
            }
            v10 = v14;
          }
        }
      }
LABEL_17:
      sub_100010018();
      v7 = v16 & v15;
    }
  }
  sub_100018B6C();
  *v0 = v2;
  sub_100013414();
}

uint64_t sub_1000338D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  sub_10001BE7C(&qword_100128B38);
  v3 = static _SetStorage.resize(original:capacity:move:)(v2);
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    if (!v8)
      goto LABEL_7;
LABEL_6:
    v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) == 0)
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          v25 = v21 == v24;
          if (v21 == v24)
            v21 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v21);
          if (v26 != -1)
          {
            v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v22) = v18;
      ++*(_QWORD *)(v4 + 16);
      if (v8)
        goto LABEL_6;
LABEL_7:
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_38;
      if (v15 >= v9)
        goto LABEL_32;
      v16 = v6[v15];
      ++v12;
      if (!v16)
      {
        v12 = v15 + 1;
        if (v15 + 1 >= v9)
          goto LABEL_32;
        v16 = v6[v12];
        if (!v16)
        {
          v12 = v15 + 2;
          if (v15 + 2 >= v9)
            goto LABEL_32;
          v16 = v6[v12];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v9)
            {
LABEL_32:
              swift_release();
              v1 = v28;
              v27 = 1 << *(_BYTE *)(v2 + 32);
              if (v27 > 63)
                sub_10003286C(0, (unint64_t)(v27 + 63) >> 6, (_QWORD *)(v2 + 56));
              else
                *v6 = -1 << v27;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_39;
                if (v12 >= v9)
                  goto LABEL_32;
                v16 = v6[v12];
                ++v17;
                if (v16)
                  goto LABEL_20;
              }
            }
            v12 = v17;
          }
        }
      }
LABEL_20:
      v8 = (v16 - 1) & v16;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_100033B68()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[10];

  v1 = *v0;
  sub_10001BE7C(&qword_100128A70);
  v2 = static _SetStorage.resize(original:capacity:move:)(v1);
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v42 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v43 = (unint64_t)(v4 + 63) >> 6;
    v44 = v2 + 56;
    result = swift_retain();
    v8 = 0;
    v40 = v3;
    v41 = v1;
    if (!v6)
      goto LABEL_7;
LABEL_6:
    v51 = (v6 - 1) & v6;
    v52 = v8;
    for (i = __clz(__rbit64(v6)) | (v8 << 6); ; i = __clz(__rbit64(v11)) + (v12 << 6))
    {
      v14 = *(_QWORD *)(v1 + 48) + 104 * i;
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(v14 + 8);
      v17 = *(_QWORD *)(v14 + 16);
      v18 = v1;
      v19 = *(_QWORD *)(v14 + 40);
      v20 = *(_QWORD *)(v14 + 48);
      v22 = *(_QWORD *)(v14 + 56);
      v21 = *(_QWORD *)(v14 + 64);
      v45 = *(_QWORD *)(v14 + 72);
      v53 = *(_OWORD *)(v14 + 80);
      v54 = *(_OWORD *)(v14 + 24);
      v23 = *(_QWORD *)(v14 + 96);
      Hasher.init(_seed:)(v55, *(_QWORD *)(v3 + 40));
      swift_bridgeObjectRetain(v16);
      v50 = v15;
      String.hash(into:)(v55, v15, v16);
      v46 = v16;
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRetain(v54);
      v49 = v17;
      String.hash(into:)(v55, v17, v54);
      swift_bridgeObjectRelease(v54);
      v24 = *((id *)&v54 + 1);
      NSObject.hash(into:)(v55);

      swift_bridgeObjectRetain(v20);
      v48 = v19;
      v25 = v19;
      v1 = v18;
      String.hash(into:)(v55, v25, v20);
      v47 = v20;
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRetain(v21);
      String.hash(into:)(v55, v22, v21);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRetain(v53);
      String.hash(into:)(v55, v45, v53);
      swift_bridgeObjectRelease(v53);
      v26 = *((id *)&v53 + 1);
      NSObject.hash(into:)(v55);

      Hasher._combine(_:)(*(_QWORD *)(v23 + 16));
      v27 = *(_QWORD *)(v23 + 16);
      v6 = v51;
      v8 = v52;
      if (v27)
      {
        swift_bridgeObjectRetain(v23);
        v28 = (void **)(v23 + 64);
        do
        {
          v30 = (uint64_t)*(v28 - 4);
          v29 = (uint64_t)*(v28 - 3);
          v31 = (uint64_t)*(v28 - 2);
          v32 = (uint64_t)*(v28 - 1);
          v33 = *v28;
          v28 += 5;
          swift_bridgeObjectRetain(v29);
          swift_bridgeObjectRetain(v32);
          v34 = v33;
          String.hash(into:)(v55, v30, v29);
          swift_bridgeObjectRetain(v32);
          String.hash(into:)(v55, v31, v32);
          swift_bridgeObjectRelease(v32);
          v35 = v34;
          NSObject.hash(into:)(v55);
          swift_bridgeObjectRelease(v32);
          swift_bridgeObjectRelease(v29);

          --v27;
        }
        while (v27);
        swift_bridgeObjectRelease(v23);
        v3 = v40;
        v1 = v41;
        v6 = v51;
        v8 = v52;
      }
      v36 = Hasher._finalize()();
      result = _HashTable.nextHole(atOrAfter:)(v36 & ~(-1 << *(_BYTE *)(v3 + 32)), v44, ~(-1 << *(_BYTE *)(v3 + 32)));
      *(_QWORD *)(v44 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v37 = *(_QWORD *)(v3 + 48) + 104 * result;
      *(_QWORD *)v37 = v50;
      *(_QWORD *)(v37 + 8) = v46;
      *(_QWORD *)(v37 + 16) = v49;
      *(_OWORD *)(v37 + 24) = v54;
      *(_QWORD *)(v37 + 40) = v48;
      *(_QWORD *)(v37 + 48) = v47;
      *(_QWORD *)(v37 + 56) = v22;
      *(_QWORD *)(v37 + 64) = v21;
      *(_QWORD *)(v37 + 72) = v45;
      *(_OWORD *)(v37 + 80) = v53;
      *(_QWORD *)(v37 + 96) = v23;
      ++*(_QWORD *)(v3 + 16);
      if (v6)
        goto LABEL_6;
LABEL_7:
      v10 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_33:
        __break(1u);
        return result;
      }
      if (v10 >= v43)
        goto LABEL_27;
      v11 = v42[v10];
      v12 = v8 + 1;
      if (!v11)
      {
        v12 = v8 + 2;
        if (v8 + 2 >= v43)
          goto LABEL_27;
        v11 = v42[v12];
        if (!v11)
        {
          v12 = v8 + 3;
          if (v8 + 3 >= v43)
            goto LABEL_27;
          v11 = v42[v12];
          if (!v11)
          {
            v13 = v8 + 4;
            if (v8 + 4 >= v43)
            {
LABEL_27:
              swift_release();
              v38 = 1 << *(_BYTE *)(v1 + 32);
              if (v38 > 63)
                sub_10003286C(0, (unint64_t)(v38 + 63) >> 6, v42);
              else
                *v42 = -1 << v38;
              *(_QWORD *)(v1 + 16) = 0;
              break;
            }
            v11 = v42[v13];
            if (!v11)
            {
              while (1)
              {
                v12 = v13 + 1;
                if (__OFADD__(v13, 1))
                  goto LABEL_33;
                if (v12 >= v43)
                  goto LABEL_27;
                v11 = v42[v12];
                ++v13;
                if (v11)
                  goto LABEL_20;
              }
            }
            v12 = v8 + 4;
          }
        }
      }
LABEL_20:
      v51 = (v11 - 1) & v11;
      v52 = v12;
    }
  }
  result = swift_release();
  *v39 = v3;
  return result;
}

unint64_t sub_10003401C(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_10003409C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1000338D0();
  }
  else
  {
    if (v8 > v7)
    {
      sub_100034744();
      goto LABEL_14;
    }
    sub_100034D44();
  }
  v9 = *v3;
  v10 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
    v13 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    v14 = static NSObject.== infix(_:_:)(v13, a1);

    if ((v14 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
        v17 = static NSObject.== infix(_:_:)(v16, a1);

        if ((v17 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v18 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * a2) = a1;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    *(_QWORD *)(v18 + 16) = v21;
}

void *sub_100034220(uint64_t *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  char v44;
  uint64_t v45;
  void *result;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v62[10];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_100033B68();
    }
    else
    {
      if (v7 > v6)
      {
        sub_1000348EC();
        goto LABEL_41;
      }
      sub_100034FB8();
    }
    v8 = *v3;
    Hasher.init(_seed:)(v62, *(_QWORD *)(*v3 + 40));
    sub_100076C1C((uint64_t)v62);
    v9 = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v8 + 32);
    a2 = v9 & ~v10;
    v53 = v8 + 56;
    v54 = v8;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v52 = ~v10;
      v11 = *a1;
      v59 = a1[1];
      v51 = *a1;
      do
      {
        v12 = (_QWORD *)(*(_QWORD *)(v54 + 48) + 104 * a2);
        v13 = v12[1];
        v15 = v12[2];
        v14 = v12[3];
        v16 = (void *)v12[4];
        v17 = v12[6];
        v57 = v12[7];
        v58 = v12[5];
        v18 = v12[8];
        v56 = v12[9];
        v20 = v12[10];
        v19 = (void *)v12[11];
        v60 = v12[12];
        v21 = *v12 == v11 && v13 == v59;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, v11, v59, 0) & 1) != 0)
        {
          v22 = a1[2];
          v23 = a1[3];
          v24 = v15 == v22 && v14 == v23;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, v22, v23, 0) & 1) != 0)
          {
            sub_10000795C(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
            v25 = a1[4];
            swift_bridgeObjectRetain(v13);
            v55 = v14;
            swift_bridgeObjectRetain(v14);
            v26 = v16;
            v27 = v17;
            swift_bridgeObjectRetain(v17);
            v28 = v18;
            swift_bridgeObjectRetain(v18);
            v29 = v20;
            v30 = v26;
            swift_bridgeObjectRetain(v29);
            v31 = v19;
            swift_bridgeObjectRetain(v60);
            v32 = v25;
            v33 = v31;
            if ((static NSObject.== infix(_:_:)(v30, v32) & 1) == 0)
              goto LABEL_39;
            v34 = a1[5];
            v35 = a1[6];
            v36 = v58 == v34 && v27 == v35;
            if ((v36 || (_stringCompareWithSmolCheck(_:_:expecting:)(v58, v27, v34, v35, 0) & 1) != 0)
              && ((v37 = a1[7], v38 = a1[8], v57 == v37) ? (v39 = v28 == v38) : (v39 = 0),
                  (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)(v57, v28, v37, v38, 0) & 1) != 0)
               && ((v40 = a1[9], v41 = a1[10], v56 == v40) ? (v42 = v29 == v41) : (v42 = 0),
                   (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)(v56, v29, v40, v41, 0) & 1) != 0)
                && (static NSObject.== infix(_:_:)(v31, a1[11]) & 1) != 0)))
            {
              sub_10002F6EC();
              v44 = v43;
              swift_bridgeObjectRelease(v60);

              swift_bridgeObjectRelease(v29);
              swift_bridgeObjectRelease(v28);
              swift_bridgeObjectRelease(v27);

              swift_bridgeObjectRelease(v55);
              swift_bridgeObjectRelease(v13);
              v11 = v51;
              if ((v44 & 1) != 0)
                goto LABEL_44;
            }
            else
            {
LABEL_39:
              swift_bridgeObjectRelease(v60);

              swift_bridgeObjectRelease(v29);
              swift_bridgeObjectRelease(v28);
              swift_bridgeObjectRelease(v27);

              swift_bridgeObjectRelease(v55);
              swift_bridgeObjectRelease(v13);
              v11 = v51;
            }
          }
        }
        a2 = (a2 + 1) & v52;
      }
      while (((*(_QWORD *)(v53 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_41:
  v45 = *v50;
  *(_QWORD *)(*v50 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = memcpy((void *)(*(_QWORD *)(v45 + 48) + 104 * a2), a1, 0x68uLL);
  v47 = *(_QWORD *)(v45 + 16);
  v48 = __OFADD__(v47, 1);
  v49 = v47 + 1;
  if (v48)
  {
    __break(1u);
LABEL_44:
    result = (void *)ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for LNAppShortcutSpanRecord);
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v45 + 16) = v49;
  }
  return result;
}

void sub_1000345C4()
{
  uint64_t *v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = v0;
  sub_10001BE7C((uint64_t *)&unk_100128960);
  v2 = (_QWORD *)*v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  if (!v2[2])
  {
LABEL_26:
    sub_100018B6C();
    *v1 = v3;
    sub_1000110FC();
    return;
  }
  sub_1000362AC();
  v5 = v2 + 7;
  v7 = (unint64_t)(v6 + 63) >> 6;
  if ((_QWORD *)v3 != v2 || v4 >= &v2[v7 + 7])
    memmove(v4, v2 + 7, 8 * v7);
  v9 = 0;
  *(_QWORD *)(v3 + 16) = v2[2];
  sub_1000362AC();
  sub_1000121C0();
  v12 = v11 & v10;
  v14 = (unint64_t)(v13 + 63) >> 6;
  if ((v11 & v10) == 0)
    goto LABEL_10;
LABEL_9:
  v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v15 | (v9 << 6); ; i = v21 + (v9 << 6))
  {
    v22 = (_QWORD *)(v2[6] + 16 * i);
    v23 = v22[1];
    v24 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * i);
    *v24 = *v22;
    v24[1] = v23;
    swift_bridgeObjectRetain(v23);
    if (v12)
      goto LABEL_9;
LABEL_10:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v14)
      goto LABEL_26;
    ++v9;
    if (!v5[v17])
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_26;
      if (!v5[v9])
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_26;
        if (!v5[v9])
          break;
      }
    }
LABEL_23:
    sub_100010018();
    v12 = v20 & v19;
  }
  v18 = v17 + 3;
  if (v18 >= v14)
    goto LABEL_26;
  if (v5[v18])
  {
    v9 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v14)
      goto LABEL_26;
    ++v18;
    if (v5[v9])
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

id sub_100034744()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;

  v1 = v0;
  sub_10001BE7C(&qword_100128B38);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i) = v20;
    result = v20;
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1000348EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;

  sub_10001BE7C(&qword_100128A70);
  v31 = v0;
  v1 = *v0;
  v2 = static _SetStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_28:
    swift_release();
    *v31 = v3;
    return;
  }
  v4 = (void *)(v2 + 56);
  v5 = v1 + 56;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)v4 >= v1 + 56 + 8 * v6)
    memmove(v4, (const void *)(v1 + 56), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  if (!v11)
    goto LABEL_12;
LABEL_11:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v13 | (v8 << 6); ; i = __clz(__rbit64(v16)) + (v8 << 6))
  {
    v18 = 104 * i;
    v19 = *(_QWORD *)(v1 + 48) + v18;
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(_QWORD *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 40);
    v23 = *(_QWORD *)(v19 + 48);
    v24 = *(_QWORD *)(v19 + 56);
    v25 = *(_QWORD *)(v19 + 64);
    v26 = *(_QWORD *)(v19 + 72);
    v27 = *(_QWORD *)(v19 + 96);
    v28 = *(_QWORD *)(v3 + 48) + v18;
    v32 = *(_OWORD *)(v19 + 24);
    v33 = *(_OWORD *)(v19 + 80);
    *(_QWORD *)v28 = *(_QWORD *)v19;
    *(_QWORD *)(v28 + 8) = v20;
    *(_QWORD *)(v28 + 16) = v21;
    *(_OWORD *)(v28 + 24) = v32;
    *(_QWORD *)(v28 + 40) = v22;
    *(_QWORD *)(v28 + 48) = v23;
    *(_QWORD *)(v28 + 56) = v24;
    *(_QWORD *)(v28 + 64) = v25;
    *(_QWORD *)(v28 + 72) = v26;
    *(_OWORD *)(v28 + 80) = v33;
    *(_QWORD *)(v28 + 96) = v27;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v32);
    v29 = *((id *)&v32 + 1);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v33);
    v30 = *((id *)&v33 + 1);
    swift_bridgeObjectRetain(v27);
    if (v11)
      goto LABEL_11;
LABEL_12:
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v15 >= v12)
      goto LABEL_28;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v12)
        goto LABEL_28;
      v16 = *(_QWORD *)(v5 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v12)
          goto LABEL_28;
        v16 = *(_QWORD *)(v5 + 8 * v8);
        if (!v16)
          break;
      }
    }
LABEL_25:
    v11 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v12)
    goto LABEL_28;
  v16 = *(_QWORD *)(v5 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v12)
      goto LABEL_28;
    v16 = *(_QWORD *)(v5 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_100034B40()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[9];

  v2 = *v0;
  sub_10001BE7C((uint64_t *)&unk_100128960);
  v3 = (_QWORD *)static _SetStorage.resize(original:capacity:move:)(v2);
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release();
LABEL_32:
    *v0 = (uint64_t)v3;
    sub_100013414();
    return;
  }
  sub_1000362AC();
  v4 = v2 + 56;
  sub_1000362B8();
  sub_10001EDD4();
  v24 = v5;
  swift_retain();
  v6 = 0;
  if (!v1)
    goto LABEL_4;
LABEL_3:
  sub_10001A95C();
  for (i = v7 | (v6 << 6); ; i = v13 + (v6 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    Hasher.init(_seed:)(v25, v3[5]);
    sub_10000C020();
    sub_100036374((uint64_t)v25);
    Hasher._finalize()();
    sub_1000162F4();
    if (v17)
    {
      sub_100018B74();
      while (1)
      {
        sub_10001EE3C();
        if (v17)
        {
          if ((v19 & 1) != 0)
            break;
        }
        if (v20 == v21)
          v20 = 0;
        if (v3[v20 + 7] != -1)
        {
          sub_100019AC8();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    sub_10000C00C();
LABEL_28:
    sub_100036200(v18);
    v23 = (_QWORD *)(v3[6] + 16 * v22);
    *v23 = v15;
    v23[1] = v16;
    ++v3[2];
    if (v1)
      goto LABEL_3;
LABEL_4:
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_34;
    if (v9 >= v24)
      goto LABEL_30;
    ++v6;
    if (!*(_QWORD *)(v4 + 8 * v9))
    {
      v6 = v9 + 1;
      if (v9 + 1 >= v24)
        goto LABEL_30;
      if (!*(_QWORD *)(v4 + 8 * v6))
      {
        v6 = v9 + 2;
        if (v9 + 2 >= v24)
          goto LABEL_30;
        if (!*(_QWORD *)(v4 + 8 * v6))
          break;
      }
    }
LABEL_17:
    sub_100010018();
    v1 = v12 & v11;
  }
  v10 = v9 + 3;
  if (v10 >= v24)
  {
LABEL_30:
    swift_release_n(v2, 2);
    goto LABEL_32;
  }
  if (*(_QWORD *)(v4 + 8 * v10))
  {
    v6 = v10;
    goto LABEL_17;
  }
  while (1)
  {
    v6 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v6 >= v24)
      goto LABEL_30;
    ++v10;
    if (*(_QWORD *)(v4 + 8 * v6))
      goto LABEL_17;
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_100034D44()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  sub_10001BE7C(&qword_100128B38);
  v3 = static _SetStorage.resize(original:capacity:move:)(v2);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v28 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = *(_QWORD *)(v4 + 40);
    v19 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v10 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v23) = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_36;
    if (v15 >= v9)
      goto LABEL_32;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v9)
        goto LABEL_32;
      v16 = *(_QWORD *)(v6 + 8 * v12);
      if (!v16)
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v9)
          goto LABEL_32;
        v16 = *(_QWORD *)(v6 + 8 * v12);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v8 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v9)
  {
LABEL_32:
    result = swift_release_n(v2, 2);
    v1 = v28;
    goto LABEL_34;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v12 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v9)
      goto LABEL_32;
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_100034FB8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[10];

  v1 = *v0;
  sub_10001BE7C(&qword_100128A70);
  v2 = static _SetStorage.resize(original:capacity:move:)(v1);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_29:
    *v39 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v40 = v1 + 56;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v41 = (unint64_t)(v4 + 63) >> 6;
  v42 = v2 + 56;
  result = swift_retain();
  v8 = 0;
  v43 = v1;
  v44 = v3;
  if (!v6)
    goto LABEL_7;
LABEL_6:
  v50 = (v6 - 1) & v6;
  v51 = v8;
  for (i = __clz(__rbit64(v6)) | (v8 << 6); ; i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    v14 = *(_QWORD *)(v1 + 48) + 104 * i;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 48);
    v19 = *(_QWORD *)(v14 + 64);
    v45 = *(_QWORD *)(v14 + 56);
    v52 = *(_QWORD *)(v14 + 72);
    v53 = *(_QWORD *)(v14 + 40);
    v54 = *(_OWORD *)(v14 + 80);
    v55 = *(_OWORD *)(v14 + 24);
    v20 = *(_QWORD *)(v14 + 96);
    Hasher.init(_seed:)(v56, *(_QWORD *)(v3 + 40));
    swift_bridgeObjectRetain_n(v16, 2);
    swift_bridgeObjectRetain(v55);
    v21 = *((id *)&v55 + 1);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v54);
    v22 = *((id *)&v54 + 1);
    swift_bridgeObjectRetain(v20);
    v49 = v15;
    String.hash(into:)(v56, v15, v16);
    v48 = v16;
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRetain(v55);
    v47 = v17;
    String.hash(into:)(v56, v17, v55);
    swift_bridgeObjectRelease(v55);
    v23 = v21;
    NSObject.hash(into:)(v56);

    swift_bridgeObjectRetain(v18);
    String.hash(into:)(v56, v53, v18);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v56, v45, v19);
    v46 = v19;
    v24 = v19;
    v25 = v20;
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRetain(v54);
    String.hash(into:)(v56, v52, v54);
    v1 = v43;
    swift_bridgeObjectRelease(v54);
    v26 = v22;
    v3 = v44;
    v27 = v26;
    NSObject.hash(into:)(v56);

    Hasher._combine(_:)(*(_QWORD *)(v20 + 16));
    v28 = *(_QWORD *)(v20 + 16);
    if (v28)
    {
      swift_bridgeObjectRetain(v20);
      v29 = (void **)(v20 + 64);
      do
      {
        v30 = (uint64_t)*(v29 - 4);
        v31 = (uint64_t)*(v29 - 3);
        v32 = (uint64_t)*(v29 - 2);
        v33 = (uint64_t)*(v29 - 1);
        v34 = *v29;
        v29 += 5;
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v33);
        v35 = v34;
        String.hash(into:)(v56, v30, v31);
        swift_bridgeObjectRetain(v33);
        String.hash(into:)(v56, v32, v33);
        swift_bridgeObjectRelease(v33);
        v36 = v35;
        NSObject.hash(into:)(v56);
        swift_bridgeObjectRelease(v33);
        swift_bridgeObjectRelease(v31);

        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease(v25);
      v1 = v43;
      v3 = v44;
    }
    v37 = Hasher._finalize()();
    result = _HashTable.nextHole(atOrAfter:)(v37 & ~(-1 << *(_BYTE *)(v3 + 32)), v42, ~(-1 << *(_BYTE *)(v3 + 32)));
    *(_QWORD *)(v42 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v38 = *(_QWORD *)(v3 + 48) + 104 * result;
    *(_QWORD *)v38 = v49;
    *(_QWORD *)(v38 + 8) = v48;
    *(_QWORD *)(v38 + 16) = v47;
    *(_OWORD *)(v38 + 24) = v55;
    *(_QWORD *)(v38 + 40) = v53;
    *(_QWORD *)(v38 + 48) = v18;
    *(_QWORD *)(v38 + 56) = v45;
    *(_QWORD *)(v38 + 64) = v46;
    v8 = v51;
    *(_QWORD *)(v38 + 72) = v52;
    *(_OWORD *)(v38 + 80) = v54;
    *(_QWORD *)(v38 + 96) = v25;
    ++*(_QWORD *)(v3 + 16);
    v6 = v50;
    if (v50)
      goto LABEL_6;
LABEL_7:
    v10 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v10 >= v41)
      goto LABEL_27;
    v11 = *(_QWORD *)(v40 + 8 * v10);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8 + 2;
      if (v8 + 2 >= v41)
        goto LABEL_27;
      v11 = *(_QWORD *)(v40 + 8 * v12);
      if (!v11)
      {
        v12 = v8 + 3;
        if (v8 + 3 >= v41)
          goto LABEL_27;
        v11 = *(_QWORD *)(v40 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_20:
    v50 = (v11 - 1) & v11;
    v51 = v12;
  }
  v13 = v8 + 4;
  if (v8 + 4 >= v41)
  {
LABEL_27:
    result = swift_release_n(v1, 2);
    goto LABEL_29;
  }
  v11 = *(_QWORD *)(v40 + 8 * v13);
  if (v11)
  {
    v12 = v8 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v41)
      goto LABEL_27;
    v11 = *(_QWORD *)(v40 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_20;
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_100035470(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 != v6 || v5 != v7)
    sub_100017E14(v3, v5, v6, v7);
  sub_1000117B4();
  sub_1000059A8();
  sub_10001000C();
}

void sub_1000354E0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (void **)(a2 + 64);
    do
    {
      v6 = (uint64_t)*(v5 - 4);
      v7 = (uint64_t)*(v5 - 3);
      v8 = *v5;
      v5 += 5;
      sub_10000BFF4();
      sub_10000C020();
      v9 = v8;
      String.hash(into:)(a1, v6, v7);
      sub_10000C020();
      sub_100036374(a1);
      sub_1000059B0();
      v10 = v9;
      NSObject.hash(into:)(a1);
      sub_1000059B0();
      sub_1000101FC();

      --v4;
    }
    while (v4);
  }
  sub_1000110FC();
}

Swift::Int sub_100035588(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = sub_10001333C();
  sub_1000100D0();
  return v6;
}

uint64_t sub_1000355F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_100127C48 != -1)
    swift_once(&qword_100127C48, sub_10002E70C);
  return sub_100035688(a1, a2, a3, a4, a5, qword_100128790, a7, a8);
}

uint64_t sub_100035688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t result;
  _QWORD v21[6];
  __int128 v22[2];
  _QWORD v23[5];

  v23[3] = a7;
  v23[4] = a8;
  v15 = sub_10001795C(v23);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v15, a5, a7);
  v16 = *(NSObject **)(a6 + 32);
  sub_100019A60((uint64_t)v23, (uint64_t)v22);
  v17 = (_QWORD *)swift_allocObject(&unk_10011B038, 96, 7);
  v17[2] = a6;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a4;
  sub_100019A48(v22, (uint64_t)(v17 + 7));
  v18 = swift_allocObject(&unk_10011B060, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100035860;
  *(_QWORD *)(v18 + 24) = v17;
  v21[4] = sub_100035884;
  v21[5] = v18;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_10002ECBC;
  v21[3] = &unk_10011B078;
  v19 = _Block_copy(v21);
  swift_retain();
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  swift_retain();
  swift_release();
  dispatch_sync(v16, v19);
  _Block_release(v19);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation(v18, "", 111, 126, 20, 1);
  swift_release();
  result = swift_release();
  if ((a4 & 1) == 0)
    return sub_10000E87C(v23);
  __break(1u);
  return result;
}

uint64_t sub_100035828()
{
  uint64_t v0;

  swift_release();
  sub_100036244();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  sub_10000E87C((_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100035860()
{
  uint64_t v0;

  return sub_10002E940(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), v0 + 56);
}

uint64_t sub_100035874()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100035884()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  sub_10000BFBC();
}

uint64_t sub_1000358A0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100035A80(a1, sub_100032E30, a2);
}

uint64_t sub_1000358B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = -1 << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64)
    v8 = ~(-1 << -(char)v4);
  else
    v8 = -1;
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_1000358EC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000358F4()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    sub_10000EC68();
    sub_100013E10();
    v11(&v19, v20);
    sub_1000100D0();
    sub_1000117B4();
    return v19;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v18 < v14)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_100035A74@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100035A80(a1, sub_1000361EC, a2);
}

uint64_t sub_100035A80@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(uint64_t *, _QWORD, _QWORD, _QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = a2(&v7, *a1, a1[1], a1[2]);
  v5 = v7;
  *a3 = result;
  a3[1] = v6;
  a3[2] = v5;
  return result;
}

uint64_t sub_100035AC4()
{
  uint64_t v0;

  swift_release();
  sub_100036244();
  return swift_deallocObject(v0, 40, 7);
}

void sub_100035AEC(void *a1)
{
  uint64_t v1;

  sub_10002EDDC(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  sub_10000BFBC();
}

uint64_t sub_100035B10()
{
  _QWORD *v0;

  sub_1000362E8();
  sub_100036244();
  swift_unknownObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100035B4C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = swift_task_alloc(dword_100128974);
  v1 = (_QWORD *)sub_10001BFC0(v0);
  v2 = sub_1000143B4(v1);
  return sub_10002F090(v2, v3, v4, v5, v6);
}

uint64_t sub_100035BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = swift_task_alloc(dword_100128984);
  v9 = (_QWORD *)sub_10001BFC0(v8);
  *v9 = v3;
  v9[1] = sub_1000361DC;
  return sub_10002F178(a1, a2, v7, v6);
}

uint64_t sub_100035C14()
{
  _QWORD *v0;

  sub_1000362E8();
  sub_10000E87C(v0 + 4);
  swift_unknownObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100035C54()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = swift_task_alloc(dword_100128994);
  v1 = (_QWORD *)sub_10001BFC0(v0);
  v2 = sub_1000143B4(v1);
  return sub_10002F468(v2, v3, v4, v5, v6);
}

uint64_t sub_100035CB4(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100035CDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100035D00()
{
  uint64_t v0;

  sub_1000362E8();
  sub_100036244();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

unint64_t sub_100035D2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001281A0;
  if (!qword_1001281A0)
  {
    v1 = sub_100025A6C((uint64_t *)&unk_1001289C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001281A0);
  }
  return result;
}

uint64_t sub_100035D70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LNBundleRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100035DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LNBundleRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100035DF8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_100035E24(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_100035E2C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for RegistryUpdatedNotification(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *sub_100035E78(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100035EA8(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100035EE8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for XPCStreamName()
{
  sub_1000059CC();
}

uint64_t sub_100035F30(_QWORD *a1)
{
  swift_unknownObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t *sub_100035F60(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  v7 = a2[4];
  a1[4] = v7;
  swift_unknownObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *sub_100035FB4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for LNAppShortcutSpanSynonymRecord(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *sub_10003604C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  v7 = a2[4];
  v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_1000360A0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000360E0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ConcreteXPCEvent()
{
  sub_1000059CC();
}

void *sub_100036134()
{
  return &protocol witness table for String;
}

unint64_t sub_100036144()
{
  unint64_t result;

  result = qword_100128C00;
  if (!qword_100128C00)
  {
    result = swift_getWitnessTable(&unk_1000EFC90, &unk_10011B1F8);
    atomic_store(result, (unint64_t *)&qword_100128C00);
  }
  return result;
}

void *sub_100036180()
{
  return &protocol witness table for String;
}

unint64_t sub_100036190()
{
  unint64_t result;

  result = qword_100128C08;
  if (!qword_100128C08)
  {
    result = swift_getWitnessTable(&unk_1000EFCC8, &unk_10011B1F8);
    atomic_store(result, (unint64_t *)&qword_100128C08);
  }
  return result;
}

void *sub_1000361CC()
{
  return &protocol witness table for String;
}

uint64_t sub_1000361F0()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeBackToFront)();
}

void sub_100036200(unint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

_QWORD *sub_100036220(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, v1);
}

uint64_t sub_100036234(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100036244()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
}

size_t sub_100036264(_QWORD *a1)
{
  uint64_t v1;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / 8);
  return result;
}

uint64_t sub_10003628C()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_100036294()
{
  uint64_t v0;

  return v0 + 32;
}

void sub_1000362A0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * a1;
}

uint64_t sub_1000362CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return String.init<A>(describing:)(a1, a18);
}

uint64_t sub_1000362E8()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
}

id sub_1000362F0()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v0 + 48) + 8 * v1);
}

uint64_t sub_1000362FC(uint64_t a1)
{
  uint64_t v1;

  return static NSObject.== infix(_:_:)(a1, v1);
}

void sub_10003631C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * a1);
  *v4 = v3;
  v4[1] = v2;
}

size_t sub_100036350(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_100036374(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(a1, v1, v2);
}

uint64_t sub_100036380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 24);
}

void sub_10003638C()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1000363A0()
{
  uint64_t v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_1000363AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(a1, v2, v1);
}

_QWORD *sub_1000363B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  return Hasher.init(_seed:)((uint64_t *)va, *(_QWORD *)(v5 + 40));
}

void *sub_1000363C4()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0x74726F6853707061, 0xEC00000073747563, 0, 0);
  return memcpy(&unk_10012C9D0, __src, 0xA8uLL);
}

uint64_t sub_10003641C(uint64_t a1)
{
  return sub_100036460(a1, (uint64_t)&qword_10012CA78, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_100036440(uint64_t a1)
{
  return sub_100036460(a1, (uint64_t)&qword_10012CA90, 0x617461646174656DLL, 0xE800000000000000);
}

uint64_t sub_100036460(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_10001BE7C(&qword_100128D00);
  sub_100037BD0((unint64_t *)&qword_100129FA0, &qword_100128D00);
  return ExpressionType.init(_:)(a3, a4, v6, v7);
}

void *sub_1000364D4()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0xD000000000000010, 0x80000001000F3C50, 0, 0);
  return memcpy(&unk_100128C10, __src, 0xA8uLL);
}

uint64_t sub_100036528(uint64_t a1)
{
  return sub_100036460(a1, (uint64_t)&qword_100128CB8, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_10003654C(uint64_t a1)
{
  return sub_100036460(a1, (uint64_t)&unk_100128CD0, 0xD000000000000010, 0x80000001000F3C70);
}

uint64_t sub_100036570()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D10);
  sub_100037BD0((unint64_t *)&unk_100129FB0, &qword_100128D10);
  return ExpressionType.init(_:)(0x446465646F636E65, 0xEB00000000617461, v0, v1);
}

void sub_1000365DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[21];
  _QWORD v41[3];
  ValueMetadata *v42;
  _UNKNOWN **v43;
  _QWORD v44[21];
  _BYTE v45[176];
  uint64_t v46;

  sub_10000C038();
  v46 = v0;
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRetain(v1);
  v9 = sub_100036968(v4, v2);
  v11 = v10;
  if (qword_100127C68 != -1)
    swift_once(&qword_100127C68, sub_1000364D4);
  sub_1000189C4(v44, &unk_100128C10);
  sub_1000189C4(&v38, &unk_100128C10);
  sub_1000379AC(v44);
  if (qword_100127C80 != -1)
    swift_once(&qword_100127C80, sub_100036570);
  v12 = qword_100128CE8;
  v13 = unk_100128CF0;
  v14 = qword_100128CF8;
  v42 = (ValueMetadata *)sub_10001BE7C(&qword_100128D10);
  v43 = &protocol witness table for Expression<A>;
  v41[0] = v12;
  v41[1] = v13;
  v41[2] = v14;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  SchemaType.select(_:_:)((uint64_t)v41, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  sub_100037A7C(v44);
  sub_10000E87C(v41);
  sub_1000189C4(v45, v40);
  if (qword_100127C70 != -1)
    swift_once(&qword_100127C70, sub_100036528);
  sub_10001768C((uint64_t)&qword_100128CB8);
  v38 = v8;
  v39 = v6;
  == infix<A>(_:_:)();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  if (qword_100127C78 != -1)
    swift_once(&qword_100127C78, sub_10003654C);
  sub_10001768C((uint64_t)&unk_100128CD0);
  v38 = v9;
  v39 = v11;
  == infix<A>(_:_:)();
  v22 = v21;
  v24 = v23;
  v26 = v25;
  sub_1000059C4();
  && infix(_:_:)(v16, v18, v20, v22, v24, v26);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_100007398();
  sub_1000059A8();
  sub_1000117B4();
  sub_10000EC84();
  v42 = &type metadata for Table;
  v43 = &protocol witness table for Table;
  v33 = sub_1000100C8((uint64_t)&unk_10011B380, 184);
  v34 = v33 + 16;
  v41[0] = v33;
  sub_1000189C4(&v38, v45);
  sub_10000C030();
  sub_1000100E0();
  QueryType.filter(_:)(v28, v30, v32, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v34);
  sub_1000117AC(v32);
  sub_1000117AC(v30);
  sub_10001CD20();
  v35 = Connection.pluck(_:)(v41);
  v37 = v36;
  sub_10000E87C(v41);
  if (!v46 && v35)
  {
    sub_10001768C((uint64_t)&qword_100128CE8);
    Row.get<A>(_:)();
    swift_bridgeObjectRelease(v37);
    sub_1000059A8();
    sub_100036A70(v40[0], v40[1]);
    sub_10000C050();
  }
  sub_1000117E8();
}

uint64_t sub_100036968(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSString v4;
  id v5;
  uint64_t v6;
  Class isa;
  id v8;
  uint64_t v9;

  v3 = (void *)objc_opt_self(NSLocale);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v5 = objc_msgSend(v3, "componentsFromLocaleIdentifier:", v4);

  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String, &type metadata for String, &protocol witness table for String);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v3, "localeIdentifierFromComponents:", isa);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  return v9;
}

uint64_t sub_100036A70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[4];
  uint64_t v10;

  sub_10000795C(0, &qword_100128D18, NSKeyedUnarchiver_ptr);
  v5 = sub_10001BE7C(&qword_100128D20);
  v6 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000EFD90;
  *(_QWORD *)(v6 + 32) = sub_10000795C(0, (unint64_t *)&qword_100128D28, NSArray_ptr);
  *(_QWORD *)(v6 + 40) = sub_10000795C(0, (unint64_t *)&unk_10012A6E0, LNAutoShortcut_ptr);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v9, v6, a1, a2);
  result = swift_bridgeObjectRelease(v6);
  if (!v2)
  {
    if (v9[3])
    {
      v8 = sub_10001BE7C(&qword_10012AF50);
      if (swift_dynamicCast(&v10, v9, (char *)&type metadata for Any + 8, v8, 6))
        return v10;
      else
        return 0;
    }
    else
    {
      sub_1000131A8((uint64_t)v9, &qword_100128A40);
      return 0;
    }
  }
  return result;
}

void sub_100036BB4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  _BOOL8 v64;
  Swift::Int v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t isUnique;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[5];
  _QWORD v93[21];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  ValueMetadata *v98;
  _UNKNOWN **v99;
  _BYTE v100[168];
  _QWORD v101[21];
  _QWORD v102[21];
  _QWORD v103[21];
  _QWORD v104[21];
  _QWORD v105[21];
  _BYTE v106[176];
  uint64_t v107;

  sub_10000C038();
  swift_bridgeObjectRetain();
  v86 = sub_1000179F8();
  v87 = v1;
  if (qword_100127F58 != -1)
    swift_once(&qword_100127F58, sub_1000C6A74);
  sub_1000189C4(v100, &unk_10012D4C0);
  if (qword_100127C68 != -1)
    swift_once(&qword_100127C68, sub_1000364D4);
  sub_1000189C4(v101, &unk_100128C10);
  v2 = sub_10001BE7C(&qword_100128D30);
  sub_1000379AC(v101);
  sub_100037BD0(&qword_100128D38, &qword_100128D30);
  ExpressionType.init(_:)(0xD000000000000010, 0x80000001000F3C70, v2, v3);
  sub_1000189C4(&v96, v101);
  v4 = sub_10001BE7C((uint64_t *)&unk_100128780);
  v83 = sub_10001D944(v94, v95, v5, v6, v4);
  isUnique = v7;
  v85 = v8;
  sub_100007398();
  sub_10000E038();
  sub_100037A7C(v101);
  sub_1000189C4(v102, &unk_100128C10);
  v9 = sub_10001BE7C(&qword_100128D40);
  sub_1000379AC(v102);
  sub_100037BD0(&qword_100128D48, &qword_100128D40);
  ExpressionType.init(_:)(0x446465646F636E65, 0xEB00000000617461, v9, v10);
  sub_1000189C4(&v96, v102);
  v11 = sub_10001BE7C(&qword_100128D50);
  v14 = sub_10001D944(v94, v95, v12, v13, v11);
  v16 = v15;
  v18 = v17;
  sub_100007398();
  swift_bridgeObjectRelease();
  sub_100037A7C(v102);
  sub_1000189C4(v103, &unk_10012D4C0);
  sub_1000379AC(v103);
  if (qword_100127F60 != -1)
    swift_once(&qword_100127F60, sub_1000C6AC8);
  v19 = qword_10012D568;
  v20 = unk_10012D570;
  v21 = qword_10012D578;
  sub_1000189C4(&v96, v103);
  v22 = QueryType.namespace<A>(_:)(v19, v20, v21, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  v24 = v23;
  v26 = v25;
  sub_100037A7C(v103);
  sub_1000189C4(&v96, v100);
  v93[3] = sub_10001BE7C(&qword_100128D00);
  v93[4] = &protocol witness table for Expression<A>;
  v93[0] = v22;
  v93[1] = v24;
  v93[2] = v26;
  v27 = sub_10001BE7C(&qword_100128D58);
  v28 = sub_1000100C8(v27, 72);
  *(_OWORD *)(v28 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v28 + 56) = v9;
  *(_QWORD *)(v28 + 64) = &protocol witness table for Expression<A>;
  v82 = v14;
  *(_QWORD *)(v28 + 32) = v14;
  *(_QWORD *)(v28 + 40) = v16;
  *(_QWORD *)(v28 + 48) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v91 = v16;
  sub_10000C030();
  v107 = v18;
  sub_1000100E0();
  SchemaType.select(_:_:)((uint64_t)v93, v28, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  swift_setDeallocating(v28);
  sub_10001E778();
  sub_10000E87C(v93);
  sub_1000189C4(v104, &v94);
  sub_1000189C4(v93, &v94);
  sub_1000189C4(v105, &unk_100128C10);
  v92[3] = &type metadata for Table;
  v92[4] = &protocol witness table for Table;
  v92[0] = sub_1000100C8((uint64_t)&unk_10011B380, 184);
  sub_1000189C4((void *)(v92[0] + 16), &unk_100128C10);
  sub_1000379AC(v105);
  sub_1000379AC(v105);
  if (qword_100127C70 != -1)
    swift_once(&qword_100127C70, sub_100036528);
  v29 = qword_100128CB8;
  v30 = unk_100128CC0;
  v31 = qword_100128CC8;
  sub_1000189C4(&v96, v105);
  QueryType.namespace<A>(_:)(v29, v30, v31, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_100037A7C(v105);
  v80 = &protocol witness table for String;
  == infix<A>(_:_:)();
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_1000059B0();
  sub_1000059C4();
  sub_100007398();
  sub_10000EC84();
  v96 = v86;
  v97 = v87;
  v38 = == infix<A>(_:_:)(v83, v85, isUnique, &v96, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v40 = v39;
  v42 = v41;
  sub_100007398();
  sub_10000E038();
  sub_10000EC84();
  v43 = && infix(_:_:)(v33, v35, v37, v38, v40, v42);
  v45 = v44;
  v47 = v46;
  sub_1000117B4();
  sub_1000059A8();
  sub_10000C028();
  sub_1000059B0();
  QueryType.join(_:_:on:)(2, v92, v43, v45, v47, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)&v96);
  sub_10000E038();
  sub_1000059C4();
  sub_100037A7C(v104);
  sub_10000E87C(v92);
  sub_1000189C4(v106, &v96);
  v98 = &type metadata for Table;
  v99 = &protocol witness table for Table;
  v96 = sub_1000100C8((uint64_t)&unk_10011B380, 184);
  sub_1000189C4((void *)(v96 + 16), v106);
  Connection.prepareRowIterator(_:)(&v96);
  if (v0)
  {
    sub_1000059D4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000E87C(&v96);
LABEL_12:
    sub_1000117E8();
    return;
  }
  v49 = v48;
  sub_10000E87C(&v96);
  v50 = v91;
  v51 = sub_100010204();
  v52 = _swiftEmptyDictionarySingleton;
  v89 = xmmword_1000EFD90;
  v88 = (char *)&type metadata for Any + 8;
  v90 = v49;
  while (1)
  {
    if (!v51)
    {
      sub_1000059D4();
      sub_10000C028();
      sub_1000059C4();
      sub_10001B770();
      goto LABEL_12;
    }
    sub_10000C030();
    Row.get<A>(_:)();
    v53 = v96;
    v54 = v97;
    Row.get<A>(_:)(v82, v50, v107, v49, v51, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data, v55, (uint64_t)v80, v81, v82, v83, isUnique, v85, v86, (uint64_t)v88, v89, *((uint64_t *)&v89 + 1), v90,
      v91);
    sub_1000059A8();
    sub_1000059C4();
    v56 = v97;
    if (v97 >> 60 == 15)
    {
      sub_10000EC84();
      sub_1000059D4();
      sub_10000C028();
      swift_bridgeObjectRelease();
      sub_10001B770();
      sub_100007398();
      goto LABEL_12;
    }
    v57 = v96;
    sub_10000795C(0, &qword_100128D18, NSKeyedUnarchiver_ptr);
    v58 = sub_10001BE7C(&qword_100128D20);
    v59 = sub_1000100C8(v58, 48);
    *(_OWORD *)(v59 + 16) = v89;
    *(_QWORD *)(v59 + 32) = sub_10000795C(0, (unint64_t *)&qword_100128D28, NSArray_ptr);
    *(_QWORD *)(v59 + 40) = sub_10000795C(0, (unint64_t *)&unk_10012A6E0, LNAutoShortcut_ptr);
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(&v96, v59, v57, v56);
    swift_bridgeObjectRelease();
    if (!v98)
    {
      sub_1000131A8((uint64_t)&v96, &qword_100128A40);
      goto LABEL_24;
    }
    v60 = sub_10001BE7C(&qword_10012AF50);
    if ((swift_dynamicCast(&v94, &v96, v88, v60, 6) & 1) != 0)
      break;
LABEL_24:
    swift_bridgeObjectRetain();
    v70 = sub_1000158E8();
    v72 = v71;
    sub_100007398();
    if ((v72 & 1) == 0)
      goto LABEL_25;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v52);
    v96 = (uint64_t)v52;
    v74 = v52[3];
    sub_10001BE7C(&qword_100128D60);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v74);
    v52 = (_QWORD *)v96;
    swift_bridgeObjectRelease();
    v75 = sub_10001BE7C(&qword_10012AF50);
    _NativeDictionary._delete(at:)(v70, v52, &type metadata for String, v75);
    sub_1000059A8();
LABEL_29:
    sub_10000EC84();
LABEL_25:
    swift_bridgeObjectRelease();
    sub_10001E8CC();
    v51 = sub_100010204();
    v49 = v90;
    v50 = v91;
  }
  v85 = v94;
  LODWORD(isUnique) = swift_isUniquelyReferenced_nonNull_native(v52);
  v96 = (uint64_t)v52;
  v61 = sub_1000158E8();
  v62 = v52[2];
  LODWORD(v86) = v63;
  v64 = (v63 & 1) == 0;
  v65 = v62 + v64;
  if (!__OFADD__(v62, v64))
  {
    v66 = v61;
    sub_10001BE7C(&qword_100128D60);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v65))
    {
      v67 = sub_100016064(v53);
      if ((v86 & 1) != (v68 & 1))
        goto LABEL_34;
      v66 = v67;
    }
    v52 = (_QWORD *)v96;
    if ((v86 & 1) != 0)
    {
      v69 = *(_QWORD *)(v96 + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v69 + 8 * v66) = v85;
    }
    else
    {
      *(_QWORD *)(v96 + 8 * (v66 >> 6) + 64) |= 1 << v66;
      v76 = (uint64_t *)(v52[6] + 16 * v66);
      *v76 = v53;
      v76[1] = v54;
      *(_QWORD *)(v52[7] + 8 * v66) = v85;
      v77 = v52[2];
      v78 = __OFADD__(v77, 1);
      v79 = v77 + 1;
      if (v78)
        goto LABEL_33;
      v52[2] = v79;
      swift_bridgeObjectRetain();
    }
    goto LABEL_29;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_100037610()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::OpaquePointer v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t countAndFlagsBits;
  void *object;
  void *rawValue;
  uint64_t v27;
  unint64_t v28;
  char v29[272];
  _QWORD v30[22];
  SQLite::Insert v31;
  SQLite::Insert v32;

  sub_10000C038();
  v2 = v1;
  v4 = v3;
  swift_bridgeObjectRetain(v5);
  v6 = sub_1000179F8();
  v8 = v7;
  if (qword_100127C68 != -1)
    swift_once(&qword_100127C68, sub_1000364D4);
  sub_1000189C4(v30, &unk_100128C10);
  v9 = sub_10001BE7C(&qword_100128D08);
  v10._rawValue = (void *)swift_initStackObject(v9, v29);
  *((_OWORD *)v10._rawValue + 1) = xmmword_1000EFDA0;
  sub_1000379AC(v30);
  if (qword_100127C70 != -1)
    swift_once(&qword_100127C70, sub_100036528);
  v11 = sub_10001768C((uint64_t)&qword_100128CB8);
  v27 = v4;
  v28 = v2;
  <- infix<A>(_:_:)(v11, v12, v13, (uint64_t)&v27, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  if (qword_100127C78 != -1)
    swift_once(&qword_100127C78, sub_10003654C);
  v14 = sub_10001768C((uint64_t)&unk_100128CD0);
  v27 = v6;
  v28 = v8;
  <- infix<A>(_:_:)(v14, v15, v16, (uint64_t)&v27, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_10000C028();
  if (qword_100127C80 != -1)
    swift_once(&qword_100127C80, sub_100036570);
  v17 = qword_100128CE8;
  v18 = unk_100128CF0;
  v19 = qword_100128CF8;
  v20 = sub_1000378A0();
  if (v0)
  {
    sub_10001CD20();
    sub_100019F20((_QWORD *)v10._rawValue + 14);
    sub_100019F20((_QWORD *)v10._rawValue + 4);
    *((_QWORD *)v10._rawValue + 2) = 0;
    swift_setDeallocating(v10._rawValue);
    sub_10001CC3C();
  }
  else
  {
    v22 = (uint64_t)v20;
    v23 = v21;
    v27 = (uint64_t)v20;
    v28 = v21;
    <- infix<A>(_:_:)(v17, v18, v19, (uint64_t)&v27, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data);
    sub_10001EA88(v22, v23);
    sub_1000189C4(&v27, v30);
    v31 = QueryType.insert(or:_:)(SQLite_OnConflict_replace, v10);
    countAndFlagsBits = v31.template._countAndFlagsBits;
    object = v31.template._object;
    rawValue = v31.bindings._rawValue;
    swift_bridgeObjectRelease(v10._rawValue);
    sub_10001CD20();
    v32.template._countAndFlagsBits = countAndFlagsBits;
    v32.template._object = object;
    v32.bindings._rawValue = rawValue;
    Connection.run(_:)(v32);
    sub_1000117B4();
    sub_1000059B0();
  }
  sub_1000117E8();
}

void *sub_1000378A0()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v7;

  v0 = (void *)objc_opt_self(NSKeyedArchiver);
  sub_10000795C(0, (unint64_t *)&unk_10012A6E0, LNAutoShortcut_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v7 = 0;
  v2 = objc_msgSend(v0, "archivedDataWithRootObject:requiringSecureCoding:error:", isa, 1, &v7);

  v3 = v7;
  if (v2)
  {
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  else
  {
    v4 = v3;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v5);
  }
  return v4;
}

_QWORD *sub_1000379AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[12];
  v10 = a1[13];
  v12 = a1[15];
  v13 = a1[14];
  v14 = a1[16];
  v15 = a1[20];
  swift_bridgeObjectRetain(a1[7]);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_100018298(v6, v7, v8);
  sub_1000182C8(v9, v10, v13, v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

_QWORD *sub_100037A7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[12];
  v10 = a1[13];
  v12 = a1[15];
  v13 = a1[14];
  v14 = a1[20];
  v15 = a1[16];
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  sub_100018818(v6, v7, v8);
  sub_100018848(v9, v10, v13, v12);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_100037B48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

void sub_100037BD0(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100025A6C(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v3), a1);
  }
  sub_10000BFBC();
}

void sub_100037C10(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  v5 = v4;
  sub_10000BFBC();
}

_QWORD *assignWithCopy for LNAppShortcutRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  return a1;
}

_QWORD *assignWithTake for LNAppShortcutRecord(_QWORD *a1, uint64_t a2)
{
  void *v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for LNAppShortcutRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNAppShortcutRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LNAppShortcutRecord()
{
  return &type metadata for LNAppShortcutRecord;
}

void sub_100037D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = 0;
    v8 = a1 + 48;
    v9 = _swiftEmptyArrayStorage;
    v20 = a1 + 48;
    do
    {
      v21 = v9;
      v10 = (_BYTE *)(v8 + 24 * v7);
      v11 = v7;
      while (1)
      {
        if (v11 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v12 = *((_QWORD *)v10 - 2);
        v13 = *((_QWORD *)v10 - 1);
        if (v12 != a2 || v13 != a3)
        {
          v15 = *v10;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(*((_QWORD *)v10 - 2), *((_QWORD *)v10 - 1), a2, a3, 0) & 1) == 0)
            break;
        }
        ++v11;
        v10 += 24;
        if (v5 == v11)
          goto LABEL_17;
      }
      swift_bridgeObjectRetain(v13);
      v9 = v21;
      v23 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
      {
        sub_100052518();
        v9 = v21;
      }
      v8 = v20;
      v16 = v9[2];
      v17 = v16 + 1;
      if (v16 >= v9[3] >> 1)
      {
        v22 = v16 + 1;
        v19 = v9[2];
        sub_100052518();
        v17 = v22;
        v16 = v19;
        v8 = v20;
        v9 = v23;
      }
      v7 = v11 + 1;
      v9[2] = v17;
      v18 = &v9[3 * v16];
      v18[4] = v12;
      v18[5] = v13;
      *((_BYTE *)v18 + 48) = v15;
    }
    while (v5 - 1 != v11);
  }
LABEL_17:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a1);
}

uint64_t sub_100037F28(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _BOOL8 v32;
  Swift::Int v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  int64_t v43;
  uint64_t result;
  uint64_t v45;
  int64_t v46;
  uint64_t v49;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD v57[5];
  _QWORD *v58;

  v6 = v5;
  sub_10004B988(a2, v57);
  v49 = v57[0];
  v51 = v57[3];
  v9 = v57[4];
  v45 = v57[1];
  v46 = (unint64_t)(v57[2] + 64) >> 6;
  swift_bridgeObjectRetain(a2);
  if (!v9)
    goto LABEL_3;
LABEL_2:
  v53 = (v9 - 1) & v9;
  v10 = __clz(__rbit64(v9)) | (v51 << 6);
  while (1)
  {
    v14 = (uint64_t *)(*(_QWORD *)(v49 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v10);
    v18 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0)
      v18 = v15;
    v19 = 7;
    if (((v16 >> 60) & ((v15 & 0x800000000000000) == 0)) != 0)
      v19 = 11;
    v20 = v19 | (v18 << 16);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    v21 = String.subscript.getter(15, v20);
    v23 = v22;
    v25 = v24;
    v27 = v26;
    swift_bridgeObjectRetain(a5);
    v52 = v17;
    v54 = v6;
    v55 = sub_100038504(v17, a3, a4, a5);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    v58 = a1;
    v56 = v25;
    v29 = sub_10003155C();
    v31 = a1[2];
    v32 = (v30 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
      break;
    v34 = v29;
    v35 = v30;
    sub_10001BE7C(&qword_1001282A0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v33))
    {
      v36 = sub_10003155C();
      if ((v35 & 1) != (v37 & 1))
        goto LABEL_38;
      v34 = v36;
    }
    a1 = v58;
    if ((v35 & 1) != 0)
    {
      v38 = v58[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v38 + 8 * v34));
      *(_QWORD *)(v38 + 8 * v34) = v55;
    }
    else
    {
      v58[(v34 >> 6) + 8] |= 1 << v34;
      v39 = (uint64_t *)(a1[6] + 32 * v34);
      *v39 = v21;
      v39[1] = v23;
      v39[2] = v56;
      v39[3] = v27;
      *(_QWORD *)(a1[7] + 8 * v34) = v55;
      v40 = a1[2];
      v41 = __OFADD__(v40, 1);
      v42 = v40 + 1;
      if (v41)
        goto LABEL_36;
      a1[2] = v42;
      swift_bridgeObjectRetain(v27);
    }
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(0x8000000000000000);
    v9 = v53;
    v6 = v54;
    if (v53)
      goto LABEL_2;
LABEL_3:
    v11 = v51 + 1;
    if (__OFADD__(v51, 1))
      goto LABEL_37;
    if (v11 >= v46)
      goto LABEL_34;
    v12 = *(_QWORD *)(v45 + 8 * v11);
    if (!v12)
    {
      v13 = v51 + 2;
      if (v51 + 2 >= v46)
        goto LABEL_34;
      v12 = *(_QWORD *)(v45 + 8 * v13);
      if (v12)
        goto LABEL_12;
      v13 = v51 + 3;
      if (v51 + 3 >= v46)
        goto LABEL_34;
      v12 = *(_QWORD *)(v45 + 8 * v13);
      if (v12)
        goto LABEL_12;
      v13 = v51 + 4;
      if (v51 + 4 >= v46)
        goto LABEL_34;
      v12 = *(_QWORD *)(v45 + 8 * v13);
      if (v12)
      {
LABEL_12:
        v11 = v13;
      }
      else
      {
        v11 = v51 + 5;
        if (v51 + 5 >= v46)
          goto LABEL_34;
        v12 = *(_QWORD *)(v45 + 8 * v11);
        if (!v12)
        {
          v43 = v51 + 6;
          while (v43 < v46)
          {
            v12 = *(_QWORD *)(v45 + 8 * v43++);
            if (v12)
            {
              v11 = v43 - 1;
              goto LABEL_13;
            }
          }
LABEL_34:
          swift_release();
          swift_bridgeObjectRelease(a5);
          return (uint64_t)a1;
        }
      }
    }
LABEL_13:
    v53 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v11 << 6);
    v51 = v11;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Substring);
  __break(1u);
  return result;
}

_QWORD *sub_1000382BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001573C();
    v3 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v3 - 1);
      v4 = *v3;
      v7 = _swiftEmptyArrayStorage[2];
      v6 = _swiftEmptyArrayStorage[3];
      sub_10000C030();
      if (v7 >= v6 >> 1)
        sub_10001573C();
      v3 += 3;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_10003838C(uint64_t a1, uint64_t (*a2)(uint64_t, id))
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = a2(v5 - 4, v6);

      if (v9)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v11 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v10 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v11 >= v10 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
        specialized Array._endMutation()(v12);
      }
      ++v5;
      if (v8 == v4)
        goto LABEL_19;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_19:
  swift_bridgeObjectRelease(a1);
  return &_swiftEmptyArrayStorage;
}

_QWORD *sub_100038504(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSString v32;
  id v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  _BOOL8 v41;
  Swift::Int v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *result;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;

  v69 = a3;
  v8 = sub_10001BE7C(&qword_100128B68);
  v74 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v73 = (uint64_t *)((char *)&v63 - v13);
  __chkstk_darwin(v12);
  v72 = (uint64_t)&v63 - v14;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease(a4);
    return _swiftEmptyArrayStorage;
  }
  v65 = v4;
  v16 = type metadata accessor for LNAppShortcutParameterRecord(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v70 = *(_QWORD *)(v17 + 72);
  v64 = a1;
  swift_bridgeObjectRetain(a1);
  v19 = _swiftEmptyArrayStorage;
  v71 = v16;
  v67 = a2;
  v68 = a4;
  v66 = v11;
  while (1)
  {
    v78 = v19;
    v20 = (uint64_t *)(v18 + *(int *)(v16 + 32));
    v21 = *v20;
    v22 = v20[1];
    v23 = *a2;
    v24 = *(_QWORD *)(*a2 + 16);
    swift_bridgeObjectRetain(v22);
    if (v24)
    {
      v25 = sub_100016064(v21);
      if ((v26 & 1) != 0)
      {
        v27 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 16 * v25);
        v29 = *v27;
        v28 = v27[1];
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRelease(v22);
        goto LABEL_15;
      }
    }
    v76 = v15;
    v30 = v21;
    v31 = *(void **)(v18 + *(int *)(v16 + 28));
    v32 = String._bridgeToObjectiveC()();
    v33 = objc_msgSend(v31, "localizedStringForLocaleIdentifier:", v32);

    v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v28 = v34;

    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v28);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    v79 = (_QWORD *)*a2;
    v36 = v79;
    *a2 = 0x8000000000000000;
    v37 = v30;
    v38 = sub_100016064(v30);
    v40 = v36[2];
    v41 = (v39 & 1) == 0;
    v42 = v40 + v41;
    if (__OFADD__(v40, v41))
      break;
    v43 = v38;
    v44 = v39;
    sub_10001BE7C(&qword_100128220);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42))
    {
      v45 = sub_100016064(v37);
      if ((v44 & 1) != (v46 & 1))
        goto LABEL_25;
      v43 = v45;
    }
    v47 = v79;
    if ((v44 & 1) != 0)
    {
      v48 = (uint64_t *)(v79[7] + 16 * v43);
      swift_bridgeObjectRelease(v48[1]);
      v29 = v77;
      *v48 = v77;
      v48[1] = v28;
    }
    else
    {
      v79[(v43 >> 6) + 8] |= 1 << v43;
      v49 = (uint64_t *)(v47[6] + 16 * v43);
      *v49 = v37;
      v49[1] = v22;
      v50 = (uint64_t *)(v47[7] + 16 * v43);
      v29 = v77;
      *v50 = v77;
      v50[1] = v28;
      v51 = v47[2];
      v52 = __OFADD__(v51, 1);
      v53 = v51 + 1;
      if (v52)
        goto LABEL_24;
      v47[2] = v53;
      swift_bridgeObjectRetain(v22);
    }
    a2 = v67;
    v54 = *v67;
    *v67 = v47;
    swift_bridgeObjectRelease_n(v22, 2);
    swift_bridgeObjectRelease(v54);
    a4 = v68;
    v11 = v66;
    v15 = v76;
LABEL_15:
    v55 = *(int *)(v75 + 48);
    v56 = (uint64_t)v73;
    v57 = (uint64_t)v73 + v55;
    *v73 = v29;
    *(_QWORD *)(v56 + 8) = v28;
    sub_10001DE28(v18, v56 + v55);
    v16 = v71;
    sub_100014360(v57, 0, 1, v71);
    v58 = v72;
    sub_100019EB8(v56, v72, &qword_100128B68);
    sub_100019EB8(v58, (uint64_t)v11, &qword_100128B68);
    v19 = v78;
    if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0)
    {
      sub_10002FBF4();
      v19 = v60;
    }
    v59 = v19[2];
    if (v59 >= v19[3] >> 1)
    {
      sub_10002FBF4();
      v19 = v61;
    }
    v19[2] = v59 + 1;
    sub_100019EB8((uint64_t)v11, (uint64_t)v19+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(_QWORD *)(v74 + 72) * v59, &qword_100128B68);
    v18 += v70;
    if (!--v15)
    {
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(v64);
      return v19;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_100038964()
{
  return 0xD000000000000034;
}

void sub_100038980()
{
  Swift::UInt v0;

  v0 = sub_1000058BC();
  Hasher._combine(_:)(v0);
}

Swift::Int sub_1000389A0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1000389E0()
{
  return 1;
}

Swift::Int sub_1000389F0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t sub_100038A2C()
{
  sub_100038964();
  return 0xD000000000000034;
}

uint64_t sub_100038A48()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for Logger(0);
  sub_1000269D8(v0, qword_10012CAA8);
  sub_100012A40(v0, (uint64_t)qword_10012CAA8);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v2 = String.init(cString:)();
    return Logger.init(subsystem:category:)(v2, v3, 0x6C6F707265746E49, 0xEC000000726F7461);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100038AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _UNKNOWN **v28;
  uint64_t v29[5];

  v6 = v4;
  v11 = objc_allocWithZone((Class)LSApplicationRecord);
  sub_1000101EC(a2);
  v12 = sub_100070EC8(a1, a2, 0);
  if (v5)
  {
    sub_10000C028();
  }
  else
  {
    v13 = v12;
    v27 = sub_10000795C(0, &qword_1001281F8, LSApplicationRecord_ptr);
    v28 = &off_10011AED8;
    *(_QWORD *)&v25 = v13;
    sub_100019A48(&v25, (uint64_t)v29);
    v11 = v6;
    sub_100039080((uint64_t)v29, a3, a4, v14, v15, v16, v17, v18, v25, *((uint64_t *)&v25 + 1), v26, v27, (uint64_t)v28, v29[0], v29[1], v29[2], v29[3], v29[4], a1,
      a2);
    sub_100018E20(v19, v20, v21, v22, v23);
  }
  return v11;
}

uint64_t sub_100038BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[5];
  uint64_t v19[7];

  sub_100019A60(a1, (uint64_t)v18);
  sub_100038C30(v18, (uint64_t)v19);
  if (!v4)
  {
    sub_100039080((uint64_t)v19, a2, a3, v7, v8, v9, v10, v11, v18[0], v18[1], v18[2], v18[3], v18[4], v19[0], v19[1], v19[2], v19[3], v19[4], v19[5],
      v19[6]);
    sub_100018E20(v12, v13, v14, v15, v16);
  }
  return v3;
}

uint64_t sub_100038C30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  unint64_t v15;
  _OWORD v17[2];
  __int128 v18;
  uint64_t v19;

  v4 = a1[3];
  v5 = a1[4];
  sub_10000E858(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (v7)
  {
    v8 = v6;
    v9 = v7;
    sub_100019A60((uint64_t)a1, (uint64_t)v17);
    *((_QWORD *)&v18 + 1) = v8;
    v19 = v9;
    *(_QWORD *)(a2 + 48) = v9;
    v10 = v17[1];
    *(_OWORD *)a2 = v17[0];
    *(_OWORD *)(a2 + 16) = v10;
    *(_OWORD *)(a2 + 32) = v18;
  }
  else
  {
    if (qword_100127C88 != -1)
      swift_once(&qword_100127C88, sub_100038A48);
    v11 = sub_10000C05C();
    sub_100012A40(v11, (uint64_t)qword_10012CAA8);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (sub_10001CD28(v12))
    {
      v14 = (uint8_t *)sub_100011780(2);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No bundle identifier found in app record", v14, 2u);
      sub_1000133FC((uint64_t)v14);
    }

    v15 = sub_1000401A8();
    swift_allocError(&unk_10011B4E8, v15, 0, 0);
    swift_willThrow();
  }
  return sub_10000E87C(a1);
}

uint64_t sub_100038D90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  char v25;
  uint64_t v26;
  _BOOL8 v27;
  Swift::Int v28;
  unint64_t v29;
  char v30;
  Swift::Bool v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _UNKNOWN **v53;
  _OWORD v54[2];
  __int128 v55;
  _OWORD v56[3];
  uint64_t v57;
  uint64_t v58;

  v5 = v2;
  v45 = a1;
  v46 = a2;
  sub_10000E858((_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 136));
  sub_1000093AC();
  if (v3)
    return (uint64_t)v4;
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
    v4 = _swiftEmptyDictionarySingleton;
LABEL_15:
    sub_1000059A8();
    return (uint64_t)v4;
  }
  sub_1000101B0();
  v43 = v7;
  v9 = (void **)(v7 + 48);
  v4 = _swiftEmptyDictionarySingleton;
  v44 = v5;
  while (1)
  {
    v10 = (uint64_t)*(v9 - 2);
    v11 = (uint64_t)*(v9 - 1);
    v12 = *v9;
    v13 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain_n(v11, 4);
    v14 = v12;
    sub_100070EC8(v10, v11, 0);
    v15 = sub_1000058BC();
    v52 = sub_10000795C(v15, &qword_1001281F8, LSApplicationRecord_ptr);
    v53 = &off_10011AED8;
    *(_QWORD *)&v50 = v13;
    sub_100019A48(&v50, (uint64_t)v54);
    *((_QWORD *)&v55 + 1) = v10;
    v57 = v11;
    v56[0] = v54[0];
    v56[1] = v54[1];
    v56[2] = v55;
    sub_100039080((uint64_t)v56, v45, v46, v16, v17, v18, v19, v20, v42, v43, v44, v45, v46, v47, (uint64_t)v48, v49, v50, *((uint64_t *)&v50 + 1), v51,
      v52);
    v47 = v21;
    v48 = v14;
    v49 = (uint64_t)v9;
    v22 = v8;
    sub_10004017C(v56);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    *(_QWORD *)&v56[0] = v4;
    v58 = v11;
    v24 = sub_100016064(v10);
    v26 = v4[2];
    v27 = (v25 & 1) == 0;
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      break;
    v29 = v24;
    v30 = v25;
    sub_10001BE7C(&qword_100128D60);
    v31 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v28);
    v32 = v22;
    if (v31)
    {
      v33 = sub_100016064(v10);
      if ((v30 & 1) != (v34 & 1))
        goto LABEL_19;
      v29 = v33;
    }
    v4 = *(_QWORD **)&v56[0];
    if ((v30 & 1) != 0)
    {
      v35 = *(_QWORD *)(*(_QWORD *)&v56[0] + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v35 + 8 * v29) = v47;
      v36 = v58;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)&v56[0] + 8 * (v29 >> 6) + 64) |= 1 << v29;
      v37 = (uint64_t *)(v4[6] + 16 * v29);
      v36 = v58;
      *v37 = v10;
      v37[1] = v36;
      *(_QWORD *)(v4[7] + 8 * v29) = v47;
      v38 = v4[2];
      v39 = __OFADD__(v38, 1);
      v40 = v38 + 1;
      if (v39)
        goto LABEL_18;
      v4[2] = v40;
      sub_1000101B0();
    }

    sub_1000117AC(v36);
    sub_100005A78();
    v9 = (void **)(v49 + 24);
    v8 = v32 - 1;
    if (!v8)
    {
      sub_1000059A8();
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100039080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_10000C038();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v29 = type metadata accessor for OSSignpostID(0);
  __chkstk_darwin(v29);
  sub_10001765C();
  static OSSignpostID.exclusive.getter();
  sub_100096EEC();
  sub_100039158(v28, v20, v26, v24, &a10);
  sub_1000B3DEC();
  swift_release();
  sub_10004115C();
  sub_1000117E8();
}

uint64_t sub_100039158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  int *v64;
  char *v65;
  __int128 v66;
  char *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  NSObject *v72;
  char *v73;
  os_log_type_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116[2];
  _OWORD v117[3];
  uint64_t v118;
  uint64_t v119;
  _OWORD v120[2];
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  _BYTE v125[16];
  __int128 v126;
  _BYTE v127[16];
  __int128 v128;
  __int128 v129;
  _BYTE v130[16];
  uint64_t v131;

  v112 = a3;
  v113 = a4;
  v111 = a5;
  v106 = type metadata accessor for AppShortcutInterpolator.Builder(0);
  __chkstk_darwin(v106);
  v107 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v109 = *(_QWORD *)(v8 - 8);
  v110 = v8;
  __chkstk_darwin(v8);
  v108 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v114 - 8);
  v11 = __chkstk_darwin(v114);
  v13 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v98 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v98 - v17;
  v20 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD **)(a1 + 48);
  v105 = a1;
  v115 = a2;
  sub_10000E858((_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 136));
  swift_bridgeObjectRetain(v19);
  v21 = v131;
  sub_1000614FC(v20, (uint64_t)v19);
  if (v21)
    return swift_bridgeObjectRelease(v19);
  v100 = v16;
  v101 = v18;
  v99 = v13;
  v131 = 0;
  v102 = (_QWORD *)(a2 + 112);
  v103 = v10;
  v104 = v20;
  v23 = v114;
  sub_100019EB8((uint64_t)&v119, (uint64_t)v120, (uint64_t *)&unk_10012A010);
  if (*((_QWORD *)&v120[0] + 1))
  {
    v122 = v120[0];
    v123 = v120[1];
    v124 = v121;
    v24 = v102;
    sub_10000E858(v102, *(_QWORD *)(v115 + 136));
    v25 = (unint64_t)v19;
    v26 = v131;
    sub_1000615E0();
    if (v26)
    {
      swift_bridgeObjectRelease(v19);
      v129 = v122;
      sub_10001E408((uint64_t)&v129);
      sub_100019EB8((uint64_t)&v123, (uint64_t)v130, (uint64_t *)&unk_100128780);
      return sub_10001E408((uint64_t)v130);
    }
    else
    {
      v37 = v27;
      if (v27)
      {
        v126 = v122;
        sub_10001E408((uint64_t)&v126);
        sub_100019EB8((uint64_t)&v123, (uint64_t)v127, (uint64_t *)&unk_100128780);
        sub_10001E408((uint64_t)v127);
        v38 = qword_100127C88;
        swift_retain();
        if (v38 != -1)
          swift_once(&qword_100127C88, sub_100038A48);
        v39 = sub_100012A40(v23, (uint64_t)qword_10012CAA8);
        v40 = v103;
        v41 = v100;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v100, v39, v23);
        swift_release();
        v42 = v113;
        swift_bridgeObjectRetain_n(v113, 2);
        swift_bridgeObjectRetain(v19);
        v44 = Logger.logObject.getter(v43);
        v45 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v44, v45))
        {
          v46 = swift_slowAlloc(22, -1);
          v47 = swift_slowAlloc(64, -1);
          v131 = 0;
          v115 = v47;
          *(_QWORD *)&v117[0] = v47;
          *(_DWORD *)v46 = 136315394;
          swift_bridgeObjectRetain(v25);
          *(_QWORD *)&v116[0] = sub_10000FBEC(v104, v25, (uint64_t *)v117);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8);
          swift_bridgeObjectRelease_n(v25, 3);
          *(_WORD *)(v46 + 12) = 2080;
          swift_bridgeObjectRetain(v42);
          *(_QWORD *)&v116[0] = sub_10000FBEC(v112, v42, (uint64_t *)v117);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8);
          swift_bridgeObjectRelease_n(v42, 3);
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "Successful AppShortcut cache hit for %s:%s", (uint8_t *)v46, 0x16u);
          v48 = v115;
          swift_arrayDestroy(v115, 2);
          swift_slowDealloc(v48, -1, -1);
          swift_slowDealloc(v46, -1, -1);

          result = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v100, v114);
        }
        else
        {

          swift_bridgeObjectRelease_n(v42, 2);
          swift_bridgeObjectRelease_n(v25, 2);
          result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v41, v114);
        }
        *v111 = v37;
      }
      else
      {
        v49 = v108;
        static OSSignpostID.exclusive.getter();
        sub_100096EEC();
        v101 = v50;
        (*(void (**)(char *, uint64_t))(v109 + 8))(v49, v110);
        v51 = v115;
        sub_10000E858(v24, *(_QWORD *)(v115 + 136));
        swift_bridgeObjectRetain(v19);
        v52 = v104;
        sub_1000093AC();
        v54 = v53;
        swift_bridgeObjectRelease(v19);
        v55 = *(_QWORD *)(v51 + 136);
        v56 = v102;
        sub_10000E858(v102, v55);
        swift_bridgeObjectRetain(v19);
        sub_1000615C4(v52, v19);
        v58 = v57;
        v131 = 0;
        swift_bridgeObjectRelease(v19);
        sub_10003F38C(v105, (uint64_t)v117);
        sub_100019A60((uint64_t)v56, (uint64_t)v116);
        v110 = v124;
        sub_100019EB8((uint64_t)&v123, (uint64_t)v125, (uint64_t *)&unk_100128780);
        v59 = v113;
        swift_bridgeObjectRetain(v113);
        sub_100035CB4((uint64_t)v125);
        if (qword_100127E80 != -1)
          swift_once(&qword_100127E80, sub_10009056C);
        v60 = v23;
        v61 = sub_100012A40(v23, (uint64_t)qword_10012D0F8);
        v62 = *(void (**)(char *, uint64_t, uint64_t))(v103 + 16);
        v63 = v107;
        v62(v107, v61, v23);
        v64 = (int *)v106;
        v65 = &v63[*(int *)(v106 + 20)];
        v66 = v117[1];
        *(_OWORD *)v65 = v117[0];
        *((_OWORD *)v65 + 1) = v66;
        *((_OWORD *)v65 + 2) = v117[2];
        *((_QWORD *)v65 + 6) = v118;
        v67 = &v63[v64[6]];
        *(_QWORD *)v67 = v112;
        *((_QWORD *)v67 + 1) = v59;
        *(_QWORD *)&v63[v64[7]] = v54;
        *(_QWORD *)&v63[v64[8]] = v58;
        sub_100019A48(v116, (uint64_t)&v63[v64[9]]);
        *(_QWORD *)&v63[v64[10]] = v110;
        sub_100019EB8((uint64_t)v125, (uint64_t)&v63[v64[11]], (uint64_t *)&unk_100128780);
        v128 = v122;
        sub_10001E408((uint64_t)&v128);
        sub_10001E408((uint64_t)v125);
        v68 = qword_100127C88;
        swift_retain();
        v69 = v99;
        if (v68 != -1)
          swift_once(&qword_100127C88, sub_100038A48);
        v110 = sub_100012A40(v60, (uint64_t)qword_10012CAA8);
        ((void (*)(char *))v62)(v69);
        swift_release();
        v70 = (unint64_t)v19;
        swift_bridgeObjectRetain_n(v19, 2);
        v71 = swift_bridgeObjectRetain_n(v59, 2);
        v72 = Logger.logObject.getter(v71);
        v73 = v69;
        v74 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v72, v74))
        {
          v75 = swift_slowAlloc(22, -1);
          v109 = swift_slowAlloc(64, -1);
          *(_QWORD *)&v117[0] = v109;
          *(_DWORD *)v75 = 136315394;
          swift_bridgeObjectRetain(v19);
          *(_QWORD *)&v116[0] = sub_10000FBEC(v104, (unint64_t)v19, (uint64_t *)v117);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8);
          swift_bridgeObjectRelease_n(v19, 3);
          *(_WORD *)(v75 + 12) = 2080;
          swift_bridgeObjectRetain(v113);
          *(_QWORD *)&v116[0] = sub_10000FBEC(v112, v113, (uint64_t *)v117);
          v76 = v113;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8);
          v77 = v76;
          swift_bridgeObjectRelease_n(v76, 3);
          _os_log_impl((void *)&_mh_execute_header, v72, v74, "Interpolating AppShortcuts for %s:%s", (uint8_t *)v75, 0x16u);
          v78 = v109;
          swift_arrayDestroy(v109, 2);
          swift_slowDealloc(v78, -1, -1);
          swift_slowDealloc(v75, -1, -1);

          (*(void (**)(char *, uint64_t))(v103 + 8))(v99, v60);
        }
        else
        {

          v77 = v59;
          swift_bridgeObjectRelease_n(v59, 2);
          swift_bridgeObjectRelease_n(v19, 2);
          (*(void (**)(char *, uint64_t))(v103 + 8))(v73, v60);
        }
        v79 = v131;
        sub_10003A028();
        if (v79)
        {
          sub_10001DBA4();
          swift_bridgeObjectRelease(v19);
        }
        else
        {
          v81 = v80;
          swift_bridgeObjectRetain_n(v70, 2);
          v82 = swift_bridgeObjectRetain_n(v77, 2);
          v83 = Logger.logObject.getter(v82);
          v84 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v83, v84))
          {
            v85 = swift_slowAlloc(22, -1);
            v86 = swift_slowAlloc(64, -1);
            v131 = 0;
            v87 = v86;
            *(_QWORD *)&v117[0] = v86;
            *(_DWORD *)v85 = 136315394;
            v114 = v81;
            swift_bridgeObjectRetain(v70);
            *(_QWORD *)&v116[0] = sub_10000FBEC(v104, v70, (uint64_t *)v117);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8);
            swift_bridgeObjectRelease_n(v70, 3);
            *(_WORD *)(v85 + 12) = 2080;
            swift_bridgeObjectRetain(v113);
            *(_QWORD *)&v116[0] = sub_10000FBEC(v112, v113, (uint64_t *)v117);
            v81 = v114;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8);
            swift_bridgeObjectRelease_n(v113, 3);
            _os_log_impl((void *)&_mh_execute_header, v83, v84, "Caching AppShortcuts for %s:%s", (uint8_t *)v85, 0x16u);
            swift_arrayDestroy(v87, 2);
            v88 = v131;
            swift_slowDealloc(v87, -1, -1);
            swift_slowDealloc(v85, -1, -1);

            v89 = v102;
          }
          else
          {

            swift_bridgeObjectRelease_n(v77, 2);
            swift_bridgeObjectRelease_n(v70, 2);
            v89 = v102;
            v88 = 0;
          }
          sub_10000E858(v89, *(_QWORD *)(v115 + 136));
          v90 = v88;
          sub_100061640();
          if (v88)
          {
            swift_bridgeObjectRelease(v70);
            swift_errorRetain(v88);
            v91 = swift_errorRetain(v88);
            v92 = Logger.logObject.getter(v91);
            v93 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v92, v93))
            {
              v94 = (uint8_t *)swift_slowAlloc(12, -1);
              v95 = (uint64_t *)swift_slowAlloc(8, -1);
              v114 = v81;
              *(_DWORD *)v94 = 138412290;
              swift_errorRetain(v90);
              v96 = _swift_stdlib_bridgeErrorToNSError(v90);
              *(_QWORD *)&v117[0] = v96;
              v81 = v114;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v117, (char *)v117 + 8);
              *v95 = v96;
              swift_errorRelease(v90);
              swift_errorRelease(v90);
              _os_log_impl((void *)&_mh_execute_header, v92, v93, "Failed to update cached AppShortcuts: %@", v94, 0xCu);
              sub_10001BE7C(&qword_100128160);
              swift_arrayDestroy(v95, 1);
              swift_slowDealloc(v95, -1, -1);
              swift_slowDealloc(v94, -1, -1);

            }
            else
            {

              swift_errorRelease(v90);
              swift_errorRelease(v90);
            }
            swift_errorRelease(v90);
            sub_10001DBA4();
            v97 = v111;
          }
          else
          {
            sub_10001DBA4();
            swift_bridgeObjectRelease(v70);
            v97 = v111;
          }
          *v97 = v81;
        }
        sub_1000B3DEC();
        return swift_release();
      }
    }
  }
  else
  {
    v28 = qword_100127C88;
    swift_retain();
    if (v28 != -1)
      swift_once(&qword_100127C88, sub_100038A48);
    v29 = sub_100012A40(v23, (uint64_t)qword_10012CAA8);
    v30 = v103;
    v31 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v29, v23);
    swift_release();
    swift_bridgeObjectRetain(v19);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v117[0] = v36;
      *(_DWORD *)v35 = 136315138;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)&v116[0] = sub_10000FBEC(v104, (unint64_t)v19, (uint64_t *)v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, (char *)v116 + 8);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s does not have AppShortcuts", v35, 0xCu);
      swift_arrayDestroy(v36, 1);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      result = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v101, v23);
    }
    else
    {

      swift_bridgeObjectRelease_n(v19, 2);
      result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v31, v23);
    }
    *v111 = (uint64_t)_swiftEmptyArrayStorage;
  }
  return result;
}

void sub_10003A028()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  _DWORD *v29;
  void *v30;
  unint64_t v31;
  _DWORD *v32;
  NSString v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  int *v52;
  NSObject *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  id v69;
  id v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  NSObject *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118[2];
  unint64_t v119;

  v2 = sub_10003B1C4();
  if (!v1)
  {
    v99 = v2;
    v119 = (unint64_t)_swiftEmptyArrayStorage;
    v3 = (int *)sub_100017A04();
    v4 = *(uint64_t *)((char *)&v0->isa + v3[7]);
    v112 = *(_QWORD *)(v4 + 16);
    if (v112)
    {
      v111 = (Class *)((char *)&v0->isa + v3[9]);
      v100 = v3;
      v101 = v0;
      v110 = (char *)v0 + v3[5];
      v109 = v4 + 32;
      v89 = v118;
      swift_bridgeObjectRetain(v4);
      v5 = 0;
      v88 = (char *)&type metadata for Any + 8;
      v108 = v4;
      while (v5 < *(_QWORD *)(v4 + 16))
      {
        v116 = v5;
        v6 = (uint64_t *)(v109 + 24 * v5);
        v8 = *v6;
        v7 = v6[1];
        v9 = (void *)v6[2];
        sub_1000100E0();
        v114 = v9;
        v10 = sub_10000EB00((uint64_t)objc_msgSend(v114, "actionIdentifier"));
        v12 = v11;

        sub_10000E858(v111, v111[3]);
        v14 = *((_QWORD *)v110 + 5);
        v13 = *((_QWORD *)v110 + 6);
        sub_10000BFF4();
        sub_10006143C(v14, v13, v10, v12);
        v16 = v15;
        v103 = v10;
        sub_1000101FC();
        v17 = v16;
        v107 = v17;
        v104 = v8;
        if ((objc_msgSend(v17, "visibleForUse:", 0) & 1) != 0)
        {
          v18 = sub_10003FFA8(v17, (SEL *)&selRef_requiredCapabilities, &qword_100128F00, LNRequiredCapabilityMetadata_ptr);
          v113 = v7;
          v22 = v99;
          v97 = v14;
          v23 = v114;
          v102 = (unint64_t)v12;
          v98 = v13;
          if (v18)
          {
            v24 = v18;
            if (v18 >> 62)
            {
              sub_1000101B0();
              v17 = (_DWORD *)sub_1000058C8();
              sub_1000059A8();
              if (v17)
              {
LABEL_9:
                v25 = v24 & 0xC000000000000001;
                sub_1000101B0();
                v26 = 4;
                v105 = v24;
                while (1)
                {
                  if (v25)
                    v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26 - 4, v24);
                  else
                    v27 = *(id *)(v24 + 8 * v26);
                  v28 = v27;
                  v29 = (_DWORD *)(v26 - 3);
                  if (__OFADD__(v26 - 4, 1))
                  {
                    __break(1u);
                    goto LABEL_49;
                  }
                  if (objc_msgSend(v27, "isFeatureFlagCapability"))
                  {
                    v30 = (void *)objc_opt_self(LNFeatureFlagUtilities);
                    v31 = v25;
                    v32 = v17;
                    sub_100016774((uint64_t)objc_msgSend(v28, "key"));

                    v7 = v113;
                    v33 = String._bridgeToObjectiveC()();
                    sub_1000059B0();
                    v34 = objc_msgSend(v30, "featureEnabledWithDomainFeaturePair:", v33);

                    LODWORD(v33) = objc_msgSend(v28, "value");
                    v35 = v34 == (_DWORD)v33;
                    v17 = v32;
                    v25 = v31;
                    v24 = v105;
                    v4 = v108;
                    if (!v35)
                    {
                      sub_1000117AC(v105);
                      if (qword_100127E70 != -1)
                        swift_once(&qword_100127E70, sub_100090544);
                      v74 = sub_10000C05C();
                      v0 = sub_100012A40(v74, (uint64_t)qword_10012D0C8);
                      v75 = sub_10000C030();
                      Logger.logObject.getter(v75);
                      v76 = sub_10001F1C8();
                      if (sub_10001CD28(v0))
                      {
                        v17 = (_DWORD *)sub_100011780(12);
                        v77 = sub_100011780(32);
                        v118[0] = v77;
                        *v17 = 136315138;
                        sub_10000C030();
                        v117 = sub_10000FBEC(v103, v102, v118);
                        v4 = v108;
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v89);
                        sub_100011800(v102);
                        sub_10001AA24((void *)&_mh_execute_header, v0, v76, "%s requires at least one missing feature flag, skipping");
                        swift_arrayDestroy(v77, 1);
                        sub_1000133FC(v77);
                        sub_1000133FC((uint64_t)v17);
                        sub_100013430();
                        sub_10000E038();

                      }
                      else
                      {

                        sub_100013430();
                        sub_10000C028();
                        sub_1000117AC(v102);
                      }
                      sub_100018764();

                      goto LABEL_36;
                    }
                  }
                  else
                  {

                  }
                  ++v26;
                  if (v29 == v17)
                  {
                    sub_1000059A8();
                    v23 = v114;
                    break;
                  }
                }
              }
            }
            else
            {
              v17 = *(_DWORD **)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v17)
                goto LABEL_9;
            }
            sub_1000059A8();
            v22 = v99;
          }
          sub_10003B390(v104, v7, (uint64_t)v23, *(uint64_t *)((char *)&v101->isa + v100[8]), v22, v19, v20, v21, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, (uint64_t)v88,
            (uint64_t)v89);
          v115 = v36;
          v37 = sub_100013328(v36, "shortTitle");
          if (v37)
          {
            v38 = v37;
            v17 = String._bridgeToObjectiveC()();
            v39 = sub_10001F3D8((uint64_t)v17, "localizedStringForLocaleIdentifier:");

            v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
            v92 = v41;
            v93 = v40;

          }
          else
          {
            v92 = 0;
            v93 = 0;
          }
          v50 = sub_100013328((uint64_t)v37, "autoShortcutDescription");
          if (v50)
          {
            v51 = v50;
            v52 = v100;
            v53 = v101;
            v17 = String._bridgeToObjectiveC()();
            v54 = sub_10001F3D8((uint64_t)v17, "localizedStringForLocaleIdentifier:");

            v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
            v90 = v56;
            v91 = v55;

          }
          else
          {
            v90 = 0;
            v91 = 0;
            v53 = v101;
            v52 = v100;
          }
          v106 = sub_100028464(v107, (SEL *)&selRef_attributionBundleIdentifier);
          v96 = v57;
          v58 = (uint64_t *)((char *)v53 + v52[6]);
          v60 = *v58;
          v59 = v58[1];
          sub_10000BFF4();
          v61 = sub_1000101B0();
          v62 = sub_100013328(v61, "systemImageName");
          v63 = sub_100016774((uint64_t)v62);
          v94 = v64;
          v95 = v63;

          v65 = *(uint64_t *)((char *)&v53->isa + v52[10]);
          v66 = sub_10003BD78(v116, *(uint64_t *)((char *)&v53->isa + v52[11]), *(uint64_t *)((char *)&v53[1].isa + v52[11]), v60, v59, v104, v113, v23);
          v67 = sub_100013328((uint64_t)v66, "phraseTemplates");
          sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
          v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v67);

          v69 = objc_allocWithZone((Class)LNAutoShortcut);
          v70 = sub_10003EB4C(v97, v98, v60, v59, v103, v102, v115, v93, v92, v91, v90, v95, v94, v65, v66, v106, v96, v68);
          v0 = &v119;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v72 = *(_QWORD *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v71 = *(_QWORD *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v72 >= v71 >> 1)
            sub_100018B88(v72 + 1, v71);
          v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v70);
          specialized Array._endMutation()(v73);

          swift_bridgeObjectRelease(v113);
          sub_100018764();

          v4 = v108;
        }
        else
        {
          v42 = (unint64_t)v12;
          if (qword_100127E70 != -1)
            swift_once(&qword_100127E70, sub_100090544);
          v43 = sub_10000C05C();
          v0 = sub_100012A40(v43, (uint64_t)qword_10012D0C8);
          sub_1000101EC(v7);
          v44 = v114;
          v45 = sub_10001A83C();
          Logger.logObject.getter(v45);
          v46 = v7;
          v47 = sub_10001F1C8();
          if (os_log_type_enabled(v0, v47))
          {
            v48 = sub_100011780(22);
            v49 = sub_100011780(64);
            v118[0] = v49;
            *(_DWORD *)v48 = 136315394;
            sub_10001A83C();
            *(_QWORD *)(v48 + 4) = sub_10000FBEC(v103, v42, v118);
            sub_100011800(v42);
            *(_WORD *)(v48 + 12) = 2080;
            sub_10000EC68();
            *(_QWORD *)(v48 + 14) = sub_10000FBEC(v104, v46, v118);

            sub_100011800(v46);
            _os_log_impl((void *)&_mh_execute_header, v0, v47, "%s is marked as undiscoverable in bundle %s, skipping", (uint8_t *)v48, 0x16u);
            swift_arrayDestroy(v49, 2);
            sub_1000133FC(v49);
            sub_1000133FC(v48);

            sub_1000117B4();
          }
          else
          {

            sub_1000117AC(v42);
            sub_100011800(v46);
          }

        }
LABEL_36:
        v5 = v116 + 1;
        if (v116 + 1 == v112)
        {
          swift_bridgeObjectRelease(v99);
          sub_1000059B0();
          return;
        }
      }
LABEL_49:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease(v99);
    }
  }
}

uint64_t sub_10003AA50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10001BE7C(&qword_100128E80);
  sub_1000269D8(v0, qword_10012CAC0);
  sub_100012A40(v0, (uint64_t)qword_10012CAC0);
  v1 = sub_10001BE7C(&qword_100128E88);
  sub_10001C2C0(&qword_100128E98, &qword_100128E80, (uint64_t)&protocol conformance descriptor for Regex<A>);
  return Regex.init<A>(_:)(sub_10003AAEC, 0, v1, v0, v2);
}

uint64_t sub_10003AAEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char *v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;

  v49 = a1;
  v1 = sub_10001BE7C(&qword_100128EC0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = v1;
  v4 = __chkstk_darwin(v1);
  v46 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - v6;
  v8 = sub_10001BE7C(&qword_100128E80);
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for _RegexFactory(0);
  v11 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001BE7C(&qword_100128EC8);
  v15 = *(_QWORD *)(v14 - 8);
  v44 = v14;
  v45 = v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v41 = (char *)&v39 - v19;
  v54 = 31524;
  v55 = 0xE200000000000000;
  v20 = sub_100040100();
  v21 = static RegexComponentBuilder.buildExpression<A>(_:)(&v54, &type metadata for String, v20);
  makeFactory()(v21);
  v50 = v7;
  sub_10003AE80((uint64_t)v7);
  v22 = sub_10001BE7C(&qword_100128E88);
  sub_10001C2C0(&qword_100128ED8, &qword_100128EC0, (uint64_t)&protocol conformance descriptor for Regex<A>);
  v24 = v23;
  v39 = v10;
  v40 = v3;
  _RegexFactory.capture<A, B>(_:)(v7, v22, v3, v23);
  v43 = *(void (**)(char *, uint64_t))(v2 + 8);
  v43(v7, v3);
  v42 = *(void (**)(char *, uint64_t))(v11 + 8);
  v42(v13, v51);
  Capture.init(_:)(v10, v22);
  sub_10001C2C0(&qword_100128EE0, &qword_100128EC8, (uint64_t)&protocol conformance descriptor for Capture<A>);
  v26 = v25;
  v27 = v41;
  v28 = v44;
  static RegexComponentBuilder.buildExpression<A>(_:)(v18, v44, v25);
  v45 = *(_QWORD *)(v45 + 8);
  ((void (*)(char *, uint64_t))v45)(v18, v28);
  v52 = 125;
  v53 = 0xE100000000000000;
  static RegexComponentBuilder.buildExpression<A>(_:)(&v52, &type metadata for String, v20);
  v29 = v57;
  v52 = v56;
  v53 = v57;
  v30 = v50;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(&v52, &type metadata for String, v20);
  v31 = swift_bridgeObjectRelease(v29);
  makeFactory()(v31);
  v32 = v46;
  v33 = v40;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v30, v40, v24);
  v34 = (uint64_t)v39;
  _RegexFactory.accumulate<A, B, C>(_:_:)(v32, v27, v22, v33, v28, v24, v26);
  v35 = v32;
  v36 = v43;
  v43(v35, v33);
  v42(v13, v51);
  v37 = v55;
  sub_100077FB0(v34, v54, v55, v49);
  swift_bridgeObjectRelease(v37);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v34, v48);
  v36(v50, v33);
  return ((uint64_t (*)(char *, uint64_t))v45)(v27, v28);
}

uint64_t sub_10003AE80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v40 = a1;
  v41 = type metadata accessor for RegexRepetitionBehavior(0);
  v39 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v38 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for _RegexFactory(0);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001BE7C(&qword_100128EE8);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CharacterClass(0);
  v33 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001BE7C(&qword_100128EF0);
  v34 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001BE7C(&qword_100128EC0);
  v35 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v32 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v32 - v22;
  static RegexComponent<>.word.getter(v21);
  v24 = sub_100014360((uint64_t)v7, 1, 1, v41);
  makeFactory()(v24);
  v25 = sub_10004013C();
  _RegexFactory.oneOrMore<A, B>(_:_:)(v10, v7, &type metadata for Substring, v8, v25);
  sub_1000131E0((uint64_t)v7, &qword_100128EE8);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v37);
  OneOrMore.init(_:)(v17, &type metadata for Substring);
  OneOrMore.regex.getter(v11);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v13, v11);
  v27 = v38;
  static RegexRepetitionBehavior.reluctant.getter(v26);
  Regex.repetitionBehavior(_:)(v27, v14);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v27, v41);
  v28 = *(void (**)(char *, uint64_t))(v35 + 8);
  v28(v17, v14);
  sub_10001C2C0(&qword_100128ED8, &qword_100128EC0, (uint64_t)&protocol conformance descriptor for Regex<A>);
  v30 = v29;
  static RegexComponentBuilder.buildExpression<A>(_:)(v20, v14, v29);
  v28(v20, v14);
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(v23, v14, v30);
  return ((uint64_t (*)(char *, uint64_t))v28)(v23, v14);
}

uint64_t sub_10003B1C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = sub_100017A04();
  v2 = (_QWORD *)(v0 + *(int *)(v1 + 20));
  v3 = v2[3];
  v4 = v2[4];
  sub_10000E858(v2, v3);
  v5 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  v6 = sub_1000100C8(v5, 48);
  *(_OWORD *)(v6 + 16) = xmmword_1000EFAE0;
  v7 = (uint64_t *)(v0 + *(int *)(v1 + 24));
  v8 = *v7;
  v9 = v7[1];
  *(_QWORD *)(v6 + 32) = *v7;
  *(_QWORD *)(v6 + 40) = v9;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24);
  sub_10000C030();
  v11 = v10(v6, v3, v4);
  v13 = v12;
  swift_bridgeObjectRelease(v6);
  v14 = v2[3];
  v15 = v2[4];
  sub_10000E858(v2, v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32))(v8, v9, v14, v15);
  v17 = v16;
  v18 = *(_QWORD *)(v16 + 16);
  if (v18)
  {
    v19 = (_BYTE *)(v16 + 48);
    while ((*v19 & 1) == 0)
    {
      v19 += 24;
      if (!--v18)
        goto LABEL_5;
    }
    v22 = *((_QWORD *)v19 - 2);
    v23 = *((_QWORD *)v19 - 1);
    sub_1000101EC(v23);
    sub_100037D78(v17, v22, v23);
    v25 = v24;
    v20 = sub_1000100C8(v5, 64);
    *(_OWORD *)(v20 + 16) = xmmword_1000EFD90;
    *(_QWORD *)(v20 + 32) = v22;
    *(_QWORD *)(v20 + 40) = v23;
    *(_QWORD *)(v20 + 48) = v11;
    *(_QWORD *)(v20 + 56) = v13;
    v21 = v25;
  }
  else
  {
LABEL_5:
    v20 = sub_1000100C8(v5, 48);
    *(_OWORD *)(v20 + 16) = xmmword_1000EFAE0;
    *(_QWORD *)(v20 + 32) = v11;
    *(_QWORD *)(v20 + 40) = v13;
    v21 = v17;
  }
  sub_1000382BC(v21);
  sub_1000059A8();
  sub_100058FC0();
  return v20;
}

void sub_10003B390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  id v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  NSURL *v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  id v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v98;
  _QWORD *v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  id v107;
  _QWORD *v108;
  uint64_t v109;
  id v110;
  Swift::Int v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  char v120;
  uint64_t *v121;
  uint64_t v122;
  BOOL v123;
  id v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158[9];
  unint64_t v159;
  _QWORD *v160;

  sub_10000C038();
  a19 = v23;
  a20 = v24;
  v151 = v21;
  v146 = v25;
  v27 = v26;
  v29 = v28;
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_10001765C();
  v34 = v33 - v32;
  sub_10001BE7C(&qword_100128740);
  sub_100013E18();
  __chkstk_darwin(v35);
  sub_10001DFB8();
  v37 = __chkstk_darwin(v36);
  v39 = (char *)&v136 - v38;
  __chkstk_darwin(v37);
  v149 = (uint64_t)&v136 - v40;
  v41 = objc_msgSend((id)objc_opt_self(LNFeatureFlags), "isAppShortcutsOmittingAppNameEnabled");
  v156 = v27;
  v157 = v20;
  if (v41)
  {
    v42 = &v20[*(int *)(sub_100017A04() + 20)];
    v43 = *((_QWORD *)v42 + 3);
    v44 = *((_QWORD *)v42 + 4);
    sub_10000E858(v42, v43);
    v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 16))(v43, v44) ^ 1;
  }
  else
  {
    v45 = 1;
  }
  LODWORD(v155) = v45;
  a10 = &_swiftEmptyDictionarySingleton;
  v46 = objc_msgSend(v29, "phraseTemplates");
  sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
  v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46);

  if ((unint64_t)v47 >> 62)
    goto LABEL_66;
  if (!*(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_67:
    sub_1000117B4();
    goto LABEL_68;
  }
LABEL_6:
  sub_1000530A4(0, (v47 & 0xC000000000000001) == 0, v47);
  if ((v47 & 0xC000000000000001) != 0)
    v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v47);
  else
    v48 = *(id *)(v47 + 32);
  v49 = v48;
  sub_1000117B4();
  v50 = objc_msgSend(v49, "bundleURL");
  v138 = v49;
  if (v50)
  {
    v51 = v50;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v52 = 0;
  }
  else
  {
    v52 = 1;
  }
  sub_100014360((uint64_t)v39, v52, 1, v30);
  v53 = v149;
  sub_100019EB8((uint64_t)v39, v149, &qword_100128740);
  sub_100019FA0(v53, (uint64_t)v22, &qword_100128740);
  if (sub_10001C93C((uint64_t)v22, 1, v30) == 1)
  {
    sub_1000131E0((uint64_t)v22, &qword_100128740);
  }
  else
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v31 + 32))(v34, v22, v30);
    v54 = (void *)objc_opt_self(NSBundle);
    URL._bridgeToObjectiveC()(v55);
    v57 = v56;
    v58 = objc_msgSend(v54, "ln_uniqueBundleWithURL:", v56);

    if (v58)
    {
      v59 = sub_100017A04();
      v60 = sub_100091424(0x74726F6853707041, 0xEC00000073747563, *(_QWORD *)&v157[*(int *)(v59 + 24)], *(_QWORD *)&v157[*(int *)(v59 + 24) + 8]);

      sub_10001A970();
      v61 = sub_100016774((uint64_t)objc_msgSend(v138, "key"));
      v63 = v62;

      v64 = sub_10002D8B0(v61, v63, v60);
      sub_10000C028();
      sub_1000059C4();
      if (v64)
      {
        v158[0] = v64;
        sub_10000EC68();
        v65 = v151;
        sub_10007D598(v158);
        if (v65)
        {
          swift_release();
          __break(1u);
          return;
        }
        v66 = sub_1000117B4();
        v67 = v158[0];
        __chkstk_darwin(v66);
        v134 = v138;
        v68 = sub_100077CE0(v67, sub_100040044);
        v69 = 0;
        swift_release();
        v70 = v157;
        goto LABEL_19;
      }
    }
    else
    {
      sub_10001A970();
    }
  }
  v71 = objc_msgSend(v29, "phraseTemplates");
  v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v71);

  __chkstk_darwin(v73);
  v70 = v157;
  v134 = v157;
  v74 = v151;
  sub_100095974((void (*)(_QWORD *__return_ptr, id *))sub_100040028, (uint64_t)&v132, v72);
  v68 = v75;
  v69 = v74;
  sub_1000101FC();
LABEL_19:
  sub_10003C4D4();
  if (v69)
  {
    sub_1000163B0();
    v77 = sub_10000C028();
    sub_10001F728(v77, &qword_100128740);
    sub_1000059D4();
    v78 = &_swiftEmptySetSingleton;
LABEL_21:
    swift_bridgeObjectRelease(v78);
    goto LABEL_68;
  }
  v147 = v76;
  v160 = &_swiftEmptySetSingleton;
  v159 = (unint64_t)_swiftEmptyArrayStorage;
  v145 = v68[2];
  if (!v145)
    goto LABEL_63;
  v151 = 0;
  v143 = v68 + 4;
  v79 = sub_100017A04();
  v80 = *(int *)(v79 + 24);
  v81 = &v70[*(int *)(v79 + 20)];
  v83 = *((_QWORD *)v81 + 5);
  v82 = *((_QWORD *)v81 + 6);
  v142 = v83;
  v144 = v82;
  v84 = *(_QWORD *)&v70[v80 + 8];
  v141 = *(_QWORD *)&v70[v80];
  v140 = v84;
  v137 = v68;
  sub_1000100E0();
  v85 = 0;
  v148 = &_swiftEmptySetSingleton;
  HIDWORD(v139) = v155 & 1;
  do
  {
    v150 = v85;
    v86 = &v143[4 * v85];
    v87 = *v86;
    v30 = v86[1];
    v34 = v86[2];
    v88 = v86[3];
    sub_1000100E0();
    sub_100013E10();
    v152 = v88;
    v89 = sub_10003C020(v34, v88);
    v91 = v90;
    v93 = v92;
    v94 = (uint64_t)v148;
    sub_1000101B0();
    sub_10002ECDC(v89, v91, v94);
    v96 = v95;
    sub_1000059A8();
    if ((v96 & 1) == 0)
    {
      sub_10000EC68();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v94);
      v158[0] = v94;
      sub_10003FCC8(v89, v91, isUniquelyReferenced_nonNull_native);
      v148 = (void *)v158[0];
      sub_100005A78();
      sub_1000059A8();
    }
    if (*(_QWORD *)(v147 + 16))
    {
      sub_1000100E0();
      v98 = sub_100016064(v87);
      v99 = &_swiftEmptyDictionarySingleton;
      if ((v100 & 1) != 0)
      {
        v99 = *(_QWORD **)(*(_QWORD *)(v147 + 56) + 8 * v98);
        sub_1000101B0();
      }
      sub_10000C028();
    }
    else
    {
      v99 = &_swiftEmptyDictionarySingleton;
    }
    v101 = v96 ^ 1;
    v102 = v144;
    sub_10000C030();
    LOBYTE(v133) = BYTE4(v139);
    LOBYTE(v130) = v101 & 1;
    v103 = v87;
    v29 = (void *)v102;
    v104 = v151;
    sub_10003D2A8(v103, v30, v34, v152, v93, v142, v102, v149, v141, v140, (uint64_t)v146, (uint64_t)v99, v130, v131, v132, v133, (uint64_t)&a10, v135, v136,
      (uint64_t)v137,
      (uint64_t)v138,
      v139,
      v140,
      v141,
      v142,
      (uint64_t)v143,
      v144,
      v145,
      v146);
    v39 = v104;
    if (v104)
    {
      sub_1000059A8();
      sub_1000101FC();
      sub_1000117B4();
      sub_1000059B0();
      sub_100013794();
      sub_1000163B0();
      sub_1000117AC((uint64_t)v137);
      sub_10001CE30();
      sub_10000C028();
      v128 = sub_1000117B4();
      sub_10001F728(v128, &qword_100128740);
      swift_bridgeObjectRelease(v160);
      sub_1000059D4();
      v78 = v148;
      goto LABEL_21;
    }
    v31 = v105;
    sub_1000101FC();
    sub_1000117B4();
    sub_1000059B0();
    sub_1000059A8();
    v154 = v31;
    v151 = 0;
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain(v31);
      v47 = sub_1000058C8();
      sub_10000E038();
      if (!v47)
        goto LABEL_61;
LABEL_34:
      if (v47 >= 1)
      {
        v106 = 0;
        v155 = v154 & 0xC000000000000001;
        v156 = v47;
        v153 = v154 + 32;
        v157 = (char *)v30;
        while (1)
        {
          if (v155)
            v107 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v106, v154);
          else
            v107 = *(id *)(v153 + 8 * v106);
          v22 = v107;
          v108 = v160;
          v109 = sub_10000EC68();
          v110 = sub_100013328(v109, "localizedPhrase");
          sub_10000EB00((uint64_t)v110);
          sub_100019044();
          if (!v108[2])
            goto LABEL_55;
          Hasher.init(_seed:)(v158, v108[5]);
          String.hash(into:)(v158, v39, v31);
          v111 = Hasher._finalize()();
          v112 = -1 << *((_BYTE *)v108 + 32);
          v113 = v111 & ~v112;
          sub_100019D70();
          if ((v114 & 1) == 0)
            goto LABEL_55;
          v115 = v108[6];
          v116 = (uint64_t *)(v115 + 16 * v113);
          v117 = v116[1];
          v118 = (char *)*v116 == v39 && v117 == v31;
          if (!v118 && (sub_100013558(*v116, v117) & 1) == 0)
            break;
LABEL_46:
          sub_10000E038();
          sub_1000117B4();

LABEL_58:
          if (++v106 == v156)
            goto LABEL_61;
        }
        v119 = ~v112;
        while (1)
        {
          v113 = (v113 + 1) & v119;
          sub_100019D70();
          if ((v120 & 1) == 0)
            break;
          v121 = (uint64_t *)(v115 + 16 * v113);
          v122 = v121[1];
          v123 = (char *)*v121 == v39 && v122 == v31;
          if (v123 || (sub_100013558(*v121, v122) & 1) != 0)
            goto LABEL_46;
        }
LABEL_55:
        sub_10000E038();
        sub_1000117B4();
        v124 = v22;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v39 = *(char **)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v125 = *(_QWORD *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if ((unint64_t)v39 >= v125 >> 1)
          sub_100018B88((uint64_t)(v39 + 1), v125);
        v126 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v124);
        specialized Array._endMutation()(v126);
        sub_10000EB00((uint64_t)objc_msgSend(v124, "localizedPhrase"));
        sub_100019044();
        sub_10001161C(v158, (uint64_t)v39, v31);

        swift_bridgeObjectRelease(v158[1]);
        goto LABEL_58;
      }
      __break(1u);
LABEL_66:
      sub_10000EC68();
      v129 = sub_1000058C8();
      sub_1000117B4();
      if (!v129)
        goto LABEL_67;
      goto LABEL_6;
    }
    v47 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v47)
      goto LABEL_34;
LABEL_61:
    v85 = v150 + 1;
    sub_10000C028();
    swift_bridgeObjectRelease(v154);
    sub_10001CE30();
  }
  while (v85 != v145);
  sub_10000C028();
LABEL_63:
  sub_100013794();
  sub_10000C028();
  sub_1000163B0();
  sub_10001F728(v127, &qword_100128740);
  sub_1000059B0();
  sub_1000059D4();
  sub_1000101FC();
LABEL_68:
  sub_1000117E8();
}

id sub_10003BD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSString v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v14 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v14);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(a8, "parameterPresentation");
  if (!v17)
    return 0;
  v18 = v17;
  v52 = a2;
  v53 = a3;
  v54 = a1;
  v19 = objc_msgSend(v17, "parameterIdentifier");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v56 = v21;
  v57 = v20;

  v22 = objc_msgSend(v18, "specificTitle");
  v23 = objc_msgSend(v22, "formatString");
  v55 = a4;
  v24 = a5;
  v25 = v23;

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  v29 = sub_100028464(v18, (SEL *)&selRef_localizationTable);
  v31 = v30;
  sub_10003E488(a8, (uint64_t)v16);
  v32 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  v33 = v29;
  v34 = v24;
  v35 = v55;
  v36 = sub_10003F06C(v26, v28, v33, v31, (uint64_t)v16);
  v37 = String._bridgeToObjectiveC()();
  v38 = objc_msgSend(v36, "localizedStringForLocaleIdentifier:", v37);

  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  v42 = sub_10003FFA8(v18, (SEL *)&selRef_optionsCollection, &qword_100128E60, LNAppShortcutOptionsCollectionMetadata_ptr);
  if (v42)
  {
    v43 = v42;
    v44 = __chkstk_darwin(v42);
    v45 = v53;
    *(&v51 - 6) = v52;
    *(&v51 - 5) = v45;
    *(&v51 - 4) = v35;
    *(&v51 - 3) = v34;
    v46 = v54;
    *(&v51 - 2) = (uint64_t)v18;
    *(&v51 - 1) = v46;
    v47 = sub_10003838C(v44, (uint64_t (*)(uint64_t, id))sub_100040018);
    swift_bridgeObjectRelease(v43);
  }
  else
  {
    v47 = 0;
  }
  v49 = objc_allocWithZone((Class)LNAppShortcutParameterPresentation);
  v48 = sub_10003F288(v57, v56, v39, v41, (uint64_t)v47);

  return v48;
}

uint64_t sub_10003C020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  Swift::Int v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t result;
  _QWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;

  v4 = sub_10001BE7C(&qword_100128E78);
  v70 = *(_QWORD *)(v4 - 8);
  sub_100013E18();
  __chkstk_darwin(v5);
  sub_1000192A0();
  v65 = v6;
  sub_10001F238();
  __chkstk_darwin(v7);
  v68 = (char *)v61 - v8;
  v71 = (_QWORD *)a1;
  v72 = a2;
  if (qword_100127C90 != -1)
LABEL_25:
    swift_once(&qword_100127C90, sub_10003AA50);
  v9 = sub_10001BE7C(&qword_100128E80);
  v10 = sub_100012A40(v9, (uint64_t)qword_10012CAC0);
  v11 = sub_10001BE7C(&qword_100128E88);
  v12 = sub_100040088();
  sub_10001C2C0(&qword_100128E98, &qword_100128E80, (uint64_t)&protocol conformance descriptor for Regex<A>);
  v14 = BidirectionalCollection<>.matches<A, B>(of:)(v10, &type metadata for String, v11, v9, v12, v13);
  v15 = *(_QWORD *)(v14 + 16);
  v16 = _swiftEmptyArrayStorage;
  v69 = v4;
  v62 = v14;
  if (v15)
  {
    v79 = _swiftEmptyArrayStorage;
    sub_1000525E8();
    sub_100017C38();
    v18 = v14 + v17;
    v20 = *(_QWORD *)(v19 + 72);
    v66 = *(char **)(v19 + 16);
    v67 = v20;
    v16 = v79;
    do
    {
      v21 = v68;
      ((void (*)(char *, uint64_t, uint64_t))v66)(v68, v18, v4);
      Regex.Match.output.getter(&v71, v4);
      v22 = (uint64_t)v71;
      v23 = v72;
      v24 = v73;
      v25 = v74;
      swift_bridgeObjectRelease(v78);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v21, v4);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_1000525E8();
        v16 = v79;
      }
      v26 = v16[2];
      if (v26 >= v16[3] >> 1)
      {
        sub_1000525E8();
        v16 = v79;
      }
      v16[2] = v26 + 1;
      v27 = &v16[4 * v26];
      v27[4] = v22;
      v27[5] = v23;
      v27[6] = v24;
      v27[7] = v25;
      v18 += v67;
      --v15;
      v4 = v69;
    }
    while (v15);
    v14 = v62;
  }
  v71 = v16;
  sub_1000100E0();
  sub_10007D5BC((uint64_t *)&v71);
  swift_bridgeObjectRelease(v16);
  v28 = sub_10001BE7C(&qword_100128EA0);
  sub_10001C2C0(&qword_100128EA8, &qword_100128EA0, (uint64_t)&protocol conformance descriptor for [A]);
  v30 = v29;
  v31 = sub_1000400C4();
  v4 = Sequence<>.joined(separator:)(0, 0xE000000000000000, v28, v30, v31);
  v33 = v32;
  swift_release();
  v34 = *(char **)(v14 + 16);
  if (!v34)
  {
LABEL_22:
    swift_bridgeObjectRelease(v14);
    return v4;
  }
  v61[0] = v4;
  v61[1] = v33;
  sub_100017C38();
  v36 = v14 + v35;
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
  v63 = *(_QWORD *)(v37 + 72);
  v64 = v38;
  sub_10000C030();
  v39 = &_swiftEmptyDictionarySingleton;
  v40 = v69;
  v41 = v65;
  while (1)
  {
    v66 = v34;
    v64(v41, v36, v40);
    Regex.Match.output.getter(&v71, v40);
    swift_bridgeObjectRelease(v74);
    v42 = v75;
    v43 = v76;
    v44 = v77;
    v45 = v78;
    v67 = Regex.Match.range.getter(v40);
    v68 = v46;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
    v71 = v39;
    sub_10000DD30();
    v48 = sub_10003155C();
    v50 = v39[2];
    v51 = (v49 & 1) == 0;
    v52 = v50 + v51;
    if (__OFADD__(v50, v51))
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v53 = v48;
    v4 = v49;
    sub_10001BE7C(&qword_100128EB8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v52))
      break;
LABEL_16:
    v39 = v71;
    if ((v4 & 1) != 0)
    {
      sub_10001B660();
    }
    else
    {
      v71[(v53 >> 6) + 8] |= 1 << v53;
      v56 = (_QWORD *)(v39[6] + 32 * v53);
      *v56 = v42;
      v56[1] = v43;
      v56[2] = v44;
      v56[3] = v45;
      sub_10001B660();
      v57 = v39[2];
      v58 = __OFADD__(v57, 1);
      v59 = v57 + 1;
      if (v58)
        goto LABEL_24;
      v39[2] = v59;
      sub_10001A83C();
    }
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(0x8000000000000000);
    v40 = v69;
    v41 = v65;
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v65, v69);
    v36 += v63;
    v34 = v66 - 1;
    if (v66 == (char *)1)
    {
      v14 = v62;
      swift_bridgeObjectRelease(v62);
      v4 = v61[0];
      goto LABEL_22;
    }
  }
  sub_10000DD30();
  v54 = sub_10003155C();
  if ((v4 & 1) == (v55 & 1))
  {
    v53 = v54;
    goto LABEL_16;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Substring);
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

void sub_10003C4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  void *v67;
  char *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  id v82;
  id v83;
  id v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  char *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  _QWORD v125[2];
  uint64_t v126[3];
  _QWORD *v127;

  sub_10000C038();
  v111 = v1;
  v117 = v0;
  v3 = v2;
  v121 = v4;
  v5 = sub_1000058BC();
  v123 = (int *)type metadata accessor for LNAppShortcutParameterRecord(v5);
  __chkstk_darwin(v123);
  sub_1000192A0();
  v100 = v6;
  sub_10001F238();
  __chkstk_darwin(v7);
  v124 = (uint64_t)&v100 - v8;
  sub_10001F238();
  __chkstk_darwin(v9);
  v12 = (char *)&v100 - v11;
  v126[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
  v13 = *(_QWORD *)(v3 + 16);
  v109 = v10;
  if (v13)
  {
    v14 = v0;
    v15 = v3 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v16 = *(_QWORD *)(v10 + 72);
    sub_10000EC68();
    do
    {
      v17 = v111;
      sub_10003CBB8(v126, v15);
      v111 = v17;
      if (v17)
        goto LABEL_59;
      v15 += v16;
      --v13;
    }
    while (v13);
    sub_1000117B4();
    v18 = (_BYTE *)v126[0];
    v0 = v14;
  }
  else
  {
    v18 = &_swiftEmptyDictionarySingleton;
  }
  v19 = 0;
  v20 = v18 + 64;
  v21 = 1 << v18[32];
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & *((_QWORD *)v18 + 8);
  v24 = (unint64_t)(v21 + 63) >> 6;
  v25 = v0 + 32;
  v26 = _swiftEmptyArrayStorage;
  v104 = v0;
  v103 = v18;
  v102 = v18 + 64;
  v101 = v24;
  v108 = v0 + 32;
LABEL_10:
  while (2)
  {
    if (v23)
    {
      v27 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v28 = v27 | (v19 << 6);
      goto LABEL_23;
    }
    if (__OFADD__(v19++, 1))
    {
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      v98 = v126[0];
      sub_1000117B4();
      v99 = v98;
      goto LABEL_61;
    }
    if (v19 < v24)
    {
      v30 = *(_QWORD *)&v20[8 * v19];
      if (v30)
      {
LABEL_22:
        v23 = (v30 - 1) & v30;
        v28 = __clz(__rbit64(v30)) + (v19 << 6);
LABEL_23:
        v32 = *(_QWORD *)(v0 + 16);
        if (!v32)
          continue;
        v106 = v23;
        v107 = v19;
        v33 = *((_QWORD *)v18 + 7);
        v34 = (uint64_t *)(*((_QWORD *)v18 + 6) + 32 * v28);
        v35 = v34[1];
        v112 = *v34;
        v36 = v34[3];
        v37 = *(_QWORD *)(v33 + 8 * v28);
        v114 = (void *)v35;
        swift_bridgeObjectRetain(v35);
        v105 = v36;
        sub_10000BFF4();
        v110 = v37;
        sub_1000100E0();
        sub_1000101B0();
        v38 = 0;
        v113 = v32;
        while (1)
        {
          v116 = v38;
          v39 = (uint64_t *)(v25 + 32 * v38);
          v40 = v39[1];
          v120 = *v39;
          v41 = v39[3];
          v126[0] = v39[2];
          v126[1] = v41;
          v125[0] = 31524;
          v125[1] = 0xE200000000000000;
          v42 = v114;
          sub_10000BFF4();
          v122 = v40;
          sub_100013E10();
          v115 = v41;
          sub_1000101B0();
          v43._countAndFlagsBits = v112;
          v43._object = v42;
          String.append(_:)(v43);
          sub_1000101FC();
          v44._countAndFlagsBits = 125;
          v44._object = (void *)0xE100000000000000;
          String.append(_:)(v44);
          v45 = sub_100012F00();
          LOBYTE(v41) = StringProtocol.contains<A>(_:)(v125, &type metadata for String, &type metadata for String, v45, v45);
          sub_1000101FC();
          if ((v41 & 1) != 0)
          {
            v46 = *(_QWORD *)(v110 + 16);
            if (v46)
              break;
          }
          v88 = v115;
LABEL_44:
          v38 = v116 + 1;
          swift_bridgeObjectRelease(v88);
          swift_bridgeObjectRelease(v122);
          if (v38 == v113)
          {
            sub_100013794();
            swift_bridgeObjectRelease(v114);
            sub_10001CE30();
            v0 = v104;
            sub_1000059A8();
            v18 = v103;
            v20 = v102;
            v19 = v107;
            v24 = v101;
            v23 = v106;
            goto LABEL_10;
          }
        }
        v47 = v109;
        v119 = (*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
        v48 = v110 + v119;
        swift_bridgeObjectRetain(v110);
        v49 = *(_QWORD *)(v47 + 72);
        v118 = v49;
        while (1)
        {
          v127 = v26;
          sub_10001DE28(v48, (uint64_t)v12);
          v50 = objc_msgSend(v121, "parameterPresentation");
          if (!v50)
            goto LABEL_36;
          v51 = v50;
          v52 = objc_msgSend(v50, "specificTitle");
          v53 = objc_msgSend(v52, "formatString");

          v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
          v56 = v55;

          v57 = &v12[v123[6]];
          v58 = *((_QWORD *)v57 + 1);
          if (v54 == *(_QWORD *)v57 && v56 == v58)
            break;
          v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v56, *(_QWORD *)v57, v58, 0);
          sub_1000101FC();

          if ((v60 & 1) != 0)
            goto LABEL_36;
          v26 = v127;
LABEL_41:
          sub_10001DBA4();
          v48 += v49;
          if (!--v46)
          {
            swift_bridgeObjectRelease(v115);
            v88 = v122;
            v122 = v110;
            v25 = v108;
            goto LABEL_44;
          }
        }
        sub_1000101FC();

LABEL_36:
        v61 = type metadata accessor for UUID(0);
        v62 = v124;
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v124, v12, v61);
        v63 = v117 + *(int *)(sub_100017A04() + 20);
        v64 = *(_QWORD *)(v63 + 40);
        v65 = *(_QWORD *)(v63 + 48);
        v66 = v123;
        v67 = *(void **)&v12[v123[7]];
        v68 = &v12[v123[8]];
        v69 = *(void **)&v12[v123[9]];
        v70 = *(void **)&v12[v123[10]];
        v71 = *(_QWORD *)v68;
        v72 = *((_QWORD *)v68 + 1);
        v73 = v12;
        v74 = &v12[v123[11]];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v77 = (_QWORD *)(v62 + v123[5]);
        *v77 = v64;
        v77[1] = v65;
        v78 = (_QWORD *)(v62 + v66[6]);
        v79 = v122;
        *v78 = v120;
        v78[1] = v79;
        *(_QWORD *)(v62 + v66[7]) = v67;
        v80 = (_QWORD *)(v62 + v66[8]);
        *v80 = v71;
        v80[1] = v72;
        *(_QWORD *)(v62 + v66[9]) = v69;
        *(_QWORD *)(v62 + v66[10]) = v70;
        v81 = (_QWORD *)(v62 + v66[11]);
        *v81 = v76;
        v81[1] = v75;
        swift_bridgeObjectRetain(v75);
        sub_10001A83C();
        sub_100013E10();
        v82 = v67;
        sub_10000EC68();
        v83 = v69;
        v84 = v70;
        v26 = v127;
        if ((swift_isUniquelyReferenced_nonNull_native(v127) & 1) == 0)
        {
          sub_1000073A0();
          sub_10001E084();
          v26 = v86;
        }
        v85 = v26[2];
        v12 = v73;
        v49 = v118;
        if (v85 >= v26[3] >> 1)
        {
          sub_10001E084();
          v26 = v87;
        }
        v26[2] = v85 + 1;
        sub_10001DF5C(v124, (uint64_t)v26 + v119 + v85 * v49);
        goto LABEL_41;
      }
      v31 = v19 + 1;
      if (v19 + 1 < v24)
      {
        v30 = *(_QWORD *)&v20[8 * v31];
        if (v30)
          goto LABEL_21;
        v31 = v19 + 2;
        if (v19 + 2 >= v24)
          break;
        v30 = *(_QWORD *)&v20[8 * v31];
        if (v30)
        {
LABEL_21:
          v19 = v31;
          goto LABEL_22;
        }
        v31 = v19 + 3;
        if (v19 + 3 < v24)
        {
          v30 = *(_QWORD *)&v20[8 * v31];
          if (v30)
            goto LABEL_21;
          while (1)
          {
            v19 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_58;
            if (v19 >= v24)
              goto LABEL_50;
            v30 = *(_QWORD *)&v20[8 * v19];
            ++v31;
            if (v30)
              goto LABEL_22;
          }
        }
      }
    }
    break;
  }
LABEL_50:
  swift_release();
  v126[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
  v89 = v26[2];
  v90 = v111;
  v91 = v100;
  if (v89)
  {
    sub_100017C38();
    v93 = (uint64_t)v26 + v92;
    v94 = (uint64_t)v26;
    v96 = v95;
    swift_bridgeObjectRetain_n(v26, 2);
    v97 = *(_QWORD *)(v96 + 72);
    while (1)
    {
      sub_10001DE28(v93, v91);
      sub_10003CE78(v126, v91);
      if (v90)
        break;
      v90 = 0;
      sub_10001DBA4();
      v93 += v97;
      if (!--v89)
      {
        sub_100011800(v94);
        goto LABEL_56;
      }
    }
    swift_bridgeObjectRelease(v126[0]);
    sub_10001DBA4();
    v99 = v94;
LABEL_61:
    swift_bridgeObjectRelease(v99);
    __break(1u);
    return;
  }
  sub_1000059C4();
LABEL_56:
  sub_1000117E8();
}

uint64_t sub_10003CBB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = type metadata accessor for LNAppShortcutParameterRecord(0);
  v45 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v39 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(id *)(a2 + *(int *)(v6 + 36));
  v8 = objc_msgSend(v40, "identifier");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v10 = v9;

  v11 = *(int *)(v5 + 24);
  v43 = v2;
  v44 = a2;
  v12 = (uint64_t *)(a2 + v11);
  v14 = *v12;
  v13 = (_QWORD *)v12[1];
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 16);
  v41 = v14;
  if (!v16)
  {
    v20 = _swiftEmptyArrayStorage;
    v19 = v13;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain(v13);
  v17 = sub_1000315C4();
  if ((v18 & 1) != 0)
  {
    v19 = *(_QWORD **)(*(_QWORD *)(v15 + 56) + 8 * v17);
    v20 = v19;
LABEL_5:
    swift_bridgeObjectRetain(v19);
    goto LABEL_7;
  }
  v20 = _swiftEmptyArrayStorage;
LABEL_7:
  v42 = v13;
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v10);
  if (v20[2])
  {
    v21 = (char *)v20 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    v22 = (uint64_t *)(v44 + *(int *)(v5 + 32));
    v23 = *v22;
    v24 = v22[1];
    v25 = *(_QWORD *)(v45 + 72);
    v26 = v20[2];
    while (1)
    {
      v27 = &v21[*(int *)(v5 + 32)];
      v28 = *((_QWORD *)v27 + 1);
      v29 = *(_QWORD *)v27 == v23 && v28 == v24;
      if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v27, v28, v23, v24, 0) & 1) != 0)
        return swift_bridgeObjectRelease(v20);
      v21 += v25;
      if (!--v26)
        goto LABEL_15;
    }
  }
  else
  {
LABEL_15:
    v30 = v39;
    sub_10001DE28(v44, v39);
    if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
    {
      sub_10001E084();
      v20 = v37;
    }
    v31 = v20[2];
    if (v31 >= v20[3] >> 1)
    {
      sub_10001E084();
      v20 = v38;
    }
    v20[2] = v31 + 1;
    sub_10001DF5C(v30, (uint64_t)v20+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v31);
    v32 = objc_msgSend(v40, "identifier");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v34 = v33;

    v35 = v42;
    swift_bridgeObjectRetain(v42);
    sub_1000557BC();
    swift_bridgeObjectRelease(v35);
    return swift_bridgeObjectRelease(v34);
  }
}

uint64_t sub_10003CE78(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;

  v4 = type metadata accessor for LNAppShortcutParameterRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(a2 + *(int *)(v6 + 24));
  v10 = *v9;
  v11 = v9[1];
  v12 = *(void **)(a2 + *(int *)(v6 + 36));
  swift_bridgeObjectRetain(v11);
  v13 = objc_msgSend(v12, "identifier");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v35 = a1;
  v17 = *a1;
  v18 = *(_QWORD *)(v17 + 16);
  swift_bridgeObjectRetain(v11);
  if (v18 && (v19 = sub_100016064(v10), (v20 & 1) != 0))
  {
    v21 = *(_QWORD **)(*(_QWORD *)(v17 + 56) + 8 * v19);
    swift_bridgeObjectRetain(v21);
  }
  else
  {
    v21 = &_swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRelease(v11);
  v22 = v21[2];
  swift_bridgeObjectRetain(v16);
  if (v22 && (v23 = sub_100016064(v14), (v24 & 1) != 0))
  {
    v25 = *(_QWORD **)(v21[7] + 8 * v23);
    swift_bridgeObjectRetain(v25);
  }
  else
  {
    v25 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v16);
  sub_10001DE28(a2, (uint64_t)v8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
  v34 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10001E084();
    v25 = v31;
  }
  v27 = v25[2];
  if (v27 >= v25[3] >> 1)
  {
    sub_10001E084();
    v25 = v32;
  }
  v25[2] = v27 + 1;
  sub_10001DF5C((uint64_t)v8, (uint64_t)v25+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v27);
  swift_isUniquelyReferenced_nonNull_native(v21);
  v36 = v21;
  sub_100025D40();
  v28 = v36;
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(0x8000000000000000);
  v29 = swift_bridgeObjectRetain(v28);
  sub_100055838(v29, v34, v11);
  swift_bridgeObjectRelease(v28);
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_10003D0C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  void *object;
  Swift::String v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;

  if (a1 < 1)
  {
    v10 = 0;
    v9 = (void *)0xE000000000000000;
  }
  else
  {
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object);
    v8._countAndFlagsBits = 93;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v10 = 91;
    v9 = (void *)0xE100000000000000;
  }
  v11 = objc_msgSend(a4, "key");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  swift_bridgeObjectRetain(v14);
  v15._countAndFlagsBits = v10;
  v15._object = v9;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v9);
  return v12;
}

void sub_10003D1DC(void **a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a1;
  type metadata accessor for AppShortcutInterpolator.Builder(0);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "localizedStringForLocaleIdentifier:", v4);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = objc_msgSend(v3, "key");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  *a2 = v10;
  a2[1] = v12;
  a2[2] = v6;
  a2[3] = v8;
}

void sub_10003D2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned __int8 a25,uint64_t a26,uint64_t a27,unsigned __int8 a28,_QWORD *a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  os_log_type_t v115;
  uint64_t v116;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  os_log_type_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  id v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  _QWORD *v204;
  uint64_t v205[2];

  sub_10000C038();
  a19 = v31;
  a20 = v32;
  v33 = v29;
  v35 = v34;
  v200 = v36;
  v191 = v37;
  v39 = v38;
  v202 = v40;
  v195 = v41;
  v43 = v42;
  v45 = v44;
  v46 = a28;
  sub_10001BE7C((uint64_t *)&unk_1001281C0);
  sub_100013E18();
  __chkstk_darwin(v47);
  sub_10001765C();
  v192 = v49 - v48;
  v201 = sub_10001BE7C(&qword_100128B68);
  v188 = *(_QWORD *)(v201 - 8);
  sub_100013E18();
  __chkstk_darwin(v50);
  sub_10001DFB8();
  __chkstk_darwin(v51);
  v203 = (char *)&v175 - v52;
  sub_10001F238();
  v54 = __chkstk_darwin(v53);
  v56 = (uint64_t *)((char *)&v175 - v55);
  __chkstk_darwin(v54);
  v58 = (char *)&v175 - v57;
  v59 = String.subscript.getter(15, 983047);
  v63 = v61;
  v196 = v39;
  v64 = *(_QWORD *)(v39 + 16);
  if ((v46 & 1) != 0)
  {
    if (v64)
    {
      v186 = v35;
      v65 = v59;
      v198 = v43;
      v199 = v45;
      v66 = v60;
      v46 = v62;
      v67 = v61;
      sub_10002D8F8(v59, v60, v61, v62, v196);
      v63 = v67;
      v33 = v29;
      v60 = v66;
      v43 = v198;
      v45 = v199;
      v59 = v65;
      v35 = v186;
      v62 = v46;
      if ((v61 & 1) == 0)
        goto LABEL_4;
      sub_10001B5A0(v59, v60, v61, v46);
      if (qword_100127E70 != -1)
        swift_once(&qword_100127E70, sub_100090544);
      v182 = v29;
      v113 = sub_10000C05C();
      sub_100012A40(v113, (uint64_t)qword_10012D0C8);
      v108 = v202;
      v114 = sub_1000101EC(v202);
      Logger.logObject.getter(v114);
      v115 = sub_1000059DC();
      if (sub_100011808(v115))
      {
        v72 = sub_100011780(12);
        v73 = sub_100011780(32);
        a10 = v73;
        sub_100017E1C(4.8149e-34);
        v116 = sub_10004116C();
        sub_10001B284(v116);
        sub_100011800(v108);
        goto LABEL_29;
      }
    }
    else
    {
      sub_10001B5A0(v59, v60, v61, v62);
      if (qword_100127E70 != -1)
        swift_once(&qword_100127E70, sub_100090544);
      v182 = v29;
      v107 = sub_10000C05C();
      sub_100012A40(v107, (uint64_t)qword_10012D0C8);
      v108 = v202;
      v109 = sub_1000101EC(v202);
      Logger.logObject.getter(v109);
      v110 = sub_1000059DC();
      if (sub_100011808(v110))
      {
        v72 = sub_100011780(12);
        v73 = sub_100011780(32);
        a10 = v73;
        sub_100017E1C(4.8149e-34);
        v111 = sub_10004116C();
        sub_10001B284(v111);
        sub_100011800(v108);
LABEL_29:
        sub_1000100E8((void *)&_mh_execute_header, v77, v78, v79);
        sub_100011040();
        sub_1000133FC(v73);
        sub_1000133FC(v72);

        goto LABEL_77;
      }
    }

    v112 = v108;
    goto LABEL_31;
  }
LABEL_4:
  if (v64 > 2)
  {
    sub_10001B5A0(v59, v60, v61, v62);
    if (qword_100127E70 != -1)
      goto LABEL_80;
    goto LABEL_6;
  }
  v184 = v63;
  v185 = v60;
  v187 = v59;
  v189 = v62;
  v198 = v43;
  v199 = v45;
  v80 = a29;
  v197 = a25;
  v82 = a23;
  v81 = a24;
  v83 = v35;
  v85 = a21;
  v84 = a22;
  sub_1000101B0();
  v193 = v85;
  v194 = v84;
  v86 = sub_100037F28(&_swiftEmptyDictionarySingleton, v81, v80, v85, v84);
  v87 = v86;
  v190 = v33;
  v88 = *(_QWORD *)(v82 + 16);
  v186 = v83;
  v89 = v197;
  if (v88)
  {
    v182 = v86;
    sub_1000058B4();
    v183 = v82;
    v90 = (uint64_t *)(v82 + 40);
    v91 = _swiftEmptyArrayStorage;
    v92 = v191;
    v93 = v201;
    do
    {
      v94 = *(v90 - 1);
      v95 = *v90;
      v96 = HIBYTE(*v90) & 0xF;
      if ((*v90 & 0x2000000000000000) == 0)
        v96 = v94 & 0xFFFFFFFFFFFFLL;
      if (v96)
      {
        v97 = (uint64_t)v56 + *(int *)(v93 + 48);
        *v56 = v94;
        v56[1] = v95;
        v98 = type metadata accessor for LNAppShortcutParameterRecord(0);
        sub_1000143D4(v97, v99, v100, v98);
        sub_100019408((uint64_t)v56, (uint64_t)v58);
        sub_100019408((uint64_t)v58, (uint64_t)v203);
        sub_10000EC68();
        if ((swift_isUniquelyReferenced_nonNull_native(v91) & 1) == 0)
        {
          sub_1000073A0();
          sub_10002FBF4();
          v91 = v105;
        }
        v102 = v91[2];
        v101 = v91[3];
        if (v102 >= v101 >> 1)
        {
          sub_1000190BC(v101);
          sub_10002FBF4();
          v91 = v106;
        }
        v91[2] = v102 + 1;
        sub_100017C38();
        sub_100019408((uint64_t)v203, (uint64_t)v91 + v103 + *(_QWORD *)(v104 + 72) * v102);
        v92 = v191;
        v93 = v201;
      }
      v90 += 2;
      --v88;
    }
    while (v88);
    swift_bridgeObjectRelease(v183);
    v89 = v197;
    v87 = v182;
  }
  else
  {
    v91 = _swiftEmptyArrayStorage;
    v92 = v191;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v87);
  a10 = v87;
  sub_100025DD8((uint64_t)v91, v187, v185, v184, v189, isUniquelyReferenced_nonNull_native);
  v181 = a10;
  sub_1000101FC();
  sub_100005A78();
  a10 = (uint64_t)_swiftEmptyArrayStorage;
  v118 = type metadata accessor for UUID(0);
  v119 = v192;
  sub_1000143D4(v192, v120, v121, v118);
  v122 = objc_allocWithZone((Class)LNAutoShortcutLocalizedPhrase);
  v123 = v198;
  sub_1000101EC(v198);
  v124 = v202;
  sub_100013E10();
  v33 = v200;
  sub_10000BFF4();
  v125 = sub_10003ED78(v195, v124, v92, v33, v199, v123, v119, v89 & 1, v199, v123);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v127 = *(_QWORD *)((a10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v126 = *(_QWORD *)((a10 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v127 >= v126 >> 1)
    sub_100018B88(v127 + 1, v126);
  v179 = v125;
  v128 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v127, v125);
  specialized Array._endMutation()(v128);
  v129 = sub_1000101B0();
  sub_1000521CC(v129, v130, v131, v132, v133, v134, v135, v136, v175, v176, v177, v178, (uint64_t)v179, v180, v181, v182, v183, v184, v185,
    v186,
    v187,
    v188,
    v189,
    v190,
    v191,
    v192);
  v46 = v137;
  sub_1000059A8();
  v205[0] = v46;
  v138 = v190;
  sub_10003F3C0(v205);
  if (v138)
  {
    swift_release();
    __break(1u);
    return;
  }
  v178 = *(_QWORD *)(v205[0] + 16);
  v182 = 0;
  if (!v178)
  {

    swift_release();
LABEL_65:
    swift_bridgeObjectRelease(v181);
    goto LABEL_77;
  }
  if (!*(_QWORD *)(v181 + 16))
  {
    swift_release();
LABEL_71:
    sub_1000059D4();
    v165 = v181;
    if (qword_100127E70 != -1)
      swift_once(&qword_100127E70, sub_100090544);
    v166 = sub_10000C05C();
    sub_100012A40(v166, (uint64_t)qword_10012D0C8);
    v167 = sub_1000101EC(v123);
    Logger.logObject.getter(v167);
    v168 = sub_1000059DC();
    if (sub_100011808(v168))
    {
      v169 = sub_100011780(12);
      v170 = sub_100011780(32);
      v205[0] = v170;
      v171 = sub_100017E1C(4.8149e-34);
      v204 = (_QWORD *)sub_100011050(v171, v172, v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205);
      sub_100011800(v123);
      sub_1000100E8((void *)&_mh_execute_header, v173, v174, "Skipping phrase template with an unrecognized token: %s");
      sub_100011040();
      sub_1000133FC(v170);
      sub_1000133FC(v169);

    }
    else
    {

      sub_1000117AC(v123);
    }

    swift_bridgeObjectRelease(v165);
    goto LABEL_77;
  }
  v139 = *(_QWORD *)(v205[0] + 72);
  v195 = *(_QWORD *)(v205[0] + 64);
  v196 = v139;
  v46 = *(_QWORD *)(v205[0] + 40);
  v140 = v205[0];
  sub_1000058B4();
  v141 = sub_1000188B4();
  if ((v142 & 1) == 0)
  {
    swift_release();
    sub_100007398();
    goto LABEL_71;
  }
  v177 = v140;
  v176 = v140 + 32;
  v43 = a10;
  v143 = 1;
  v144 = v181;
  while (1)
  {
    v180 = v143;
    v187 = *(_QWORD *)(*(_QWORD *)(v144 + 56) + 8 * v141);
    swift_bridgeObjectRetain(v187);
    sub_100007398();
    v205[0] = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v43 >> 62)
      break;
    v145 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_1000101EC(v43);
    if (v145)
      goto LABEL_42;
LABEL_58:
    sub_1000117AC(v43);
    v160 = _swiftEmptyArrayStorage;
LABEL_59:
    sub_10001CE30();
    sub_1000059C4();
    if (v180 == v178)
    {

      sub_10004117C();
      goto LABEL_65;
    }
    if (v180 >= *(_QWORD *)(v177 + 16))
      goto LABEL_79;
    v144 = v181;
    if (!*(_QWORD *)(v181 + 16))
    {
      a10 = (uint64_t)v160;
      swift_release();
      goto LABEL_70;
    }
    v161 = v180 + 1;
    v162 = (_QWORD *)(v176 + 48 * v180);
    v163 = v162[5];
    v195 = v162[4];
    v196 = v163;
    v46 = v162[1];
    sub_1000058B4();
    v141 = sub_1000188B4();
    v43 = (uint64_t)v160;
    v143 = v161;
    v33 = v200;
    if ((v164 & 1) == 0)
    {
      a10 = (uint64_t)v160;
      sub_10004117C();
      sub_100007398();
LABEL_70:
      v123 = v198;
      goto LABEL_71;
    }
  }
  if (v43 < 0)
    v46 = v43;
  else
    v46 = v43 & 0xFFFFFFFFFFFFFF8;
  sub_1000101EC(v43);
  v145 = _CocoaArrayWrapper.endIndex.getter(v46);
  if (!v145)
    goto LABEL_58;
LABEL_42:
  v146 = 0;
  v46 = *(_QWORD *)(v187 + 16);
  v190 = v43 & 0xC000000000000001;
  v183 = v43 + 32;
  v189 = v46;
  v185 = v43;
  v184 = v145;
  while (1)
  {
    v147 = v190
         ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v146, v43)
         : (char *)*(id *)(v183 + 8 * v146);
    if (__OFADD__(v146++, 1))
      break;
    if (v46)
    {
      v192 = v146;
      v203 = v147;
      v204 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v46);
      sub_100017C38();
      v149 = v186;
      v150 = v46;
      v152 = v187 + v151;
      v202 = *(_QWORD *)(v153 + 72);
      v154 = v191;
      do
      {
        sub_100019FA0(v152, v30, &qword_100128B68);
        v155 = sub_10003DE44(*(_QWORD *)v30, *(void **)(v30 + 8), v30 + *(int *)(v201 + 48), v203, v195, v196, v199, v198, v154, v33, v193, v194, v149, v197 & 1);
        sub_1000131E0(v30, &qword_100128B68);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v156);
        v157 = v204[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v157);
        v158 = v155;
        v33 = v200;
        v159 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v157, v158);
        specialized ContiguousArray._endMutation()(v159);
        v152 += v202;
        --v150;
      }
      while (v150);

      v43 = v185;
      v145 = v184;
      v146 = v192;
    }
    else
    {

    }
    sub_100059054();
    v46 = v189;
    if (v146 == v145)
    {
      sub_1000117AC(v43);
      v160 = (_QWORD *)v205[0];
      goto LABEL_59;
    }
  }
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  swift_once(&qword_100127E70, sub_100090544);
LABEL_6:
  v182 = v33;
  v68 = sub_10000C05C();
  sub_100012A40(v68, (uint64_t)qword_10012D0C8);
  v69 = sub_1000101EC(v43);
  Logger.logObject.getter(v69);
  v70 = sub_1000059DC();
  if (sub_100011808(v70))
  {
    v71 = v43;
    v72 = sub_100011780(12);
    v73 = sub_100011780(32);
    a10 = v73;
    v74 = sub_100017E1C(4.8149e-34);
    v76 = sub_100011050(v74, v75, &a10);
    sub_10001B284(v76);
    sub_100011800(v71);
    v79 = "Skipping phrase template with too many tokens: %s";
    goto LABEL_29;
  }

  v112 = v43;
LABEL_31:
  sub_1000117AC(v112);
LABEL_77:
  sub_1000117E8();
}

id sub_10003DE44(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  NSString v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  NSURL *v75;
  void *v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  id v83;
  uint64_t v85;
  id v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v94 = a8;
  v95 = a6;
  v88 = a7;
  v92 = a5;
  v93 = a3;
  v17 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v17);
  v85 = (uint64_t)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001BE7C(&qword_100128E68);
  v20 = __chkstk_darwin(v19);
  v91 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v87 = (char *)&v85 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v85 - v24;
  v26 = type metadata accessor for LNAppShortcutParameterRecord(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v85 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  v30 = __chkstk_darwin(v29);
  v97 = (uint64_t)&v85 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v85 - v33;
  v35 = __chkstk_darwin(v32);
  v37 = (char *)&v85 - v36;
  __chkstk_darwin(v35);
  v96 = (uint64_t)&v85 - v38;
  v86 = a4;
  v39 = objc_msgSend(a4, "localizedPhrase");
  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v42 = v41;

  v100 = v40;
  v101 = v42;
  v98 = a1;
  v99 = (uint64_t)a2;
  v43 = sub_10004004C();
  String.replaceSubrange<A>(_:with:)(v92, v95, &v98, &type metadata for String, v43);
  v44 = v93;
  sub_100019FA0(v93, (uint64_t)v25, &qword_100128E68);
  v95 = v26;
  if (sub_10001C93C((uint64_t)v25, 1, v26) == 1)
  {
    v45 = v88;
    sub_1000131E0((uint64_t)v25, &qword_100128E68);
    v46 = v86;
    v47 = objc_msgSend(v86, "signature");
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v89 = v49;
    v90 = v48;

    v50 = objc_msgSend(v46, "parameterIdentifier");
    if (v50)
    {
      v51 = v50;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v52 = 0;
    }
    else
    {
      v52 = 1;
    }
    v56 = v44;
    v57 = (uint64_t)v87;
    v58 = type metadata accessor for UUID(0);
    sub_100014360((uint64_t)v37, v52, 1, v58);
  }
  else
  {
    sub_10001DF5C((uint64_t)v25, (uint64_t)v28);
    v53 = v88;
    v98 = v88;
    v99 = v94;
    swift_bridgeObjectRetain(v94);
    v54._countAndFlagsBits = a1;
    v54._object = a2;
    String.append(_:)(v54);
    v89 = v99;
    v90 = v98;
    v55 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v34, v28, v55);
    sub_10001DBA4();
    sub_100014360((uint64_t)v34, 0, 1, v55);
    v37 = v34;
    v45 = v53;
    v56 = v44;
    v57 = (uint64_t)v87;
  }
  v59 = v96;
  sub_100019EB8((uint64_t)v37, v96, (uint64_t *)&unk_1001281C0);
  v60 = v100;
  v61 = v101;
  sub_100019FA0(v59, v97, (uint64_t *)&unk_1001281C0);
  sub_100019FA0(v56, v57, &qword_100128E68);
  v62 = v95;
  v63 = sub_10001C93C(v57, 1, v95);
  v92 = v61;
  v93 = v60;
  if (v63 == 1)
  {
    v64 = v45;
    sub_1000131E0(v57, &qword_100128E68);
    v65 = 0;
    v66 = 0;
    v67 = v94;
    v68 = (uint64_t)v91;
    v69 = v62;
  }
  else
  {
    v65 = *(void **)(v57 + *(int *)(v62 + 40));
    v70 = v65;
    sub_10001DBA4();
    if (v65)
    {
      v64 = v45;
      v71 = String._bridgeToObjectiveC()();
      v72 = v85;
      sub_100019FA0(a13, v85, &qword_100128740);
      v73 = type metadata accessor for URL(0);
      v74 = sub_10001C93C(v72, 1, v73);
      v76 = 0;
      v67 = v94;
      if (v74 != 1)
      {
        URL._bridgeToObjectiveC()(v75);
        v76 = v77;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(v72, v73);
      }
      v78 = objc_msgSend(v70, "localizedStringForLocaleIdentifier:bundleURL:", v71, v76);

      v65 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
      v66 = v79;

    }
    else
    {
      v64 = v45;
      v66 = 0;
      v67 = v94;
    }
    v68 = (uint64_t)v91;
    v69 = v95;
  }
  sub_100019FA0(v56, v68, &qword_100128E68);
  if (sub_10001C93C(v68, 1, v69) == 1)
  {
    sub_1000131E0(v68, &qword_100128E68);
    v80 = 0;
    v81 = 0;
  }
  else
  {
    v82 = (uint64_t *)(v68 + *(int *)(v69 + 44));
    v80 = *v82;
    v81 = v82[1];
    swift_bridgeObjectRetain(v81);
    sub_10001DBA4();
  }
  objc_allocWithZone((Class)LNAutoShortcutLocalizedPhrase);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(a10);
  v83 = sub_10003EEBC(v93, v92, a9, a10, v64, v67, v97, (uint64_t)v65, v66, v80, v81, a14 & 1, v90, v89);
  sub_1000131E0(v96, (uint64_t *)&unk_1001281C0);
  return v83;
}

uint64_t sub_10003E464()
{
  uint64_t v0;

  sub_10000E87C((_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

void sub_10003E488(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = sub_10001BE7C(&qword_100128740);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v30 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v30 - v11;
  v13 = objc_msgSend(a1, "shortTitle");
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, "bundleURL");

    if (v15)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

      v16 = type metadata accessor for URL(0);
      v17 = (uint64_t)v10;
      v18 = 0;
    }
    else
    {
      v16 = type metadata accessor for URL(0);
      v17 = (uint64_t)v10;
      v18 = 1;
    }
    sub_100014360(v17, v18, 1, v16);
    sub_100019EB8((uint64_t)v10, (uint64_t)v12, &qword_100128740);
    type metadata accessor for URL(0);
    if (sub_10001C93C((uint64_t)v12, 1, v16) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a2, v12, v16);
      sub_100014360(a2, 0, 1, v16);
      return;
    }
  }
  else
  {
    v19 = type metadata accessor for URL(0);
    sub_100014360((uint64_t)v12, 1, 1, v19);
  }
  v20 = objc_msgSend(a1, "phraseTemplates");
  sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
  v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20);

  if ((unint64_t)v21 >> 62)
  {
    if (v21 < 0)
      v27 = v21;
    else
      v27 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v21);
    v28 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(v21);
    if (v28)
      goto LABEL_9;
  }
  else if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    sub_1000530A4(0, (v21 & 0xC000000000000001) == 0, v21);
    if ((v21 & 0xC000000000000001) != 0)
      v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
    else
      v22 = *(id *)(v21 + 32);
    v23 = v22;
    swift_bridgeObjectRelease(v21);
    v24 = objc_msgSend(v23, "bundleURL");

    if (v24)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v24);

      v25 = 0;
    }
    else
    {
      v25 = 1;
    }
    v26 = type metadata accessor for URL(0);
    sub_100014360((uint64_t)v7, v25, 1, v26);
    sub_100019EB8((uint64_t)v7, a2, &qword_100128740);
    goto LABEL_21;
  }
  swift_bridgeObjectRelease(v21);
  v29 = type metadata accessor for URL(0);
  sub_100014360(a2, 1, 1, v29);
LABEL_21:
  sub_1000131E0((uint64_t)v12, &qword_100128740);
}

id sub_10003E7A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  id v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;

  if (!a4)
    return 0;
  swift_bridgeObjectRetain(a4);
  v13 = objc_msgSend(a2, "title");
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "localizedStringForLocaleIdentifier:", v14);

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19 = sub_100028464(a2, (SEL *)&selRef_systemImageName);
  v21 = v20;
  v22 = objc_msgSend(a7, "parameterIdentifier");
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26 = objc_allocWithZone((Class)LNAppShortcutDynamicOptionsProviderReference);
  v27 = sub_10003F150(a3, a4, v23, v25, a8, a1);
  v28 = objc_allocWithZone((Class)LNAppShortcutOptionsCollection);
  return sub_10003F1EC(v16, v18, v19, v21, v27);
}

uint64_t sub_10003E920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(a1, a2, a3);
  swift_bridgeObjectRelease(a3);
  sub_10000EC68();
  String.hash(into:)(a1, a4, a5);
  return swift_bridgeObjectRelease(a5);
}

void sub_10003E994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12;
  BOOL v13;

  v12 = a1 == a5 && a2 == a6;
  if ((v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0) & 1) != 0)
    && (a3 == a7 ? (v13 = a4 == a8) : (v13 = 0), !v13))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0);
  }
  else
  {
    sub_10001000C();
  }
}

Swift::Int sub_10003EA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, 0);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v9, a1, a2);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRetain(a4);
  String.hash(into:)(v9, a3, a4);
  swift_bridgeObjectRelease(a4);
  return Hasher._finalize()();
}

Swift::Int sub_10003EAA4()
{
  uint64_t *v0;

  return sub_10003EA18(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_10003EAB0(uint64_t a1)
{
  uint64_t *v1;

  return sub_10003E920(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int sub_10003EABC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  sub_100013E10();
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  sub_1000101B0();
  String.hash(into:)(v7, v5, v4);
  sub_1000059A8();
  return Hasher._finalize()();
}

void sub_10003EB30(uint64_t *a1, uint64_t *a2)
{
  sub_10003E994(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

id sub_10003EB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  NSString v22;
  NSString v23;
  NSArray v24;
  id v25;
  NSString v27;
  NSString v28;
  NSArray v29;
  NSString v30;
  NSString v31;
  NSString v32;
  void *v33;

  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  sub_10000795C(0, (unint64_t *)&qword_1001281B8, LNAutoShortcutLocalizedPhrase_ptr);
  v29.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a7);
  if (a9)
  {
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a9);
  }
  else
  {
    v28 = 0;
  }
  if (a11)
  {
    v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a11);
  }
  else
  {
    v27 = 0;
  }
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a13);
  if (a17)
  {
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a17);
  }
  else
  {
    v23 = 0;
  }
  if (a18)
  {
    sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
    v24.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a18);
  }
  else
  {
    v24.super.isa = 0;
  }
  v25 = objc_msgSend(v33, "initWithBundleIdentifier:localeIdentifier:actionIdentifier:orderedPhrases:localizedShortTitle:localizedAutoShortcutDescription:systemImageName:shortcutTileColor:parameterPresentation:attributionBundleIdentifier:basePhraseTemplates:", v32, v31, v30, v29.super.isa, v28, v27, v22, a14, a15, v23, v24.super.isa);

  return v25;
}

id sub_10003ED78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  NSString v15;
  NSString v16;
  NSString v17;
  uint64_t v18;
  Class isa;
  NSString v20;
  id v21;
  id v23;

  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  v18 = type metadata accessor for UUID(0);
  isa = 0;
  if (sub_10001C93C(a7, 1, v18) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a7, v18);
  }
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
  v21 = objc_msgSend(v23, "initWithLocalizedPhrase:bundleIdentifier:basePhraseTemplate:parameterIdentifier:primary:signature:", v15, v16, v17, isa, a8 & 1, v20);

  return v21;
}

id sub_10003EEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  NSString v18;
  NSString v19;
  NSString v20;
  uint64_t v21;
  Class isa;
  NSString v23;
  NSString v24;
  NSString v25;
  id v26;
  uint64_t v28;
  id v29;

  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  v21 = type metadata accessor for UUID(0);
  isa = 0;
  if (sub_10001C93C(a7, 1, v21) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a7, v21);
  }
  if (a9)
  {
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a9);
  }
  else
  {
    v23 = 0;
  }
  if (a11)
  {
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a11);
  }
  else
  {
    v24 = 0;
  }
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a14);
  LOBYTE(v28) = a12 & 1;
  v26 = objc_msgSend(v29, "initWithLocalizedPhrase:bundleIdentifier:basePhraseTemplate:parameterIdentifier:optionsCollectionTitle:optionsCollectionSystemImageName:primary:signature:", v18, v19, v20, isa, v23, v24, v28, v25);

  return v26;
}

id sub_10003F06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  NSString v10;
  NSString v11;
  uint64_t v12;
  NSURL *v13;
  void *v14;
  void *v15;
  id v16;

  v6 = v5;
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v11 = 0;
  }
  v12 = type metadata accessor for URL(0);
  v14 = 0;
  if (sub_10001C93C(a5, 1, v12) != 1)
  {
    URL._bridgeToObjectiveC()(v13);
    v14 = v15;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a5, v12);
  }
  v16 = objc_msgSend(v6, "initWithKey:table:bundleURL:", v10, v11, v14);

  return v16;
}

id sub_10003F150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  NSString v11;
  NSString v12;
  id v13;

  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v13 = objc_msgSend(v6, "initWithAppShortcutsProviderMangledTypeName:parameterIdentifier:appShortcutIndex:optionsProviderIndex:", v11, v12, a5, a6);

  return v13;
}

id sub_10003F1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v5;
  NSString v9;
  NSString v10;
  id v11;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v10 = 0;
  }
  v11 = objc_msgSend(v5, "initWithLocalizedTitle:systemImageName:optionsProviderReference:", v9, v10, a5);

  return v11;
}

id sub_10003F288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  NSString v9;
  NSString v10;
  NSArray v11;
  id v12;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    sub_10000795C(0, &qword_100128E58, LNAppShortcutOptionsCollection_ptr);
    v11.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v11.super.isa = 0;
  }
  v12 = objc_msgSend(v5, "initWithParameterIdentifier:localizedSpecificTitle:optionsCollections:", v9, v10, v11.super.isa);

  return v12;
}

uint64_t type metadata accessor for AppShortcutInterpolator.Builder(uint64_t a1)
{
  uint64_t result;

  result = qword_100128F68;
  if (!qword_100128F68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppShortcutInterpolator.Builder);
  return result;
}

uint64_t sub_10003F38C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(a2, a1);
  return a2;
}

uint64_t sub_10003F3C0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_100093310(v2);
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  result = sub_10003F428(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_10003F428(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  char v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_10003FA8C(0, v3, 1, a1);
      return result;
    }
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  v5 = result;
  v108 = v1;
  sub_1000B7930(v3 / 2);
  v102 = a1;
  v103 = v6;
  v107 = v7;
  v105 = v3;
  if (v3 > 0)
  {
    v8 = 0;
    v9 = *a1;
    v100 = *a1 + 40;
    v101 = *a1 + 128;
    v10 = (char *)_swiftEmptyArrayStorage;
    result = 48;
    v11 = v105;
    v104 = v5;
    v106 = v9;
    while (1)
    {
      v12 = v8++;
      if (v8 < v11)
      {
        v13 = *(_QWORD *)(v9 + 48 * v8 + 32);
        v14 = *(_QWORD *)(v9 + 48 * v12 + 32) >> 14;
        v15 = v13 >> 14;
        v8 = v12 + 2;
        if (v12 + 2 < v11)
        {
          v16 = (unint64_t *)(v101 + 48 * v12);
          while (1)
          {
            v18 = *v16;
            v16 += 6;
            v17 = v18;
            if (v14 < v15 == v13 >> 14 >= v18 >> 14)
              break;
            ++v8;
            v13 = v17;
            if (v8 >= v11)
            {
              v8 = v11;
              break;
            }
          }
        }
        if (v14 < v15)
        {
          if (v8 < v12)
            goto LABEL_127;
          if (v12 < v8)
          {
            v19 = 48 * v8;
            v20 = 48 * v12;
            v21 = v8;
            v22 = v12;
            do
            {
              if (v22 != --v21)
              {
                if (!v9)
                  goto LABEL_133;
                v23 = (_OWORD *)(v9 + v20);
                v24 = v9 + v19;
                v25 = *(_QWORD *)(v9 + v20 + 16);
                v26 = *(_QWORD *)(v9 + v20 + 24);
                v27 = *(_OWORD *)(v9 + v20);
                v28 = *(_OWORD *)(v9 + v20 + 32);
                v30 = *(_OWORD *)(v9 + v19 - 32);
                v29 = *(_OWORD *)(v9 + v19 - 16);
                *v23 = *(_OWORD *)(v9 + v19 - 48);
                v23[1] = v30;
                v23[2] = v29;
                *(_OWORD *)(v24 - 48) = v27;
                *(_QWORD *)(v24 - 32) = v25;
                *(_QWORD *)(v24 - 24) = v26;
                *(_OWORD *)(v24 - 16) = v28;
              }
              ++v22;
              v19 -= 48;
              v20 += 48;
            }
            while (v22 < v21);
          }
        }
      }
      if (v8 < v11)
      {
        if (__OFSUB__(v8, v12))
          goto LABEL_124;
        if (v8 - v12 < v5)
        {
          v31 = v12 + v5;
          if (__OFADD__(v12, v5))
            goto LABEL_128;
          if (v31 >= v11)
            v31 = v11;
          if (v31 < v12)
          {
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            return result;
          }
          if (v8 != v31)
          {
            v32 = v100 + 48 * v8;
            do
            {
              v33 = *(_QWORD *)(v9 + 48 * v8 + 32);
              v34 = v12;
              v35 = v32;
              do
              {
                if (v33 >> 14 <= *(_QWORD *)(v35 - 56) >> 14)
                  break;
                if (!v9)
                  goto LABEL_131;
                v36 = (_OWORD *)(v35 - 40);
                v37 = (_OWORD *)(v35 - 88);
                v39 = *(_OWORD *)(v35 - 72);
                v38 = *(_OWORD *)(v35 - 56);
                *(_QWORD *)(v35 - 48) = *(_QWORD *)v35;
                v35 -= 48;
                v40 = *(_QWORD *)(v35 + 24);
                v41 = *(_QWORD *)(v35 + 32);
                v42 = *(_OWORD *)(v35 + 8);
                *v36 = *v37;
                v36[1] = v39;
                v36[2] = v38;
                *(_OWORD *)(v35 - 40) = v42;
                *(_QWORD *)(v35 - 24) = v40;
                *(_QWORD *)(v35 - 16) = v41;
                *(_QWORD *)(v35 - 8) = v33;
                ++v34;
              }
              while (v8 != v34);
              ++v8;
              v32 += 48;
            }
            while (v8 != v31);
            v8 = v31;
          }
        }
      }
      if (v8 < v12)
        goto LABEL_123;
      result = swift_isUniquelyReferenced_nonNull_native(v10);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_100092968(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        v10 = (char *)result;
      }
      v44 = *((_QWORD *)v10 + 2);
      v43 = *((_QWORD *)v10 + 3);
      v45 = v44 + 1;
      v9 = v106;
      if (v44 >= v43 >> 1)
      {
        result = (uint64_t)sub_100092968((char *)(v43 > 1), v44 + 1, 1, v10);
        v9 = v106;
        v10 = (char *)result;
      }
      *((_QWORD *)v10 + 2) = v45;
      v46 = v10 + 32;
      v47 = &v10[16 * v44 + 32];
      *(_QWORD *)v47 = v12;
      *((_QWORD *)v47 + 1) = v8;
      if (v44)
      {
        while (1)
        {
          v48 = v45 - 1;
          if (v45 >= 4)
          {
            v53 = &v46[2 * v45];
            v54 = *(v53 - 8);
            v55 = *(v53 - 7);
            v59 = __OFSUB__(v55, v54);
            v56 = v55 - v54;
            if (v59)
              goto LABEL_108;
            v58 = *(v53 - 6);
            v57 = *(v53 - 5);
            v59 = __OFSUB__(v57, v58);
            v51 = v57 - v58;
            v52 = v59;
            if (v59)
              goto LABEL_109;
            v60 = v45 - 2;
            v61 = &v46[2 * v45 - 4];
            v63 = *v61;
            v62 = v61[1];
            v59 = __OFSUB__(v62, v63);
            v64 = v62 - v63;
            if (v59)
              goto LABEL_110;
            v59 = __OFADD__(v51, v64);
            v65 = v51 + v64;
            if (v59)
              goto LABEL_112;
            if (v65 >= v56)
            {
              v83 = &v46[2 * v48];
              v85 = *v83;
              v84 = v83[1];
              v59 = __OFSUB__(v84, v85);
              v86 = v84 - v85;
              if (v59)
                goto LABEL_118;
              v76 = v51 < v86;
              goto LABEL_70;
            }
          }
          else
          {
            if (v45 != 3)
            {
              v77 = *((_QWORD *)v10 + 4);
              v78 = *((_QWORD *)v10 + 5);
              v59 = __OFSUB__(v78, v77);
              v70 = v78 - v77;
              v71 = v59;
              goto LABEL_64;
            }
            v50 = *((_QWORD *)v10 + 4);
            v49 = *((_QWORD *)v10 + 5);
            v59 = __OFSUB__(v49, v50);
            v51 = v49 - v50;
            v52 = v59;
          }
          if ((v52 & 1) != 0)
            goto LABEL_111;
          v60 = v45 - 2;
          v66 = &v46[2 * v45 - 4];
          v68 = *v66;
          v67 = v66[1];
          v69 = __OFSUB__(v67, v68);
          v70 = v67 - v68;
          v71 = v69;
          if (v69)
            goto LABEL_113;
          v72 = &v46[2 * v48];
          v74 = *v72;
          v73 = v72[1];
          v59 = __OFSUB__(v73, v74);
          v75 = v73 - v74;
          if (v59)
            goto LABEL_115;
          if (__OFADD__(v70, v75))
            goto LABEL_117;
          if (v70 + v75 >= v51)
          {
            v76 = v51 < v75;
LABEL_70:
            if (v76)
              v48 = v60;
            goto LABEL_72;
          }
LABEL_64:
          if ((v71 & 1) != 0)
            goto LABEL_114;
          v79 = &v46[2 * v48];
          v81 = *v79;
          v80 = v79[1];
          v59 = __OFSUB__(v80, v81);
          v82 = v80 - v81;
          if (v59)
            goto LABEL_116;
          if (v82 < v70)
            goto LABEL_81;
LABEL_72:
          v87 = v48 - 1;
          if (v48 - 1 >= v45)
          {
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          if (!v9)
            goto LABEL_132;
          v88 = &v46[2 * v87];
          v89 = *v88;
          v90 = &v46[2 * v48];
          v91 = v90[1];
          result = sub_10003FB20((char *)(v9 + 48 * *v88), (char *)(v9 + 48 * *v90), v9 + 48 * v91, v107);
          if (v108)
          {
            v93 = (uint64_t)v10;
LABEL_87:
            result = swift_bridgeObjectRelease(v93);
            if (v105 >= -1)
            {
              *(_QWORD *)(v103 + 16) = 0;
              return swift_bridgeObjectRelease(v103);
            }
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
            goto LABEL_129;
          }
          if (v91 < v89)
            goto LABEL_105;
          if (v48 > *((_QWORD *)v10 + 2))
            goto LABEL_106;
          *v88 = v89;
          v46[2 * v87 + 1] = v91;
          v92 = *((_QWORD *)v10 + 2);
          if (v48 >= v92)
            goto LABEL_107;
          v45 = v92 - 1;
          result = (uint64_t)memmove(&v46[2 * v48], v90 + 2, 16 * (v92 - 1 - v48));
          *((_QWORD *)v10 + 2) = v92 - 1;
          v9 = v106;
          if (v92 <= 2)
            goto LABEL_81;
        }
      }
      v45 = 1;
LABEL_81:
      v5 = v104;
      v11 = v105;
      result = 48;
      if (v8 >= v105)
        goto LABEL_91;
    }
  }
  v10 = (char *)_swiftEmptyArrayStorage;
  v45 = _swiftEmptyArrayStorage[2];
LABEL_91:
  result = (uint64_t)v10;
  if (v45 >= 2)
  {
    v94 = *v102;
    while (1)
    {
      v95 = v45 - 2;
      if (v45 < 2)
        break;
      if (!v94)
        goto LABEL_134;
      v93 = result;
      v96 = *(_QWORD *)(result + 32 + 16 * v95);
      v97 = *(_QWORD *)(result + 32 + 16 * (v45 - 1) + 8);
      result = sub_10003FB20((char *)(v94 + 48 * v96), (char *)(v94 + 48 * *(_QWORD *)(result + 32 + 16 * (v45 - 1))), v94 + 48 * v97, v107);
      if (v108)
        goto LABEL_87;
      if (v97 < v96)
        goto LABEL_120;
      result = swift_isUniquelyReferenced_nonNull_native(v93);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_100092A54(v93);
        v93 = result;
      }
      if (v95 >= *(_QWORD *)(v93 + 16))
        goto LABEL_121;
      v98 = (_QWORD *)(v93 + 32 + 16 * v95);
      *v98 = v96;
      v98[1] = v97;
      v99 = *(_QWORD *)(v93 + 16);
      if (v45 > v99)
        goto LABEL_122;
      memmove((void *)(v93 + 32 + 16 * (v45 - 1)), (const void *)(v93 + 32 + 16 * v45), 16 * (v99 - v45));
      result = v93;
      *(_QWORD *)(v93 + 16) = v99 - 1;
      v45 = v99 - 1;
      if (v99 <= 2)
        goto LABEL_102;
    }
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
LABEL_102:
  result = swift_bridgeObjectRelease(result);
  if (v105 < -1)
    goto LABEL_130;
  *(_QWORD *)(v103 + 16) = 0;
  return swift_bridgeObjectRelease(v103);
}

uint64_t sub_10003FA8C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 48 * a3 + 40;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 48 * a3 + 32);
      v7 = result;
      v8 = v5;
      do
      {
        if (v6 >> 14 <= *(_QWORD *)(v8 - 56) >> 14)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        v9 = (_OWORD *)(v8 - 40);
        v10 = (_OWORD *)(v8 - 88);
        v12 = *(_OWORD *)(v8 - 72);
        v11 = *(_OWORD *)(v8 - 56);
        *(_QWORD *)(v8 - 48) = *(_QWORD *)v8;
        v8 -= 48;
        v14 = *(_QWORD *)(v8 + 24);
        v13 = *(_QWORD *)(v8 + 32);
        v15 = *(_OWORD *)(v8 + 8);
        *v9 = *v10;
        v9[1] = v12;
        v9[2] = v11;
        *(_OWORD *)(v8 - 40) = v15;
        *(_QWORD *)(v8 - 24) = v14;
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v6;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 48;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_10003FB20(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char *v14;
  __int128 v17;
  __int128 v18;
  char *v20;
  char *v21;
  char *v22;
  BOOL v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 48;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  if (v9 >= v11)
  {
    sub_100031254(a2, (uint64_t)(a3 - (_QWORD)a2) / 48, a4);
    v12 = (unint64_t)&v4[48 * v11];
    if (v7 >= v6 || v10 < 48)
      goto LABEL_41;
    v20 = (char *)(a3 - 48);
    while (1)
    {
      v21 = v20 + 48;
      if (*((_QWORD *)v6 - 2) >> 14 >= *(_QWORD *)(v12 - 16) >> 14)
      {
        v22 = (char *)(v12 - 48);
        v24 = v21 != (char *)v12 || (unint64_t)v20 >= v12;
        v12 -= 48;
        if (!v24)
          goto LABEL_37;
      }
      else
      {
        v22 = v6 - 48;
        v23 = v21 != v6 || v20 >= v6;
        v6 -= 48;
        if (!v23)
          goto LABEL_37;
      }
      v25 = *(_OWORD *)v22;
      v26 = *((_OWORD *)v22 + 2);
      *((_OWORD *)v20 + 1) = *((_OWORD *)v22 + 1);
      *((_OWORD *)v20 + 2) = v26;
      *(_OWORD *)v20 = v25;
LABEL_37:
      v20 -= 48;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_41;
    }
  }
  sub_100031254(a1, (a2 - a1) / 48, a4);
  v12 = (unint64_t)&v4[48 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 48)
  {
    do
    {
      if (*((_QWORD *)v4 + 4) >> 14 >= *((_QWORD *)v6 + 4) >> 14)
      {
        v13 = v7 == v4;
        v14 = v4;
        v4 += 48;
        if (v13 && v7 < v4)
          goto LABEL_16;
      }
      else
      {
        v13 = v7 == v6;
        v14 = v6;
        v6 += 48;
        if (v13 && v7 < v6)
          goto LABEL_16;
      }
      v17 = *(_OWORD *)v14;
      v18 = *((_OWORD *)v14 + 2);
      *((_OWORD *)v7 + 1) = *((_OWORD *)v14 + 1);
      *((_OWORD *)v7 + 2) = v18;
      *(_OWORD *)v7 = v17;
LABEL_16:
      v7 += 48;
    }
    while ((unint64_t)v4 < v12 && (unint64_t)v6 < a3);
  }
  v6 = v7;
LABEL_41:
  sub_100031254(v4, (uint64_t)(v12 - (_QWORD)v4) / 48, v6);
  return 1;
}

uint64_t sub_10003FCC8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t result;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  _QWORD v45[9];

  v4 = v3;
  v8 = *v3;
  Hasher.init(_seed:)(v45, *(_QWORD *)(*v3 + 40));
  String.hash(into:)(v45, a1, a2);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  v12 = v8 + 56;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v13 = *(_QWORD *)(v8 + 48);
    v14 = (_QWORD *)(v13 + 16 * v11);
    v15 = v14[1];
    v16 = *v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) != 0)
    {
LABEL_7:
      v17 = 0;
      v18 = 1;
      goto LABEL_18;
    }
    v19 = ~v10;
    v11 = (v11 + 1) & ~v10;
    if (((*(_QWORD *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
    {
      v17 = 1;
      while (1)
      {
        v20 = (_QWORD *)(v13 + 16 * v11);
        v21 = v20[1];
        v22 = *v20 == a1 && v21 == a2;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, a1, a2, 0) & 1) != 0)
          goto LABEL_7;
        v11 = (v11 + 1) & v19;
        if (((*(_QWORD *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        {
          v18 = 0;
          goto LABEL_18;
        }
      }
    }
  }
  v18 = 0;
  v17 = 1;
LABEL_18:
  v23 = *(_QWORD *)(v8 + 16);
  v24 = v23 + v17;
  if (__OFADD__(v23, v17))
  {
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v25 = *(_QWORD *)(v8 + 24);
  if (v25 >= v24 && (a3 & 1) != 0)
  {
    if (!v18)
      goto LABEL_46;
    goto LABEL_36;
  }
  if ((a3 & 1) != 0)
  {
    sub_1000336B8();
  }
  else
  {
    if (v25 >= v24)
    {
      sub_1000345C4();
      if (!v18)
      {
LABEL_46:
        v40 = *v4;
        *(_QWORD *)(*v4 + 8 * (v11 >> 6) + 56) |= 1 << v11;
        v41 = (uint64_t *)(*(_QWORD *)(v40 + 48) + 16 * v11);
        *v41 = a1;
        v41[1] = a2;
        v42 = *(_QWORD *)(v40 + 16);
        v43 = __OFADD__(v42, 1);
        v44 = v42 + 1;
        if (!v43)
        {
          result = 0;
          *(_QWORD *)(v40 + 16) = v44;
          return result;
        }
        goto LABEL_49;
      }
LABEL_36:
      v34 = (uint64_t *)(*(_QWORD *)(*v4 + 48) + 16 * v11);
      result = *v34;
      *v34 = a1;
      v34[1] = a2;
      return result;
    }
    sub_100034B40();
  }
  v26 = *v4;
  Hasher.init(_seed:)(v45, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v45, a1, a2);
  v27 = Hasher._finalize()();
  v28 = -1 << *(_BYTE *)(v26 + 32);
  v11 = v27 & ~v28;
  v29 = v26 + 56;
  if (((*(_QWORD *)(v26 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    goto LABEL_45;
  v30 = *(_QWORD *)(v26 + 48);
  v31 = (_QWORD *)(v30 + 16 * v11);
  v32 = v31[1];
  v33 = *v31 == a1 && v32 == a2;
  if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v31, v32, a1, a2, 0) & 1) == 0)
  {
    v36 = ~v28;
    while (1)
    {
      v11 = (v11 + 1) & v36;
      if (((*(_QWORD *)(v29 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        break;
      v37 = (_QWORD *)(v30 + 16 * v11);
      v38 = v37[1];
      v39 = *v37 == a1 && v38 == a2;
      if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v37, v38, a1, a2, 0) & 1) != 0)
        goto LABEL_35;
    }
LABEL_45:
    if ((v18 & 1) == 0)
      goto LABEL_46;
    goto LABEL_50;
  }
LABEL_35:
  if ((v18 & 1) != 0)
    goto LABEL_36;
LABEL_50:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10003FFA8(void *a1, SEL *a2, unint64_t *a3, _QWORD *a4)
{
  id v6;
  void *v7;
  uint64_t v8;

  v6 = objc_msgSend(a1, *a2);
  if (!v6)
    return 0;
  v7 = v6;
  sub_10000795C(0, a3, a4);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

id sub_100040018(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_10003E7A4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48), *(_QWORD *)(v2 + 56));
}

void sub_100040028(void **a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10003D1DC(a1, a2);
}

uint64_t sub_100040044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10003D0C0(a1, a2, a3, *(void **)(v3 + 16));
}

unint64_t sub_10004004C()
{
  unint64_t result;

  result = qword_100128E70;
  if (!qword_100128E70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100128E70);
  }
  return result;
}

unint64_t sub_100040088()
{
  unint64_t result;

  result = qword_100128E90;
  if (!qword_100128E90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100128E90);
  }
  return result;
}

unint64_t sub_1000400C4()
{
  unint64_t result;

  result = qword_100128EB0;
  if (!qword_100128EB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100128EB0);
  }
  return result;
}

unint64_t sub_100040100()
{
  unint64_t result;

  result = qword_100128ED0;
  if (!qword_100128ED0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100128ED0);
  }
  return result;
}

unint64_t sub_10004013C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100128EF8;
  if (!qword_100128EF8)
  {
    v1 = type metadata accessor for CharacterClass(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacterClass, v1);
    atomic_store(result, (unint64_t *)&qword_100128EF8);
  }
  return result;
}

_QWORD *sub_10004017C(_QWORD *a1)
{
  destroy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(a1);
  return a1;
}

unint64_t sub_1000401A8()
{
  unint64_t result;

  result = qword_100128F08;
  if (!qword_100128F08)
  {
    result = swift_getWitnessTable(&unk_1000F0084, &unk_10011B4E8);
    atomic_store(result, (unint64_t *)&qword_100128F08);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ApplicationServiceInstance.Errors(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t sub_100040238(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100040278 + 4 * asc_1000EFDD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100040298 + 4 * byte_1000EFDD5[v4]))();
}

_BYTE *sub_100040278(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100040298(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000402A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000402A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000402B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000402B8(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for AppShortcutInterpolator.Error()
{
  sub_1000059CC();
}

uint64_t destroy for AppShortcutInterpolator.Builder.RecordIdentifier(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for AppShortcutInterpolator.Builder.RecordIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for AppShortcutInterpolator.Builder.RecordIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for AppShortcutInterpolator.Builder.RecordIdentifier(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for AppShortcutInterpolator.Builder.RecordIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutInterpolator.Builder.RecordIdentifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutInterpolator.Builder.RecordIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutInterpolator.Builder.RecordIdentifier()
{
  return &type metadata for AppShortcutInterpolator.Builder.RecordIdentifier;
}

uint64_t destroy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(_QWORD *a1)
{
  sub_10000E87C(a1);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_100040534(a1, a2);
  a1[5] = a2[5];
  v4 = a2[6];
  v5 = a1[6];
  a1[6] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

_QWORD *sub_100040534(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  sub_10000E87C((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AppShortcutInterpolator.ApplicationPlaceholder()
{
  sub_1000059CC();
}

char *sub_100040798(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v31);
  }
  else
  {
    v7 = type metadata accessor for Logger(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = *(_OWORD *)&a2[v8 + 24];
    *(_OWORD *)&a1[v8 + 24] = v11;
    (**(void (***)(char *, char *))(v11 - 8))(&a1[v8], &a2[v8]);
    v12 = *((_QWORD *)v10 + 6);
    *((_QWORD *)v9 + 5) = *((_QWORD *)v10 + 5);
    *((_QWORD *)v9 + 6) = v12;
    v13 = a3[6];
    v14 = a3[7];
    v15 = &a1[v13];
    v16 = &a2[v13];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = *(_QWORD *)&a2[v14];
    *(_QWORD *)&a1[v14] = v18;
    v19 = a3[8];
    v20 = a3[9];
    v21 = *(_QWORD *)&a2[v19];
    *(_QWORD *)&a1[v19] = v21;
    v22 = &a1[v20];
    v23 = &a2[v20];
    v24 = *(_OWORD *)&a2[v20 + 24];
    *(_OWORD *)&a1[v20 + 24] = v24;
    v25 = v24;
    v26 = **(void (***)(char *, char *, uint64_t))(v24 - 8);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    v26(v22, v23, v25);
    v27 = a3[11];
    *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
    v28 = &a1[v27];
    v29 = &a2[v27];
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    swift_bridgeObjectRetain(v30);
  }
  return a1;
}

uint64_t sub_1000408F0(uint64_t a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + a2[5]);
  sub_10000E87C(v5);
  swift_bridgeObjectRelease(v5[6]);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
  sub_10000E87C((_QWORD *)(a1 + a2[9]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
}

uint64_t sub_10004098C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + v7, a2 + v7);
  v11 = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v8 + 48) = v11;
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v17;
  v18 = a3[8];
  v19 = a3[9];
  v20 = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + v18) = v20;
  v21 = a1 + v19;
  v22 = a2 + v19;
  v23 = *(_OWORD *)(a2 + v19 + 24);
  *(_OWORD *)(a1 + v19 + 24) = v23;
  v24 = v23;
  v25 = **(void (***)(uint64_t, uint64_t, uint64_t))(v23 - 8);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  v25(v21, v22, v24);
  v26 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  return a1;
}

uint64_t sub_100040AB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_100040534((_QWORD *)(a1 + v7), (_QWORD *)(a2 + v7));
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  v10 = *(_QWORD *)(v9 + 48);
  v11 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a3[8];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  sub_100040534((_QWORD *)(a1 + a3[9]), (_QWORD *)(a2 + a3[9]));
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v23 = a3[11];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v27 = v24[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  return a1;
}

uint64_t sub_100040BF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[9];
  v14 = a3[10];
  v15 = a1 + v13;
  v16 = (__int128 *)(a2 + v13);
  v17 = *v16;
  v18 = v16[1];
  *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
  *(_OWORD *)v15 = v17;
  *(_OWORD *)(v15 + 16) = v18;
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100040CB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_10000E87C((_QWORD *)(a1 + v7));
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  v11 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[7];
  v19 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  swift_bridgeObjectRelease(v19);
  v20 = a3[8];
  v21 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[9];
  v23 = a1 + v22;
  v24 = a2 + v22;
  sub_10000E87C((_QWORD *)(a1 + v22));
  v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
  v26 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  v31 = v27[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_100040DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100040DD8);
}

void sub_100040DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1000107AC();
  v5 = type metadata accessor for Logger(v4);
  if (*(_DWORD *)(*(_QWORD *)(v5 - 8) + 84) == (_DWORD)a2)
    sub_10001C93C(v2, a2, v5);
  else
    sub_10001000C();
}

uint64_t sub_100040E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100040E54);
}

uint64_t sub_100040E54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;

  v8 = sub_1000058BC();
  result = type metadata accessor for Logger(v8);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return sub_100014360(v4, a2, a2, result);
  *(_QWORD *)(v4 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_100040EC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "8";
    v4[2] = &unk_1000EFEF8;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = &unk_1000EFF10;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_1000EFF28;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_100040F78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  sub_10000BFBC();
}

uint64_t sub_100040FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for AppShortcutIdentifierExtractionError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_100041010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t sub_10004104C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10004108C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for LocalizedAlternativeAppName()
{
  sub_1000059CC();
}

unint64_t sub_1000410DC()
{
  unint64_t result;

  result = qword_100128FB8;
  if (!qword_100128FB8)
  {
    result = swift_getWitnessTable(&unk_1000EFF6C, &type metadata for AppShortcutInterpolator.Builder.RecordIdentifier);
    atomic_store(result, (unint64_t *)&qword_100128FB8);
  }
  return result;
}

unint64_t sub_100041120()
{
  unint64_t result;

  result = qword_100128FC0;
  if (!qword_100128FC0)
  {
    result = swift_getWitnessTable(&unk_1000F005C, &unk_10011B4E8);
    atomic_store(result, (unint64_t *)&qword_100128FC0);
  }
  return result;
}

uint64_t sub_10004115C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10004116C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10000FBEC(*(_QWORD *)(v1 - 176), v0, (uint64_t *)(v1 - 72));
}

uint64_t sub_10004117C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 320));
}

void *sub_100041188()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0xD000000000000012, 0x80000001000F3D00, 0, 0);
  return memcpy(&unk_10012CAD8, __src, 0xA8uLL);
}

uint64_t sub_1000411DC(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012CB80, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_100041200(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012CB98, 0x617461646174656DLL, 0xE800000000000000);
}

uint64_t sub_100041220(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  unint64_t v7;

  v6 = sub_10001BE7C(&qword_100128D00);
  v7 = sub_10004127C();
  return ExpressionType.init(_:)(a3, a4, v6, v7);
}

unint64_t sub_10004127C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100129FA0;
  if (!qword_100129FA0)
  {
    v1 = sub_100025A6C(&qword_100128D00);
    result = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100129FA0);
  }
  return result;
}

_QWORD *sub_1000412C4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  v5 = v4;
  return a1;
}

ValueMetadata *type metadata accessor for LNAssistantAppEntityRecord()
{
  return &type metadata for LNAssistantAppEntityRecord;
}

uint64_t sub_10004130C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  uint64_t v18;
  _QWORD *v19;

  v2 = *(_QWORD *)(a1 + 16);
  result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    v19 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    result = sub_10004BC34(a1);
    if (result < 0 || (v5 = result, result >= 1 << *(_BYTE *)(a1 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)v19;
    }
    else
    {
      v6 = a1 + 64;
      while ((*(_QWORD *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v4 != *(_DWORD *)(a1 + 36))
          goto LABEL_17;
        v16 = v2;
        v7 = v4;
        v8 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v5);
        v9 = objc_msgSend(v8, "remoteObjectProxy");
        _bridgeAnyObjectToAny(_:)(v17, v9);
        swift_unknownObjectRelease(v9);
        v10 = sub_10001BE7C(&qword_100129418);
        swift_dynamicCast(&v18, v17, (char *)&type metadata for Any + 8, v10, 7);

        v11 = v18;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v13 = v19[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
        v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
        result = specialized ContiguousArray._endMutation()(v14);
        v15 = -1 << *(_BYTE *)(a1 + 32);
        if ((uint64_t)v5 >= -v15)
          goto LABEL_18;
        if ((*(_QWORD *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
          goto LABEL_19;
        if (v7 != *(_DWORD *)(a1 + 36))
          goto LABEL_20;
        result = _HashTable.occupiedBucket(after:)(v5, a1 + 64, ~v15);
        v2 = v16 - 1;
        if (v16 == 1)
          return (uint64_t)v19;
        v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v4 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

_QWORD *sub_1000414FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD **v14;
  uint64_t v15;
  _QWORD *v16;

  if ((a6 & 1) != 0)
  {
    v16 = _swiftEmptyArrayStorage;
    v13[0] = a4;
    v13[1] = a5;
    v14 = &v16;
    sub_10004A164(a1, a2, a3, 2, (uint64_t)sub_10004BCBC, (uint64_t)&v12);
    return v16;
  }
  else
  {
    v7 = __chkstk_darwin(a1);
    v14 = v8;
    v15 = v9;
    sub_10004A164(v7, v10, v11, 2, (uint64_t)sub_10004BCB4, (uint64_t)v13);
    return _swiftEmptyArrayStorage;
  }
}

id sub_1000415B8(void *a1, uint64_t (*a2)(void))
{
  id result;
  id v4;
  char v5;

  result = objc_msgSend(a1, "eventBody");
  if (result)
  {
    v4 = result;
    v5 = a2();

    return (id)(v5 & 1);
  }
  return result;
}

uint64_t sub_100041614(void *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  id v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (uint64_t)objc_msgSend(a1, "eventBody");
  if (result)
  {
    v12 = (id)result;
    v13 = a2();

    if ((v13 & 1) != 0)
    {
      v14 = objc_msgSend(v12, "executionUUID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000B79AC();
      v15 = *(_QWORD *)(*a4 + 16);
      sub_1000B7A04(v15);
      v16 = *a4;
      *(_QWORD *)(v16 + 16) = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v15, v10, v7);

      return 1;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

void sub_100041750(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  id v29;
  _QWORD v30[5];
  int64_t v31;

  v26 = a3;
  v29 = a2;
  v4 = sub_10001BE7C((uint64_t *)&unk_1001293C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - v8;
  sub_10004BA20(a1, v30);
  v10 = v30[0];
  v31 = v30[3];
  v11 = v30[4];
  v27 = v30[1];
  v28 = (unint64_t)(v30[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v11)
    goto LABEL_3;
LABEL_2:
  v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  v13 = v12 | (v31 << 6);
  while (1)
  {
    v18 = *(_QWORD *)(v10 + 48);
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v9, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v13, v19);
    v20 = *(void **)(*(_QWORD *)(v10 + 56) + 8 * v13);
    *(_QWORD *)&v9[*(int *)(v4 + 48)] = v20;
    sub_100019EB8((uint64_t)v9, (uint64_t)v6, (uint64_t *)&unk_1001293C8);
    sub_10000795C(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
    v21 = *(_QWORD *)&v6[*(int *)(v4 + 48)];
    v22 = v20;
    if ((static NSObject.== infix(_:_:)(v21, v29) & 1) != 0)
    {
      swift_release();
      v23 = v26;
      sub_100019EB8((uint64_t)v6, v26, (uint64_t *)&unk_1001293C8);
      v24 = v23;
      v25 = 0;
      goto LABEL_24;
    }
    sub_1000131A8((uint64_t)v6, (uint64_t *)&unk_1001293C8);
    if (v11)
      goto LABEL_2;
LABEL_3:
    v14 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v14 >= v28)
      goto LABEL_23;
    v15 = *(_QWORD *)(v27 + 8 * v14);
    v16 = v31 + 1;
    if (!v15)
    {
      v16 = v31 + 2;
      if (v31 + 2 >= v28)
        goto LABEL_23;
      v15 = *(_QWORD *)(v27 + 8 * v16);
      if (!v15)
      {
        v16 = v31 + 3;
        if (v31 + 3 >= v28)
          goto LABEL_23;
        v15 = *(_QWORD *)(v27 + 8 * v16);
        if (!v15)
        {
          v16 = v31 + 4;
          if (v31 + 4 >= v28)
            goto LABEL_23;
          v15 = *(_QWORD *)(v27 + 8 * v16);
          if (!v15)
          {
            v16 = v31 + 5;
            if (v31 + 5 >= v28)
              goto LABEL_23;
            v15 = *(_QWORD *)(v27 + 8 * v16);
            if (!v15)
            {
              v17 = v31 + 6;
              while (v17 < v28)
              {
                v15 = *(_QWORD *)(v27 + 8 * v17++);
                if (v15)
                {
                  v16 = v17 - 1;
                  goto LABEL_18;
                }
              }
LABEL_23:
              swift_release();
              v24 = v26;
              v25 = 1;
LABEL_24:
              sub_100014360(v24, v25, 1, v4);

              return;
            }
          }
        }
      }
    }
LABEL_18:
    v11 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v31 = v16;
  }
  __break(1u);
}

uint64_t sub_100041A14()
{
  id v0;
  id v1;
  id v2;
  id v3;
  uint64_t result;

  v0 = (id)BiomeLibrary();
  v1 = objc_msgSend(v0, "App");
  swift_unknownObjectRelease(v0);
  v2 = objc_msgSend(v1, "Intents");
  swift_unknownObjectRelease(v1);
  v3 = objc_msgSend(v2, "Transcript");
  result = swift_unknownObjectRelease(v2);
  qword_100128FD0 = (uint64_t)v3;
  return result;
}

uint64_t sub_100041AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = type metadata accessor for Logger(0);
  sub_1000269D8(v0, qword_10012CBB0);
  sub_100012A40(v0, (uint64_t)qword_10012CBB0);
  v8 = type metadata accessor for Transcript();
  v1 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v3 = String.init<A>(describing:)(&v8, v1);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v5 = v2;
    v6 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v6, v7, v3, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100041B50()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v17;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (!v5)
  {
    v6 = qword_100127CB8;
    v7 = v0;
    if (v6 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v8 = sub_100012A40(v1, (uint64_t)qword_10012CBB0);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v8, v1);

    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No current XPC connection.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v13 = sub_10004BA8C();
    v14 = swift_allocError(&type metadata for TranscriptError, v13, 0, 0);
    *v15 = 1;
    swift_willThrow(v14);
  }
  return v5;
}

id sub_100041CF8(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  objc_super v25;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2);
  v7 = OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections;
  v8 = sub_10001AE20();
  v9 = sub_10000795C(0, &qword_1001293D8, NSXPCConnection_ptr);
  sub_100025AFC(&qword_1001289E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v11 = v10;
  v12 = v3;
  *(_QWORD *)&v3[v7] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v8, v9, v11);
  v13 = OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionLock;
  v14 = sub_10001BE7C(&qword_10012B3D0);
  v15 = sub_1000100C8(v14, 20);
  *(_DWORD *)(v15 + 16) = 0;
  *(_QWORD *)&v12[v13] = v15;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10LinkDaemon10Transcript_streamManager] = a1;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10LinkDaemon10Transcript_observers] = a2;
  swift_retain();

  v25.receiver = v12;
  v25.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v25, "init");
  v17 = qword_100127CB8;
  v18 = v16;
  if (v17 != -1)
    swift_once(&qword_100127CB8, sub_100041AAC);
  v19 = sub_10000C05C();
  v20 = sub_100012A40(v19, (uint64_t)qword_10012CBB0);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)sub_100011780(2);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Starting Transcript", v23, 2u);
    sub_1000133FC((uint64_t)v23);
  }
  swift_release();

  return v18;
}

uint64_t sub_100041ED4(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  uint64_t v40;

  v3 = sub_10001BE7C(&qword_10012AD50);
  __chkstk_darwin(v3);
  sub_10001765C();
  v6 = v5 - v4;
  v7 = sub_10000C05C();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10001765C();
  v11 = v10 - v9;
  v12 = qword_100127CB8;
  v13 = v1;
  if (v12 != -1)
    swift_once(&qword_100127CB8, sub_100041AAC);
  v14 = sub_100012A40(v7, (uint64_t)qword_10012CBB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v14, v7);

  v15 = a1;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v38 = v13;
    v18 = (uint8_t *)sub_100011780(12);
    v35 = (_QWORD *)sub_100011780(8);
    v36 = v11;
    *(_DWORD *)v18 = 138412290;
    v39 = v15;
    v37 = v8;
    v19 = v7;
    v20 = v15;
    v11 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
    v21 = (uint64_t)v35;
    *v35 = v15;

    v7 = v19;
    v8 = v37;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "invalidatedConnection for %@", v18, 0xCu);
    sub_10001BE7C(&qword_100128160);
    swift_arrayDestroy(v21, 1);
    sub_1000133FC(v21);
    v22 = (uint64_t)v18;
    v13 = v38;
    sub_1000133FC(v22);
  }
  else
  {

    v16 = v15;
  }

  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  __chkstk_darwin(v23);
  *(&v34 - 2) = (uint64_t)v15;
  sub_1000423B8(sub_10004A8D4, (uint64_t)(&v34 - 4));
  result = sub_10006052C();
  if (v25)
  {
    v26 = sub_100048BC8(result, v25);
    v28 = v27;
    v30 = v29;
    result = swift_bridgeObjectRelease();
    if (v28)
    {
      v31 = type metadata accessor for TaskPriority(0);
      sub_100014360(v6, 1, 1, v31);
      v32 = (_QWORD *)sub_1000100C8((uint64_t)&unk_10011B850, 64);
      v32[2] = 0;
      v32[3] = 0;
      v32[4] = v13;
      v32[5] = v26;
      v32[6] = v28;
      v32[7] = v30;
      v33 = v13;
      sub_100029394(v6, (uint64_t)&unk_100129398, (uint64_t)v32);
      return swift_release();
    }
  }
  return result;
}

void sub_1000421C8(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  _BYTE v17[16];

  v3 = sub_10001BE7C((uint64_t *)&unk_1001293B8);
  __chkstk_darwin(v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a2;
  swift_bridgeObjectRetain();
  sub_100041750(v14, v13, (uint64_t)v5);
  swift_bridgeObjectRelease();
  v15 = sub_10001BE7C((uint64_t *)&unk_1001293C8);
  if (sub_10001C93C((uint64_t)v5, 1, v15) == 1)
  {
    sub_1000131A8((uint64_t)v5, (uint64_t *)&unk_1001293B8);
    sub_100014360((uint64_t)v8, 1, 1, v9);
LABEL_4:
    sub_1000131A8((uint64_t)v8, (uint64_t *)&unk_1001281C0);
    return;
  }

  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32);
  v16(v8, v5, v9);
  sub_100014360((uint64_t)v8, 0, 1, v9);
  if (sub_10001C93C((uint64_t)v8, 1, v9) == 1)
    goto LABEL_4;
  v16(v12, v8, v9);

  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1000423B8(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;

  v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionLock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  sub_10004882C(a1, a2, v2);
  os_unfair_lock_unlock(v5 + 4);
  return swift_release();
}

uint64_t sub_100042430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_10004244C, 0, 0);
}

uint64_t sub_10004244C()
{
  uint64_t v0;

  sub_1000498E4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100042484()
{
  _swift_stdlib_reportUnimplementedInitializer("LinkDaemon.Transcript", 21, "init()", 6, 0);
  __break(1u);
}

id _LNMetadataProviderDirect.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Transcript()
{
  return objc_opt_self(_TtC10LinkDaemon10Transcript);
}

uint64_t sub_100042568()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNTranscriptServiceName);
  qword_10012CBC8 = result;
  unk_10012CBD0 = v1;
  return result;
}

uint64_t sub_100042594()
{
  uint64_t v0;

  if (qword_100127CC0 != -1)
    swift_once(&qword_100127CC0, sub_100042568);
  v0 = qword_10012CBC8;
  swift_bridgeObjectRetain(unk_10012CBD0);
  return v0;
}

uint64_t sub_1000425F0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  _QWORD *v24;
  id v25;

  v6 = sub_10001BE7C(&qword_100128B48);
  v7 = sub_1000100C8(v6, 56);
  *(_OWORD *)(v7 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  *(_QWORD *)(v7 + 48) = a3;
  v8 = LNSystemStreamIdentifier;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNSystemStreamIdentifier);
  if (v9 == a1 && v10 == a2)
  {
    v25 = a3;
  }
  else
  {
    v12 = v10;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v9, v10, 0);
    swift_bridgeObjectRetain(a2);
    v14 = a3;
    swift_bridgeObjectRelease(v12);
    if ((v13 & 1) == 0)
    {
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v17 = v16;
      v18 = sub_100048BC8(v15, v16);
      v20 = v19;
      v22 = v21;
      swift_bridgeObjectRelease(v17);
      if (v20)
      {
        swift_bridgeObjectRetain(v20);
        v23 = v22;
        sub_10002FD54();
        v7 = (uint64_t)v24;
        v24[2] = 2;
        v24[7] = v18;
        v24[8] = v20;
        v24[9] = v23;

        swift_bridgeObjectRelease(v20);
      }
    }
  }
  return v7;
}

id sub_100042738()
{
  void *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  os_log_type_t v4;
  float *v5;
  float *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  float *v19;
  float *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  float *v33;
  float *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  float *v47;
  float *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = sub_100042A1C(0xD000000000000025, 0x80000001000F3E90);
  v2 = sub_10001F578(v1, 0x80000001000F3E60);
  if ((v1 & 1) != 0)
  {
    if ((v2 & 1) != 0)
    {
      if (qword_100127CB8 != -1)
        swift_once(&qword_100127CB8, sub_100041AAC);
      v3 = sub_10000C05C();
      sub_10001E8D8(v3, (uint64_t)qword_10012CBB0);
      sub_100015900();
      v4 = sub_10001DFD4();
      if (sub_100018370(v4))
      {
        v5 = (float *)sub_10001ABF8();
        v6 = sub_100018B98(v5, 1.5047e-36);
        v7 = sub_1000158F8((uint64_t)v6, "processIdentifier");
        sub_10001C76C(v7, v8, v9, v10, v11, v12, v13, v14, v61, v62, SHIDWORD(v62), v63);

        sub_10001AE0C((void *)&_mh_execute_header, v15, v16, "Client with pid %d has privileged and observing entitlement. Exporting LNTranscriptXPCPrivilegedObservingInterface");
        sub_1000133FC((uint64_t)v5);

      }
      else
      {

      }
      v59 = (void *)LNTranscriptXPCPrivilegedObservingInterface();
    }
    else
    {
      if (qword_100127CB8 != -1)
        swift_once(&qword_100127CB8, sub_100041AAC);
      v31 = sub_10000C05C();
      sub_10001E8D8(v31, (uint64_t)qword_10012CBB0);
      sub_100015900();
      v32 = sub_10001DFD4();
      if (sub_100018370(v32))
      {
        v33 = (float *)sub_10001ABF8();
        v34 = sub_100018B98(v33, 1.5047e-36);
        v35 = sub_1000158F8((uint64_t)v34, "processIdentifier");
        sub_10001C76C(v35, v36, v37, v38, v39, v40, v41, v42, v61, v62, SHIDWORD(v62), v63);

        sub_10001AE0C((void *)&_mh_execute_header, v43, v44, "Client with pid %d has privileged entitlement. Exporting LNTranscriptXPCPrivilegedInterface");
        sub_1000133FC((uint64_t)v33);

      }
      else
      {

      }
      v59 = (void *)LNTranscriptXPCPrivilegedInterface();
    }
  }
  else if ((v2 & 1) != 0)
  {
    if (qword_100127CB8 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v17 = sub_10000C05C();
    sub_10001E8D8(v17, (uint64_t)qword_10012CBB0);
    sub_100015900();
    v18 = sub_10001DFD4();
    if (sub_100018370(v18))
    {
      v19 = (float *)sub_10001ABF8();
      v20 = sub_100018B98(v19, 1.5047e-36);
      v21 = sub_1000158F8((uint64_t)v20, "processIdentifier");
      sub_10001C76C(v21, v22, v23, v24, v25, v26, v27, v28, v61, v62, SHIDWORD(v62), v63);

      sub_10001AE0C((void *)&_mh_execute_header, v29, v30, "Client with pid %d has observing entitlement. Exporting LNTranscriptXPCObservingInterface");
      sub_1000133FC((uint64_t)v19);

    }
    else
    {

    }
    v59 = (void *)LNTranscriptXPCObservingInterface();
  }
  else
  {
    if (qword_100127CB8 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v45 = sub_10000C05C();
    sub_10001E8D8(v45, (uint64_t)qword_10012CBB0);
    sub_100015900();
    v46 = sub_10001DFD4();
    if (sub_100018370(v46))
    {
      v47 = (float *)sub_10001ABF8();
      v48 = sub_100018B98(v47, 1.5047e-36);
      v49 = sub_1000158F8((uint64_t)v48, "processIdentifier");
      sub_10001C76C(v49, v50, v51, v52, v53, v54, v55, v56, v61, v62, SHIDWORD(v62), v63);

      sub_10001AE0C((void *)&_mh_execute_header, v57, v58, "Client with pid %d lacks privileged or observing entitlement. Exporting LNTranscriptXPCInterface");
      sub_1000133FC((uint64_t)v47);

    }
    else
    {

    }
    v59 = (void *)LNTranscriptXPCInterface();
  }
  return v59;
}

uint64_t sub_100042A1C(uint64_t a1, uint64_t a2)
{
  Class isa;

  sub_10000795C(0, (unint64_t *)&qword_10012AD40, NSNumber_ptr);
  isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  LOBYTE(a2) = sub_10000DEC8(a1, a2, isa);

  return a2 & 1;
}

void sub_100042A98(uint64_t a1)
{
  id v1;

  if ((sub_10001F578(a1, 0x80000001000F3E60) & 1) != 0)
    v1 = (id)LNNextActionObserverXPCInterface();
  sub_10000BFBC();
}

uint64_t sub_100042ADC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id v3;
  uint64_t result;

  v3 = objc_msgSend(objc_allocWithZone((Class)LNWeakProxy), "initWithValue:", v1);
  result = sub_10001BE7C(&qword_1001293E0);
  a1[3] = result;
  *a1 = v3;
  return result;
}

void sub_100042B2C(void *a1, void *a2, void *aBlock)
{
  id v6;

  _Block_copy(aBlock);
  v6 = sub_100041B50();
  sub_10004AC44((uint64_t)a1, 4u);
  _Block_copy(aBlock);
  sub_100042C04((uint64_t)v6, a2, a1, (void (**)(_QWORD, _QWORD))aBlock);
  sub_1000B3FB0();

  swift_release();
  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_100042C04(uint64_t a1, void *a2, void *a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  double v29;
  void (*v30)(char *, uint64_t);
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void **v37;
  void (**v38)(_QWORD, _QWORD);
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  NSObject **v48;
  NSObject *v49;
  NSObject **v50;
  uint8_t *v51;
  uint8_t *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t *v58;
  id v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  _QWORD *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  NSObject **v80;
  NSObject *v81;
  NSObject **v82;
  uint8_t *v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  NSObject *v97;
  uint8_t *v98;
  unint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint8_t *v105;
  void (**v106)(_QWORD, _QWORD);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  uint64_t v112;

  v106 = a4;
  v7 = type metadata accessor for Logger(0);
  v108 = *(_QWORD *)(v7 - 8);
  v109 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v104 = (char *)&v102 - v12;
  v13 = __chkstk_darwin(v11);
  v105 = (uint8_t *)&v102 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v102 - v15;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100042A1C(0xD000000000000025, 0x80000001000F3E90);
  v107 = v4;
  if ((v21 & 1) == 0)
  {
    v22 = sub_10006052C();
    if (!v23)
    {
      v71 = qword_100127CB8;
      v72 = a2;
      if (v71 != -1)
        swift_once(&qword_100127CB8, sub_100041AAC);
      v73 = v109;
      v74 = sub_100012A40(v109, (uint64_t)qword_10012CBB0);
      v75 = v108;
      (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v10, v74, v73);

      v76 = a3;
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v78))
      {
        v79 = (uint8_t *)swift_slowAlloc(12, -1);
        v80 = (NSObject **)swift_slowAlloc(8, -1);
        v105 = v79;
        *(_DWORD *)v79 = 138412290;
        v111 = v76;
        v81 = v76;
        v75 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
        *v80 = v76;
        v82 = v80;

        v83 = v105;
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Client lacks application-identifier entitlement. Failed to record %@", v105, 0xCu);
        sub_10001BE7C(&qword_100128160);
        swift_arrayDestroy(v82, 1);
        swift_slowDealloc(v82, -1, -1);
        swift_slowDealloc(v83, -1, -1);
      }
      else
      {

        v77 = v76;
      }
      v38 = v106;

      (*(void (**)(char *, uint64_t))(v75 + 8))(v10, v109);
      v99 = sub_10004BA8C();
      v85 = swift_allocError(&type metadata for TranscriptError, v99, 0, 0);
      v87 = v85;
      v88 = 3;
      goto LABEL_33;
    }
    sub_10004B8CC(v22, v23, a3);
    objc_msgSend(a3, "setSource:", 1);
  }
  v24 = sub_10004B86C(a3);
  if (!v25)
  {
    v39 = qword_100127CB8;
    v40 = a2;
    if (v39 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v41 = v109;
    v42 = sub_100012A40(v109, (uint64_t)qword_10012CBB0);
    v43 = v108;
    (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v16, v42, v41);

    v44 = a3;
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = (NSObject **)swift_slowAlloc(8, -1);
      v105 = v47;
      *(_DWORD *)v47 = 138412290;
      v111 = v44;
      v49 = v44;
      v43 = v108;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      *v48 = v44;
      v50 = v48;

      v51 = v105;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "No bundle identifier set. Failed to record %@", v105, 0xCu);
      sub_10001BE7C(&qword_100128160);
      swift_arrayDestroy(v50, 1);
      swift_slowDealloc(v50, -1, -1);
      v52 = v51;
      v41 = v109;
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {

      v45 = v44;
    }
    v38 = v106;

    (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v41);
    v84 = sub_10004BA8C();
    v85 = swift_allocError(&type metadata for TranscriptError, v84, 0, 0);
    v87 = v85;
    v88 = 2;
    goto LABEL_33;
  }
  v26 = v24;
  v27 = v25;
  v28 = objc_msgSend(a3, "executionDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v29 = Date.timeIntervalSinceNow.getter();
  v30 = *(void (**)(char *, uint64_t))(v18 + 8);
  v30(v20, v17);
  if (v29 >= 5.0)
  {
    v104 = (char *)v30;
    swift_bridgeObjectRelease(v27);
    v53 = qword_100127CB8;
    v54 = a2;
    v55 = v108;
    if (v53 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v56 = v109;
    v57 = sub_100012A40(v109, (uint64_t)qword_10012CBB0);
    v58 = v105;
    (*(void (**)(uint8_t *, uint64_t, uint64_t))(v55 + 16))(v105, v57, v56);

    v59 = a3;
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = swift_slowAlloc(22, -1);
      v63 = (_QWORD *)swift_slowAlloc(8, -1);
      v103 = swift_slowAlloc(32, -1);
      v111 = v103;
      *(_DWORD *)v62 = 136315394;
      v64 = objc_msgSend(v59, "executionDate", v62 + 4);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100025AFC((unint64_t *)&unk_100129440, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v17, v65);
      v68 = v67;
      ((void (*)(char *, uint64_t))v104)(v20, v17);
      v110 = sub_10000FBEC(v66, v68, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);

      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v62 + 12) = 2112;
      v110 = (uint64_t)v59;
      v69 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);
      *v63 = v59;

      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Expected execution date to be recent, found %s. Discarding %@.", (uint8_t *)v62, 0x16u);
      sub_10001BE7C(&qword_100128160);
      swift_arrayDestroy(v63, 1);
      swift_slowDealloc(v63, -1, -1);
      v70 = v103;
      swift_arrayDestroy(v103, 1);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v62, -1, -1);

      (*(void (**)(uint8_t *, uint64_t))(v108 + 8))(v105, v109);
    }
    else
    {

      (*(void (**)(uint8_t *, uint64_t))(v55 + 8))(v58, v56);
    }
    v38 = v106;
    goto LABEL_32;
  }
  swift_bridgeObjectRetain(v27);
  v31 = sub_100048BC8(v26, v27);
  v33 = v32;
  v35 = v34;
  swift_bridgeObjectRelease_n(v27, 2);
  v36 = v108;
  if (!v33)
  {
    v89 = qword_100127CB8;
    v90 = a2;
    if (v89 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v91 = v109;
    v92 = sub_100012A40(v109, (uint64_t)qword_10012CBB0);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v104, v92, v91);

    v93 = a3;
    v94 = Logger.logObject.getter(v93);
    v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, v95))
    {
      v96 = (uint8_t *)swift_slowAlloc(12, -1);
      v105 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v96 = 138412290;
      v111 = v93;
      v97 = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      v98 = v105;
      *(_QWORD *)v105 = v93;

      _os_log_impl((void *)&_mh_execute_header, v94, v95, "Stream reference nil. Failed to record %@", v96, 0xCu);
      sub_10001BE7C(&qword_100128160);
      swift_arrayDestroy(v98, 1);
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v96, -1, -1);
    }
    else
    {

      v94 = v93;
    }
    v38 = v106;

    (*(void (**)(char *, uint64_t))(v36 + 8))(v104, v109);
LABEL_32:
    v100 = sub_10004BA8C();
    v85 = swift_allocError(&type metadata for TranscriptError, v100, 0, 0);
    v87 = v85;
    v88 = 1;
LABEL_33:
    *v86 = v88;
    v101 = (void *)_convertErrorToNSError(_:)(v85);
    ((void (**)(_QWORD, void *))v38)[2](v38, v101);

    swift_errorRelease(v87);
    goto LABEL_34;
  }
  v37 = (void **)sub_1000425F0(v31, v33, v35);
  sub_100043670(a3, v37, 0.0);
  swift_bridgeObjectRelease(v37);
  v38 = v106;
  v106[2](v106, 0);

  swift_bridgeObjectRelease(v33);
LABEL_34:
  _Block_release(v38);
}

void sub_100043670(void *a1, void **a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  char *v14;
  _QWORD *v15;
  void **v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  id v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  __n128 v42;
  unint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __n128 v52;
  void (*v53)(_QWORD, _QWORD, _QWORD, __n128);
  Class isa;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  char *v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  void **v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint8_t *v88;
  unint64_t v89;
  char *v90;
  __n128 v91;
  void (*v92)(_QWORD, _QWORD, _QWORD, __n128);
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint8_t *v96;
  uint64_t v97[3];
  uint64_t v98;
  uint64_t v99;

  v6 = type metadata accessor for Notification(0);
  v94 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (uint8_t *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v79 - v10;
  v80 = a1;
  v12 = (uint64_t)objc_msgSend(a1, "asBMAppIntentInvocation");
  if (qword_100127CB0 != -1)
    goto LABEL_40;
  while (1)
  {
    v96 = v9;
    v13 = objc_msgSend((id)qword_100128FD0, "source");
    v79 = (id)v12;
    objc_msgSend(v13, "sendEvent:", v12);

    v14 = (char *)a2[2];
    v15 = _swiftEmptyArrayStorage;
    if (v14)
    {
      swift_bridgeObjectRetain(a2);
      v95 = (char *)a2;
      v16 = a2 + 6;
      v17 = v14;
      v18 = (uint64_t)v80;
      do
      {
        v19 = (uint64_t)*(v16 - 2);
        v20 = (unint64_t)*(v16 - 1);
        v21 = *v16;
        v16 += 3;
        swift_bridgeObjectRetain(v20);
        v22 = v21;
        sub_1000496C8(v18, v19, v20, v22, a3);

        swift_bridgeObjectRelease(v20);
        --v17;
      }
      while (v17);
      v23 = v95;
      swift_bridgeObjectRelease(v95);
      v97[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_10001573C();
      v15 = (_QWORD *)v97[0];
      v24 = (uint64_t *)(v23 + 40);
      do
      {
        v26 = *(v24 - 1);
        v25 = *v24;
        v97[0] = (uint64_t)v15;
        v28 = v15[2];
        v27 = v15[3];
        swift_bridgeObjectRetain(v25);
        if (v28 >= v27 >> 1)
        {
          sub_10001573C();
          v15 = (_QWORD *)v97[0];
        }
        v24 += 3;
        v15[2] = v28 + 1;
        v29 = &v15[2 * v28];
        v29[4] = v26;
        v29[5] = v25;
        --v14;
      }
      while (v14);
    }
    if (qword_100127CB8 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v93 = type metadata accessor for Logger(0);
    v9 = (uint8_t *)sub_100012A40(v93, (uint64_t)qword_10012CBB0);
    v30 = swift_bridgeObjectRetain_n(v15, 2);
    v12 = Logger.logObject.getter(v30);
    v31 = static os_log_type_t.default.getter();
    v32 = os_log_type_enabled((os_log_t)v12, v31);
    a2 = (void **)&type metadata for Any;
    v83 = v15;
    if (v32)
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v97[0] = v33;
      *(_DWORD *)v9 = 136315138;
      v95 = (char *)(v9 + 4);
      v34 = swift_bridgeObjectRetain(v15);
      v35 = Array.description.getter(v34);
      v37 = v36;
      swift_bridgeObjectRelease(v83);
      v38 = v35;
      v15 = v83;
      v98 = sub_10000FBEC(v38, v37, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99);
      swift_bridgeObjectRelease_n(v15, 2);
      v39 = v37;
      a2 = (void **)&type metadata for Any;
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v12, v31, "Wrote action record to streams %s", v9, 0xCu);
      swift_arrayDestroy(v33, 1);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v15, 2);
    }
    v40 = *(_QWORD **)(v81 + OBJC_IVAR____TtC10LinkDaemon10Transcript_observers);
    v87 = v40[2];
    if (!v87)
      break;
    v41 = v15[2];
    v85 = v40 + 4;
    v86 = v41;
    v42 = swift_bridgeObjectRetain(v40);
    v43 = 0;
    v84 = (void **)(v15 + 5);
    v42.n128_u64[0] = 136315138;
    v91 = v42;
    v90 = (char *)&type metadata for Any + 8;
    v44 = v96;
    v82 = v40;
    while (v43 < v40[2])
    {
      v89 = v43;
      v95 = (char *)*sub_10000E858(&v85[5 * v43], v85[5 * v43 + 3]);
      swift_bridgeObjectRetain(v15);
      v45 = v86;
      v98 = Set.init(minimumCapacity:)(v86, &type metadata for String, &protocol witness table for String);
      a2 = v84;
      for (i = v45; i; --i)
      {
        v47 = (uint64_t)*(a2 - 1);
        v48 = (uint64_t)*a2;
        swift_bridgeObjectRetain(*a2);
        sub_10001161C(v97, v47, v48);
        swift_bridgeObjectRelease(v97[1]);
        a2 += 2;
      }
      swift_bridgeObjectRelease(v15);
      v12 = v98;
      v9 = (uint8_t *)sub_1000938C4(v98, (uint64_t)&_swiftEmptySetSingleton);
      swift_bridgeObjectRelease(v12);
      v49 = *((_QWORD *)v9 + 2);
      if (v49)
      {
        v50 = v94;
        v51 = (char *)&v9[(*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80)];
        v88 = v9;
        v52 = swift_bridgeObjectRetain(v9);
        a2 = *(void ***)(v50 + 72);
        v53 = *(void (**)(_QWORD, _QWORD, _QWORD, __n128))(v50 + 16);
        v92 = v53;
        do
        {
          v53(v11, v51, v6, v52);
          isa = Notification._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v95, "postNotification:", isa);

          if (qword_100127E70 != -1)
            swift_once(&qword_100127E70, sub_100090544);
          sub_100012A40(v93, (uint64_t)qword_10012D0C8);
          v55 = ((uint64_t (*)(uint8_t *, char *, uint64_t))v53)(v44, v11, v6);
          v56 = Logger.logObject.getter(v55);
          v57 = static os_log_type_t.default.getter();
          v12 = v57;
          if (os_log_type_enabled(v56, v57))
          {
            v58 = v11;
            v59 = a2;
            v60 = swift_slowAlloc(12, -1);
            v61 = swift_slowAlloc(32, -1);
            v97[0] = v61;
            *(_DWORD *)v60 = v91.n128_u32[0];
            v62 = Notification.description.getter();
            v64 = v63;
            *(_QWORD *)(v60 + 4) = sub_10000FBEC(v62, v63, v97);
            swift_bridgeObjectRelease(v64);
            v9 = *(uint8_t **)(v94 + 8);
            ((void (*)(uint8_t *, uint64_t))v9)(v96, v6);
            _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v12, "Sent transcript notification %s", (uint8_t *)v60, 0xCu);
            swift_arrayDestroy(v61, 1);
            v65 = v61;
            v44 = v96;
            swift_slowDealloc(v65, -1, -1);
            v66 = v60;
            a2 = v59;
            v11 = v58;
            v53 = v92;
            swift_slowDealloc(v66, -1, -1);
          }
          else
          {
            v9 = *(uint8_t **)(v94 + 8);
            ((void (*)(uint8_t *, uint64_t))v9)(v44, v6);
          }

          ((void (*)(char *, uint64_t))v9)(v11, v6);
          v51 = (char *)a2 + (_QWORD)v51;
          --v49;
        }
        while (v49);
        swift_bridgeObjectRelease_n(v88, 2);
        v15 = v83;
        v40 = v82;
      }
      else
      {
        swift_bridgeObjectRelease(v9);
      }
      v43 = v89 + 1;
      if (v89 + 1 == v87)
      {
        swift_bridgeObjectRelease(v15);
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_40:
    swift_once(&qword_100127CB0, sub_100041A14);
  }
  v40 = v15;
LABEL_32:
  swift_bridgeObjectRelease(v40);
  v67 = v81 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections;
  swift_beginAccess(v81 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections, v97, 0, 0);
  v68 = v80;
  if (*(_QWORD *)(*(_QWORD *)v67 + 16))
  {
    v69 = objc_msgSend(v80, "actionOutput");
    if (v69)
    {
      v70 = v69;
      v71 = objc_msgSend(v69, "nextAction");

      if (v71)
      {
        v72 = sub_10004B86C(v68);
        if (v73)
        {
          v74 = v72;
          v75 = v73;
          v76 = sub_100048894();
          v77 = v71;
          v78 = v68;
          swift_bridgeObjectRetain(v75);
          sub_100047368(v76, v77, v78, v74, v75);
          swift_bridgeObjectRelease(v76);
          swift_bridgeObjectRelease(v75);
        }

      }
    }
  }

}

void sub_100043EC0(uint64_t a1, void *a2, uint64_t a3, char *a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  uint64_t v14;

  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a5);
  v13 = sub_100041B50();
  static OSSignpostID.exclusive.getter();
  sub_10009705C();
  _Block_copy(a5);
  sub_10004402C(a1, a2, a4, v13, (void (**)(_QWORD, _QWORD))a5);
  sub_1000B3FB0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);

  _Block_release(a5);
  _Block_release(a5);
}

void sub_10004402C(uint64_t a1, void *a2, char *a3, NSObject *a4, void (**a5)(_QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void (**v30)(_QWORD, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  NSObject *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  NSObject *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  NSObject *v74;
  char *v75;
  id v76;
  id v77;
  uint64_t v78;
  double v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  char *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  void **v91;
  id v92;
  uint64_t v93;
  double v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  objc_class *v108;
  id v109;
  NSObject *v110;
  objc_class *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  objc_class *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  id v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  NSObject *v129;
  os_log_type_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  id v143;
  NSObject *v144;
  unint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  void *v148;
  unint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  NSObject *v157;
  os_log_type_t v158;
  uint8_t *v159;
  _QWORD *v160;
  NSObject *v161;
  NSObject *v162;
  uint8_t *v163;
  unint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  void *v167;
  void (*v168)(uint64_t, uint64_t);
  uint64_t v169;
  char *v170;
  uint64_t v171;
  NSObject *v172;
  void (**v173)(_QWORD, _QWORD);
  uint64_t v174;
  id v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  NSObject *v181;
  uint64_t v182;

  v172 = a4;
  v173 = a5;
  v175 = a2;
  v176 = a3;
  v174 = a1;
  v171 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v7 = (char *)&v168 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v177 = v8;
  v178 = v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v168 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v168 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v168 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v168 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v168 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v168 - v25;
  sub_10000795C(0, &qword_100128D18, NSKeyedUnarchiver_ptr);
  v27 = sub_10000795C(0, (unint64_t *)&unk_100129430, LNTranscriptActionRecord_ptr);
  v28 = v179;
  v29 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v27, v174, v175, v27);
  v179 = v28;
  if (!v28)
  {
    v170 = v18;
    v174 = (uint64_t)v7;
    if (!v29)
      goto LABEL_3;
    v175 = v29;
    v44 = sub_10004B86C(v29);
    v46 = v176;
    if (v45)
    {
      v47 = v44;
      v48 = v45;
      swift_bridgeObjectRetain(v45);
      v49 = sub_10006052C();
      if (v50)
      {
        v51 = v50;
        v52 = v47 == v49 && v48 == v50;
        v169 = v47;
        if (v52)
        {
          swift_bridgeObjectRelease(v48);
          swift_bridgeObjectRelease(v51);
          v54 = v177;
          goto LABEL_28;
        }
        v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, v49, v50, 0);
        swift_bridgeObjectRelease(v48);
        swift_bridgeObjectRelease(v51);
        v54 = v177;
        if ((v53 & 1) != 0)
        {
LABEL_28:
          v76 = v175;
          if (objc_msgSend(v175, "source") == 1)
          {
            v77 = objc_msgSend(v76, "executionDate");
            v78 = v174;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v79 = Date.timeIntervalSinceNow.getter();
            v80 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
            v81 = v171;
            v80(v78, v171);
            if (v79 < 5.0)
            {
              v82 = v176;
              swift_bridgeObjectRetain(v48);
              v83 = sub_100048BC8(v169, v48);
              v85 = v84;
              v87 = v86;
              swift_bridgeObjectRelease_n(v48, 2);
              if (v85)
              {
                v88 = sub_1000425F0(v83, v85, v87);
                v89 = v78;
                v90 = v175;
                v91 = (void **)v88;
                v92 = objc_msgSend(v175, "executionDate");
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                v94 = Date.timeIntervalSinceReferenceDate.getter(v93);
                v80(v89, v171);
                sub_100043670(v90, v91, v94);
                swift_bridgeObjectRelease(v91);
                v30 = v173;
                v173[2](v173, 0);

                swift_bridgeObjectRelease(v85);
                goto LABEL_8;
              }
              v151 = qword_100127CB8;
              v152 = v82;
              if (v151 != -1)
                swift_once(&qword_100127CB8, sub_100041AAC);
              v153 = v177;
              v154 = sub_100012A40(v177, (uint64_t)qword_10012CBB0);
              v155 = v178;
              v156 = v170;
              (*(void (**)(char *, uint64_t, uint64_t))(v178 + 16))(v170, v154, v153);

              v60 = v175;
              v157 = Logger.logObject.getter(v60);
              v158 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v157, v158))
              {
                v159 = (uint8_t *)swift_slowAlloc(12, -1);
                v160 = (_QWORD *)swift_slowAlloc(8, -1);
                *(_DWORD *)v159 = 138412290;
                v181 = v60;
                v161 = v60;
                v162 = v60;
                v153 = v177;
                v155 = v178;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182);
                *v160 = v175;

                v60 = v161;
                _os_log_impl((void *)&_mh_execute_header, v157, v158, "Stream reference nil. Failed to record %@.", v159, 0xCu);
                sub_10001BE7C(&qword_100128160);
                swift_arrayDestroy(v160, 1);
                swift_slowDealloc(v160, -1, -1);
                v163 = v159;
                v156 = v170;
                swift_slowDealloc(v163, -1, -1);
              }
              else
              {

                v157 = v60;
              }
              v30 = v173;

              (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v153);
              v164 = sub_10004BA8C();
              v165 = swift_allocError(&type metadata for TranscriptError, v164, 0, 0);
              *v166 = 1;
              v167 = (void *)_convertErrorToNSError(_:)(v165);
              ((void (**)(_QWORD, void *))v30)[2](v30, v167);

              v102 = v165;
LABEL_37:
              swift_errorRelease(v102);

              goto LABEL_8;
            }
            swift_bridgeObjectRelease(v48);
            v123 = qword_100127CB8;
            v124 = v176;
            if (v123 != -1)
              swift_once(&qword_100127CB8, sub_100041AAC);
            v125 = v177;
            v126 = sub_100012A40(v177, (uint64_t)qword_10012CBB0);
            v127 = v178;
            v128 = v21;
            (*(void (**)(char *, uint64_t, uint64_t))(v178 + 16))(v21, v126, v125);

            v109 = v175;
            v129 = Logger.logObject.getter(v109);
            v130 = static os_log_type_t.error.getter();
            v131 = v130;
            if (os_log_type_enabled(v129, v130))
            {
              v132 = swift_slowAlloc(22, -1);
              v176 = v128;
              v133 = v81;
              v134 = v132;
              v135 = swift_slowAlloc(8, -1);
              v168 = v80;
              v136 = (_QWORD *)v135;
              v172 = swift_slowAlloc(32, -1);
              v181 = v172;
              *(_DWORD *)v134 = 136315394;
              v169 = v134 + 4;
              v137 = objc_msgSend(v109, "executionDate");
              v138 = v174;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              sub_100025AFC((unint64_t *)&unk_100129440, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
              v140 = dispatch thunk of CustomStringConvertible.description.getter(v133, v139);
              LODWORD(v170) = v131;
              v142 = v141;
              v168(v138, v133);
              v180 = sub_10000FBEC(v140, v142, (uint64_t *)&v181);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);

              swift_bridgeObjectRelease(v142);
              *(_WORD *)(v134 + 12) = 2112;
              v180 = (uint64_t)v109;
              v143 = v109;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);
              *v136 = v175;

              _os_log_impl((void *)&_mh_execute_header, v129, (os_log_type_t)v170, "Expected execution date to be recent, found %s. Discarding %@.", (uint8_t *)v134, 0x16u);
              sub_10001BE7C(&qword_100128160);
              swift_arrayDestroy(v136, 1);
              swift_slowDealloc(v136, -1, -1);
              v144 = v172;
              swift_arrayDestroy(v172, 1);
              swift_slowDealloc(v144, -1, -1);
              swift_slowDealloc(v134, -1, -1);

              (*(void (**)(char *, uint64_t))(v127 + 8))(v176, v177);
            }
            else
            {

              (*(void (**)(char *, uint64_t))(v127 + 8))(v128, v125);
            }
            v30 = v173;
            v149 = sub_10004BA8C();
            v146 = swift_allocError(&type metadata for TranscriptError, v149, 0, 0);
            *v150 = 1;
            v148 = (void *)_convertErrorToNSError(_:)(v146);
          }
          else
          {
            swift_bridgeObjectRelease(v48);
            v103 = qword_100127CB8;
            v104 = v46;
            if (v103 != -1)
              swift_once(&qword_100127CB8, sub_100041AAC);
            v105 = v54;
            v106 = sub_100012A40(v54, (uint64_t)qword_10012CBB0);
            v107 = v24;
            (*(void (**)(char *, uint64_t, uint64_t))(v178 + 16))(v24, v106, v54);

            v108 = (objc_class *)v175;
            v109 = v175;
            v110 = Logger.logObject.getter(v109);
            v111 = v108;
            v112 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v110, v112))
            {
              v113 = swift_slowAlloc(22, -1);
              v176 = v107;
              v114 = v113;
              v172 = swift_slowAlloc(8, -1);
              v174 = swift_slowAlloc(32, -1);
              v181 = v174;
              *(_DWORD *)v114 = 136315394;
              v115 = v111;
              LOWORD(v180) = (unsigned __int16)objc_msgSend(v109, "source");
              type metadata accessor for LNTranscriptActionSource(0);
              v117 = String.init<A>(describing:)(&v180, v116);
              v119 = v118;
              v180 = sub_10000FBEC(v117, v118, (uint64_t *)&v181);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);

              swift_bridgeObjectRelease(v119);
              *(_WORD *)(v114 + 12) = 2112;
              v180 = (uint64_t)v109;
              v120 = v109;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);
              v121 = v172;
              v172->isa = v115;

              _os_log_impl((void *)&_mh_execute_header, v110, v112, "Expected source to be app, found %s. Discarding %@.", (uint8_t *)v114, 0x16u);
              sub_10001BE7C(&qword_100128160);
              swift_arrayDestroy(v121, 1);
              swift_slowDealloc(v121, -1, -1);
              v122 = v174;
              swift_arrayDestroy(v174, 1);
              swift_slowDealloc(v122, -1, -1);
              swift_slowDealloc(v114, -1, -1);

              (*(void (**)(char *, uint64_t))(v178 + 8))(v176, v177);
            }
            else
            {

              (*(void (**)(char *, uint64_t))(v178 + 8))(v107, v105);
            }
            v145 = sub_10004BA8C();
            v146 = swift_allocError(&type metadata for TranscriptError, v145, 0, 0);
            *v147 = 1;
            v148 = (void *)_convertErrorToNSError(_:)(v146);
            v30 = v173;
          }
          ((void (**)(_QWORD, void *))v30)[2](v30, v148);

          swift_errorRelease(v146);
          goto LABEL_8;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v48);
        v54 = v177;
      }
      swift_bridgeObjectRelease(v48);
      v66 = qword_100127CB8;
      v67 = v46;
      if (v66 != -1)
        swift_once(&qword_100127CB8, sub_100041AAC);
      v68 = v54;
      v69 = sub_100012A40(v54, (uint64_t)qword_10012CBB0);
      v70 = v15;
      (*(void (**)(char *, uint64_t, uint64_t))(v178 + 16))(v15, v69, v54);

      v60 = v175;
      v71 = Logger.logObject.getter(v60);
      v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v73 = (uint8_t *)swift_slowAlloc(12, -1);
        v176 = (char *)swift_slowAlloc(8, -1);
        *(_DWORD *)v73 = 138412290;
        v181 = v60;
        v74 = v60;
        v68 = v177;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182);
        v75 = v176;
        *(_QWORD *)v176 = v175;

        _os_log_impl((void *)&_mh_execute_header, v71, v72, "Client lacks application-identifier entitlement. Discarding %@.", v73, 0xCu);
        sub_10001BE7C(&qword_100128160);
        swift_arrayDestroy(v75, 1);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v73, -1, -1);
      }
      else
      {

        v71 = v60;
      }

      (*(void (**)(char *, uint64_t))(v178 + 8))(v70, v68);
      v100 = sub_10004BA8C();
      v96 = swift_allocError(&type metadata for TranscriptError, v100, 0, 0);
      v98 = v96;
      v99 = 3;
    }
    else
    {
      v55 = qword_100127CB8;
      v56 = v176;
      if (v55 != -1)
        swift_once(&qword_100127CB8, sub_100041AAC);
      v57 = v177;
      v58 = sub_100012A40(v177, (uint64_t)qword_10012CBB0);
      v59 = v26;
      (*(void (**)(char *, uint64_t, uint64_t))(v178 + 16))(v26, v58, v57);

      v60 = v175;
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        v63 = (uint8_t *)swift_slowAlloc(12, -1);
        v176 = (char *)swift_slowAlloc(8, -1);
        *(_DWORD *)v63 = 138412290;
        v181 = v60;
        v64 = v60;
        v57 = v177;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182);
        v65 = v176;
        *(_QWORD *)v176 = v175;

        _os_log_impl((void *)&_mh_execute_header, v61, v62, "No bundle identifier set. Failed to record %@.", v63, 0xCu);
        sub_10001BE7C(&qword_100128160);
        swift_arrayDestroy(v65, 1);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v63, -1, -1);
      }
      else
      {

        v61 = v60;
      }

      (*(void (**)(char *, uint64_t))(v178 + 8))(v59, v57);
      v95 = sub_10004BA8C();
      v96 = swift_allocError(&type metadata for TranscriptError, v95, 0, 0);
      v98 = v96;
      v99 = 2;
    }
    *v97 = v99;
    v101 = (void *)_convertErrorToNSError(_:)(v96);
    v30 = v173;
    ((void (**)(_QWORD, void *))v173)[2](v173, v101);

    v102 = v98;
    goto LABEL_37;
  }
  swift_errorRelease(v179);
  v179 = 0;
LABEL_3:
  v30 = v173;
  v31 = v177;
  v32 = v178;
  v33 = qword_100127CB8;
  v34 = v176;
  if (v33 != -1)
    swift_once(&qword_100127CB8, sub_100041AAC);
  v35 = sub_100012A40(v31, (uint64_t)qword_10012CBB0);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v12, v35, v31);

  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Deserialization failed. Failed to record action record.", v39, 2u);
    swift_slowDealloc(v39, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v31);
  v40 = sub_10004BA8C();
  v41 = swift_allocError(&type metadata for TranscriptError, v40, 0, 0);
  *v42 = 1;
  v43 = (void *)_convertErrorToNSError(_:)(v41);
  ((void (**)(_QWORD, void *))v30)[2](v30, v43);

  swift_errorRelease(v41);
LABEL_8:
  _Block_release(v30);
}

void sub_100045110(void *a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  void *v35;
  NSObject *v36;
  _QWORD v37[2];
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44[2];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v37 - v9;
  v42 = sub_100041B50();
  v11 = sub_10006052C();
  if (v12)
  {
    v13 = v12;
    v40 = v11;
    v14 = qword_100127CB8;
    v15 = a1;
    if (v14 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v16 = sub_100012A40(v4, (uint64_t)qword_10012CBB0);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v16, v4);
    v41 = v15;

    v17 = swift_bridgeObjectRetain_n(v13, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v44[0] = v39;
      *(_DWORD *)v20 = 136315138;
      v37[1] = v20 + 4;
      v38 = v20;
      swift_bridgeObjectRetain(v13);
      v21 = v40;
      v43 = sub_10000FBEC(v40, v13, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
      swift_bridgeObjectRelease_n(v13, 3);
      v22 = v19;
      v23 = v38;
      _os_log_impl((void *)&_mh_execute_header, v18, v22, "Transcript read access request from %s", v38, 0xCu);
      v24 = v39;
      swift_arrayDestroy(v39, 1);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
    else
    {

      swift_bridgeObjectRelease_n(v13, 2);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      v21 = v40;
    }
    v36 = sub_1000455EC(v21, v13);
    swift_bridgeObjectRelease(v13);
    ((void (**)(_QWORD, NSObject *, _QWORD))a2)[2](a2, v36, 0);

  }
  else
  {
    v25 = qword_100127CB8;
    v26 = a1;
    if (v25 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v27 = sub_100012A40(v4, (uint64_t)qword_10012CBB0);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v27, v4);

    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Connected client lacks application-identifier in entitlements.", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v32 = sub_10004BA8C();
    v33 = swift_allocError(&type metadata for TranscriptError, v32, 0, 0);
    *v34 = 3;
    v35 = (void *)_convertErrorToNSError(_:)(v33);
    ((void (**)(_QWORD, _QWORD, void *))a2)[2](a2, 0, v35);

    swift_errorRelease(v33);
  }
  _Block_release(a2);
}

NSObject *sub_1000455EC(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  void (*v20)(char *);
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  char *v63;
  id v64;
  NSObject *v65;
  _QWORD v66[2];
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint8_t *v76;
  uint8_t *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v78 = a1;
  v4 = type metadata accessor for String.Encoding(0);
  v71 = *(_QWORD *)(v4 - 8);
  v72 = v4;
  __chkstk_darwin(v4);
  v70 = (char *)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v6);
  v77 = (uint8_t *)v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v68 = (char *)v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v79 = (char *)v66 - v12;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = qword_100127CB8;
  v18 = v2;
  if (v17 != -1)
    swift_once(&qword_100127CB8, sub_100041AAC);
  v19 = sub_100012A40(v13, (uint64_t)qword_10012CBB0);
  v20 = *(void (**)(char *))(v14 + 16);
  v69 = v19;
  v20(v16);
  v76 = v18;

  v21 = swift_bridgeObjectRetain_n(a2, 2);
  v22 = Logger.logObject.getter(v21);
  v75 = v14;
  v23 = v22;
  v24 = static os_log_type_t.default.getter();
  v25 = os_log_type_enabled(v23, v24);
  v74 = v9;
  if (v25)
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v67 = v8;
    v28 = v27;
    v82 = v27;
    *(_DWORD *)v26 = 136315138;
    v66[1] = v26 + 4;
    swift_bridgeObjectRetain(a2);
    v29 = v78;
    v80 = sub_10000FBEC(v78, a2, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Creating sandbox exception for %s...", v26, 0xCu);
    swift_arrayDestroy(v28, 1);
    v30 = v28;
    v8 = v67;
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v75 + 8))(v16, v13);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v16, v13);
    v29 = v78;
  }
  v31 = v77;
  sub_10004940C(v29, a2, (uint64_t)v77);
  v32 = sub_10001C93C((uint64_t)v31, 1, v8);
  v33 = (uint64_t)v79;
  if (v32 == 1)
  {
    sub_1000131A8((uint64_t)v31, &qword_100128740);
    v34 = sub_10004BA8C();
    v35 = swift_allocError(&type metadata for TranscriptError, v34, 0, 0);
    *v36 = 4;
    swift_willThrow(v35);
    return v31;
  }
  v37 = v74;
  (*(void (**)(char *, NSObject *, uint64_t))(v74 + 32))(v79, v31, v8);
  v38 = v73;
  v39 = sub_100041B50();
  if (v38)
  {
LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v33, v8);
    return v31;
  }
  v40 = v39;
  v42 = sub_100012AF0(v33, 0);
  v44 = v43;

  v45 = v70;
  static String.Encoding.utf8.getter();
  v46 = String.data(using:allowLossyConversion:)(v45, 0, v42, v44);
  v48 = v47;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v45, v72);
  if (v48 >> 60 == 15)
  {
    v49 = swift_bridgeObjectRelease(v44);
    v31 = Logger.logObject.getter(v49);
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v50, "Failed to issue sandbox extension: data conversion failed.", v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }

    v52 = sub_10004BA8C();
    v53 = swift_allocError(&type metadata for TranscriptError, v52, 0, 0);
    *v54 = 1;
    swift_willThrow(v53);
    goto LABEL_9;
  }
  v78 = v46;
  swift_bridgeObjectRetain(v44);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc(12, -1);
    v59 = swift_slowAlloc(32, -1);
    v67 = v8;
    v60 = v59;
    v82 = v59;
    v77 = v58;
    *(_DWORD *)v58 = 136315138;
    v76 = v58 + 4;
    swift_bridgeObjectRetain(v44);
    v80 = sub_10000FBEC(v42, v44, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
    swift_bridgeObjectRelease_n(v44, 3);
    v61 = v77;
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Sandbox exception token issued: %s", v77, 0xCu);
    swift_arrayDestroy(v60, 1);
    v62 = v60;
    v8 = v67;
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v61, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v44, 2);
  }
  v63 = v79;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v68, v79, v8);
  v64 = objc_allocWithZone((Class)NSSecurityScopedURLWrapper);
  sub_100012A58();
  v31 = v65;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v63, v8);
  return v31;
}

uint64_t sub_100045C8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v37 = a1;
  swift_errorRetain(a1);
  v2 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v9 = sub_10001B42C(v2, v3, v4, (uint64_t)&type metadata for TranscriptError, v5, v6, v7, v8, v34, v37);
  if ((_DWORD)v9)
  {
    v17 = swift_errorRelease(a1);
    v25 = v35;
  }
  else
  {
    v26 = sub_10004BF7C(v9, v10, v11, v12, v13, v14, v15, v16, v35, v38);
    v17 = sub_10001B42C(v26, v27, v28, (uint64_t)&type metadata for IssueSandboxExceptionError, v29, v30, v31, v32, v36, a1);
    if (!(_DWORD)v17)
    {
      sub_10004BF7C(v17, v18, v19, v20, v21, v22, v23, v24, v35, v38);
      return 0;
    }
    if (BYTE4(v35))
      v25 = 4;
    else
      v25 = 5;
  }
  sub_10004BF7C(v17, v18, v19, v20, v21, v22, v23, v24, v35, v38);
  return v25;
}

void sub_100045D30(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v3;

  v3 = type metadata accessor for Logger(0);
  __chkstk_darwin(v3);
  sub_100049A98(2, (uint64_t)sub_1000389E0, 0);
  a2[2](a2, 0);
  _Block_release(a2);
}

void sub_100046014(NSObject *a1, NSObject *a2, void (**a3)(_QWORD, Class, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  _BYTE *v21;
  id v22;
  char v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t *v41;
  objc_class *v42;
  objc_class *v43;
  unint64_t v44;
  unint64_t isa;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  NSObject **v56;
  NSObject *v57;
  uint64_t v58;
  NSObject *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD);
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  NSObject *v75;
  uint64_t v76;
  NSObject **v77;
  NSObject *v78;
  NSObject *v79;
  NSObject *v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  NSObject *v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  NSObject **v90;
  NSObject *v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  NSObject *v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  NSObject **v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t);
  uint64_t v105;
  NSObject *v106;
  void (**v107)(_QWORD, Class, void *);
  id v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void **v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  BOOL v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  Class v126;
  void *v127;
  const void *v128;
  void (**v129)(_QWORD, Class, void *);
  id v130;
  unint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  Class v134;
  void *v135;
  Class v136;
  const void *v137;
  _BYTE v138[24];
  uint64_t v139;
  id v140;
  void *v141;
  uint64_t v142;
  _BYTE *v143;
  NSObject **v144;
  NSObject *v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v148;
  void (**v149)(_QWORD, Class, _QWORD);
  _BYTE *v150;
  _BYTE *v151;
  __int128 v152;
  uint64_t v153;
  NSObject *v154;
  _BYTE *v155;
  NSObject *v156;
  uint64_t v157;
  NSObject *v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE v161[16];

  v149 = a3;
  v154 = a1;
  v157 = type metadata accessor for Notification(0);
  v142 = *(_QWORD *)(v157 - 8);
  v4 = __chkstk_darwin(v157);
  v6 = &v138[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v138[-v7];
  v9 = type metadata accessor for Logger(0);
  v10 = *(NSObject **)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v138[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __chkstk_darwin(v11);
  v16 = &v138[-v15];
  v17 = __chkstk_darwin(v14);
  v19 = &v138[-v18];
  __chkstk_darwin(v17);
  v21 = &v138[-v20];
  v156 = a2;
  v22 = sub_100041B50();
  v151 = v13;
  *(_QWORD *)&v152 = v21;
  v148 = v19;
  v150 = v16;
  v155 = v8;
  v143 = v6;
  v153 = v9;
  v140 = v22;
  v23 = sub_100042A1C(0xD000000000000025, 0x80000001000F3E90);
  v24 = v154;
  v25 = v156;
  if ((v23 & 1) != 0)
  {
LABEL_4:
    v28 = sub_10004B86C(v24);
    if (v29)
    {
      v30 = v29;
      v151 = *(Class *)((char *)&v25->isa + OBJC_IVAR____TtC10LinkDaemon10Transcript_streamManager);
      v31 = sub_100048BC8(v28, v29);
      v33 = v32;
      v35 = v34;
      swift_bridgeObjectRelease(v30);
      if (v33)
      {
        *(_QWORD *)&v152 = v31;
        v36 = sub_1000425F0(v31, v33, v35);
        v37 = *(_QWORD *)(v36 + 16);
        v38 = _swiftEmptyArrayStorage;
        v139 = v33;
        v141 = v35;
        v147 = v36;
        if (v37)
        {
          v39 = v36;
          v40 = v24;
          v148 = v10;
          v158 = _swiftEmptyArrayStorage;
          sub_10001573C();
          v38 = v158;
          v41 = (uint64_t *)(v39 + 40);
          do
          {
            v43 = (objc_class *)*(v41 - 1);
            v42 = (objc_class *)*v41;
            v158 = v38;
            isa = (unint64_t)v38[2].isa;
            v44 = (unint64_t)v38[3].isa;
            swift_bridgeObjectRetain(v42);
            if (isa >= v44 >> 1)
            {
              sub_10001573C();
              v38 = v158;
            }
            v41 += 3;
            v38[2].isa = (Class)(isa + 1);
            v46 = &v38[2 * isa];
            v46[4].isa = v43;
            v46[5].isa = v42;
            --v37;
          }
          while (v37);
          v35 = v141;
          v10 = v148;
          v24 = v40;
          v25 = v156;
        }
        v58 = qword_100127CB8;
        v59 = v25;
        v60 = v150;
        if (v58 != -1)
          swift_once(&qword_100127CB8, sub_100041AAC);
        v61 = v153;
        v62 = sub_100012A40(v153, (uint64_t)qword_10012CBB0);
        v63 = (void (*)(_QWORD))v10[2].isa;
        v146 = v62;
        v63(v60);
        v154 = v59;

        v64 = v24;
        swift_bridgeObjectRetain_n(v38, 2);
        v65 = v64;
        v66 = v38;
        v67 = Logger.logObject.getter(v65);
        v68 = static os_log_type_t.default.getter();
        v156 = v67;
        v69 = os_log_type_enabled(v67, v68);
        v148 = v66;
        if (v69)
        {
          v70 = swift_slowAlloc(22, -1);
          v144 = (NSObject **)swift_slowAlloc(8, -1);
          v145 = swift_slowAlloc(32, -1);
          v158 = v145;
          *(_DWORD *)v70 = 136315394;
          v71 = swift_bridgeObjectRetain(v66);
          v72 = Array.description.getter(v71);
          v74 = v73;
          swift_bridgeObjectRelease(v66);
          v160 = sub_10000FBEC(v72, v74, (uint64_t *)&v158);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
          swift_bridgeObjectRelease_n(v66, 2);
          swift_bridgeObjectRelease(v74);
          *(_WORD *)(v70 + 12) = 2112;
          v160 = (uint64_t)v65;
          v75 = v65;
          v76 = v153;
          v35 = v141;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
          v77 = v144;
          *v144 = v65;

          v78 = v156;
          _os_log_impl((void *)&_mh_execute_header, v156, v68, "Deleting from streams %s with %@", (uint8_t *)v70, 0x16u);
          sub_10001BE7C(&qword_100128160);
          swift_arrayDestroy(v77, 1);
          swift_slowDealloc(v77, -1, -1);
          v79 = v145;
          swift_arrayDestroy(v145, 1);
          swift_slowDealloc(v79, -1, -1);
          swift_slowDealloc(v70, -1, -1);

          ((void (*)(_BYTE *, uint64_t))v10[1].isa)(v150, v76);
        }
        else
        {

          swift_bridgeObjectRelease_n(v66, 2);
          ((void (*)(_BYTE *, uint64_t))v10[1].isa)(v60, v61);
        }
        v103 = v147;
        v104 = sub_10002745C();
        v106 = v65;
        v113 = v105;
        v114 = *(_QWORD *)(v103 + 16);
        if (v114)
        {
          v115 = (uint64_t)v104;
          v156 = v106;
          swift_bridgeObjectRetain(v103);
          v116 = v103;
          v117 = (void **)(v103 + 48);
          v118 = _swiftEmptyArrayStorage;
          do
          {
            v119 = (uint64_t)*(v117 - 2);
            v120 = (uint64_t)*(v117 - 1);
            v121 = *v117;
            v122 = v119 == (_QWORD)v152 && v139 == v120;
            if (v122
              || (_stringCompareWithSmolCheck(_:_:expecting:)(*(v117 - 2), *(v117 - 1), v152, v139, 0) & 1) != 0)
            {
              swift_bridgeObjectRetain(v120);
              v123 = sub_1000414FC(v119, v120, v121, v115, v113, 1);
              v124 = v118;
              v118 = v123;
            }
            else
            {
              swift_bridgeObjectRetain(v120);
              v124 = sub_1000414FC(v119, v120, v121, v115, v113, 0);
            }

            swift_bridgeObjectRelease(v120);
            swift_bridgeObjectRelease(v124);
            v117 += 3;
            --v114;
          }
          while (v114);
          swift_bridgeObjectRelease(v148);
          swift_bridgeObjectRelease_n(v116, 2);
          v35 = v141;
        }
        else
        {
          swift_bridgeObjectRelease(v103);
          swift_bridgeObjectRelease(v148);
          v118 = _swiftEmptyArrayStorage;
        }
        type metadata accessor for UUID(0);
        swift_bridgeObjectRetain(v118);
        v136 = Array._bridgeToObjectiveC()().super.isa;
        v137 = v149;
        v149[2](v149, v136, 0);
        swift_bridgeObjectRelease_n(v118, 2);
        swift_release();

        swift_bridgeObjectRelease(v139);
        v128 = v137;
        goto LABEL_50;
      }
      v80 = v24;
      v81 = qword_100127CB8;
      v82 = v25;
      if (v81 != -1)
        swift_once(&qword_100127CB8, sub_100041AAC);
      v83 = v153;
      v84 = sub_100012A40(v153, (uint64_t)qword_10012CBB0);
      v85 = v148;
      ((void (*)(NSObject *, uint64_t, uint64_t))v10[2].isa)(v148, v84, v83);

      v86 = v80;
      v87 = Logger.logObject.getter(v86);
      v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v88))
      {
        v89 = (uint8_t *)swift_slowAlloc(12, -1);
        v90 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v89 = 138412290;
        v158 = v86;
        v91 = v86;
        v85 = v148;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159);
        *v90 = v86;

        v83 = v153;
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Stream identifier nil. Failed to delete records with %@", v89, 0xCu);
        sub_10001BE7C(&qword_100128160);
        swift_arrayDestroy(v90, 1);
        swift_slowDealloc(v90, -1, -1);
        swift_slowDealloc(v89, -1, -1);
      }
      else
      {

        v87 = v86;
      }
      v107 = (void (**)(_QWORD, Class, void *))v149;
      v108 = v140;

      ((void (*)(NSObject *, uint64_t))v10[1].isa)(v85, v83);
      v125 = sub_10004BA8C();
      v111 = swift_allocError(&type metadata for TranscriptError, v125, 0, 0);
      v112 = 1;
    }
    else
    {
      v47 = qword_100127CB8;
      v48 = v25;
      if (v47 != -1)
        swift_once(&qword_100127CB8, sub_100041AAC);
      v49 = v153;
      v50 = sub_100012A40(v153, (uint64_t)qword_10012CBB0);
      v51 = v152;
      ((void (*)(_QWORD, uint64_t, uint64_t))v10[2].isa)(v152, v50, v49);

      v52 = v24;
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v56 = (NSObject **)swift_slowAlloc(8, -1);
        v148 = v10;
        *(_DWORD *)v55 = 138412290;
        v158 = v52;
        v57 = v52;
        v49 = v153;
        v10 = v148;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159);
        *v56 = v52;

        _os_log_impl((void *)&_mh_execute_header, v53, v54, "No bundle identifier set. Failed to delete records with %@", v55, 0xCu);
        sub_10001BE7C(&qword_100128160);
        swift_arrayDestroy(v56, 1);
        swift_slowDealloc(v56, -1, -1);
        v51 = v152;
        swift_slowDealloc(v55, -1, -1);
      }
      else
      {

        v53 = v52;
      }
      v107 = (void (**)(_QWORD, Class, void *))v149;
      v108 = v140;

      ((void (*)(uint64_t, uint64_t))v10[1].isa)(v51, v49);
      v109 = sub_10004BA8C();
      v111 = swift_allocError(&type metadata for TranscriptError, v109, 0, 0);
      v112 = 2;
    }
    *v110 = v112;
    type metadata accessor for UUID(0);
    v126 = Array._bridgeToObjectiveC()().super.isa;
    v127 = (void *)_convertErrorToNSError(_:)(v111);
    v107[2](v107, v126, v127);

    swift_errorRelease(v111);
    v128 = v107;
    goto LABEL_50;
  }
  v26 = sub_10006052C();
  if (v27)
  {
    sub_10004B8CC(v26, v27, v24);
    goto LABEL_4;
  }
  v92 = qword_100127CB8;
  v93 = v25;
  if (v92 != -1)
    swift_once(&qword_100127CB8, sub_100041AAC);
  v94 = v153;
  v95 = sub_100012A40(v153, (uint64_t)qword_10012CBB0);
  v96 = v151;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v10[2].isa)(v151, v95, v94);

  v97 = v24;
  v98 = Logger.logObject.getter(v97);
  v99 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v98, v99))
  {
    v100 = (uint8_t *)swift_slowAlloc(12, -1);
    v101 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v100 = 138412290;
    v158 = v97;
    v102 = v97;
    v94 = v153;
    v96 = v151;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159);
    *v101 = v97;

    _os_log_impl((void *)&_mh_execute_header, v98, v99, "Client lacks application-identifier entitlement. Failed to delete records with %@", v100, 0xCu);
    sub_10001BE7C(&qword_100128160);
    swift_arrayDestroy(v101, 1);
    swift_slowDealloc(v101, -1, -1);
    swift_slowDealloc(v100, -1, -1);
  }
  else
  {

    v98 = v97;
  }
  v129 = (void (**)(_QWORD, Class, void *))v149;
  v130 = v140;

  ((void (*)(_BYTE *, uint64_t))v10[1].isa)(v96, v94);
  v131 = sub_10004BA8C();
  v132 = swift_allocError(&type metadata for TranscriptError, v131, 0, 0);
  *v133 = 3;
  type metadata accessor for UUID(0);
  v134 = Array._bridgeToObjectiveC()().super.isa;
  v135 = (void *)_convertErrorToNSError(_:)(v132);
  v129[2](v129, v134, v135);

  swift_errorRelease(v132);
  v128 = v129;
LABEL_50:
  _Block_release(v128);
}

void sub_100047368(unint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  unint64_t v19;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v19 = v5 & 0xC000000000000001;
    v7 = 4;
    while (1)
    {
      if (v19)
      {
        v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5);
      }
      else
      {
        v8 = *(void **)(v5 + 8 * v7);
        swift_unknownObjectRetain(v8);
      }
      v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v10 = objc_msgSend(a3, "action");
      v11 = String._bridgeToObjectiveC()();
      v12 = objc_msgSend(a3, "actionOutput");
      if (v12)
      {
        v13 = v5;
        v14 = v6;
        sub_10004B91C(v12);
        if (v15)
        {
          v16 = v15;
          v17 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v16);
        }
        else
        {
          v17 = 0;
        }
        v6 = v14;
        v5 = v13;
      }
      else
      {
        v17 = 0;
      }
      objc_msgSend(v8, "didReceiveNextAction:baseAction:forAppWithBundleIdentifier:associatedLiveActivityIdentifier:", a2, v10, v11, v17);
      swift_unknownObjectRelease(v8);

      ++v7;
      if (v9 == v6)
        goto LABEL_15;
    }
    __break(1u);
LABEL_17:
    if (v5 < 0)
      v18 = v5;
    else
      v18 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
  }
LABEL_15:

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a5);

}

void sub_100047538(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  void *v8;
  id v9;
  id v10;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  v9 = a3;
  v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);

  sub_100017E38(v10);
}

uint64_t sub_1000475A0()
{
  return sub_100042594();
}

void sub_1000475B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;

  v15 = type metadata accessor for OSSignpostID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)objc_opt_self(NSXPCConnection);
  _Block_copy(a8);
  v20 = objc_msgSend(v19, "currentConnection");
  if (v20)
  {
    v21 = v20;
    v22 = v15;
    static OSSignpostID.exclusive.getter();
    sub_10009705C();
    _Block_copy(a8);
    sub_100047760(a1, a2, a7, a3, a4, a5, (uint64_t)v21, (void (**)(_QWORD, void *))a8);
    sub_1000B3FB0();
    swift_release();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v22);

  }
  _Block_release(a8);
  _Block_release(a8);
}

void sub_100047760(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, double a6, uint64_t a7, void (**a8)(_QWORD, void *))
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  void *v36;
  const void *v37;
  const void *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void **v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  unint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void (**v64)(_QWORD, void *);

  v64 = a8;
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v62 = v15;
  v63 = v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v61 - v20;
  sub_10000795C(0, &qword_100128D18, NSKeyedUnarchiver_ptr);
  v22 = sub_10000795C(0, (unint64_t *)&unk_100129430, LNTranscriptActionRecord_ptr);
  v23 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v22, a1, a2, v22);
  if (v8)
  {
    swift_errorRelease(v8);
LABEL_3:
    v24 = v62;
    v25 = v63;
    v26 = qword_100127CB8;
    v27 = a3;
    if (v26 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v28 = sub_100012A40(v24, (uint64_t)qword_10012CBB0);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v19, v28, v24);

    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Deserialization failed. Failed to record action record.", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v24);
    v33 = sub_10004BA8C();
    v34 = swift_allocError(&type metadata for TranscriptError, v33, 0, 0);
    *v35 = 1;
    v36 = (void *)_convertErrorToNSError(_:)(v34);
    v37 = v64;
    v64[2](v64, v36);

    swift_errorRelease(v34);
    goto LABEL_8;
  }
  if (!v23)
    goto LABEL_3;
  v61 = v23;
  swift_bridgeObjectRetain(a5);
  v39 = sub_100048BC8(a4, a5);
  v41 = v40;
  v43 = v42;
  swift_bridgeObjectRelease(a5);
  if (v41)
  {
    v44 = (void **)sub_1000425F0(v39, v41, v43);
    v45 = v61;
    sub_100043670(v61, v44, a6);
    swift_bridgeObjectRelease(v44);
    v46 = v64;
    v64[2](v64, 0);

    swift_bridgeObjectRelease(v41);
    v38 = v46;
    goto LABEL_9;
  }
  v47 = qword_100127CB8;
  v48 = a3;
  if (v47 != -1)
    swift_once(&qword_100127CB8, sub_100041AAC);
  v49 = v62;
  v50 = sub_100012A40(v62, (uint64_t)qword_10012CBB0);
  v51 = v63;
  v52 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v21, v50, v49);

  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Stream reference nil. Failed to record serialized action record.", v56, 2u);
    swift_slowDealloc(v56, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v49);
  v57 = sub_10004BA8C();
  v58 = swift_allocError(&type metadata for TranscriptError, v57, 0, 0);
  *v59 = 1;
  v60 = (void *)_convertErrorToNSError(_:)(v58);
  v37 = v64;
  v64[2](v64, v60);

  swift_errorRelease(v58);
LABEL_8:
  v38 = v37;
LABEL_9:
  _Block_release(v38);
}

void sub_100047C7C(uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD))
{
  NSObject *v5;

  v5 = sub_1000455EC(a1, a2);
  ((void (**)(_QWORD, NSObject *, _QWORD))a4)[2](a4, v5, 0);

  _Block_release(a4);
}

void sub_100047DBC(void *a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(uint64_t, uint64_t);
  void (**v41)(uint64_t, uint64_t);
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  Class isa;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void (**v52)(_QWORD, _QWORD, _QWORD);
  Class v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  void (*v57)(uint64_t, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  uint64_t v62;
  char *v63;
  void (**v64)(_QWORD, _QWORD, _QWORD);
  void *v65;
  void **aBlock;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;

  v4 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  v5 = __chkstk_darwin(v4);
  v6 = __chkstk_darwin(v5);
  v7 = __chkstk_darwin(v6);
  v62 = (uint64_t)&v54 - v8;
  __chkstk_darwin(v7);
  v61 = (char *)&v54 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v54 - v15;
  v17 = swift_allocObject(&unk_10011B8F0, 24, 7);
  *(_QWORD *)(v17 + 16) = a2;
  v64 = a2;
  _Block_copy(a2);
  v55 = sub_100041B50();
  UUID.init()(v55);
  v60 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v60(v14, v16, v10);
  v18 = *(unsigned __int8 *)(v11 + 80);
  v59 = v17;
  v19 = ((v18 + 24) & ~v18) + v12;
  v20 = (v18 + 24) & ~v18;
  v21 = v18 | 7;
  v56 = v19;
  v22 = swift_allocObject(&unk_10011B918, v19, v18 | 7);
  *(_QWORD *)(v22 + 16) = a1;
  v23 = v22 + v20;
  v63 = v16;
  v24 = v11;
  v58 = v11;
  v25 = v20;
  v26 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 32);
  v26(v23, v14, v10);
  v57 = v26;
  v70 = sub_10004BACC;
  v71 = v22;
  aBlock = _NSConcreteStackBlock;
  v67 = 1107296256;
  v68 = sub_10001FF18;
  v69 = &unk_10011B930;
  v27 = _Block_copy(&aBlock);
  v28 = a1;
  swift_release();
  v29 = v55;
  objc_msgSend(v55, "setInvalidationHandler:", v27);
  _Block_release(v27);
  v60(v14, v63, v10);
  v30 = swift_allocObject(&unk_10011B968, v19, v21);
  *(_QWORD *)(v30 + 16) = v28;
  v26(v30 + v25, v14, v10);
  v70 = sub_10004BACC;
  v71 = v30;
  aBlock = _NSConcreteStackBlock;
  v67 = 1107296256;
  v68 = sub_10001FF18;
  v69 = &unk_10011B980;
  v31 = _Block_copy(&aBlock);
  v32 = v28;
  swift_release();
  objc_msgSend(v29, "setInterruptionHandler:", v31);
  _Block_release(v31);
  __chkstk_darwin(v33);
  *(&v54 - 2) = (uint64_t)v63;
  *(&v54 - 1) = (uint64_t)v29;
  sub_1000423B8((void (*)(uint64_t))sub_10004BB68, (uint64_t)(&v54 - 4));
  v34 = v60;
  v60(v14, v63, v10);
  v35 = (v56 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = v29;
  v37 = swift_allocObject(&unk_10011B9B8, v35 + 16, v21);
  *(_QWORD *)(v37 + 16) = v32;
  v38 = v37 + v25;
  v39 = v63;
  v40 = (void (*)(uint64_t, uint64_t))v59;
  v57(v38, v14, v10);
  v41 = (void (**)(uint64_t, uint64_t))(v37 + v35);
  *v41 = sub_10004BA84;
  v41[1] = v40;
  v70 = sub_10004BBE0;
  v71 = v37;
  aBlock = _NSConcreteStackBlock;
  v67 = 1107296256;
  v68 = sub_100081550;
  v69 = &unk_10011B9D0;
  v42 = _Block_copy(&aBlock);
  v43 = v32;
  swift_retain();
  swift_release();
  v44 = objc_msgSend(v29, "remoteObjectProxyWithErrorHandler:", v42);
  _Block_release(v42);

  _bridgeAnyObjectToAny(_:)(&aBlock, v44);
  swift_unknownObjectRelease(v44);
  v45 = sub_10001BE7C(&qword_100129418);
  swift_dynamicCast(&v65, &aBlock, (char *)&type metadata for Any + 8, v45, 7);
  v46 = v65;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v46, "observationDidStartWithConnectionUUID:", isa);

  v48 = (uint64_t)v61;
  v34(v61, v39, v10);
  sub_100014360(v48, 0, 1, v10);
  v49 = v62;
  sub_100019FA0(v48, v62, (uint64_t *)&unk_1001281C0);
  v50 = sub_10001C93C(v49, 1, v10);
  v51 = v58;
  v52 = v64;
  if (v50 == 1)
  {
    v53 = 0;
  }
  else
  {
    v53 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v10);
  }
  ((void (**)(_QWORD, Class, _QWORD))v52)[2](v52, v53, 0);
  swift_unknownObjectRelease(v46);

  sub_1000131A8(v48, (uint64_t *)&unk_1001281C0);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v10);
  swift_release();
  _Block_release(v52);
}

uint64_t sub_10004841C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];

  v3[2] = a2;
  return sub_1000423B8((void (*)(uint64_t))sub_10004BF78, (uint64_t)v3);
}

uint64_t sub_100048454(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  return sub_100055890();
}

void sub_100048480(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE v14[16];
  uint64_t v15;

  v7 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  __chkstk_darwin(v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = a3;
  sub_1000423B8((void (*)(uint64_t))sub_10004BF78, (uint64_t)v14);
  v10 = type metadata accessor for UUID(0);
  sub_100014360((uint64_t)v9, 1, 1, v10);
  swift_errorRetain(a1);
  LOBYTE(a3) = sub_100045C8C(a1);
  v11 = sub_10004BA8C();
  v12 = swift_allocError(&type metadata for TranscriptError, v11, 0, 0);
  *v13 = a3;
  a4(v9, v12);
  swift_errorRelease(v12);
  sub_1000131A8((uint64_t)v9, (uint64_t *)&unk_1001281C0);
}

void sub_1000485A4(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  a4();
  _Block_release(v6);
  sub_100017E38(v7);
}

void sub_1000485F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  Class isa;
  void *v11;
  uint64_t v12;

  v6 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019FA0(a1, (uint64_t)v8, (uint64_t *)&unk_1001281C0);
  v9 = type metadata accessor for UUID(0);
  isa = 0;
  if (sub_10001C93C((uint64_t)v8, 1, v9) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  if (a2)
    v11 = (void *)_convertErrorToNSError(_:)(a2);
  else
    v11 = 0;
  (*(void (**)(uint64_t, Class, void *))(a3 + 16))(a3, isa, v11);

}

void sub_1000486F0(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  _QWORD v4[4];

  v4[2] = a1;
  sub_1000423B8(sub_10004BA58, (uint64_t)v4);
  a3[2](a3, 0);
  _Block_release(a3);
}

void sub_100048744(uint64_t a1, uint64_t a2)
{

}

uint64_t sub_10004882C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE v6[24];

  v4 = a3 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections;
  swift_beginAccess(a3 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections, v6, 33, 0);
  a1(v4);
  return swift_endAccess(v6);
}

uint64_t sub_100048894()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC10LinkDaemon10Transcript_nextActionObserverConnections);
  swift_beginAccess(v2, v7, 0, 0);
  v3 = *v2;
  swift_bridgeObjectRetain(v3);
  v5 = sub_10004130C(v4);
  swift_bridgeObjectRelease(v3);
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v5;
}

uint64_t sub_100048934(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v2);
  sub_10001765C();
  v5 = v4 - v3;
  sub_100019FA0(a1, v4 - v3, &qword_100128740);
  v6 = sub_1000489D4(0xD000000000000010, 0x80000001000F3FB0, v5);
  sub_1000131A8(a1, &qword_100128740);
  return v6;
}

uint64_t sub_1000489D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  *(_BYTE *)(v3 + 16) = 0;
  v7 = v3 + qword_10012D620;
  v8 = type metadata accessor for URL(0);
  sub_100014360(v7, 1, 1, v8);
  *(_QWORD *)(v3 + qword_10012BE20) = &_swiftEmptyDictionarySingleton;
  v9 = qword_10012BE28;
  v10 = sub_10001BE7C(&qword_10012B3D0);
  v11 = swift_allocObject(v10, 20, 7);
  *(_DWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v3 + v9) = v11;
  v12 = (_QWORD *)(v3 + qword_10012BE10);
  *v12 = a1;
  v12[1] = a2;
  sub_100019FA0(a3, v3 + qword_10012BE18, &qword_100128740);
  sub_100048E40();
  sub_1000131A8(a3, &qword_100128740);
  return v3;
}

uint64_t sub_100048AB8()
{
  uint64_t v0;

  sub_1000131A8(v0 + qword_10012D620, &qword_100128740);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10012BE10 + 8));
  sub_1000131A8(v0 + qword_10012BE18, &qword_100128740);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10012BE20));
  swift_release();
  return v0;
}

uint64_t sub_100048B3C()
{
  uint64_t v0;

  v0 = sub_100048AB8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for TranscriptActionRecordStreamManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100129168;
  if (!qword_100129168)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranscriptActionRecordStreamManager);
  return result;
}

uint64_t sub_100048B94(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 256, 0, v2, a1 + 320);
}

int64_t sub_100048BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  int64_t result;
  _BYTE v24[24];

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v9);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = v2 + qword_10012D620;
  swift_beginAccess(v12, v24, 0, 0);
  sub_100019FA0(v12, (uint64_t)v11, &qword_100128740);
  if (sub_10001C93C((uint64_t)v11, 1, v5))
  {
    sub_1000131A8((uint64_t)v11, &qword_100128740);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  sub_1000131A8((uint64_t)v11, &qword_100128740);
  v14 = URL.path.getter(v13);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNSpecialClassDStreamIdentifier);
  if (v18 == a1 && v17 == a2)
  {
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v20 = v17;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v18, v17, 0);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) == 0)
    {
      sub_10000795C(0, &qword_1001293B0, BMStoreConfig_ptr);
      result = NSPageSize();
      if ((unsigned __int128)(result * (__int128)10) >> 64 == (10 * result) >> 63)
      {
        if (!sub_10004AF10(v14, v16, 10 * result))
          return 0;
LABEL_14:
        swift_bridgeObjectRetain(a2);
        return a1;
      }
      goto LABEL_17;
    }
  }
  sub_10000795C(0, &qword_1001293B0, BMStoreConfig_ptr);
  result = NSPageSize();
  if ((unsigned __int128)(result * (__int128)10) >> 64 == (10 * result) >> 63)
  {
    sub_10004AE88(v14, v16, 10 * result, 4);
    goto LABEL_14;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

void sub_100048E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55[3];
  _BYTE v56[24];
  uint64_t v57;
  _QWORD v58[3];
  char v59[16];

  v1 = v0;
  v2 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v2);
  v54 = (uint64_t)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v53 - v5;
  __chkstk_darwin(v7);
  v9 = (char *)&v53 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v53 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - v14;
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v53 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v53 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v53 - v23;
  *(_BYTE *)(v1 + 16) = 0;
  sub_100019FA0(v1 + qword_10012BE18, (uint64_t)v15, &qword_100128740);
  if (sub_10001C93C((uint64_t)v15, 1, v16) == 1)
  {
    sub_1000131A8((uint64_t)v15, &qword_100128740);
    v25 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNDaemonBundleIdentifier);
    v28 = v27;
    sub_1000568E8(v26, v27);

    swift_bridgeObjectRelease(v28);
    URL.appendingPathComponent(_:)(*(_QWORD *)(v1 + qword_10012BE10), *(_QWORD *)(v1 + qword_10012BE10 + 8));
    v29 = *(void (**)(char *, uint64_t))(v17 + 8);
    v29(v21, v16);
    sub_100014360((uint64_t)v6, 0, 1, v16);
    sub_100019EB8((uint64_t)v6, (uint64_t)v12, &qword_100128740);
    v30 = v1 + qword_10012D620;
    swift_beginAccess(v1 + qword_10012D620, v56, 33, 0);
    v31 = (uint64_t)v12;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v24, v15, v16);
    URL.appendingPathComponent(_:)(*(_QWORD *)(v1 + qword_10012BE10), *(_QWORD *)(v1 + qword_10012BE10 + 8));
    v29 = *(void (**)(char *, uint64_t))(v17 + 8);
    v29(v24, v16);
    sub_100014360((uint64_t)v12, 0, 1, v16);
    sub_100019EB8((uint64_t)v12, (uint64_t)v9, &qword_100128740);
    v30 = v1 + qword_10012D620;
    swift_beginAccess(v1 + qword_10012D620, v56, 33, 0);
    v31 = (uint64_t)v9;
  }
  sub_10004BCC8(v31, v30);
  swift_endAccess(v56);
  v32 = v1 + qword_10012D620;
  swift_beginAccess(v1 + qword_10012D620, v56, 0, 0);
  v33 = v32;
  v34 = v54;
  sub_100019FA0(v33, v54, &qword_100128740);
  if (sub_10001C93C(v34, 1, v16))
  {
    sub_1000131A8(v34, &qword_100128740);
    v35 = sub_100028418();
    v36 = swift_allocError(&type metadata for StreamManagerError, v35, 0, 0);
    *v37 = 1;
    swift_willThrow(v36);
    if (qword_100127CB8 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v38 = type metadata accessor for Logger(0);
    sub_100012A40(v38, (uint64_t)qword_10012CBB0);
    swift_errorRetain(v36);
    v39 = swift_errorRetain(v36);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v55[0] = v43;
      *(_DWORD *)v42 = 136315138;
      swift_getErrorValue(v36, v59, v58);
      v44 = Error.localizedDescription.getter(v58[1], v58[2]);
      v46 = v45;
      v57 = sub_10000FBEC(v44, v45, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
      swift_bridgeObjectRelease(v46);
      swift_errorRelease(v36);
      swift_errorRelease(v36);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "StreamManager initialization failed due to %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

      swift_errorRelease(v36);
    }
    else
    {
      swift_errorRelease(v36);
      swift_errorRelease(v36);
      swift_errorRelease(v36);

    }
  }
  else
  {
    v47 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v53, v34, v16);
    sub_1000131A8(v34, &qword_100128740);
    URL.path.getter(v48);
    v50 = v49;
    v29(v47, v16);
    swift_bridgeObjectRelease(v50);
    v51 = (uint64_t *)(v1 + qword_10012BE20);
    swift_beginAccess(v1 + qword_10012BE20, v55, 1, 0);
    v52 = *v51;
    *v51 = (uint64_t)&_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v52);
    *(_BYTE *)(v1 + 16) = 1;
  }
}

uint64_t sub_10004940C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v24[24];
  uint64_t v25;
  uint64_t v26;

  v7 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v7);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_BYTE *)(v3 + 16) == 1)
  {
    v14 = v3 + qword_10012D620;
    swift_beginAccess(v14, v24, 0, 0);
    sub_100019FA0(v14, (uint64_t)v9, &qword_100128740);
    if (sub_10001C93C((uint64_t)v9, 1, v10) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
      URL.appendingPathComponent(_:)(a1, a2);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      v21 = 0;
      return sub_100014360(a3, v21, 1, v10);
    }
    sub_1000131A8((uint64_t)v9, &qword_100128740);
  }
  if (qword_100127CB8 != -1)
    swift_once(&qword_100127CB8, sub_100041AAC);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100012A40(v15, (uint64_t)qword_10012CBB0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v26 = v20;
    *(_DWORD *)v19 = 136315138;
    v25 = sub_10000FBEC(0x3A726F66284C5255, 0xE900000000000029, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s not executed due to failed initialization - nil directory", v19, 0xCu);
    v21 = 1;
    swift_arrayDestroy(v20, 1);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    v21 = 1;
  }
  return sub_100014360(a3, v21, 1, v10);
}

void sub_1000496C8(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, double a5)
{
  uint64_t v5;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *oslog;
  uint64_t v18;
  uint64_t v19;

  if (*(_BYTE *)(v5 + 16) == 1)
  {
    v11 = *(os_unfair_lock_s **)(v5 + qword_10012BE28);
    swift_retain();
    os_unfair_lock_lock(v11 + 4);
    sub_10004AF88(a5, v5, a2, a3, a4, a1);
    os_unfair_lock_unlock(v11 + 4);
    swift_release();
  }
  else
  {
    if (qword_100127CB8 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100012A40(v12, (uint64_t)qword_10012CBB0);
    oslog = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v19 = v16;
      *(_DWORD *)v15 = 136315138;
      v18 = sub_10000FBEC(0xD00000000000001BLL, 0x80000001000F3F70, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "%s not executed due to failed initialization - nil config", v15, 0xCu);
      swift_arrayDestroy(v16, 1);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_1000498E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;

  v5 = *(os_unfair_lock_s **)(v2 + qword_10012BE28);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  sub_10004B1A8(v2, a1, a2);
  os_unfair_lock_unlock(v5 + 4);
  return swift_release();
}

void sub_100049964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  CFAbsoluteTime v8;
  void *v9;
  uint64_t v10;
  _BYTE v11[16];
  double v12;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNSpecialClassDStreamIdentifier);
  v2 = v1;
  v3 = sub_100048BC8(v0, v1);
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease(v2);
  if (v5)
  {
    v8 = CFAbsoluteTimeGetCurrent() + -86400.0;
    v9 = objc_autoreleasePoolPush();
    __chkstk_darwin(v9);
    v12 = v8;
    sub_10004A164(v3, v5, v7, 1, (uint64_t)sub_10004BF64, (uint64_t)v11);
    objc_autoreleasePoolPop(v9);

    swift_bridgeObjectRelease(v5);
  }
  CFAbsoluteTimeGetCurrent();
  v12 = __chkstk_darwin(v10);
  sub_100049A98(1, (uint64_t)sub_10004B98C, (uint64_t)v11);
}

void sub_100049A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  id v32;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void (*v59)(char *, uint64_t);
  unint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76[3];
  uint64_t v77;
  char v78[24];
  uint64_t v79;
  uint64_t v80;

  v5 = v3;
  v72 = a1;
  v8 = type metadata accessor for NSFastEnumerationIterator(0);
  v70 = *(_QWORD *)(v8 - 8);
  v71 = v8;
  __chkstk_darwin(v8);
  v74 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001BE7C(&qword_100128740);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v63 - v14;
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v75 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v63 - v21;
  __chkstk_darwin(v20);
  v73 = (char *)&v63 - v23;
  if (*(_BYTE *)(v5 + 16) != 1)
    goto LABEL_4;
  v67 = a2;
  v68 = a3;
  v24 = v5 + qword_10012D620;
  swift_beginAccess(v5 + qword_10012D620, v78, 0, 0);
  sub_100019FA0(v24, (uint64_t)v15, &qword_100128740);
  if (sub_10001C93C((uint64_t)v15, 1, v16) == 1)
  {
    sub_1000131A8((uint64_t)v15, &qword_100128740);
LABEL_4:
    if (qword_100127CB8 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100012A40(v25, (uint64_t)qword_10012CBB0);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v76[0] = v30;
      *(_DWORD *)v29 = 136315138;
      v79 = sub_10000FBEC(0xD000000000000024, 0x80000001000F3EF0, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s not executed due to failed initialization - nil directory", v29, 0xCu);
      swift_arrayDestroy(v30, 1);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }

    return;
  }
  v31 = v73;
  v69 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v69(v73, v15, v16);
  v32 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v33 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v31, 0, 0, 0, 0);

  if (v33)
  {
    v34 = (void *)v33;
    v35 = v74;
    v64 = v34;
    v36 = NSEnumerator.makeIterator()();
    NSFastEnumerationIterator.next()(v76, v36);
    if (!v77)
    {
LABEL_20:

      (*(void (**)(char *, uint64_t))(v70 + 8))(v35, v71);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v73, v16);
      return;
    }
    v65 = v4;
    v66 = v17;
    while (1)
    {
      if ((swift_dynamicCast(v13, v76, (char *)&type metadata for Any + 8, v16, 6) & 1) != 0)
      {
        sub_100014360((uint64_t)v13, 0, 1, v16);
        if (sub_10001C93C((uint64_t)v13, 1, v16) != 1)
        {
          v69(v75, v13, v16);
          v37 = objc_autoreleasePoolPush();
          v38 = URL.lastPathComponent.getter();
          v40 = v39;
          v41 = v5;
          v42 = sub_100048BC8(v38, v39);
          v44 = v43;
          v46 = v45;
          swift_bridgeObjectRelease(v40);
          if (v44)
          {
            sub_10004A164(v42, v44, v46, v72, v67, v68);
            sub_10004B9F0(v42, v44, v46);
          }
          objc_autoreleasePoolPop(v37);
          v17 = v66;
          v47 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v75, v16);
          v5 = v41;
          v35 = v74;
          goto LABEL_19;
        }
      }
      else
      {
        sub_100014360((uint64_t)v13, 1, 1, v16);
      }
      sub_1000131A8((uint64_t)v13, &qword_100128740);
LABEL_19:
      NSFastEnumerationIterator.next()(v76, v47);
      if (!v77)
        goto LABEL_20;
    }
  }
  if (qword_100127CB8 != -1)
    swift_once(&qword_100127CB8, sub_100041AAC);
  v48 = type metadata accessor for Logger(0);
  sub_100012A40(v48, (uint64_t)qword_10012CBB0);
  v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 16))(v22, v73, v16);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = swift_slowAlloc(32, -1);
    v66 = v17;
    v54 = v53;
    v76[0] = v53;
    *(_DWORD *)v52 = 136315138;
    sub_100025AFC((unint64_t *)&qword_1001286B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v56 = dispatch thunk of CustomStringConvertible.description.getter(v16, v55);
    v58 = v57;
    v79 = sub_10000FBEC(v56, v57, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
    swift_bridgeObjectRelease(v58);
    v59 = *(void (**)(char *, uint64_t))(v66 + 8);
    v59(v22, v16);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Failed to generate enumerator for directory %s", v52, 0xCu);
    swift_arrayDestroy(v54, 1);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v52, -1, -1);
  }
  else
  {
    v59 = *(void (**)(char *, uint64_t))(v17 + 8);
    v59(v22, v16);
  }

  v60 = sub_100028418();
  v61 = swift_allocError(&type metadata for StreamManagerError, v60, 0, 0);
  *v62 = 0;
  swift_willThrow(v61);
  v59(v73, v16);
}

void sub_10004A164(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *oslog;
  uint64_t aBlock[6];
  uint64_t v26;
  uint64_t v27;

  if (*(_BYTE *)(v6 + 16) == 1)
  {
    v13 = objc_allocWithZone((Class)BMStoreStream);
    swift_bridgeObjectRetain(a2);
    v14 = a3;
    v15 = sub_10004B2D0(a1, a2, a3, 0);
    v16 = swift_allocObject(&unk_10011B878, 32, 7);
    *(_QWORD *)(v16 + 16) = a5;
    *(_QWORD *)(v16 + 24) = a6;
    v17 = swift_allocObject(&unk_10011B8A0, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_10004B9C0;
    *(_QWORD *)(v17 + 24) = v16;
    aBlock[4] = (uint64_t)sub_10004B9CC;
    aBlock[5] = v17;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10004B27C;
    aBlock[3] = (uint64_t)&unk_10011B8B8;
    v18 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v15, "pruneWithReason:usingPredicateBlock:", a4, v18);

    _Block_release(v18);
    LOBYTE(a4) = swift_isEscapingClosureAtFileLocation(v17, "", 112, 186, 36, 1);
    swift_release();
    swift_release();
    if ((a4 & 1) == 0)
      return;
    __break(1u);
  }
  if (qword_100127CB8 != -1)
    swift_once(&qword_100127CB8, sub_100041AAC);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_100012A40(v19, (uint64_t)qword_10012CBB0);
  oslog = Logger.logObject.getter(v20);
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    aBlock[0] = v23;
    *(_DWORD *)v22 = 136315138;
    v26 = sub_10000FBEC(0xD000000000000021, 0x80000001000F3EC0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    _os_log_impl((void *)&_mh_execute_header, oslog, v21, "%s not executed due to failed initialization - not initialized", v22, 0xCu);
    swift_arrayDestroy(v23, 1);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

  }
}

void *sub_10004A448(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  id v12;
  unint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t ObjCClassFromMetadata;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v28[3];
  uint64_t v29;
  _BYTE v30[24];

  v7 = (unint64_t *)(v3 + qword_10012BE20);
  swift_beginAccess(v3 + qword_10012BE20, v30, 0, 0);
  v8 = *v7;
  if (*(_QWORD *)(*v7 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v8);
    v9 = sub_100016064(a1);
    if ((v10 & 1) != 0)
    {
      v11 = *(void **)(*(_QWORD *)(v8 + 56) + 8 * v9);
      v12 = v11;
      swift_bridgeObjectRelease(a2);
      v13 = v8;
LABEL_7:
      swift_bridgeObjectRelease(v13);
      return v11;
    }
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v8);
  }
  v14 = objc_allocWithZone((Class)BMStreamDatastore);
  swift_bridgeObjectRetain(a2);
  v15 = a3;
  v16 = sub_10004B354(a1, a2, 1, a3);
  if (v16)
  {
    v11 = v16;
    v17 = sub_10000795C(0, (unint64_t *)&unk_100129430, LNTranscriptActionRecord_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v17);
    v19 = v11;
    objc_msgSend(v19, "updateMetadata:", ObjCClassFromMetadata);
    swift_beginAccess(v7, v28, 33, 0);
    swift_bridgeObjectRetain(a2);
    v20 = v19;
    sub_100055884((uint64_t)v20, a1, a2);
    swift_endAccess(v28);

    v13 = a2;
    goto LABEL_7;
  }
  if (qword_100127CB8 != -1)
    swift_once(&qword_100127CB8, sub_100041AAC);
  v21 = type metadata accessor for Logger(0);
  sub_100012A40(v21, (uint64_t)qword_10012CBB0);
  swift_bridgeObjectRetain_n(a2, 2);
  v22 = v15;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v28[0] = v26;
    *(_DWORD *)v25 = 136315138;
    swift_bridgeObjectRetain(a2);
    v29 = sub_10000FBEC(a1, a2, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30);

    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Biome stream writer for %s returned nil", v25, 0xCu);
    swift_arrayDestroy(v26, 1);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  return 0;
}

uint64_t sub_10004A74C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_10004A764, v0, 0);
}

uint64_t sub_10004A764()
{
  uint64_t v0;

  sub_100049964();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10004A7BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PruneTranscriptService()
{
  return objc_opt_self(_TtC10LinkDaemon22PruneTranscriptService);
}

uint64_t sub_10004A800()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004A80C()
{
  return sub_10004A800();
}

unint64_t sub_10004A824()
{
  return 0xD000000000000020;
}

uint64_t sub_10004A840()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1001293EC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10004A888;
  return sub_10004A74C();
}

uint64_t sub_10004A888(char a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10001B058();
  if (v1)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(a1 & 1);
}

void sub_10004A8D4(uint64_t a1)
{
  uint64_t v1;

  sub_1000421C8(a1, *(void **)(v1 + 16));
}

uint64_t sub_10004A8DC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10004A918(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_100129394);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10002E6E8;
  return sub_100042430(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_10004A9A4()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNTranscriptErrorDomain);
  qword_10012CBD8 = result;
  unk_10012CBE0 = v1;
  return result;
}

uint64_t *sub_10004A9D0()
{
  if (qword_100127CC8 != -1)
    swift_once(&qword_100127CC8, sub_10004A9A4);
  return &qword_10012CBD8;
}

uint64_t sub_10004AA10(char a1)
{
  return qword_1000F0320[a1];
}

uint64_t sub_10004AA24(uint64_t a1)
{
  if ((unint64_t)(a1 - 1000) >= 7)
    return 6;
  else
    return (0x4060503020100uLL >> (8 * (a1 + 24)));
}

BOOL sub_10004AA50(char *a1, char *a2)
{
  return sub_10008152C(*a1, *a2);
}

Swift::Int sub_10004AA5C()
{
  char *v0;

  return sub_10004AA64(*v0);
}

Swift::Int sub_10004AA64(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(qword_1000F0320[a1]);
  return Hasher._finalize()();
}

void sub_10004AAB4(uint64_t a1)
{
  char *v1;

  sub_10004AABC(a1, *v1);
}

void sub_10004AABC(uint64_t a1, char a2)
{
  Hasher._combine(_:)(qword_1000F0320[a2]);
}

Swift::Int sub_10004AAEC(uint64_t a1)
{
  char *v1;

  return sub_10004AAF4(a1, *v1);
}

Swift::Int sub_10004AAF4(uint64_t a1, char a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_1000F0320[a2]);
  return Hasher._finalize()();
}

uint64_t sub_10004AB40@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10004AA24(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004AB68@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = sub_10004AA10(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_10004AB90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004BEB0();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10004ABB8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_10004BEB0();
  v3 = sub_10004BEEC();
  v4 = sub_10004BF28();
  return Error<>._code.getter(a1, v2, v3, v4);
}

uint64_t sub_10004AC00()
{
  uint64_t v0;

  sub_10004A9D0();
  v0 = qword_10012CBD8;
  swift_bridgeObjectRetain(unk_10012CBE0);
  return v0;
}

uint64_t sub_10004AC38()
{
  char *v0;

  return sub_10004AA10(*v0);
}

uint64_t sub_10004AC44(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  NSObject *v16;
  os_signpost_type_t v17;
  uint64_t result;
  uint8_t *v19;
  os_signpost_id_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v23 - v9;
  if (qword_100127FB0 != -1)
    swift_once(&qword_100127FB0, sub_1000C8C50);
  v11 = (id)qword_10012D5D8;
  swift_unknownObjectRetain(a1);
  OSSignpostID.init(log:object:)(v11, a1);
  if (qword_100127FA8 != -1)
    swift_once(&qword_100127FA8, sub_1000C8C2C);
  v12 = type metadata accessor for OSSignposter(0);
  sub_100012A40(v12, (uint64_t)qword_10012D5C0);
  v13 = sub_1000C8C7C(a2);
  v15 = v14;
  v16 = OSSignposter.logHandle.getter(v13);
  v17 = static os_signpost_type_t.begin.getter();
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_14;
  if ((v15 & 1) == 0)
  {
    if (v13)
    {
LABEL_13:
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      v20 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, v17, v20, (const char *)v13, "", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
LABEL_14:

      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
      v21 = type metadata accessor for OSSignpostIntervalState(0);
      swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
      v22 = OSSignpostIntervalState.init(id:isOpen:)(v8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      return v22;
    }
    __break(1u);
  }
  if (HIDWORD(v13))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v13 >> 11 != 27)
  {
    if (WORD1(v13) <= 0x10u)
    {
      v13 = (unint64_t)&v24;
      goto LABEL_13;
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
  return result;
}

id sub_10004AE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v8;
  NSString v9;
  id v10;

  v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4));
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = objc_msgSend(v8, "initWithStoreBasePath:segmentSize:protectionClass:", v9, a3, a4);

  return v10;
}

id sub_10004AF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  NSString v7;
  id v8;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = objc_msgSend(v6, "initWithStoreBasePath:segmentSize:", v7, a3);

  return v8;
}

void sub_10004AF88(double a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6)
{
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = sub_10004A448(a3, a4, a5);
  if (v11)
  {
    v12 = v11;
    if ((objc_msgSend(v11, "writeEventWithEventBody:timestamp:", a6, a1) & 1) != 0)
    {
LABEL_7:

      return;
    }
    if (qword_100127CB8 != -1)
      swift_once(&qword_100127CB8, sub_100041AAC);
    v13 = type metadata accessor for Logger(0);
    sub_100012A40(v13, (uint64_t)qword_10012CBB0);
    swift_bridgeObjectRetain_n(a4, 2);
    v14 = a5;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v20 = v18;
      *(_DWORD *)v17 = 136315138;
      swift_bridgeObjectRetain(a4);
      v19 = sub_10000FBEC(a3, a4, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);

      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Biome stream writer for %s failed to write", v17, 0xCu);
      swift_arrayDestroy(v18, 1);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      goto LABEL_7;
    }

    swift_bridgeObjectRelease_n(a4, 2);
  }
}

void sub_10004B1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  _BYTE v6[24];

  swift_beginAccess(a1 + qword_10012BE20, v6, 33, 0);
  swift_bridgeObjectRetain(a3);
  v5 = (void *)sub_10004B530(a2);
  swift_endAccess(v6);
  swift_bridgeObjectRelease(a3);

}

uint64_t sub_10004B230(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;

  if (!a1)
    return 1;
  v4 = a1;
  LOBYTE(a3) = a3();

  return a3 & 1;
}

uint64_t sub_10004B27C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t (*v5)(void *, uint64_t);
  id v6;

  v5 = *(uint64_t (**)(void *, uint64_t))(a1 + 32);
  v6 = a2;
  LOBYTE(a3) = v5(a2, a3);

  return a3 & 1;
}

id sub_10004B2D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v4;
  NSString v8;
  uint64_t ObjCClassFromMetadata;
  id v10;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(a4);
  else
    ObjCClassFromMetadata = 0;
  v10 = objc_msgSend(v4, "initWithPrivateStreamIdentifier:storeConfig:eventDataClass:", v8, a3, ObjCClassFromMetadata);

  return v10;
}

id sub_10004B354(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  NSString v8;
  id v9;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v9 = objc_msgSend(v4, "initWithStream:permission:config:", v8, a3, a4);

  return v9;
}

uint64_t sub_10004B3C4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10004B3E4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10003162C(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v16 = *v2;
  v8 = *v2;
  *v2 = 0x8000000000000000;
  v9 = *(_QWORD *)(v8 + 24);
  sub_10001BE7C(&qword_100128290);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
  v10 = *(_QWORD *)(v16 + 48);
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v5, v11);
  v12 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v5);
  v13 = sub_10000795C(0, &qword_1001293D8, NSXPCConnection_ptr);
  sub_100025AFC(&qword_1001289E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  _NativeDictionary._delete(at:)(v5, v16, v11, v13);
  v14 = *v2;
  *v2 = v16;
  swift_bridgeObjectRelease(v14);
  return v12;
}

uint64_t sub_10004B530(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = *v1;
  swift_bridgeObjectRetain(*v1);
  v5 = sub_100016064(a1);
  v7 = v6;
  swift_bridgeObjectRelease(v4);
  if ((v7 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v15 = *v2;
  v9 = *v2;
  *v2 = 0x8000000000000000;
  v10 = *(_QWORD *)(v9 + 24);
  sub_10001BE7C(&qword_100128298);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * v5 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v5);
  v12 = sub_10001BE7C((uint64_t *)&unk_1001293A0);
  _NativeDictionary._delete(at:)(v5, v15, &type metadata for String, v12);
  v13 = *v2;
  *v2 = v15;
  swift_bridgeObjectRelease(v13);
  return v11;
}

double sub_10004B63C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double result;
  uint64_t v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;

  v4 = v3;
  swift_bridgeObjectRetain(*v4);
  sub_100018678();
  sub_10001B778();
  if ((a2 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v4);
    *(_QWORD *)v28 = *v4;
    *v4 = 0x8000000000000000;
    v8 = sub_10001BE7C((uint64_t *)&unk_100129470);
    v16 = sub_10001B2A0(v8, v9, v10, v11, v12, v13, v14, v15, v26, v28[0]);
    sub_1000189CC(v16, v17, v18, v19, v20, v21, v22, v23, v27, v29);
    sub_1000273C0((_OWORD *)(*(_QWORD *)(a2 + 56) + 32 * a1), a3);
    _NativeDictionary._delete(at:)(a1, a2, &type metadata for String, (char *)&type metadata for Any + 8);
    v24 = *v4;
    *v4 = a2;
    swift_bridgeObjectRelease(v24);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10004B728()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  sub_100017C48();
  sub_100018678();
  sub_10001B778();
  if ((v1 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v2);
    sub_10001DCF8();
    v4 = sub_10001BE7C(&qword_100128200);
    v12 = sub_10001B2A0(v4, v5, v6, v7, v8, v9, v10, v11, v29, v31);
    sub_1000189CC(v12, v13, v14, v15, v16, v17, v18, v19, v30, v32);
    v20 = *(_QWORD *)(v1 + 56);
    v21 = sub_10001AE20();
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v0, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v3, v21);
    sub_10001A048(v22, v23, (uint64_t)&type metadata for String);
    sub_100013354();
    v24 = sub_10001C1EC();
  }
  else
  {
    sub_10001AE20();
    v24 = sub_100013568();
  }
  return sub_10001E1DC(v24, v25, v26, v27);
}

uint64_t sub_10004B7C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  sub_100017C48();
  sub_100018678();
  sub_10001B778();
  if ((v1 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v2);
    sub_10001DCF8();
    v4 = sub_10001BE7C((uint64_t *)&unk_100129400);
    v12 = sub_10001B2A0(v4, v5, v6, v7, v8, v9, v10, v11, v29, v31);
    sub_1000189CC(v12, v13, v14, v15, v16, v17, v18, v19, v30, v32);
    v20 = *(_QWORD *)(v1 + 56);
    v21 = type metadata accessor for LNBundleRecord(0);
    v22 = sub_100035DB4(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v3, v0);
    sub_10001A048(v22, v23, (uint64_t)&type metadata for String);
    sub_100013354();
    v24 = sub_10001C1EC();
  }
  else
  {
    type metadata accessor for LNBundleRecord(0);
    v24 = sub_100013568();
  }
  return sub_10001E1DC(v24, v25, v26, v27);
}

uint64_t sub_10004B86C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "bundleIdentifier");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_10004B8CC(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, "setBundleIdentifier:", v5);

}

uint64_t sub_10004B91C(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "activityIdentifier");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

BOOL sub_10004B98C(void *a1)
{
  uint64_t v1;
  double v2;
  double v3;

  v2 = *(double *)(v1 + 16);
  objc_msgSend(a1, "timestamp");
  return v3 < v2;
}

uint64_t sub_10004B9C0(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10004B230(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_10004B9CC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

void sub_10004B9F0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);

  }
}

uint64_t sub_10004BA20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

void sub_10004BA58(uint64_t a1)
{
  uint64_t v1;

  sub_100048744(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10004BA60()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10004BA84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000485F4(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t sub_10004BA8C()
{
  unint64_t result;

  result = qword_100129410;
  if (!qword_100129410)
  {
    result = swift_getWitnessTable(&unk_1000F02D8, &type metadata for TranscriptError);
    atomic_store(result, (unint64_t *)&qword_100129410);
  }
  return result;
}

uint64_t sub_10004BACC()
{
  return sub_10004BB2C(sub_10004841C);
}

uint64_t sub_10004BADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001AE20();
  sub_100010210();
  v3 = v1 + v2;
  v5 = v4 | 7;

  sub_10001F734();
  return swift_deallocObject(v0, v3, v5);
}

uint64_t sub_10004BB2C(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001AE20() - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_10004BB68(uint64_t a1)
{
  uint64_t v1;

  return sub_100048454(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10004BB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_10001AE20();
  sub_100010210();
  v3 = v2 | 7;
  v5 = (v4 + v1 + 7) & 0xFFFFFFFFFFFFFFF8;

  sub_10001F734();
  swift_release();
  return swift_deallocObject(v0, v5 + 16, v3);
}

void sub_10004BBE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(sub_10001AE20() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_100048480(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void (**)(_BYTE *, uint64_t))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10004BC34(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

id sub_10004BCB4(void *a1)
{
  uint64_t v1;

  return sub_1000415B8(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10004BCBC(void *a1)
{
  uint64_t v1;

  return sub_100041614(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32));
}

uint64_t sub_10004BCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_100128740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for TranscriptError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TranscriptError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10004BDE4 + 4 * byte_1000F0115[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10004BE18 + 4 * byte_1000F0110[v4]))();
}

uint64_t sub_10004BE18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004BE20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004BE28);
  return result;
}

uint64_t sub_10004BE34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004BE3CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10004BE40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004BE48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10004BE54(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptError()
{
  return &type metadata for TranscriptError;
}

unint64_t sub_10004BE74()
{
  unint64_t result;

  result = qword_100129450;
  if (!qword_100129450)
  {
    result = swift_getWitnessTable(&unk_1000F02B0, &type metadata for TranscriptError);
    atomic_store(result, (unint64_t *)&qword_100129450);
  }
  return result;
}

unint64_t sub_10004BEB0()
{
  unint64_t result;

  result = qword_100129458;
  if (!qword_100129458)
  {
    result = swift_getWitnessTable(&unk_1000F01F8, &type metadata for TranscriptError);
    atomic_store(result, (unint64_t *)&qword_100129458);
  }
  return result;
}

unint64_t sub_10004BEEC()
{
  unint64_t result;

  result = qword_100129460;
  if (!qword_100129460)
  {
    result = swift_getWitnessTable(&unk_1000F0238, &type metadata for TranscriptError);
    atomic_store(result, (unint64_t *)&qword_100129460);
  }
  return result;
}

unint64_t sub_10004BF28()
{
  unint64_t result;

  result = qword_100129468;
  if (!qword_100129468)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100129468);
  }
  return result;
}

uint64_t sub_10004BF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_errorRelease(a10);
}

unint64_t sub_10004BF84(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  _QWORD v21[2];

  v2 = a2;
  v21[0] = 95;
  v21[1] = 0xE100000000000000;
  v20[2] = v21;
  v4 = sub_10004C3C4(sub_10004C52C, (uint64_t)v20, a1, a2);
  if ((v5 & 1) != 0)
    goto LABEL_6;
  v6 = v4;
  if (!(v4 >> 14))
    goto LABEL_6;
  v7 = String.index(after:)(v4, a1, v2);
  v8 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  if (v7 >> 14 == 4 * v8)
  {
LABEL_6:
    v9 = sub_10004C548();
    swift_allocError(&type metadata for AppShortcutIdentifierExtractionError, v9, 0, 0);
    *(_QWORD *)v10 = a1;
    *(_QWORD *)(v10 + 8) = v2;
    *(_BYTE *)(v10 + 16) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow(v11);
  }
  else
  {
    swift_bridgeObjectRetain();
    v12 = String.subscript.getter(15, v6);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    swift_bridgeObjectRelease();
    v2 = static String._fromSubstring(_:)(v12, v14, v16, v18);
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_10004C0C8(uint64_t a1, unint64_t a2, char a3)
{
  void *object;
  Swift::String v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  if (!a3)
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease(0xE000000000000000);
    v11 = 0xD000000000000022;
    v8 = a1;
    v9 = a2;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    v11 = 0;
    _StringGuts.grow(_:)(61);
    v12._countAndFlagsBits = 0xD00000000000002DLL;
    v12._object = (void *)0x80000001000F3FD0;
    sub_100017698(v12);
    v13._countAndFlagsBits = sub_10001C788();
    object = v13._object;
    sub_100017698(v13);
    swift_bridgeObjectRelease(object);
    v6._countAndFlagsBits = 0x6E615278616D202CLL;
    v6._object = (void *)0xEB00000000203A6BLL;
    String.append(_:)(v6);
    v14._countAndFlagsBits = sub_10001C788();
    v7 = v14._object;
    sub_100017698(v14);
    swift_bridgeObjectRelease(v7);
    v8 = 41;
    v9 = 0xE100000000000000;
LABEL_5:
    String.append(_:)(*(Swift::String *)&v8);
    return v11;
  }
  return 0x6C616E7265746E49;
}

uint64_t sub_10004C230(uint64_t a1, uint64_t a2, char a3)
{
  return qword_1000F0498[a3];
}

uint64_t sub_10004C248(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  uint64_t v13;

  v13 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v6 = sub_10004C0C8(a1, a2, a3);
  v8 = v7;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  v12[3] = &type metadata for String;
  v12[0] = v6;
  v12[1] = v8;
  sub_100053F70((uint64_t)v12, v9, v10);
  return v13;
}

BOOL sub_10004C2FC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return qword_1000F0498[a3] == qword_1000F0498[a6];
}

uint64_t sub_10004C320()
{
  uint64_t v0;

  return sub_10004C244(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(unsigned __int8 *)(v0 + 16));
}

unint64_t sub_10004C32C()
{
  return 0xD000000000000026;
}

uint64_t sub_10004C348(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10004C230(a1, a2, *(_BYTE *)(v2 + 16));
}

uint64_t sub_10004C350()
{
  uint64_t v0;

  return sub_10004C248(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10004C35C()
{
  uint64_t v0;

  return sub_10004C0C8(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

BOOL sub_10004C368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10004C2FC(a1, a2, *(_BYTE *)(a1 + 16), a4, a5, *(_BYTE *)(a2 + 16));
}

uint64_t sub_10004C374(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004C768();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10004C39C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004C768();
  return Error<>._code.getter(a1, v2);
}

unint64_t sub_10004C3C4(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  _QWORD v17[2];

  v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  v9 = 7;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
    v9 = 11;
  v10 = v9 | (v5 << 16);
  while (1)
  {
    v10 = String.index(before:)(v10, a3, a4);
    v11 = String.subscript.getter(v10, a3, a4);
    v13 = v12;
    v17[0] = v11;
    v17[1] = v12;
    v14 = a1(v17);
    if (v4)
      break;
    v15 = v14;
    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0)
      return v10;
    if (v10 < 0x4000)
      return 0;
  }
  swift_bridgeObjectRelease(v13);
  return v10;
}

uint64_t sub_10004C4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0) & 1;
}

uint64_t sub_10004C504(uint64_t *a1, uint64_t *a2)
{
  return sub_10004C4C4(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_10004C52C(uint64_t *a1)
{
  uint64_t v1;

  return sub_10004C504(a1, *(uint64_t **)(v1 + 16)) & 1;
}

unint64_t sub_10004C548()
{
  unint64_t result;

  result = qword_100129480;
  if (!qword_100129480)
  {
    result = swift_getWitnessTable(&unk_1000F0450, &type metadata for AppShortcutIdentifierExtractionError);
    atomic_store(result, (unint64_t *)&qword_100129480);
  }
  return result;
}

uint64_t sub_10004C588(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t destroy for AppShortcutIdentifierExtractionError(uint64_t a1)
{
  return sub_10004C5AC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10004C5AC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t _s10LinkDaemon36AppShortcutIdentifierExtractionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10004C588(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AppShortcutIdentifierExtractionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10004C588(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10004C5AC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AppShortcutIdentifierExtractionError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10004C5AC(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutIdentifierExtractionError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutIdentifierExtractionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_10004C724(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_10004C73C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutIdentifierExtractionError()
{
  return &type metadata for AppShortcutIdentifierExtractionError;
}

unint64_t sub_10004C768()
{
  unint64_t result;

  result = qword_100129488;
  if (!qword_100129488)
  {
    result = swift_getWitnessTable(&unk_1000F03C8, &type metadata for AppShortcutIdentifierExtractionError);
    atomic_store(result, (unint64_t *)&qword_100129488);
  }
  return result;
}

uint64_t sub_10004C7A4(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 4)
    return 3;
  else
    return 0x2010003u >> (8 * v1);
}

BOOL static Connection.Operation.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void sub_10004C7D8(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int sub_10004C7FC(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL sub_10004C840(char *a1, char *a2)
{
  return static Connection.Operation.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_10004C84C()
{
  unsigned __int8 *v0;

  return sub_10004C7FC(*v0);
}

void sub_10004C854(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10004C7D8(a1, *v1);
}

uint64_t sub_10004C85C(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[6];

  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 1;
  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 40) = a4;
  *(_BYTE *)(v4 + 48) = a1;
  v8 = swift_allocObject(&unk_10011BD90, 24, 7);
  swift_weakInit(v8 + 16, v4);
  v9 = (_QWORD *)swift_allocObject(&unk_10011BDB8, 40, 7);
  v9[2] = v8;
  v9[3] = a3;
  v9[4] = a4;
  v13[4] = sub_10004CF5C;
  v13[5] = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10004CCC4;
  v13[3] = &unk_10011BDD0;
  v10 = _Block_copy(v13);
  swift_retain_n(a4, 2);
  swift_release();
  v11 = os_state_add_handler(a2, v10);

  swift_release();
  _Block_release(v10);
  *(_QWORD *)(v4 + 16) = v11;
  *(_BYTE *)(v4 + 24) = 0;
  return v4;
}

uint64_t sub_10004C978(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (!Strong)
    return 0;
  v7 = Strong;
  if (*(_BYTE *)(Strong + 48) == 1 && (*(_BYTE *)(Strong + 24) & 1) == 0)
  {
    v8 = *(_QWORD *)(Strong + 16);
    *(_QWORD *)(v7 + 16) = 0;
    *(_BYTE *)(v7 + 24) = 1;
    os_state_remove_handler(v8);
  }
  v9 = sub_10004C7A4(a1);
  v10 = a3(v9);
  if (v11)
    v12 = sub_10004CA30(v10, v11);
  else
    v12 = 0;
  swift_release();
  return v12;
}

uint64_t sub_10004CA30(uint64_t a1, uint64_t a2)
{
  void *v4;
  Class isa;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  size_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  const char *v21;
  uint64_t v22;
  id __src[25];
  uint64_t v24;

  v4 = (void *)objc_opt_self(NSPropertyListSerialization);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  __src[0] = 0;
  v6 = objc_msgSend(v4, "dataWithPropertyList:format:options:error:", isa, 200, 0, __src);

  v7 = __src[0];
  if (!v6)
  {
    v17 = v7;
    swift_bridgeObjectRelease();
    v18 = _convertNSErrorToError(_:)(v17);

    swift_willThrow(v19);
    swift_errorRelease(v18);
    return 0;
  }
  v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v10 = v9;

  v11 = Data.count.getter(v8, v10);
  v12 = __OFADD__(v11, 200);
  v13 = v11 + 200;
  if (v12)
    __break(1u);
  v14 = (char *)calloc(v13, 1uLL);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  bzero((char *)__src + 4, 0xC4uLL);
  LODWORD(__src[0]) = 1;
  sub_10004CF94(a1, a2, (char *)&__src[17], (uint64_t)&v24);
  swift_bridgeObjectRelease();
  v15 = Data.count.getter(v8, v10);
  if ((v15 & 0x8000000000000000) != 0)
  {
    v21 = "Negative value is not representable";
    v22 = 35;
  }
  else
  {
    if (!HIDWORD(v15))
    {
      HIDWORD(__src[0]) = v15;
      memcpy(v14, __src, 0xC8uLL);
      v16 = Data.count.getter(v8, v10);
      Data.copyBytes(to:count:)(v14 + 200, v16, v8, v10);
LABEL_9:
      sub_10001EA88(v8, v10);
      return (uint64_t)v14;
    }
    v21 = "Not enough bits to represent the passed value";
    v22 = 45;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v21, v22, 2, "Swift/Integers.swift", 20);
  __break(1u);
  return result;
}

uint64_t sub_10004CCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = v4(a2);
  swift_release(v3);
  return v5;
}

uint64_t sub_10004CD0C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
    os_state_remove_handler(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t sub_10004CD38()
{
  uint64_t v0;

  sub_10004CD0C();
  return swift_deallocClassInstance(v0, 49, 7);
}

uint64_t type metadata accessor for OSStateHandler()
{
  return objc_opt_self(_TtC10LinkDaemon14OSStateHandler);
}

uint64_t getEnumTagSinglePayload for OSStateHandler.Hint(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OSStateHandler.Hint(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10004CE4C + 4 * byte_1000F04FD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10004CE80 + 4 * byte_1000F04F8[v4]))();
}

uint64_t sub_10004CE80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004CE88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004CE90);
  return result;
}

uint64_t sub_10004CE9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004CEA4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10004CEA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004CEB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OSStateHandler.Hint()
{
  return &type metadata for OSStateHandler.Hint;
}

unint64_t sub_10004CED0()
{
  unint64_t result;

  result = qword_100129540;
  if (!qword_100129540)
  {
    result = swift_getWitnessTable(&unk_1000F0578, &type metadata for OSStateHandler.Hint);
    atomic_store(result, (unint64_t *)&qword_100129540);
  }
  return result;
}

uint64_t sub_10004CF0C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004CF30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10004CF5C(uint64_t a1)
{
  uint64_t v1;

  return sub_10004C978(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

char *sub_10004CF68(char *__src, char *__dst, uint64_t a3)
{
  if (__dst)
    return strncpy(__dst, __src, a3 - (_QWORD)__dst);
  __break(1u);
  return __src;
}

char *sub_10004CF94(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  char *v6;
  _QWORD v8[4];
  char __src[8];
  uint64_t v10;

  v8[2] = __dst;
  v8[3] = a4;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
    return (char *)_StringGuts._slowWithCString<A>(_:)(sub_10004D068, v8, a1, a2, (char *)&type metadata for () + 8);
  if ((a2 & 0x2000000000000000) != 0)
  {
    *(_QWORD *)__src = a1;
    v10 = a2 & 0xFFFFFFFFFFFFFFLL;
    v6 = __src;
  }
  else if ((a1 & 0x1000000000000000) != 0)
  {
    v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v6 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
  }
  return sub_10004CF68(v6, __dst, a4);
}

char *sub_10004D068(char *a1)
{
  uint64_t v1;

  return sub_10004CF68(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_10004D080(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  Class isa;
  id v29;
  _BYTE v30[64];
  _QWORD v31[4];

  v10 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v10);
  v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for LNActionRecord(0);
  v14 = (uint64_t)a5 + *(int *)(v13 + 20);
  v15 = type metadata accessor for URL(0);
  sub_100014360(v14, 1, 1, v15);
  *a5 = a1;
  a5[1] = a2;
  swift_bridgeObjectRetain(a2);
  sub_10004FCBC(a3, v14);
  v16 = objc_msgSend(a4, "effectiveBundleIdentifiers");
  v17 = objc_msgSend(v16, "array");

  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v19 = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRelease(v18);
  if (v19)
  {
    sub_1000131A8(a3, &qword_100128740);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    sub_100019FCC(a3, (uint64_t)v12, &qword_100128740);
    v20 = objc_allocWithZone((Class)LNEffectiveBundleIdentifier);
    swift_bridgeObjectRetain(a2);
    v21 = sub_10004FA94(0, a1, a2, (uint64_t)v12);
    v31[3] = sub_10000795C(0, &qword_100129550, LNEffectiveBundleIdentifier_ptr);
    v31[0] = v21;
    v22 = objc_allocWithZone((Class)NSOrderedSet);
    v23 = sub_10004FB54(v31);
    v24 = sub_10001BE7C(&qword_100129558);
    inited = swift_initStackObject(v24, v30);
    *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
    *(_QWORD *)(inited + 32) = a1;
    *(_QWORD *)(inited + 40) = a2;
    *(_QWORD *)(inited + 48) = LNActionMetadata._mangledTypeNameForAppIntentsOnly.getter();
    *(_QWORD *)(inited + 56) = v26;
    v27 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for String, &protocol witness table for String);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v27);
    v29 = objc_msgSend(a4, "metadataByAddingEffectiveBundleIdentifiers:mangledTypeNameByBundleIdentifier:", v23, isa);

    sub_1000131A8(a3, &qword_100128740);
    a4 = v29;
  }
  *(uint64_t *)((char *)a5 + *(int *)(v13 + 24)) = (uint64_t)a4;
  sub_100013308();
}

void sub_10004D308(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v49;

  v7 = a5;
  v8 = a4;
  v9 = a2;
  v10 = a1;
  v11 = *(_QWORD *)(a7 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    v44 = a7;
    v13 = (uint64_t *)(a7 + 56);
    v14 = _swiftEmptyArrayStorage;
    v15 = v11;
    do
    {
      v16 = v14[2];
      if (__OFADD__(v16, 2))
      {
        __break(1u);
        return;
      }
      v17 = *(v13 - 3);
      v18 = *(v13 - 2);
      v19 = *v13;
      v49 = *(v13 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native(v14) || v16 + 2 > v14[3] >> 1)
      {
        sub_10001B71C();
        v14 = v20;
      }
      v21 = v14[2];
      v22 = v14[3];
      v23 = v21 + 1;
      swift_bridgeObjectRetain();
      if (v21 >= v22 >> 1)
      {
        sub_10001B71C();
        v14 = v27;
      }
      v14[2] = v23;
      v24 = &v14[2 * v21];
      v24[4] = v17;
      v24[5] = v18;
      v25 = v14[3];
      swift_bridgeObjectRetain();
      if (v23 >= v25 >> 1)
      {
        sub_10001B71C();
        v14 = v28;
      }
      v13 += 4;
      v14[2] = v21 + 2;
      v26 = &v14[2 * v23];
      v26[4] = v49;
      v26[5] = v19;
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v18);
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease(v44);
    sub_10001573C();
    v29 = _swiftEmptyArrayStorage[2];
    v30 = 2 * v29;
    v10 = a1;
    do
    {
      v31 = v29 + 1;
      if (v29 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_10001573C();
      _swiftEmptyArrayStorage[2] = v31;
      v32 = &_swiftEmptyArrayStorage[v30];
      v32[4] = 0x293F202C3F28;
      v32[5] = 0xE600000000000000;
      v30 += 2;
      v29 = v31;
      --v11;
    }
    while (v11);
    v8 = a4;
    v7 = a5;
    v9 = a2;
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRetain();
  v33._countAndFlagsBits = v10;
  v33._object = v9;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v9);
  v34._countAndFlagsBits = 8236;
  v34._object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  swift_bridgeObjectRetain();
  v35._countAndFlagsBits = v8;
  v35._object = v7;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(v7);
  v36._countAndFlagsBits = 0x2028204E49202920;
  v36._object = (void *)0xEF205345554C4156;
  String.append(_:)(v36);
  v37 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
  sub_10001C2C0((unint64_t *)&qword_100129568, (uint64_t *)&unk_10012AD80, (uint64_t)&protocol conformance descriptor for [A]);
  v39 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v37, v38);
  v41 = v40;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v42._countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(v41);
  v43._countAndFlagsBits = 10528;
  v43._object = (void *)0xE200000000000000;
  String.append(_:)(v43);
  sub_100050724((uint64_t)v14);
  swift_bridgeObjectRelease(v14);
}

void *sub_10004D688()
{
  _QWORD v1[21];

  Table.init(_:database:)(v1, 0x736E6F69746361, 0xE700000000000000, 0, 0);
  return sub_1000189C4(&unk_10012CBE8, v1);
}

uint64_t sub_10004D6D4(uint64_t a1)
{
  return sub_10004D71C(a1, (uint64_t)&qword_10012CC90, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_10004D6F8(uint64_t a1)
{
  return sub_10004D71C(a1, (uint64_t)&qword_10012CCA8, 0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_10004D71C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_10001BE7C(&qword_100128D00);
  sub_10001C2C0((unint64_t *)&qword_100129FA0, &qword_100128D00, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(a3, a4, v6, v7);
}

uint64_t sub_10004D798(uint64_t a1)
{
  return sub_10004D71C(a1, (uint64_t)&qword_10012CCC0, 0x617461646174656DLL, 0xE800000000000000);
}

void sub_10004D7B8(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _UNKNOWN **v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  ValueMetadata *v147;
  _UNKNOWN **v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170[21];
  _QWORD v171[21];
  _QWORD v172[22];

  if (qword_100127CD0 != -1)
    swift_once(&qword_100127CD0, sub_10004D688);
  v1 = sub_1000189C4(v170, &unk_10012CBE8);
  sub_1000185A8((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v104, v110, a1, v123, v124, v125, v126, (uint64_t)v127, v128, v129, v130,
    v131,
    v132,
    v133,
    v134,
    v135,
    v136,
    v137,
    v138,
    v139,
    v140,
    v141,
    v142,
    v143,
    v144,
    v145,
    v146,
    (uint64_t)v147,
    (uint64_t)v148,
    v149,
    v150,
    v151,
    v152,
    v153,
    v154,
    v155,
    v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166,
    v167,
    v168,
    v169,
    v170[0]);
  if (qword_100127F28 != -1)
    swift_once(&qword_100127F28, sub_1000C4370);
  sub_1000189C4(v171, &unk_10012D3D0);
  sub_1000189C4(v172, v170);
  sub_1000163BC();
  if (qword_100127CD8 != -1)
    swift_once(&qword_100127CD8, sub_10004D6D4);
  v9 = qword_10012CC90;
  v10 = *(_QWORD *)algn_10012CC98;
  v11 = qword_10012CCA0;
  v12 = sub_1000189C4(&v149, v170);
  sub_1000185A8((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v105, v111, v117, v123, v124, v125, v126, (uint64_t)v127, v128, v129, v130,
    v131,
    v132,
    v133,
    v134,
    v135,
    v136,
    v137,
    v138,
    v139,
    v140,
    v141,
    v142,
    v143,
    v144,
    v145,
    v146,
    (uint64_t)v147,
    (uint64_t)v148,
    v149,
    v150,
    v151,
    v152,
    v153,
    v154,
    v155,
    v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166,
    v167,
    v168,
    v169,
    v170[0]);
  v20 = QueryType.namespace<A>(_:)(v9, v10, v11, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  v22 = v21;
  v24 = v23;
  sub_100037A7C(v170);
  v25 = sub_10001BE7C(&qword_100128D00);
  v126 = v25;
  v127 = &protocol witness table for Expression<A>;
  v123 = v20;
  v124 = v22;
  v125 = v24;
  v26 = sub_10001BE7C(&qword_100128D58);
  v27 = swift_allocObject(v26, 192, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1000F05A0;
  if (qword_100127CE0 != -1)
    swift_once(&qword_100127CE0, sub_10004D6F8);
  v28 = qword_10012CCA8;
  v29 = unk_10012CCB0;
  v30 = sub_1000189C4(&v149, v170);
  v38 = sub_1000185A8((uint64_t)v30, v31, v32, v33, v34, v35, v36, v37, v106, v112, v118, v123, v124, v125, v126, (uint64_t)v127, v128, v129, v130,
          v131,
          v132,
          v133,
          v134,
          v135,
          v136,
          v137,
          v138,
          v139,
          v140,
          v141,
          v142,
          v143,
          v144,
          v145,
          v146,
          (uint64_t)v147,
          (uint64_t)v148,
          v149,
          v150,
          v151,
          v152,
          v153,
          v154,
          v155,
          v156,
          v157,
          v158,
          v159,
          v160,
          v161,
          v162,
          v163,
          v164,
          v165,
          v166,
          v167,
          v168,
          v169,
          v170[0]);
  v41 = sub_10001022C((uint64_t)v38, v39, v40, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_10001B440(v41, v42, v43, v44, v45, v46, v47, v48, v107, v113, v119, v123, v124, v125, v126, (uint64_t)v127, v128, v129, v130,
    v131,
    v132,
    v133,
    v134,
    v135,
    v136,
    v137,
    v138,
    v139,
    v140,
    v141,
    v142,
    v143,
    v144,
    v145,
    v146,
    (uint64_t)v147,
    (uint64_t)v148,
    v149,
    v150,
    v151,
    v152,
    v153,
    v154,
    v155,
    v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166,
    v167,
    v168,
    v169,
    v170[0]);
  *(_QWORD *)(v27 + 56) = v25;
  *(_QWORD *)(v27 + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v27 + 32) = v20;
  *(_QWORD *)(v27 + 40) = v28;
  *(_QWORD *)(v27 + 48) = v29;
  if (qword_100127CE8 != -1)
    swift_once(&qword_100127CE8, sub_10004D798);
  v49 = qword_10012CCC0;
  v50 = *(_QWORD *)algn_10012CCC8;
  v51 = sub_1000189C4(&v149, v170);
  v59 = sub_1000185A8((uint64_t)v51, v52, v53, v54, v55, v56, v57, v58, v108, v114, v120, v123, v124, v125, v126, (uint64_t)v127, v128, v129, v130,
          v131,
          v132,
          v133,
          v134,
          v135,
          v136,
          v137,
          v138,
          v139,
          v140,
          v141,
          v142,
          v143,
          v144,
          v145,
          v146,
          (uint64_t)v147,
          (uint64_t)v148,
          v149,
          v150,
          v151,
          v152,
          v153,
          v154,
          v155,
          v156,
          v157,
          v158,
          v159,
          v160,
          v161,
          v162,
          v163,
          v164,
          v165,
          v166,
          v167,
          v168,
          v169,
          v170[0]);
  v62 = sub_10001022C((uint64_t)v59, v60, v61, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_10001B440(v62, v63, v64, v65, v66, v67, v68, v69, v109, v115, v121, v123, v124, v125, v126, (uint64_t)v127, v128, v129, v130,
    v131,
    v132,
    v133,
    v134,
    v135,
    v136,
    v137,
    v138,
    v139,
    v140,
    v141,
    v142,
    v143,
    v144,
    v145,
    v146,
    (uint64_t)v147,
    (uint64_t)v148,
    v149,
    v150,
    v151,
    v152,
    v153,
    v154,
    v155,
    v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166,
    v167,
    v168,
    v169,
    v170[0]);
  *(_QWORD *)(v27 + 96) = v25;
  *(_QWORD *)(v27 + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v27 + 72) = v20;
  *(_QWORD *)(v27 + 80) = v49;
  *(_QWORD *)(v27 + 88) = v50;
  if (qword_100127F50 != -1)
    swift_once(&qword_100127F50, sub_1000C45D8);
  v70 = qword_10012D4A8;
  v71 = unk_10012D4B0;
  sub_1000189C4(&v149, v171);
  v72 = sub_1000163BC();
  sub_100011818((uint64_t)v72, v73, v74, v75, (uint64_t)&type metadata for Int);
  sub_100017A0C();
  *(_QWORD *)(v27 + 136) = sub_10001BE7C(&qword_100129560);
  *(_QWORD *)(v27 + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v27 + 112) = v20;
  *(_QWORD *)(v27 + 120) = v70;
  *(_QWORD *)(v27 + 128) = v71;
  if (qword_100127F38 != -1)
    swift_once(&qword_100127F38, sub_1000C441C);
  v76 = qword_10012D490;
  v77 = qword_10012D498;
  sub_1000189C4(&v149, v171);
  sub_1000163BC();
  v78 = sub_10001BE7C((uint64_t *)&unk_100128780);
  sub_100011818(v78, v79, v80, v81, v78);
  sub_100017A0C();
  *(_QWORD *)(v27 + 176) = sub_10001BE7C(&qword_100128D30);
  *(_QWORD *)(v27 + 184) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v27 + 152) = v20;
  *(_QWORD *)(v27 + 160) = v76;
  *(_QWORD *)(v27 + 168) = v77;
  SchemaType.select(_:_:)((uint64_t)&v123, v27, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  swift_setDeallocating(v27);
  sub_10001E778();
  sub_10000E87C(&v123);
  sub_1000189C4(v172, &v149);
  v147 = &type metadata for Table;
  v148 = &protocol witness table for Table;
  v144 = sub_1000058D0((uint64_t)&unk_10011BE40);
  sub_1000189C4((void *)(v144 + 16), v171);
  v82 = qword_10012CC90;
  v83 = *(_QWORD *)algn_10012CC98;
  v84 = qword_10012CCA0;
  sub_1000189C4(&v123, v170);
  sub_1000163BC();
  QueryType.namespace<A>(_:)(v82, v83, v84, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  v86 = v85;
  v88 = v87;
  sub_100037A7C(v170);
  if (qword_100127F30 != -1)
    swift_once(&qword_100127F30, sub_1000C43C0);
  v89 = qword_10012D478;
  v90 = unk_10012D480;
  v91 = qword_10012D488;
  sub_1000189C4(&v123, v171);
  QueryType.namespace<A>(_:)(v89, v90, v91, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  v93 = v92;
  v95 = v94;
  sub_100037A7C(v171);
  == infix<A>(_:_:)();
  v97 = v96;
  v99 = v98;
  v101 = v100;
  swift_bridgeObjectRelease(v88);
  swift_bridgeObjectRelease(v86);
  swift_bridgeObjectRelease(v95);
  swift_bridgeObjectRelease(v93);
  v122[3] = (uint64_t)&type metadata for Table;
  v122[4] = (uint64_t)&protocol witness table for Table;
  v102 = sub_1000058D0((uint64_t)&unk_10011BE40);
  v103 = v102 + 16;
  *v122 = v102;
  sub_1000189C4(&v123, v172);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v101);
  QueryType.join(_:_:on:)(1, &v144, v97, v99, v101, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v103);
  swift_bridgeObjectRelease_n(v101, 2);
  swift_bridgeObjectRelease_n(v99, 2);
  sub_100037A7C(v172);
  sub_10000E87C(&v144);
  sub_100013308();
}

uint64_t sub_10004DD4C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[21];
  _BYTE v12[168];
  _QWORD __dst[21];

  if (qword_100127CD0 != -1)
    swift_once(&qword_100127CD0, sub_10004D688);
  memcpy(__dst, &unk_10012CBE8, sizeof(__dst));
  memcpy(v12, &unk_10012CBE8, sizeof(v12));
  if (qword_100127CE0 != -1)
    swift_once(&qword_100127CE0, sub_10004D6F8);
  v2 = qword_10012CCA8;
  v3 = unk_10012CCB0;
  v4 = qword_10012CCB8;
  memcpy(v11, __dst, sizeof(v11));
  sub_1000379AC(__dst);
  v5 = QueryType.namespace<A>(_:)(v2, v3, v4, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  v7 = v6;
  v9 = v8;
  sub_100037A7C(__dst);
  v11[3] = sub_10001BE7C(&qword_100128D00);
  v11[4] = &protocol witness table for Expression<A>;
  v11[0] = v5;
  v11[1] = v7;
  v11[2] = v9;
  a1[3] = &type metadata for Table;
  a1[4] = &protocol witness table for Table;
  *a1 = swift_allocObject(&unk_10011BE40, 184, 7);
  SchemaType.select(_:_:)((uint64_t)v11, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  return sub_10000E87C(v11);
}

void sub_10004DED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;

  sub_10004D7B8((uint64_t)v54);
  if (a2)
  {
    sub_10000E858(v54, v55);
    if (qword_100127CD8 != -1)
      swift_once(&qword_100127CD8, sub_10004D6D4);
    v42 = a1;
    sub_10001F64C();
    v9 = v8;
    v11 = v10;
    sub_1000189E0(v12, v8, v10, v13, v14, v15, v16, v17, v42, a2, v45, v48, v51);
    sub_1000183A8();
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v9);
    v18 = sub_10000E87C(v54);
    sub_10001B2C4(v18, v19, v20, v21, v22, v23, v24, v25, v43, v46, v49, v52, v54[0]);
  }
  if (a4)
  {
    sub_10000E858(v54, v55);
    if (qword_100127CE0 != -1)
      swift_once(&qword_100127CE0, sub_10004D6F8);
    sub_10001768C((uint64_t)&qword_10012CCA8);
    sub_10001F64C();
    sub_1000189E0(v26, v27, v28, v29, v30, v31, v32, v33, a3, a4, v45, v48, v51);
    sub_1000183A8();
    sub_1000059B0();
    sub_1000059C4();
    v34 = sub_10000E87C(v54);
    sub_10001B2C4(v34, v35, v36, v37, v38, v39, v40, v41, v44, v47, v50, v53, v54[0]);
  }
  sub_100005278(v54);
  sub_10000E87C(v54);
  sub_100017C64();
}

uint64_t sub_10004E0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  sub_10004DD4C(v25);
  if (a2)
  {
    v6 = v26;
    v3 = v27;
    sub_10000E858(v25, v26);
    if (qword_100127CD8 != -1)
      swift_once(&qword_100127CD8, sub_10004D6D4);
    sub_10001768C((uint64_t)&qword_10012CC90);
    *(_QWORD *)&v21 = a1;
    *((_QWORD *)&v21 + 1) = a2;
    sub_10001F64C();
    v8 = v7;
    v10 = v9;
    v23 = v6;
    v24 = v3;
    sub_10001795C(&v21);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v8);
    v11 = sub_10000E87C(v25);
    sub_10001B2C4(v11, v12, v13, v14, v15, v16, v17, v18, v21, v22, v23, v24, v25[0]);
  }
  Connection.prepareRowIterator(_:)(v25);
  if (v2)
  {
    sub_10000E87C(v25);
  }
  else
  {
    RowIterator.compactMap<A>(_:)();
    v3 = v20;
    sub_10000E87C(v25);
    sub_1000101FC();
    sub_1000073B0();
  }
  return v3;
}

void sub_10004E23C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_100127CE0 != -1)
    swift_once(&qword_100127CE0, sub_10004D6F8);
  Row.get<A>(_:)();
  if (v1)
  {
    swift_errorRelease(v1);
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v3 = v5;
    v4 = v6;
  }
  *a1 = v3;
  a1[1] = v4;
}

_QWORD *sub_10004E2F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  _QWORD v27[5];
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = a1;
  if (!((unint64_t)a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
    return _swiftEmptyArrayStorage;
  }
  if (a1 < 0)
    v23 = a1;
  else
    v23 = a1 & 0xFFFFFFFFFFFFFF8;
  sub_10000BFF4();
  v24 = _CocoaArrayWrapper.endIndex.getter(v23);
  sub_1000101FC();
  if (!v24)
    return _swiftEmptyArrayStorage;
  sub_10000BFF4();
  v2 = _CocoaArrayWrapper.endIndex.getter(v23);
  sub_1000101FC();
  if (!v2)
  {
    v3 = _swiftEmptyArrayStorage;
    goto LABEL_11;
  }
LABEL_3:
  v28[0] = _swiftEmptyArrayStorage;
  v3 = v28;
  sub_1000525B4();
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v4 = 0;
  v3 = (_QWORD *)v28[0];
  v26 = v1 & 0xC000000000000001;
  v31 = v1;
  do
  {
    if (v26)
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
    else
      v5 = *(id *)(v1 + 8 * v4 + 32);
    v6 = v5;
    v7 = objc_msgSend(v5, "actionIdentifier");
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = objc_msgSend(v6, "bundleIdentifier");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v28[0] = v3;
    v15 = v3[2];
    if (v15 >= v3[3] >> 1)
    {
      sub_1000525B4();
      v3 = (_QWORD *)v28[0];
    }
    ++v4;
    v3[2] = v15 + 1;
    v16 = &v3[4 * v15];
    v16[4] = v8;
    v16[5] = v10;
    v16[6] = v12;
    v16[7] = v14;
    v1 = v31;
  }
  while (v2 != v4);
LABEL_11:
  if (qword_100127CE0 != -1)
LABEL_24:
    swift_once(&qword_100127CE0, sub_10004D6F8);
  v17 = qword_10012CCA8;
  v18 = (void *)unk_10012CCB0;
  v19 = qword_10012CCB8;
  if (qword_100127CD8 != -1)
    swift_once(&qword_100127CD8, sub_10004D6D4);
  sub_10004D308(v17, v18, v19, qword_10012CC90, *(void **)algn_10012CC98, qword_10012CCA0, (uint64_t)v3);
  sub_1000059A8();
  sub_10004D7B8((uint64_t)v28);
  v20 = v29;
  v21 = v30;
  sub_10000E858(v28, v29);
  v27[3] = v20;
  v27[4] = v21;
  sub_10001795C(v27);
  QueryType.filter(_:)();
  sub_1000059C4();
  sub_1000101FC();
  v22 = sub_100005278(v27);
  sub_10000E87C(v27);
  sub_10000E87C(v28);
  return (_QWORD *)v22;
}

void sub_10004E5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[4];
  uint64_t v74;

  if (!a4)
  {
    if (a2 != 2)
    {
      if (a2 != 1)
      {
        if (a2)
          goto LABEL_17;
        sub_100018BA8(a1, 0, a3, 0, a5);
        v43 = sub_10001B2B4(v38, v39, v40, v41, v42);
        sub_10001B788(v43, v44, v45, v46, v47);
        if (v5)
          goto LABEL_17;
        v48 = a1;
        v49 = 0;
LABEL_12:
        sub_10004E78C(v48, v49, a5);
        sub_1000059C4();
        goto LABEL_17;
      }
      v50 = sub_10004ED78(a1);
      if (v50 >= 2)
      {
        sub_100018BA8(v50, v51, v52, v53, v54);
        v60 = sub_10001B2B4(v55, v56, v57, v58, v59);
        sub_10001B788(v60, v61, v62, v63, v64);
        if (v5)
          goto LABEL_17;
        v48 = a1;
        v49 = 1;
        goto LABEL_12;
      }
    }
    sub_10004ED98(a1);
    goto LABEL_17;
  }
  v74 = a1;
  sub_100018BA8(a1, a2, a3, a4, a5);
  sub_10000E858(v73, v73[3]);
  if (qword_100127CD8 != -1)
    swift_once(&qword_100127CD8, sub_10004D6D4);
  v65 = a3;
  sub_10001F64C();
  v12 = v11;
  sub_1000189E0(v13, v11, v14, v15, v16, v17, v18, v19, v65, a4, v67, v69, v71);
  sub_1000183A8();
  sub_1000101FC();
  swift_bridgeObjectRelease(v12);
  v20 = sub_10000E87C(v73);
  v28 = sub_10001B2C4(v20, v21, v22, v23, v24, v25, v26, v27, v66, v68, v70, v72, v73[0]);
  v33 = sub_10001B2B4(v28, v29, v30, v31, v32);
  sub_10001B788(v33, v34, v35, v36, v37);
  if (!v5)
  {
    v48 = v74;
    v49 = a2;
    goto LABEL_12;
  }
LABEL_17:
  sub_100017C64();
}

_QWORD *sub_10004E78C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  void *v19;
  BOOL v20;
  char v21;
  id v22;
  char v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  id v30;
  char v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  Swift::Int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  _QWORD *v73;

  v62 = type metadata accessor for LNActionRecord(0);
  v7 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v61 = (uint64_t)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (uint64_t)&v55 - v10;
  v12 = _swiftEmptyArrayStorage;
  v73 = _swiftEmptyArrayStorage;
  v13 = *(_QWORD *)(a3 + 16);
  sub_10000BFF4();
  if (!v13)
  {
LABEL_98:
    swift_bridgeObjectRelease(a3);
    return v12;
  }
  v14 = 0;
  v55 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v56 = v13;
  v65 = a3 + v55;
  v66 = *(_QWORD *)(v7 + 72);
  v67 = a1 & 0xC000000000000001;
  if (a1 < 0)
    v15 = a1;
  else
    v15 = a1 & 0xFFFFFFFFFFFFFF8;
  v68 = v15;
  v69 = a1 + 56;
  v58 = a2;
  v59 = a3;
  v70 = a1;
  v57 = v11;
  while (1)
  {
    sub_10004FD8C(v65 + v66 * v14, v11);
    if (a2 == 2)
      break;
    if (a2 == 1)
    {
      v34 = objc_msgSend((id)sub_10001F584(), "systemProtocols");
      v35 = sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
      v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34);

      if ((unint64_t)v36 >> 62)
      {
        if (v36 < 0)
          v54 = v36;
        else
          v54 = v36 & 0xFFFFFFFFFFFFFF8;
        sub_10000EC68();
        v37 = _CocoaArrayWrapper.endIndex.getter(v54);
        sub_1000117B4();
      }
      else
      {
        v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v38 = sub_10004FE50();
      result = (_QWORD *)Set.init(minimumCapacity:)(v37, v35, v38);
      v39 = (uint64_t)result;
      v72 = (uint64_t)result;
      if ((unint64_t)v36 >> 62)
      {
        if (v36 < 0)
          v40 = v36;
        else
          v40 = v36 & 0xFFFFFFFFFFFFFF8;
        sub_10000EC68();
        v3 = _CocoaArrayWrapper.endIndex.getter(v40);
        result = (_QWORD *)sub_1000117B4();
      }
      else
      {
        v3 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      a1 = v70;
      if (v3)
      {
        if (v3 < 1)
          goto LABEL_101;
        for (i = 0; i != v3; ++i)
        {
          if ((v36 & 0xC000000000000001) != 0)
            v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v36);
          else
            v42 = *(id *)(v36 + 8 * i + 32);
          sub_100032F00((uint64_t)&v71, (uint64_t)v42, v43, v44, v45, v46, v47, v48, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65,
            v66,
            v67,
            v68);

        }
        sub_1000117B4();
        v39 = v72;
        a1 = v70;
      }
      else
      {
        sub_1000117B4();
      }
      sub_10004F6C8(v39, a1);
      v50 = v49;
      swift_bridgeObjectRelease(v39);
      if ((v50 & 1) != 0)
        goto LABEL_77;
    }
    else if (!a2)
    {
      v16 = (uint64_t)objc_msgSend((id)sub_10001F584(), "systemProtocols");
      sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
      v17 = sub_10001F744();

      v64 = v14;
      if ((unint64_t)v17 >> 62)
      {
        if (v17 < 0)
          v16 = v17;
        else
          v16 = v17 & 0xFFFFFFFFFFFFFF8;
        sub_10001AC08();
        sub_10000EC68();
        v14 = _CocoaArrayWrapper.endIndex.getter(v16);
      }
      else
      {
        v14 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
        sub_10001AC08();
        sub_10000EC68();
      }
      a3 = v67;
      if (v14)
      {
        sub_1000504A8();
        while (1)
        {
          result = a2 ? (_QWORD *)sub_10001F490() : sub_10000EC8C();
          v19 = result;
          v20 = __OFADD__(v3++, 1);
          if (v20)
            break;
          if (a3)
          {
            LOBYTE(v16) = sub_1000188C4();

            if ((v16 & 1) != 0)
              goto LABEL_50;
          }
          else
          {
            if (*(_QWORD *)(a1 + 16))
            {
              sub_100018EEC();
              sub_100018380();
              if ((v21 & 1) != 0)
              {
                v22 = sub_10001B678();
                sub_1000176A0((uint64_t)v22);
                sub_10001DFDC();
                if ((v16 & 1) != 0)
                {
                  sub_1000117B4();
                  sub_100017E48();

                  goto LABEL_72;
                }
                v11 = -1;
                while (1)
                {
                  sub_10001DD14();
                  if ((v23 & 1) == 0)
                    break;
                  v24 = sub_10001CE38();
                  sub_1000176A0((uint64_t)v24);
                  sub_10001DFDC();
                  if ((v16 & 1) != 0)
                  {
                    sub_100017E48();

                    v33 = v17;
                    goto LABEL_71;
                  }
                }
              }
            }

            a3 = v67;
            a2 = v60;
          }
          if (v3 == v14)
            goto LABEL_29;
        }
        __break(1u);
        goto LABEL_100;
      }
LABEL_29:
      sub_1000117B4();
      v25 = a1;
LABEL_75:
      swift_bridgeObjectRelease(v25);
LABEL_76:
      sub_10000C064();
      sub_1000117B4();
LABEL_77:
      sub_10004FE0C(v11, v61);
      v51 = v73;
      if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0)
      {
        sub_100052650(0, v51[2] + 1, 1);
        v51 = v73;
      }
      v53 = v51[2];
      v52 = v51[3];
      v3 = v53 + 1;
      if (v53 >= v52 >> 1)
      {
        sub_100052650(v52 > 1, v53 + 1, 1);
        v51 = v73;
      }
      v51[2] = v3;
      sub_10004FE0C(v61, (uint64_t)v51 + v55 + v53 * v66);
      a1 = v70;
      goto LABEL_82;
    }
LABEL_73:
    sub_10004FDD0(v11);
LABEL_82:
    if (++v14 == v13)
    {
      v12 = v73;
      goto LABEL_98;
    }
  }
  v26 = (uint64_t)objc_msgSend((id)sub_10001F584(), "systemProtocols");
  sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
  v27 = sub_10001F744();

  v64 = v14;
  if ((unint64_t)v27 >> 62)
  {
    if (v27 < 0)
      v26 = v27;
    else
      v26 = v27 & 0xFFFFFFFFFFFFFF8;
    sub_10001AC08();
    sub_10000EC68();
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
  }
  else
  {
    v14 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_10001AC08();
    sub_10000EC68();
  }
  a3 = v67;
  if (!v14)
  {
LABEL_50:
    sub_1000117B4();
    v33 = a1;
LABEL_71:
    swift_bridgeObjectRelease(v33);
LABEL_72:
    sub_10000C064();
    sub_1000117B4();
    goto LABEL_73;
  }
  sub_1000504A8();
  while (1)
  {
    result = a2 ? (_QWORD *)sub_10001F490() : sub_10000EC8C();
    v28 = result;
    v20 = __OFADD__(v3++, 1);
    if (v20)
      break;
    if (a3)
    {
      LOBYTE(v26) = sub_1000188C4();

      if ((v26 & 1) != 0)
        goto LABEL_29;
    }
    else
    {
      if (*(_QWORD *)(a1 + 16))
      {
        sub_100018EEC();
        sub_100018380();
        if ((v29 & 1) != 0)
        {
          v30 = sub_10001B678();
          sub_1000176A0((uint64_t)v30);
          sub_10001DFDC();
          if ((v26 & 1) != 0)
          {
            sub_1000117B4();
            sub_100017E48();

            goto LABEL_76;
          }
          v11 = -1;
          while (1)
          {
            sub_10001DD14();
            if ((v31 & 1) == 0)
              break;
            v32 = sub_10001CE38();
            sub_1000176A0((uint64_t)v32);
            sub_10001DFDC();
            if ((v26 & 1) != 0)
            {
              sub_100017E48();

              v25 = v27;
              goto LABEL_75;
            }
          }
        }
      }

      a3 = v67;
      a2 = v60;
    }
    if (v3 == v14)
      goto LABEL_50;
  }
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
  return result;
}

uint64_t sub_10004ED78(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(_QWORD *)(a1 + 16);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return __CocoaSet.count.getter(a1);
}

void sub_10004ED98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  void (*v36)(_QWORD **, _QWORD);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;

  v3 = sub_10004ED78(a1);
  if (!v3)
  {
    v9 = _swiftEmptyArrayStorage;
LABEL_26:
    v83 = v9;
    v38 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
    sub_10001C2C0((unint64_t *)&qword_100129568, (uint64_t *)&unk_10012AD80, (uint64_t)&protocol conformance descriptor for [A]);
    v40 = BidirectionalCollection<>.joined(separator:)(542265120, 0xE400000000000000, v38, v39);
    v42 = v41;
    swift_bridgeObjectRelease(v9);
    v83 = 0;
    v84 = 0xE000000000000000;
    _StringGuts.grow(_:)(97);
    sub_1000137AC(0xD000000000000014, (uint64_t)"SELECT DISTINCT\n    ");
    v43._object = (void *)0x80000001000F3C30;
    v43._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v43);
    v44._countAndFlagsBits = 8236;
    v44._object = (void *)0xE200000000000000;
    String.append(_:)(v44);
    v45._countAndFlagsBits = 0x696669746E656469;
    v45._object = (void *)0xEA00000000007265;
    String.append(_:)(v45);
    v46._countAndFlagsBits = 0x20200A4D4F52460ALL;
    v46._object = (void *)0xEA00000000002020;
    String.append(_:)(v46);
    sub_10001B0A4();
    v47._countAndFlagsBits = 0x655F6E6F736A202CLL;
    v47._object = (void *)0xEC00000028686361;
    String.append(_:)(v47);
    sub_10001B0A4();
    v48._countAndFlagsBits = 46;
    v48._object = (void *)0xE100000000000000;
    String.append(_:)(v48);
    v49._countAndFlagsBits = 0x617461646174656DLL;
    v49._object = (void *)0xE800000000000000;
    String.append(_:)(v49);
    sub_1000137AC(0xD000000000000028, (uint64_t)", '$.systemProtocolMetadata')\nWHERE\n    ");
    v50._countAndFlagsBits = v40;
    v50._object = v42;
    String.append(_:)(v50);
    sub_1000059B0();
    v89 = (uint64_t)_swiftEmptyArrayStorage;
    Connection.prepare(_:_:)((uint64_t)v83, v84, (uint64_t)_swiftEmptyArrayStorage);
    sub_1000059B0();
    if (v81)
    {
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      return;
    }
    v55 = sub_1000058E4();
    v56 = (uint64_t *)&unk_10012A020;
    while (1)
    {
      if (!v55)
      {
        sub_10004E2F4(v89);
        swift_release();
        sub_1000059A8();
        return;
      }
      if (*(_QWORD *)(v55 + 16) != 2)
      {
LABEL_39:
        v79 = v55;
LABEL_40:
        swift_bridgeObjectRelease(v79);
        goto LABEL_44;
      }
      sub_100013438(v55 + 32, v51, v52, v53, v54);
      if (!v85)
        break;
      v57 = sub_10001BE7C(v56);
      if ((sub_100018688(v57, v58, v59, v60) & 1) == 0)
        goto LABEL_39;
      if (*(_QWORD *)(v55 + 16) < 2uLL)
        goto LABEL_48;
      v66 = v86;
      v65 = v87;
      sub_100013438(v55 + 72, v61, v62, v63, v64);
      v67 = sub_1000059A8();
      if (!v85)
      {
        v80 = v65;
        goto LABEL_43;
      }
      if ((sub_100018688(v67, v68, v69, v70) & 1) == 0)
      {
        v79 = v65;
        goto LABEL_40;
      }
      v71 = v56;
      v72 = v86;
      v73 = v87;
      v74 = objc_allocWithZone((Class)LNFullyQualifiedActionIdentifier);
      v75 = sub_10004FBBC(v72, v73, v66, v65);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v77 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v76 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v77 >= v76 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v77 + 1, 1);
      v78 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v77, v75);
      specialized Array._endMutation()(v78);
      v56 = v71;
LABEL_44:
      v55 = sub_1000058E4();
    }
    v80 = v55;
LABEL_43:
    swift_bridgeObjectRelease(v80);
    sub_1000131A8((uint64_t)&v83, &qword_100129578);
    goto LABEL_44;
  }
  v4 = v3;
  v89 = (uint64_t)_swiftEmptyArrayStorage;
  sub_10001573C();
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    v6 = __CocoaSet.startIndex.getter(v5);
    v8 = 1;
  }
  else
  {
    v6 = sub_100053B08(a1);
    v8 = v10 & 1;
  }
  v86 = v6;
  v87 = v7;
  v88 = v8;
  if ((v4 & 0x8000000000000000) == 0)
  {
    v11 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v11 = a1;
    v82 = v11;
    sub_1000504C0();
    do
    {
      sub_100053878(v86, v87, v88, a1);
      v13 = v12;
      v83 = (_QWORD *)v1;
      v84 = 0xE700000000000000;
      v14 = objc_msgSend(v12, "identifier");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v18._countAndFlagsBits = v15;
      v18._object = v17;
      String.append(_:)(v18);
      sub_1000101FC();
      v19._countAndFlagsBits = 39;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);

      v20 = (uint64_t)v83;
      v21 = v84;
      v22 = v89;
      if ((swift_isUniquelyReferenced_nonNull_native(v89) & 1) == 0)
      {
        sub_10001573C();
        v22 = v89;
      }
      v23 = *(_QWORD *)(v22 + 16);
      if (v23 >= *(_QWORD *)(v22 + 24) >> 1)
      {
        sub_10001573C();
        v22 = v89;
      }
      *(_QWORD *)(v22 + 16) = v23 + 1;
      v24 = v22 + 16 * v23;
      *(_QWORD *)(v24 + 32) = v20;
      *(_QWORD *)(v24 + 40) = v21;
      if ((a1 & 0xC000000000000001) != 0)
      {
        if ((v88 & 1) == 0)
          goto LABEL_49;
        v25 = __CocoaSet.Index.handleBitPattern.getter(v86, v87);
        if (v25)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v35 = sub_10001BE7C(&qword_100129570);
        v36 = (void (*)(_QWORD **, _QWORD))Set.Index._asCocoa.modify(&v83, v35);
        __CocoaSet.formIndex(after:isUnique:)(v37, isUniquelyReferenced_nonNull_native, v82);
        v36(&v83, 0);
      }
      else
      {
        v27 = v86;
        v28 = v87;
        v29 = v88;
        v30 = sub_1000BAE60(v86, v87, v88, a1);
        v32 = v31;
        v1 = v33;
        sub_10004FEA0(v27, v28, v29);
        v86 = v30;
        v87 = v32;
        sub_1000504C0();
        v88 = v34;
      }
      --v4;
    }
    while (v4);
    sub_10004FEA0(v86, v87, v88);
    v9 = (_QWORD *)v89;
    goto LABEL_26;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
}

uint64_t sub_10004F37C(uint64_t *a1)
{
  uint64_t result;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[112];
  Swift::String v33;
  _QWORD v34[10];
  _QWORD __src[21];
  _QWORD v36[21];
  _QWORD __dst[21];
  SQLite::Insert v38;

  type metadata accessor for LNActionRecord(0);
  v3 = LNActionMetadata.asJson(prettyPrinted:)(0);
  result = v3._countAndFlagsBits;
  if (!v4)
  {
    if (qword_100127CD0 != -1)
      swift_once(&qword_100127CD0, sub_10004D688);
    sub_1000165D4(v36);
    sub_1000165D4(__src);
    sub_1000379AC(v36);
    if (qword_100127CD8 != -1)
      swift_once(&qword_100127CD8, sub_10004D6D4);
    v5 = sub_10001768C((uint64_t)&qword_10012CC90);
    v6 = (void *)a1[1];
    v33._countAndFlagsBits = *a1;
    v33._object = v6;
    <- infix<A>(_:_:)(v5, v7, v8, (uint64_t)&v33, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
    v9 = sub_10001BE7C(&qword_100128D08);
    inited = swift_initStackObject(v9, v32);
    *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
    if (qword_100127CE8 != -1)
      swift_once(&qword_100127CE8, sub_10004D798);
    v11 = sub_10001768C((uint64_t)&qword_10012CCC0);
    v33 = v3;
    <- infix<A>(_:_:)(v11, v12, v13, (uint64_t)&v33, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
    sub_1000059A8();
    v14 = QueryType.insert(_:_:)((uint64_t)v34);
    v16 = v15;
    v18 = v17;
    swift_setDeallocating(inited);
    sub_10001CC3C();
    sub_100019F20(v34);
    memcpy(__dst, __src, sizeof(__dst));
    sub_100037A7C(__dst);
    v38.template._countAndFlagsBits = v14;
    v38.template._object = v16;
    v38.bindings._rawValue = v18;
    Connection.run(_:)(v38);
    if (v19)
    {
      swift_bridgeObjectRelease();
      sub_1000059C4();
      v34[0] = v19;
      swift_errorRetain(v19);
      v20 = sub_10001BE7C((uint64_t *)&unk_100129420);
      if (swift_dynamicCast(__src, v34, v20, &type metadata for Result, 0))
      {
        swift_errorRelease(v19);
        v21 = __src[1];
        v22 = __src[2];
        v23 = __src[3];
        if (LODWORD(__src[2]) == 19)
        {
          v24 = type metadata accessor for Schema.RuntimeError(0);
          v25 = sub_10004FC7C();
          sub_1000176B0(v24, v25);
          *v26 = 0xD0000000000000FALL;
          v26[1] = 0x80000001000F4190;
          v27 = swift_storeEnumTagMultiPayload(v26, v24, 0);
          swift_willThrow(v27);
          sub_1000058DC();
          sub_1000059A8();
        }
        else
        {
          v28 = __src[0];
          v29 = sub_10004FC40();
          v30 = sub_1000176B0((uint64_t)&type metadata for Result, v29);
          *(_QWORD *)v31 = v28;
          *(_QWORD *)(v31 + 8) = v21;
          *(_DWORD *)(v31 + 16) = v22;
          *(_QWORD *)(v31 + 24) = v23;
          swift_willThrow(v30);
        }
      }
      return swift_errorRelease(v34[0]);
    }
    else
    {
      swift_bridgeObjectRelease();
      return sub_1000059C4();
    }
  }
  return result;
}

uint64_t type metadata accessor for LNActionRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1001295D8;
  if (!qword_1001295D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LNActionRecord);
  return result;
}

void sub_10004F6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  id v30;
  char v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  char v37;
  uint64_t v38;
  id v39;
  char v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _QWORD v48[5];

  v2 = a2;
  v4 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v5 = a2;
    else
      v5 = a2 & 0xFFFFFFFFFFFFFF8;
    v6 = __CocoaSet.count.getter(v5);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
  }
  v7 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    v9 = __CocoaSet.count.getter(v8);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
  }
  if (v9 >= v6)
  {
    if (v4)
    {
      if (v2 < 0)
        v10 = v2;
      else
        v10 = v2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v11 = __CocoaSet.makeIterator()(v10);
      v12 = sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
      v13 = sub_10004FE50();
      Set.Iterator.init(_cocoa:)(v48, v11, v12, v13);
      v2 = v48[0];
      v14 = v48[1];
      v16 = v48[2];
      v15 = v48[3];
      v17 = v48[4];
    }
    else
    {
      v18 = -1 << *(_BYTE *)(v2 + 32);
      v14 = v2 + 56;
      v16 = ~v18;
      v19 = -v18;
      if (v19 < 64)
        v20 = ~(-1 << v19);
      else
        v20 = -1;
      v17 = v20 & *(_QWORD *)(v2 + 56);
      swift_bridgeObjectRetain();
      v15 = 0;
    }
    v21 = sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
    v42 = (unint64_t)(v16 + 64) >> 6;
    v22 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v22 = a1;
    v43 = v22;
    v45 = a1 + 56;
    v41 = v14;
    while (1)
    {
      v44 = v15;
      if (v2 < 0)
      {
        v25 = __CocoaSet.Iterator.next()();
        if (!v25)
        {
          v47 = 0;
LABEL_61:
          sub_1000358EC(v2);
          return;
        }
        v46 = v25;
        swift_dynamicCast(&v47, &v46, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v26 = v47;
        if (!v47)
          goto LABEL_61;
      }
      else
      {
        if (v17)
        {
          v23 = __clz(__rbit64(v17));
          v17 &= v17 - 1;
          v24 = v23 | (v15 << 6);
        }
        else
        {
          v27 = v15 + 1;
          if (__OFADD__(v15, 1))
          {
            __break(1u);
            return;
          }
          if (v27 >= v42)
            goto LABEL_59;
          v28 = *(_QWORD *)(v14 + 8 * v27);
          ++v15;
          if (!v28)
          {
            v15 = v27 + 1;
            if (v27 + 1 >= v42)
              goto LABEL_59;
            v28 = *(_QWORD *)(v14 + 8 * v15);
            if (!v28)
            {
              v15 = v27 + 2;
              if (v27 + 2 >= v42)
                goto LABEL_59;
              v28 = *(_QWORD *)(v14 + 8 * v15);
              if (!v28)
              {
                v29 = v44 + 4;
                while (v29 < v42)
                {
                  v28 = *(_QWORD *)(v14 + 8 * v29++);
                  if (v28)
                  {
                    v15 = v29 - 1;
                    goto LABEL_43;
                  }
                }
LABEL_59:
                v47 = 0;
                goto LABEL_61;
              }
            }
          }
LABEL_43:
          v17 = (v28 - 1) & v28;
          v24 = __clz(__rbit64(v28)) + (v15 << 6);
        }
        v26 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v24);
        v47 = v26;
        v30 = v26;
        if (!v26)
          goto LABEL_61;
      }
      if (v7)
      {
        v31 = __CocoaSet.contains(_:)(v26, v43);

        if ((v31 & 1) == 0)
          goto LABEL_56;
      }
      else
      {
        v32 = v2;
        if (!*(_QWORD *)(a1 + 16))
          goto LABEL_55;
        v33 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a1 + 40));
        v34 = -1 << *(_BYTE *)(a1 + 32);
        v35 = v33 & ~v34;
        if (((*(_QWORD *)(v45 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
          goto LABEL_55;
        v36 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v35);
        v37 = static NSObject.== infix(_:_:)(v36, v26);

        if ((v37 & 1) == 0)
        {
          v38 = ~v34;
          while (1)
          {
            v35 = (v35 + 1) & v38;
            if (((*(_QWORD *)(v45 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
              break;
            v39 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v35);
            v40 = static NSObject.== infix(_:_:)(v39, v26);

            if ((v40 & 1) != 0)
              goto LABEL_54;
          }
LABEL_55:

          v2 = v32;
LABEL_56:
          sub_1000358EC(v2);
          return;
        }
LABEL_54:

        v2 = v32;
        v7 = a1 & 0xC000000000000001;
        v14 = v41;
      }
    }
  }
}

id sub_10004FA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  NSString v9;
  uint64_t v10;
  NSURL *v11;
  void *v12;
  void *v13;
  id v14;

  v5 = v4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v10 = type metadata accessor for URL(0);
  v12 = 0;
  if (sub_10001C93C(a4, 1, v10) != 1)
  {
    URL._bridgeToObjectiveC()(v11);
    v12 = v13;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a4, v10);
  }
  v14 = objc_msgSend(v5, "initWithType:bundleIdentifier:url:", a1, v9, v12);

  return v14;
}

id sub_10004FB54(_QWORD *a1)
{
  void *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;

  v3 = a1[3];
  v4 = sub_10000E858(a1, v3);
  v5 = _bridgeAnythingToObjectiveC<A>(_:)(v4, v3);
  v6 = objc_msgSend(v1, "initWithObject:", v5);
  swift_unknownObjectRelease(v5);
  sub_10000E87C(a1);
  return v6;
}

id sub_10004FBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  NSString v7;
  NSString v8;
  id v9;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v9 = objc_msgSend(v4, "initWithActionIdentifier:bundleIdentifier:", v7, v8);

  return v9;
}

unint64_t sub_10004FC40()
{
  unint64_t result;

  result = qword_100129548;
  if (!qword_100129548)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Result, &type metadata for Result);
    atomic_store(result, (unint64_t *)&qword_100129548);
  }
  return result;
}

unint64_t sub_10004FC7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100129EF0;
  if (!qword_100129EF0)
  {
    v1 = type metadata accessor for Schema.RuntimeError(255);
    result = swift_getWitnessTable(&unk_1000F1E3C, v1);
    atomic_store(result, (unint64_t *)&qword_100129EF0);
  }
  return result;
}

uint64_t sub_10004FCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_100128740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004FD04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_10004FD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LNActionRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004FDD0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LNActionRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004FE0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LNActionRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10004FE50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100129F90;
  if (!qword_100129F90)
  {
    v1 = sub_10000795C(255, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100129F90);
  }
  return result;
}

uint64_t sub_10004FEA0(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t *sub_10004FEAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v7);
    if (sub_10001C93C((uint64_t)v10, 1, v11))
    {
      v12 = sub_10001BE7C(&qword_100128740);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      sub_100014360((uint64_t)v9, 0, 1, v11);
    }
    v14 = *(int *)(a3 + 24);
    v15 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = (uint64_t)v15;
    v16 = v15;
  }
  return v4;
}

_QWORD *sub_10004FFB4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = sub_10001C93C((uint64_t)v9, 1, v11);
  v13 = sub_10001C93C((uint64_t)v10, 1, v11);
  if (!v12)
  {
    v14 = *(_QWORD *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v15 = sub_10001BE7C(&qword_100128740);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  sub_100014360((uint64_t)v9, 0, 1, v11);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = *(void **)((char *)a2 + v16);
  v18 = *(void **)((char *)a1 + v16);
  *(_QWORD *)((char *)a1 + v16) = v17;
  v19 = v17;

  return a1;
}

_OWORD *sub_1000500F0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  if (sub_10001C93C((uint64_t)v8, 1, v9))
  {
    v10 = sub_10001BE7C(&qword_100128740);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    sub_100014360((uint64_t)v7, 0, 1, v9);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1000501B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = sub_10001C93C((uint64_t)v9, 1, v11);
  v13 = sub_10001C93C((uint64_t)v10, 1, v11);
  if (!v12)
  {
    v14 = *(_QWORD *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v15 = sub_10001BE7C(&qword_100128740);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  sub_100014360((uint64_t)v9, 0, 1, v11);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = *(void **)((char *)a1 + v16);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);

  return a1;
}

uint64_t sub_1000502E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001BE7C(&qword_100128740);
    return sub_10001C93C(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100050358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100050364);
}

uint64_t sub_100050364(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_10001BE7C(&qword_100128740);
    return sub_100014360(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_1000503D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000F05C8;
  sub_100050454(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_100050454(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100129EE0)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100129EE0);
  }
}

void sub_1000504A8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 176) = v0 + 32;
  *(_QWORD *)(v1 - 200) = v0 & 0xC000000000000001;
}

void sub_1000504D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, __int128 a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;

  sub_10001A058();
  a24 = v26;
  a25 = v28;
  v29 = v27;
  if ((unint64_t)v27 >> 62)
  {
    if (v27 < 0)
      v35 = v27;
    else
      v35 = v27 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v27);
    _CocoaArrayWrapper.endIndex.getter(v35);
    sub_100013444();
  }
  else
  {
    v25 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v25)
  {
LABEL_14:
    sub_10001B798();
    return;
  }
  a13 = _swiftEmptyArrayStorage;
  sub_1000524E4();
  if ((v25 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v25; ++i)
    {
      if ((v29 & 0xC000000000000001) != 0)
        v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v29);
      else
        v31 = *(id *)(v29 + 8 * i + 32);
      a9 = v31;
      v32 = sub_10000795C(0, &qword_100129628, INSpeakableString_ptr);
      sub_100013360((uint64_t)&a10, (uint64_t)&a9, v32, (uint64_t)&type metadata for Any + 8);
      v33 = a13;
      if ((sub_100013368() & 1) == 0)
      {
        sub_100053D20();
        v33 = a13;
      }
      v34 = v33[2];
      if (v34 >= v33[3] >> 1)
      {
        sub_100053D20();
        v33 = a13;
      }
      v33[2] = v34 + 1;
      sub_1000273C0(&a10, &v33[4 * v34 + 4]);
    }
    goto LABEL_14;
  }
  __break(1u);
}

void sub_100050638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];
  _OWORD v8[2];
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001C200();
    sub_1000524E4();
    v3 = v9;
    v4 = (uint64_t *)(v1 + 40);
    do
    {
      v5 = *v4;
      v7[0] = *(v4 - 1);
      v7[1] = v5;
      swift_bridgeObjectRetain(v5);
      sub_100013360((uint64_t)v8, (uint64_t)v7, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Any + 8);
      if ((sub_100013368() & 1) == 0)
      {
        sub_100053D20();
        v3 = v9;
      }
      v6 = *(_QWORD *)(v3 + 16);
      if (v6 >= *(_QWORD *)(v3 + 24) >> 1)
      {
        sub_100053D20();
        v3 = v9;
      }
      v4 += 2;
      *(_QWORD *)(v3 + 16) = v6 + 1;
      sub_1000273C0(v8, (_OWORD *)(v3 + 32 * v6 + 32));
      --v2;
    }
    while (v2);
  }
  sub_10001F594();
}

void sub_100050724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];
  _BYTE v9[40];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001C200();
    sub_10005261C();
    v3 = v10;
    v4 = (uint64_t *)(v1 + 40);
    do
    {
      v5 = *v4;
      v8[0] = *(v4 - 1);
      v8[1] = v5;
      swift_bridgeObjectRetain();
      v6 = sub_10001BE7C(&qword_100129578);
      sub_100013360((uint64_t)v9, (uint64_t)v8, (uint64_t)&type metadata for String, v6);
      if ((sub_100013368() & 1) == 0)
      {
        sub_10005261C();
        v3 = v10;
      }
      v7 = *(_QWORD *)(v3 + 16);
      if (v7 >= *(_QWORD *)(v3 + 24) >> 1)
      {
        sub_10005261C();
        v3 = v10;
      }
      v4 += 2;
      *(_QWORD *)(v3 + 16) = v7 + 1;
      sub_100053C08((uint64_t)v9, v3 + 40 * v7 + 32);
      --v2;
    }
    while (v2);
  }
  sub_10001F594();
}

void sub_100050820(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;
  uint64_t v12;
  _UNKNOWN **v13;
  _QWORD *v14;

  v3 = type metadata accessor for LNBundleRecord(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10000EC98();
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v14 = _swiftEmptyArrayStorage;
    sub_10005287C();
    v6 = _swiftEmptyArrayStorage;
    v7 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v8 = *(_QWORD *)(v4 + 72);
    do
    {
      sub_100053C50(v7, v1, type metadata accessor for LNBundleRecord);
      v14 = v6;
      v9 = v6[2];
      if (v9 >= v6[3] >> 1)
      {
        sub_10005287C();
        v6 = v14;
      }
      v12 = v3;
      v13 = &off_10011D668;
      v10 = sub_10001795C(&v11);
      sub_100053C50(v1, (uint64_t)v10, type metadata accessor for LNBundleRecord);
      v6[2] = v9 + 1;
      sub_100019A48(&v11, (uint64_t)&v6[5 * v9 + 4]);
      sub_100053BCC(v1);
      v7 += v8;
      --v5;
    }
    while (v5);
  }
  sub_100013308();
}

uint64_t sub_100050960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  sub_10001BE7C(&qword_10012B340);
  if (v1)
    sub_10001DD30();
  v2 = sub_1000100FC();
  return sub_10000C078(v2, v3, v4, v5);
}

uint64_t sub_1000509AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_1000165E0();
  type metadata accessor for URL(v1);
  if (v0)
    sub_10001DD30();
  v2 = sub_1000100FC();
  return sub_10000C078(v2, v3, v4, v5);
}

uint64_t sub_1000509E8(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;

  result = sub_100053B0C(a1);
  if ((v4 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  else
    return sub_100053A90(result, v3, 0, a1);
}

uint64_t sub_100050A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = sub_1000165E0();
  v4 = type metadata accessor for LNActionRecord(v3);
  if (v2)
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
    sub_100053C50(v1 + ((v5 + 32) & ~v5), v0, type metadata accessor for LNActionRecord);
  }
  v6 = sub_1000100FC();
  return sub_10000C078(v6, v7, v8, v9);
}

_QWORD *sub_100050AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;

  sub_100050B38(&qword_100127CF8, &qword_10012CCE0, (void **)algn_10012CCE8, (uint64_t)sub_100050D40);
  v1 = v0;
  v2 = sub_10001BE7C(&qword_100129620);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  result = sub_100051048((void *)1, 300, v1);
  qword_10012CCD8 = (uint64_t)result;
  return result;
}

void sub_100050B18()
{
  sub_100050B38(&qword_100127E30, &qword_10012CF80, (void **)algn_10012CF88, (uint64_t)sub_10007F71C);
}

void sub_100050B38(_QWORD *a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  _QWORD *v27;
  unint64_t v28;

  v26[0] = a4;
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10000EC98();
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[1] = sub_1000100D8(v14, (unint64_t *)&qword_1001289B0, OS_dispatch_queue_ptr);
  v27 = 0;
  v28 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease(v28);
  v27 = (_QWORD *)0xD000000000000010;
  v28 = 0x80000001000F3BB0;
  if (*a1 != -1)
    swift_once(a1, v26[0]);
  v17 = *a2;
  v18 = *a3;
  sub_100016794();
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20._countAndFlagsBits = 0x636E756F6265442ELL;
  v20._object = (void *)0xEA00000000007265;
  String.append(_:)(v20);
  v21 = v27;
  v22 = v28;
  static DispatchQoS.utility.getter();
  v27 = _swiftEmptyArrayStorage;
  v23 = sub_100053B8C();
  v24 = sub_10001BE7C((uint64_t *)&unk_1001289C0);
  v25 = sub_100035D2C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v24, v25, v10, v23);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v8);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v21, v22, v16, v12, v4, 0);
  sub_100013308();
}

uint64_t sub_100050D40()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNAppShortcutsChangedNotification);
  qword_10012CCE0 = result;
  *(_QWORD *)algn_10012CCE8 = v1;
  return result;
}

_QWORD *sub_100050D6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t inited;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  _BYTE v23[176];
  _OWORD v24[3];

  v2 = sub_1000509E8(a1);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v4 = v2;
  v5 = v3;
  v6 = sub_10001BE7C((uint64_t *)&unk_100128A60);
  v7 = type metadata accessor for Notification(0);
  v8 = swift_allocObject(v6, ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) | 7);
  *(_OWORD *)(v8 + 16) = xmmword_1000EFAE0;
  v9 = (void *)LNAppShortcutsChangedNotification;
  memset(v24, 0, 32);
  v10 = sub_10001BE7C(&qword_100129618);
  inited = swift_initStackObject(v10, v23);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  v21 = 0xD000000000000013;
  v22 = 0x80000001000F42E0;
  v12 = v9;
  sub_10001B684((uint64_t)&v21);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 80) = v5;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNAppShortcutsChangedNotificationAppBundleIdentifiersKey);
  v22 = v13;
  v14 = sub_10001B684((uint64_t)&v21);
  v15 = sub_1000100D8(v14, (unint64_t *)&qword_100128D28, NSArray_ptr);
  sub_1000101B0();
  sub_100052268();
  v17 = v16;
  swift_bridgeObjectRelease(a1);
  sub_100050638(v17);
  swift_release();
  v18 = sub_100050F54();
  *(_QWORD *)(inited + 168) = v15;
  *(_QWORD *)(inited + 144) = v18;
  v19 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  Notification.init(name:object:userInfo:)(v12, v24, v19);
  return (_QWORD *)v8;
}

id sub_100050F54()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  Array._bridgeToObjectiveC()();
  sub_100013444();
  v3 = objc_msgSend(v2, "initWithArray:", v1);

  return v3;
}

uint64_t sub_100050FC0(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  void *object;

  v2 = swift_bridgeObjectRetain(a1);
  v3._countAndFlagsBits = Set.description.getter(v2, &type metadata for String, &protocol witness table for String);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(object);
  return 0x676E697461647075;
}

uint64_t sub_100051040()
{
  uint64_t *v0;

  return sub_100050FC0(*v0);
}

_QWORD *sub_100051048(void *a1, uint64_t a2, uint64_t a3)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 + 128)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 + 136)) = 0;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v5 = a2;
    v3 = a1;
    if (qword_100127E70 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100127E70, sub_100090544);
LABEL_3:
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100012A40(v7, (uint64_t)qword_10012D0C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))((uint64_t)v4 + qword_10012D610, v8, v7);
  *(_QWORD *)((char *)v4 + qword_10012D618) = v6;
  v4[2] = v5;
  if (!v3)
  {
    v9 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    goto LABEL_7;
  }
  if (v3 == (id)1)
  {
    v9 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
LABEL_7:
    v3 = v9;
  }
  v4[3] = v3;
  return v4;
}

void sub_10005116C(void *a1, uint64_t a2, uint64_t a3)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v7 = (_QWORD *)((char *)v4 + *(_QWORD *)(*v4 + 128));
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 + 136)) = 0;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v5 = a2;
    v3 = a1;
    if (qword_100127E70 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100127E70, sub_100090544);
LABEL_3:
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100012A40(v8, (uint64_t)qword_10012D0C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))((uint64_t)v4 + qword_10012D610, v9, v8);
  *(_QWORD *)((char *)v4 + qword_10012D618) = v6;
  v4[2] = v5;
  if (!v3)
  {
    v10 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    goto LABEL_7;
  }
  if (v3 == (id)1)
  {
    v10 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
LABEL_7:
    v3 = v10;
  }
  v4[3] = v3;
  sub_10001ADFC();
}

uint64_t sub_100051288(uint64_t a1, uint64_t a2)
{
  return sub_1000512B0(a1, a2);
}

uint64_t sub_10005129C(uint64_t a1, uint64_t a2)
{
  return sub_1000512B0(a1, a2);
}

uint64_t sub_1000512B0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;

  if (a2 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    sub_1000163C4();
    v7 = v5 + 8 * v6;
    if (v2 + 8 * v6 > v5)
    {
      v8 = v7 >= v2;
      v9 = v7 == v2;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    if (v9 || !v8)
    {
      sub_10000795C(0, v3, v4);
      v10 = sub_10001B0C0();
      return sub_10001AE28(v10);
    }
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  __break(1u);
  return result;
}

uint64_t sub_100051350()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  sub_10001357C();
  if (v3 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    v4 = v0 + 32 * v1;
    if (v2 + 32 * v1 > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_100017C80(v2);
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_1000513E8(uint64_t a1, uint64_t a2)
{
  return sub_100052048(a1, a2);
}

uint64_t sub_1000513F4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  if (a2 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    sub_1000163C4();
    v5 = v3 + 32 * v4;
    if (v2 + 32 * v4 > v3)
    {
      v6 = v5 >= v2;
      v7 = v5 == v2;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7 || !v6)
    {
      sub_10001BE7C(&qword_100128A58);
      v8 = sub_10001B0C0();
      return sub_10001AE28(v8);
    }
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_100051490(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100051560()
{
  return sub_1000519B4();
}

uint64_t sub_10005156C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
    {
      sub_10001BE7C(&qword_1001296C0);
      return swift_arrayInitWithCopy(a3);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10005165C(uint64_t a1, uint64_t a2)
{
  return sub_100052048(a1, a2);
}

uint64_t sub_100051668(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  if (a2 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    sub_100018BB4();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_10001BE7C((uint64_t *)&unk_10012B3A0);
      v6 = sub_10001B0C0();
      return sub_10001AE28(v6);
    }
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_1000516F8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
    {
      sub_10001BE7C(&qword_100129690);
      return swift_arrayInitWithCopy(a3);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000517E4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000518B0(uint64_t a1, uint64_t a2)
{
  return sub_1000512B0(a1, a2);
}

uint64_t sub_1000518C4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 48 * a2 <= a1 || a1 + 48 * a2 <= a3)
    {
      sub_10001BE7C(&qword_1001296A0);
      return swift_arrayInitWithCopy(a3);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000519B4()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  sub_10001357C();
  if (v3 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    v4 = v0 + 24 * v1;
    if (v2 + 24 * v1 > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_100017C80(v2);
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100051A44(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3)
    {
      sub_10001BE7C(&qword_100129578);
      return swift_arrayInitWithCopy(a3);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100051B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;

  if (a2 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    sub_1000163C4();
    v6 = *(_QWORD *)(*(_QWORD *)(v5(0) - 8) + 72) * v2;
    v7 = v3 + v6;
    v8 = v4 + v6;
    if (v7 <= v4 || v8 <= v3)
    {
      v10 = sub_10001B0C0();
      return sub_10001AE28(v10);
    }
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  __break(1u);
  return result;
}

uint64_t sub_100051BD8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100051CA8()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  sub_10001357C();
  if (v3 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    v4 = v0 + (v1 << 6);
    if (v2 + (v1 << 6) > v0)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
      return sub_100017C80(v2);
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100051D3C(uint64_t a1, uint64_t a2)
{
  return sub_1000512B0(a1, a2);
}

uint64_t sub_100051D50(uint64_t a1, uint64_t a2)
{
  return sub_1000512B0(a1, a2);
}

uint64_t sub_100051D64(uint64_t a1, uint64_t a2)
{
  return sub_1000512B0(a1, a2);
}

uint64_t sub_100051D78(uint64_t a1, uint64_t a2)
{
  return sub_1000512B0(a1, a2);
}

uint64_t sub_100051D8C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  if (a2 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    sub_1000163C4();
    v5 = v3 + 16 * v4;
    if (v2 + 16 * v4 > v3)
    {
      v6 = v5 >= v2;
      v7 = v5 == v2;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7 || !v6)
    {
      sub_10001BE7C(&qword_100128AE0);
      v8 = sub_10001B0C0();
      return sub_10001AE28(v8);
    }
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

void *sub_100051E28(char *__src, uint64_t a2, char *__dst)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  if (a2 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    if (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst)
      return memcpy(__dst, __src, 8 * a2);
    sub_10001766C();
    sub_100018360();
  }
  result = (void *)sub_100017680(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_100051EC0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 8 * a2 <= a1 || a1 + 8 * a2 <= a3)
    {
      sub_10001BE7C(&qword_100129670);
      return swift_arrayInitWithCopy(a3);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100051FAC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  if (a2 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    sub_100018BB4();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_10001BE7C(&qword_100128B18);
      v6 = sub_10001B0C0();
      return sub_10001AE28(v6);
    }
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_10005203C(uint64_t a1, uint64_t a2)
{
  return sub_100052048(a1, a2);
}

uint64_t sub_100052048(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  if (a2 < 0)
  {
    sub_10001766C();
    sub_10001ABE8();
  }
  else
  {
    sub_100018BB4();
    if (!v6 && v5)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
    {
      sub_10001BE7C(v3);
      v7 = sub_10001B0C0();
      return sub_10001AE28(v7);
    }
    sub_10001766C();
    sub_100018360();
  }
  result = sub_100017680(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

uint64_t sub_1000520D4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(sub_10001BE7C(&qword_100128A38) - 8) + 72) * a2;
    v6 = a3 + v5;
    v7 = a1 + v5;
    if (v6 <= a1 || v7 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

void sub_1000521CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;
  char v34;

  sub_10001A058();
  a25 = v26;
  a26 = v28;
  v29 = *(_QWORD *)(v27 + 16);
  if (v29)
  {
    v30 = v27;
    v31 = sub_10001BE7C(&qword_100129698);
    v32 = (_QWORD *)sub_1000100C8(v31, 48 * v29 + 32);
    v33 = j__malloc_size(v32);
    v32[2] = v29;
    v32[3] = 2 * ((uint64_t)(v33 - 32) / 48);
    sub_100053278((uint64_t)&a10, (uint64_t)(v32 + 4), v29, v30);
    sub_1000101B0();
    sub_100017A20();
    if (!v34)
      __break(1u);
  }
  sub_10001B798();
}

void sub_100052268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  size_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  sub_10001A058();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
    v3 = (const void *)sub_1000100C8(v2, 16 * v1 + 32);
    v4 = j__malloc_size(v3);
    sub_10001F49C(2 * ((uint64_t)(v4 - 32) / 16));
    sub_100053484(v5, v6, v7, v8);
    sub_100053D08();
    sub_100017A20();
    if (!v9)
      __break(1u);
  }
  sub_10001B798();
}

void sub_1000522E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1000523C0(a1, a2, a3, a4);
}

void sub_1000522FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (!v5)
      goto LABEL_8;
    if (v5 > 0)
    {
      v8 = sub_10001BE7C(&qword_100128B10);
      v9 = (_QWORD *)sub_1000100C8(v8, 40 * v5 + 32);
      v10 = j__malloc_size(v9);
      v9[2] = v5;
      v9[3] = 2 * ((uint64_t)(v10 - 32) / 40);
    }
    if (v4 != a3)
    {
      sub_100051FAC(a2 + 40 * a3, v5);
LABEL_8:
      sub_10001ADFC();
      return;
    }
  }
  __break(1u);
}

void sub_1000523AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1000523C0(a1, a2, a3, a4);
}

void sub_1000523C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (!v5)
      goto LABEL_8;
    if (v5 > 0)
    {
      v8 = sub_10001BE7C(&qword_100128750);
      v9 = (_QWORD *)sub_1000100C8(v8, 8 * v5 + 32);
      j__malloc_size(v9);
      sub_100013E24();
      v9[2] = v5;
      v9[3] = v10;
    }
    if (v4 != a3)
    {
      sub_1000512B0(a2 + 8 * a3, v5);
LABEL_8:
      sub_1000110FC();
      return;
    }
  }
  __break(1u);
}

void sub_100052474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  sub_10001A058();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = sub_10001BE7C(&qword_100128750);
    v3 = (const void *)sub_1000100C8(v2, 8 * v1 + 32);
    j__malloc_size(v3);
    sub_100013E24();
    sub_10001F49C(v4);
    sub_100053680(v5, v6, v7, v8);
    sub_100053D08();
    sub_100017A20();
    if (!v9)
      __break(1u);
  }
  sub_10001B798();
}

void sub_1000524E4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100052A84();
  *v0 = v1;
}

void sub_100052518()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100052908();
  *v0 = v1;
}

void sub_10005254C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100052908();
  *v0 = v1;
}

void sub_100052580()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100052EC4();
  *v0 = v1;
}

void sub_1000525B4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100052A84();
  *v0 = v1;
}

void sub_1000525E8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100052A84();
  *v0 = v1;
}

void sub_10005261C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000529D4();
  *v0 = v1;
}

size_t sub_100052650(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_100052BE0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void sub_10005266C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000529D4();
  *v0 = v1;
}

void sub_1000526A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_100005510(a1, a2, a3, *v3, &qword_100129648, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100031128, (uint64_t)&unk_100129650, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))sub_10001FB00);
  *v3 = v4;
}

void sub_1000526DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_100005510(a1, a2, a3, *v3, &qword_100128B28, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100031128, (uint64_t)&type metadata for LNAssistantAppEntityRecord, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))sub_1000519B4);
  *v3 = v4;
}

void sub_100052718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_100005510(a1, a2, a3, *v3, &qword_100128B30, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100031128, (uint64_t)&type metadata for LNAssistantIntentRecord, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))sub_1000519B4);
  *v3 = v4;
}

void sub_100052754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_100005510(a1, a2, a3, *v3, &qword_100129680, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100031128, (uint64_t)&unk_100129688, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))sub_10001FB00);
  *v3 = v4;
}

void sub_100052790()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100015770();
  *v0 = v1;
}

void sub_1000527C4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100052D2C();
  *v0 = v1;
}

void sub_1000527F8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100052D2C();
  *v0 = v1;
}

void sub_10005282C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000529D4();
  *v0 = v1;
}

char *sub_100052860(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100052DE4(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_10005287C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100052EC4();
  *v0 = v1;
}

size_t sub_1000528B0(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_100052F5C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void sub_1000528CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_100005510(a1, a2, a3, *v3, (uint64_t *)&unk_1001289F0, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100031128, (uint64_t)&type metadata for LNAppShortcutRecord, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))sub_1000519B4);
  *v3 = v4;
}

void sub_100052908()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  sub_100011834();
  if ((v5 & 1) != 0)
  {
    sub_100018654();
    if (v6 != v7)
    {
      sub_1000158DC();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013344();
  if (v4)
  {
    v13 = sub_1000101F4(v8, v9, v10, v11, v12);
    v14 = (_QWORD *)sub_1000100C8(v13, 24 * v4 + 32);
    sub_10001F654(v14);
  }
  v15 = sub_10001B454();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15);
  }
  sub_10001BFF8();
  sub_1000110FC();
}

void sub_10005299C()
{
  sub_100015770();
}

void sub_1000529B8()
{
  sub_1000529D4();
}

void sub_1000529D4()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  sub_100011834();
  if ((v5 & 1) != 0)
  {
    sub_100018654();
    if (v6 != v7)
    {
      sub_1000158DC();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013344();
  if (v4)
  {
    v13 = sub_1000101F4(v8, v9, v10, v11, v12);
    v14 = (_QWORD *)sub_1000100C8(v13, 40 * v4 + 32);
    sub_10001F654(v14);
  }
  v15 = sub_10001B454();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15);
  }
  sub_10001BFF8();
  sub_1000110FC();
}

void sub_100052A68()
{
  sub_100052A84();
}

void sub_100052A84()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_100011834();
  if ((v5 & 1) != 0)
  {
    sub_100018654();
    if (v6 != v7)
    {
      sub_1000158DC();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013344();
  if (v4)
  {
    v13 = sub_1000101F4(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_1000100C8(v13, 32 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_1000058F0(v15 - 32);
  }
  v16 = sub_10001B454();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_10001BFF8();
  sub_10001ADFC();
}

void sub_100052B20(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  if ((a3 & 1) != 0)
  {
    sub_100018654();
    if (v7 != v8)
    {
      sub_1000158DC();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (v10)
  {
    v11 = sub_10001BE7C(&qword_100129698);
    v12 = (char *)sub_1000100C8(v11, 48 * v10 + 32);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 48);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_100031254(v15, v9, v14);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000518C4((unint64_t)v15, v9, (unint64_t)v14);
  }
  sub_10001BFF8();
  sub_10001ADFC();
}

size_t sub_100052BE0(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10001BE7C(&qword_1001296D0);
  v11 = *(_QWORD *)(type metadata accessor for LNActionRecord(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_24;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LNActionRecord(0) - 8) + 80);
  v18 = a4 + ((v17 + 32) & ~v17);
  if ((v5 & 1) != 0)
  {
    sub_1000312B4(v18, v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100051B34(v18, v8);
  }
  swift_release();
  return (size_t)v15;
}

void sub_100052D2C()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_100011834();
  if ((v5 & 1) != 0)
  {
    sub_100018654();
    if (v6 != v7)
    {
      sub_1000158DC();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013344();
  if (v4)
  {
    v13 = sub_1000101F4(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_1000100C8(v13, 8 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_1000058F0(v15 - 32);
  }
  v16 = sub_10001B454();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_10001BFF8();
  sub_10001ADFC();
}

void sub_100052DC8()
{
  sub_1000529D4();
}

char *sub_100052DE4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001BE7C(&qword_100128B20);
    v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 64);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    sub_100031198((char *)(a4 + 32), v8, v11 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100051CA8();
  }
  swift_release();
  return v11;
}

void sub_100052EC4()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  sub_100011834();
  if ((v4 & 1) != 0)
  {
    sub_100018654();
    if (v5 != v6)
    {
      sub_1000158DC();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  sub_100013344();
  if (v3)
  {
    v12 = sub_1000101F4(v7, v8, v9, v10, v11);
    v13 = (_QWORD *)sub_1000100C8(v12, 40 * v3 + 32);
    sub_10001F654(v13);
  }
  v14 = sub_10001B454();
  if ((v2 & 1) != 0)
  {
    v1(v14);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_100052048(v14, v15);
  }
  sub_10001BFF8();
  sub_1000110FC();
}

size_t sub_100052F5C(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10001BE7C(&qword_100129638);
  v11 = *(_QWORD *)(sub_10001BE7C(&qword_100128A38) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_24;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001BE7C(&qword_100128A38) - 8) + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = a4 + v18;
  if ((v5 & 1) != 0)
  {
    sub_100031408(v19, v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000520D4(v19, v8, (unint64_t)v15 + v18);
  }
  swift_release();
  return (size_t)v15;
}

unint64_t sub_1000530A8(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

void sub_1000530CC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_1000189EC();
  v2 = sub_100017E54((uint64_t)v1);
  sub_10005318C(v2, v3, v4);
  *(_QWORD *)(v0 + 32) = v5;
  sub_10001000C();
}

void sub_100053100()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;

  v1 = sub_1000189EC();
  v2 = (_QWORD *)sub_100017E54((uint64_t)v1);
  *(_QWORD *)(v0 + 32) = sub_1000531C8(v2, v3, v4);
  sub_10001000C();
}

void sub_100053130()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_1000189EC();
  v2 = sub_100017E54((uint64_t)v1);
  sub_100053234(v2, v3, v4);
  *(_QWORD *)(v0 + 32) = v5;
  sub_10001000C();
}

void sub_100053160(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void sub_10005318C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001B2D0(a1, a2, a3);
  if (v4)
    v5 = sub_10001E8EC();
  else
    v5 = (uint64_t)sub_100010240();
  *v3 = v5;
  sub_10001000C();
}

void (*sub_1000531C8(_QWORD *a1, unint64_t a2, uint64_t a3))(id *)
{
  unint64_t v6;
  id v7;

  v6 = a3 & 0xC000000000000001;
  sub_1000530A8(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6)
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  else
    v7 = *(id *)(a3 + 8 * a2 + 32);
  *a1 = v7;
  return sub_100053D04;
}

void sub_100053234(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001B2D0(a1, a2, a3);
  if (v4)
    v5 = sub_10001E8EC();
  else
    v5 = (uint64_t)sub_100010240();
  *v3 = v5;
  sub_10001000C();
}

void sub_100053270(id *a1)
{

}

uint64_t sub_100053278(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(a4 + 48) + 32 * v16;
    v22 = *(_QWORD *)(v20 + 16);
    v21 = *(_QWORD *)(v20 + 24);
    v23 = *(_OWORD *)(*(_QWORD *)(a4 + 56) + 16 * v16);
    *(_OWORD *)v11 = *(_OWORD *)v20;
    *(_QWORD *)(v11 + 16) = v22;
    *(_QWORD *)(v11 + 24) = v21;
    *(_OWORD *)(v11 + 32) = v23;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 48;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100053484(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_100053680(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_100053878(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  char v16;
  id v17;
  char v18;
  uint64_t v19;
  char v20;
  id v21;
  char v22;
  id v23;
  uint64_t v24;
  void *v25;

  v8 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v12 = __CocoaSet.Index.element.getter(v8, a2);
        v24 = v12;
        v13 = sub_1000100D8(v12, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
        swift_unknownObjectRetain(v12);
        sub_100013360((uint64_t)&v25, (uint64_t)&v24, (uint64_t)&type metadata for Swift.AnyObject + 8, v13);
        v4 = v25;
        swift_unknownObjectRelease(v12);
        v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v15 = -1 << *(_BYTE *)(a4 + 32);
        v8 = v14 & ~v15;
        sub_100053D28();
        if ((v16 & 1) != 0)
        {
          v17 = sub_1000059E4();
          v18 = sub_1000188D0((uint64_t)v17);

          if ((v18 & 1) == 0)
          {
            v19 = ~v15;
            do
            {
              v8 = (v8 + 1) & v19;
              sub_100053D28();
              if ((v20 & 1) == 0)
                goto LABEL_24;
              v21 = sub_1000059E4();
              v22 = sub_1000188D0((uint64_t)v21);

            }
            while ((v22 & 1) == 0);
          }

LABEL_20:
          v23 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v8);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v9 = a4;
  else
    v9 = a4 & 0xFFFFFFFFFFFFFF8;
  v10 = __CocoaSet.element(at:)(a1, a2, v9);
  v24 = v10;
  v11 = sub_1000100D8(v10, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
  swift_unknownObjectRetain(v10);
  sub_100013360((uint64_t)&v25, (uint64_t)&v24, (uint64_t)&type metadata for Swift.AnyObject + 8, v11);
  swift_unknownObjectRelease(v10);
}

uint64_t sub_100053A90(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
    sub_1000101B0();
    return v4;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100053B0C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

unint64_t sub_100053B8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100128190;
  if (!qword_100128190)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_100128190);
  }
  return result;
}

uint64_t sub_100053BCC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LNBundleRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100053C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_100129578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100053C50(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for AppShortcutsChangedNotification()
{
  return &type metadata for AppShortcutsChangedNotification;
}

unint64_t sub_100053CA4(uint64_t a1)
{
  unint64_t result;

  result = sub_100053CC8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100053CC8()
{
  unint64_t result;

  result = qword_1001296D8;
  if (!qword_1001296D8)
  {
    result = swift_getWitnessTable(&unk_1000F0620, &type metadata for AppShortcutsChangedNotification);
    atomic_store(result, (unint64_t *)&qword_1001296D8);
  }
  return result;
}

uint64_t sub_100053D08()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_100053D20()
{
  sub_1000524E4();
}

_QWORD *sub_100053D3C(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_33;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v27 = v2;
      v4 = 0;
      v30 = v2 & 0xFFFFFFFFFFFFFF8;
      v31 = v2 & 0xC000000000000001;
      v29 = v2 + 32;
      v5 = a2;
      while (1)
      {
        if (v31)
        {
          v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v27);
        }
        else
        {
          if (v4 >= *(_QWORD *)(v30 + 16))
          {
            __break(1u);
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
          v6 = *(id *)(v29 + 8 * v4);
        }
        v7 = v6;
        if (__OFADD__(v4++, 1))
          goto LABEL_31;
        v9 = objc_msgSend(v6, "identifier");
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v12 = v11;

        v13 = v5[2];
        if (!v13)
        {

          swift_bridgeObjectRelease(v12);
          goto LABEL_17;
        }
        v14 = v5[4];
        v15 = v5[5];
        v16 = v14 == v10 && v15 == v12;
        if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v10, v12, 0) & 1) == 0)
          break;
LABEL_14:
        v17 = swift_bridgeObjectRelease(v12);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        v18 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v7);
        specialized ContiguousArray._endMutation()(v19);
LABEL_15:
        v5 = a2;
LABEL_17:
        if (v4 == v3)
        {
          v2 = v27;
          goto LABEL_37;
        }
      }
      if (v13 == 1)
        break;
      v2 = (uint64_t)(a2 + 7);
      v20 = 1;
      while (1)
      {
        v21 = v20 + 1;
        if (__OFADD__(v20, 1))
          break;
        v22 = *(_QWORD *)(v2 - 8);
        v23 = *(_QWORD *)v2;
        v24 = v22 == v10 && v23 == v12;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v10, v12, 0) & 1) != 0)
          goto LABEL_14;
        v2 += 16;
        ++v20;
        if (v21 == v13)
          goto LABEL_28;
      }
LABEL_32:
      __break(1u);
LABEL_33:
      if (v2 < 0)
        v25 = v2;
      else
        v25 = v2 & 0xFFFFFFFFFFFFFF8;
      v3 = _CocoaArrayWrapper.endIndex.getter(v25);
      if (!v3)
        goto LABEL_37;
    }
LABEL_28:

    swift_bridgeObjectRelease(v12);
    goto LABEL_15;
  }
LABEL_37:
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v2);
  return _swiftEmptyArrayStorage;
}

void sub_100053F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v5[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1000273C0((_OWORD *)a1, v5);
    sub_1000558E4((uint64_t)v5, a2);
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    sub_1000131A8(a1, &qword_100128A40);
    sub_10004B63C(a2, a3, v5);
    swift_bridgeObjectRelease(a3);
    sub_1000131A8((uint64_t)v5, &qword_100128A40);
  }
}

void sub_100054000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v6 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_10001C93C(a1, 1, v9) == 1)
  {
    sub_1000131A8(a1, (uint64_t *)&unk_1001281C0);
    sub_10004B728();
    swift_bridgeObjectRelease(a3);
    sub_1000131A8((uint64_t)v8, (uint64_t *)&unk_1001281C0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    sub_10005596C((uint64_t)v12, a2);
    swift_bridgeObjectRelease(a3);
  }
}

void sub_100054130(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    sub_10001573C();
    if (v2 < 0)
    {
      __break(1u);
      return;
    }
    v3 = 0;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
      else
        v4 = *(id *)(a1 + 8 * v3 + 32);
      v5 = v4;
      v6 = objc_msgSend(v4, "key");
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v9 = v8;

      v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_10001573C();
      ++v3;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v7;
      v11[5] = v9;
      if (v2 == v3)
        return;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    sub_10000BFF4();
    v2 = _CocoaArrayWrapper.endIndex.getter(v12);
    sub_1000101FC();
  }
}

void sub_1000542A0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;

  v7 = a1;
  if (a1 >> 62)
    goto LABEL_14;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v8)
  {
    while (1)
    {
      sub_10005266C();
      if (v8 < 0)
        break;
      v9 = 0;
      v17 = v7 & 0xC000000000000001;
      v10 = v7;
      while (v8 != v9)
      {
        if (v17)
          v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
        else
          v11 = *(id *)(v7 + 8 * v9 + 32);
        v12 = v11;
        v14 = _swiftEmptyArrayStorage[2];
        v13 = _swiftEmptyArrayStorage[3];
        swift_bridgeObjectRetain(a3);
        swift_bridgeObjectRetain(a5);
        if (v14 >= v13 >> 1)
          sub_10005266C();
        ++v9;
        _swiftEmptyArrayStorage[2] = v14 + 1;
        v15 = &_swiftEmptyArrayStorage[5 * v14];
        v15[4] = a2;
        v15[5] = a3;
        v15[6] = a4;
        v15[7] = a5;
        v15[8] = v12;
        v7 = v10;
        if (v8 == v9)
          goto LABEL_18;
      }
      __break(1u);
LABEL_14:
      if (v7 < 0)
        v16 = v7;
      else
        v16 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v7);
      v8 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease(v7);
      if (!v8)
        goto LABEL_18;
    }
    __break(1u);
  }
  else
  {
LABEL_18:
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
  }
}

void *sub_10005444C()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0xD000000000000015, 0x80000001000F43B0, 0, 0);
  return memcpy(&unk_1001296E0, __src, 0xA8uLL);
}

uint64_t sub_1000544A0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100129848);
  sub_10001C2C0(&qword_100129850, &qword_100129848, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000016, 0x80000001000F4390, v0, v1);
}

uint64_t sub_100054510()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D00);
  sub_10001C2C0((unint64_t *)&qword_100129FA0, &qword_100128D00, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000010, 0x80000001000F3C30, v0, v1);
}

uint64_t sub_100054580()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D00);
  sub_10001C2C0((unint64_t *)&qword_100129FA0, &qword_100128D00, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000012, 0x80000001000F4370, v0, v1);
}

uint64_t sub_1000545F0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D00);
  sub_10001C2C0((unint64_t *)&qword_100129FA0, &qword_100128D00, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x79747265706F7270, 0xED0000656C746954, v0, v1);
}

uint64_t sub_100054668()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D00);
  sub_10001C2C0((unint64_t *)&qword_100129FA0, &qword_100128D00, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000010, 0x80000001000F4350, v0, v1);
}

uint64_t sub_1000546D8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D00);
  sub_10001C2C0((unint64_t *)&qword_100129FA0, &qword_100128D00, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x79747265706F7270, 0xE800000000000000, v0, v1);
}

uint64_t sub_100054744()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D30);
  sub_10001C2C0(&qword_100128D38, &qword_100128D30, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000016, 0x80000001000F4330, v0, v1);
}

uint64_t sub_1000547B4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D30);
  sub_10001C2C0(&qword_100128D38, &qword_100128D30, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000020, 0x80000001000F4300, v0, v1);
}

void sub_100054824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[168];
  _QWORD v12[21];
  _QWORD v13[21];
  _BYTE v14[176];

  sub_10000C038();
  v2 = v1;
  if (qword_100127D00 != -1)
    swift_once(&qword_100127D00, sub_10005444C);
  sub_1000189C4(v13, &unk_1001296E0);
  sub_1000379AC(v13);
  if (qword_100127D08 != -1)
    swift_once(&qword_100127D08, sub_1000544A0);
  type metadata accessor for UUID(0);
  == infix<A>(_:_:)();
  v4 = v3;
  v6 = v5;
  sub_1000189C4(v11, v13);
  sub_1000100E0();
  sub_100016794();
  sub_10000C084((uint64_t)v12);
  sub_1000117AC(v6);
  sub_1000117AC(v4);
  sub_100037A7C(v13);
  sub_1000189C4(v14, v12);
  v12[3] = &type metadata for Table;
  v12[4] = &protocol witness table for Table;
  v12[0] = sub_1000058D0((uint64_t)&unk_10011BED0);
  sub_1000189C4((void *)(v12[0] + 16), v14);
  v7 = Connection.pluck(_:)(v12);
  v9 = v8;
  sub_10000E87C(v12);
  if (!v0)
  {
    if (v7)
    {
      sub_1000549EC(v7, v9, v2);
      sub_1000059B0();
      sub_1000059C4();
    }
    else
    {
      v10 = sub_1000192B4();
      sub_100014360(v2, 1, 1, v10);
    }
  }
  sub_1000117E8();
}

uint64_t sub_1000549EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v6 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - v14;
  if (qword_100127D08 != -1)
    swift_once(&qword_100127D08, sub_1000544A0);
  Row.get<A>(_:)();
  if (qword_100127D10 != -1)
    swift_once(&qword_100127D10, sub_100054510);
  Row.get<A>(_:)();
  v16 = v48;
  v46 = v47;
  if (qword_100127D18 != -1)
    swift_once(&qword_100127D18, sub_100054580);
  Row.get<A>(_:)();
  v44 = v47;
  v45 = v48;
  if (qword_100127D20 != -1)
    swift_once(&qword_100127D20, sub_1000545F0);
  Row.get<A>(_:)();
  v42 = v47;
  v43 = v48;
  if (qword_100127D28 != -1)
    swift_once(&qword_100127D28, sub_100054668);
  Row.get<A>(_:)();
  v40 = v47;
  v41 = v48;
  if (qword_100127D30 != -1)
    swift_once(&qword_100127D30, sub_1000546D8);
  Row.get<A>(_:)();
  v38 = v47;
  v39 = v48;
  if (qword_100127D38 != -1)
    swift_once(&qword_100127D38, sub_100054744);
  Row.get<A>(_:)(qword_100129818, unk_100129820, qword_100129828, a1, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v17, v34, v35, v36, (uint64_t)v37, v38, (uint64_t)v39, v40, (uint64_t)v41, v42, (uint64_t)v43, v44,
    (uint64_t)v45);
  v36 = v47;
  v37 = v48;
  if (qword_100127D40 != -1)
    swift_once(&qword_100127D40, sub_1000547B4);
  Row.get<A>(_:)(qword_100129830, *(uint64_t *)algn_100129838, qword_100129840, a1, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v18, v34, v35, v36, (uint64_t)v37, v38, (uint64_t)v39, v40, (uint64_t)v41, v42, (uint64_t)v43, v44,
    (uint64_t)v45);
  v34 = v47;
  v35 = v48;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
  v20 = sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
  v21 = v42;
  v42 = v20;
  v43 = (_QWORD *)LNStaticDeferredLocalizedString.init(localizedStringResourceJSON:)(v21, v43);
  sub_10000795C(0, &qword_1001284E0, LNProperty_ptr);
  v22 = type metadata accessor for URL(0);
  sub_100014360((uint64_t)v8, 1, 1, v22);
  v38 = static LNProperty.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v38, v39, v8, 0);
  sub_1000131A8((uint64_t)v8, &qword_100128740);
  swift_bridgeObjectRelease();
  v23 = (uint64_t)v37;
  if (v37)
  {
    swift_bridgeObjectRetain();
    v24 = LNStaticDeferredLocalizedString.init(localizedStringResourceJSON:)(v36, v23);
  }
  else
  {
    v24 = 0;
  }
  v26 = (uint64_t)v45;
  v25 = v46;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v12, v9);
  v27 = (int *)type metadata accessor for LNAppShortcutParameterRecord(0);
  v28 = (uint64_t *)(a3 + v27[5]);
  *v28 = v25;
  v28[1] = (uint64_t)v16;
  v29 = (_QWORD *)(a3 + v27[6]);
  *v29 = v44;
  v29[1] = v26;
  *(_QWORD *)(a3 + v27[7]) = v43;
  v30 = (_QWORD *)(a3 + v27[8]);
  v31 = (uint64_t)v41;
  *v30 = v40;
  v30[1] = v31;
  *(_QWORD *)(a3 + v27[9]) = v38;
  *(_QWORD *)(a3 + v27[10]) = v24;
  v32 = (_QWORD *)(a3 + v27[11]);
  v33 = v35;
  *v32 = v34;
  v32[1] = v33;
  return sub_100014360(a3, 0, 1, (uint64_t)v27);
}

void sub_1000550E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[21];
  _QWORD v15[21];
  _BYTE v16[176];

  sub_10000C038();
  v2 = v1;
  if (qword_100127D00 != -1)
    swift_once(&qword_100127D00, sub_10005444C);
  sub_1000189C4(v15, &unk_1001296E0);
  v14[0] = v2;
  sub_1000379AC(v15);
  if (qword_100127D08 != -1)
    swift_once(&qword_100127D08, sub_1000544A0);
  v3 = qword_100129788;
  v4 = unk_100129790;
  v5 = qword_100129798;
  v6 = sub_10001BE7C(&qword_100129858);
  sub_10001C2C0(&qword_100129860, &qword_100129858, (uint64_t)&protocol conformance descriptor for [A]);
  Collection<>.contains(_:)(v3, v4, v5, v6, v7);
  v9 = v8;
  v11 = v10;
  sub_1000189C4(&v13, v15);
  sub_1000100E0();
  sub_100016794();
  sub_10000C084((uint64_t)v14);
  sub_1000117AC(v11);
  sub_1000117AC(v9);
  sub_100037A7C(v15);
  sub_1000189C4(v16, v14);
  v14[3] = &type metadata for Table;
  v14[4] = &protocol witness table for Table;
  v14[0] = sub_1000058D0((uint64_t)&unk_10011BED0);
  sub_1000189C4((void *)(v14[0] + 16), v16);
  Connection.prepareRowIterator(_:)(v14);
  v12 = sub_10000E87C(v14);
  if (!v0)
  {
    __chkstk_darwin(v12);
    swift_retain();
    sub_10001BE7C(&qword_100128E68);
    RowIterator.compactMap<A>(_:)();
    sub_1000058DC();
    sub_1000059B0();
    sub_10001105C();
  }
  sub_1000117E8();
}

uint64_t sub_100055324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, double)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = sub_10001BE7C(&qword_100128E68);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3(a1, a2, v9);
  v12 = type metadata accessor for LNAppShortcutParameterRecord(0);
  v13 = 1;
  if (sub_10001C93C((uint64_t)v11, 1, v12) != 1)
  {
    sub_10001DF5C((uint64_t)v11, a4);
    sub_100014360(a4, 0, 1, v12);
    v13 = 0;
  }
  return sub_100014360(a4, v13, 1, v8);
}

void sub_100055420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v15[21];
  _BYTE v16[168];
  _QWORD v17[21];

  sub_10000C038();
  v4 = v3;
  v6 = v5;
  if (qword_100127D00 != -1)
    swift_once(&qword_100127D00, sub_10005444C);
  sub_1000189C4(v17, &unk_1001296E0);
  if (v4)
  {
    sub_1000379AC(v17);
    if (qword_100127D10 != -1)
      swift_once(&qword_100127D10, sub_100054510);
    v15[0] = v6;
    v15[1] = v4;
    == infix<A>(_:_:)();
    sub_1000059F0();
    sub_1000189C4(v7, v17);
    sub_10000C020();
    sub_1000100E0();
    v8 = sub_100018E30();
    QueryType.filter(_:)(v8, v9, v10, v11, v12, v13);
    sub_1000117AC(v2);
    sub_1000117AC(v1);
    sub_100037A7C(v17);
    v14 = v15;
  }
  else
  {
    sub_1000379AC(v17);
    v14 = v17;
  }
  sub_1000189C4(v16, v14);
  v15[3] = &type metadata for Table;
  v15[4] = &protocol witness table for Table;
  v15[0] = sub_1000058D0((uint64_t)&unk_10011BED0);
  sub_1000189C4((void *)(v15[0] + 16), v16);
  Connection.prepareRowIterator(_:)(v15);
  sub_10000E87C(v15);
  if (!v0)
  {
    sub_1000192B4();
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    sub_1000059C4();
    sub_1000058DC();
    swift_release();
  }
  sub_1000117E8();
}

uint64_t sub_100055618()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1000556A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000549EC(a1, a2, a3);
}

uint64_t sub_1000556A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_100055324(a1, a2, *(void (**)(uint64_t, uint64_t, double))(v3 + 16), a3);
}

id sub_1000556C0(_QWORD *a1, void *a2, void *a3)
{
  void *v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;

  v7 = a1[3];
  v8 = sub_10000E858(a1, v7);
  v9 = _bridgeAnythingToObjectiveC<A>(_:)(v8, v7);
  v10 = objc_msgSend(v3, "initWithValue:valueType:displayRepresentation:", v9, a2, a3);
  swift_unknownObjectRelease(v9);

  sub_10000E87C(a1);
  return v10;
}

id sub_100055748(_QWORD *a1, void *a2)
{
  void *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;

  v5 = a1[3];
  v6 = sub_10000E858(a1, v5);
  v7 = _bridgeAnythingToObjectiveC<A>(_:)(v6, v5);
  v8 = objc_msgSend(v2, "initWithValue:valueType:", v7, a2);
  swift_unknownObjectRelease(v7);

  sub_10000E87C(a1);
  return v8;
}

uint64_t sub_1000557BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_isUniquelyReferenced_nonNull_native(*v0);
  sub_1000165F4();
  sub_100025C50();
  v9 = sub_10000ECB0(v1, v2, v3, v4, v5, v6, v7, v8, v11, v12);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_100055838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100055A0C(a1, a2, a3, (void (*)(uint64_t))sub_100025D34);
}

uint64_t sub_100055844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  sub_10001024C();
  sub_10001D954();
  sub_100025DE4();
  v8 = sub_10000ECB0(v0, v1, v2, v3, v4, v5, v6, v7, v10, v11);
  return sub_10001B0D4(v8);
}

uint64_t sub_100055884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100055A0C(a1, a2, a3, (void (*)(uint64_t))sub_100025ECC);
}

uint64_t sub_100055890()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_isUniquelyReferenced_nonNull_native(*v0);
  sub_1000165F4();
  sub_100025ED8();
  v9 = sub_10000ECB0(v1, v2, v3, v4, v5, v6, v7, v8, v11, v12);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_1000558E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v7;

  swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  *v2 = 0x8000000000000000;
  sub_100025FD8(a1, a2);
  v5 = *v2;
  *v2 = v7;
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_100055960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100055A0C(a1, a2, a3, (void (*)(uint64_t))sub_10002608C);
}

uint64_t sub_10005596C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v7;

  swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  *v2 = 0x8000000000000000;
  sub_100026098(a1, a2);
  v5 = *v2;
  *v2 = v7;
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_1000559E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100055A0C(a1, a2, a3, (void (*)(uint64_t))sub_100026388);
}

uint64_t sub_1000559F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100055A0C(a1, a2, a3, (void (*)(uint64_t))sub_10002642C);
}

uint64_t sub_100055A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100055A0C(a1, a2, a3, (void (*)(uint64_t))sub_100026444);
}

uint64_t sub_100055A0C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_10001024C();
  v6 = sub_10001D954();
  a4(v6);
  v7 = *v4;
  *v4 = v9;
  return sub_10001B0D4(v7);
}

void sub_100055A50(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, "synonyms");

  if (v2)
  {
    sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  sub_10000BFBC();
}

unint64_t sub_100055AC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100128448;
  if (!qword_100128448)
  {
    type metadata accessor for LNValueTypeSpecificMetadataKey(255);
    result = swift_getWitnessTable(&unk_1000EF854, v1);
    atomic_store(result, (unint64_t *)&qword_100128448);
  }
  return result;
}

uint64_t *sub_100055B00(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v33);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = *(void **)((char *)a2 + v16);
    *(uint64_t *)((char *)a1 + v16) = (uint64_t)v18;
    v19 = (uint64_t *)((char *)a1 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = a3[9];
    v23 = a3[10];
    v24 = *(void **)((char *)a2 + v22);
    *(uint64_t *)((char *)a1 + v22) = (uint64_t)v24;
    v25 = *(void **)((char *)a2 + v23);
    *(uint64_t *)((char *)a1 + v23) = (uint64_t)v25;
    v26 = a3[11];
    v27 = (uint64_t *)((char *)a1 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    v30 = v18;
    swift_bridgeObjectRetain(v21);
    v31 = v24;
    v32 = v25;
    swift_bridgeObjectRetain(v29);
  }
  return a1;
}

uint64_t sub_100055C1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = *(void **)(a2 + v17);
  v19 = *(void **)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  v20 = v18;

  v21 = a3[8];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a3[9];
  v27 = *(void **)(a2 + v26);
  v28 = *(void **)(a1 + v26);
  *(_QWORD *)(a1 + v26) = v27;
  v29 = v27;

  v30 = a3[10];
  v31 = *(void **)(a1 + v30);
  v32 = *(void **)(a2 + v30);
  *(_QWORD *)(a1 + v30) = v32;
  v33 = v32;

  v34 = a3[11];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  *v35 = *v36;
  v37 = v36[1];
  v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  return a1;
}

uint64_t sub_100055D64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100055DFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = *(void **)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);

  v21 = a3[8];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = *(void **)(a1 + v27);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);

  v29 = a3[10];
  v30 = *(void **)(a1 + v29);
  *(_QWORD *)(a1 + v29) = *(_QWORD *)(a2 + v29);

  v31 = a3[11];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t sub_100055EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100055F04);
}

uint64_t sub_100055F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_10001AE20();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return sub_10001C93C(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_100055F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100055F88);
}

uint64_t sub_100055F88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_10001AE20();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return sub_100014360(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100055FFC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000F06A0;
    v4[2] = &unk_1000F06A0;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_1000F06A0;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = &unk_1000F06B8;
    v4[7] = &unk_1000F06D0;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

double sub_100056098()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 480) = 0u;
  *(_OWORD *)(v0 + 496) = 0u;
  return result;
}

id sub_1000560A4(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v1 + 56) + 8 * a1);
}

_QWORD *sub_1000560B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1000560C8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_1000522FC);
}

_QWORD *sub_1000560BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1000560C8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_1000523AC);
}

_QWORD *sub_1000560C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  v11 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v12 = swift_unknownObjectRetain_n(a1, 2);
  v13 = (_QWORD *)swift_dynamicCastClass(v12, v11);
  if (!v13)
  {
    sub_100018358();
    v13 = _swiftEmptyArrayStorage;
  }
  v14 = v13[2];
  v15 = swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v15 = a1;
  if (v14 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease(v15);
LABEL_2:
    v10 = (_QWORD *)a5(a1, a2, a3, a4);
    goto LABEL_9;
  }
  v10 = (_QWORD *)swift_dynamicCastClass(a1, v11);
  if (!v10)
  {
    sub_100018358();
    v10 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  sub_100018358();
  return v10;
}

_QWORD *sub_1000561AC(int64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  id v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v64;

  if ((unint64_t)a2 >> 62)
    goto LABEL_29;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v56))
  {
    v4 = 0;
    v5 = 4;
    while (1)
    {
      v6 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a2)
         : *(id *)(a2 + 8 * v5);
      v7 = v6;
      v8 = (id)(v5 - 3);
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = sub_10001AA38((uint64_t)v6, "orderedPhrases");
      sub_100056574();
      v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9);

      if ((unint64_t)v10 >> 62)
      {
        if (v10 < 0)
          v17 = v10;
        else
          v17 = v10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v11 = _CocoaArrayWrapper.endIndex.getter(v17);
        swift_bridgeObjectRelease();
      }
      else
      {
        v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v12 = __OFADD__(v4, v11);
      v4 += v11;
      if (v12)
        goto LABEL_28;
      if (v4 > a1)
      {
        v18 = sub_1000101FC();
        v19 = sub_10001AA38(v18, "orderedPhrases");
        v20 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v19);

        v21 = a1;
        if (__OFSUB__(v4, a1))
        {
          __break(1u);
        }
        else
        {
          v22 = sub_1000565B0(v4 - a1, (unint64_t)v20);
          v64 = sub_1000560C8(v22, v23, v24, v25, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_1000522E4);
          v26 = sub_10001AA38((uint64_t)v64, "bundleIdentifier");
          v27 = sub_10000EB00((uint64_t)v26);
          v61 = v28;
          v62 = v27;

          v30 = sub_10001AA38(v29, "localeIdentifier");
          v31 = sub_10000EB00((uint64_t)v30);
          v59 = v32;
          v60 = v31;

          v34 = sub_10001AA38(v33, "actionIdentifier");
          v58 = sub_10000EB00((uint64_t)v34);
          v36 = v35;

          v37 = sub_100028464(v7, (SEL *)&selRef_localizedShortTitle);
          v39 = v38;
          v40 = sub_100028464(v7, (SEL *)&selRef_localizedAutoShortcutDescription);
          v42 = v41;
          v43 = sub_10001AA38(v40, "systemImageName");
          v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
          v46 = v45;

          v48 = sub_10001AA38(v47, "shortcutTileColor");
          v49 = sub_10001AA38((uint64_t)v48, "parameterPresentation");
          v50 = objc_allocWithZone((Class)LNAutoShortcut);
          v8 = sub_10005675C(v62, v61, v60, v59, v58, v36, (uint64_t)v64, v37, v39, v40, v42, v44, v46, (uint64_t)v48, v49);
          sub_10001AC14();
          v19 = *(id *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v21 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if ((unint64_t)v19 < v21 >> 1)
          {
LABEL_23:
            v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v8);
            specialized Array._endMutation()(v51);

            return _swiftEmptyArrayStorage;
          }
        }
        sub_100018B88((uint64_t)v19 + 1, v21);
        goto LABEL_23;
      }
      if (v4 == a1)
      {
        sub_1000101FC();
        v52 = v7;
        sub_10001AC14();
        v54 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v53 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v54 >= v53 >> 1)
          sub_100018B88(v54 + 1, v53);
        v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v52);
        specialized Array._endMutation()(v55);

        return _swiftEmptyArrayStorage;
      }
      v13 = v7;
      sub_10001AC14();
      v15 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v15 >= v14 >> 1)
        sub_100018B88(v15 + 1, v14);
      v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
      specialized Array._endMutation()(v16);

      ++v5;
      if (v8 == (id)v3)
        goto LABEL_33;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    if (a2 < 0)
      v56 = a2;
    else
      v56 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
LABEL_33:
  sub_1000101FC();
  return _swiftEmptyArrayStorage;
}

unint64_t sub_100056574()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001281B8;
  if (!qword_1001281B8)
  {
    v1 = objc_opt_self(LNAutoShortcutLocalizedPhrase);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001281B8);
  }
  return result;
}

uint64_t sub_1000565B0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = a1;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v2 < 0)
    v17 = v2;
  else
    v17 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
LABEL_4:
  result = sub_1000C262C(v5, -v3, 0, v2);
  if ((v7 & 1) != 0)
  {
    v8 = 0;
    if (!v4)
    {
LABEL_7:
      v9 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_14;
    }
  }
  else
  {
    v8 = result;
    if (result < 0)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (!v4)
      goto LABEL_7;
  }
  if (v2 < 0)
    v10 = v2;
  else
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v11 = _CocoaArrayWrapper.endIndex.getter(v10);
  result = swift_bridgeObjectRelease();
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter(v10);
  result = swift_bridgeObjectRelease();
LABEL_14:
  if (v9 < v8)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((v2 & 0xC000000000000001) != 0 && v8)
  {
    sub_100056574();
    v12 = 0;
    do
    {
      v13 = v12 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v12);
      v12 = v13;
    }
    while (v8 != v13);
  }
  if (!v4)
    return v2 & 0xFFFFFFFFFFFFFF8;
  if (v2 < 0)
    v15 = v2;
  else
    v15 = v2 & 0xFFFFFFFFFFFFFF8;
  v16 = swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.subscript.getter(0, v8, v15, v16);
  swift_bridgeObjectRelease_n(v2, 2);
  return v14;
}

id sub_10005675C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  NSString v15;
  NSString v16;
  NSArray v17;
  NSString v18;
  NSString v19;
  NSString v20;
  id v21;
  NSString v23;
  void *v24;

  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100056574();
  v17.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a9)
  {
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = 0;
  }
  if (a11)
  {
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = 0;
  }
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v24, "initWithBundleIdentifier:localeIdentifier:actionIdentifier:orderedPhrases:localizedShortTitle:localizedAutoShortcutDescription:systemImageName:shortcutTileColor:parameterPresentation:", v23, v15, v16, v17.super.isa, v18, v19, v20, a14, a15);

  return v21;
}

void sub_1000568E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v4 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 1;
  v7 = String.utf8CString.getter(a1, a2);
  v8 = (void *)container_system_path_for_identifier(v7 + 32, &v14);
  swift_release();
  if (v8)
  {
    v9 = type metadata accessor for URL(0);
    sub_100014360((uint64_t)v6, 1, 1, v9);
    URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)(v8, 1, v6);
    sub_100020D24((uint64_t)v6);
    free(v8);
  }
  else
  {
    v10 = v14;
    v11 = sub_100056A38();
    v12 = swift_allocError(&_s14ContainerErrorVN, v11, 0, 0);
    *v13 = v10;
    swift_willThrow(v12);
  }
}

unint64_t sub_100056A38()
{
  unint64_t result;

  result = qword_100129918;
  if (!qword_100129918)
  {
    result = swift_getWitnessTable(&unk_1000F06FC, &_s14ContainerErrorVN);
    atomic_store(result, (unint64_t *)&qword_100129918);
  }
  return result;
}

ValueMetadata *_s14ContainerErrorVMa()
{
  return &_s14ContainerErrorVN;
}

void sub_100056A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = 0;
    v6 = a1 + 40;
    v21 = *(_QWORD *)(a1 + 16);
    v18 = v4 - 1;
    v20 = _swiftEmptyArrayStorage;
    v19 = a1 + 40;
    do
    {
      v7 = (_OWORD *)(v6 + 24 * v5);
      v8 = v5;
      while (1)
      {
        if (v8 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v22 = *((_QWORD *)v7 - 1);
        v23 = *v7;
        swift_bridgeObjectRetain();
        v9 = *((id *)&v23 + 1);
        v10 = objc_msgSend(v9, "intentIdentifier", swift_bridgeObjectRetain().n128_f64[0]);
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

        if (!*(_QWORD *)(a2 + 16))
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
        sub_100016064(v11);
        v13 = v12;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v13 & 1) != 0)
          break;

LABEL_9:
        ++v8;
        swift_bridgeObjectRelease();
        v7 = (_OWORD *)((char *)v7 + 24);
        if (v21 == v8)
          goto LABEL_16;
      }
      v14 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      {
        sub_100052718(0, v20[2] + 1, 1);
        v14 = v20;
      }
      v16 = v14[2];
      v15 = v14[3];
      if (v16 >= v15 >> 1)
      {
        sub_100052718(v15 > 1, v16 + 1, 1);
        v14 = v20;
      }
      v5 = v8 + 1;
      v14[2] = v16 + 1;
      v20 = v14;
      v17 = &v14[3 * v16];
      v17[4] = v22;
      *(_OWORD *)(v17 + 5) = v23;
      v6 = v19;
    }
    while (v18 != v8);
  }
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100056CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = 0;
    v6 = a1 + 40;
    v21 = *(_QWORD *)(a1 + 16);
    v18 = v4 - 1;
    v7 = _swiftEmptyArrayStorage;
    v19 = a1 + 40;
    do
    {
      v20 = v7;
      v8 = (_OWORD *)(v6 + 24 * v5);
      v9 = v5;
      while (1)
      {
        if (v9 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v22 = *((_QWORD *)v8 - 1);
        v23 = *v8;
        swift_bridgeObjectRetain();
        v10 = *((id *)&v23 + 1);
        v11 = objc_msgSend(v10, "intentIdentifier", swift_bridgeObjectRetain().n128_f64[0]);
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);

        if (!*(_QWORD *)(a2 + 16))
          break;
        sub_100016064(v12);
        v14 = v13;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0)
          goto LABEL_10;
        ++v9;

        swift_bridgeObjectRelease();
        v8 = (_OWORD *)((char *)v8 + 24);
        if (v21 == v9)
          goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_10:
      v7 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      {
        sub_100052718(0, v20[2] + 1, 1);
        v7 = v20;
      }
      v16 = v7[2];
      v15 = v7[3];
      if (v16 >= v15 >> 1)
      {
        sub_100052718(v15 > 1, v16 + 1, 1);
        v7 = v20;
      }
      v5 = v9 + 1;
      v7[2] = v16 + 1;
      v17 = &v7[3 * v16];
      v17[4] = v22;
      *(_OWORD *)(v17 + 5) = v23;
      v6 = v19;
    }
    while (v18 != v9);
  }
LABEL_15:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

_QWORD *sub_100056EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v25[5];
  unint64_t v26;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = _swiftEmptyArrayStorage;
  v26 = (unint64_t)_swiftEmptyArrayStorage;
  if (v5)
  {
    v22 = a2 + 112;
    swift_bridgeObjectRetain();
    v8 = (void **)(v7 + 48);
    while (1)
    {
      v9 = *v8;
      sub_1000132C4(v22, (uint64_t)v25);
      sub_10000E858(v25, v25[3]);
      swift_bridgeObjectRetain();
      v10 = v9;
      v11 = objc_msgSend(v10, "intentIdentifier");
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      sub_10006143C(a3, a4, v12, v14);
      if (v4)
        break;
      v16 = v15;
      swift_bridgeObjectRelease();
      sub_10000E87C(v25);

      v17 = swift_bridgeObjectRelease();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v19 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v18 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v19 >= v18 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v16);
      specialized Array._endMutation()(v20);
      v8 += 3;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        v6 = (_QWORD *)v26;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    sub_10000E87C(v25);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v6 = (_QWORD *)v26;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_9:
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

_QWORD *sub_100057088(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_10001BE7C(&qword_100128AF8);
    v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  }
  else
  {
    v4 = _swiftEmptyDictionarySingleton;
  }
  v7 = v4;
  sub_1000588BC(a1, 1, &v7);
  v5 = v7;
  if (v1)
    swift_release();
  return v5;
}

uint64_t sub_100057114()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for Logger(0);
  sub_1000269D8(v0, qword_10012CCF0);
  sub_100012A40(v0, (uint64_t)qword_10012CCF0);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v2 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v2, v3, 0xD000000000000021, 0x80000001000F0740);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100057190(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  __int128 v23;
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[7];

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10001765C();
  v13 = v12 - v11;
  v14 = AFDeviceSupportsSAE();
  if ((_DWORD)v14)
  {
    v15 = sub_1000100D8(v14, &qword_10012ADF0, LSBundleRecord_ptr);
    sub_1000101EC(a2);
    v16 = sub_100058748(a1, a2, 0);
    if (v4)
    {
      sub_10000E038();
    }
    else
    {
      v24 = v15;
      v25 = &off_10011AED8;
      *(_QWORD *)&v23 = v16;
      sub_100019A48(&v23, (uint64_t)v26);
      v26[5] = a1;
      v26[6] = a2;
      sub_10005737C((uint64_t)v26, a3, a4);
      sub_100058A8C(v26);
    }
  }
  else
  {
    v17 = qword_100127D48;
    swift_retain();
    if (v17 != -1)
      swift_once(&qword_100127D48, sub_100057114);
    v18 = sub_100012A40(v9, (uint64_t)qword_10012CCF0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v18, v9);
    v19 = swift_release();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)sub_100011780(2);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Device/locale does not support example phrases.", v22, 2u);
      sub_1000133FC((uint64_t)v22);
    }

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  sub_1000117E8();
}

void sub_10005737C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t inited;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _BOOL8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  id v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  char **v84;
  uint64_t v85;
  char isUniquelyReferenced_nonNull_native;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _BOOL8 v92;
  uint64_t v93;
  uint64_t v94;
  os_log_type_t v95;
  uint8_t *v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t *v105;
  os_log_type_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  Class isa;
  void **p_isa;
  void *v115;
  uint64_t v116;
  id v117;
  os_log_type_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  void **v125;
  void *v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  __int128 v148;
  uint64_t v149;
  void (*v150)(NSObject *, uint64_t, uint64_t);
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  __int128 v169[2];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  _QWORD *v174;
  char v175[8];
  char v176[8];
  char v177[8];
  char v178[8];
  char v179[8];
  NSObject *v180;
  uint64_t v181;
  uint64_t v182;

  v4 = v3;
  v158 = _s7BuilderVMa(0);
  __chkstk_darwin(v158);
  sub_10001765C();
  v159 = v7 - v6;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10001765C();
  v12 = (v11 - v10);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = (_QWORD *)(v3 + 112);
  sub_10000E858((_QWORD *)(v3 + 112), *(_QWORD *)(v3 + 136));
  sub_100063998(v13, v14, 0, 0);
  if (v164)
    goto LABEL_9;
  v17 = v16;
  v162 = v12;
  v151 = a1;
  v165 = v8;
  v157 = v15;
  v18 = qword_100127D48;
  swift_retain();
  if (v18 != -1)
    swift_once(&qword_100127D48, sub_100057114);
  v19 = sub_100012A40(v8, (uint64_t)qword_10012CCF0);
  v150 = *(void (**)(NSObject *, uint64_t, uint64_t))(v9 + 16);
  v150(v12, v19, v8);
  swift_release();
  v20 = sub_1000101B0();
  Logger.logObject.getter(v20);
  v21 = sub_1000186A0();
  v155 = v17;
  if (sub_10001CE20(v21))
  {
    v153 = v13;
    v22 = v14;
    v23 = (uint8_t *)sub_100011780(12);
    *(_DWORD *)v23 = 134217984;
    *(_QWORD *)&v170 = *(_QWORD *)(v17 + 16);
    sub_1000176BC();
    sub_1000101FC();
    sub_1000100C0((void *)&_mh_execute_header, v12, (os_log_type_t)v15, "Found %ld example phrases from JSON file", v23);
    v24 = (uint64_t)v23;
    v25 = v4;
    v26 = v22;
    v27 = v153;
    sub_1000133FC(v24);

  }
  else
  {

    sub_1000101FC();
    v26 = v14;
    v27 = v13;
    v25 = v4;
  }
  (*(void (**)(NSObject *, uint64_t))(v9 + 8))(v162, v165);
  sub_10000E858(v15, *(_QWORD *)(v25 + 136));
  sub_10000BFF4();
  v28 = 0;
  sub_10006344C();
  v30 = v29;
  sub_1000101FC();
  v180 = v30;
  sub_100018A08(v15, *(_QWORD *)(v25 + 136));
  sub_100063610();
  v32 = v31;
  v33 = sub_100018A08(v157, *(_QWORD *)(v25 + 136));
  sub_100020830(v33, v34);
  v152 = v35;
  v149 = v25;
  v163 = v32;
  sub_1000132C4((uint64_t)v157, (uint64_t)&v170);
  sub_10001F5AC();
  v36 = sub_10001BE7C(&qword_100128750);
  inited = swift_initStackObject(v36, v176);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAD0;
  v38 = (_QWORD *)objc_opt_self(LNSystemProtocol);
  *(_QWORD *)(inited + 32) = objc_msgSend(v38, "entityUpdatingProtocol");
  *(_QWORD *)(inited + 40) = objc_msgSend(v38, "propertyUpdaterProtocol");
  sub_10001DD54();
  v39 = sub_1000185B0();
  sub_10001CD30(v39, 2);
  v156 = v36;
  sub_10000C028();
  sub_10000BFF4();
  v40 = sub_10001F694();
  sub_1000101FC();
  v41 = sub_1000059A8();
  if (!v40)
  {
    v42 = sub_1000100D8(v41, &qword_10012A710, LNActionMetadata_ptr);
    Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, type metadata for String, v42, &protocol witness table for String);
  }
  sub_1000188E8();
  sub_1000132C4((uint64_t)v157, (uint64_t)&v170);
  sub_10001F5AC();
  v43 = swift_initStackObject(v156, v175);
  *(_OWORD *)(v43 + 16) = xmmword_1000EFAF0;
  *(_QWORD *)(v43 + 32) = objc_msgSend(v38, "openEntitySystemProtocol");
  sub_10001DD54();
  v44 = sub_1000185B0();
  sub_10001CD30(v44, 1);
  v45 = 0;
  sub_10000C028();
  sub_10000BFF4();
  v46 = (int *)sub_10001F694();
  sub_1000101FC();
  v47 = sub_1000059A8();
  if (!v46)
  {
    v48 = sub_1000100D8(v47, &qword_10012A710, LNActionMetadata_ptr);
    v46 = (int *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, type metadata for String, v48, &protocol witness table for String);
  }
  sub_1000188E8();
  v49 = sub_100018A08(v157, *(_QWORD *)(v149 + 136));
  sub_100063308(v49, v50);
  v52 = v51;
  if ((unint64_t)v51 >> 62)
  {
    if (v51 < 0)
      v28 = v51;
    else
      v28 = v51 & 0xFFFFFFFFFFFFFF8;
    sub_1000100E0();
    v53 = sub_1000058C8();
    sub_10000C028();
  }
  else
  {
    v53 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v154 = v27;
  if (!v53)
  {
LABEL_25:
    sub_10000C028();
    sub_100013388();
    v70 = sub_100057088(v69);
    sub_1000522F8();
    v72 = v71;
    sub_10000C028();
    sub_1000522F8();
    sub_10000E038();
    *(_QWORD *)&v170 = v72;
    sub_1000592D4();
    sub_10002B7B4(v27, v26, v70, v170);
    v74 = v73;
    sub_1000059A8();
    sub_10000C030();
    v75 = sub_1000100E0();
    sub_100056A84(v75, (uint64_t)v70);
    sub_10000C030();
    sub_100056CB0(v74, (uint64_t)v70);
    sub_100058F28();
    v76 = (uint64_t)v180;
    swift_retain();
    sub_10000BFF4();
    v77 = sub_1000101B0();
    v78 = sub_100056EC0(v77, v149, v27, v26);
    if (v28)
    {
      sub_1000117AC(v76);
      sub_10001AE38((uint64_t)v179);
      sub_1000059C4();
      sub_10001AE38((uint64_t)&v182);
      sub_10001AE38((uint64_t)v177);
LABEL_8:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    v79 = v78;
    v144 = v70;
    sub_1000059A8();
    v80 = &v180;
    sub_100058F28();
    sub_100018A08(v157, *(_QWORD *)(v149 + 136));
    sub_1000637D4();
    v82 = *(_QWORD *)(v81 + 16);
    v142 = (uint64_t)_swiftEmptyArrayStorage;
    v141 = (uint64_t)v79;
    if (v82)
    {
      v83 = (_OWORD *)(v81 + 40);
      v38 = _swiftEmptyArrayStorage;
      v84 = &selRef_synonyms;
      do
      {
        v85 = *((_QWORD *)v83 - 1);
        v148 = *v83;
        v80 = *(NSObject **)v83;
        sub_1000101B0();
        v79 = *((id *)&v148 + 1);
        if (objc_msgSend(v79, v84[9]))
        {

          sub_1000059A8();
        }
        else
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
          *(_QWORD *)&v170 = v38;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v80 = &v170;
            sub_1000526DC(0, v38[2] + 1, 1);
            v38 = (_QWORD *)v170;
          }
          v87 = v148;
          v88 = v85;
          v90 = v38[2];
          v89 = v38[3];
          v79 = (id)(v90 + 1);
          if (v90 >= v89 >> 1)
          {
            v92 = sub_10001B464(v89);
            sub_1000526DC(v92, v93, v94);
            v88 = v85;
            v87 = v148;
            v38 = (_QWORD *)v170;
          }
          v38[2] = v79;
          v91 = &v38[3 * v90];
          v91[4] = v88;
          *(_OWORD *)(v91 + 5) = v87;
          v84 = &selRef_synonyms;
        }
        v83 = (_OWORD *)((char *)v83 + 24);
        --v82;
      }
      while (v82);
    }
    else
    {
      v38 = _swiftEmptyArrayStorage;
    }
    sub_10001AE38((uint64_t)&v173);
    swift_retain();
    sub_10001A080();
    v95 = sub_1000186A0();
    if (sub_10001CE20(v95))
    {
      v96 = (uint8_t *)sub_100011780(12);
      *(_DWORD *)v96 = 134217984;
      *(_QWORD *)&v170 = v38[2];
      sub_1000176BC();
      swift_release();
      sub_1000100C0((void *)&_mh_execute_header, v80, (os_log_type_t)v79, "Developer provided %ld AssistantAppEntity examples", v96);
      sub_1000133FC((uint64_t)v96);

    }
    else
    {

      swift_release();
    }
    v174 = _swiftEmptyDictionarySingleton;
    v97 = sub_100093C98(a2, a3);
    v45 = a2;
    sub_10008D07C(v141, v152, a2, a3, v154, v26, (uint64_t)v97, (uint64_t *)&v174);
    v99 = v98;
    sub_1000059A8();
    sub_10000C028();
    sub_1000059C4();
    swift_bridgeObjectRetain();
    sub_10001A080();
    v100 = sub_1000186A0();
    v146 = v99;
    if (sub_10001CE20(v100))
    {
      v101 = (uint8_t *)sub_100011780(12);
      *(_DWORD *)v101 = 134217984;
      *(_QWORD *)&v170 = *(_QWORD *)(v99 + 16);
      sub_1000176BC();
      swift_bridgeObjectRelease();
      sub_1000100C0((void *)&_mh_execute_header, v97, (os_log_type_t)v141, "Found %ld parameters with platform-provided values", v101);
      v45 = a2;
      sub_1000133FC((uint64_t)v101);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    sub_10005884C(v151, (uint64_t)&v170);
    v54 = v180;
    sub_1000132C4((uint64_t)v157, (uint64_t)v169);
    v28 = qword_100127E80;
    swift_bridgeObjectRetain();
    sub_1000101B0();
    v53 = v159;
    v27 = a3;
    v46 = (int *)v158;
    v52 = v165;
    if (v28 == -1)
      goto LABEL_46;
    goto LABEL_82;
  }
  *(_QWORD *)&v170 = _swiftEmptyArrayStorage;
  v54 = &v170;
  sub_100052754(0, v53 & ~(v53 >> 63), 0);
  if ((v53 & 0x8000000000000000) == 0)
  {
    v55 = 0;
    v56 = v170;
    v147 = v52 & 0xC000000000000001;
    v145 = v52;
    v143 = v53;
    do
    {
      if (v147)
        v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v52);
      else
        v57 = *(id *)(v52 + 8 * v55 + 32);
      v58 = v57;
      v59 = objc_msgSend(v57, "identifier");
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
      v62 = v61;

      *(_QWORD *)&v170 = v56;
      v64 = *(_QWORD *)(v56 + 16);
      v63 = *(_QWORD *)(v56 + 24);
      if (v64 >= v63 >> 1)
      {
        v66 = sub_10001B464(v63);
        sub_100052754(v66, v67, v68);
        v56 = v170;
      }
      ++v55;
      *(_QWORD *)(v56 + 16) = v64 + 1;
      v65 = (_QWORD *)(v56 + 24 * v64);
      v65[4] = v60;
      v65[5] = v62;
      v65[6] = v58;
      v27 = v154;
      v52 = v145;
    }
    while (v143 != v55);
    goto LABEL_25;
  }
  __break(1u);
LABEL_82:
  swift_once(&qword_100127E80, sub_10009056C);
LABEL_46:
  v102 = sub_100012A40(v52, (uint64_t)qword_10012D0F8);
  v150(v53, v102, v52);
  v103 = v53 + v46[5];
  v104 = v171;
  *(_OWORD *)v103 = v170;
  *(_OWORD *)(v103 + 16) = v104;
  *(_OWORD *)(v103 + 32) = v172;
  *(_QWORD *)(v103 + 48) = v173;
  v105 = (uint64_t *)(v53 + v46[6]);
  *v105 = v45;
  v105[1] = v27;
  *(_QWORD *)(v53 + v46[7]) = v54;
  v166 = v46[8];
  *(_QWORD *)(v53 + v166) = v163;
  *(_QWORD *)(v53 + v46[9]) = v146;
  sub_100019A48(v169, v53 + v46[10]);
  *(_QWORD *)(v53 + v46[11]) = v144;
  *(_QWORD *)(v53 + v46[12]) = v38;
  sub_1000101EC(v26);
  sub_1000101EC(v27);
  sub_10001A080();
  v106 = sub_1000186A0();
  v140 = v26;
  if (os_log_type_enabled(v54, v106))
  {
    v107 = v26;
    v108 = sub_100011780(22);
    v109 = sub_100011780(64);
    *(_QWORD *)&v170 = v109;
    *(_DWORD *)v108 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v169[0] = sub_10000FBEC(v154, v107, (uint64_t *)&v170);
    sub_10001F754();
    sub_100011800(v107);
    *(_WORD *)(v108 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v169[0] = sub_10001C21C((uint64_t *)&v170, (uint64_t)&v181);
    sub_10001F754();
    sub_100011800(v27);
    _os_log_impl((void *)&_mh_execute_header, v54, v106, "Interpolating AssistantIntent example phrases for %s:%s", (uint8_t *)v108, 0x16u);
    swift_arrayDestroy(v109, 2);
    sub_1000133FC(v109);
    sub_1000133FC(v108);

  }
  else
  {

    sub_1000117AC(v27);
    sub_1000117AC(v26);
  }
  sub_100013388();
  sub_100078124();
  if (v28)
  {
    sub_10001AE38((uint64_t)v179);
    sub_100058880(v53);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v111 = v110;
  v112 = *(NSObject **)(v53 + v166);
  *(_QWORD *)&v169[0] = _swiftEmptyArrayStorage;
  isa = v112[2].isa;
  if (isa)
  {
    sub_1000101EC((uint64_t)v112);
    p_isa = (void **)&v112[6].isa;
    do
    {
      v116 = (uint64_t)*(p_isa - 1);
      v115 = *p_isa;
      *(_QWORD *)&v170 = *(p_isa - 2);
      *((_QWORD *)&v170 + 1) = v116;
      *(_QWORD *)&v171 = v115;
      sub_1000100E0();
      v117 = v115;
      v28 = 0;
      sub_100079814(v169, (uint64_t)&v170, v159);

      sub_10000C028();
      p_isa += 3;
      isa = (Class)((char *)isa - 1);
    }
    while (isa);
    sub_1000117AC((uint64_t)v112);
    v142 = *(_QWORD *)&v169[0];
  }
  sub_1000101EC(v111);
  sub_1000101EC(v142);
  sub_100015924();
  v118 = sub_1000186A0();
  v119 = (unint64_t)v111 >> 62;
  if (sub_100013588(v118))
  {
    v120 = sub_100011780(22);
    *(_DWORD *)v120 = 134218240;
    if (v119)
    {
      if (v111 < 0)
        v28 = v111;
      else
        v28 = v111 & 0xFFFFFFFFFFFFFF8;
      sub_10000BFF4();
      v121 = sub_1000058C8();
      sub_1000101FC();
    }
    else
    {
      v121 = *(_QWORD *)((v111 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    sub_1000101FC();
    *(_QWORD *)&v170 = v121;
    sub_1000176BC();
    sub_1000101FC();
    *(_WORD *)(v120 + 12) = 2048;
    if ((unint64_t)v142 >> 62)
    {
      if (v142 < 0)
        v28 = v142;
      else
        v28 = v142 & 0xFFFFFFFFFFFFFF8;
      sub_10000C030();
      v122 = sub_1000058C8();
      sub_1000059C4();
    }
    else
    {
      v122 = *(_QWORD *)((v142 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    sub_1000059C4();
    *(_QWORD *)&v170 = v122;
    sub_1000176BC();
    sub_1000059C4();
    _os_log_impl((void *)&_mh_execute_header, v112, v118, "Generated example phrases: %ld negative phrases: %ld", (uint8_t *)v120, 0x16u);
    sub_1000133FC(v120);

  }
  else
  {

    sub_1000117AC(v111);
    sub_1000117AC(v142);
  }
  v123 = *(_QWORD *)(v155 + 16);
  v124 = _swiftEmptyArrayStorage;
  if (v123)
  {
    *(_QWORD *)&v170 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v123);
    v125 = (void **)(v155 + 48);
    do
    {
      v126 = *v125;
      v125 += 3;
      v127 = v126;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v127);
      v128 = *(_QWORD *)(v170 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v128);
      v129 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v128, v127);
      specialized ContiguousArray._endMutation()(v129);
      --v123;
    }
    while (v123);
    v124 = (_QWORD *)v170;
  }
  swift_bridgeObjectRelease();
  sub_10001AE38((uint64_t)v179);
  sub_1000059A8();
  *(_QWORD *)&v170 = v124;
  sub_10000BFF4();
  sub_100059130(v111);
  sub_100059130(v142);
  sub_1000101EC(v140);
  sub_1000101EC(a3);
  sub_10000BFF4();
  v130 = sub_100015924();
  v131 = static os_log_type_t.debug.getter();
  if (sub_100013588(v131))
  {
    v132 = sub_100011780(32);
    v167 = sub_100011780(64);
    *(_QWORD *)&v170 = v167;
    *(_DWORD *)v132 = 134218498;
    if (v119)
    {
      if (v111 < 0)
        v28 = v111;
      else
        v28 = v111 & 0xFFFFFFFFFFFFFF8;
      sub_10000BFF4();
      v133 = sub_1000058C8();
      sub_1000101FC();
    }
    else
    {
      v133 = *(_QWORD *)((v111 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    sub_1000101FC();
    *(_QWORD *)&v169[0] = v133;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v169, (char *)v169 + 8);
    sub_1000101FC();
    *(_WORD *)(v132 + 12) = 2080;
    swift_bridgeObjectRetain();
    v134 = sub_10001C21C((uint64_t *)&v170, (uint64_t)v178);
    sub_10001C010(v134);
    sub_100011800(v140);
    *(_WORD *)(v132 + 22) = 2080;
    sub_10000C030();
    v135 = sub_10000FBEC(a2, a3, (uint64_t *)&v170);
    sub_10001C010(v135);
    sub_100011800(a3);
    _os_log_impl((void *)&_mh_execute_header, v130, v131, "Caching AssistantIntent %ld phrases for %s:%s", (uint8_t *)v132, 0x20u);
    swift_arrayDestroy(v167, 2);
    sub_1000133FC(v167);
    sub_1000133FC(v132);

  }
  else
  {

    sub_1000117AC(a3);
    sub_1000117AC(v140);
    sub_1000117AC(v111);
  }
  sub_10000E858(v157, *(_QWORD *)(v149 + 136));
  sub_100013388();
  sub_100063A40();
  if (v28)
  {
    sub_100058AC8();
    sub_100058AC8();
    v136 = sub_100015924();
    v137 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v136, v137))
    {
      v138 = (uint8_t *)sub_100011780(12);
      v168 = (_QWORD *)sub_100011780(8);
      *(_DWORD *)v138 = 138412290;
      sub_100058AC8();
      v139 = _swift_stdlib_bridgeErrorToNSError(v28);
      *(_QWORD *)&v170 = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, (char *)&v170 + 8);
      *v168 = v139;
      sub_100019AF0();
      sub_100019AF0();
      sub_1000100C0((void *)&_mh_execute_header, v136, v137, "Failed to update cached AssistantIntent example phrases: %@", v138);
      sub_10001BE7C(&qword_100128160);
      swift_arrayDestroy(v168, 1);
      sub_1000133FC((uint64_t)v168);
      sub_1000133FC((uint64_t)v138);

    }
    else
    {

      sub_100019AF0();
      sub_100019AF0();
    }
    sub_100019AF0();
  }
  sub_100058880(v159);
LABEL_9:
  sub_1000117E8();
}

id sub_100058748(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = 0;
  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v3), "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v12);

  v8 = v12;
  if (v7)
  {
    v9 = v12;
  }
  else
  {
    v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
  return v7;
}

uint64_t type metadata accessor for AssistantIntentPhraseInterpolator()
{
  return objc_opt_self(_TtC10LinkDaemon33AssistantIntentPhraseInterpolator);
}

uint64_t sub_10005884C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(a2, a1);
  return a2;
}

uint64_t sub_100058880(uint64_t a1)
{
  uint64_t v2;

  v2 = _s7BuilderVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000588BC(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  void **i;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  id v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  for (i = (void **)(a1 + 48); ; i += 3)
  {
    v8 = (uint64_t)*(i - 2);
    v7 = (uint64_t)*(i - 1);
    v9 = *i;
    v10 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    v11 = v9;
    v13 = sub_100016064(v8);
    v14 = v10[2];
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      break;
    v17 = v12;
    if (v10[3] >= v16)
    {
      if ((a2 & 1) == 0)
      {
        sub_10001BE7C(&qword_1001282C0);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_1000320BC(v16, a2 & 1);
      v18 = sub_100016064(v8);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_18;
      v13 = v18;
    }
    v20 = (_QWORD *)*a3;
    if ((v17 & 1) != 0)
    {
      v21 = *(id *)(v20[7] + 8 * v13);
      swift_bridgeObjectRelease();

      v22 = v20[7];
      *(_QWORD *)(v22 + 8 * v13) = v21;
    }
    else
    {
      v20[(v13 >> 6) + 8] |= 1 << v13;
      v23 = (uint64_t *)(v20[6] + 16 * v13);
      *v23 = v8;
      v23[1] = v7;
      *(_QWORD *)(v20[7] + 8 * v13) = v11;
      v24 = v20[2];
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        goto LABEL_17;
      v20[2] = v26;
    }
    a2 = 1;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
  __break(1u);
  return result;
}

_QWORD *sub_100058A8C(_QWORD *a1)
{
  destroy for AssistantIntentPhraseInterpolator.ApplicationPlaceholder(a1);
  return a1;
}

ValueMetadata *type metadata accessor for AssistantIntentPhraseInterpolator.ApplicationPlaceholder()
{
  return &type metadata for AssistantIntentPhraseInterpolator.ApplicationPlaceholder;
}

uint64_t sub_100058AC8()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

void sub_100058AD0(id a1@<X4>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X3>, _QWORD *a6@<X8>)
{
  char **v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  unint64_t v19;
  void *v20;
  void *v21;
  id v22;

  v12 = &off_100126000;
  if (objc_msgSend(a1, "value")
    || (v16 = objc_msgSend(a1, "disabledReason")) == 0)
  {
    v13 = 0;
    v14 = 0xF000000000000000;
LABEL_3:
    v15 = objc_msgSend(a1, v12[412]);

    *a6 = a2;
    a6[1] = a3;
    a6[2] = a4;
    a6[3] = a5;
    a6[4] = v15;
    a6[5] = v13;
    a6[6] = v14;
    return;
  }
  v22 = 0;
  v21 = v16;
  v17 = objc_msgSend((id)objc_opt_self(NSKeyedArchiver), "archivedDataWithRootObject:requiringSecureCoding:error:", v16, 1, &v22);
  v18 = v22;
  if (v17)
  {
    v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v14 = v19;

    v12 = &off_100126000;
    goto LABEL_3;
  }
  v20 = v18;
  swift_bridgeObjectRelease(a5);
  swift_bridgeObjectRelease(a3);
  _convertNSErrorToError(_:)(v20);

  swift_willThrow();
}

id sub_100058C68()
{
  _QWORD *v0;
  uint64_t v1;
  id result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  Swift::String v8;
  void *object;
  Swift::String v10;

  v1 = v0[4];
  if (v1 == 1)
    return objc_msgSend((id)objc_opt_self(LNIntentEnablement), "enabled");
  if (v1)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(object);
    v10._countAndFlagsBits = 0xD00000000000001BLL;
    v10._object = (void *)0x80000001000F4490;
    String.append(_:)(v10);
    result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000014, 0x80000001000F4470, "LinkDaemon/LNIntentEnablementRecord+Coding.swift", 48, 2);
    __break(1u);
  }
  else
  {
    v3 = v0[6];
    if (v3 >> 60 == 15)
    {
      v7 = 0;
    }
    else
    {
      v4 = v0[5];
      sub_10000795C(0, &qword_100128D18, NSKeyedUnarchiver_ptr);
      v5 = sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
      sub_10001EBF8(v4, v3);
      v7 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v5, v4, v3, v5);
      sub_10001C798();
    }
    v6 = objc_msgSend((id)objc_opt_self(LNIntentEnablement), "disabledWithReason:", v7);

    return v6;
  }
  return result;
}

void sub_100058E4C()
{
  sub_10005931C();
}

void sub_100058E70()
{
  sub_10005931C();
}

void sub_100058E94()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000183B8();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100013654() || (sub_100019AF8(), !(v6 ^ v4 | v5)))
  {
    sub_100011848();
    sub_10002F8B4();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000176CC();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = sub_10001E1F0();
  sub_1000513F4(v8, v9);
  if (!v3)
  {
LABEL_11:
    sub_1000117B4();
    *v1 = v2;
    sub_10001ADFC();
    return;
  }
  sub_10001C028();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_100058F28()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000183B8();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100013654() || (sub_100019AF8(), !(v6 ^ v4 | v5)))
  {
    sub_100011848();
    sub_10002F988();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000176CC();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10001E1F0();
  sub_100051560();
  if (!v3)
  {
LABEL_11:
    sub_1000117B4();
    *v1 = v2;
    sub_10001ADFC();
    return;
  }
  sub_10001C028();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_100058FC0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000183B8();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100013654() || (sub_100019AF8(), !(v6 ^ v4 | v5)))
  {
    sub_100011848();
    sub_10001B71C();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000176CC();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10001E1F0();
  sub_10001580C();
  if (!v3)
  {
LABEL_11:
    sub_1000117B4();
    *v1 = v2;
    sub_10001ADFC();
    return;
  }
  sub_10001C028();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_100059054()
{
  sub_10005931C();
}

void sub_100059078()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000183B8();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100013654() || (sub_100019AF8(), !(v6 ^ v4 | v5)))
  {
    sub_100011848();
    sub_10002FD7C();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000176CC();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10001E1F0();
  sub_100051CA8();
  if (!v3)
  {
LABEL_11:
    sub_1000117B4();
    *v1 = v2;
    sub_10001ADFC();
    return;
  }
  sub_10001C028();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_10005910C()
{
  sub_10005931C();
}

void sub_100059130(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    sub_10000EC68();
    v3 = _CocoaArrayWrapper.endIndex.getter(v17);
    sub_1000117B4();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v4 < 0)
      v18 = *v1;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    sub_10000BFF4();
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_30;
  }
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    sub_10000BFF4();
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    v10 = sub_10001B47C(v8);
    sub_10005A3B0(v10, v11, a1, (void (*)(uint64_t, _QWORD, uint64_t))sub_100051D50, &qword_100129AC8, &qword_100129AC0, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000530CC);
    if (v12 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v19 = v4;
    else
      v19 = v4 & 0xFFFFFFFFFFFFFF8;
    sub_10000BFF4();
    v9 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease();
  }
  if (v12 < 1)
    goto LABEL_20;
  sub_10001F6A4();
  if (!v15)
  {
    *(_QWORD *)(v13 + 16) = v14;
LABEL_20:
    v16 = swift_bridgeObjectRelease();
    specialized Array._endMutation()(v16);
    return;
  }
  __break(1u);
}

void sub_1000592D4()
{
  sub_10005931C();
}

void sub_1000592F8()
{
  sub_10005931C();
}

void sub_10005931C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_10001A69C();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v26 = v1;
    else
      v26 = v1 & 0xFFFFFFFFFFFFFF8;
    sub_10000C020();
    v11 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v11 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v0;
  if ((unint64_t)*v0 >> 62)
  {
    if (v12 < 0)
      v27 = *v0;
    else
      v27 = v12 & 0xFFFFFFFFFFFFFF8;
    sub_100016794();
    v13 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
  {
    __break(1u);
    goto LABEL_30;
  }
  v12 = *v0;
  v15 = ((uint64_t (*)(uint64_t))swift_isUniquelyReferenced_nonNull_bridgeObject)(*v0);
  *v0 = v12;
  v13 = 0;
  if (v15 && (v12 & 0x8000000000000000) == 0 && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v13 = 1;
  }
  v29 = v11;
  v11 = (uint64_t)v9;
  v9 = v7;
  v7 = (unint64_t *)v5;
  v5 = v3;
  if ((unint64_t)v12 >> 62)
    goto LABEL_31;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    sub_100016794();
    v12 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:))(v13, v17, 1, v12);
    swift_bridgeObjectRelease(*v0);
    *v0 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    v3 = v5;
    v5 = (uint64_t *)v7;
    v7 = v9;
    v9 = (unint64_t *)v11;
    v11 = v29;
LABEL_16:
    v18 = sub_10001B47C(v16);
    v20 = sub_10005A3B0(v18, v19, v10, (void (*)(uint64_t, _QWORD, uint64_t))v9, v7, v5, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))v3);
    if (v21 >= v11)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v12 < 0)
      v28 = v12;
    else
      v28 = v12 & 0xFFFFFFFFFFFFFF8;
    sub_100016794();
    v17 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v12);
  }
  if (v21 < 1)
    goto LABEL_20;
  sub_10001F6A4();
  if (!v24)
  {
    *(_QWORD *)(v22 + 16) = v23;
LABEL_20:
    v25 = swift_bridgeObjectRelease(v20);
    specialized Array._endMutation()(v25);
    return;
  }
  __break(1u);
}

void sub_1000594F0(uint64_t a1)
{
  sub_100059518(a1, (uint64_t (*)(void))sub_100030100, (void (*)(uint64_t))sub_10005203C);
}

void sub_100059504(uint64_t a1)
{
  sub_100059518(a1, (uint64_t (*)(void))sub_10002FA78, (void (*)(uint64_t))sub_10005165C);
}

void sub_100059518(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_100013654() || v7 + v5 > *(_QWORD *)(v6 + 24) >> 1)
  {
    sub_100011848();
    v6 = a2();
  }
  if (!*(_QWORD *)(v3 + 16))
  {
    if (!v5)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_1000176CC();
  if (v10 != v11)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v12 = sub_10001E1F0();
  a3(v12);
  if (!v5)
  {
LABEL_11:
    sub_1000117B4();
    *v4 = v6;
    return;
  }
  sub_10001C028();
  if (!v11)
  {
    *(_QWORD *)(v6 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

#error "10005979C: call analysis failed (funcsize=287)"

void sub_100059B6C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t __dst[10];
  uint64_t v15;

  if (qword_100127EC0 != -1)
    swift_once(&qword_100127EC0, sub_100098680);
  memcpy(__dst, &qword_10012D158, sizeof(__dst));
  v3 = __dst[2];
  v4 = __dst[3];
  v15 = __dst[8];
  objc_allocWithZone((Class)type metadata accessor for Registry(0));
  swift_retain();
  sub_10005A6C8(v3, v4);
  swift_retain();
  swift_retain();
  sub_10005A6D8(&v15);
  sub_10009980C((uint64_t)__dst, v5, v6, v7, v8, v9, v10, v11, v13, __dst[0], __dst[1], __dst[2], __dst[3], __dst[4], __dst[5], __dst[6], __dst[7], __dst[8], __dst[9],
    v15);
  if (!v1)
    *a1 = v12;
}

uint64_t sub_100059C50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  sub_100014360((uint64_t)v4, 1, 1, v5);
  v6 = type metadata accessor for TranscriptActionRecordStreamManager(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  result = sub_100048934((uint64_t)v4);
  *a1 = result;
  return result;
}

uint64_t sub_100059CEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t updated;
  uint64_t v5;
  uint64_t result;

  updated = type metadata accessor for UpdateRegistryService();
  v5 = swift_allocObject(updated, 120, 15);
  swift_retain();
  result = swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = a1;
  *a2 = v5;
  return result;
}

id sub_100059D4C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id result;

  v2 = sub_100059E24();
  v3 = sub_10001BE7C(&qword_100129B18);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1000EFAE0;
  if (qword_100127E90 != -1)
    swift_once(&qword_100127E90, sub_10009388C);
  v5 = (void *)qword_10012D128;
  *(_QWORD *)(v4 + 56) = &type metadata for NotifyingTranscriptObserver;
  *(_QWORD *)(v4 + 64) = &off_10011D568;
  *(_QWORD *)(v4 + 32) = v5;
  v6 = objc_allocWithZone((Class)type metadata accessor for Transcript());
  v7 = v5;
  result = sub_100041CF8(v2, v4);
  *a1 = result;
  return result;
}

uint64_t sub_100059E24()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  char v14;

  v1 = v0;
  v2 = *(void **)(v0 + 16);
  swift_retain();
  objc_msgSend(v2, "lock");
  v3 = swift_beginAccess(v0 + 48, v12, 1, 0);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(unsigned __int8 *)(v0 + 56);
  if (v5 == 255)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(v0 + 24))(&v13, v3);
    v7 = v13;
    v6 = v14;
    v8 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 48) = v13;
    v9 = *(_BYTE *)(v1 + 56);
    *(_BYTE *)(v1 + 56) = v6;
    sub_10005A698(v7, v6);
    sub_10005A6A4(v8, v9);
  }
  else
  {
    v6 = v5 & 1;
    v7 = *(_QWORD *)(v0 + 48);
  }
  sub_10005A680(v4, v5);
  objc_msgSend(v2, "unlock");
  swift_release();
  if ((v6 & 1) == 0)
    return v7;
  v11 = sub_10001BE7C(&qword_100129B10);
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v11, v11);
  __break(1u);
  return result;
}

uint64_t sub_100059F2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = sub_100059E24();
  v3 = type metadata accessor for PruneTranscriptService();
  v4 = swift_allocObject(v3, 120, 15);
  result = swift_defaultActor_initialize(v4);
  *(_QWORD *)(v4 + 112) = v2;
  *a1 = v4;
  return result;
}

id sub_100059F88@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  uint64_t v3;
  id result;

  v2 = objc_allocWithZone((Class)type metadata accessor for SuggestedActionsService());
  v3 = swift_retain();
  result = sub_10005BC70(v3, (uint64_t)&unk_100129D90, 0);
  *a1 = result;
  return result;
}

id sub_100059FE8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  id result;

  type metadata accessor for ApplicationService();
  v2 = swift_retain();
  result = sub_10006BB34(v2);
  *a1 = result;
  return result;
}

id sub_10005A038@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExtensionService()), "init");
  *a1 = result;
  return result;
}

uint64_t sub_10005A07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v6 = v3;
  swift_defaultActor_initialize(v3);
  v8 = v3 + qword_100129D98;
  v9 = sub_10001BE7C(&qword_100129B00);
  sub_100014360(v8, 1, 1, v9);
  *(_QWORD *)(v6 + qword_100129DA0) = 0;
  *(_QWORD *)(v6 + qword_10012CD30) = a1;
  sub_10000795C(0, &qword_100129B08, NSBackgroundActivityScheduler_ptr);
  swift_retain();
  sub_10005A348(a2, a3, (SEL *)&selRef_initWithIdentifier_);
  *(_QWORD *)(v6 + 112) = v10;
  v11 = v10;
  objc_msgSend(v11, "setPreregistered:", 1);

  sub_100018B6C();
  return v6;
}

void sub_10005A164(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;

  v7 = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
  *(_QWORD *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 56) = -1;
  *(_BYTE *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  sub_10001000C();
}

uint64_t sub_10005A1BC(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v2;

  a1(&v2);
  return v2;
}

uint64_t sub_10005A1F0(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v2;

  a1(&v2);
  return v2;
}

void sub_10005A238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  objc_class *ObjectType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  id v42;

  sub_10001A69C();
  a20 = v22;
  a21 = v23;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  ObjectType = (objc_class *)swift_getObjectType(v21);
  swift_defaultActor_initialize(v21);
  sub_10000795C(0, &qword_100129AF8, NSXPCListener_ptr);
  v35 = *v31;
  swift_retain();
  if (v35 != -1)
    swift_once(v31, v25);
  v36 = *v29;
  v37 = *v27;
  swift_bridgeObjectRetain(v37);
  sub_10005A348(v36, v37, (SEL *)&selRef_initWithMachServiceName_);
  v21[14] = v38;
  v21[15] = v33;
  sub_1000166E8();
  sub_100018B6C();
  a9.receiver = v21;
  a9.super_class = ObjectType;
  v39 = objc_msgSendSuper2(&a9, "init");
  v40 = (void *)v39[14];
  v41 = v39;
  objc_msgSend(v40, "setDelegate:", v41);
  v42 = v40;
  objc_msgSend(v42, "resume");

  sub_10001BFF8();
  sub_100018898();
}

void sub_10005A348(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v3;
  id v6;
  NSString v7;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(v6, *a3, v7);

  sub_10001000C();
}

uint64_t sub_10005A3B0(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD, uint64_t), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void (*v21)(_BYTE *, _QWORD);
  id *v22;
  id v23;
  uint64_t v24;
  _BYTE v25[32];

  v13 = result;
  v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v24 = a3;
    else
      v24 = a3 & 0xFFFFFFFFFFFFFF8;
    sub_10000EC68();
    v15 = _CocoaArrayWrapper.endIndex.getter(v24);
    result = sub_1000117B4();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (v13)
  {
    if (v14)
    {
      if (a3 < 0)
        v16 = a3;
      else
        v16 = a3 & 0xFFFFFFFFFFFFFF8;
      sub_10000EC68();
      v17 = _CocoaArrayWrapper.endIndex.getter(v16);
      result = sub_1000117B4();
      if (v17 <= a2)
      {
        if (v15 >= 1)
        {
          v18 = sub_10005A640(a5, a6);
          sub_10000EC68();
          for (i = 0; i != v15; ++i)
          {
            v20 = sub_10001BE7C(a6);
            v21 = (void (*)(_BYTE *, _QWORD))a7(v25, i, a3, v20, v18);
            v23 = *v22;
            v21(v25, 0);
            *(_QWORD *)(v13 + 8 * i) = v23;
          }
          sub_1000117B4();
          return a3;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        a4((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), v13);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10005A52C@<X0>(void (*a1)(uint64_t *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_10005A1F0(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10005A558@<X0>(void (*a1)(uint64_t *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_10005A1BC(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10005A584()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005A5A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005A558(*(void (**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

id sub_10005A5B0@<X0>(_QWORD *a1@<X8>)
{
  return sub_100059FE8(a1);
}

uint64_t sub_10005A5C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100059CEC(v1, a1);
}

id sub_10005A5E0@<X0>(_QWORD *a1@<X8>)
{
  return sub_100059D4C(a1);
}

uint64_t sub_10005A5F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005A52C(*(void (**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_10005A600@<X0>(uint64_t *a1@<X8>)
{
  return sub_100059F2C(a1);
}

id sub_10005A618@<X0>(_QWORD *a1@<X8>)
{
  return sub_100059F88(a1);
}

ValueMetadata *type metadata accessor for LinkDaemon()
{
  return &type metadata for LinkDaemon;
}

uint64_t sub_10005A640(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100025A6C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005A680(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_10005A698(result, a2 & 1);
  return result;
}

uint64_t sub_10005A698(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_10005A6A4(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_10005A6BC(result, a2 & 1);
  return result;
}

uint64_t sub_10005A6BC(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_10005A6C8(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

_QWORD *sub_10005A6D8(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

void sub_10005A724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = *(_QWORD *)(v1 + 8);
  swift_bridgeObjectRetain();
  sub_10001AC2C();
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  sub_10001AC2C();
  swift_bridgeObjectRelease(v4);
  v5 = *(id *)(v1 + 32);
  NSObject.hash(into:)(a1);

}

uint64_t sub_10005A7A0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0) & 1) == 0)
    return 0;
  v8 = a1[2];
  v9 = a1[3];
  v10 = a2[2];
  v11 = a2[3];
  v12 = v8 == v10 && v9 == v11;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v10, v11, 0) & 1) == 0)
    return 0;
  sub_10000795C(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
  return static NSObject.== infix(_:_:)(a1[4], a2[4]) & 1;
}

Swift::Int sub_10005A83C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  id v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, 0);
  v1 = *(_QWORD *)(v0 + 8);
  *(_QWORD *)&v2 = swift_bridgeObjectRetain().n128_u64[0];
  sub_100018A28(v3, v2);
  swift_bridgeObjectRelease(v1);
  v4 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)&v5 = swift_bridgeObjectRetain().n128_u64[0];
  sub_100018A28(v6, v5);
  swift_bridgeObjectRelease(v4);
  v7 = *(id *)(v0 + 32);
  NSObject.hash(into:)(v9);

  return Hasher._finalize()();
}

Swift::Int sub_10005A8C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v9[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = (void *)v1[4];
  Hasher.init(_seed:)(v9, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v9, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v9, v4, v5);
  swift_bridgeObjectRelease(v5);
  v7 = v6;
  NSObject.hash(into:)(v9);

  return Hasher._finalize()();
}

void *sub_10005A96C()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0xD000000000000017, 0x80000001000F44F0, 0, 0);
  return memcpy(&unk_100129B20, __src, 0xA8uLL);
}

uint64_t sub_10005A9C0(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_100129BC8, 0xD000000000000010, 0x80000001000F44D0);
}

uint64_t sub_10005A9E4(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_100129BE0, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_10005AA08(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_100129BF8, 0x6D796E6F6E7973, 0xE700000000000000);
}

void sub_10005AA28(_OWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  __int128 v25;
  _OWORD v26[10];
  _BYTE v27[192];
  _QWORD v28[10];
  _BYTE v29[168];
  _QWORD v30[24];
  SQLite::Insert v31;

  v30[23] = a2;
  if (qword_100127D50 != -1)
    swift_once(&qword_100127D50, sub_10005A96C);
  sub_1000189C4(v30, &unk_100129B20);
  sub_1000189C4(v29, &unk_100129B20);
  sub_1000379AC(v30);
  if (qword_100127D58 != -1)
    swift_once(&qword_100127D58, sub_10005A9C0);
  v4 = sub_10001768C((uint64_t)&qword_100129BC8);
  v26[0] = *a1;
  <- infix<A>(_:_:)(v4, v5, v6, (uint64_t)v26, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  v7 = sub_10001BE7C(&qword_100128D08);
  inited = swift_initStackObject(v7, v27);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  if (qword_100127D68 != -1)
    swift_once(&qword_100127D68, sub_10005AA08);
  v9 = qword_100129BF8;
  v10 = unk_100129C00;
  v11 = qword_100129C08;
  v12 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  JSONEncoder.init()();
  v13 = LNStaticDeferredLocalizedString.asLocalizedStringResourceJSON(encoder:)();
  if (v2)
  {
    swift_release();
    sub_100019F20(v28);
    sub_1000189C4(v26, v29);
    sub_100037A7C(v26);
    *(_QWORD *)(inited + 16) = 0;
    swift_setDeallocating(inited);
    sub_10001CC3C();
  }
  else
  {
    v15 = v13;
    v16 = v14;
    swift_release();
    *(_QWORD *)&v25 = v15;
    *((_QWORD *)&v25 + 1) = v16;
    <- infix<A>(_:_:)(v9, v10, v11, (uint64_t)&v25, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    swift_bridgeObjectRelease(v16);
    if (qword_100127D60 != -1)
      swift_once(&qword_100127D60, sub_10005A9E4);
    v17 = sub_10001768C((uint64_t)&qword_100129BE0);
    v25 = a1[1];
    <- infix<A>(_:_:)(v17, v18, v19, (uint64_t)&v25, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    v20 = QueryType.insert(_:_:)((uint64_t)v28);
    v22 = v21;
    v24 = v23;
    swift_setDeallocating(inited);
    sub_10001CC3C();
    sub_100019F20(v28);
    sub_1000189C4(v26, v29);
    sub_100037A7C(v26);
    v31.template._countAndFlagsBits = v20;
    v31.template._object = v22;
    v31.bindings._rawValue = v24;
    Connection.run(_:)(v31);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v22);
  }
  sub_1000117E8();
}

_UNKNOWN **sub_10005AD0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _UNKNOWN **v24;
  uint64_t v25;
  uint64_t v26;
  _UNKNOWN **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  ValueMetadata *v32;
  _UNKNOWN **v33;
  _QWORD v34[21];
  _BYTE v35[176];
  uint64_t v36;

  if (qword_100127D50 != -1)
    swift_once(&qword_100127D50, sub_10005A96C);
  sub_1000189C4(v34, &unk_100129B20);
  sub_1000379AC(v34);
  if (qword_100127D58 != -1)
    swift_once(&qword_100127D58, sub_10005A9C0);
  sub_10001768C((uint64_t)&qword_100129BC8);
  v30 = a3;
  v31 = a4;
  == infix<A>(_:_:)();
  v9 = v8;
  v11 = v10;
  v13 = v12;
  if (qword_100127D60 != -1)
    swift_once(&qword_100127D60, sub_10005A9E4);
  sub_10001768C((uint64_t)&qword_100129BE0);
  v30 = a1;
  v31 = a2;
  == infix<A>(_:_:)();
  v15 = v14;
  && infix(_:_:)(v9, v11, v13, v16, v14, v17);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v11);
  sub_1000059B0();
  swift_bridgeObjectRelease(v15);
  sub_1000189C4(&v29, v34);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = &protocol witness table for Table;
  QueryType.filter(_:)(v19, v21, v23, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)&v30);
  sub_1000117AC(v23);
  sub_1000117AC(v21);
  sub_100037A7C(v34);
  sub_1000189C4(v35, &v30);
  v32 = &type metadata for Table;
  v33 = &protocol witness table for Table;
  v30 = swift_allocObject(&unk_10011C1A0, 184, 7);
  sub_1000189C4((void *)(v30 + 16), v35);
  v25 = v36;
  Connection.prepareRowIterator(_:)(&v30);
  v26 = sub_10000E87C(&v30);
  if (!v25)
  {
    __chkstk_darwin(v26);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    v24 = v28;
    swift_release();
    sub_1000059B0();
    swift_release();
  }
  return v24;
}

uint64_t sub_10005B014()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_10005B09C@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[5];

  sub_10005B0DC(v3);
  return sub_10005B30C((uint64_t)v3, a1);
}

uint64_t sub_10005B0D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10005B09C(a1);
}

uint64_t sub_10005B0DC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (qword_100127D58 != -1)
    swift_once(&qword_100127D58, sub_10005A9C0);
  Row.get<A>(_:)();
  if (qword_100127D60 != -1)
    swift_once(&qword_100127D60, sub_10005A9E4);
  Row.get<A>(_:)();
  if (qword_100127D68 != -1)
    swift_once(&qword_100127D68, sub_10005AA08);
  Row.get<A>(_:)();
  sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
  result = ((uint64_t (*)())LNStaticDeferredLocalizedString.init(localizedStringResourceJSON:))();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = result;
  return result;
}

_QWORD *sub_10005B2AC@<X0>(_QWORD *(*a1)(_QWORD *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  _QWORD v5[5];

  result = a1(v5);
  if (!v2)
    return (_QWORD *)sub_10005B30C((uint64_t)v5, a2);
  return result;
}

_QWORD *sub_10005B2F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005B2AC(*(_QWORD *(**)(_QWORD *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_10005B30C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_100129C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for LNAppShortcutSpanSynonymRecord(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

}

_QWORD *initializeWithCopy for LNAppShortcutSpanSynonymRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v6 = v5;
  return a1;
}

_QWORD *assignWithCopy for LNAppShortcutSpanSynonymRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (void *)a2[4];
  v9 = (void *)a1[4];
  a1[4] = v8;
  v10 = v8;

  return a1;
}

_QWORD *assignWithTake for LNAppShortcutSpanSynonymRecord(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for LNAppShortcutSpanSynonymRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNAppShortcutSpanSynonymRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LNAppShortcutSpanSynonymRecord()
{
  return &type metadata for LNAppShortcutSpanSynonymRecord;
}

unint64_t sub_10005B544()
{
  unint64_t result;

  result = qword_100129C18;
  if (!qword_100129C18)
  {
    result = swift_getWitnessTable(&unk_1000F0830, &type metadata for LNAppShortcutSpanSynonymRecord);
    atomic_store(result, (unint64_t *)&qword_100129C18);
  }
  return result;
}

_QWORD *sub_10005B580(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  id v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;
  _BYTE v20[32];
  _OWORD v21[2];
  __int128 v22;
  uint64_t v23;
  id v24;

  v2 = type metadata accessor for NSFastEnumerationIterator(0);
  v19 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = a1;
  NSOrderedSet.makeIterator()();

  v6 = sub_10005E720();
  dispatch thunk of IteratorProtocol.next()(v2, v6);
  if (v23)
  {
    v7 = _swiftEmptyArrayStorage;
    do
    {
      sub_1000273C0(&v22, v21);
      sub_10000FE10((uint64_t)v21, (uint64_t)v20);
      v8 = sub_10000795C(0, &qword_100129550, LNEffectiveBundleIdentifier_ptr);
      if (swift_dynamicCast(&v24, v20, (char *)&type metadata for Any + 8, v8, 6))
      {
        v9 = v24;
        v10 = objc_msgSend(v24, "bundleIdentifier");

        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v13 = v12;

        sub_10000E87C(v21);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        {
          sub_10001B71C();
          v7 = v16;
        }
        v14 = v7[2];
        if (v14 >= v7[3] >> 1)
        {
          sub_10001B71C();
          v7 = v17;
        }
        v7[2] = v14 + 1;
        v15 = &v7[2 * v14];
        v15[4] = v11;
        v15[5] = v13;
      }
      else
      {
        sub_10000E87C(v21);
      }
      dispatch thunk of IteratorProtocol.next()(v2, v6);
    }
    while (v23);
  }
  else
  {
    v7 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v4, v2);
  return v7;
}

uint64_t sub_10005B7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_10005B804()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSString v9;
  id v10;
  uint64_t v11;

  v1 = (void *)objc_opt_self(LNConnectionPolicy);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "policyWithBundleIdentifier:", v2);

  *(_QWORD *)(v0 + 80) = 0;
  v4 = objc_msgSend(v3, "connectionWithError:", v0 + 80);
  *(_QWORD *)(v0 + 144) = v4;

  v6 = *(void **)(v0 + 80);
  if (v4)
  {
    sub_1000100D8(v5, &qword_100129D80, AFPreferences_ptr);
    v7 = v6;
    sub_10000358C();
    if (v8)
    {
      v9 = String._bridgeToObjectiveC()();
      sub_1000059A8();
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)(v0 + 152) = v9;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10005B9EC;
    *(_QWORD *)(v0 + 112) = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 88) = 0x40000000;
    *(_QWORD *)(v0 + 96) = sub_10005BB64;
    *(_QWORD *)(v0 + 104) = &unk_10011C388;
    objc_msgSend(v4, "fetchSuggestedActionsWithSiriLanguageCode:completionHandler:", v9, v0 + 80);
    return swift_continuation_await(v0 + 16);
  }
  else
  {
    v10 = v6;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10005B9EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  sub_10001DCCC();
  *v1 = *v0;
  *(_QWORD *)(v2 + 160) = *(_QWORD *)(v2 + 48);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_10005BA7C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 152);

  v2 = *(_QWORD *)(v0 + 120);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_10005BAF0()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 152);
  v2 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005BB64(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
    return sub_1000C267C(v3, a3);
  sub_10000795C(0, &qword_100129678, LNSuggestedAction_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2);
  return sub_1000C26D0(v3, v6);
}

uint64_t sub_10005BBCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = type metadata accessor for Logger(0);
  sub_1000269D8(v0, qword_10012CD08);
  sub_100012A40(v0, (uint64_t)qword_10012CD08);
  v8 = type metadata accessor for SuggestedActionsService();
  v1 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v3 = String.init<A>(describing:)(&v8, v1);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v5 = v2;
    v6 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v6, v7, v3, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10005BC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  objc_class *ObjectType;
  char *v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType(v3);
  *(_QWORD *)&v3[OBJC_IVAR____TtC10LinkDaemon23SuggestedActionsService_registrySource] = a1;
  v8 = &v3[OBJC_IVAR____TtC10LinkDaemon23SuggestedActionsService_applicationSuggestionsProvider];
  *(_QWORD *)v8 = a2;
  *((_QWORD *)v8 + 1) = a3;
  v10.receiver = v3;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, "init");
}

void sub_10005BCDC()
{
  _swift_stdlib_reportUnimplementedInitializer("LinkDaemon.SuggestedActionsService", 34, "init()", 6, 0);
  __break(1u);
}

uint64_t type metadata accessor for SuggestedActionsService()
{
  return objc_opt_self(_TtC10LinkDaemon23SuggestedActionsService);
}

uint64_t sub_10005BD70()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNDaemonSuggestionsService);
  qword_10012CD20 = result;
  *(_QWORD *)algn_10012CD28 = v1;
  return result;
}

uint64_t sub_10005BD9C()
{
  uint64_t v0;

  if (qword_100127D78 != -1)
    swift_once(&qword_100127D78, sub_10005BD70);
  v0 = qword_10012CD20;
  sub_1000101B0();
  return v0;
}

uint64_t sub_10005BDF4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_10005BE48()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = qword_100127D70;
  v2 = *(id *)(v0 + 48);
  if (v1 == -1)
  {
    v3 = v2;
  }
  else
  {
    swift_once(&qword_100127D70, sub_10005BBCC);
    v3 = *(NSObject **)(v0 + 48);
  }
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = sub_100012A40(v6, (uint64_t)qword_10012CD08);
  *(_QWORD *)(v0 + 80) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);

  sub_10001B5B4();
  sub_100005900();
  v8 = sub_1000192BC();
  v9 = os_log_type_enabled(v3, v8);
  v11 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 56);
  v13 = *(_QWORD *)(v0 + 40);
  if (v9)
  {
    v25 = *(_QWORD *)(v0 + 56);
    v24 = *(_QWORD *)(v0 + 72);
    v14 = (uint8_t *)sub_100011780(12);
    v15 = sub_100011780(32);
    v26 = v15;
    *(_DWORD *)v14 = 136315138;
    sub_1000100D8(v15, &qword_100129CF0, LNSuggestionsRequest_ptr);
    v16 = swift_bridgeObjectRetain();
    v17 = Array.description.getter(v16);
    v19 = v18;
    swift_bridgeObjectRelease(v13);
    *(_QWORD *)(v0 + 32) = sub_10000FBEC(v17, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    swift_bridgeObjectRelease(v19);
    sub_1000117AC(v13);
    _os_log_impl((void *)&_mh_execute_header, v3, v8, "Fetching suggested actions for requests: %s", v14, 0xCu);
    sub_100013320(v15);
    sub_1000133FC(v15);
    sub_1000133FC((uint64_t)v14);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v24, v25);
  }
  else
  {
    sub_1000117AC(*(_QWORD *)(v0 + 40));

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  v20 = sub_10001BE7C(&qword_100129D08);
  v21 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 88) = v21;
  *(_OWORD *)(v21 + 16) = *(_OWORD *)(v0 + 40);
  v22 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 96) = v22;
  *v22 = v0;
  v22[1] = sub_10005C0DC;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v20, v20, 0, 0, &unk_100129D18, v21, v20);
}

uint64_t sub_10005C0DC()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DCCC();
  v1 = *(_QWORD *)(v0 + 88);
  sub_100017C10(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_10005C118()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = *(NSObject **)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = sub_10001B5B4();
  Logger.logObject.getter(v3);
  v4 = sub_1000192BC();
  if (os_log_type_enabled(v1, v4))
  {
    v5 = (_DWORD *)sub_100011780(12);
    v6 = sub_100011780(32);
    v12 = v6;
    *v5 = 136315138;
    sub_10000EC68();
    v7 = sub_10001BE7C(&qword_100129D00);
    v8 = Dictionary.description.getter(v2, &type metadata for String, v7, &protocol witness table for String);
    v10 = v9;
    sub_1000117B4();
    *(_QWORD *)(v0 + 24) = sub_10000FBEC(v8, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    swift_bridgeObjectRelease(v10);
    sub_1000117AC(v2);
    sub_100019424((void *)&_mh_execute_header, v1, v4, "Fetching suggested actions succeeded with result: %s");
    sub_100013320(v6);
    sub_1000133FC(v6);
    sub_1000133FC((uint64_t)v5);
  }
  else
  {
    sub_1000117AC(v2);
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_10005C28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[26] = a3;
  v4[27] = a4;
  v4[24] = a1;
  v4[25] = a2;
  v5 = sub_10001BE7C((uint64_t *)&unk_100129D20);
  v4[28] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[29] = v6;
  v4[30] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10001BE7C(&qword_10012AD50) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[31] = swift_task_alloc(v7);
  v4[32] = swift_task_alloc(v7);
  return swift_task_switch(sub_10005C328, 0, 0);
}

uint64_t sub_10005C328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 208);
  if (!((unint64_t)v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = sub_1000101B0();
    if (v2)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
    v36 = **(_QWORD **)(v0 + 200);
    v37 = sub_10001BE7C(&qword_100129D08);
    TaskGroup.makeAsyncIterator()(v36, v37);
    v38 = sub_10005EA9C();
    *(_QWORD *)(v0 + 264) = v38;
    v39 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(_QWORD *)(v0 + 272) = v39;
    *v39 = v0;
    v39[1] = sub_10005C618;
    return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 184, *(_QWORD *)(v0 + 224), v38);
  }
  if (v1 < 0)
    v40 = *(_QWORD *)(v0 + 208);
  else
    v40 = v1 & 0xFFFFFFFFFFFFFF8;
  sub_1000101B0();
  result = _CocoaArrayWrapper.endIndex.getter(v40);
  v2 = result;
  if (!result)
    goto LABEL_17;
LABEL_3:
  if (v2 >= 1)
  {
    v11 = 0;
    v43 = v1 & 0xC000000000000001;
    v42 = *(_QWORD *)(v0 + 208) + 32;
    v44 = v2;
    do
    {
      if (v43)
        v12 = sub_100018778(result, *(_QWORD *)(v0 + 208));
      else
        v12 = (uint64_t)sub_100018F00(result, v4, v5, v6, v7, v8, v9, v10, v41, v42);
      v13 = (void *)v12;
      v15 = *(_QWORD *)(v0 + 248);
      v14 = *(_QWORD *)(v0 + 256);
      v16 = *(void **)(v0 + 216);
      v17 = type metadata accessor for TaskPriority(0);
      sub_100014360(v14, 1, 1, v17);
      v18 = (_QWORD *)swift_allocObject(&unk_10011C320, 48, 7);
      v18[2] = 0;
      v19 = v18 + 2;
      v18[3] = 0;
      v18[4] = v13;
      v18[5] = v16;
      sub_10002AA78(v14, v15);
      LODWORD(v14) = sub_10001C93C(v15, 1, v17);
      v20 = v13;
      v21 = v16;
      v22 = *(_QWORD *)(v0 + 248);
      if ((_DWORD)v14 == 1)
      {
        sub_10000A7E4(*(_QWORD *)(v0 + 248));
        v23 = 0;
      }
      else
      {
        v24 = TaskPriority.rawValue.getter(v21);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v22, v17);
        v23 = v24;
      }
      v25 = *v19;
      if (*v19)
      {
        v26 = v18[3];
        ObjectType = swift_getObjectType(*v19);
        swift_unknownObjectRetain(v25);
        v28 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v26);
        v30 = v29;
        swift_unknownObjectRelease(v25);
      }
      else
      {
        v28 = 0;
        v30 = 0;
      }
      v31 = **(_QWORD **)(v0 + 200);
      v32 = swift_allocObject(&unk_10011C348, 32, 7);
      *(_QWORD *)(v32 + 16) = &unk_100129D40;
      *(_QWORD *)(v32 + 24) = v18;
      v33 = sub_10001BE7C(&qword_100129D08);
      v34 = v30 | v28;
      if (v30 | v28)
      {
        *(_QWORD *)(v0 + 72) = 0;
        *(_QWORD *)(v0 + 80) = 0;
        v34 = v0 + 72;
        *(_QWORD *)(v0 + 88) = v28;
        *(_QWORD *)(v0 + 96) = v30;
      }
      ++v11;
      v35 = *(_QWORD *)(v0 + 256);
      *(_QWORD *)(v0 + 104) = 1;
      *(_QWORD *)(v0 + 112) = v34;
      *(_QWORD *)(v0 + 120) = v31;
      swift_task_create(v23 | 0x3100, v0 + 104, v33, &unk_100129D48, v32);

      swift_release();
      result = sub_10000A7E4(v35);
    }
    while (v44 != v11);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005C618()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1000143EC();
  sub_10001010C(*(_QWORD *)(v0 + 272), v2);
  if (v1)
  {
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    sub_10001B69C();
  }
  else
  {
    *(_QWORD *)(v0 + 280) = &_swiftEmptyDictionarySingleton;
  }
  sub_1000167A8();
  return sub_100011788();
}

void sub_10005C688()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD *);
  uint64_t v43;
  int64_t v44;

  v1 = v0[23];
  v2 = v0[35];
  if (!v1)
  {
    v34 = v0[31];
    v33 = v0[32];
    v35 = v0[30];
    v36 = (_QWORD *)v0[24];
    (*(void (**)(uint64_t, _QWORD))(v0[29] + 8))(v35, v0[28]);
    swift_bridgeObjectRelease(v0[23]);
    *v36 = v2;
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    sub_100018E48();
    __asm { BR              X0 }
  }
  sub_10000C030();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  v0[22] = v2;
  sub_1000358AC(v1, sub_10005EAE0, 0);
  v43 = v0[2];
  v44 = v0[5];
  v4 = v0[6];
  v41 = v0[3];
  v42 = (void (*)(_QWORD *))v0[7];
  v40 = (unint64_t)(v0[4] + 64) >> 6;
  v5 = (_QWORD *)v0[35];
  sub_10000C030();
  while (1)
  {
    v0[36] = v5;
    if (v4)
    {
      v6 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v7 = v6 | (v44 << 6);
    }
    else
    {
      v8 = v44 + 1;
      if (__OFADD__(v44, 1))
        goto LABEL_42;
      if (v8 >= v40)
        goto LABEL_38;
      v9 = *(_QWORD *)(v41 + 8 * v8);
      v10 = v44 + 1;
      if (!v9)
      {
        sub_10000ECCC();
        if (v11 == v12)
          goto LABEL_38;
        sub_10005EEFC();
        if (!v9)
        {
          sub_10000ECCC();
          if (v11 == v12)
            goto LABEL_38;
          sub_10005EEFC();
          if (!v9)
          {
            sub_10000ECCC();
            if (v11 == v12)
              goto LABEL_38;
            sub_10005EEFC();
            if (!v9)
            {
              sub_10000ECCC();
              if (v11 == v12)
                goto LABEL_38;
              sub_10005EEFC();
              if (!v9)
              {
                v10 = v13 + 5;
                if (v13 + 5 >= v40)
                  goto LABEL_38;
                v9 = *(_QWORD *)(v41 + 8 * v10);
                if (!v9)
                {
                  v14 = v44 + 7;
                  while (v14 < v40)
                  {
                    v9 = *(_QWORD *)(v41 + 8 * v14++);
                    if (v9)
                    {
                      v10 = v14 - 1;
                      goto LABEL_26;
                    }
                  }
LABEL_38:
                  sub_1000059A8();
                  sub_1000358EC(v43);
                  swift_release();
                  swift_bridgeObjectRelease(0x8000000000000000);
                  sub_1000059A8();
                  v38 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
                  v0[37] = v38;
                  *v38 = v0;
                  v38[1] = sub_10005CA74;
                  sub_100018E48();
                  dispatch thunk of AsyncIteratorProtocol.next()();
                  return;
                }
              }
            }
          }
        }
      }
LABEL_26:
      v4 = (v9 - 1) & v9;
      v7 = __clz(__rbit64(v9)) + (v10 << 6);
      v44 = v10;
    }
    v15 = (_QWORD *)(*(_QWORD *)(v43 + 48) + 16 * v7);
    v16 = v15[1];
    v17 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v7);
    v0[19] = *v15;
    v0[20] = v16;
    v0[21] = v17;
    swift_bridgeObjectRetain();
    sub_10000C030();
    v42(v0 + 19);
    sub_1000100D0();
    sub_1000059C4();
    v19 = v0[16];
    v18 = v0[17];
    v20 = v0[18];
    v22 = sub_100016064(v19);
    v23 = v5[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      break;
    v26 = v21;
    if (v5[3] >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10001BE7C(&qword_100129D58);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_1000320C8(v25, isUniquelyReferenced_nonNull_native & 1);
      v27 = sub_100016064(v19);
      if ((v26 & 1) != (v28 & 1))
      {
        sub_100018E48();
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v39);
        return;
      }
      v22 = v27;
    }
    v5 = (_QWORD *)v0[22];
    if ((v26 & 1) != 0)
    {
      sub_1000059C4();
      v29 = v5[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v29 + 8 * v22));
      *(_QWORD *)(v29 + 8 * v22) = v20;
      isUniquelyReferenced_nonNull_native = 1;
    }
    else
    {
      v5[(v22 >> 6) + 8] |= 1 << v22;
      v30 = (uint64_t *)(v5[6] + 16 * v22);
      *v30 = v19;
      v30[1] = v18;
      *(_QWORD *)(v5[7] + 8 * v22) = v20;
      v31 = v5[2];
      v12 = __OFADD__(v31, 1);
      v32 = v31 + 1;
      if (v12)
        goto LABEL_41;
      v5[2] = v32;
      isUniquelyReferenced_nonNull_native = 1;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t sub_10005CA74()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1000143EC();
  sub_10001010C(v0[37], v2);
  v3 = v0[36];
  if (v1)
  {
    swift_bridgeObjectRelease(v3);
    sub_10001B69C();
  }
  else
  {
    v0[35] = v3;
  }
  sub_1000167A8();
  return sub_100011788();
}

uint64_t sub_10005CAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[14] = a4;
  v5[15] = a5;
  v5[13] = a1;
  return swift_task_switch(sub_10005CAF4, 0, 0);
}

uint64_t sub_10005CAF4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  if (objc_msgSend(*(id *)(v0 + 112), "isOnScreen"))
  {
    v1 = (_QWORD *)swift_task_alloc(dword_100129D74);
    *(_QWORD *)(v0 + 128) = v1;
    v2 = sub_10001F3F8(v1, (uint64_t)sub_10005CB74);
    return sub_10005CD4C(v2);
  }
  else
  {
    v4 = (_QWORD *)swift_task_alloc(dword_100129D64);
    *(_QWORD *)(v0 + 136) = v4;
    v5 = sub_10001F3F8(v4, (uint64_t)sub_10005CC60);
    return sub_10005D130(v5);
  }
}

uint64_t sub_10005CB74()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001DCCC();
  v2[9] = v0;
  v2[10] = v1;
  sub_100017C10(v2[16]);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_10005CBAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t inited;
  id v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_QWORD **)(v1 + 104);
  v5 = sub_10001BE7C(&qword_100129D68);
  inited = swift_initStackObject(v5, v1 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  v7 = sub_10001AA38(inited, "bundleIdentifier");
  sub_100016774((uint64_t)v7);
  sub_100010114();
  *(_QWORD *)(inited + 32) = v0;
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = v3;
  v8 = sub_10001BE7C(&qword_100129D00);
  *v4 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v8, &protocol witness table for String);
  return sub_1000188F0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10005CC60()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10001DCCC();
  v2[11] = v0;
  v2[12] = v1;
  sub_100017C10(v2[17]);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_10005CC98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  id v7;
  uint64_t v8;

  v3 = *(_QWORD **)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 96);
  v5 = sub_10001BE7C(&qword_100129D68);
  inited = swift_initStackObject(v5, v1 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  v7 = sub_10001AA38(inited, "bundleIdentifier");
  sub_100016774((uint64_t)v7);
  sub_100010114();
  *(_QWORD *)(inited + 32) = v0;
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = v4;
  v8 = sub_10001BE7C(&qword_100129D00);
  *v3 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v8, &protocol witness table for String);
  return sub_1000188F0(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10005CD4C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005CDAC, 0, 0);
}

uint64_t sub_10005CDAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(int **)(*(_QWORD *)(v1 + 72)
               + OBJC_IVAR____TtC10LinkDaemon23SuggestedActionsService_applicationSuggestionsProvider);
  sub_100016774((uint64_t)objc_msgSend(*(id *)(v1 + 64), "bundleIdentifier"));
  sub_100010114();
  *(_QWORD *)(v1 + 104) = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  *(_QWORD *)(v1 + 112) = v4;
  *v4 = v1;
  v4[1] = sub_10005CE48;
  return v6(v0, v2);
}

uint64_t sub_10005CE48(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 112);
  v5 = *v2;
  *(_QWORD *)(v5 + 120) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 104));
    swift_task_dealloc(*(_QWORD *)(v5 + 96));
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }
}

#error "10005D030: call analysis failed (funcsize=148)"

uint64_t sub_10005D130(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005D190, 0, 0);
}

uint64_t sub_10005D190(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_log_t log, uint64_t a12, int a13, os_log_type_t type, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  sub_100018BD4();
  v32 = (char *)sub_100005E98();
  *(_QWORD *)(v31 + 104) = v32;
  v33 = *(_QWORD *)&v32[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  *(_QWORD *)(v31 + 112) = v33;
  if (v33)
  {
    v34 = async function pointer to Task<>.value.getter[1];
    swift_retain();
    v35 = (_QWORD *)swift_task_alloc(v34);
    *(_QWORD *)(v31 + 120) = v35;
    *v35 = v31;
    v35[1] = sub_10005D4E4;
    return ((uint64_t (*)(void))Task<>.value.getter)();
  }
  else
  {
    sub_10000EB00((uint64_t)objc_msgSend(*(id *)(v31 + 64), "bundleIdentifier"));
    sub_10001C228();
    *(_QWORD *)(v31 + 128) = 0;
    v37 = (_QWORD *)swift_task_alloc(dword_10012ACFC);
    *(_QWORD *)(v31 + 136) = v37;
    v38 = sub_10000C09C(v37, (uint64_t)sub_10005D58C);
    return sub_100097DAC(v38, v39);
  }
}

uint64_t sub_10005D4E4()
{
  uint64_t v0;

  sub_10001DCCC();
  sub_100017C10(*(_QWORD *)(v0 + 120));
  swift_release();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_10005D520()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_10000EB00((uint64_t)objc_msgSend(*(id *)(v1 + 64), "bundleIdentifier"));
  sub_10001C228();
  *(_QWORD *)(v1 + 128) = v0;
  v2 = (_QWORD *)swift_task_alloc(dword_10012ACFC);
  *(_QWORD *)(v1 + 136) = v2;
  v3 = sub_10000C09C(v2, (uint64_t)sub_10005D58C);
  return sub_100097DAC(v3, v4);
}

uint64_t sub_10005D58C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000143EC();
  sub_100013478();
  v0[18] = v2;
  v0[19] = v1;
  sub_10000EB14(v3);
  if (!v1)
    swift_bridgeObjectRelease(v0[16]);
  sub_1000167A8();
  return sub_100019418(v4, v5, v6);
}

uint64_t sub_10005D5E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_10000EB00((uint64_t)objc_msgSend(*(id *)(v1 + 64), "bundleIdentifier"));
  sub_10001C228();
  *(_QWORD *)(v1 + 160) = v0;
  v2 = (_QWORD *)swift_task_alloc(dword_10012B154);
  *(_QWORD *)(v1 + 168) = v2;
  v3 = sub_10000C09C(v2, (uint64_t)sub_10005D64C);
  return sub_100097DC0(v3, v4);
}

uint64_t sub_10005D64C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000143EC();
  sub_100013478();
  v0[22] = v2;
  v0[23] = v1;
  sub_10000EB14(v3);
  if (!v1)
    swift_bridgeObjectRelease(v0[20]);
  sub_1000167A8();
  return sub_100019418(v4, v5, v6);
}

void sub_10005D6A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  char v19;
  char v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v4 = v2[22];
  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease(v2[22]);
    v0 = _swiftEmptyArrayStorage;
LABEL_15:
    v24 = sub_100073758((uint64_t)v0);
    v2[24] = (uint64_t)v24;
    v25 = sub_10001AA38((uint64_t)v24, "bundleIdentifier");
    sub_10000EB00((uint64_t)v25);
    sub_10001C228();
    v2[25] = v1;
    v26 = (_QWORD *)swift_task_alloc(dword_10012B0E4);
    v2[26] = (uint64_t)v26;
    v27 = sub_10000C09C(v26, (uint64_t)sub_10005D7FC);
    sub_100097E58(v27, v28);
    return;
  }
  sub_10001F4C0();
  v5 = _CocoaArrayWrapper.endIndex.getter(v0);
  sub_1000059C4();
  if (!v5)
    goto LABEL_14;
LABEL_3:
  v6 = sub_1000073CC();
  sub_100052754(v6, v7, v8);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v1 = 0;
    sub_10005EEE8();
    do
    {
      if (v3)
        v17 = (void *)sub_100018778(v9, v2[22]);
      else
        v17 = sub_100018F00(v9, v10, v11, v12, v13, v14, v15, v16, v29, v30);
      static String._unconditionallyBridgeFromObjectiveC(_:)(objc_msgSend(v17, "identifier"));
      sub_10001F32C();
      sub_10001F1D0();
      if (v19)
      {
        v21 = sub_10001660C(v18);
        sub_100052754(v21, v22, v23);
        v0 = v31;
      }
      sub_1000188F8();
    }
    while (!v20);
    swift_bridgeObjectRelease(v2[22]);
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t sub_10005D7FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000143EC();
  sub_100013478();
  v0[27] = v2;
  v0[28] = v1;
  sub_10000EB14(v3);
  if (!v1)
    swift_bridgeObjectRelease(v0[25]);
  sub_1000167A8();
  return sub_100019418(v4, v5, v6);
}

void sub_10005D850()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  char v18;
  char v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v3 = v1[27];
  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease(v1[27]);
    v0 = _swiftEmptyArrayStorage;
LABEL_15:
    v23 = v1[24];
    v24 = (void *)v1[8];
    v25 = sub_100073828((uint64_t)v0);
    sub_1000100D8((uint64_t)v25, &qword_100129D80, AFPreferences_ptr);
    v26 = sub_10000358C();
    v1[29] = sub_10005EBFC(v26, v27, (uint64_t)v25, v23);
    sub_100016774((uint64_t)objc_msgSend(v24, "bundleIdentifier"));
    sub_100010114();
    v1[30] = v25;
    v28 = (_QWORD *)swift_task_alloc(dword_10012A2F4);
    v1[31] = v28;
    *v28 = v1;
    v28[1] = sub_10005D9F8;
    sub_100073844(v1[18], (uint64_t)v24, (uint64_t)v25);
    return;
  }
  sub_10001F4C0();
  v4 = _CocoaArrayWrapper.endIndex.getter(v0);
  sub_1000059C4();
  if (!v4)
    goto LABEL_14;
LABEL_3:
  v5 = sub_1000073CC();
  sub_1000526A0(v5, v6, v7);
  if ((v4 & 0x8000000000000000) == 0)
  {
    sub_10005EEE8();
    do
    {
      if (v2)
        v16 = (void *)sub_100018778(v8, v1[27]);
      else
        v16 = sub_100018F00(v8, v9, v10, v11, v12, v13, v14, v15, v29, v30);
      static String._unconditionallyBridgeFromObjectiveC(_:)(objc_msgSend(v16, "identifier"));
      sub_10001F32C();
      sub_10001F1D0();
      if (v18)
      {
        v20 = sub_10001660C(v17);
        sub_1000526A0(v20, v21, v22);
        v0 = v31;
      }
      sub_1000188F8();
    }
    while (!v19);
    swift_bridgeObjectRelease(v1[27]);
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t sub_10005D9F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 248);
  *(_QWORD *)(*v2 + 256) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_1000117B4();
    sub_1000100D0();
  }
  else
  {
    sub_1000100D0();
    sub_1000117B4();
    *(_QWORD *)(v4 + 264) = a1;
  }
  sub_1000167A8();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_10005DA88()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001F164();

  v2 = *(_QWORD *)(v1 + 264);
  sub_10001F5B8();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v2);
}

#error "10005DB7C: call analysis failed (funcsize=97)"

#error "10005DD20: call analysis failed (funcsize=99)"

#error "10005DEC8: call analysis failed (funcsize=100)"

#error "10005E05C: call analysis failed (funcsize=95)"

uint64_t sub_10005E1A8(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  sub_10000795C(0, &qword_100129CF0, LNSuggestionsRequest_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v3[4] = v6;
  v7 = dword_100129CFC;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v7);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_10005E248;
  return sub_10005BDF4(v6);
}

uint64_t sub_10005E248()
{
  uint64_t v0;
  _QWORD *v1;
  void (**v2)(_QWORD, _QWORD, _QWORD);
  void *v3;
  Class isa;

  sub_10001DCCC();
  v3 = (void *)v1[2];
  v2 = (void (**)(_QWORD, _QWORD, _QWORD))v1[3];
  sub_100017C10(v1[5]);
  sub_1000117B4();

  sub_10001BE7C(&qword_100129D00);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_1000059A8();
  ((void (**)(_QWORD, Class, _QWORD))v2)[2](v2, isa, 0);

  _Block_release(v2);
  return sub_1000188F0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10005E2E0()
{
  return sub_10005BD9C();
}

uint64_t sub_10005E2F4(void *a1, id a2)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t inited;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  os_log_type_t v56;
  _DWORD *v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v65[2];
  _BYTE v66[112];

  v4 = objc_msgSend(a2, "identifier");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNSystemProtocolIdentifierOpenEntity);
  v6 = sub_10000ECC0();
  if (v5 == v6 && v2 == v7)
  {
    sub_1000117AC(v2);
LABEL_17:

    v22 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
    inited = swift_initStackObject(v22, v66);
    *(_OWORD *)(inited + 16) = xmmword_1000F08A0;
    sub_1000143FC();
    v24[5] = v25;
    v24[6] = v26;
    v24[7] = 0x80000001000F45D0;
    v24[8] = v26 + 5;
    sub_1000143FC();
    *(_QWORD *)(v27 + 72) = v28;
    *(_QWORD *)(v27 + 80) = v29;
    sub_1000143FC();
    *(_QWORD *)(v31 + 88) = v32;
    *(_QWORD *)(v31 + 96) = v30 | 2;
    sub_1000143FC();
    *(_QWORD *)(v33 + 104) = v34;
    *(_QWORD *)(v33 + 32) = v35 | 1;
    v36 = v33 + 32;
    v37 = objc_msgSend(a1, "effectiveBundleIdentifiers");
    v38 = sub_10005B580(v37);

    v39 = 0;
    v40 = v38[2];
    do
    {
      if (v40)
      {
        v41 = (uint64_t *)(v36 + 16 * v39);
        v42 = *v41;
        v43 = v41[1];
        v44 = v38[4];
        v45 = v38[5];
        v46 = v44 == *v41 && v45 == v43;
        if (v46 || (sub_1000137C4(v44, v45, *v41) & 1) != 0)
        {
LABEL_37:
          swift_setDeallocating(inited);
          sub_10006A9A0();
          sub_1000117B4();
          goto LABEL_40;
        }
        if (v40 != 1)
        {
          v47 = v38 + 7;
          v48 = 1;
          while (1)
          {
            v49 = v48 + 1;
            if (__OFADD__(v48, 1))
              break;
            v50 = *(v47 - 1);
            v51 = *v47;
            v52 = v50 == v42 && v51 == v43;
            if (v52 || (sub_1000137C4(v50, v51, v42) & 1) != 0)
              goto LABEL_37;
            v47 += 2;
            ++v48;
            if (v49 == v40)
              goto LABEL_33;
          }
          __break(1u);
          goto LABEL_47;
        }
      }
LABEL_33:
      ++v39;
    }
    while (v39 != 5);
    swift_setDeallocating(inited);
    sub_10006A9A0();
    if (qword_100127D70 == -1)
      goto LABEL_35;
LABEL_47:
    swift_once(&qword_100127D70, sub_10005BBCC);
LABEL_35:
    v53 = type metadata accessor for Logger(0);
    v54 = sub_100012A40(v53, (uint64_t)qword_10012CD08);
    v55 = sub_10000EC68();
    Logger.logObject.getter(v55);
    v56 = sub_1000192BC();
    if (os_log_type_enabled(v54, v56))
    {
      v57 = (_DWORD *)sub_100011780(12);
      v58 = sub_100011780(32);
      v65[0] = v58;
      *v57 = 136315138;
      sub_10000EC68();
      v60 = Array.description.getter(v59);
      v62 = v61;
      sub_1000117B4();
      v64 = sub_10000FBEC(v60, v62, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);
      sub_1000117AC((uint64_t)v38);
      swift_bridgeObjectRelease(v62);
      sub_100019424((void *)&_mh_execute_header, v54, v56, "Skipping 'open' suggestions for app: %s (not yet supported)");
      sub_100013320(v58);
      sub_1000133FC(v58);
      sub_1000133FC((uint64_t)v57);

    }
    else
    {

      sub_1000117AC((uint64_t)v38);
    }
    v21 = 0;
    return v21 & 1;
  }
  v9 = v7;
  v10 = sub_1000137C4(v5, v2, v6);
  sub_1000059A8();
  swift_bridgeObjectRelease(v9);
  if ((v10 & 1) != 0)
    goto LABEL_17;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNSystemProtocolIdentifierCreateEntity);
  v12 = sub_10000ECC0();
  if (v11 == v12 && v2 == v13)
  {
    sub_1000117AC(v2);
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v2, v12, v13, 0);
    sub_1000059A8();
    sub_1000100D0();
    if ((v15 & 1) == 0)
    {
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNSystemProtocolIdentifierSearch);
      v17 = sub_10000ECC0();
      v19 = v18;
      if (v16 == v17 && v2 == v18)
        v21 = 1;
      else
        v21 = sub_1000137C4(v16, v2, v17);

      sub_1000059A8();
      swift_bridgeObjectRelease(v19);
      return v21 & 1;
    }
  }

LABEL_40:
  v21 = 1;
  return v21 & 1;
}

unint64_t sub_10005E720()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100129CD0;
  if (!qword_100129CD0)
  {
    v1 = type metadata accessor for NSFastEnumerationIterator(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSFastEnumerationIterator, v1);
    atomic_store(result, (unint64_t *)&qword_100129CD0);
  }
  return result;
}

uint64_t sub_10005E760()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005E794()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100129CE4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10005EED4;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100129CE0 + dword_100129CE0))(v2, v3, v4);
}

uint64_t sub_10005E800(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_100129D14);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_10005EED4;
  return sub_10005C28C(a1, a2, v7, v6);
}

uint64_t sub_10005E86C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 24) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 32) = v3;
  *v3 = v2;
  v3[1] = sub_10005E8D4;
  return v5(v2 + 16);
}

uint64_t sub_10005E8D4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = (_QWORD *)*v0;
  v5 = v1;
  v2 = (_QWORD *)v1[3];
  v3 = (_QWORD *)*v0;
  sub_10001010C(v1[4], &v5);
  *v2 = v1[2];
  return ((uint64_t (*)(void))v3[1])();
}

uint64_t sub_10005E920()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005E954(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100129D34);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10005E9CC;
  return sub_10005CAD8(a1, v4, v5, v7, v6);
}

uint64_t sub_10005E9CC()
{
  uint64_t (**v0)(void);

  sub_100017C10(*((_QWORD *)*v0 + 2));
  return v0[1]();
}

uint64_t sub_10005EA08()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005EA2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100129D3C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10005E9CC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100129D38 + dword_100129D38))(a1, v4);
}

unint64_t sub_10005EA9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100129D50;
  if (!qword_100129D50)
  {
    v1 = sub_100025A6C((uint64_t *)&unk_100129D20);
    result = swift_getWitnessTable(&protocol conformance descriptor for TaskGroup<A>.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_100129D50);
  }
  return result;
}

uint64_t sub_10005EAE0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_1000361EC(&v6, *a1, a1[1], a1[2]);
  v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t sub_10005EB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  __int128 v13;
  ValueMetadata *v14;
  _UNKNOWN **v15;

  v14 = &type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy;
  v15 = &off_10011C428;
  v10 = (_QWORD *)swift_allocObject(&unk_10011C370, 48, 7);
  *(_QWORD *)&v13 = v10;
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v11 = sub_10001BE7C(&qword_100129D88);
  *(_QWORD *)(a5 + 56) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v11, &protocol witness table for String);
  *(_QWORD *)(a5 + 64) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for String, &protocol witness table for String);
  sub_100019A48(&v13, a5 + 16);
  return a5;
}

uint64_t sub_10005EBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14[5];
  _QWORD v15[5];

  v15[3] = &type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy;
  v15[4] = &off_10011C428;
  v8 = (_QWORD *)swift_allocObject(&unk_10011C370, 48, 7);
  v15[0] = v8;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v9 = type metadata accessor for SuggestedActionsGenerator();
  v10 = swift_allocObject(v9, 72, 7);
  v11 = (_QWORD *)sub_100016184((uint64_t)v15, (uint64_t)&type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy);
  initializeWithCopy for SiriDiscoverabilityClosedAppSuggestionStrategy(v14, v11);
  v12 = sub_10005EB20(v14[0], v14[1], v14[2], v14[3], v10);
  sub_10000E87C(v15);
  return v12;
}

uint64_t sub_10005ECC4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t destroy for SiriDiscoverabilityClosedAppSuggestionStrategy(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

_QWORD *initializeWithCopy for SiriDiscoverabilityClosedAppSuggestionStrategy(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for SiriDiscoverabilityClosedAppSuggestionStrategy(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for SiriDiscoverabilityClosedAppSuggestionStrategy(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriDiscoverabilityClosedAppSuggestionStrategy(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriDiscoverabilityClosedAppSuggestionStrategy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriDiscoverabilityClosedAppSuggestionStrategy()
{
  return &type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy;
}

void sub_10005EF08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100060130(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1000F09C0;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initClassMetadata2(a1, 0, 5, v4, a1 + 96);
  }
}

uint64_t sub_10005EFA4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = v0;
  *(_QWORD *)(v1 + 72) = *v0;
  return sub_100011854((uint64_t)sub_10005EFC0, (uint64_t)v0);
}

uint64_t sub_10005EFC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;

  v1 = v0[8];
  v2 = v0[9];
  v3 = sub_1000100C8((uint64_t)&unk_10011C5F8, 24);
  v4 = *(void **)(v1 + 112);
  swift_unknownObjectWeakInit(v3 + 16, v4);
  v5 = sub_1000100C8((uint64_t)&unk_10011C620, 24);
  swift_weakInit(v5 + 16, v1);
  v6 = (_QWORD *)sub_1000100C8((uint64_t)&unk_10011C648, 48);
  v6[2] = *(_QWORD *)(v2 + 80);
  v6[3] = *(_QWORD *)(v2 + 88);
  v6[4] = v5;
  v6[5] = v3;
  v0[6] = sub_1000603E0;
  v0[7] = v6;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_10005FF28;
  v0[5] = &unk_10011C660;
  v7 = _Block_copy(v0 + 2);
  swift_retain();
  swift_release();
  objc_msgSend(v4, "scheduleWithBlock:", v7);
  _Block_release(v7);
  swift_release();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_10005F0E0(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t MetatypeMetadata;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _BYTE v49[4];
  int v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[3];
  char v61[24];

  v57 = a6;
  v11 = sub_10001BE7C(&qword_10012AD50);
  __chkstk_darwin(v11);
  v13 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = &v49[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a3 += 16;
  swift_beginAccess(a3, v61, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (!Strong)
    return a1(1);
  v19 = Strong;
  v55 = v15;
  v56 = v14;
  v60[0] = a5;
  MetatypeMetadata = swift_getMetatypeMetadata(a5);
  v58 = String.init<A>(describing:)(v60, MetatypeMetadata);
  v22 = v21;
  v60[0] = a5;
  v23 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v25 = String.init<A>(describing:)(v60, v23);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v27 = v24;
    v54 = a4 + 16;
    v28 = String.init(cString:)(LNLogSubsystem);
    Logger.init(subsystem:category:)(v28, v29, v25, v27);
    v30 = swift_bridgeObjectRetain_n(v22, 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      v34 = swift_slowAlloc(22, -1);
      v52 = a1;
      v35 = v34;
      v36 = swift_slowAlloc(64, -1);
      v53 = a2;
      v51 = v36;
      v60[0] = v36;
      *(_DWORD *)v35 = 136315394;
      v50 = v33;
      swift_bridgeObjectRetain();
      v59 = sub_10000FBEC(v58, v22, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60);
      swift_bridgeObjectRelease_n(v22, 3);
      *(_WORD *)(v35 + 12) = 2080;
      v37 = (*(uint64_t (**)(uint64_t))(v57 + 8))(a5);
      v39 = v38;
      v59 = sub_10000FBEC(v37, v38, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v50, "%s started XPC activity \"%s\"", (uint8_t *)v35, 0x16u);
      v40 = v51;
      swift_arrayDestroy(v51, 2);
      a2 = v53;
      swift_slowDealloc(v40, -1, -1);
      v41 = v35;
      a1 = v52;
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v22, 2);
    }
    (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v17, v56);
    v42 = v54;
    swift_beginAccess(v54, v60, 0, 0);
    v43 = (void *)swift_unknownObjectWeakLoadStrong(v42);
    if (v43 && (v44 = v43, v45 = objc_msgSend(v43, "shouldDefer"), v44, v45))
    {
      swift_bridgeObjectRelease(v22);
      a1(2);
    }
    else
    {
      v46 = type metadata accessor for TaskPriority(0);
      sub_100014360((uint64_t)v13, 1, 1, v46);
      v47 = (_QWORD *)swift_allocObject(&unk_10011C6C0, 72, 7);
      v47[2] = 0;
      v47[3] = 0;
      v48 = v58;
      v47[4] = v19;
      v47[5] = v48;
      v47[6] = v22;
      v47[7] = a1;
      v47[8] = a2;
      swift_retain();
      sub_100029394((uint64_t)v13, (uint64_t)&unk_100129E80, (uint64_t)v47);
    }
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005F4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8[27] = a7;
  v8[28] = a8;
  v8[25] = a5;
  v8[26] = a6;
  v8[24] = a4;
  v9 = *a4;
  v8[29] = *a4;
  v10 = type metadata accessor for Logger(0);
  v8[30] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[31] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[32] = swift_task_alloc(v12);
  v8[33] = swift_task_alloc(v12);
  v8[34] = swift_task_alloc(v12);
  v8[35] = swift_task_alloc(v12);
  v13 = *(_QWORD *)(v9 + 80);
  v8[36] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[37] = v14;
  v8[38] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005F580, 0, 0);
}

uint64_t sub_10005F580()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_10000E1AC(v0[38]);
  v1 = *(_QWORD *)(v0[29] + 88);
  v0[39] = v1;
  v2 = *(int **)(v1 + 16);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[40] = v3;
  *v3 = v0;
  v3[1] = sub_10005F8A0;
  return ((uint64_t (*)(_QWORD, uint64_t))v5)(v0[36], v1);
}

uint64_t sub_10005F8A0(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 320);
  *(_QWORD *)(*v2 + 328) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10005FC60;
  }
  else
  {
    *(_BYTE *)(v4 + 336) = a1;
    v6 = sub_10005F914;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10005F914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v2 = *(_QWORD *)(v0 + 288);
  if ((*(_BYTE *)(v0 + 336) & 1) != 0)
  {
    *(_QWORD *)(v0 + 144) = v2;
    v45 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
    sub_10001C034(v45);
    result = LNLogSubsystem;
    if (LNLogSubsystem)
    {
      v46 = String.init(cString:)(LNLogSubsystem);
      sub_10001B594(v46, v47);
      v48 = sub_10001DFF4();
      v49 = (void *)Logger.logObject.getter(v48);
      v50 = static os_log_type_t.default.getter();
      if (sub_100018BF0(v50))
      {
        sub_10001DD64();
        v51 = sub_10001AC3C();
        v117 = sub_100011780(64);
        v52 = sub_10001CD4C(4.8151e-34);
        *(_QWORD *)(v0 + 152) = sub_10001B494(v52, v53, v54, v55, v56, v57, v58, v59);
        sub_1000183F4(v103, v0 + 160);
        v60 = sub_100011800(v1);
        v68 = sub_1000176E0(v60, v61, v62, v63, v64, v65, v66, v67, v98, v103, v108);
        *(_QWORD *)(v0 + 160) = sub_10001C234(v68, v69, v70, v71, v72, v73, v74, v75, v101, v106);
        sub_1000183F4(v0 + 160, v0 + 168);
        sub_1000059A8();
        sub_10001D990((void *)&_mh_execute_header, v76, v77, "%s deferred XPC activity \"%s\"");
        v78 = 2;
        sub_10001E914();
        sub_1000133FC(v117);
        sub_1000133FC(v51);

        sub_100015944(v79, v80, v81, v82, v83, v84, v85, v86, v102, v107, v110, v111, v112, v113);
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v115, v1);
      }
      else
      {
        v93 = *(_QWORD *)(v0 + 296);
        v92 = *(_QWORD *)(v0 + 304);
        v94 = *(_QWORD *)(v0 + 288);
        v95 = *(_QWORD *)(v0 + 248);
        v96 = *(_QWORD *)(v0 + 208);

        v78 = 2;
        sub_1000117AC(v96);
        sub_1000185BC(*(uint64_t (**)(uint64_t, uint64_t))(v95 + 8));
        (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v94);
      }
LABEL_11:
      v97 = *(_QWORD *)(v0 + 256);
      (*(void (**)(uint64_t))(v0 + 216))(v78);
      sub_100005878();
      sub_100010270();
      sub_10001631C();
      sub_10000DD44();
      swift_task_dealloc(v97);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    *(_QWORD *)(v0 + 168) = v2;
    v3 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
    sub_10001C034(v3);
    result = LNLogSubsystem;
    if (LNLogSubsystem)
    {
      v5 = String.init(cString:)(LNLogSubsystem);
      sub_10001B594(v5, v6);
      v7 = sub_10001DFF4();
      v8 = (void *)Logger.logObject.getter(v7);
      v9 = static os_log_type_t.default.getter();
      if (sub_100018BF0(v9))
      {
        sub_10001DD64();
        v10 = sub_10001AC3C();
        v116 = sub_100011780(64);
        v11 = sub_10001CD4C(4.8151e-34);
        *(_QWORD *)(v0 + 176) = sub_10001B494(v11, v12, v13, v14, v15, v16, v17, v18);
        sub_1000183F4(v103, v0 + 184);
        v19 = sub_100011800(v1);
        v27 = sub_1000176E0(v19, v20, v21, v22, v23, v24, v25, v26, v98, v103, v108);
        *(_QWORD *)(v0 + 184) = sub_10001C234(v27, v28, v29, v30, v31, v32, v33, v34, v99, v104);
        sub_1000183F4(v0 + 184, v0 + 192);
        sub_1000059A8();
        sub_10001D990((void *)&_mh_execute_header, v35, v36, "%s finished XPC activity \"%s\"");
        sub_10001E914();
        sub_1000133FC(v116);
        sub_1000133FC(v10);

        sub_100015944(v37, v38, v39, v40, v41, v42, v43, v44, v100, v105, v109, v111, v112, v113);
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v115, v1);
      }
      else
      {
        v88 = *(_QWORD *)(v0 + 296);
        v87 = *(_QWORD *)(v0 + 304);
        v89 = *(_QWORD *)(v0 + 288);
        v90 = *(_QWORD *)(v0 + 248);
        v91 = *(_QWORD *)(v0 + 208);

        sub_1000117AC(v91);
        sub_1000185BC(*(uint64_t (**)(uint64_t, uint64_t))(v90 + 8));
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
      }
      v78 = 1;
      goto LABEL_11;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10005FC60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v0 + 288);
  v1 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  String.init<A>(describing:)(v0 + 96, v1);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v3 = String.init(cString:)(LNLogSubsystem);
    sub_10001B594(v3, v4);
    sub_1000100E0();
    sub_1000165C0();
    sub_1000100E0();
    v5 = sub_1000165C0();
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 328);
    if (v8)
    {
      v10 = *(_QWORD *)(v0 + 312);
      v29 = *(_QWORD *)(v0 + 296);
      v30 = *(_QWORD *)(v0 + 304);
      v31 = *(_QWORD *)(v0 + 288);
      v26 = *(_QWORD *)(v0 + 248);
      v27 = *(_QWORD *)(v0 + 240);
      v28 = *(_QWORD *)(v0 + 256);
      v11 = *(_QWORD *)(v0 + 200);
      v12 = *(_QWORD *)(v0 + 208);
      v13 = sub_100011780(32);
      v25 = sub_100011780(96);
      v32 = v25;
      *(_DWORD *)v13 = 136315650;
      sub_1000100E0();
      *(_QWORD *)(v0 + 104) = sub_10000FBEC(v11, v12, &v32);
      sub_1000183F4(v0 + 104, v0 + 112);
      sub_100011800(v12);
      v14 = 2080;
      *(_WORD *)(v13 + 12) = 2080;
      v15 = (*(uint64_t (**)(void))(v10 + 8))();
      *(_QWORD *)(v0 + 112) = sub_1000137D0(v15, v16);
      sub_1000183F4(v0 + 112, v0 + 120);
      sub_1000059A8();
      *(_WORD *)(v13 + 22) = 2080;
      swift_getErrorValue(v9, v0 + 120, v0 + 16);
      v17 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
      *(_QWORD *)(v0 + 136) = sub_1000137D0(v17, v18);
      sub_1000183F4(v0 + 136, v0 + 144);
      sub_1000059A8();
      sub_100005A04();
      sub_100005A04();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s failed to handle XPC activity \"%s\": %s", (uint8_t *)v13, 0x20u);
      sub_10001A098();
      sub_1000133FC(v25);
      sub_1000133FC(v13);

      sub_100005A04();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
    }
    else
    {
      v20 = *(_QWORD *)(v0 + 296);
      v19 = *(_QWORD *)(v0 + 304);
      v21 = *(_QWORD *)(v0 + 288);
      v23 = *(_QWORD *)(v0 + 248);
      v22 = *(_QWORD *)(v0 + 256);
      v14 = *(_QWORD *)(v0 + 240);
      v24 = *(_QWORD *)(v0 + 208);

      sub_100005A04();
      sub_100005A04();
      sub_1000117AC(v24);
      sub_100005A04();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v14);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    }
    sub_100017CE0();
    sub_100005878();
    sub_100010270();
    sub_10001631C();
    sub_10000DD44();
    swift_task_dealloc(v14);
    return sub_10001AE5C(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005FF28(uint64_t a1, void *aBlock)
{
  void (*v2)(uint64_t (*)(), uint64_t);
  void *v3;
  uint64_t v4;

  v2 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  v3 = _Block_copy(aBlock);
  v4 = swift_allocObject(&unk_10011C698, 24, 7);
  *(_QWORD *)(v4 + 16) = v3;
  swift_retain();
  v2(sub_100060408, v4);
  swift_release();
  return swift_release();
}

uint64_t sub_10005FF98()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_100011854((uint64_t)sub_10005FFAC, v0);
}

uint64_t sub_10005FFAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 16);
  objc_msgSend(*(id *)(v1 + 112), "invalidate");
  v2 = *(_QWORD *)(v1 + qword_100129DA0);
  *(_QWORD *)(v0 + 24) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = async function pointer to Task<>.value.getter[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 32) = v4;
  *v4 = v0;
  v4[1] = sub_10006004C;
  return Task<>.value.getter();
}

uint64_t sub_10006004C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  swift_release();
  return swift_task_switch(sub_1000600AC, v1, 0);
}

uint64_t sub_1000600AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000600B8()
{
  uint64_t v0;

  sub_1000604E8(v0 + qword_100129D98);
  swift_release();
  swift_release();
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10006010C()
{
  uint64_t v0;

  sub_1000600B8();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for XPCActivityEntryPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCActivityEntryPoint);
}

void sub_100060130(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100129E28)
  {
    v2 = sub_100025A6C(&qword_100129B00);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100129E28);
  }
}

uint64_t storeEnumTagSinglePayload for XPCActivityResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000601D4 + 4 * byte_1000F0965[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100060208 + 4 * byte_1000F0960[v4]))();
}

uint64_t sub_100060208(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100060210(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100060218);
  return result;
}

uint64_t sub_100060224(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006022CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100060230(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100060238(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivityResult()
{
  return &type metadata for XPCActivityResult;
}

unint64_t sub_100060258()
{
  unint64_t result;

  result = qword_100129E30;
  if (!qword_100129E30)
  {
    result = swift_getWitnessTable(&unk_1000F0A54, &type metadata for XPCActivityResult);
    atomic_store(result, (unint64_t *)&qword_100129E30);
  }
  return result;
}

void PrimaryKey.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t sub_1000602B8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100129E74);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100060528;
  return sub_10005EFA4();
}

uint64_t sub_100060300()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100129E6C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100060348;
  return sub_10005FF98();
}

uint64_t sub_100060348()
{
  uint64_t v0;

  sub_10001B058();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100060374(uint64_t a1)
{
  char *v1;

  PrimaryKey.hash(into:)(a1, *v1);
}

uint64_t sub_10006037C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectWeakDestroy(v0 + 16);
  v1 = sub_10000C0B4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100060398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = sub_10000C0B4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000603B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000603E0(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t *v2;

  return sub_10005F0E0(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t sub_1000603EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _Block_release(*(const void **)(v0 + 16));
  v1 = sub_10000C0B4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100060408()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_100060418()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100060454(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t *)v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_100129E7C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100060348;
  return sub_10005F4C4(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000604E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001BE7C(&qword_100129E88);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006052C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  __int128 v9;
  void *v10;

  objc_msgSend(v0, "auditToken");
  v10 = 0;
  if (!CPCopyBundleIdentifierAndTeamFromAuditToken(&v9, &v10, 0))
  {
    if (qword_100127E70 != -1)
      swift_once(&qword_100127E70, sub_100090544);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100012A40(v3, (uint64_t)qword_10012D0C8);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "CPCopyBundleIdentifierAndTeamFromAuditToken returned false", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    return 0;
  }
  v1 = v10;
  if (!v10)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

  return v2;
}

unint64_t sub_100060690(uint64_t a1)
{
  Swift::String v1;
  void *object;
  _QWORD v4[2];

  if ((a1 & 0x100000000) != 0)
    return 0xD000000000000019;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v4, "Unknown errno ");
  HIBYTE(v4[1]) = -18;
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  return v4[0];
}

unint64_t sub_100060748()
{
  unsigned int *v0;

  return sub_100060690(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32));
}

unint64_t sub_100060768()
{
  unint64_t result;

  result = qword_100129E90;
  if (!qword_100129E90)
  {
    result = swift_getWitnessTable(&unk_1000F0B24, &type metadata for IssueSandboxExceptionError);
    atomic_store(result, (unint64_t *)&qword_100129E90);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IssueSandboxExceptionError(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for IssueSandboxExceptionError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for IssueSandboxExceptionError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_100060804(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100060820(uint64_t result, int a2)
{
  char v2;

  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  *(_BYTE *)(result + 4) = v2;
  return result;
}

ValueMetadata *type metadata accessor for IssueSandboxExceptionError()
{
  return &type metadata for IssueSandboxExceptionError;
}

_QWORD *sub_100060850(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v5 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a2;
  swift_retain();
  v8 = swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()(v8);
  v9 = swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v9);
  if (v25)
  {
    v23 = _swiftEmptyArrayStorage;
    do
    {
      while (1)
      {
        if (qword_100127CA0 != -1)
          swift_once(&qword_100127CA0, sub_1000411DC);
        Row.get<A>(_:)();
        if (!v3)
          break;
        swift_errorRelease();
        swift_bridgeObjectRelease();
        v10 = swift_bridgeObjectRelease();
        v3 = 0;
        dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v10);
        if (!v25)
          goto LABEL_18;
      }
      v24 = v25;
      v27 = v26;
      if (qword_100127CA8 != -1)
        swift_once(&qword_100127CA8, sub_100041200);
      Row.get<A>(_:)();
      v3 = 0;
      v11 = v25;
      v12 = v26;
      sub_10000795C(0, (unint64_t *)&unk_10012BF00, LNAssistantAppEntityMetadata_ptr);
      v13 = type metadata accessor for URL(0);
      sub_100014360((uint64_t)v7, 1, 1, v13);
      v14 = static LNAssistantAppEntityMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v11, v12, v7, 0);
      sub_1000131E0((uint64_t)v7, &qword_100128740);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = v23;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10002FD40();
        v15 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v17 = v15[2];
      if (v17 >= v15[3] >> 1)
      {
        sub_10002FD40();
        v15 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v15[2] = v17 + 1;
      v23 = v15;
      v18 = &v15[3 * v17];
      v19 = v27;
      v18[4] = v24;
      v18[5] = v19;
      v18[6] = v14;
      dispatch thunk of _AnyIteratorBoxBase.next()(&v25, isUniquelyReferenced_nonNull_native);
    }
    while (v25);
  }
  else
  {
    v23 = _swiftEmptyArrayStorage;
  }
LABEL_18:
  swift_release_n(v22, 2);
  swift_release();
  return v23;
}

_QWORD *sub_100060BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v5 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a2;
  swift_retain();
  v8 = swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()(v8);
  v9 = swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v9);
  if (v25)
  {
    v23 = _swiftEmptyArrayStorage;
    do
    {
      while (1)
      {
        if (qword_100127D90 != -1)
          swift_once(&qword_100127D90, sub_10006B38C);
        Row.get<A>(_:)();
        if (!v3)
          break;
        swift_errorRelease();
        swift_bridgeObjectRelease();
        v10 = swift_bridgeObjectRelease();
        v3 = 0;
        dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v10);
        if (!v25)
          goto LABEL_18;
      }
      v24 = v25;
      v27 = v26;
      if (qword_100127D98 != -1)
        swift_once(&qword_100127D98, sub_10006B3B0);
      Row.get<A>(_:)();
      v3 = 0;
      v11 = v25;
      v12 = v26;
      sub_10000795C(0, (unint64_t *)&unk_10012BF10, LNAssistantIntentMetadata_ptr);
      v13 = type metadata accessor for URL(0);
      sub_100014360((uint64_t)v7, 1, 1, v13);
      v14 = static LNAssistantIntentMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v11, v12, v7, 0);
      sub_1000131E0((uint64_t)v7, &qword_100128740);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = v23;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10002F988();
        v15 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v17 = v15[2];
      if (v17 >= v15[3] >> 1)
      {
        sub_10002F988();
        v15 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v15[2] = v17 + 1;
      v23 = v15;
      v18 = &v15[3 * v17];
      v19 = v27;
      v18[4] = v24;
      v18[5] = v19;
      v18[6] = v14;
      dispatch thunk of _AnyIteratorBoxBase.next()(&v25, isUniquelyReferenced_nonNull_native);
    }
    while (v25);
  }
  else
  {
    v23 = _swiftEmptyArrayStorage;
  }
LABEL_18:
  swift_release_n(v22, 2);
  swift_release();
  return v23;
}

_QWORD *sub_100060F78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v5 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a2;
  swift_retain();
  v8 = swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()(v8);
  v9 = swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v9);
  if (v25)
  {
    v23 = _swiftEmptyArrayStorage;
    do
    {
      while (1)
      {
        if (qword_100127F10 != -1)
          swift_once(&qword_100127F10, sub_1000BFFC0);
        Row.get<A>(_:)();
        if (!v3)
          break;
        swift_errorRelease();
        swift_bridgeObjectRelease();
        v10 = swift_bridgeObjectRelease();
        v3 = 0;
        dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v10);
        if (!v25)
          goto LABEL_18;
      }
      v24 = v25;
      v27 = v26;
      if (qword_100127F18 != -1)
        swift_once(&qword_100127F18, sub_1000BFFE4);
      Row.get<A>(_:)();
      v3 = 0;
      v11 = v25;
      v12 = v26;
      sub_10000795C(0, (unint64_t *)&unk_10012A000, LNAssistantIntentNegativePhrases_ptr);
      v13 = type metadata accessor for URL(0);
      sub_100014360((uint64_t)v7, 1, 1, v13);
      v14 = static LNAssistantIntentNegativePhrases.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v11, v12, v7, 0);
      sub_1000131E0((uint64_t)v7, &qword_100128740);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = v23;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10002FEF0();
        v15 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v17 = v15[2];
      if (v17 >= v15[3] >> 1)
      {
        sub_10002FEF0();
        v15 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v15[2] = v17 + 1;
      v23 = v15;
      v18 = &v15[3 * v17];
      v19 = v27;
      v18[4] = v24;
      v18[5] = v19;
      v18[6] = v14;
      dispatch thunk of _AnyIteratorBoxBase.next()(&v25, isUniquelyReferenced_nonNull_native);
    }
    while (v25);
  }
  else
  {
    v23 = _swiftEmptyArrayStorage;
  }
LABEL_18:
  swift_release_n(v22, 2);
  swift_release();
  return v23;
}

_QWORD *sub_10006130C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v3 = _swiftEmptyArrayStorage;
  v16 = (unint64_t)_swiftEmptyArrayStorage;
  swift_retain();
  v4 = swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()(v4);
  v5 = swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()(&v14, v5);
  v6 = v14;
  if (v14)
  {
    v7 = v15;
    do
    {
      v8 = sub_10008FC8C(v6, v7);
      swift_bridgeObjectRelease();
      v9 = swift_bridgeObjectRelease();
      if (v8)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
        v11 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v10 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v11 >= v10 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v8);
        v9 = specialized Array._endMutation()(v12);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()(&v14, v9);
      v6 = v14;
      v7 = v15;
    }
    while (v14);
    v3 = (_QWORD *)v16;
  }
  swift_release_n(a2, 2);
  swift_release();
  return v3;
}

void sub_10006143C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;

  sub_10001F8F0();
  sub_10006B23C();
  sub_10006B2F4();
  v13 = sub_10000DD4C(v6, "actionForBundleIdentifier:andActionIdentifier:error:", v7, v8, v9, v10, v11, v12, v16);

  if (v13)
  {
    v14 = v17;
  }
  else
  {
    v15 = v17;
    _convertNSErrorToError(_:)(v17);

    sub_1000186A8();
  }
  sub_10001E000();
}

void sub_1000614FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[40];

  sub_10000C0C4(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  sub_1000C65EC(a1, a2, (uint64_t)v10);
  if (v2)
  {
    swift_release();
    v5 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v5, v6);
    sub_100017704();
    sub_10001B2EC();
    sub_100013E4C();
    sub_100005A04();
  }
  else
  {
    v7 = swift_release();
    sub_10006B2DC(v7, v8, (uint64_t *)&unk_10012A010, v9);
  }
}

void sub_1000615C4(uint64_t a1, _QWORD *a2)
{
  sub_1000652F8(a1, a2, (void (*)(uint64_t))sub_100055420);
}

void sub_1000615E0()
{
  sub_10001F018(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  sub_1000166F0();
  sub_1000365DC();
  swift_release();
  sub_10001B110();
}

uint64_t sub_100061640()
{
  sub_10006B24C();
  sub_10001F018(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  sub_100037610();
  return swift_release();
}

uint64_t sub_1000616AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v5 = v4;
  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v9 = 4;
    while (1)
    {
      v10 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a1)
          : *(id *)(a1 + 8 * v9);
      v11 = v10;
      v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      swift_bridgeObjectRetain();
      v13 = v11;
      sub_1000BF300(a3, a4);
      if (v5)
      {
        swift_release();
        swift_bridgeObjectRelease();

        goto LABEL_12;
      }

      swift_bridgeObjectRelease();
      ++v9;
      if (v12 == v8)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_release();
LABEL_12:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1000617FC(void (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_13;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    v8 = 4;
    while (1)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3)
         : *(id *)(a3 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v13 = v9;
      a1(&v13);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return;
      }

      ++v8;
      if (v11 == v7)
        goto LABEL_10;
    }
    __break(1u);
LABEL_13:
    if (a3 < 0)
      v12 = a3;
    else
      v12 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_10:
  swift_bridgeObjectRelease(a3);
}

void sub_100061904(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  _BYTE v28[112];
  Swift::String v29;
  _QWORD v30[10];
  _BYTE __src[168];
  _QWORD __dst[21];
  _QWORD v33[22];
  uint64_t v34;
  SQLite::Insert v35;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_23;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v26 = v5 & 0xC000000000000001;
    v7 = 4;
    v24 = v6;
    for (i = v5; ; v5 = i)
    {
      v8 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      swift_bridgeObjectRetain();
      v11 = v9;
      v12 = LNAutoShortcutMetadata.asJson()();
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (qword_100127C50 != -1)
        swift_once(&qword_100127C50, sub_1000363C4);
      memcpy(__dst, &unk_10012C9D0, sizeof(__dst));
      memcpy(__src, &unk_10012C9D0, sizeof(__src));
      sub_1000379AC(__dst);
      if (qword_100127C58 != -1)
        swift_once(&qword_100127C58, sub_10003641C);
      v34 = v7;
      v29._countAndFlagsBits = a3;
      v29._object = a4;
      v14 = a4;
      <- infix<A>(_:_:)(qword_10012CA78, unk_10012CA80, qword_10012CA88, (uint64_t)&v29, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
      v15 = sub_10001BE7C(&qword_100128D08);
      inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
      if (qword_100127C60 != -1)
        swift_once(&qword_100127C60, sub_100036440);
      v29 = v12;
      <- infix<A>(_:_:)(qword_10012CA90, *(uint64_t *)algn_10012CA98, qword_10012CAA0, (uint64_t)&v29, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      v17 = QueryType.insert(_:_:)((uint64_t)v30);
      v19 = v18;
      v21 = v20;
      swift_setDeallocating(inited);
      sub_10001CC3C();
      sub_100019F20(v30);
      memcpy(v33, __src, 0xA8uLL);
      sub_100037A7C(v33);
      v35.template._countAndFlagsBits = v17;
      v35.template._object = v19;
      v35.bindings._rawValue = v21;
      Connection.run(_:)(v35);
      if (v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      a4 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v24)
        goto LABEL_27;
      v7 = v34 + 1;
    }
    __break(1u);
LABEL_23:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
LABEL_27:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100061C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;
  _BYTE __dst[104];

  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v10 << 6);
LABEL_19:
    memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 48) + 104 * v12), sizeof(__dst));
    sub_10000F49C(__dst);
    sub_10000EEDC((__int128 *)__dst, a2);
    sub_10000F418(__dst);
    if (v2)
    {
LABEL_25:
      swift_release();
      swift_release();
      return;
    }
  }
  if (__OFADD__(v10++, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v10 >= v9)
    goto LABEL_25;
  v14 = *(_QWORD *)(v5 + 8 * v10);
  if (v14)
  {
LABEL_18:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_19;
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v9)
    goto LABEL_25;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v10 + 2;
  if (v10 + 2 >= v9)
    goto LABEL_25;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v10 + 3;
  if (v10 + 3 >= v9)
    goto LABEL_25;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v10 + 4;
  if (v10 + 4 >= v9)
    goto LABEL_25;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v10 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v9)
      goto LABEL_25;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_27:
  __break(1u);
}

void sub_100061E20(uint64_t a1, void (*a2)(id, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  int64_t v21;

  sub_10004B988(a1, v20);
  v5 = v20[0];
  v19 = v20[1];
  v6 = v20[3];
  v7 = v20[4];
  v21 = (unint64_t)(v20[2] + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v7)
    goto LABEL_3;
LABEL_2:
  v8 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v9 = v8 | (v6 << 6);
  while (1)
  {
    v13 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v9);
    v14 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v9);
    v16 = *v14;
    v15 = v14[1];
    v17 = v13;
    swift_bridgeObjectRetain(v15);
    a2(v17, v16, v15);
    if (v2)
    {
      swift_release(v5);
      swift_bridgeObjectRelease(v15);

      return;
    }
    swift_bridgeObjectRelease(v15);

    if (v7)
      goto LABEL_2;
LABEL_3:
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v10 >= v21)
      goto LABEL_24;
    v11 = *(_QWORD *)(v19 + 8 * v10);
    if (!v11)
    {
      v12 = v6 + 2;
      if (v6 + 2 >= v21)
        goto LABEL_24;
      v11 = *(_QWORD *)(v19 + 8 * v12);
      if (v11)
        goto LABEL_12;
      v12 = v6 + 3;
      if (v6 + 3 >= v21)
        goto LABEL_24;
      v11 = *(_QWORD *)(v19 + 8 * v12);
      if (v11)
        goto LABEL_12;
      v12 = v6 + 4;
      if (v6 + 4 >= v21)
        goto LABEL_24;
      v11 = *(_QWORD *)(v19 + 8 * v12);
      if (v11)
      {
LABEL_12:
        v10 = v12;
      }
      else
      {
        v10 = v6 + 5;
        if (v6 + 5 >= v21)
          goto LABEL_24;
        v11 = *(_QWORD *)(v19 + 8 * v10);
        if (!v11)
        {
          v18 = v6 + 6;
          while (v18 < v21)
          {
            v11 = *(_QWORD *)(v19 + 8 * v18++);
            if (v11)
            {
              v10 = v18 - 1;
              goto LABEL_13;
            }
          }
LABEL_24:
          swift_release(v5);
          return;
        }
      }
    }
LABEL_13:
    v7 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v10 << 6);
    v6 = v10;
  }
  __break(1u);
}

void sub_100062004(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  _BYTE v28[112];
  Swift::String v29;
  _QWORD v30[10];
  _BYTE __src[168];
  _QWORD __dst[21];
  _QWORD v33[22];
  uint64_t v34;
  SQLite::Insert v35;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_23;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v26 = v5 & 0xC000000000000001;
    v7 = 4;
    v24 = v6;
    for (i = v5; ; v5 = i)
    {
      v8 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      swift_bridgeObjectRetain();
      v11 = v9;
      v12 = LNEntityMetadata.asJson(prettyPrinted:)(0);
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (qword_100127FC8 != -1)
        swift_once(&qword_100127FC8, sub_1000CA300);
      memcpy(__dst, &unk_10012BB50, sizeof(__dst));
      memcpy(__src, &unk_10012BB50, sizeof(__src));
      sub_1000379AC(__dst);
      if (qword_100127FD0 != -1)
        swift_once(&qword_100127FD0, sub_1000CA350);
      v34 = v7;
      v29._countAndFlagsBits = a3;
      v29._object = a4;
      v14 = a4;
      <- infix<A>(_:_:)(qword_10012BBF8, unk_10012BC00, qword_10012BC08, (uint64_t)&v29, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
      v15 = sub_10001BE7C(&qword_100128D08);
      inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
      if (qword_100127FE0 != -1)
        swift_once(&qword_100127FE0, sub_1000CA394);
      v29 = v12;
      <- infix<A>(_:_:)(qword_10012BC28, unk_10012BC30, qword_10012BC38, (uint64_t)&v29, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      v17 = QueryType.insert(_:_:)((uint64_t)v30);
      v19 = v18;
      v21 = v20;
      swift_setDeallocating(inited);
      sub_10001CC3C();
      sub_100019F20(v30);
      memcpy(v33, __src, 0xA8uLL);
      sub_100037A7C(v33);
      v35.template._countAndFlagsBits = v17;
      v35.template._object = v19;
      v35.bindings._rawValue = v21;
      Connection.run(_:)(v35);
      if (v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      a4 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v24)
        goto LABEL_27;
      v7 = v34 + 1;
    }
    __break(1u);
LABEL_23:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
LABEL_27:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_10006238C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  v6 = v5;
  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; v10 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    v11 = 4;
    while (1)
    {
      v12 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a1)
          : *(id *)(a1 + 8 * v11);
      v13 = v12;
      v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      swift_retain();
      swift_bridgeObjectRetain();
      v15 = v13;
      sub_100067DA4(a2, a3, a4, a5, v15);
      if (v6)
      {
        swift_bridgeObjectRelease();
        swift_release();

        swift_bridgeObjectRelease();
        return;
      }

      ++v11;
      if (v14 == v10)
        goto LABEL_10;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
LABEL_10:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

void sub_1000624F4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  _BYTE v28[112];
  Swift::String v29;
  _QWORD v30[10];
  _BYTE __src[168];
  _QWORD __dst[21];
  _QWORD v33[22];
  uint64_t v34;
  SQLite::Insert v35;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_23;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v26 = v5 & 0xC000000000000001;
    v7 = 4;
    v24 = v6;
    for (i = v5; ; v5 = i)
    {
      v8 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      swift_bridgeObjectRetain();
      v11 = v9;
      v12 = LNQueryMetadata.asJson(prettyPrinted:)(0);
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (qword_100128000 != -1)
        swift_once(&qword_100128000, sub_1000CB0A4);
      memcpy(__dst, &unk_10012BD18, sizeof(__dst));
      memcpy(__src, &unk_10012BD18, sizeof(__src));
      sub_1000379AC(__dst);
      if (qword_100128008 != -1)
        swift_once(&qword_100128008, sub_1000CB0F4);
      v34 = v7;
      v29._countAndFlagsBits = a3;
      v29._object = a4;
      v14 = a4;
      <- infix<A>(_:_:)(qword_10012BDC0, *(uint64_t *)algn_10012BDC8, qword_10012BDD0, (uint64_t)&v29, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
      v15 = sub_10001BE7C(&qword_100128D08);
      inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
      if (qword_100128010 != -1)
        swift_once(&qword_100128010, sub_1000CB118);
      v29 = v12;
      <- infix<A>(_:_:)(qword_10012BDD8, unk_10012BDE0, qword_10012BDE8, (uint64_t)&v29, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      v17 = QueryType.insert(_:_:)((uint64_t)v30);
      v19 = v18;
      v21 = v20;
      swift_setDeallocating(inited);
      sub_10001CC3C();
      sub_100019F20(v30);
      memcpy(v33, __src, 0xA8uLL);
      sub_100037A7C(v33);
      v35.template._countAndFlagsBits = v17;
      v35.template._object = v19;
      v35.bindings._rawValue = v21;
      Connection.run(_:)(v35);
      if (v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      a4 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v24)
        goto LABEL_27;
      v7 = v34 + 1;
    }
    __break(1u);
LABEL_23:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
LABEL_27:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_10006287C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  _BYTE v28[112];
  Swift::String v29;
  _QWORD v30[10];
  _BYTE __src[168];
  _QWORD __dst[21];
  _QWORD v33[22];
  uint64_t v34;
  SQLite::Insert v35;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_23;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v26 = v5 & 0xC000000000000001;
    v7 = 4;
    v24 = v6;
    for (i = v5; ; v5 = i)
    {
      v8 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      swift_bridgeObjectRetain();
      v11 = v9;
      v12 = LNAssistantIntentMetadata.asJson()();
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (qword_100127D88 != -1)
        swift_once(&qword_100127D88, sub_10006B330);
      memcpy(__dst, &unk_10012CD60, sizeof(__dst));
      memcpy(__src, &unk_10012CD60, sizeof(__src));
      sub_1000379AC(__dst);
      if (qword_100127D90 != -1)
        swift_once(&qword_100127D90, sub_10006B38C);
      v34 = v7;
      v29._countAndFlagsBits = a3;
      v29._object = a4;
      v14 = a4;
      <- infix<A>(_:_:)(qword_10012CE08, unk_10012CE10, qword_10012CE18, (uint64_t)&v29, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
      v15 = sub_10001BE7C(&qword_100128D08);
      inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
      if (qword_100127D98 != -1)
        swift_once(&qword_100127D98, sub_10006B3B0);
      v29 = v12;
      <- infix<A>(_:_:)(qword_10012CE20, *(uint64_t *)algn_10012CE28, qword_10012CE30, (uint64_t)&v29, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      v17 = QueryType.insert(_:_:)((uint64_t)v30);
      v19 = v18;
      v21 = v20;
      swift_setDeallocating(inited);
      sub_10001CC3C();
      sub_100019F20(v30);
      memcpy(v33, __src, 0xA8uLL);
      sub_100037A7C(v33);
      v35.template._countAndFlagsBits = v17;
      v35.template._object = v19;
      v35.bindings._rawValue = v21;
      Connection.run(_:)(v35);
      if (v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      a4 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v24)
        goto LABEL_27;
      v7 = v34 + 1;
    }
    __break(1u);
LABEL_23:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
LABEL_27:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100062C00(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  _BYTE v28[112];
  Swift::String v29;
  _QWORD v30[10];
  _BYTE __src[168];
  _QWORD __dst[21];
  _QWORD v33[22];
  uint64_t v34;
  SQLite::Insert v35;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_23;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v26 = v5 & 0xC000000000000001;
    v7 = 4;
    v24 = v6;
    for (i = v5; ; v5 = i)
    {
      v8 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      swift_bridgeObjectRetain();
      v11 = v9;
      v12 = LNAssistantIntentNegativePhrases.asJson()();
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (qword_100127F08 != -1)
        swift_once(&qword_100127F08, sub_1000BFF6C);
      memcpy(__dst, &unk_10012D2E8, sizeof(__dst));
      memcpy(__src, &unk_10012D2E8, sizeof(__src));
      sub_1000379AC(__dst);
      if (qword_100127F10 != -1)
        swift_once(&qword_100127F10, sub_1000BFFC0);
      v34 = v7;
      v29._countAndFlagsBits = a3;
      v29._object = a4;
      v14 = a4;
      <- infix<A>(_:_:)(qword_10012D390, *(uint64_t *)algn_10012D398, qword_10012D3A0, (uint64_t)&v29, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
      v15 = sub_10001BE7C(&qword_100128D08);
      inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
      if (qword_100127F18 != -1)
        swift_once(&qword_100127F18, sub_1000BFFE4);
      v29 = v12;
      <- infix<A>(_:_:)(qword_10012D3A8, unk_10012D3B0, qword_10012D3B8, (uint64_t)&v29, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      v17 = QueryType.insert(_:_:)((uint64_t)v30);
      v19 = v18;
      v21 = v20;
      swift_setDeallocating(inited);
      sub_10001CC3C();
      sub_100019F20(v30);
      memcpy(v33, __src, 0xA8uLL);
      sub_100037A7C(v33);
      v35.template._countAndFlagsBits = v17;
      v35.template._object = v19;
      v35.bindings._rawValue = v21;
      Connection.run(_:)(v35);
      if (v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      a4 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v24)
        goto LABEL_27;
      v7 = v34 + 1;
    }
    __break(1u);
LABEL_23:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
LABEL_27:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100062F84(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  _BYTE v28[112];
  Swift::String v29;
  _QWORD v30[10];
  _BYTE __src[168];
  _QWORD __dst[21];
  _QWORD v33[22];
  uint64_t v34;
  SQLite::Insert v35;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_23;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v26 = v5 & 0xC000000000000001;
    v7 = 4;
    v24 = v6;
    for (i = v5; ; v5 = i)
    {
      v8 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      swift_bridgeObjectRetain();
      v11 = v9;
      v12 = LNAssistantAppEntityMetadata.asJson()();
      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      if (qword_100127C98 != -1)
        swift_once(&qword_100127C98, sub_100041188);
      memcpy(__dst, &unk_10012CAD8, sizeof(__dst));
      memcpy(__src, &unk_10012CAD8, sizeof(__src));
      sub_1000379AC(__dst);
      if (qword_100127CA0 != -1)
        swift_once(&qword_100127CA0, sub_1000411DC);
      v34 = v7;
      v29._countAndFlagsBits = a3;
      v29._object = a4;
      v14 = a4;
      <- infix<A>(_:_:)(qword_10012CB80, *(uint64_t *)algn_10012CB88, qword_10012CB90, (uint64_t)&v29, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
      v15 = sub_10001BE7C(&qword_100128D08);
      inited = swift_initStackObject(v15, v28);
      *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
      if (qword_100127CA8 != -1)
        swift_once(&qword_100127CA8, sub_100041200);
      v29 = v12;
      <- infix<A>(_:_:)(qword_10012CB98, unk_10012CBA0, qword_10012CBA8, (uint64_t)&v29, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease();
      v17 = QueryType.insert(_:_:)((uint64_t)v30);
      v19 = v18;
      v21 = v20;
      swift_setDeallocating(inited);
      sub_10001CC3C();
      sub_100019F20(v30);
      memcpy(v33, __src, 0xA8uLL);
      sub_100037A7C(v33);
      v35.template._countAndFlagsBits = v17;
      v35.template._object = v19;
      v35.bindings._rawValue = v21;
      Connection.run(_:)(v35);
      if (v22)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }

      a4 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10 == v24)
        goto LABEL_27;
      v7 = v34 + 1;
    }
    __break(1u);
LABEL_23:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
LABEL_27:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100063308(uint64_t a1, uint64_t a2)
{
  sub_100063364(a1, a2, (SEL *)&selRef_entitiesForBundleIdentifier_error_, (unint64_t *)&qword_100129F50, LNEntityMetadata_ptr);
  sub_100017714();
}

uint64_t sub_100063364(uint64_t a1, uint64_t a2, SEL *a3, unint64_t *a4, _QWORD *a5)
{
  void *v5;
  NSString v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v15;

  v9 = sub_10001F8F0();
  v15 = 0;
  v10 = objc_msgSend(v5, *a3, v9, &v15);

  v11 = v15;
  if (v10)
  {
    sub_10000795C(0, a4, a5);
    sub_10000FE68();
    v12 = v11;

  }
  else
  {
    v13 = v15;
    sub_10006B2E8();
    sub_10001A0A4();
    sub_1000186A8();
  }
  return sub_10001F88C();
}

void sub_10006344C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  ValueMetadata *v114;
  _UNKNOWN **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[168];
  _QWORD v133[21];

  sub_10000C038();
  sub_1000073E4();
  v2 = qword_100127D88;
  sub_1000166E8();
  if (v2 != -1)
    swift_once(&qword_100127D88, sub_10006B330);
  sub_1000189C4(v133, &unk_10012CD60);
  if (v0)
  {
    sub_1000379AC(v133);
    if (qword_100127D90 != -1)
      swift_once(&qword_100127D90, sub_10006B38C);
    sub_1000167B4((uint64_t)&qword_10012CE08);
    sub_10001EE48();
    sub_10001E21C(v3, v4, v5, v6, v7, v8, v9, v10, v47);
    sub_10000C020();
    v11 = sub_1000100E0();
    sub_100017E90(v11, v12, v13, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v14, v15, v16, v48, v51, v54, v57, v60, v63, v66, v69, v72, v75, v78,
      v81,
      v84,
      v87,
      v90,
      v93,
      v96,
      v99,
      v102,
      v105,
      v108,
      v111);
    sub_1000117AC(v1);
    sub_1000117AC(v0);
    v17 = sub_10001EDE4();
    v25 = sub_10006B27C((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24, v49, v52, v55, v58, v61, v64, v67, v70, v73, v76, v79,
            v82,
            v85,
            v88,
            v91,
            v94,
            v97,
            v100,
            v103,
            v106,
            v109,
            v111,
            v112,
            v113,
            (uint64_t)v114,
            (uint64_t)v115,
            v116,
            v117,
            v118,
            v119,
            v120,
            v121,
            v122,
            v123,
            v124,
            v125,
            v126,
            v127,
            v128,
            v129,
            v130,
            v131,
            v132[0]);
  }
  else
  {
    v27 = sub_1000379AC(v133);
    v25 = sub_10001BF24((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, v47, v51, v54, v57, v60, v63, v66, v69, v72, v75, v78,
            v81,
            v84,
            v87,
            v90,
            v93,
            v96,
            v99,
            v102,
            v105,
            v108,
            v111,
            v112,
            v113,
            (uint64_t)v114,
            (uint64_t)v115,
            v116,
            v117,
            v118,
            v119,
            v120,
            v121,
            v122,
            v123,
            v124,
            v125,
            v126,
            v127,
            v128,
            v129,
            v130,
            v131,
            v132[0]);
  }
  sub_1000189C4(v25, v26);
  v114 = &type metadata for Table;
  v115 = &protocol witness table for Table;
  v111 = sub_1000058D0((uint64_t)&unk_10011C820);
  v35 = sub_1000189C4((void *)(v111 + 16), v132);
  sub_10001DD78((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42, v50, v53, v56, v59, v62, v65, v68, v71, v74, v77, v80,
    v83,
    v86,
    v89,
    v92,
    v95,
    v98,
    v101,
    v104,
    v107,
    v110,
    v111);
  if (v2)
  {
    sub_10001F4D4(&v111);
    v43 = (_QWORD *)sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0((uint64_t)v43, v44);
    sub_10001F764();
    sub_100013594(v43);
    sub_1000137DC();
    sub_100010120();
  }
  else
  {
    sub_10000E87C(&v111);
    sub_1000163DC();
    v45 = sub_100018918();
    sub_100060BE4(v45, v46);
    sub_100018C00();
    sub_10001105C();
  }
  sub_100014408();
  sub_1000117E8();
}

void sub_100063610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  ValueMetadata *v114;
  _UNKNOWN **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[168];
  _QWORD v133[21];

  sub_10000C038();
  sub_1000073E4();
  v2 = qword_100127F08;
  sub_1000166E8();
  if (v2 != -1)
    swift_once(&qword_100127F08, sub_1000BFF6C);
  sub_1000189C4(v133, &unk_10012D2E8);
  if (v0)
  {
    sub_1000379AC(v133);
    if (qword_100127F10 != -1)
      swift_once(&qword_100127F10, sub_1000BFFC0);
    sub_1000167B4((uint64_t)&qword_10012D390);
    sub_10001EE48();
    sub_10001E21C(v3, v4, v5, v6, v7, v8, v9, v10, v47);
    sub_10000C020();
    v11 = sub_1000100E0();
    sub_100017E90(v11, v12, v13, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v14, v15, v16, v48, v51, v54, v57, v60, v63, v66, v69, v72, v75, v78,
      v81,
      v84,
      v87,
      v90,
      v93,
      v96,
      v99,
      v102,
      v105,
      v108,
      v111);
    sub_1000117AC(v1);
    sub_1000117AC(v0);
    v17 = sub_10001EDE4();
    v25 = sub_10006B27C((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24, v49, v52, v55, v58, v61, v64, v67, v70, v73, v76, v79,
            v82,
            v85,
            v88,
            v91,
            v94,
            v97,
            v100,
            v103,
            v106,
            v109,
            v111,
            v112,
            v113,
            (uint64_t)v114,
            (uint64_t)v115,
            v116,
            v117,
            v118,
            v119,
            v120,
            v121,
            v122,
            v123,
            v124,
            v125,
            v126,
            v127,
            v128,
            v129,
            v130,
            v131,
            v132[0]);
  }
  else
  {
    v27 = sub_1000379AC(v133);
    v25 = sub_10001BF24((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, v47, v51, v54, v57, v60, v63, v66, v69, v72, v75, v78,
            v81,
            v84,
            v87,
            v90,
            v93,
            v96,
            v99,
            v102,
            v105,
            v108,
            v111,
            v112,
            v113,
            (uint64_t)v114,
            (uint64_t)v115,
            v116,
            v117,
            v118,
            v119,
            v120,
            v121,
            v122,
            v123,
            v124,
            v125,
            v126,
            v127,
            v128,
            v129,
            v130,
            v131,
            v132[0]);
  }
  sub_1000189C4(v25, v26);
  v114 = &type metadata for Table;
  v115 = &protocol witness table for Table;
  v111 = sub_1000058D0((uint64_t)&unk_10011C820);
  v35 = sub_1000189C4((void *)(v111 + 16), v132);
  sub_10001DD78((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42, v50, v53, v56, v59, v62, v65, v68, v71, v74, v77, v80,
    v83,
    v86,
    v89,
    v92,
    v95,
    v98,
    v101,
    v104,
    v107,
    v110,
    v111);
  if (v2)
  {
    sub_10001F4D4(&v111);
    v43 = (_QWORD *)sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0((uint64_t)v43, v44);
    sub_10001F764();
    sub_100013594(v43);
    sub_1000137DC();
    sub_100010120();
  }
  else
  {
    sub_10000E87C(&v111);
    sub_1000163DC();
    v45 = sub_100018918();
    sub_100060F78(v45, v46);
    sub_100018C00();
    sub_10001105C();
  }
  sub_100014408();
  sub_1000117E8();
}

void sub_1000637D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  ValueMetadata *v114;
  _UNKNOWN **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[168];
  _QWORD v133[21];

  sub_10000C038();
  sub_1000073E4();
  v2 = qword_100127C98;
  sub_1000166E8();
  if (v2 != -1)
    swift_once(&qword_100127C98, sub_100041188);
  sub_1000189C4(v133, &unk_10012CAD8);
  if (v0)
  {
    sub_1000379AC(v133);
    if (qword_100127CA0 != -1)
      swift_once(&qword_100127CA0, sub_1000411DC);
    sub_1000167B4((uint64_t)&qword_10012CB80);
    sub_10001EE48();
    sub_10001E21C(v3, v4, v5, v6, v7, v8, v9, v10, v47);
    sub_10000C020();
    v11 = sub_1000100E0();
    sub_100017E90(v11, v12, v13, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v14, v15, v16, v48, v51, v54, v57, v60, v63, v66, v69, v72, v75, v78,
      v81,
      v84,
      v87,
      v90,
      v93,
      v96,
      v99,
      v102,
      v105,
      v108,
      v111);
    sub_1000117AC(v1);
    sub_1000117AC(v0);
    v17 = sub_10001EDE4();
    v25 = sub_10006B27C((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24, v49, v52, v55, v58, v61, v64, v67, v70, v73, v76, v79,
            v82,
            v85,
            v88,
            v91,
            v94,
            v97,
            v100,
            v103,
            v106,
            v109,
            v111,
            v112,
            v113,
            (uint64_t)v114,
            (uint64_t)v115,
            v116,
            v117,
            v118,
            v119,
            v120,
            v121,
            v122,
            v123,
            v124,
            v125,
            v126,
            v127,
            v128,
            v129,
            v130,
            v131,
            v132[0]);
  }
  else
  {
    v27 = sub_1000379AC(v133);
    v25 = sub_10001BF24((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, v47, v51, v54, v57, v60, v63, v66, v69, v72, v75, v78,
            v81,
            v84,
            v87,
            v90,
            v93,
            v96,
            v99,
            v102,
            v105,
            v108,
            v111,
            v112,
            v113,
            (uint64_t)v114,
            (uint64_t)v115,
            v116,
            v117,
            v118,
            v119,
            v120,
            v121,
            v122,
            v123,
            v124,
            v125,
            v126,
            v127,
            v128,
            v129,
            v130,
            v131,
            v132[0]);
  }
  sub_1000189C4(v25, v26);
  v114 = &type metadata for Table;
  v115 = &protocol witness table for Table;
  v111 = sub_1000058D0((uint64_t)&unk_10011C820);
  v35 = sub_1000189C4((void *)(v111 + 16), v132);
  sub_10001DD78((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42, v50, v53, v56, v59, v62, v65, v68, v71, v74, v77, v80,
    v83,
    v86,
    v89,
    v92,
    v95,
    v98,
    v101,
    v104,
    v107,
    v110,
    v111);
  if (v2)
  {
    sub_10001F4D4(&v111);
    v43 = (_QWORD *)sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0((uint64_t)v43, v44);
    sub_10001F764();
    sub_100013594(v43);
    sub_1000137DC();
    sub_100010120();
  }
  else
  {
    sub_10000E87C(&v111);
    sub_1000163DC();
    v45 = sub_100018918();
    sub_100060850(v45, v46);
    sub_100018C00();
    sub_10001105C();
  }
  sub_100014408();
  sub_1000117E8();
}

void sub_100063998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_10006B24C();
  sub_10000C0C4(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  sub_1000BF118(v7, v6, (uint64_t)v5, a4);
  sub_10001F40C();
  swift_release();
  if (v4)
  {
    v9 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v9, v10);
    sub_10001F6B8();
    sub_100013594(v5);
    sub_1000137DC();
    sub_100010120();
  }
  sub_10001ED7C();
  sub_10006B204();
}

uint64_t sub_100063A40()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v14;
  uint64_t v15;

  sub_10000C038();
  v2 = v0;
  v3 = v1;
  v5 = v4;
  v15 = v6;
  if (v1 >> 62)
    goto LABEL_14;
  v7 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_10000BFF4();
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    for (i = 4; ; ++i)
    {
      v9 = (v3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v3)
         : *(id *)(v3 + 8 * i);
      v10 = v9;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      swift_retain();
      sub_1000058B4();
      v12 = v10;
      sub_1000BF300(v15, v5);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_release();

        return sub_100007398();
      }
      swift_release();

      sub_100007398();
      if (v11 == v7)
        return sub_100007398();
    }
    __break(1u);
LABEL_14:
    if (v3 < 0)
      v14 = v3;
    else
      v14 = v3 & 0xFFFFFFFFFFFFFF8;
    sub_10000BFF4();
  }
  return sub_100007398();
}

void sub_100063B7C(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4)
{
  uint64_t v4;
  void *v7;
  void *v8;
  NSSet v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;

  v7 = *(void **)(v4 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  v8 = (void *)sub_1000100D8(a1, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
  sub_10004FE50();
  v9.super.isa = Set._bridgeToObjectiveC()().super.isa;
  if (a4)
    a4 = sub_1000121D4();
  v13 = 0;
  v10 = objc_msgSend(v7, "actionsConformingToSystemProtocols:logicalType:bundleIdentifier:error:", v9.super.isa, a2, a4, &v13);
  sub_10006B22C();

  if (v8)
  {
    v11 = sub_10001BE7C((uint64_t *)&unk_10012A700);
    sub_10006B234(v11, (uint64_t)&type metadata for String, v11, (uint64_t)&protocol witness table for String);
    sub_10001F084();

  }
  else
  {
    v12 = v13;
    sub_10001B4A4();
    sub_10001A0A4();
    sub_1000186A8();
  }
  sub_100016324();
  sub_100018780();
}

unint64_t sub_100063CA8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;

  if (a2)
  {
    if (a2 != 1)
    {
      _StringGuts.grow(_:)(43);
      sub_10006B224(v25, v26, v27, v28, v29, v30, v31, v32, v39, v40, 0, 0xE000000000000000);
      v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      String.append(_:)(v33);
      sub_1000117B4();
      v34._countAndFlagsBits = 8238;
      v34._object = (void *)0xE200000000000000;
      String.append(_:)(v34);
      _StringGuts.grow(_:)(51);
      v35._object = (void *)0x80000001000F4990;
      v35._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v35);
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      sub_100019CCC(v44);
      sub_1000100D0();
      v36._countAndFlagsBits = 0xD000000000000020;
      v36._object = (void *)0x80000001000F49B0;
      String.append(_:)(v36);
      v41 = 0xD000000000000027;
      swift_bridgeObjectRetain();
      v37._countAndFlagsBits = 0;
      v37._object = (void *)0xE000000000000000;
      String.append(_:)(v37);
      sub_1000117B4();
      swift_bridgeObjectRelease(0xE000000000000000);
      return v41;
    }
    sub_10001A84C();
    _StringGuts.grow(_:)(40);
    sub_10006B224(v3, v4, v5, v6, v7, v8, v9, v10, v39, v40, 0, 0xE000000000000000);
    v41 = 0xD000000000000026;
    sub_10001A84C();
    v11 = sub_10001BE7C((uint64_t *)&unk_100129420);
    v42._countAndFlagsBits = sub_10006B1D8(v11, v12);
    sub_100019CCC(v42);
    sub_1000100D0();
    v13 = a1;
    v14 = 1;
  }
  else
  {
    sub_10001A84C();
    _StringGuts.grow(_:)(36);
    sub_10006B224(v15, v16, v17, v18, v19, v20, v21, v22, v39, v40, 0, 0xE000000000000000);
    v41 = 0xD000000000000022;
    sub_10001A84C();
    v23 = sub_10001BE7C((uint64_t *)&unk_100129420);
    v43._countAndFlagsBits = sub_10006B1D8(v23, v24);
    sub_100019CCC(v43);
    sub_1000100D0();
    v13 = a1;
    v14 = 0;
  }
  sub_10006B028(v13, v14);
  return v41;
}

unint64_t sub_100063EE4()
{
  uint64_t v0;

  return sub_100063CA8(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_100063EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_10000C05C();
  sub_1000269D8(v0, qword_10012CD38);
  sub_100012A40(v0, (uint64_t)qword_10012CD38);
  type metadata accessor for MetadataStore(0);
  v1 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v4 = sub_10006B1D8(v1, v2);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v6 = v3;
    v7 = String.init(cString:)();
    return Logger.init(subsystem:category:)(v7, v8, v4, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100063F8C(uint64_t a1)
{
  objc_class *v1;
  uint64_t v2;
  objc_class *v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];

  v3 = v1;
  v5 = sub_10001BE7C(&qword_100128740);
  v6 = __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = URL.absoluteString.getter(v6);
  v11 = v10;
  v12 = objc_allocWithZone(v3);
  v13 = (char *)sub_100064678(v9, v11, 0, 0);
  if (v2)
  {
    v14 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
  }
  else
  {
    v15 = type metadata accessor for URL(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v8, a1, v15);
    sub_100014360((uint64_t)v8, 0, 1, v15);
    v16 = (uint64_t)&v13[OBJC_IVAR____TtC10LinkDaemon13MetadataStore_URL];
    swift_beginAccess(&v13[OBJC_IVAR____TtC10LinkDaemon13MetadataStore_URL], v18, 33, 0);
    sub_10004BCC8((uint64_t)v8, v16);
    swift_endAccess(v18);
  }
  sub_10001ED7C();
  sub_10006B204();
}

void sub_1000640C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  sqlite3 *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  int v38;
  int v39;
  const char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  sqlite3 *ppDb;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v68 - v5;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v68 - v9;
  ppDb = 0;
  v11 = URL.absoluteString.getter(v8);
  v13 = v12;
  v14 = String.utf8CString.getter(v11, v12);
  swift_bridgeObjectRelease(v13);
  v15 = sqlite3_open_v2((const char *)(v14 + 32), &ppDb, 2, 0);
  swift_release();
  v16 = ppDb;
  if (v15)
  {
    v17 = sqlite3_errmsg(ppDb);
    if (v17)
    {
      v18 = String.init(cString:)(v17);
      v20 = v19;
      if (qword_100127D80 != -1)
        swift_once(&qword_100127D80, sub_100063EF0);
      v21 = sub_10000C05C();
      v22 = sub_100012A40(v21, (uint64_t)qword_10012CD38);
      sub_10001A6B8((uint64_t)v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      swift_bridgeObjectRetain();
      v23 = v22;
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter();
      if (sub_10006B214(v26))
      {
        v27 = sub_100011780(28);
        v71 = sub_100011780(64);
        v73 = v71;
        *(_DWORD *)v27 = 136315650;
        v69 = v18;
        sub_10006AF30((unint64_t *)&qword_1001286B0, (void (*)(uint64_t))&type metadata accessor for URL);
        v70 = v23;
        v29 = sub_10006B2BC(v28, v28);
        v31 = sub_10000EB1C(v29, v30);
        v32 = sub_10006B1BC(v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v33);
        sub_1000059A8();
        sub_10001B6AC((uint64_t)v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
        sub_10006B288();
        LODWORD(v72) = v15;
        sub_10006B1F4();
        *(_WORD *)(v27 + 18) = 2080;
        swift_bridgeObjectRetain();
        v34 = sub_10000FBEC(v69, v20, &v73);
        v35 = sub_10006B268(v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v36);
        swift_bridgeObjectRelease_n(v20, 3);
        v37 = "Could not open database at %s to truncate: %d %s";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v70, v37, (uint8_t *)v27, 0x1Cu);
        v58 = v71;
        swift_arrayDestroy(v71, 2);
        sub_1000133FC(v58);
        sub_1000133FC(v27);

        return;
      }
      sub_10001B6AC((uint64_t)v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));

      v59 = v20;
LABEL_20:
      swift_bridgeObjectRelease_n(v59, 2);
      return;
    }
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  v38 = _sqlite3_db_truncate(ppDb, 0);
  if (v38)
  {
    v39 = v38;
    v40 = sqlite3_errmsg(v16);
    if (v40)
    {
      v41 = String.init(cString:)(v40);
      v43 = v42;
      if (qword_100127D80 != -1)
        swift_once(&qword_100127D80, sub_100063EF0);
      v44 = sub_10000C05C();
      v45 = sub_100012A40(v44, (uint64_t)qword_10012CD38);
      sub_10001A6B8((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      v46 = sub_10000BFF4();
      v47 = v45;
      v25 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter();
      if (sub_10006B214(v48))
      {
        v27 = sub_100011780(28);
        v71 = sub_100011780(64);
        v73 = v71;
        *(_DWORD *)v27 = 136315650;
        v69 = v41;
        sub_10006AF30((unint64_t *)&qword_1001286B0, (void (*)(uint64_t))&type metadata accessor for URL);
        v70 = v47;
        v50 = sub_10006B2BC(v49, v49);
        v52 = sub_10000EB1C(v50, v51);
        v53 = sub_10006B1BC(v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v54);
        sub_1000059A8();
        sub_10001B6AC((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
        sub_10006B288();
        LODWORD(v72) = v39;
        sub_10006B1F4();
        *(_WORD *)(v27 + 18) = 2080;
        sub_10000BFF4();
        v55 = sub_10000FBEC(v69, v43, &v73);
        v56 = sub_10006B268(v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v57);
        swift_bridgeObjectRelease_n(v43, 3);
        v37 = "Could not truncate database at %s: %d %s";
        goto LABEL_13;
      }
      sub_10001B6AC((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));

      v59 = v43;
      goto LABEL_20;
    }
    goto LABEL_24;
  }
  if (qword_100127D80 != -1)
    swift_once(&qword_100127D80, sub_100063EF0);
  v60 = sub_10000C05C();
  sub_100012A40(v60, (uint64_t)qword_10012CD38);
  sub_10001A6B8((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  v61 = sub_100005900();
  v62 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)sub_100011780(12);
    v64 = sub_100011780(32);
    v73 = v64;
    *(_DWORD *)v63 = 136315138;
    sub_10006AF30((unint64_t *)&qword_1001286B0, (void (*)(uint64_t))&type metadata accessor for URL);
    v66 = sub_10006B2BC(v65, v65);
    v72 = sub_10000EB1C(v66, v67);
    sub_10001F93C((uint64_t)&v72, (uint64_t)&v73);
    sub_1000059A8();
    sub_10001B6AC((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_1000100C0((void *)&_mh_execute_header, v61, v62, "Truncated database at %s", v63);
    sub_100013320(v64);
    sub_1000133FC(v64);
    sub_1000133FC((uint64_t)v63);
  }
  else
  {
    sub_10001B6AC((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }

  sqlite3_close_v2(ppDb);
}

id sub_100064678(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  objc_class *ObjectType;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  os_log_type_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  os_log_type_t v38;
  _WORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  objc_super v52;
  uint64_t v53;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  v11 = (uint64_t)v4 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_URL;
  v12 = type metadata accessor for URL(0);
  sub_100014360(v11, 1, 1, v12);
  v13 = v4;
  v14 = sub_100064B60(a1, a2, 1.0, 1, 1);
  if (v5)
  {
    swift_bridgeObjectRelease(a4);
    sub_10000E074();
LABEL_7:
    sub_1000131E0(v11, &qword_100128740);

    return (id)swift_deallocPartialClassInstance(v13, ObjectType, *(unsigned int *)((swift_isaMask & *v13) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v13) + 0x34));
  }
  v15 = v14;
  sub_10000E074();
  v16 = v15;
  if (a4)
    goto LABEL_5;
  v17 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v18 = objc_msgSend(v17, "environment");

  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for String, &type metadata for String, &protocol witness table for String);
  sub_10006B22C();
  a3 = sub_10002D944(0x4152545F4B4E494CLL, 0xED000042445F4543, (uint64_t)v17);
  a4 = v19;
  swift_bridgeObjectRelease(v17);
  if (a4)
  {
LABEL_5:
    v18 = (_QWORD *)swift_allocObject(&unk_10011C848, 40, 7);
    v18[2] = a3;
    v18[3] = a4;
    v18[4] = ObjectType;
    Connection.trace(_:)(sub_10006AFA0, v18);
    sub_10001105C();
  }
  sub_100065030();
  if ((v21 & 1) != 0)
  {
    if (qword_100127D80 != -1)
      swift_once(&qword_100127D80, sub_100063EF0);
    v30 = sub_10000C05C();
    v31 = sub_10006B1A8(v30, (uint64_t)qword_10012CD38);
    v32 = static os_log_type_t.default.getter();
    if (sub_1000101D0(v32))
    {
      v33 = (uint8_t *)sub_10001F1E4();
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v18, "Found an empty database, resetting and writing schema", v33, 2u);
      sub_1000133FC((uint64_t)v33);
    }

    sub_1000650D8(v16);
  }
  else
  {
    v23 = v20;
    if (v20 != 101)
    {
      if (qword_100127D80 != -1)
        swift_once(&qword_100127D80, sub_100063EF0);
      v42 = sub_10000C05C();
      v43 = sub_10006B1A8(v42, (uint64_t)qword_10012CD38);
      v44 = static os_log_type_t.default.getter();
      if (sub_1000101D0(v44))
      {
        v45 = swift_slowAlloc(22, -1);
        *(_DWORD *)v45 = 134218240;
        v47 = sub_10006B25C(v45, v46, v45 + 4, v45 + 12);
        *(_WORD *)(v45 + 12) = 2048;
        v53 = 101;
        sub_10006B25C(v47, v48, v45 + 14, v45 + 22);
        _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v18, "Found an existing database with a different schema version (found: %lld, expected: %ld)", (uint8_t *)v45, 0x16u);
        sub_1000133FC(v45);
      }

      v49 = sub_10006A9E0();
      v50 = sub_1000176B0((uint64_t)&type metadata for MetadataStore.CreationError, v49);
      *(_QWORD *)v51 = v23;
      *(_BYTE *)(v51 + 8) = 2;
      swift_willThrow(v50);
      sub_10006B2B4();
      goto LABEL_7;
    }
    if (qword_100127D80 != -1)
      swift_once(&qword_100127D80, sub_100063EF0);
    v24 = sub_10000C05C();
    v25 = (void *)sub_10006B1A8(v24, (uint64_t)qword_10012CD38);
    v26 = static os_log_type_t.debug.getter();
    if (sub_1000101D0(v26))
    {
      v27 = (_WORD *)sub_10001F1E4();
      *v27 = 0;
      sub_100019D84((void *)&_mh_execute_header, v28, v29, "Found an existing database matching the expected schema version");
      sub_1000133FC((uint64_t)v27);
    }

  }
  *(_QWORD *)((char *)v13 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection) = v16;
  v34 = objc_allocWithZone((Class)type metadata accessor for _LNMetadataProviderDirect());
  v35 = swift_retain_n(v16, 2);
  *(_QWORD *)((char *)v13 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider) = sub_10008227C(v35);

  if (qword_100127D80 != -1)
    swift_once(&qword_100127D80, sub_100063EF0);
  v36 = sub_10000C05C();
  v37 = (void *)sub_10006B1A8(v36, (uint64_t)qword_10012CD38);
  v38 = static os_log_type_t.debug.getter();
  if (sub_1000101D0(v38))
  {
    v39 = (_WORD *)sub_10001F1E4();
    *v39 = 0;
    sub_100019D84((void *)&_mh_execute_header, v40, v41, "Metadata store database opened");
    sub_1000133FC((uint64_t)v39);
    sub_10006B2B4();

  }
  else
  {

    sub_10006B2B4();
  }
  v52.receiver = v13;
  v52.super_class = ObjectType;
  return objc_msgSendSuper2(&v52, "init");
}

uint64_t sub_100064B60(uint64_t a1, unint64_t a2, double a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v10 = type metadata accessor for Connection();
  swift_allocObject(v10, 121, 7);
  sub_10006AFAC(a1, a2);
  v11 = Connection.init(_:readonly:)(a1, a2, 0);
  v12 = v5;
  if (!v5)
  {
    if ((a5 & 1) != 0)
    {
      v13 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
      v14 = objc_msgSend(v13, "environment");

      v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for String, &type metadata for String, &protocol witness table for String);
      sub_10002D944(0x5F454C4241534944, 0xEB000000004C4157, v15);
      v17 = v16;
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v17);
      if (!v17)
        sub_1000C6F48();
    }
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(0xE000000000000000);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    v20._countAndFlagsBits = 59;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = 0xD000000000000014;
    v21._object = (void *)0x80000001000F4940;
    Connection.execute(_:)(v21);
    if (!v22)
    {
      swift_bridgeObjectRelease(0x80000001000F4940);
      Connection.busyTimeout.setter(a3);
      return v11;
    }
    swift_release();
    swift_bridgeObjectRelease(0x80000001000F4940);
    v12 = v22;
  }
  v23 = sub_10006A9E0();
  v24 = swift_allocError(&type metadata for MetadataStore.CreationError, v23, 0, 0);
  *(_QWORD *)v25 = v12;
  *(_BYTE *)(v25 + 8) = 0;
  swift_willThrow(v24);
  return v11;
}

void sub_100064DB8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a3 == 1330007625 && a4 == 0xE400000000000000;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(1330007625, 0xE400000000000000, a3, a4, 0) & 1) != 0)
  {
    if (qword_100127D80 != -1)
      swift_once(&qword_100127D80, sub_100063EF0);
    v9 = type metadata accessor for Logger(0);
    sub_100012A40(v9, (uint64_t)qword_10012CD38);
    v10 = swift_bridgeObjectRetain_n(a2, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
LABEL_17:
    v16 = v12;
    if (os_log_type_enabled(v11, v12))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v20 = v18;
      *(_DWORD *)v17 = 136315138;
      swift_bridgeObjectRetain();
      v19 = sub_10000FBEC(a1, a2, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v11, v16, "%s", v17, 0xCu);
      swift_arrayDestroy(v18, 1);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    return;
  }
  v13 = a3 == 0x544C5541464544 && a4 == 0xE700000000000000;
  if (v13
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x544C5541464544, 0xE700000000000000, a3, a4, 0) & 1) != 0)
  {
    if (qword_100127D80 != -1)
      swift_once(&qword_100127D80, sub_100063EF0);
    v14 = type metadata accessor for Logger(0);
    sub_100012A40(v14, (uint64_t)qword_10012CD38);
    v15 = swift_bridgeObjectRetain_n(a2, 2);
    v11 = Logger.logObject.getter(v15);
    v12 = static os_log_type_t.default.getter();
    goto LABEL_17;
  }
}

void sub_100065030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  _BYTE v5[40];

  Connection.scalar(_:_:)(0xD000000000000013, 0x80000001000F4920, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&v3);
  if (!v0)
  {
    if (v4)
    {
      sub_100019A48(&v3, (uint64_t)v5);
      v1 = sub_10001BE7C((uint64_t *)&unk_10012A020);
      swift_dynamicCast(&v2, v5, v1, &type metadata for Int64, 7);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000650D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10006818C(a1);
  if (v1)
  {
    v2 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v2, v3);
    sub_100017704();
    sub_10001B2EC();
    sub_100013E4C();
    sub_100005A04();
  }
  sub_10001F5C0();
}

void sub_100065144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001F018(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  sub_100054824();
  swift_release();
  if (v0)
  {
    v1 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v1, v2);
    sub_100017704();
    sub_10001B2EC();
    sub_100013E4C();
    sub_100005A04();
  }
  sub_10001F5C0();
}

void sub_1000651E0(_QWORD *a1)
{
  sub_1000653CC(a1, (void (*)(_QWORD *, uint64_t))sub_1000550E0);
}

void sub_1000651FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[104];

  sub_10000C0C4(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  sub_1000766D0(a1, a2, a3, a4, (uint64_t)v14);
  if (v4)
  {
    swift_release();
    v9 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v9, v10);
    sub_100017704();
    sub_10001B2EC();
    sub_100013E4C();
    sub_100005A04();
  }
  else
  {
    v11 = swift_release();
    sub_10006B2DC(v11, v12, (uint64_t *)&unk_100129F20, v13);
  }
}

void sub_1000652DC(uint64_t a1, _QWORD *a2)
{
  sub_1000652F8(a1, a2, (void (*)(uint64_t))sub_1000769A8);
}

void sub_1000652F8(uint64_t a1, _QWORD *a2, void (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10000C0C4(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  v6 = sub_1000166F0();
  a3(v6);
  sub_10001F40C();
  swift_release();
  if (v3)
  {
    v7 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v7, v8);
    sub_10001F6B8();
    sub_100013594(a2);
    sub_1000137DC();
    sub_100010120();
  }
  sub_10001ED7C();
  sub_10001B110();
}

void sub_100065394()
{
  sub_100065480((void (*)(uint64_t))sub_1000C32C8);
}

void sub_1000653B0(_QWORD *a1)
{
  sub_1000653CC(a1, (void (*)(_QWORD *, uint64_t))&sub_1000C3430);
}

void sub_1000653CC(_QWORD *a1, void (*a2)(_QWORD *, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  sub_10000C0C4(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  a2(a1, v3);
  sub_10001F40C();
  swift_release();
  if (v2)
  {
    v6 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v6, v7);
    sub_10001F6B8();
    sub_100013594(a1);
    sub_1000137DC();
    sub_100010120();
  }
  sub_10001ED7C();
  sub_10006B30C();
}

void sub_100065464()
{
  sub_100065480((void (*)(uint64_t))&sub_1000C35C0);
}

void sub_100065480(void (*a1)(uint64_t))
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_10000C0C4(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  a1(v4);
  sub_10001F40C();
  swift_release();
  if (v1)
  {
    v5 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v5, v6);
    sub_10001F6B8();
    sub_100013594(v2);
    sub_1000137DC();
    sub_100010120();
  }
  sub_10001ED7C();
  sub_10006B30C();
}

uint64_t sub_10006550C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;

  sub_1000655A0(&v4);
  if (!v0)
    return v4;
  v1 = sub_100018A38();
  sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  sub_1000176B0(v1, v2);
  sub_100017704();
  sub_10001B2EC();
  sub_100013E4C();
  return sub_100005A04();
}

uint64_t sub_1000655A0@<X0>(__int128 *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  __int128 v17;
  _BYTE __dst[168];
  _QWORD v20[5];
  _QWORD __src[24];

  Table.init(_:database:)(__src, 0x6769666E6F63, 0xE600000000000000, 0, 0);
  v1 = sub_10001BE7C(&qword_100128D00);
  sub_100037BD0((unint64_t *)&qword_100129FA0, &qword_100128D00);
  ExpressionType.init(_:)(7955819, 0xE300000000000000, v1, v2);
  v3 = sub_10001BE7C(&qword_100128D10);
  sub_100037BD0((unint64_t *)&unk_100129FB0, &qword_100128D10);
  ExpressionType.init(_:)(0x65756C6176, 0xE500000000000000, v3, v4);
  swift_bridgeObjectRetain();
  == infix<A>(_:_:)();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20[3] = &type metadata for Table;
  v20[4] = &protocol witness table for Table;
  v11 = swift_allocObject(&unk_10011C820, 184, 7);
  v12 = v11 + 16;
  v20[0] = v11;
  memcpy(__dst, __src, sizeof(__dst));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v6, v8, v10, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v12);
  swift_bridgeObjectRelease_n(v10, 2);
  swift_bridgeObjectRelease_n(v8, 2);
  sub_100037A7C(__src);
  v13 = __src[23];
  v14 = Connection.pluck(_:)(v20);
  if (v13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_10000E87C(v20);
  }
  else
  {
    v16 = v14;
    sub_10000E87C(v20);
    if (v16)
    {
      Row.get<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v17 = *(_OWORD *)__dst;
    }
    else
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v17 = xmmword_1000F0B70;
    }
    *a1 = v17;
  }
  return result;
}

void sub_1000658AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_10006B324();
  sub_100065928(v1, v2, v3, v4, v5);
  if (v0)
  {
    v6 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v6, v7);
    sub_100017704();
    sub_10001B2EC();
    sub_100013E4C();
    sub_100005A04();
  }
  sub_10001F5C0();
}

uint64_t sub_100065928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::OpaquePointer v17;
  uint64_t countAndFlagsBits;
  void *object;
  void *rawValue;
  _QWORD __dst[21];
  _BYTE v26[192];
  _QWORD __src[22];
  SQLite::Insert v28;
  SQLite::Insert v29;

  Table.init(_:database:)(__src, 0x6769666E6F63, 0xE600000000000000, 0, 0);
  v6 = sub_10001BE7C(&qword_100128D00);
  sub_100037BD0((unint64_t *)&qword_100129FA0, &qword_100128D00);
  ExpressionType.init(_:)(7955819, 0xE300000000000000, v6, v7);
  v8 = __dst[0];
  v9 = __dst[1];
  v10 = __dst[2];
  v11 = sub_10001BE7C(&qword_100128D10);
  sub_100037BD0((unint64_t *)&unk_100129FB0, &qword_100128D10);
  ExpressionType.init(_:)(0x65756C6176, 0xE500000000000000, v11, v12);
  v14 = __dst[0];
  v13 = __dst[1];
  v15 = __dst[2];
  v16 = sub_10001BE7C(&qword_100128D08);
  v17._rawValue = (void *)swift_initStackObject(v16, v26);
  *((_OWORD *)v17._rawValue + 1) = xmmword_1000EFD90;
  __dst[0] = a2;
  __dst[1] = a3;
  <- infix<A>(_:_:)(v8, v9, v10, (uint64_t)__dst, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __dst[0] = a4;
  __dst[1] = a5;
  <- infix<A>(_:_:)(v14, v13, v15, (uint64_t)__dst, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, sizeof(__dst));
  v28 = QueryType.insert(or:_:)(SQLite_OnConflict_replace, v17);
  countAndFlagsBits = v28.template._countAndFlagsBits;
  object = v28.template._object;
  rawValue = v28.bindings._rawValue;
  swift_bridgeObjectRelease();
  sub_100037A7C(__src);
  v29.template._countAndFlagsBits = countAndFlagsBits;
  v29.template._object = object;
  v29.bindings._rawValue = rawValue;
  Connection.run(_:)(v29);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100065B64(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = v4;
  *(_BYTE *)(v5 + 80) = a2;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a3;
  sub_1000167A8();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_100065B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t (*v8)(char, uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_BYTE *)(v0 + 80);
  v4 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 48) = v4;
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 40) = v2;
  *(_BYTE *)(v4 + 48) = v3;
  v8 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_100129FD8 + dword_100129FD8);
  v6 = (_QWORD *)swift_task_alloc(unk_100129FDC);
  *(_QWORD *)(v0 + 56) = v6;
  *v6 = v0;
  v6[1] = sub_100065C38;
  return v8(2, (uint64_t)&unk_100129FD0, v4);
}

uint64_t sub_100065C38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 56);
  v3[8] = a1;
  v3[9] = v1;
  swift_task_dealloc(v4);
  if (!v1)
    swift_task_dealloc(v3[6]);
  sub_1000167A8();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_100065CA8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 64))
    swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065CE8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100065D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(v6 + 392) = a6;
  *(_QWORD *)(v6 + 232) = a4;
  *(_QWORD *)(v6 + 240) = a5;
  *(_QWORD *)(v6 + 216) = a2;
  *(_QWORD *)(v6 + 224) = a3;
  *(_QWORD *)(v6 + 208) = a1;
  v7 = sub_10001BE7C(&qword_100128740);
  *(_QWORD *)(v6 + 248) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001BE7C(&qword_100129FE0);
  *(_QWORD *)(v6 + 256) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LNBundleRecord(0);
  *(_QWORD *)(v6 + 264) = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 272) = swift_task_alloc(v10);
  *(_QWORD *)(v6 + 280) = swift_task_alloc(v10);
  v11 = type metadata accessor for Logger(0);
  *(_QWORD *)(v6 + 288) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v6 + 296) = v12;
  *(_QWORD *)(v6 + 304) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100065DFC, 0, 0);
}

uint64_t sub_100065DFC()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  int *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t *v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t (*v101)();
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v123 = v0 + 200;
  v2 = qword_100127D80;
  v3 = *(id *)(v0 + 216);
  if (v2 == -1)
  {
    v4 = v3;
  }
  else
  {
    swift_once(&qword_100127D80, sub_100063EF0);
    v4 = *(void **)(v0 + 216);
  }
  v6 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 304);
  sub_100012A40(*(_QWORD *)(v0 + 288), (uint64_t)qword_10012CD38);
  (*(void (**)(uint64_t))(v6 + 16))(v5);

  sub_10006B29C();
  v7 = sub_100005900();
  v8 = static os_log_type_t.default.getter();
  v9 = sub_100013660(v8);
  v11 = *(_QWORD *)(v0 + 296);
  v10 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 288);
  if (v9)
  {
    v122 = *(_QWORD *)(v0 + 304);
    v121 = *(_QWORD *)(v0 + 296);
    v13 = (uint8_t *)sub_100011780(12);
    v125 = sub_100011780(32);
    *(_DWORD *)v13 = 136315138;
    sub_10000E858((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v14 = sub_100019050();
    *(_QWORD *)(v0 + 200) = sub_10006B188(v14, v15, v16, v17, v18, v19, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v123, v0 + 208);
    sub_1000059A8();
    sub_10000E87C((_QWORD *)(v0 + 16));
    sub_1000100C0((void *)&_mh_execute_header, v7, v1, "→ Beginning indexing transaction for %s", v13);
    sub_100013320(v125);
    sub_1000133FC(v125);
    sub_1000133FC((uint64_t)v13);

    (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v122, v12);
  }
  else
  {
    sub_10000E87C((_QWORD *)(v0 + 16));

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  v21 = *(_QWORD **)(v0 + 224);
  v22 = *(_QWORD *)(*(_QWORD *)(v0 + 216) + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  *(_QWORD *)(v0 + 312) = v22;
  v23 = v21[4];
  sub_10000E858(v21, v21[3]);
  v24 = *(void (**)(uint64_t))(*(_QWORD *)(v23 + 8) + 8);
  sub_1000166E8();
  v25 = sub_10006B2A8();
  v24(v25);
  sub_1000C373C();
  v27 = *(_QWORD *)(v0 + 256);
  v26 = *(_QWORD *)(v0 + 264);
  sub_1000059A8();
  if (sub_10001C93C(v27, 1, v26) == 1)
  {
    v28 = *(_QWORD *)(v0 + 224);
    sub_1000131E0(*(_QWORD *)(v0 + 256), &qword_100129FE0);
    sub_1000132C4(v28, v0 + 56);
    v29 = sub_10006B2C4();
    v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)sub_100011780(12);
      v126 = sub_100011780(32);
      *(_DWORD *)v31 = 136315138;
      v33 = *(_QWORD *)(v0 + 80);
      v32 = *(_QWORD *)(v0 + 88);
      sub_10000E858((_QWORD *)(v0 + 56), v33);
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v32 + 8) + 8))(v33);
      *(_QWORD *)(v0 + 184) = sub_10006B188(v34, v35, v36, v37, v38, v39, v40);
      sub_10001F93C(v0 + 184, v0 + 192);
      sub_1000059A8();
      sub_10000E87C((_QWORD *)(v0 + 56));
      sub_1000100C0((void *)&_mh_execute_header, v29, v30, "Bundle record %s not found, creating", v31);
      sub_100013320(v126);
      sub_1000133FC(v126);
      sub_1000133FC((uint64_t)v31);
    }
    else
    {
      sub_10000E87C((_QWORD *)(v0 + 56));
    }

    v74 = *(int **)(v0 + 264);
    v73 = *(uint64_t **)(v0 + 272);
    v75 = *(_QWORD *)(v0 + 248);
    v76 = *(_QWORD **)(v0 + 224);
    sub_10000E858(v76, v21[3]);
    v77 = sub_100019050();
    v124 = v78;
    v80 = v21[3];
    v79 = v21[4];
    sub_10000E858(v76, v80);
    (*(void (**)(uint64_t))(*(_QWORD *)(v79 + 8) + 16))(v80);
    v82 = v21[3];
    v81 = v21[4];
    sub_10000E858(v76, v82);
    v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v81 + 8) + 24))(v82);
    v85 = v84;
    v86 = objc_msgSend((id)objc_opt_self(LNBundleMetadata), "latestMetadataVersion");
    *v73 = v77;
    v73[1] = v124;
    sub_100013120(v75, (uint64_t)v73 + v74[5], &qword_100128740);
    v87 = (uint64_t *)((char *)v73 + v74[6]);
    *v87 = v83;
    v87[1] = v85;
    *(uint64_t *)((char *)v73 + v74[7]) = 1;
    *(uint64_t *)((char *)v73 + v74[8]) = (uint64_t)v86;
    sub_1000C3CA0();
    v98 = (_QWORD *)swift_task_alloc(dword_100129FEC);
    *(_QWORD *)(v0 + 368) = v98;
    *v98 = v0;
    v98[1] = sub_10006685C;
    v99 = *(_QWORD *)(v0 + 272);
    return sub_100066A2C(v99, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), v22);
  }
  v41 = *(_QWORD *)(v0 + 280);
  v42 = *(_QWORD *)(v0 + 264);
  v43 = *(_QWORD **)(v0 + 224);
  sub_100035DB4(*(_QWORD *)(v0 + 256), v41);
  v44 = v41 + *(int *)(v42 + 24);
  v45 = v21[3];
  v46 = v21[4];
  sub_10000E858(v43, v45);
  v47 = *(_QWORD *)(v46 + 8);
  v48 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 24);
  v49 = sub_10006B2A8();
  sub_10001EBF8(v49, v50);
  v51 = v48(v45, v47);
  v53 = v52;
  v54 = sub_10006B2A8();
  v55 = static Data.== infix(_:_:)(v54);
  sub_10001EA88(v51, v53);
  v56 = sub_10006B2A8();
  sub_10001EA88(v56, v57);
  if ((v55 & 1) == 0)
  {
    sub_1000132C4(*(_QWORD *)(v0 + 224), v0 + 136);
    v88 = sub_10006B2C4();
    v89 = static os_log_type_t.info.getter();
    if (sub_100013660(v89))
    {
      v90 = (uint8_t *)sub_100011780(12);
      v128 = sub_100011780(32);
      *(_DWORD *)v90 = 136315138;
      v91 = sub_1000186B0((_QWORD *)(v0 + 136));
      *(_QWORD *)(v0 + 176) = sub_10006B188(v91, v92, v93, v94, v95, v96, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184);
      sub_1000059A8();
      sub_10000E87C((_QWORD *)(v0 + 136));
      sub_1000100C0((void *)&_mh_execute_header, v88, v55, "%s installIdentifier changed, indexing", v90);
      sub_100013320(v128);
      sub_1000133FC(v128);
      sub_1000133FC((uint64_t)v90);
    }
    else
    {
      sub_10000E87C((_QWORD *)(v0 + 136));
    }

    v102 = *(_QWORD *)(v0 + 280);
    v103 = *(_QWORD *)(v0 + 264);
    v105 = v21[3];
    v104 = v21[4];
    sub_10000E858(*(_QWORD **)(v0 + 224), v105);
    v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v104 + 8) + 24))(v105);
    v108 = v107;
    sub_10001EA88(*(_QWORD *)v44, *(_QWORD *)(v44 + 8));
    *(_QWORD *)v44 = v106;
    *(_QWORD *)(v44 + 8) = v108;
    *(_QWORD *)(v102 + *(int *)(v103 + 28)) = 1;
    sub_10006B300();
    if (!v102)
    {
      v100 = (_QWORD *)swift_task_alloc(dword_100129FEC);
      *(_QWORD *)(v0 + 344) = v100;
      v101 = sub_1000667A8;
      goto LABEL_25;
    }
LABEL_23:
    v109 = *(_QWORD *)(v0 + 280);
    sub_10001BFF8();
    v110 = v109;
LABEL_29:
    sub_10001DBC8(v110, type metadata accessor for LNBundleRecord);
    sub_1000183FC();
    sub_1000158B0();
    sub_100005878();
    sub_100010270();
    sub_10001631C();
    sub_10000DD44();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v58 = *(_QWORD *)(v0 + 280);
  v59 = *(unsigned __int8 *)(v0 + 392);
  v60 = *(int *)(*(_QWORD *)(v0 + 264) + 28);
  v61 = *(_QWORD *)(v58 + v60);
  result = sub_1000C41F0();
  if (v61 >= result && !v59)
  {
    sub_1000132C4(*(_QWORD *)(v0 + 224), v0 + 96);
    v63 = sub_10006B2C4();
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)sub_100011780(12);
      v127 = sub_100011780(32);
      *(_DWORD *)v65 = 136315138;
      v66 = sub_10001AA40((_QWORD *)(v0 + 96));
      *(_QWORD *)(v0 + 192) = sub_10006B188(v66, v67, v68, v69, v70, v71, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v123);
      sub_1000059A8();
      sub_10000E87C((_QWORD *)(v0 + 96));
      sub_1000100C0((void *)&_mh_execute_header, v63, v64, "Bundle record %s has failed indexing too frequently and has been blocked", v65);
      sub_100013320(v127);
      sub_1000133FC(v127);
      sub_1000133FC((uint64_t)v65);
    }
    else
    {
      sub_10000E87C((_QWORD *)(v0 + 96));
    }

    v111 = *(_QWORD *)(v0 + 280);
    v112 = *(_QWORD **)(v0 + 224);
    v113 = type metadata accessor for Schema.RuntimeError(0);
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    swift_allocError(v113, v114, 0, 0);
    v116 = v115;
    v118 = v21[3];
    v117 = v21[4];
    sub_10000E858(v112, v118);
    *v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v117 + 8) + 8))(v118);
    v116[1] = v119;
    v120 = swift_storeEnumTagMultiPayload(v116, v113, 4);
    swift_willThrow(v120);
    sub_10001BFF8();
    v110 = v111;
    goto LABEL_29;
  }
  if (!__OFADD__(v61, 1))
  {
    *(_QWORD *)(v58 + v60) = v61 + 1;
    sub_10006B300();
    if (!v60)
    {
      v100 = (_QWORD *)swift_task_alloc(dword_100129FEC);
      *(_QWORD *)(v0 + 320) = v100;
      v101 = sub_1000666F4;
LABEL_25:
      *v100 = v0;
      v100[1] = v101;
      v99 = *(_QWORD *)(v0 + 280);
      return sub_100066A2C(v99, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), v22);
    }
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000666F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  sub_10006B194();
  v4 = v2[40];
  *v5 = *v3;
  v2[41] = v1;
  swift_task_dealloc(v4);
  if (!v1)
    v2[42] = v0;
  sub_1000167A8();
  return sub_100011788();
}

uint64_t sub_10006674C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 336);
  v3 = sub_10006B1E4();
  *v0 = v2;
  sub_1000185C8(v3, type metadata accessor for LNBundleRecord);
  sub_1000183FC();
  sub_1000158B0();
  sub_100005878();
  sub_100010270();
  sub_10001631C();
  sub_10000DD44();
  return sub_10001185C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000667A8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  sub_10006B194();
  v4 = v2[43];
  *v5 = *v3;
  v2[44] = v1;
  swift_task_dealloc(v4);
  if (!v1)
    v2[45] = v0;
  sub_1000167A8();
  return sub_100011788();
}

uint64_t sub_100066800()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 360);
  v3 = sub_10006B1E4();
  *v0 = v2;
  sub_1000185C8(v3, type metadata accessor for LNBundleRecord);
  sub_1000183FC();
  sub_1000158B0();
  sub_100005878();
  sub_100010270();
  sub_10001631C();
  sub_10000DD44();
  return sub_10001185C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10006685C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  sub_10006B194();
  v4 = v2[46];
  *v5 = *v3;
  v2[47] = v1;
  swift_task_dealloc(v4);
  if (!v1)
    v2[48] = v0;
  sub_1000167A8();
  return sub_100011788();
}

uint64_t sub_1000668B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD **)(v0 + 208);
  v3 = swift_release();
  sub_1000185C8(v3, type metadata accessor for LNBundleRecord);
  *v2 = v1;
  sub_1000183FC();
  sub_1000158B0();
  sub_100005878();
  sub_100010270();
  sub_10001631C();
  sub_10000DD44();
  return sub_10001185C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006691C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release();
  sub_1000185C8(v1, type metadata accessor for LNBundleRecord);
  sub_10001C040();
  sub_100005878();
  sub_100010270();
  sub_10001631C();
  sub_10000DD44();
  sub_100010034();
  return sub_10001B7D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006697C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10001BEC8();
  sub_1000185C8(v1, type metadata accessor for LNBundleRecord);
  sub_10001C040();
  sub_100005878();
  sub_100010270();
  sub_10001631C();
  sub_10000DD44();
  sub_100010034();
  return sub_10001B7D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000669D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10001BEC8();
  sub_1000185C8(v1, type metadata accessor for LNBundleRecord);
  sub_10001C040();
  sub_100005878();
  sub_100010270();
  sub_10001631C();
  sub_10000DD44();
  sub_100010034();
  return sub_10001B7D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100066A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[23] = a5;
  v6[24] = a6;
  v6[21] = a3;
  v6[22] = a4;
  v6[19] = a1;
  v6[20] = a2;
  v7 = type metadata accessor for LNBundleRecord(0);
  v6[25] = v7;
  v6[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v6[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[28] = v9;
  v6[29] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100066AB8, 0, 0);
}

uint64_t sub_100066AB8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  _QWORD *v19;
  uint64_t (*v21)(void);
  uint64_t v22;

  v1 = qword_100127D80;
  v2 = *(id *)(v0 + 160);
  if (v1 == -1)
  {
    v3 = v2;
  }
  else
  {
    swift_once(&qword_100127D80, sub_100063EF0);
    v3 = *(void **)(v0 + 160);
  }
  v5 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 216);
  v7 = sub_100012A40(v6, (uint64_t)qword_10012CD38);
  *(_QWORD *)(v0 + 240) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);

  sub_10006B29C();
  v8 = sub_100005900();
  v9 = static os_log_type_t.info.getter();
  v10 = os_log_type_enabled(v8, v9);
  v12 = *(_QWORD *)(v0 + 224);
  v11 = *(_QWORD *)(v0 + 232);
  v13 = *(_QWORD *)(v0 + 216);
  if (v10)
  {
    v14 = (uint8_t *)sub_100011780(12);
    v15 = sub_100011780(32);
    v22 = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = sub_10001AA40((_QWORD *)(v0 + 16));
    *(_QWORD *)(v0 + 144) = sub_10000FBEC(v16, v17, &v22);
    sub_10001F93C(v0 + 144, v0 + 152);
    sub_1000059A8();
    sub_10000E87C((_QWORD *)(v0 + 16));
    sub_1000100C0((void *)&_mh_execute_header, v8, v9, "Calling transaction block for %s", v14);
    sub_100013320(v15);
    sub_1000133FC(v15);
    sub_1000133FC((uint64_t)v14);

  }
  else
  {
    sub_10000E87C((_QWORD *)(v0 + 16));

  }
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  v18 = *(int **)(v0 + 176);
  v21 = (uint64_t (*)(void))((char *)v18 + *v18);
  v19 = (_QWORD *)swift_task_alloc(v18[1]);
  *(_QWORD *)(v0 + 248) = v19;
  *v19 = v0;
  v19[1] = sub_100066CC0;
  return v21();
}

uint64_t sub_100066CC0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_10001DCCC();
  v3 = *(_QWORD *)(v2 + 248);
  *v4 = *v1;
  *(_QWORD *)(v2 + 256) = v0;
  swift_task_dealloc(v3);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_100066D10()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = sub_1000132C4(*(_QWORD *)(v0 + 168), v0 + 56);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)sub_100011780(12);
    v5 = sub_100011780(32);
    v12 = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = sub_1000186B0((_QWORD *)(v0 + 56));
    *(_QWORD *)(v0 + 136) = sub_10000FBEC(v6, v7, &v12);
    sub_10001F93C(v0 + 136, v0 + 144);
    sub_1000059A8();
    sub_10000E87C((_QWORD *)(v0 + 56));
    sub_1000100C0((void *)&_mh_execute_header, v2, v3, "Transaction succeeded for %s, resetting attemptedIndexCount", v4);
    sub_100013320(v5);
    sub_1000133FC(v5);
    sub_1000133FC((uint64_t)v4);
  }
  else
  {
    sub_10000E87C((_QWORD *)(v0 + 56));
  }

  v8 = *(_QWORD *)(v0 + 256);
  v10 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 208);
  sub_10006AD54(*(_QWORD *)(v0 + 152), v9, type metadata accessor for LNBundleRecord);
  *(_QWORD *)(v9 + *(int *)(v10 + 28)) = 0;
  sub_1000C39E0();
  sub_10001DBC8(*(_QWORD *)(v0 + 208), type metadata accessor for LNBundleRecord);
  if (v8)
  {
    sub_1000158B0();
    sub_100005878();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    sub_1000158B0();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_100066EF8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  sub_10001A84C();
  v1 = sub_10001A84C();
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 256);
    v5 = (uint8_t *)sub_100011780(12);
    v6 = sub_100011780(32);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getErrorValue(v4, v0 + 128, v0 + 96);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    *(_QWORD *)(v0 + 120) = sub_10000FBEC(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128);
    sub_1000059A8();
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    sub_1000100C0((void *)&_mh_execute_header, v2, v3, "Transaction failed due to error: %s", v5);
    sub_100013320(v6);
    sub_1000133FC(v6);
    sub_1000133FC((uint64_t)v5);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 256);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }

  v10 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  sub_100005878();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

uint64_t sub_100067084(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 24) = a2;
  *(_BYTE *)(v4 + 64) = a1;
  return swift_task_switch(sub_1000670A4, 0, 0);
}

uint64_t sub_1000670A4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  int *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  Swift::String v22;

  v1 = *(unsigned __int8 *)(v0 + 64);
  _StringGuts.grow(_:)(20);
  sub_10006B224(v2, v3, v4, v5, v6, v7, v8, v9, v19, v20, 0, 0xE000000000000000);
  v10 = 0x54414944454D4D49;
  if (v1 != 1)
    v10 = 0x564953554C435845;
  if (v1)
    v11 = v10;
  else
    v11 = 0x4445525245464544;
  if (v1)
    v12 = 0xE900000000000045;
  else
    v12 = 0xE800000000000000;
  v13 = *(_QWORD *)(v0 + 40);
  v14 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  sub_1000117B4();
  v15._countAndFlagsBits = 0x4341534E41525420;
  v15._object = (void *)0xEC0000004E4F4954;
  String.append(_:)(v15);
  v22._countAndFlagsBits = 0x204E49474542;
  v22._object = (void *)0xE600000000000000;
  sub_10006B2CC(v22);
  if (v13)
  {
    sub_1000117B4();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v17 = *(int **)(v0 + 24);
    sub_1000117B4();
    v21 = (uint64_t (*)(uint64_t))((char *)v17 + *v17);
    v18 = (_QWORD *)swift_task_alloc(v17[1]);
    *(_QWORD *)(v0 + 48) = v18;
    *v18 = v0;
    v18[1] = sub_10006720C;
    return v21(v0 + 16);
  }
}

uint64_t sub_10006720C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_10001DCCC();
  v3 = *(_QWORD *)(v2 + 48);
  *v4 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc(v3);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_10006725C()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v5;

  sub_100011870();
  v1._countAndFlagsBits = 0xD000000000000012;
  Connection.execute(_:)(v1);
  v3 = *(_QWORD *)(v0 + 16);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  swift_errorRelease(v3);
  sub_100011870();
  sub_10006B2CC(v5);
  swift_errorRelease(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v5;

  v2 = *(_QWORD *)(v1 + 56);
  sub_100011870();
  v5._countAndFlagsBits = 0xD000000000000014;
  sub_10006B2CC(v5);
  if (v0)
    swift_errorRelease(v2);
  else
    swift_willThrow(v3);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100067398(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16, uint64_t a17, int64_t a18, int64_t a19, int64_t a20)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v33;
  uint64_t v36;

  sub_10000A850(a1, (uint64_t)a2, a8, a12, a15);
  sub_10006750C(v33, a1, a2, a3, a4, a5, a7, a8, a6, a12, a9, a10, a11, v23, v24, a13, a14, a15, a16,
    a17,
    a18,
    a19,
    a20);
  if (v36)
  {
    v25 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v25, v26);
    v28 = v27;
    swift_errorRetain();
    sub_1000C939C(v36, v28);
    sub_1000186A8();
    swift_errorRelease();
  }
  sub_100007398();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10006750C(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, char a9, int64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,int64_t a21,int64_t a22,int64_t a23)
{
  uint64_t v23;
  int *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v59 = a8;
  v60 = a7;
  v61 = a6;
  v66 = a4;
  v28 = (int *)type metadata accessor for LNBundleRecord(0);
  __chkstk_darwin(v28);
  v30 = (uint64_t *)((char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = *(_QWORD *)&a1[OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection];
  swift_retain_n(v31, 8);
  v32 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  v33 = swift_allocObject(v32, 48, 7);
  *(_OWORD *)(v33 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v33 + 32) = a2;
  *(_QWORD *)(v33 + 40) = a3;
  swift_retain_n(v31, 6);
  swift_bridgeObjectRetain();
  sub_100067B64();
  if (v23)
  {
    swift_release_n(v31, 14);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_10006AD8C(v66, (uint64_t)v30 + v28[5]);
  *v30 = a2;
  v30[1] = (uint64_t)a3;
  v35 = (uint64_t *)((char *)v30 + v28[6]);
  v36 = v60;
  v37 = v61;
  *v35 = a5;
  v35[1] = v37;
  *(uint64_t *)((char *)v30 + v28[7]) = 0;
  *(uint64_t *)((char *)v30 + v28[8]) = v36;
  swift_bridgeObjectRetain();
  sub_10001EBF8(a5, v37);
  sub_1000C3CA0();
  v38 = a3;
  sub_10001DBC8((uint64_t)v30, type metadata accessor for LNBundleRecord);
  __chkstk_darwin(v39);
  *(&v58 - 4) = v31;
  *(&v58 - 3) = a2;
  v40 = v66;
  *(&v58 - 2) = (uint64_t)a3;
  *(&v58 - 1) = v40;
  sub_1000617FC(sub_10006ADD4, (uint64_t)(&v58 - 6), v59);
  v41 = a2;
  if (a9 != 2)
  {
    if ((unint64_t)a10 >> 62)
    {
      if (a10 < 0)
        v50 = a10;
      else
        v50 = a10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v51 = _CocoaArrayWrapper.endIndex.getter(v50);
      swift_bridgeObjectRelease();
      if (!v51)
        goto LABEL_11;
    }
    else if (!*(_QWORD *)((a10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_11;
    }
    *(_QWORD *)&v62 = a2;
    *((_QWORD *)&v62 + 1) = v38;
    v63 = a11;
    v64 = a12;
    v65 = a13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000C67F8(&v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100061904(a10, v31, a2, v38);
    v42 = *(_QWORD *)(a14 + 16);
    if (v42)
    {
      v43 = v38;
      v44 = *(_QWORD *)(type metadata accessor for LNAppShortcutParameterRecord(0) - 8);
      v45 = a14 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
      v46 = *(_QWORD *)(v44 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_100016F60();
        v45 += v46;
        --v42;
      }
      while (v42);
      swift_bridgeObjectRelease();
      v38 = v43;
    }
    swift_retain();
    sub_100061C88(a15, v31);
  }
LABEL_11:
  __chkstk_darwin(a16);
  *(&v58 - 4) = v31;
  *(&v58 - 3) = v41;
  *(&v58 - 2) = (uint64_t)v38;
  sub_100061E20(v47, (void (*)(id, uint64_t, uint64_t))sub_10006ADF0);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100062004(a17, v31, v41, v38);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10006238C(a18, a1, v31, v41, v38);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000624F4(a19, v31, v41, v38);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000616AC(a20, v31, v41, v38);
  if (!((unint64_t)a21 >> 62))
  {
    if (!*(_QWORD *)((a21 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_14;
    goto LABEL_13;
  }
  if (a21 < 0)
    v52 = a21;
  else
    v52 = a21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v53 = _CocoaArrayWrapper.endIndex.getter(v52);
  swift_bridgeObjectRelease();
  if (v53)
  {
LABEL_13:
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10006287C(a21, v31, v41, v38);
  }
LABEL_14:
  if ((unint64_t)a22 >> 62)
  {
    if (a22 < 0)
      v54 = a22;
    else
      v54 = a22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v55 = _CocoaArrayWrapper.endIndex.getter(v54);
    swift_bridgeObjectRelease();
    if (v55)
      goto LABEL_16;
  }
  else if (*(_QWORD *)((a22 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_16:
    swift_retain();
    swift_bridgeObjectRetain();
    v48 = v41;
    v49 = v38;
    sub_100062C00(a22, v31, v41, v38);
    goto LABEL_32;
  }
  v48 = v41;
  v49 = v38;
LABEL_32:
  if ((unint64_t)a23 >> 62)
  {
    if (a23 < 0)
      v56 = a23;
    else
      v56 = a23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v57 = _CocoaArrayWrapper.endIndex.getter(v56);
    swift_bridgeObjectRelease();
    if (!v57)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (*(_QWORD *)((a23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_34:
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100062F84(a23, v31, v48, v49);
  }
LABEL_35:
  swift_release_n(v31, 7);
  return swift_release_n(v31, 7);
}

uint64_t sub_100067B64()
{
  swift_retain();
  sub_1000C4054();
  return swift_release();
}

void sub_100067BB0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  _QWORD v16[2];

  v9 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v9);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LNActionRecord(0);
  __chkstk_darwin(v12);
  v14 = (_QWORD *)((char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *a1;
  sub_10006AD8C(a5, (uint64_t)v11);
  swift_bridgeObjectRetain();
  sub_10004D080(a3, a4, (uint64_t)v11, v15, v14);
  sub_10004F37C(v14);
  sub_10001DBC8((uint64_t)v14, type metadata accessor for LNActionRecord);
}

uint64_t sub_100067CD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = objc_msgSend(a1, "identifier", swift_bridgeObjectRetain().n128_f64[0]);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  *(_QWORD *)&v15 = a5;
  *((_QWORD *)&v15 + 1) = a6;
  v16 = v11;
  v17 = v13;
  v18 = a2;
  v19 = a3;
  swift_bridgeObjectRetain();
  sub_1000724F4(&v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_100067DA4(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  int v55;
  uint64_t v56;
  uint64_t v57;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a3;
  v15 = a5;
  sub_1000CA7DC(v14, a4);
  if (v5)
  {
    v57 = v5;
    swift_errorRetain(v5);
    v16 = sub_10001BE7C((uint64_t *)&unk_100129420);
    if ((swift_dynamicCast(v54, &v57, v16, &type metadata for Result, 0) & 1) != 0)
    {
      v49 = v10;
      v50 = a4;
      v51 = a5;
      swift_errorRelease(v5);
      v17 = v54[0];
      v18 = v54[1];
      v19 = v55;
      v20 = v56;
      if (v55 == 19)
      {
        v47 = v54[0];
        v48 = v56;
        v21 = qword_100127D80;
        v22 = a1;
        if (v21 != -1)
          swift_once(&qword_100127D80, sub_100063EF0);
        v23 = v49;
        v24 = sub_100012A40(v49, (uint64_t)qword_10012CD38);
        v25 = v11;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v24, v23);

        v26 = v48;
        swift_retain_n(v48, 2);
        v27 = v18;
        v28 = swift_bridgeObjectRetain_n(v18, 2);
        v29 = Logger.logObject.getter(v28);
        v30 = static os_log_type_t.debug.getter();
        v31 = v30;
        if (os_log_type_enabled(v29, v30))
        {
          v32 = swift_slowAlloc(22, -1);
          v45 = v29;
          v33 = v26;
          v34 = v32;
          v46 = swift_slowAlloc(64, -1);
          v53 = v46;
          *(_DWORD *)v34 = 136315394;
          v43 = v34 + 4;
          v52 = sub_10000FBEC(0xD00000000000002ELL, 0x80000001000F48D0, &v53);
          v44 = v31;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
          *(_WORD *)(v34 + 12) = 2080;
          v43 = v34 + 14;
          v35 = Result.description.getter(v47, v27, 19, v33);
          v47 = v25;
          v52 = sub_10000FBEC(v35, v36, &v53);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
          swift_release_n(v33, 2);
          swift_bridgeObjectRelease_n(v27, 2);
          swift_bridgeObjectRelease();
          v37 = v45;
          _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v44, "%s ignoring error: %s", (uint8_t *)v34, 0x16u);
          v38 = v46;
          swift_arrayDestroy(v46, 2);
          swift_slowDealloc(v38, -1, -1);
          swift_slowDealloc(v34, -1, -1);

          swift_release();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v23);
        }
        else
        {

          swift_release_n(v26, 3);
          swift_bridgeObjectRelease_n(v27, 3);
          (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v23);
        }
        swift_errorRelease(v57);
        swift_release();
        v15 = v51;
        goto LABEL_13;
      }
      v39 = sub_10004FC40();
      v40 = swift_allocError(&type metadata for Result, v39, 0, 0);
      *(_QWORD *)v41 = v17;
      *(_QWORD *)(v41 + 8) = v18;
      *(_DWORD *)(v41 + 16) = v19;
      *(_QWORD *)(v41 + 24) = v20;
      swift_willThrow(v40);
      v15 = v51;
    }
    swift_errorRelease(v57);
    swift_bridgeObjectRelease();
    swift_release();

    return;
  }
  swift_release();
LABEL_13:

  swift_bridgeObjectRelease();
}

uint64_t sub_10006818C(uint64_t a1)
{
  uint64_t v2;
  uint64_t inited;
  _QWORD v5[4];
  _BYTE v6[336];

  v2 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  inited = swift_initStackObject(v2, v6);
  *(_OWORD *)(inited + 16) = xmmword_1000F0B80;
  *(_QWORD *)(inited + 32) = 0x736E6F69746361;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(_QWORD *)(inited + 48) = 0xD000000000000012;
  *(_QWORD *)(inited + 56) = 0x80000001000F3D00;
  *(_QWORD *)(inited + 64) = 0x6E61747369737361;
  *(_QWORD *)(inited + 72) = 0xEF746E65746E4974;
  *(_QWORD *)(inited + 80) = 0xD00000000000001ELL;
  *(_QWORD *)(inited + 88) = 0x80000001000F47F0;
  *(_QWORD *)(inited + 96) = 0x73656C646E7562;
  *(_QWORD *)(inited + 104) = 0xE700000000000000;
  *(_QWORD *)(inited + 112) = 0x6769666E6F63;
  *(_QWORD *)(inited + 120) = 0xE600000000000000;
  *(_QWORD *)(inited + 128) = 0xD00000000000001ELL;
  *(_QWORD *)(inited + 136) = 0x80000001000F4810;
  *(_QWORD *)(inited + 144) = 0x7365697469746E65;
  *(_QWORD *)(inited + 152) = 0xE800000000000000;
  strcpy((char *)(inited + 160), "examplePhrases");
  *(_BYTE *)(inited + 175) = -18;
  *(_QWORD *)(inited + 176) = 0x73656972657571;
  *(_QWORD *)(inited + 184) = 0xE700000000000000;
  *(_QWORD *)(inited + 192) = 0x736D756E65;
  *(_QWORD *)(inited + 200) = 0xE500000000000000;
  *(_QWORD *)(inited + 208) = 0xD000000000000019;
  *(_QWORD *)(inited + 216) = 0x80000001000F4830;
  strcpy((char *)(inited + 224), "appShortcuts");
  *(_BYTE *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  *(_QWORD *)(inited + 240) = 0xD000000000000015;
  *(_QWORD *)(inited + 248) = 0x80000001000F43B0;
  *(_QWORD *)(inited + 256) = 0xD000000000000010;
  *(_QWORD *)(inited + 264) = 0x80000001000F3C50;
  *(_QWORD *)(inited + 272) = 0xD000000000000010;
  *(_QWORD *)(inited + 280) = 0x80000001000F4850;
  *(_QWORD *)(inited + 288) = 0x746E6176656C6572;
  *(_QWORD *)(inited + 296) = 0xEF73746E65746E49;
  *(_QWORD *)(inited + 304) = 0xD000000000000010;
  *(_QWORD *)(inited + 312) = 0x80000001000F4870;
  *(_QWORD *)(inited + 320) = 0xD000000000000017;
  *(_QWORD *)(inited + 328) = 0x80000001000F44F0;
  v5[2] = inited;
  v5[3] = a1;
  Connection.transaction(_:block:)(0, (void (*)(uint64_t))sub_10006A9C8, (uint64_t)v5);
  swift_setDeallocating(inited);
  return sub_10006A9A0();
}

void sub_1000683F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE __dst[168];
  _QWORD __src[22];
  uint64_t v15;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v15 = v4;
    v5 = (uint64_t *)(v4 + 40);
    while (1)
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain();
      Table.init(_:database:)(__src, v6, v7, 0, 0);
      memcpy(__dst, __src, sizeof(__dst));
      v8 = SchemaType.drop(ifExists:)(1);
      sub_100037A7C(__src);
      Connection.run(_:_:)(v8._countAndFlagsBits, (uint64_t)v8._object, (uint64_t)_swiftEmptyArrayStorage);
      if (v2)
        break;
      v5 += 2;
      swift_bridgeObjectRelease(v8._object);
      swift_release();
      if (!--v3)
      {
        swift_bridgeObjectRelease(v15);
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease(v8._object);
    swift_bridgeObjectRelease(v15);
  }
  else
  {
LABEL_6:
    if (qword_100127F78 != -1)
      swift_once(&qword_100127F78, sub_1000C6FDC);
    Connection.execute(_:)((Swift::String)xmmword_10012D5B0);
    if (v9)
    {
      v10 = sub_10006A9E0();
      v11 = swift_allocError(&type metadata for MetadataStore.CreationError, v10, 0, 0);
      *(_QWORD *)v12 = v9;
      *(_BYTE *)(v12 + 8) = 1;
      swift_willThrow(v11);
    }
  }
}

void sub_1000685A4(uint64_t a1)
{
  sub_1000650D8(*(_QWORD *)(a1 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection));
}

uint64_t sub_1000685C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  v6 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 40) = a2;
  swift_bridgeObjectRetain();
  v7 = sub_10001F88C();
  sub_100068694(v7);
  if (!v2)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = sub_100018A38();
  sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  sub_1000176B0(v8, v9);
  sub_100017704();
  sub_10001B2EC();
  sub_100013E4C();
  return sub_100005A04();
}

uint64_t sub_100068694(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  v5[3] = a1;
  result = Connection.transaction(_:block:)(0, (void (*)(uint64_t))sub_10006AA1C, (uint64_t)v5);
  if (v1)
  {
    v3 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v3, v4);
    sub_100017704();
    sub_10001B2EC();
    sub_100013E4C();
    return sub_100005A04();
  }
  return result;
}

void sub_100068734()
{
  _swift_stdlib_reportUnimplementedInitializer("LinkDaemon.MetadataStore", 24, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1000687BC()
{
  return type metadata accessor for MetadataStore(0);
}

uint64_t type metadata accessor for MetadataStore(uint64_t a1)
{
  uint64_t result;

  result = qword_100129ED0;
  if (!qword_100129ED0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetadataStore);
  return result;
}

void sub_1000687FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100050454(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = "\b";
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_100068880()
{
  sub_100069AB0((SEL *)&selRef_actionsWithError_, (uint64_t *)&unk_10012A700);
  sub_100017714();
}

void sub_1000688E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;

  sub_10001F8F0();
  sub_10006B23C();
  sub_10006B2F4();
  v13 = sub_10000DD4C(v6, "actionsForBundleIdentifier:andActionIdentifier:error:", v7, v8, v9, v10, v11, v12, v16);

  if (v13)
  {
    sub_1000100D8(v14, &qword_10012A710, LNActionMetadata_ptr);
    sub_10000FE68();
    sub_10001F084();

  }
  else
  {
    v15 = v17;
    sub_10001B4A4();
    sub_10001A0A4();
    sub_1000186A8();
  }
  sub_100016324();
  sub_10001E000();
}

void sub_100068C1C(NSString a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;

  if (a2)
  {
    a1 = String._bridgeToObjectiveC()();
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  v9 = sub_100013E54((uint64_t)a1, "actionsAndSystemProtocolDefaultsForBundleIdentifier:error:", a3, a4, a5, a6, a7, a8, 0);

  if (v9)
  {
    v11 = sub_1000100D8(v10, &qword_10012B200, LNBundleActionsMetadata_ptr);
    sub_10006B234(v11, (uint64_t)&type metadata for String, v11, (uint64_t)&protocol witness table for String);
    sub_10001F084();

  }
  else
  {
    v12 = v13;
    sub_10001B4A4();
    sub_10001A0A4();
    sub_1000186A8();
  }
  sub_100016324();
  sub_100017CF8();
}

void sub_100068E20(uint64_t a1, uint64_t a2)
{
  sub_100069BF8(a1, a2, (SEL *)&selRef_actionIdentifiersForBundleIdentifier_error_);
  sub_100017714();
}

void sub_100068F58(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4)
{
  char *v4;
  void *v7;
  NSDictionary v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;

  v7 = *(void **)&v4[OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider];
  sub_1000100D8(a1, (unint64_t *)&unk_100129F80, LNValueType_ptr);
  v8.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a4)
    a4 = sub_1000121D4();
  v12 = 0;
  v9 = objc_msgSend(v7, "actionsConformingToSystemProtocol:withParametersOfTypes:bundleIdentifier:error:", a1, v8.super.isa, a4, &v12);
  sub_10006B22C();

  if (v4)
  {
    v10 = sub_10001BE7C((uint64_t *)&unk_10012A700);
    sub_10006B234(v10, (uint64_t)&type metadata for String, v10, (uint64_t)&protocol witness table for String);
    sub_10001F084();

  }
  else
  {
    v11 = v12;
    sub_10001B4A4();
    sub_10001A0A4();
    sub_1000186A8();
  }
  sub_100016324();
  sub_100018780();
}

void sub_1000691E8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;

  sub_1000100D8((uint64_t)a1, (unint64_t *)&unk_100129F70, LNFullyQualifiedActionIdentifier_ptr);
  Array._bridgeToObjectiveC()();
  sub_10006B2F4();
  v9 = sub_100013E54(v2, "actionsWithFullyQualifiedIdentifiers:error:", v3, v4, v5, v6, v7, v8, v12);

  if (v9)
  {
    v10 = sub_10001BE7C((uint64_t *)&unk_10012A700);
    sub_10006B234(v10, (uint64_t)&type metadata for String, v10, (uint64_t)&protocol witness table for String);
    sub_10001F084();

  }
  else
  {
    v11 = v13;
    sub_10001B4A4();
    sub_10001A0A4();
    sub_1000186A8();
  }
  sub_100016324();
  sub_100017CF8();
}

void sub_1000693D4()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  v7 = 0;
  v2 = objc_msgSend(v1, "bundlesWithError:", &v7);
  v3 = v7;
  if (v2)
  {
    v4 = v2;
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v5 = v3;

  }
  else
  {
    v6 = v7;
    sub_10001B4A4();
    sub_10001A0A4();
    sub_1000186A8();
  }
  sub_100017CF8();
}

void sub_100069530()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  v7 = 0;
  v2 = objc_msgSend(v1, "bundleRegistrationsWithError:", &v7);
  v3 = v7;
  if (v2)
  {
    v4 = v2;
    sub_1000100D8((uint64_t)v2, (unint64_t *)&unk_100129F60, LNRegisteredBundleMetadata_ptr);
    sub_10006B318();
    v5 = v3;

  }
  else
  {
    v6 = v7;
    sub_100010028();
    sub_10006B2D4();
    sub_1000186A8();
  }
  sub_100016324();
  sub_100017CF8();
}

void sub_1000696A8()
{
  sub_100069AB0((SEL *)&selRef_queriesWithError_, (uint64_t *)&unk_100129F30);
  sub_100017714();
}

id sub_100069710(void *a1, uint64_t a2, uint64_t a3, SEL *a4, uint64_t *a5)
{
  id v7;
  Class isa;

  v7 = a1;
  sub_100069AB0(a4, a5);

  sub_10001BE7C(a5);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_1000059A8();
  return sub_1000133A0(isa);
}

void sub_1000697C0(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4)
{
  uint64_t v4;
  void *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v6 = *(void **)(v4 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  v7 = String._bridgeToObjectiveC()();
  if (a4)
    a4 = String._bridgeToObjectiveC()();
  v13 = 0;
  v8 = objc_msgSend(v6, "queriesForBundleIdentifier:ofType:error:", v7, a4, &v13);

  v10 = v13;
  if (v8)
  {
    sub_1000100D8(v9, (unint64_t *)&qword_10012A6F0, LNQueryMetadata_ptr);
    sub_10006B318();
    v11 = v10;

  }
  else
  {
    v12 = v13;
    sub_100010028();
    sub_10006B2D4();
    sub_1000186A8();
  }
  sub_100016324();
  sub_10001E000();
}

void sub_1000699D8()
{
  sub_100069AB0((SEL *)&selRef_enumsWithError_, &qword_10012B110);
  sub_100017714();
}

void sub_100069A5C()
{
  sub_100069AB0((SEL *)&selRef_entitiesWithError_, &qword_10012B180);
  sub_100017714();
}

void sub_100069AB0(SEL *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;

  v4 = *(void **)(v2 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  v11 = 0;
  v5 = objc_msgSend(v4, *a1, &v11);
  v6 = v11;
  if (v5)
  {
    v7 = v5;
    v8 = sub_10001BE7C(a2);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String, v8, &protocol witness table for String);
    v9 = v6;

  }
  else
  {
    v10 = v11;
    sub_100010028();
    sub_10006B2D4();
    sub_1000186A8();
  }
  sub_10001F88C();
  sub_100017CF8();
}

void sub_100069BAC(uint64_t a1, uint64_t a2)
{
  sub_100069BF8(a1, a2, (SEL *)&selRef_entityIdentifiersForBundleIdentifier_error_);
  sub_100017714();
}

void sub_100069BF8(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v3;
  void *v5;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v5 = *(void **)(v3 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  if (a2)
    v6 = String._bridgeToObjectiveC()();
  else
    v6 = 0;
  v11 = 0;
  v7 = objc_msgSend(v5, *a3, v6, &v11);
  sub_10006B22C();
  v8 = v11;
  if (v5)
  {
    sub_10000FE68();
    v9 = v8;

  }
  else
  {
    v10 = v11;
    _convertNSErrorToError(_:)(v8);
    sub_10001A0A4();
    sub_1000186A8();
  }
  sub_10001F88C();
  sub_100017CF8();
}

id sub_100069CD8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Class isa;

  if (a3)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = a1;
  sub_100069BF8(v7, v9, a5);

  swift_bridgeObjectRelease(v9);
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1000059A8();
  return sub_1000133A0(isa);
}

id sub_100069DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v5;
  NSString v6;
  id v7;

  v5 = *(void **)(v3 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_provider);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "metadataVersionForBundleIdentifier:error:", v6, a3);

  return v7;
}

uint64_t sub_100069E60()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v13;
  void *v14;

  sub_10001F8F0();
  sub_10006B2F4();
  v9 = sub_100013E54(v2, "appShortcutsProviderMangledTypeNameForBundleIdentifier:error:", v3, v4, v5, v6, v7, v8, v13);

  if (v9)
  {
    v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v10 = v14;

  }
  else
  {
    v11 = v14;
    sub_10006B2E8();
    sub_10001A0A4();
    sub_1000186A8();
  }
  return v0;
}

void sub_10006A000(uint64_t a1, uint64_t a2)
{
  sub_100063364(a1, a2, (SEL *)&selRef_examplePhrasesForBundleIdentifier_error_, &qword_10012B0C0, LNExamplePhraseDescription_ptr);
  sub_100017714();
}

Class sub_10006A078(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, unint64_t *a6, _QWORD *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Class isa;

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v13 = v12;
  v14 = a1;
  sub_100063364(v11, v13, a5, a6, a7);
  swift_bridgeObjectRelease(v13);

  sub_10000795C(0, a6, a7);
  sub_10006B324();
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1000059A8();
  return isa;
}

uint64_t sub_10006A160()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_10006A1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  sub_10006A274(a1, a2, &v6);
  if (!v2)
    return v6;
  v3 = sub_100018A38();
  sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
  sub_1000176B0(v3, v4);
  sub_100017704();
  sub_10001B2EC();
  sub_100013E4C();
  return sub_100005A04();
}

uint64_t sub_10006A274@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  id v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  char v19;
  uint64_t v20;
  _BOOL8 v21;
  Swift::Int v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[3];
  uint64_t v35;
  _QWORD *v36;

  swift_retain();
  v7 = sub_1000C7DA0(a1, a2);
  result = swift_release();
  if (!v3)
  {
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      v31 = a3;
      swift_bridgeObjectRetain();
      v10 = &_swiftEmptyDictionarySingleton;
      v11 = 32;
      v32 = v7;
      while (1)
      {
        v33 = v9;
        v13 = *(_OWORD *)(v7 + v11 + 16);
        v12 = *(_OWORD *)(v7 + v11 + 32);
        v14 = *(_OWORD *)(v7 + v11);
        v35 = *(_QWORD *)(v7 + v11 + 48);
        v34[1] = v13;
        v34[2] = v12;
        v34[0] = v14;
        v15 = v13;
        sub_10006AE58((uint64_t)v34);
        swift_bridgeObjectRetain();
        v16 = sub_100058C68();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
        v36 = v10;
        v18 = sub_100016064(v15);
        v20 = v10[2];
        v21 = (v19 & 1) == 0;
        v22 = v20 + v21;
        if (__OFADD__(v20, v21))
          break;
        v23 = v18;
        v24 = v19;
        sub_10001BE7C((uint64_t *)&unk_100129FF0);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22))
        {
          v25 = sub_100016064(v15);
          if ((v24 & 1) != (v26 & 1))
            goto LABEL_19;
          v23 = v25;
        }
        v10 = v36;
        if ((v24 & 1) != 0)
        {
          v27 = v36[7];

          *(_QWORD *)(v27 + 8 * v23) = v16;
        }
        else
        {
          v36[(v23 >> 6) + 8] |= 1 << v23;
          *(_OWORD *)(v10[6] + 16 * v23) = v15;
          *(_QWORD *)(v10[7] + 8 * v23) = v16;
          v28 = v10[2];
          v29 = __OFADD__(v28, 1);
          v30 = v28 + 1;
          if (v29)
            goto LABEL_18;
          v10[2] = v30;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease(*((_QWORD *)&v15 + 1));
        swift_bridgeObjectRelease(0x8000000000000000);
        sub_10006AE0C(v34);
        v11 += 56;
        v7 = v32;
        --v9;
        if (v33 == 1)
        {
          result = swift_bridgeObjectRelease_n(v32, 2);
          a3 = v31;
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      result = swift_bridgeObjectRelease(v7);
      v10 = &_swiftEmptyDictionarySingleton;
LABEL_15:
      *a3 = v10;
    }
  }
  return result;
}

void sub_10006A4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10006A520(a1, a2, a3, a4, a5);
  if (v5)
  {
    v6 = sub_100018A38();
    sub_10006AF30((unint64_t *)&qword_100129EF0, (void (*)(uint64_t))type metadata accessor for Schema.RuntimeError);
    sub_1000176B0(v6, v7);
    sub_100017704();
    sub_10001B2EC();
    sub_100013E4C();
    sub_100005A04();
  }
  sub_10001F5C0();
}

void sub_10006A520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v12[7];

  v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100058AD0(a5, a1, a2, a3, a4, v12);
  if (!v6)
  {
    swift_retain();
    sub_1000C8004((uint64_t)v12);
    swift_release();
    sub_10006AE0C(v12);
  }
}

_QWORD *sub_10006A5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[21];
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v4 = v3;
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  sub_1000166E8();
  sub_10008F274((uint64_t)v20);
  if (a2)
  {
    v8 = v21;
    v15 = v22;
    sub_10000E858(v20, v21);
    if (qword_100127E38 != -1)
      swift_once(&qword_100127E38, sub_10008F038);
    v23 = v3;
    sub_1000189C4(v19, &unk_10012CF90);
    sub_1000379AC(v19);
    if (qword_100127E40 != -1)
      swift_once(&qword_100127E40, sub_10008F090);
    v10 = qword_10012D038;
    v9 = unk_10012D040;
    v11 = qword_10012D048;
    sub_1000189C4(&v16, v19);
    QueryType.namespace<A>(_:)(v10, v9, v11, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
    sub_100037A7C(v19);
    *(_QWORD *)&v16 = a1;
    *((_QWORD *)&v16 + 1) = a2;
    == infix<A>(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v8;
    v18 = v15;
    sub_10001795C(&v16);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000E87C(v20);
    sub_100019A48(&v16, (uint64_t)v20);
    v4 = v23;
  }
  Connection.prepare(_:)(v20);
  if (v4)
  {
    sub_10001F4D4(v20);
  }
  else
  {
    sub_1000163DC();
    v12 = sub_100018918();
    v4 = sub_10006130C(v12, v13);
    sub_10001105C();
    sub_10000E87C(v20);
    swift_release_n(v7, 2);
  }
  return v4;
}

uint64_t sub_10006A82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  __int128 v16[5];
  unint64_t v17;

  sub_10000C0C4(OBJC_IVAR____TtC10LinkDaemon13MetadataStore_connection);
  v7 = sub_1000166F0();
  sub_10008E7B0(v7, v8);
  if (v3)
    return sub_1000058DC();
  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_1000058B4();
  for (; v10; v10 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v17 = a1 & 0xC000000000000001;
    v11 = 4;
    while (1)
    {
      v12 = v17 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a1) : *(id *)(a1 + 8 * v11);
      v13 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      v14 = v12;
      swift_bridgeObjectRetain();
      sub_10008E968(v14, a2, a3, v16);
      sub_10008EB44(v16);
      sub_10006AEB8(v16);

      ++v11;
      if (v13 == v10)
        goto LABEL_11;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    sub_1000058B4();
  }
LABEL_11:
  sub_1000058DC();
  return sub_100007398();
}

uint64_t sub_10006A9A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_arrayDestroy(v0 + 32, *(_QWORD *)(v0 + 16));
  v1 = sub_10001F96C();
  return swift_deallocClassInstance(v1, v2, v3);
}

void sub_10006A9C8()
{
  uint64_t v0;

  sub_1000683F8(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10006A9E0()
{
  unint64_t result;

  result = qword_100129F10;
  if (!qword_100129F10)
  {
    result = swift_getWitnessTable(&unk_1000F0C40, &type metadata for MetadataStore.CreationError);
    atomic_store(result, (unint64_t *)&qword_100129F10);
  }
  return result;
}

uint64_t sub_10006AA1C()
{
  return sub_100067B64();
}

uint64_t sub_10006AA40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v9 = (_QWORD *)swift_task_alloc(dword_100129FCC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10006AAC0;
  return sub_100065D14(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10006AAC0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  sub_10001DCCC();
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(v1 + 16));
  return sub_1000107A0(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_10006AAF8(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  _QWORD v27[5];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[3] = type metadata accessor for LSLinkBundleRecord(0);
  v27[4] = &off_10011DFB0;
  v8 = sub_10001795C(v27);
  sub_10006AD54(a2, (uint64_t)v8, type metadata accessor for LSLinkBundleRecord);
  v9 = qword_100127D80;
  v10 = a1;
  if (v9 != -1)
    swift_once(&qword_100127D80, sub_100063EF0);
  v11 = sub_100012A40(v4, (uint64_t)qword_10012CD38);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v11, v4);

  v12 = sub_1000132C4((uint64_t)v27, (uint64_t)v26);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v23 = v5;
    v17 = v16;
    v25 = v16;
    *(_DWORD *)v15 = 136315138;
    v18 = sub_10000E858(v26, v26[3]);
    v19 = *v18;
    v20 = v18[1];
    swift_bridgeObjectRetain();
    v24 = sub_10000FBEC(v19, v20, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_bridgeObjectRelease(v20);
    sub_10000E87C(v26);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "✓ Completed indexing transaction for %s", v15, 0xCu);
    swift_arrayDestroy(v17, 1);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v4);
  }
  else
  {
    sub_10000E87C(v26);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return sub_10000E87C(v27);
}

void sub_10006AD54(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  sub_1000137A0(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_10000BFBC();
}

uint64_t sub_10006AD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_100128740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10006ADD4(void **a1)
{
  uint64_t *v1;

  sub_100067BB0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10006ADF0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_100067CD0(a1, a2, a3, v3[2], v3[3], v3[4]);
}

_QWORD *sub_10006AE0C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[1];
  v3 = a1[5];
  v4 = a1[6];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  sub_100013158(v3, v4);
  return a1;
}

uint64_t sub_10006AE58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006AEA4(v2, v3);
  return a1;
}

uint64_t sub_10006AEA4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10001EBF8(result, a2);
  return result;
}

_QWORD *sub_10006AEB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  sub_10001EA88(v3, v4);
  swift_bridgeObjectRelease(v5);
  sub_10001EA88(v6, v7);
  return a1;
}

void sub_10006AF30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  if (!*a1)
  {
    a2(255);
    v3 = sub_10006B324();
    atomic_store(swift_getWitnessTable(v3, v4), a1);
  }
  sub_10000BFBC();
}

uint64_t sub_10006AF68(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_10006AF7C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10006AFA0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_100064DB8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10006AFAC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MetadataStore.CreationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10006B004(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_10006B004(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return swift_errorRetain(result);
  return result;
}

uint64_t destroy for MetadataStore.CreationError(uint64_t a1)
{
  return sub_10006B028(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_10006B028(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return swift_errorRelease(result);
  return result;
}

uint64_t assignWithCopy for MetadataStore.CreationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10006B004(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_10006B028(v5, v6);
  return a1;
}

uint64_t initializeWithTake for MetadataStore.CreationError(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for MetadataStore.CreationError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_10006B028(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetadataStore.CreationError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetadataStore.CreationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_10006B160(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10006B168(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MetadataStore.CreationError()
{
  return &type metadata for MetadataStore.CreationError;
}

uint64_t sub_10006B188(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  return sub_10000FBEC(a1, a2, (uint64_t *)va);
}

void sub_10006B194()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10006B1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_100012A40(a1, a2);
  return Logger.logObject.getter(v2);
}

uint64_t sub_10006B1BC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_10006B1D8(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return String.init<A>(describing:)(va, a1);
}

uint64_t sub_10006B1E4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 312));
}

uint64_t sub_10006B1F4()
{
  uint64_t v0;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 - 112, v0 - 108);
}

BOOL sub_10006B214(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10006B224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_bridgeObjectRelease(a12);
}

void sub_10006B22C()
{
  void *v0;

}

uint64_t sub_10006B234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, a2, a3, a4);
}

NSString sub_10006B23C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10006B25C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v3);
}

uint64_t sub_10006B268(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  return v1 - 112;
}

char *sub_10006B27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  return &a51;
}

void sub_10006B288()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 1024;
}

uint64_t sub_10006B29C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000132C4(v1, v0);
}

uint64_t sub_10006B2A8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10006B2B4()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10006B2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return dispatch thunk of CustomStringConvertible.description.getter(v2, a2);
}

uint64_t sub_10006B2C4()
{
  return Logger.logObject.getter();
}

void sub_10006B2CC(Swift::String a1)
{
  Connection.execute(_:)(a1);
}

void sub_10006B2D4()
{
  void *v0;

}

void sub_10006B2DC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_100013120((uint64_t)va, v4, a3);
}

uint64_t sub_10006B2E8()
{
  uint64_t v0;

  return _convertNSErrorToError(_:)(v0);
}

void sub_10006B300()
{
  sub_1000C39E0();
}

uint64_t sub_10006B318()
{
  uint64_t v0;

  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_10006B324()
{
  uint64_t v0;

  return v0;
}

void *sub_10006B330()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0x6E61747369737361, 0xEF746E65746E4974, 0, 0);
  return memcpy(&unk_10012CD60, __src, 0xA8uLL);
}

uint64_t sub_10006B38C(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012CE08, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_10006B3B0(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012CE20, 0x617461646174656DLL, 0xE800000000000000);
}

ValueMetadata *type metadata accessor for LNAssistantIntentRecord()
{
  return &type metadata for LNAssistantIntentRecord;
}

char *sub_10006B3E0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;

  v4 = v3;
  v5 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      v50 = _swiftEmptyArrayStorage;
      result = sub_10001FAD0(0, v6 & ~(v6 >> 63), 0);
      if (v6 < 0)
        break;
      v8 = 0;
      v9 = v50;
      v34 = v5;
      v35 = v5 & 0xC000000000000001;
      v33 = v6;
      while (v6 != v8)
      {
        if (v35)
          v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
        else
          v10 = *(id *)(v5 + 8 * v8 + 32);
        v11 = v10;
        v38 = v10;
        sub_10000D194(&v38, a2, a3, &v39);
        if (v4)
        {
          swift_bridgeObjectRelease(a3);
          swift_release();

          return (char *)v9;
        }

        v13 = v39;
        v12 = v40;
        v14 = v41;
        v15 = v42;
        v17 = v43;
        v16 = v44;
        v18 = v45;
        v19 = v46;
        v20 = v47;
        v22 = v9[2];
        v21 = v9[3];
        v23 = v48;
        v24 = v49;
        v50 = v9;
        if (v22 >= v21 >> 1)
        {
          v32 = v42;
          v30 = v45;
          v31 = v40;
          v28 = v47;
          v29 = v46;
          v27 = v48;
          sub_10001FAD0((char *)(v21 > 1), v22 + 1, 1);
          v23 = v27;
          v20 = v28;
          v19 = v29;
          v18 = v30;
          v12 = v31;
          v15 = v32;
          v9 = v50;
        }
        ++v8;
        v9[2] = v22 + 1;
        v25 = &v9[13 * v22];
        v25[4] = v13;
        v25[5] = v12;
        v25[6] = v14;
        *(_OWORD *)(v25 + 7) = v15;
        v25[9] = v17;
        v25[10] = v16;
        v25[11] = v18;
        v25[12] = v19;
        v25[13] = v20;
        *((_OWORD *)v25 + 7) = v23;
        v25[16] = v24;
        v6 = v33;
        v5 = v34;
        v4 = 0;
        if (v33 == v8)
        {
          swift_bridgeObjectRelease(a3);
          return (char *)v9;
        }
      }
      __break(1u);
LABEL_16:
      if (v5 < 0)
        v26 = v5;
      else
        v26 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v26);
      swift_bridgeObjectRelease(v5);
      if (!v6)
        goto LABEL_20;
    }
    __break(1u);
  }
  else
  {
LABEL_20:
    swift_bridgeObjectRelease(a3);
    return (char *)_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10006B5F8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = (void **)(a1 + 48);
    do
    {
      v5 = *v4;
      v4 += 3;
      v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      v7 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
      specialized ContiguousArray._endMutation()(v8);
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_10006B6A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    sub_10001573C();
    v3 = sub_10004BC34(v2);
    if ((v3 & 0x8000000000000000) == 0)
    {
      v5 = v3;
      if (v3 < 1 << *(_BYTE *)(v2 + 32))
      {
        v6 = v4;
        v7 = v2 + 64;
        v16 = v2 + 64;
        while ((*(_QWORD *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(v2 + 36))
            goto LABEL_18;
          v8 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v5);
          v9 = v8[1];
          v17 = v1;
          v18 = *v8;
          v10 = v2;
          v12 = _swiftEmptyArrayStorage[2];
          v11 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain();
          if (v12 >= v11 >> 1)
            sub_10001573C();
          _swiftEmptyArrayStorage[2] = v12 + 1;
          v13 = &_swiftEmptyArrayStorage[2 * v12];
          v13[4] = v18;
          v13[5] = v9;
          v14 = -1 << *(_BYTE *)(v10 + 32);
          if ((uint64_t)v5 >= -v14)
            goto LABEL_19;
          v7 = v16;
          if ((*(_QWORD *)(v16 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
            goto LABEL_20;
          v2 = v10;
          if (v6 != *(_DWORD *)(v10 + 36))
            goto LABEL_21;
          v15 = _HashTable.occupiedBucket(after:)(v5, v16, ~v14);
          v1 = v17 - 1;
          if (v17 == 1)
            return;
          v5 = v15;
          if ((v15 & 0x8000000000000000) == 0)
          {
            v6 = *(_DWORD *)(v2 + 36);
            if (v15 < 1 << *(_BYTE *)(v2 + 32))
              continue;
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

_QWORD *sub_10006B864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  id v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v19 = v6;
    v7 = (void **)(v6 + 48);
    v8 = _swiftEmptyArrayStorage;
    do
    {
      v9 = (uint64_t)*(v7 - 2);
      v10 = (uint64_t)*(v7 - 1);
      v11 = *v7;
      v12 = v9 == a2 && v10 == a3;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a2, a3, 0) & 1) != 0)
      {
        v13 = v11;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_10001FAEC();
          v8 = v16;
        }
        v14 = v8[2];
        if (v14 >= v8[3] >> 1)
        {
          sub_10001FAEC();
          v8 = v17;
        }
        v8[2] = v14 + 1;
        v15 = &v8[3 * v14];
        v15[4] = a2;
        v15[5] = a3;
        v15[6] = v13;
      }
      v7 += 3;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    swift_bridgeObjectRelease(a3);
    return _swiftEmptyArrayStorage;
  }
  return v8;
}

uint64_t sub_10006B9B8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    sub_10001161C(v17, v15, v16);
    result = swift_bridgeObjectRelease(v17[1]);
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v7 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    sub_10001BFF8();
    return v18;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_10006BB34(uint64_t a1)
{
  objc_class *v1;
  _QWORD *v3;
  objc_super v5;

  v3 = (_QWORD *)swift_allocObject(v1, 120, 15);
  swift_defaultActor_initialize();
  v3[14] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t sub_10006BB90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = type metadata accessor for Logger(0);
  sub_1000269D8(v0, qword_10012CE38);
  sub_100012A40(v0, (uint64_t)qword_10012CE38);
  v8 = type metadata accessor for ApplicationService();
  v1 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v3 = String.init<A>(describing:)(&v8, v1);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v5 = v2;
    v6 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v6, v7, v3, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10006BC34()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNDaemonApplicationMachServiceName);
  qword_10012CE50 = result;
  *(_QWORD *)algn_10012CE58 = v1;
  return result;
}

void sub_10006BC60()
{
  uint64_t v0;

  swift_defaultActor_initialize(v0);
  sub_100011208((uint64_t)"LinkDaemon.ApplicationService", 29, (uint64_t)"init()");
  __break(1u);
}

uint64_t type metadata accessor for ApplicationService()
{
  return objc_opt_self(_TtC10LinkDaemon18ApplicationService);
}

uint64_t sub_10006BCC0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10012A10C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10006BD04;
  return sub_10002E594();
}

uint64_t sub_10006BD04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  v1 = *v0;
  sub_10001010C(*(_QWORD *)(v3 + 16), &v3);
  return sub_1000107A0(*(uint64_t (**)(void))(v1 + 8));
}

void sub_10006BD40()
{
  qword_10012CE60 = (uint64_t)&off_10011A120;
}

double sub_10006BD54()
{
  double result;

  if (qword_100127DB0 != -1)
    swift_once(&qword_100127DB0, sub_10006BD40);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_10006BD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_10012A184);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_10001FFDC;
  return sub_10006BDE8(a5);
}

uint64_t sub_10006BDE8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[18] = a1;
  v2[19] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[20] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[21] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v5);
  v2[23] = swift_task_alloc(v5);
  v2[24] = swift_task_alloc(v5);
  v2[25] = swift_task_alloc(v5);
  v2[26] = swift_task_alloc(v5);
  v2[27] = swift_task_alloc(v5);
  v2[28] = swift_task_alloc(v5);
  v6 = sub_10001BE7C(&qword_10012ADD0);
  v2[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LSLinkBundleRecord(0);
  v2[30] = v7;
  v2[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006BEDC, v1, 0);
}

uint64_t sub_10006BEDC()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  char *v7;
  uint64_t v8;
  _QWORD *v9;

  sub_100072064();
  v1 = (char *)sub_100005E98();
  v0[32] = v1;
  v0[33] = 0;
  v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  v0[34] = v2;
  if (v2)
  {
    v3 = async function pointer to Task<>.value.getter[1];
    v4 = v1;
    sub_1000179D8();
    v5 = (_QWORD *)swift_task_alloc(v3);
    v0[35] = v5;
    *v5 = v0;
    v5[1] = sub_10006C130;
    return Task<>.value.getter();
  }
  else
  {
    v0[36] = OBJC_IVAR____TtC10LinkDaemon8Registry_store;
    v7 = v1;
    sub_100072248();
    v0[37] = v8;
    swift_bridgeObjectRetain();
    v9 = (_QWORD *)sub_100013540();
    v0[38] = v9;
    sub_100019064(v9, (uint64_t)sub_10006C338);
    return sub_100018F0C();
  }
}

uint64_t sub_10006C130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_10001DCCC();
  v1 = *(_QWORD *)(v0 + 152);
  sub_10001010C(*(_QWORD *)(v0 + 280), &v3);
  sub_1000073B0();
  return sub_100019418((uint64_t)sub_10006C178, v1, 0);
}

uint64_t sub_10006C178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  sub_100072064();
  v2 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 288) = OBJC_IVAR____TtC10LinkDaemon8Registry_store;
  sub_100072248();
  *(_QWORD *)(v0 + 296) = v3;
  if (v2)
  {
    sub_10001ED88();
    v4 = *(NSObject **)(v0 + 152);
    v5 = qword_100127DA0;
    sub_1000179D8();
    if (v5 != -1)
    {
      swift_once(&qword_100127DA0, sub_10006BB90);
      v4 = *(NSObject **)(v0 + 152);
    }
    v6 = *(_QWORD *)(v0 + 160);
    v7 = sub_100012A40(v6, (uint64_t)qword_10012CE38);
    sub_100013488(v7);
    sub_1000073B0();
    sub_1000165C0();
    sub_1000165C0();
    sub_10000DDEC();
    v8 = sub_10000BFD4();
    if (sub_1000101D0(v8))
    {
      v9 = (uint8_t *)sub_100011780(12);
      v10 = (_QWORD *)sub_100011780(8);
      *(_DWORD *)v9 = 138412290;
      sub_1000165C0();
      v11 = sub_10001F460();
      sub_10001AA64(v11);
      *v10 = v1;
      sub_1000059A0();
      sub_1000059A0();
      sub_1000100C0((void *)&_mh_execute_header, v4, (os_log_type_t)v6, "Error getting registry, App Shortcuts, or bundle IDs from registry %@", v9);
      sub_10001BE7C(&qword_100128160);
      sub_100013320((uint64_t)v10);
      sub_1000133FC((uint64_t)v10);
      sub_1000133FC((uint64_t)v9);

      sub_1000059A0();
    }
    else
    {
      sub_1000059A0();
      sub_1000059A0();
      sub_1000059A0();

    }
    sub_100018798();
    if (!*(_QWORD *)(v0 + 264))
      sub_10001ED88();
    sub_100018428();
    sub_1000158B0();
    sub_100005878();
    sub_100010270();
    sub_10001631C();
    sub_10000DD44();
    sub_100010034();
    sub_10001F024();
    sub_10001A6C4();
    return sub_10001C06C(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    swift_bridgeObjectRetain();
    v12 = (_QWORD *)sub_100013540();
    *(_QWORD *)(v0 + 304) = v12;
    sub_100019064(v12, (uint64_t)sub_10006C338);
    return sub_100018F0C();
  }
}

uint64_t sub_10006C338()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  sub_1000143EC();
  sub_100013478();
  v0[39] = v2;
  v0[40] = v1;
  sub_10000EB14(v3);
  if (v1)
  {
    v4 = (void *)v0[32];
    swift_bridgeObjectRelease(v0[37]);

  }
  return sub_100011788();
}

uint64_t sub_10006C3A4()
{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _UNKNOWN **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 312) + 16);
  *(_QWORD *)(v2 + 328) = v4;
  if (v4)
  {
    v5 = 0;
    v6 = &_ss15ContiguousArrayV12_endMutationyyFyXl_Ts5_ptr;
    *(_QWORD *)(v2 + 336) = OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator;
    v7 = *(_QWORD *)(v2 + 320);
    do
    {
      *(_QWORD *)(v2 + 344) = v5;
      v8 = *(_QWORD *)(v2 + 312) + 16 * v5;
      v9 = *(_QWORD *)(v8 + 32);
      *(_QWORD *)(v2 + 352) = v9;
      v10 = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v2 + 360) = v10;
      v1 = objc_allocWithZone((Class)v6[233]);
      sub_1000101EC(v10);
      v11 = sub_10007223C();
      v13 = sub_1000077AC(v11, v12, 0, (SEL *)&selRef_initWithBundleIdentifier_allowPlaceholder_error_);
      *(_QWORD *)(v2 + 368) = v13;
      if (v7)
      {
        v55 = v9;
        v1 = *(NSObject **)(v2 + 152);
        v14 = qword_100127DA0;
        sub_1000179D8();
        if (v14 != -1)
        {
          swift_once(&qword_100127DA0, sub_10006BB90);
          v1 = *(NSObject **)(v2 + 152);
        }
        v15 = sub_100012A40(*(_QWORD *)(v2 + 160), (uint64_t)qword_10012CE38);
        sub_100013488(v15);
        sub_1000073B0();
        sub_1000100E0();
        sub_10000DDEC();
        v16 = sub_10000BFD4();
        v17 = sub_100013E64(v16);
        v0 = *(void **)(v2 + 208);
        v3 = *(_QWORD *)(v2 + 160);
        v18 = *(_QWORD *)(v2 + 168);
        if (v17)
        {
          v19 = sub_100011780(12);
          v20 = sub_100011780(32);
          v57 = v20;
          *(_DWORD *)v19 = 136315138;
          sub_1000100E0();
          *(_QWORD *)(v19 + 4) = sub_10000FBEC(v55, v10, &v57);
          sub_100011800(v10);
          sub_100072164();
          sub_1000100C0(v21, v22, v23, "Could not create LSApplicationRecord for %s", (uint8_t *)v19);
          sub_100013320(v20);
          sub_1000133FC(v20);
          v24 = v19;
          v6 = &_ss15ContiguousArrayV12_endMutationyyFyXl_Ts5_ptr;
          sub_1000133FC(v24);
        }
        else
        {
          sub_1000117AC(v10);
        }
        sub_1000059A0();

        sub_100071F74((uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
      }
      else if (v13)
      {
        v25 = *(_QWORD *)(v2 + 232);
        v1 = *(NSObject **)(v2 + 240);
        v26 = v13;
        sub_100097F34();
        sub_10000ECD8(v25);
        if (!v27)
        {
          v40 = *(_QWORD *)(v2 + 336);
          v41 = *(_QWORD *)(v2 + 256);
          sub_100020488(*(_QWORD *)(v2 + 232), *(_QWORD *)(v2 + 248), (void (*)(_QWORD))type metadata accessor for LSLinkBundleRecord);
          *(_QWORD *)(v2 + 376) = *(_QWORD *)(v41 + v40);
          objc_opt_self(_INVocabulary);
          v42 = sub_1000166E8();
          *(_QWORD *)(v2 + 384) = sub_10000FE4C(v42, "sharedVocabulary");
          *(_QWORD *)(v2 + 392) = sub_10000F574();
          sub_1000100E0();
          v43 = sub_10007223C();
          sub_1000615C4(v43, v44);
          *(_QWORD *)(v2 + 400) = v45;
          v46 = *(_QWORD *)(v2 + 296);
          sub_10000C028();
          sub_1000101B0();
          sub_1000100E0();
          *(_QWORD *)(v2 + 408) = sub_10006B864(v46, v9, v10);
          sub_1000059A8();
          sub_1000100E0();
          v47 = sub_10007223C();
          sub_1000652DC(v47, v48);
          v50 = v49;
          sub_10000C028();
          *(_QWORD *)(v2 + 416) = v50;
          v51 = (_QWORD *)swift_task_alloc(dword_10012ACFC);
          *(_QWORD *)(v2 + 424) = v51;
          sub_100019064(v51, (uint64_t)sub_10006CBD8);
          v52 = sub_10007223C();
          return sub_100097DAC(v52, v53);
        }
        v28 = sub_100072210();
        sub_1000131A8(v28, &qword_10012ADD0);
        v29 = qword_100127DA0;
        sub_1000179D8();
        if (v29 != -1)
          swift_once(&qword_100127DA0, sub_10006BB90);
        v30 = sub_1000721FC();
        v31 = sub_100012A40(v30, (uint64_t)qword_10012CE38);
        sub_1000190E4(v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
        swift_release();
        v32 = sub_1000100E0();
        Logger.logObject.getter(v32);
        v33 = sub_10000BFD4();
        v34 = sub_1000101D0(v33);
        v0 = *(void **)(v2 + 224);
        v35 = *(_QWORD *)(v2 + 160);
        v36 = *(_QWORD *)(v2 + 168);
        if (v34)
        {
          v56 = *(_QWORD *)(v2 + 224);
          v0 = v26;
          v37 = sub_100011780(12);
          v38 = sub_100011780(32);
          v57 = v38;
          *(_DWORD *)v37 = 136315138;
          sub_1000100E0();
          *(_QWORD *)(v37 + 4) = sub_100019CE0();
          sub_100011800(v10);
          sub_1000100C0((void *)&_mh_execute_header, v1, (os_log_type_t)v3, "Could not create LSLinkBundleRecord from applicationRecord for %s", (uint8_t *)v37);
          swift_arrayDestroy(v38, 1);
          v39 = v38;
          v6 = &_ss15ContiguousArrayV12_endMutationyyFyXl_Ts5_ptr;
          sub_1000133FC(v39);
          sub_1000133FC(v37);

          (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v56, v35);
        }
        else
        {

          sub_1000117AC(v10);
          (*(void (**)(void *, uint64_t))(v36 + 8))(v0, v35);
        }
      }
      else
      {
        sub_10000C028();
      }
      v7 = 0;
      sub_10001CD5C();
    }
    while (!v27);
  }
  sub_100071F68();

  sub_100005908();
  sub_1000059A8();

  sub_100018428();
  sub_1000158B0();
  sub_100005878();
  sub_100010270();
  sub_10001631C();
  sub_10000DD44();
  sub_100010034();
  sub_10001F024();
  sub_10001A6C4();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10006CBD8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)*v1;
  sub_100013478();
  v2[54] = v3;
  v2[55] = v0;
  sub_10000EB14(v4);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[52]);
    sub_1000117B4();
    sub_1000059A8();
  }
  return sub_100011788();
}

uint64_t sub_10006CC50()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  if (v0[18])
    os_transaction_needs_more_time();
  v1 = v0[31];
  v0[11] = v0[30];
  v0[12] = &off_10011DFB0;
  v2 = sub_10001795C(v0 + 8);
  sub_100020444(v1, (uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_100128154);
  v0[56] = v3;
  *v3 = v0;
  v3[1] = sub_10006CCDC;
  return sub_100004C08((uint64_t)(v0 + 8), v0[51], v0[50], v0[52], v0[54], v0[47], v0[48], v0[49]);
}

uint64_t sub_10006CCDC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;

  v10 = (_QWORD *)*v1;
  v2 = v10;
  sub_100072058(&v10);
  v2[57] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[19];
    swift_bridgeObjectRelease(v2[54]);
    sub_1000059A8();
    sub_1000100D0();
    sub_1000117B4();
    v5 = sub_10006E028;
    v6 = v4;
  }
  else
  {
    v7 = v2[45];
    v8 = v2[19];
    swift_bridgeObjectRelease(v7);
    sub_1000059B0();
    sub_1000059C4();
    sub_1000117B4();
    sub_1000100D0();
    sub_100072254();
    v5 = sub_10006CDA0;
    v6 = v8;
  }
  return swift_task_switch(v5, v6, 0);
}

#error "10006D09C: call analysis failed (funcsize=477)"

uint64_t sub_10006D580()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;

  sub_100072064();
  v1 = qword_100127DA0;
  sub_1000179D8();
  if (v1 != -1)
    swift_once(&qword_100127DA0, sub_10006BB90);
  v2 = *(void **)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v5 = sub_100012A40(v4, (uint64_t)qword_10012CE38);
  (*(void (**)(void *, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  sub_1000073B0();
  sub_1000165C0();
  v6 = sub_1000165C0();
  v7 = v2;
  Logger.logObject.getter(v6);
  v8 = sub_10000BFD4();
  if (sub_100013E64(v8))
  {
    v9 = (uint8_t *)sub_100011780(12);
    v10 = (_QWORD *)sub_100011780(8);
    *(_DWORD *)v9 = 138412290;
    sub_1000165C0();
    v11 = sub_10001F460();
    *(_QWORD *)(v0 + 112) = v11;
    sub_10001B6B4(v0 + 112, v0 + 120);
    *v10 = v11;
    sub_1000059A0();
    sub_1000059A0();
    sub_100072164();
    sub_1000100C0(v12, v13, v14, v15, v9);
    sub_10001BE7C(&qword_100128160);
    sub_100013320((uint64_t)v10);
    sub_1000133FC((uint64_t)v10);
    sub_1000133FC((uint64_t)v9);

    sub_1000059A0();
  }
  else
  {
    sub_1000059A0();
    sub_1000059A0();
    sub_1000059A0();

  }
  sub_100018798();
  sub_10000C028();
  if (!*(_QWORD *)(v0 + 264))
    sub_10001ED88();
  sub_100018428();
  sub_1000158B0();
  sub_100005878();
  sub_100010270();
  sub_10001631C();
  sub_10000DD44();
  sub_100010034();
  sub_10001F024();
  sub_10001A6C4();
  return sub_10001C06C(*(uint64_t (**)(void))(v0 + 8));
}

#error "10006D8C0: call analysis failed (funcsize=544)"

#error "10006E1CC: call analysis failed (funcsize=572)"

double sub_10006E998()
{
  return sub_10006BD54();
}

uint64_t sub_10006E9AC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;

  v4 = *v2;
  v5 = sub_10000E858(a1, a1[3]);
  v6 = *((_OWORD *)v5 + 1);
  v8[0] = *(_OWORD *)v5;
  v8[1] = v6;
  v9 = v5[4];
  return sub_10007147C((uint64_t *)v8, a2, v4);
}

uint64_t sub_10006E9FC(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 176);
  swift_willThrow(a1);

  return sub_100010278(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10006EA60()
{
  void *v0;
  uint64_t v1;

  sub_100071FE4();
  sub_1000059A8();
  sub_1000117B4();

  return sub_100010278(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10006EAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  v5 = *(void **)(v0 + 312);
  swift_release();

  sub_1000059A8();
  sub_100072228();
  if (qword_100127CF0 != -1)
    swift_once(&qword_100127CF0, sub_100050AA8);
  sub_10001F338();
  v6 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  v7 = sub_100072040(v6);
  *(_OWORD *)(v7 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v7 + 32) = v2;
  *(_QWORD *)(v7 + 40) = v1;
  sub_1000101EC(v1);
  sub_1000720FC();
  sub_100072128();
  sub_100071FCC(v8);
  sub_10000C028();
  sub_1000059C4();
  sub_10001EE50();

  sub_100010270();
  sub_100005878();
  v9 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000188F0(v9);
}

uint64_t sub_10006EBA4()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 216);
  v2 = *(void **)(v0 + 224);
  sub_100072178();

  sub_10007218C();
  sub_100005878();
  return sub_1000188F0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006EBE4()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v2 = *(void **)(v0 + 216);
  v1 = *(void **)(v0 + 224);
  sub_100072178();
  sub_1000059A8();

  sub_10007218C();
  sub_100005878();
  return sub_100010278(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006ECB4(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  sub_10000795C(0, &qword_10012A260, LNAutoShortcutSubstitution_ptr);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5[4] = v10;
  sub_10000795C(0, &qword_10012A268, LNAppShortcutSpanData_ptr);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5[5] = v11;
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v5[6] = v12;
  v13 = dword_10012A274;
  a5;
  v14 = (_QWORD *)swift_task_alloc(v13);
  v5[7] = v14;
  *v14 = v5;
  v14[1] = sub_10006EDB0;
  return sub_100004304(v10, v11, v12);
}

uint64_t sub_10006EDB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v6;

  v2 = *v1;
  v6 = v2;
  v3 = *(void **)(v2 + 40);
  v4 = *(void **)(v2 + 16);
  sub_10001F6C8(*(_QWORD *)(v2 + 56), &v6);

  sub_1000117B4();
  sub_1000100D0();
  sub_1000059C4();
  if (v0)
  {
    sub_100072010();
    sub_10001CE50();
    sub_1000137E4();

  }
  else
  {
    sub_10001C240();
  }
  _Block_release(*(const void **)(v2 + 24));
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_10006EE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return sub_100018C14((uint64_t)sub_10006EE50);
}

uint64_t sub_10006EE50()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSString v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v2 = sub_100072004();
  *(_QWORD *)(v1 + 96) = v2;
  if (v0)
    return (*(uint64_t (**)(void))(v1 + 8))();
  v4 = v2;
  v5 = *(_QWORD *)(v1 + 80);
  v6 = *(_QWORD *)(v1 + 88);
  if (v5)
  {
    v7 = (void *)objc_opt_self(LNEntitlementsValidator);
    sub_10000EC68();
    v8 = String._bridgeToObjectiveC()();
    v15 = *(_OWORD *)(v6 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken + 16);
    v16 = *(_OWORD *)(v6 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_auditToken);
    *(_QWORD *)(v1 + 48) = sub_10006F0D8;
    *(_QWORD *)(v1 + 56) = 0;
    *(_QWORD *)(v1 + 16) = _NSConcreteStackBlock;
    *(_QWORD *)(v1 + 24) = 1107296256;
    *(_QWORD *)(v1 + 32) = sub_10006F144;
    *(_QWORD *)(v1 + 40) = &unk_10011CCA8;
    v9 = _Block_copy((const void *)(v1 + 16));
    *(_OWORD *)(v1 + 128) = v16;
    *(_OWORD *)(v1 + 144) = v15;
    v10 = objc_msgSend(v7, "validateEntitlement:auditToken:validator:", v8, v1 + 128, v9);
    sub_100072038();

    if (!v10)
    {
      sub_1000117B4();
      v13 = sub_100071CCC();
      v14 = swift_allocError(&type metadata for ApplicationServiceInstance.Errors, v13, 0, 0);
      swift_willThrow(v14);

      return (*(uint64_t (**)(void))(v1 + 8))();
    }
    v11 = *(_QWORD *)(v1 + 72);
  }
  else
  {
    v11 = *(_QWORD *)(v6 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
    v5 = *(_QWORD *)(v6 + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier + 8);
    sub_10000EC68();
  }
  *(_QWORD *)(v1 + 104) = v5;
  v12 = (_QWORD *)swift_task_alloc(dword_10012B384);
  *(_QWORD *)(v1 + 112) = v12;
  *v12 = v1;
  v12[1] = sub_10006F02C;
  return sub_100098354(*(_QWORD *)(v1 + 64), v11, v5);
}

uint64_t sub_10006F02C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000143EC();
  sub_100072058(v2);
  *(_QWORD *)(v0 + 120) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  sub_1000167A8();
  return sub_100019418(v4, v5, v6);
}

uint64_t sub_10006F080()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  v1 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000107A0(v1);
}

uint64_t sub_10006F0A8()
{
  uint64_t v0;

  sub_1000059A8();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006F0D8(uint64_t a1)
{
  uint64_t result;
  unsigned __int8 v2;
  _BYTE v3[24];
  uint64_t v4;

  sub_100071D08(a1, (uint64_t)v3);
  if (v4)
  {
    result = swift_dynamicCast(&v2, v3, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    if ((_DWORD)result)
      return v2;
  }
  else
  {
    sub_1000131A8((uint64_t)v3, &qword_100128A40);
    return 0;
  }
  return result;
}

uint64_t sub_10006F144(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(__int128 *);
  char v4;
  __int128 v6;
  __int128 v7;

  v3 = *(uint64_t (**)(__int128 *))(a1 + 32);
  if (a2)
  {
    *((_QWORD *)&v7 + 1) = swift_getObjectType(a2);
    *(_QWORD *)&v6 = a2;
  }
  else
  {
    v6 = 0u;
    v7 = 0u;
  }
  swift_retain();
  swift_unknownObjectRetain(a2);
  v4 = v3(&v6);
  swift_release();
  sub_1000131A8((uint64_t)&v6, &qword_100128A40);
  return v4 & 1;
}

uint64_t sub_10006F244(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  sub_10000795C(0, &qword_10012A230, LNRelevantIntent_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4[4] = v8;
  if (a2)
  {
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  v4[5] = v10;
  v11 = dword_10012A23C;
  a4;
  v12 = (_QWORD *)swift_task_alloc(v11);
  v4[6] = v12;
  *v12 = v4;
  v12[1] = sub_10006F318;
  return sub_10006EE3C(v8, a2, v10);
}

uint64_t sub_10006F318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  sub_10000FE70();
  v3 = sub_1000721B4();
  v4 = *(void **)(v2 + 32);
  v5 = *(void **)(v2 + 16);
  sub_10001F6C8(v3, v6);

  sub_1000100D0();
  sub_1000117B4();
  if (v0)
  {
    sub_100072010();
    sub_10001CE50();
    sub_1000137E4();

  }
  else
  {
    sub_10001C240();
  }
  sub_100072198();
  return sub_1000163F4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10006F37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_100018C14((uint64_t)sub_10006F390);
}

uint64_t sub_10006F390()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  v2 = sub_100072004();
  if (v0)
  {
    v10 = (uint64_t (*)(void))sub_100072158();
  }
  else
  {
    v3 = v2;
    v4 = (void *)v1[4];
    v6 = v1[2];
    v5 = v1[3];
    v7 = (uint64_t *)(v1[5] + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
    v8 = *v7;
    v9 = v7[1];
    sub_100016794();
    sub_10006A4B0(v8, v9, v6, v5, v4);
    sub_10000E038();

    v10 = (uint64_t (*)(void))sub_1000121E0();
  }
  return v10();
}

uint64_t sub_10006F4BC(uint64_t a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[5] = v9;
  v11 = dword_10012A1B4;
  v12 = a2;
  a4;
  v13 = (_QWORD *)swift_task_alloc(v11);
  v4[6] = v13;
  *v13 = v4;
  v13[1] = sub_10006F560;
  return sub_10006F37C(v8, v10, (uint64_t)v12);
}

uint64_t sub_10006F560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  sub_10000FE70();
  v3 = sub_1000721B4();
  v5 = *(void **)(v2 + 16);
  v4 = *(void **)(v2 + 24);
  sub_10001F6C8(v3, v6);

  sub_1000117B4();
  if (v0)
  {
    sub_100072010();
    sub_10001CE50();
    sub_1000137E4();

  }
  else
  {
    sub_10001C240();
  }
  _Block_release(*(const void **)(v2 + 32));
  return sub_1000163F4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10006F5C4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_100018C14((uint64_t)sub_10006F5D4);
}

uint64_t sub_10006F5D4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  sub_10000FE70();
  v2 = sub_100072004();
  if (v0)
  {
    v8 = (uint64_t (*)(void))sub_100072158();
    return v8();
  }
  else
  {
    v3 = v2;
    v4 = (uint64_t *)(*(_QWORD *)(v1 + 16)
                   + OBJC_IVAR____TtC10LinkDaemon26ApplicationServiceInstance_destinationBundleIdentifier);
    v6 = *v4;
    v5 = v4[1];
    sub_10000C030();
    v7 = sub_10006A1E8(v6, v5);
    sub_1000059C4();

    return sub_10001EFB8(v7, *(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_10006F690(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012A1F4;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10006F6F0;
  return sub_10006F5C4();
}

uint64_t sub_10006F6F0()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Class isa;
  uint64_t v7;

  v7 = *v1;
  v2 = *(void **)(v7 + 16);
  sub_10001F6C8(*(_QWORD *)(v7 + 32), &v7);

  if (v0)
  {
    v3 = sub_100005840();
    sub_100005A04();
    v4 = (void *)v3;
  }
  else
  {
    sub_10000795C(0, &qword_10012A208, LNIntentEnablement_ptr);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_1000059A8();
    v4 = isa;
  }
  sub_1000107C4();

  sub_100072038();
  return sub_100018C20((uint64_t (*)(void))v1[1]);
}

uint64_t sub_10006F7A8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10012A1F4);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_10006F7EC;
  return sub_10006F5C4();
}

uint64_t sub_10006F7EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = *v2;
  v4 = v7;
  sub_100072058(&v7);
  *(_QWORD *)(v4 + 32) = v1;
  swift_task_dealloc(v5);
  if (v1)
    return ((uint64_t (*)(void))v2[1])();
  *(_QWORD *)(v4 + 40) = a1;
  sub_1000167A8();
  return sub_100011788();
}

uint64_t sub_10006F858()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_100071130(*(_QWORD *)(v0 + 40));
  sub_1000117B4();
  sub_10006B6A4((uint64_t)v1);
  v3 = v2;
  sub_10001105C();
  return sub_10001EFB8(v3, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006F8D0(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012A1EC;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10006F930;
  return sub_10006F7A8();
}

uint64_t sub_10006F930()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Class isa;
  uint64_t v7;

  v7 = *v1;
  v2 = *(void **)(v7 + 16);
  sub_10001F6C8(*(_QWORD *)(v7 + 32), &v7);

  if (v0)
  {
    v3 = sub_100005840();
    sub_100005A04();
    v4 = (void *)v3;
  }
  else
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    sub_1000059A8();
    v4 = isa;
  }
  sub_1000107C4();

  sub_100072038();
  return sub_100018C20((uint64_t (*)(void))v1[1]);
}

uint64_t sub_10006F9C4()
{
  return sub_100018C14((uint64_t)sub_10006F9D0);
}

uint64_t sub_10006F9D0()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000795C(0, &qword_100129D80, AFPreferences_ptr);
  v1 = sub_10000358C();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10006FA30(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012A1CC;
  v5 = a2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_10006FA8C;
  return sub_10006F9C4();
}

uint64_t sub_10006FA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  NSString v11;

  sub_10000FE70();
  v3 = v0;
  v5 = v4;
  v6 = sub_1000721A0();
  v7 = *(void **)(v2 + 16);
  sub_10001F6C8(v6, v8);

  if (v3)
  {
    v9 = sub_100005840();
    sub_100005A04();
    v10 = (void *)v9;
  }
  else if (v5)
  {
    v11 = String._bridgeToObjectiveC()();
    sub_1000059A8();
    v10 = v11;
  }
  else
  {
    v10 = 0;
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000163F4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10006FB24(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 64) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  return sub_100018C14((uint64_t)sub_10006FB3C);
}

uint64_t sub_10006FB3C()
{
  uint64_t v0;
  int v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;

  v1 = *(unsigned __int8 *)(v0 + 64);
  v2 = (void *)objc_opt_self(LNIntentEnablement);
  if (v1 == 1)
    v3 = objc_msgSend(v2, "enabled");
  else
    v3 = objc_msgSend(v2, "disabledWithReason:", 0);
  v4 = v3;
  *(_QWORD *)(v0 + 40) = v4;
  v5 = (_QWORD *)swift_task_alloc(dword_10012A1B4);
  *(_QWORD *)(v0 + 48) = v5;
  *v5 = v0;
  v5[1] = sub_10006FBD4;
  return sub_10006F37C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)v4);
}

uint64_t sub_10006FBD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000143EC();
  sub_100072058(v3);
  *(_QWORD *)(v0 + 56) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_1000167A8();
    return sub_100019418(v5, v6, v7);
  }
  else
  {

    return sub_1000188F0(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t sub_10006FC2C()
{
  uint64_t v0;

  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10006FCD0()
{
  sub_100011208((uint64_t)"LinkDaemon.ApplicationServiceInstance", 37, (uint64_t)"init()");
  __break(1u);
}

uint64_t sub_10006FCF4(uint64_t a1, char a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = dword_10012A1AC;
  a4;
  v12 = (_QWORD *)swift_task_alloc(v11);
  v4[5] = v12;
  *v12 = v4;
  v12[1] = sub_10006FD90;
  return sub_10006FB24(v8, v10, a2);
}

uint64_t sub_10006FD90()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v4;

  v4 = *v1;
  v2 = *(void **)(v4 + 16);
  sub_10001F6C8(*(_QWORD *)(v4 + 40), &v4);

  sub_1000117B4();
  if (v0)
  {
    sub_100072010();
    sub_10001CE50();
    sub_1000137E4();

  }
  else
  {
    sub_10001C240();
  }
  sub_100072198();
  return sub_100018C20((uint64_t (*)(void))v1[1]);
}

id sub_10006FE04()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_10007225C();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10006FE34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10006FE44()
{
  return 0xD000000000000046;
}

void sub_10006FE60()
{
  Hasher._combine(_:)(0);
}

unint64_t sub_10006FE88()
{
  sub_10006FE44();
  return 0xD000000000000046;
}

void sub_10006FEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = sub_10001F258();
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10001F350();
  v11 = (_QWORD *)swift_allocObject(&unk_10011CB50, 40, 7);
  v11[2] = v2;
  v11[3] = a1;
  v11[4] = a2;
  v12 = sub_100072140((uint64_t)sub_10001FEF4);
  sub_100016794();
  sub_1000100E0();
  v13 = sub_1000179D8();
  static DispatchQoS.unspecified.getter(v13);
  sub_10002A8E4();
  sub_10001BE7C(&qword_100128178);
  v14 = sub_10001FBB4();
  sub_100071F48(v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v4, v3, v12);
  _Block_release(v12);
  sub_10007214C(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  sub_10001BF78(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  swift_release();
  sub_100013308();
}

uint64_t sub_100070004(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  void *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t aBlock[7];

  v71 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v71);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTimeInterval(0);
  v70 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v69 = (uint64_t *)((char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for DispatchTime(0);
  v68 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v67 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v72 = (char *)&v61 - v13;
  v14 = (char *)a1 + qword_10012D610;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v65 = (uint64_t)v14;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v73 = a2;
  v74 = a3;
  if (v18)
  {
    v62 = v8;
    v63 = v7;
    v64 = v10;
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(64, -1);
    aBlock[0] = v20;
    *(_DWORD *)v19 = 136315394;
    if (qword_100127E30 != -1)
      swift_once(&qword_100127E30, sub_10007F71C);
    v22 = qword_10012CF80;
    v21 = *(_QWORD *)algn_10012CF88;
    swift_bridgeObjectRetain();
    v75 = (_QWORD *)sub_10000FBEC(v22, v21, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, aBlock);
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    v23 = sub_10007FB0C(v73, v74);
    v75 = (_QWORD *)sub_10000FBEC(v23, v24, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, aBlock);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Queuing notification for %s %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 2);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v7 = v63;
    v25 = v64;
    v8 = v62;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v25 = v10;
  }
  v26 = *a1;
  v66 = *(_QWORD *)(*a1 + 136);
  if (*(_QWORD *)((char *)a1 + v66))
  {
    v27 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v27);
    swift_release();
    v26 = *a1;
  }
  v28 = (_QWORD *)((char *)a1 + *(_QWORD *)(v26 + 128));
  v30 = *v28;
  v29 = v28[1];
  if (*v28)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v62 = v8;
      v63 = v7;
      v64 = v25;
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = swift_slowAlloc(32, -1);
      aBlock[0] = v65;
      *(_DWORD *)v34 = 136315138;
      if (qword_100127E30 != -1)
        swift_once(&qword_100127E30, sub_10007F71C);
      v36 = qword_10012CF80;
      v35 = *(_QWORD *)algn_10012CF88;
      swift_bridgeObjectRetain();
      v75 = (_QWORD *)sub_10000FBEC(v36, v35, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, aBlock);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Existing notification for %s, merging", v34, 0xCu);
      v37 = v65;
      swift_arrayDestroy(v65, 1);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      v7 = v63;
      v25 = v64;
      v8 = v62;
    }
    else
    {

    }
    swift_bridgeObjectRetain();
    v41 = sub_100098630(v74, v30);
    v42 = v73;
    swift_bridgeObjectRetain();
    v44 = sub_10006B9B8(v43, (uint64_t)v41);
    swift_bridgeObjectRetain();
    v45 = sub_100098630(v42, v29);
    swift_bridgeObjectRetain();
    v47 = sub_10006B9B8(v46, (uint64_t)v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = *v28;
    v40 = v28[1];
    *v28 = v44;
    v28[1] = v47;
  }
  else
  {
    v38 = v74;
    *v28 = v73;
    v28[1] = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v39 = 0;
    v40 = v29;
  }
  v48 = sub_100071A4C(v39, v40);
  v49 = v67;
  static DispatchTime.now()(v48);
  v51 = v69;
  v50 = v70;
  *v69 = a1[2];
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v50 + 104))(v51, enum case for DispatchTimeInterval.milliseconds(_:), v8);
  v52 = v72;
  + infix(_:_:)(v49, v51);
  (*(void (**)(_QWORD *, uint64_t))(v50 + 8))(v51, v8);
  v53 = *(void (**)(char *, uint64_t))(v68 + 8);
  v53(v49, v25);
  aBlock[4] = (uint64_t)sub_100071A78;
  aBlock[5] = (uint64_t)a1;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10001FF18;
  aBlock[3] = (uint64_t)&unk_10011CB90;
  v54 = _Block_copy(aBlock);
  v75 = _swiftEmptyArrayStorage;
  v55 = sub_10002A8E4();
  swift_retain();
  v56 = sub_10001BE7C(&qword_100128178);
  v57 = sub_10001FBB4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v56, v57, v71, v55);
  v58 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
  v59 = DispatchWorkItem.init(flags:block:)(v7, v54);
  swift_release();
  *(_QWORD *)((char *)a1 + v66) = v59;
  swift_retain();
  swift_release();
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v52, v59);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v53)(v52, v25);
}

void sub_1000706A4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t (*v20)(char *, char *, uint64_t);
  __n128 v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  Class isa;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  __n128 v42;
  void *v43;
  uint64_t v44;
  uint64_t (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[3];
  uint64_t v49;

  v1 = v0;
  v2 = type metadata accessor for Notification(0);
  v46 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (_QWORD **)((char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)((char *)v1 + qword_10012D618);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, double))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    v49 = 0;
    v12 = *(_QWORD *)(*v1 + 128);
    v13 = *(_QWORD *)((char *)v1 + v12);
    if (v13)
    {
      swift_bridgeObjectRetain();
      v15 = sub_100050D6C(v14);
      swift_bridgeObjectRelease(v13);
      v16 = v15[2];
      if (v16)
      {
        v39 = v12;
        v40 = v1;
        v17 = (char *)v15
            + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
        v18 = (char *)v1 + qword_10012D610;
        v19 = (void *)v1[3];
        v20 = *(uint64_t (**)(char *, char *, uint64_t))(v46 + 16);
        v44 = *(_QWORD *)(v46 + 72);
        v45 = v20;
        v38 = v15;
        v21 = swift_bridgeObjectRetain();
        v21.n128_u64[0] = 136315138;
        v42 = v21;
        v41 = (char *)&type metadata for Any + 8;
        v43 = v19;
        while (1)
        {
          v22 = v45(v4, v17, v2);
          v23 = Logger.logObject.getter(v22);
          v24 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v23, v24))
          {
            v25 = swift_slowAlloc(12, -1);
            v26 = v18;
            v27 = swift_slowAlloc(32, -1);
            v48[0] = v27;
            *(_DWORD *)v25 = v42.n128_u32[0];
            v28 = Notification.description.getter();
            v30 = v29;
            *(_QWORD *)(v25 + 4) = sub_10000FBEC(v28, v29, v48);
            swift_bridgeObjectRelease(v30);
            (*(void (**)(char *, uint64_t))(v46 + 8))(v4, v2);
            _os_log_impl((void *)&_mh_execute_header, v23, v24, "Sending notification %s", (uint8_t *)v25, 0xCu);
            swift_arrayDestroy(v27, 1);
            v31 = v27;
            v18 = v26;
            v19 = v43;
            swift_slowDealloc(v31, -1, -1);
            swift_slowDealloc(v25, -1, -1);

          }
          else
          {

            (*(void (**)(char *, uint64_t))(v46 + 8))(v4, v2);
          }
          isa = Notification._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v19, "postNotification:", isa);

          if (__OFADD__(v49, 1))
            break;
          ++v49;
          v17 += v44;
          if (!--v16)
          {
            v33 = swift_bridgeObjectRelease_n(v38, 2);
            v12 = v39;
            v1 = v40;
            goto LABEL_12;
          }
        }
        __break(1u);
        goto LABEL_17;
      }
      v33 = swift_bridgeObjectRelease(v15);
LABEL_12:
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v36 = 134217984;
        swift_beginAccess(&v49, v48, 0, 0);
        v47 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Sent %ld notifications", v36, 0xCu);
        swift_slowDealloc(v36, -1, -1);
      }

    }
    v37 = *(_QWORD *)((char *)v1 + v12);
    *(_QWORD *)((char *)v1 + v12) = 0;
    swift_bridgeObjectRelease(v37);
    *(_QWORD *)((char *)v1 + *(_QWORD *)(*v1 + 136)) = 0;
    swift_release();
    return;
  }
LABEL_17:
  __break(1u);
}

void sub_100070AA8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  uint64_t (*v21)(char *, char *, uint64_t);
  __n128 v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  Class isa;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  _QWORD *v42;
  char *v43;
  __n128 v44;
  void *v45;
  uint64_t v46;
  uint64_t (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[3];
  uint64_t v51;

  v1 = v0;
  v2 = type metadata accessor for Notification(0);
  v48 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (_QWORD **)((char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)((char *)v1 + qword_10012D618);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, double))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    v51 = 0;
    v12 = *(_QWORD *)(*v1 + 128);
    v13 = (_QWORD *)((char *)v1 + v12);
    v14 = *(_QWORD *)((char *)v1 + v12);
    if (v14)
    {
      v15 = v13[1];
      sub_100071A7C(*(_QWORD *)((char *)v1 + v12), v15);
      v16 = sub_10007F748(v14, v15);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v14);
      v17 = v16[2];
      if (v17)
      {
        v41 = v13;
        v42 = v1;
        v18 = (char *)v16
            + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
        v19 = (char *)v1 + qword_10012D610;
        v20 = (void *)v1[3];
        v21 = *(uint64_t (**)(char *, char *, uint64_t))(v48 + 16);
        v46 = *(_QWORD *)(v48 + 72);
        v47 = v21;
        v40 = v16;
        v22 = swift_bridgeObjectRetain();
        v22.n128_u64[0] = 136315138;
        v44 = v22;
        v43 = (char *)&type metadata for Any + 8;
        v45 = v20;
        while (1)
        {
          v23 = v47(v4, v18, v2);
          v24 = Logger.logObject.getter(v23);
          v25 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v24, v25))
          {
            v26 = swift_slowAlloc(12, -1);
            v27 = v19;
            v28 = swift_slowAlloc(32, -1);
            v50[0] = v28;
            *(_DWORD *)v26 = v44.n128_u32[0];
            v29 = Notification.description.getter();
            v31 = v30;
            *(_QWORD *)(v26 + 4) = sub_10000FBEC(v29, v30, v50);
            swift_bridgeObjectRelease(v31);
            (*(void (**)(char *, uint64_t))(v48 + 8))(v4, v2);
            _os_log_impl((void *)&_mh_execute_header, v24, v25, "Sending notification %s", (uint8_t *)v26, 0xCu);
            swift_arrayDestroy(v28, 1);
            v32 = v28;
            v19 = v27;
            v20 = v45;
            swift_slowDealloc(v32, -1, -1);
            swift_slowDealloc(v26, -1, -1);

          }
          else
          {

            (*(void (**)(char *, uint64_t))(v48 + 8))(v4, v2);
          }
          isa = Notification._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v20, "postNotification:", isa);

          if (__OFADD__(v51, 1))
            break;
          ++v51;
          v18 += v46;
          if (!--v17)
          {
            v34 = swift_bridgeObjectRelease_n(v40, 2);
            v13 = v41;
            v1 = v42;
            goto LABEL_12;
          }
        }
        __break(1u);
        goto LABEL_17;
      }
      v34 = swift_bridgeObjectRelease(v16);
LABEL_12:
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v37 = 134217984;
        swift_beginAccess(&v51, v50, 0, 0);
        v49 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Sent %ld notifications", v37, 0xCu);
        swift_slowDealloc(v37, -1, -1);
      }

    }
    v38 = *v13;
    v39 = v13[1];
    *v13 = 0;
    v13[1] = 0;
    sub_100071A4C(v38, v39);
    *(_QWORD *)((char *)v1 + *(_QWORD *)(*v1 + 136)) = 0;
    swift_release();
    return;
  }
LABEL_17:
  __break(1u);
}

id sub_100070EC8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1000077AC(a1, a2, a3, (SEL *)&selRef_initWithBundleIdentifier_allowPlaceholder_error_);
}

Swift::Int sub_100070F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  sub_1000100D0();
  return v6;
}

void sub_100070F88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[9];

  v1 = a1;
  if (!*(_QWORD *)(a1 + 16)
    || (sub_10001BE7C(&qword_10012A190), v2 = sub_100072018(), (v29 = *(_QWORD *)(v1 + 16)) == 0))
  {
LABEL_24:
    sub_1000117B4();
    sub_100013414();
    return;
  }
  v3 = 0;
  v27 = v1;
  v28 = v1 + 32;
  while (v3 < *(_QWORD *)(v1 + 16))
  {
    v4 = *(void **)(v28 + 8 * v3);
    v5 = *(_QWORD *)(v2 + 40);
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;
    Hasher.init(_seed:)(v30, v5);
    v9 = v4;
    String.hash(into:)(v30, v6, v8);
    v10 = Hasher._finalize()();
    sub_10000C028();
    v11 = -1 << *(_BYTE *)(v2 + 32);
    v12 = v10 & ~v11;
    sub_1000721C8();
    if ((v15 & v14) != 0)
    {
      sub_10007221C();
      v16 = sub_1000720CC();
      if (v8 == v16 && v10 == v17)
      {
LABEL_21:
        sub_1000117AC(v10);
LABEL_22:

        goto LABEL_23;
      }
      v19 = sub_10001B5C0(v16, v17);
      sub_1000059A8();
      sub_1000059B0();
      if ((v19 & 1) != 0)
        goto LABEL_22;
      v20 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v20;
        sub_1000721C8();
        if ((v14 & v15) == 0)
          break;
        sub_10007221C();
        v21 = sub_1000720CC();
        if (v19 == v21 && v10 == v22)
          goto LABEL_21;
        v19 = sub_10001B5C0(v21, v22);
        sub_1000059A8();
        sub_1000059B0();
        if ((v19 & 1) != 0)
          goto LABEL_22;
      }
    }
    *(_QWORD *)(v2 + 56 + 8 * v13) = v15 | v14;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v12) = v9;
    v24 = *(_QWORD *)(v2 + 16);
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_26;
    *(_QWORD *)(v2 + 16) = v26;
LABEL_23:
    ++v3;
    v1 = v27;
    if (v3 == v29)
      goto LABEL_24;
  }
  __break(1u);
LABEL_26:
  __break(1u);
}

unint64_t *sub_100071130(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  unint64_t *v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v12;

  v2 = (unint64_t *)isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v8 = (unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10003286C(0, v6, v8);
    v9 = sub_10007128C(v8, v6, (uint64_t)v2);
    if (v1)
      swift_willThrow(v9);
    else
      return v9;
  }
  else
  {
    v10 = (unint64_t *)swift_slowAlloc(v7, -1);
    sub_10003286C(0, v6, v10);
    v2 = sub_10007128C(v10, v6, (uint64_t)v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v2;
}

unint64_t *sub_10007128C(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v4 = result;
  v5 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_20;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11)
      return (unint64_t *)sub_1000C6040(v4, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        return (unint64_t *)sub_1000C6040(v4, a2, v5, a3);
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          return (unint64_t *)sub_1000C6040(v4, a2, v5, a3);
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
          break;
      }
    }
LABEL_19:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_20:
    result = (unint64_t *)objc_msgSend(*(id *)(*(_QWORD *)(a3 + 56) + 8 * v13), "value");
    if (result == (unint64_t *)1)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1000C6040(v4, a2, v5, a3);
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v11)
    return (unint64_t *)sub_1000C6040(v4, a2, v5, a3);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      return (unint64_t *)sub_1000C6040(v4, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10007141C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "systemImageName");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_10007147C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD v37[5];
  __int128 v38;
  __int128 v39;

  v36 = a2;
  v5 = sub_10001BE7C(&qword_10012AD50);
  __chkstk_darwin(v5);
  v7 = (char *)&v37[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v37[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v37[-1] - v13;
  v37[3] = &unk_10011B278;
  v37[4] = &off_10011B298;
  v15 = swift_allocObject(&unk_10011CA88, 56, 7);
  v37[0] = v15;
  v16 = *a1;
  v17 = *(_OWORD *)(a1 + 1);
  v38 = *(_OWORD *)(a1 + 3);
  v39 = v17;
  v18 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v15 + 32) = v18;
  *(_QWORD *)(v15 + 48) = a1[4];
  v19 = sub_10000E858(v37, (uint64_t)&unk_10011B278);
  v20 = v19[3];
  v21 = v19[4];
  if (v20 == 0xD000000000000019 && v21 == 0x80000001000F3140
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000001000F3140, v20, v21, 0) & 1) != 0)
  {
    swift_unknownObjectRetain(v16);
    sub_100035CB4((uint64_t)&v39);
    sub_100035CB4((uint64_t)&v38);
    v22 = qword_100127DA0;
    swift_retain();
    if (v22 != -1)
      swift_once(&qword_100127DA0, sub_10006BB90);
    v23 = sub_100012A40(v8, (uint64_t)qword_10012CE38);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v23, v8);
    v24 = swift_release();
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Received Siri Vocabulary database migration darwin notification", v27, 2u);
      v11 = v14;
LABEL_16:
      swift_slowDealloc(v27, -1, -1);
      goto LABEL_17;
    }
    v11 = v14;
  }
  else
  {
    if ((v20 != 0xD000000000000029 || v21 != 0x80000001000F3160)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000029, 0x80000001000F3160, v20, v21, 0) & 1) == 0)
    {
      swift_unknownObjectRetain(v16);
      sub_100035CB4((uint64_t)&v39);
      sub_100035CB4((uint64_t)&v38);
      return sub_10000E87C(v37);
    }
    swift_unknownObjectRetain(v16);
    sub_100035CB4((uint64_t)&v39);
    sub_100035CB4((uint64_t)&v38);
    v28 = qword_100127DA0;
    swift_retain();
    if (v28 != -1)
      swift_once(&qword_100127DA0, sub_10006BB90);
    v29 = sub_100012A40(v8, (uint64_t)qword_10012CE38);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v29, v8);
    v30 = swift_release();
    v25 = Logger.logObject.getter(v30);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v31))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v31, "Received Siri language change darwin notification", v27, 2u);
      goto LABEL_16;
    }
  }
LABEL_17:

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v32 = type metadata accessor for TaskPriority(0);
  sub_100014360((uint64_t)v7, 1, 1, v32);
  v33 = (_QWORD *)swift_allocObject(&unk_10011CAB0, 48, 7);
  v33[2] = 0;
  v33[3] = 0;
  v33[4] = a3;
  v34 = v36;
  v33[5] = v36;
  swift_unknownObjectRetain(v34);
  swift_retain();
  sub_100029394((uint64_t)v7, (uint64_t)&unk_10012A178, (uint64_t)v33);
  swift_release();
  return sub_10000E87C(v37);
}

uint64_t sub_100071898()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000718CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  v1 = sub_100072130();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000718F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000FE70();
  v1 = (_QWORD *)swift_task_alloc(dword_10012A114);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100071964;
  sub_10001BF30();
  return sub_10006BD94(v2, v3, v4, v5, v6);
}

uint64_t sub_100071964()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  v1 = *v0;
  sub_10001010C(*(_QWORD *)(v3 + 16), &v3);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000719AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000719DC(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_1000719F4(a1, a2 & 1);
}

void sub_1000719F4(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_100071A00(_QWORD *a1, uint64_t *a2)
{
  return sub_100070004(a1, *a2, a2[1]);
}

uint64_t sub_100071A0C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100071A40()
{
  uint64_t v0;

  return sub_100071A00(*(_QWORD **)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_100071A4C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100071A7C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_100071AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100072170();
  _Block_release(*(const void **)(v0 + 32));

  v1 = sub_100072130();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100071AD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  sub_10000FE70();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v5 = *(void **)(v0 + 32);
  v4 = *(void **)(v0 + 40);
  v6 = (_QWORD *)sub_100010B24();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10001FFDC;
  return ((uint64_t (*)(uint64_t, char, void *, void *))((char *)&dword_10012A198 + dword_10012A198))(v2, v3, v5, v4);
}

uint64_t sub_100071B48()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10001FFDC);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_100071B8C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10001FFDC);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_100071BD0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10001FFDC);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_100071C14()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10000FE70();
  v1 = (_QWORD *)sub_100010B24();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1000192C4(v1, (uint64_t)sub_10001FFDC);
  return sub_100011078(v2, v3, v4, v5, v6);
}

uint64_t sub_100071C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100072170();
  sub_10000E040();
  _Block_release(*(const void **)(v0 + 32));

  v1 = sub_100072130();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100071C88()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10000FE70();
  v1 = (_QWORD *)sub_100010B24();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1000192C4(v1, (uint64_t)sub_10001FFDC);
  return sub_100011078(v2, v3, v4, v5, v6);
}

unint64_t sub_100071CCC()
{
  unint64_t result;

  result = qword_10012A240;
  if (!qword_10012A240)
  {
    result = swift_getWitnessTable(&unk_1000F0E18, &type metadata for ApplicationServiceInstance.Errors);
    atomic_store(result, (unint64_t *)&qword_10012A240);
  }
  return result;
}

uint64_t sub_100071D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_100128A40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100071D50()
{
  uint64_t v0;

  sub_100072170();
  sub_10000E040();

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100071D8C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);

  v1 = (_QWORD *)swift_task_alloc(dword_10012A254);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001FFDC;
  sub_10001BF30();
  return v2();
}

uint64_t sub_100071E08()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  sub_10000E040();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t storeEnumTagSinglePayload for ApplicationServiceInstance.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100071E70 + 4 * byte_1000F0CA0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100071E90 + 4 * byte_1000F0CA5[v4]))();
}

_BYTE *sub_100071E70(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100071E90(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100071E98(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100071EA0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100071EA8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100071EB0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ApplicationServiceInstance.Errors()
{
  return &type metadata for ApplicationServiceInstance.Errors;
}

unint64_t sub_100071ED4()
{
  unint64_t result;

  result = qword_10012A2B8;
  if (!qword_10012A2B8)
  {
    result = swift_getWitnessTable(&unk_1000F0DF0, &type metadata for ApplicationServiceInstance.Errors);
    atomic_store(result, (unint64_t *)&qword_10012A2B8);
  }
  return result;
}

BOOL sub_100071F38(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100071F48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v2, a1, v1, v3);
}

uint64_t sub_100071F68()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 296));
}

uint64_t sub_100071F74@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100071F7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, a1, v3);
}

uint64_t sub_100071F90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, a1, v3);
}

BOOL sub_100071FA4(os_log_type_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  NSObject *v15;

  return os_log_type_enabled(v15, a1);
}

uint64_t sub_100071FB8(uint64_t a1)
{
  return swift_task_alloc((*(_QWORD *)(*(_QWORD *)(a1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_100071FCC(uint64_t a1)
{
  sub_1000081F4(a1);
}

uint64_t sub_100071FD8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 384) = a1;
  return sub_10000F574();
}

uint64_t sub_100071FE4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
}

uint64_t sub_100071FF8()
{
  uint64_t v0;

  return v0;
}

void *sub_100072004()
{
  return sub_100005E98();
}

uint64_t sub_100072010()
{
  uint64_t v0;

  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_100072018()
{
  uint64_t v0;

  return static _SetStorage.allocate(capacity:)(v0);
}

uint64_t sub_100072028(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

void sub_100072038()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t sub_100072040(uint64_t a1)
{
  uint64_t v1;

  return swift_initStackObject(a1, v1);
}

void sub_100072048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{

}

uint64_t sub_100072050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_release(a18);
}

void sub_100072058(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_10007209C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000720AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a17 + 8))(a18, a16);
}

uint64_t sub_1000720BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000720CC()
{
  uint64_t v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_1000720DC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_10000FBEC(v0, v1, (uint64_t *)(v2 - 88));
}

id sub_1000720EC(uint64_t a1, uint64_t a2)
{
  SEL *v2;

  return sub_1000077AC(a1, a2, 0, v2);
}

uint64_t sub_1000720FC()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100072104()
{
  uint64_t v0;

  return v0;
}

void sub_100072110(uint64_t a1@<X8>)
{
  _QWORD *v1;

  v1[43] = a1;
  v1[44] = *(_QWORD *)(v1[39] + 16 * a1 + 32);
}

void sub_100072128()
{
  uint64_t v0;

  sub_1000066A4(v0);
}

uint64_t sub_100072130()
{
  uint64_t v0;

  return v0;
}

void *sub_100072140@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = a1;
  *(_QWORD *)(v2 - 104) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

uint64_t sub_10007214C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_100072158()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void sub_100072170()
{
  uint64_t v0;

}

uint64_t sub_100072178()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
}

uint64_t sub_100072180()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 192));
}

uint64_t sub_10007218C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 192));
}

void sub_100072198()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
}

uint64_t sub_1000721A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 32);
}

uint64_t sub_1000721B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 48);
}

_QWORD *sub_1000721E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  *a9 = a1;
  return a9;
}

uint64_t sub_1000721FC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160);
}

uint64_t sub_100072210()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 232);
}

uint64_t sub_10007221C()
{
  uint64_t v0;
  uint64_t v1;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 8 * v1));
}

uint64_t sub_100072228()
{
  uint64_t v0;

  return sub_100020408(v0);
}

id sub_100072230(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_10007223C()
{
  uint64_t v0;

  return v0;
}

void sub_100072248()
{
  sub_1000093AC();
}

uint64_t sub_100072254()
{
  _QWORD *v0;

  return sub_10000E87C(v0);
}

uint64_t sub_10007225C()
{
  uint64_t v0;

  return swift_getObjectType(v0);
}

uint64_t sub_100072264()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100072270()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007227C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[21];
  _BYTE v17[168];
  _QWORD v18[22];

  if (qword_100127DB8 != -1)
    swift_once(&qword_100127DB8, sub_100072830);
  sub_1000189C4(v18, &unk_10012CE68);
  if (a2)
  {
    sub_1000379AC(v18);
    if (qword_100127DC0 != -1)
      swift_once(&qword_100127DC0, sub_100072884);
    sub_10001768C((uint64_t)&qword_10012CF10);
    v16[0] = a1;
    v16[1] = a2;
    == infix<A>(_:_:)();
    v7 = v6;
    v3 = v8;
    v10 = v9;
    sub_1000189C4(&v15, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v7, v3, v10, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v16);
    swift_bridgeObjectRelease_n(v10, 2);
    swift_bridgeObjectRelease_n(v3, 2);
    sub_100037A7C(v18);
    v11 = v16;
  }
  else
  {
    sub_1000379AC(v18);
    v11 = v18;
  }
  sub_1000189C4(v17, v11);
  v16[3] = &type metadata for Table;
  v16[4] = &protocol witness table for Table;
  v16[0] = swift_allocObject(&unk_10011CE90, 184, 7);
  sub_1000189C4((void *)(v16[0] + 16), v17);
  Connection.prepareRowIterator(_:)(v16);
  v12 = sub_10000E87C(v16);
  if (!v2)
  {
    __chkstk_darwin(v12);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    v3 = v14;
    sub_1000058DC();
    sub_1000059B0();
    swift_release();
  }
  return v3;
}

uint64_t sub_1000724F4(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  _QWORD v63[10];
  _QWORD v64[2];
  int v65;
  uint64_t v66;
  _QWORD v67[21];
  _QWORD v68[21];
  SQLite::Insert v69;

  if (qword_100127DB8 != -1)
    swift_once(&qword_100127DB8, sub_100072830);
  sub_1000189C4(v67, &unk_10012CE68);
  sub_1000189C4(v64, &unk_10012CE68);
  sub_1000379AC(v67);
  if (qword_100127DC0 != -1)
    swift_once(&qword_100127DC0, sub_100072884);
  v2 = sub_10001768C((uint64_t)&qword_10012CF10);
  v62 = *a1;
  <- infix<A>(_:_:)(v2, v3, v4, (uint64_t)&v62, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
  v5 = sub_10001BE7C(&qword_100128D08);
  inited = swift_initStackObject(v5, &v38);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  if (qword_100127DC8 != -1)
    swift_once(&qword_100127DC8, sub_1000728A8);
  v7 = sub_10001768C((uint64_t)&qword_10012CF28);
  v62 = a1[1];
  sub_100018440(v7, v8, v9, v10, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String, v11, v12, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    v57,
    v58,
    v59,
    v60,
    v61,
    v62);
  if (qword_100127DD0 != -1)
    swift_once(&qword_100127DD0, sub_1000728D4);
  v13 = sub_10001768C((uint64_t)&qword_10012CF40);
  v62 = a1[2];
  sub_100018440(v13, v14, v15, v16, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String, v17, v18, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    v57,
    v58,
    v59,
    v60,
    v61,
    v62);
  v19 = QueryType.insert(_:_:)((uint64_t)v63);
  v21 = v20;
  v23 = v22;
  swift_setDeallocating(inited);
  sub_10001CC3C();
  sub_100019F20(v63);
  sub_1000189C4(v68, v64);
  sub_100037A7C(v68);
  v69.template._countAndFlagsBits = v19;
  v69.template._object = v21;
  v69.bindings._rawValue = v23;
  Connection.run(_:)(v69);
  if (v24)
  {
    swift_bridgeObjectRelease();
    sub_1000059B0();
    v63[0] = v24;
    swift_errorRetain(v24);
    v25 = sub_10001BE7C((uint64_t *)&unk_100129420);
    if (swift_dynamicCast(v64, v63, v25, &type metadata for Result, 0))
    {
      swift_errorRelease(v24);
      v26 = v64[1];
      v27 = v65;
      v28 = v66;
      if (v65 == 19)
      {
        v29 = type metadata accessor for Schema.RuntimeError(0);
        v30 = sub_10004FC7C();
        sub_1000176B0(v29, v30);
        *v31 = 0xD00000000000004DLL;
        v31[1] = 0x80000001000F4DC0;
        v32 = swift_storeEnumTagMultiPayload(v31, v29, 0);
        swift_willThrow(v32);
        sub_1000058DC();
        swift_bridgeObjectRelease();
      }
      else
      {
        v34 = v64[0];
        v35 = sub_10004FC40();
        v36 = sub_1000176B0((uint64_t)&type metadata for Result, v35);
        *(_QWORD *)v37 = v34;
        *(_QWORD *)(v37 + 8) = v26;
        *(_DWORD *)(v37 + 16) = v27;
        *(_QWORD *)(v37 + 24) = v28;
        swift_willThrow(v36);
      }
    }
    return swift_errorRelease(v63[0]);
  }
  else
  {
    swift_bridgeObjectRelease();
    return sub_1000059B0();
  }
}

void *sub_100072830()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0xD00000000000001ELL, 0x80000001000F4810, 0, 0);
  return memcpy(&unk_10012CE68, __src, 0xA8uLL);
}

uint64_t sub_100072884(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012CF10, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_1000728A8(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012CF28, 0x72506D6574737973, 0xEE006C6F636F746FLL);
}

uint64_t sub_1000728D4(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012CF40, 0xD000000000000010, 0x80000001000F4E10);
}

uint64_t sub_1000728F8@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[6];

  sub_100072930(v3);
  return sub_100072BC8((uint64_t)v3, a1);
}

void sub_100072930(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100127DC0 != -1)
    swift_once(&qword_100127DC0, sub_100072884);
  Row.get<A>(_:)();
  if (qword_100127DC8 != -1)
    swift_once(&qword_100127DC8, sub_1000728A8);
  Row.get<A>(_:)();
  if (qword_100127DD0 != -1)
    swift_once(&qword_100127DD0, sub_1000728D4);
  Row.get<A>(_:)();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v2;
  a1[3] = v3;
  a1[4] = v2;
  a1[5] = v3;
}

_QWORD *sub_100072AD8@<X0>(_QWORD *(*a1)(_QWORD *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  _QWORD v5[6];

  result = a1(v5);
  if (!v2)
    return (_QWORD *)sub_100072BC8((uint64_t)v5, a2);
  return result;
}

uint64_t sub_100072B20()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_100072BA8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000728F8(a1);
}

_QWORD *sub_100072BB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100072AD8(*(_QWORD *(**)(_QWORD *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_100072BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_10012A2C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for LNDefaultActionForSystemProtocolRecord(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for LNDefaultActionForSystemProtocolRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for LNDefaultActionForSystemProtocolRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for LNDefaultActionForSystemProtocolRecord(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for LNDefaultActionForSystemProtocolRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for LNDefaultActionForSystemProtocolRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNDefaultActionForSystemProtocolRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LNDefaultActionForSystemProtocolRecord()
{
  return &type metadata for LNDefaultActionForSystemProtocolRecord;
}

void sub_100072E24(uint64_t a1, uint64_t (*a2)(id, id))
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  id v7;
  id v8;
  __int128 v9;
  unint64_t v10;
  __int128 v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v5 = 0;
    do
    {
      v6 = v5;
      while (1)
      {
        if (v6 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v11 = *(_OWORD *)(a1 + 32 + 16 * v6);
        v5 = v6 + 1;
        v7 = (id)v11;
        v8 = *((id *)&v11 + 1);
        if ((a2(v7, v8) & 1) != 0)
          break;

        ++v6;
        if (v3 == v5)
          goto LABEL_13;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_100052790();
      v9 = v11;
      v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1)
      {
        sub_100052790();
        v9 = v11;
      }
      _swiftEmptyArrayStorage[2] = v10 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v10 + 4] = v9;
    }
    while (v3 - 1 != v6);
  }
LABEL_13:
  swift_bridgeObjectRelease(a1);
}

void sub_100072FA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      sub_1000527F8();
      if (v2 < 0)
        break;
      v3 = 0;
      while (v2 != v3)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
        else
          v4 = *(id *)(a1 + 8 * v3 + 32);
        v5 = v4;
        v6 = sub_100074C98(v4);

        v7 = _swiftEmptyArrayStorage[2];
        if (v7 >= _swiftEmptyArrayStorage[3] >> 1)
          sub_1000527F8();
        ++v3;
        _swiftEmptyArrayStorage[2] = v7 + 1;
        _swiftEmptyArrayStorage[v7 + 4] = v6;
        if (v2 == v3)
          goto LABEL_12;
      }
      __break(1u);
LABEL_14:
      if (a1 < 0)
        v8 = a1;
      else
        v8 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v2 = _CocoaArrayWrapper.endIndex.getter(v8);
      swift_bridgeObjectRelease(a1);
      if (!v2)
        goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_release();
  }
}

